
GPS-tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006490  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08006620  08006620  00016620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a04  08006a04  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006a04  08006a04  00016a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a0c  08006a0c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a0c  08006a0c  00016a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a10  08006a10  00016a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08006a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000238  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000040c  2000040c  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   000097f2  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001bc6  00000000  00000000  00029a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007b0  00000000  00000000  0002b600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005ed  00000000  00000000  0002bdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023a92  00000000  00000000  0002c39d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009933  00000000  00000000  0004fe2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c6bca  00000000  00000000  00059762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003058  00000000  00000000  0012032c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00123384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006608 	.word	0x08006608

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08006608 	.word	0x08006608

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2uiz>:
 8000b4c:	004a      	lsls	r2, r1, #1
 8000b4e:	d211      	bcs.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d211      	bcs.n	8000b7a <__aeabi_d2uiz+0x2e>
 8000b56:	d50d      	bpl.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d40e      	bmi.n	8000b80 <__aeabi_d2uiz+0x34>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_d2uiz+0x3a>
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ba0:	f000 b9a6 	b.w	8000ef0 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f83c 	bl	8000c28 <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2lz>:
 8000bbc:	b538      	push	{r3, r4, r5, lr}
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	460d      	mov	r5, r1
 8000bc6:	f7ff ff99 	bl	8000afc <__aeabi_dcmplt>
 8000bca:	b928      	cbnz	r0, 8000bd8 <__aeabi_d2lz+0x1c>
 8000bcc:	4620      	mov	r0, r4
 8000bce:	4629      	mov	r1, r5
 8000bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bd4:	f000 b80a 	b.w	8000bec <__aeabi_d2ulz>
 8000bd8:	4620      	mov	r0, r4
 8000bda:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000bde:	f000 f805 	bl	8000bec <__aeabi_d2ulz>
 8000be2:	4240      	negs	r0, r0
 8000be4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be8:	bd38      	pop	{r3, r4, r5, pc}
 8000bea:	bf00      	nop

08000bec <__aeabi_d2ulz>:
 8000bec:	b5d0      	push	{r4, r6, r7, lr}
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <__aeabi_d2ulz+0x34>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	4606      	mov	r6, r0
 8000bf4:	460f      	mov	r7, r1
 8000bf6:	f7ff fd0f 	bl	8000618 <__aeabi_dmul>
 8000bfa:	f7ff ffa7 	bl	8000b4c <__aeabi_d2uiz>
 8000bfe:	4604      	mov	r4, r0
 8000c00:	f7ff fc90 	bl	8000524 <__aeabi_ui2d>
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <__aeabi_d2ulz+0x38>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	f7ff fd06 	bl	8000618 <__aeabi_dmul>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	460b      	mov	r3, r1
 8000c10:	4630      	mov	r0, r6
 8000c12:	4639      	mov	r1, r7
 8000c14:	f7ff fb48 	bl	80002a8 <__aeabi_dsub>
 8000c18:	f7ff ff98 	bl	8000b4c <__aeabi_d2uiz>
 8000c1c:	4621      	mov	r1, r4
 8000c1e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c20:	3df00000 	.word	0x3df00000
 8000c24:	41f00000 	.word	0x41f00000

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <_ZN9GpsParser7addDataEPhh>:
		double latitude = 0;
		double longitude = 0;
		uint8_t satellitesNumber = 0;
		uint8_t fixQuality = 0;
	public:
		void addData(uint8_t *data, uint8_t size)
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	4613      	mov	r3, r2
 8000f00:	71fb      	strb	r3, [r7, #7]
		{
			for (int i = 0; i < size; i++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	e035      	b.n	8000f74 <_ZN9GpsParser7addDataEPhh+0x80>
			{
				if (data[i] == '$') {
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b24      	cmp	r3, #36	; 0x24
 8000f12:	d10e      	bne.n	8000f32 <_ZN9GpsParser7addDataEPhh+0x3e>
					parseDataNmeaSentence();
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f000 f837 	bl	8000f88 <_ZN9GpsParser21parseDataNmeaSentenceEv>
					bufferSize = 0;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
					memset(buffer, 0, maxBufferSize);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	1c58      	adds	r0, r3, #1
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	f003 fc44 	bl	80047ba <memset>
				}

				buffer[bufferSize] = data[i];
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	68ba      	ldr	r2, [r7, #8]
 8000f36:	4413      	add	r3, r2
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	f892 20ff 	ldrb.w	r2, [r2, #255]	; 0xff
 8000f3e:	4611      	mov	r1, r2
 8000f40:	781a      	ldrb	r2, [r3, #0]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	440b      	add	r3, r1
 8000f46:	705a      	strb	r2, [r3, #1]
				++bufferSize;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8000f4e:	3301      	adds	r3, #1
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff

				//buffer overflow should not happen. If will then clear buffer
				if (bufferSize >= maxBufferSize) {
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f893 20ff 	ldrb.w	r2, [r3, #255]	; 0xff
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d303      	bcc.n	8000f6e <_ZN9GpsParser7addDataEPhh+0x7a>
					bufferSize = 0;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
			for (int i = 0; i < size; i++)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3301      	adds	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	dbc5      	blt.n	8000f08 <_ZN9GpsParser7addDataEPhh+0x14>
				}
			}
		}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <_ZN9GpsParser21parseDataNmeaSentenceEv>:
	private:
		void parseDataNmeaSentence()
 8000f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f8c:	b091      	sub	sp, #68	; 0x44
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	60f8      	str	r0, [r7, #12]
		{
			char nmeaSentenceName[7] = {0, 0, 0, 0, 0, 0, 0};
 8000f92:	4a88      	ldr	r2, [pc, #544]	; (80011b4 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x22c>)
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f9c:	6018      	str	r0, [r3, #0]
 8000f9e:	3304      	adds	r3, #4
 8000fa0:	8019      	strh	r1, [r3, #0]
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	0c0a      	lsrs	r2, r1, #16
 8000fa6:	701a      	strb	r2, [r3, #0]
			strncpy(nmeaSentenceName, (const char *)buffer, 6);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	1c59      	adds	r1, r3, #1
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2206      	movs	r2, #6
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f003 fc28 	bl	8004808 <strncpy>

			if (strcmp(nmeaSentenceName, "$GPGGA") == 0)
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	497e      	ldr	r1, [pc, #504]	; (80011b8 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x230>)
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff f906 	bl	80001d0 <strcmp>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f040 80ee 	bne.w	80011a8 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x220>
					}

					nmeaSentenceSectionNumber++;
					parseBufferStart += nmeaSentenceSectionLen + 1;
				}
			}
 8000fcc:	466b      	mov	r3, sp
 8000fce:	60bb      	str	r3, [r7, #8]
				char parseBuffer[bufferSize + 1];
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8000fd6:	1c59      	adds	r1, r3, #1
 8000fd8:	1e4b      	subs	r3, r1, #1
 8000fda:	637b      	str	r3, [r7, #52]	; 0x34
 8000fdc:	460a      	mov	r2, r1
 8000fde:	2300      	movs	r3, #0
 8000fe0:	603a      	str	r2, [r7, #0]
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	00c3      	lsls	r3, r0, #3
 8000ff0:	6838      	ldr	r0, [r7, #0]
 8000ff2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ff6:	6838      	ldr	r0, [r7, #0]
 8000ff8:	00c2      	lsls	r2, r0, #3
 8000ffa:	460a      	mov	r2, r1
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	4692      	mov	sl, r2
 8001000:	469b      	mov	fp, r3
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	f04f 0300 	mov.w	r3, #0
 800100a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800100e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001012:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001016:	460b      	mov	r3, r1
 8001018:	3307      	adds	r3, #7
 800101a:	08db      	lsrs	r3, r3, #3
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	ebad 0d03 	sub.w	sp, sp, r3
 8001022:	466b      	mov	r3, sp
 8001024:	3300      	adds	r3, #0
 8001026:	633b      	str	r3, [r7, #48]	; 0x30
				strncpy(parseBuffer, (const char *)buffer, bufferSize);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	1c59      	adds	r1, r3, #1
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8001032:	461a      	mov	r2, r3
 8001034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001036:	f003 fbe7 	bl	8004808 <strncpy>
				parseBuffer[bufferSize] = '\0';
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8001040:	461a      	mov	r2, r3
 8001042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001044:	2100      	movs	r1, #0
 8001046:	5499      	strb	r1, [r3, r2]
				char* parseBufferStart = parseBuffer;
 8001048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800104a:	63fb      	str	r3, [r7, #60]	; 0x3c
				uint8_t nmeaSentenceSectionNumber = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				}
 8001052:	466b      	mov	r3, sp
 8001054:	461e      	mov	r6, r3
					char* delimiterPosition = strchr(parseBufferStart, ',');
 8001056:	212c      	movs	r1, #44	; 0x2c
 8001058:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800105a:	f003 fbb6 	bl	80047ca <strchr>
 800105e:	62f8      	str	r0, [r7, #44]	; 0x2c
					const size_t nmeaSentenceSectionLen = delimiterPosition != NULL ? delimiterPosition - parseBufferStart : strlen(parseBufferStart);
 8001060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <_ZN9GpsParser21parseDataNmeaSentenceEv+0xe6>
 8001066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	e003      	b.n	8001076 <_ZN9GpsParser21parseDataNmeaSentenceEv+0xee>
 800106e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001070:	f7ff f8b8 	bl	80001e4 <strlen>
 8001074:	4603      	mov	r3, r0
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
					char nmeaSentenceSection[nmeaSentenceSectionLen+1];
 8001078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107a:	3301      	adds	r3, #1
 800107c:	3b01      	subs	r3, #1
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
 8001080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001082:	3301      	adds	r3, #1
 8001084:	2200      	movs	r2, #0
 8001086:	461c      	mov	r4, r3
 8001088:	4615      	mov	r5, r2
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	00eb      	lsls	r3, r5, #3
 8001094:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001098:	00e2      	lsls	r2, r4, #3
 800109a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800109c:	3301      	adds	r3, #1
 800109e:	2200      	movs	r2, #0
 80010a0:	4698      	mov	r8, r3
 80010a2:	4691      	mov	r9, r2
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ba:	3301      	adds	r3, #1
 80010bc:	3307      	adds	r3, #7
 80010be:	08db      	lsrs	r3, r3, #3
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	ebad 0d03 	sub.w	sp, sp, r3
 80010c6:	466b      	mov	r3, sp
 80010c8:	3300      	adds	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
					memcpy(nmeaSentenceSection, parseBufferStart, nmeaSentenceSectionLen);
 80010cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80010d0:	6a38      	ldr	r0, [r7, #32]
 80010d2:	f003 fc20 	bl	8004916 <memcpy>
					if (nmeaSentenceSectionNumber == 1 && nmeaSentenceSectionLen > 0)
 80010d6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d111      	bne.n	8001102 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x17a>
 80010de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d00e      	beq.n	8001102 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x17a>
						size_t len = strlen(nmeaSentenceSection);
 80010e4:	6a38      	ldr	r0, [r7, #32]
 80010e6:	f7ff f87d 	bl	80001e4 <strlen>
 80010ea:	61f8      	str	r0, [r7, #28]
						if (len == 8) {
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	2b08      	cmp	r3, #8
 80010f0:	d107      	bne.n	8001102 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x17a>
							strncpy(this->timeUtc, nmeaSentenceSection, 8);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80010f8:	2208      	movs	r2, #8
 80010fa:	6a39      	ldr	r1, [r7, #32]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f003 fb83 	bl	8004808 <strncpy>
					if (nmeaSentenceSectionNumber == 2 && nmeaSentenceSectionLen > 0)
 8001102:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001106:	2b02      	cmp	r3, #2
 8001108:	d10c      	bne.n	8001124 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x19c>
 800110a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800110c:	2b00      	cmp	r3, #0
 800110e:	d009      	beq.n	8001124 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x19c>
						latitude = atof(nmeaSentenceSection);
 8001110:	6a38      	ldr	r0, [r7, #32]
 8001112:	f002 fba1 	bl	8003858 <atof>
 8001116:	eeb0 7a40 	vmov.f32	s14, s0
 800111a:	eef0 7a60 	vmov.f32	s15, s1
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	ed83 7b44 	vstr	d7, [r3, #272]	; 0x110
					if (nmeaSentenceSectionNumber == 4 && nmeaSentenceSectionLen > 0)
 8001124:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001128:	2b04      	cmp	r3, #4
 800112a:	d10c      	bne.n	8001146 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x1be>
 800112c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800112e:	2b00      	cmp	r3, #0
 8001130:	d009      	beq.n	8001146 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x1be>
						longitude = atof(nmeaSentenceSection);
 8001132:	6a38      	ldr	r0, [r7, #32]
 8001134:	f002 fb90 	bl	8003858 <atof>
 8001138:	eeb0 7a40 	vmov.f32	s14, s0
 800113c:	eef0 7a60 	vmov.f32	s15, s1
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
					if (nmeaSentenceSectionNumber == 6 && nmeaSentenceSectionLen > 0)
 8001146:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800114a:	2b06      	cmp	r3, #6
 800114c:	d10a      	bne.n	8001164 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x1dc>
 800114e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001150:	2b00      	cmp	r3, #0
 8001152:	d007      	beq.n	8001164 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x1dc>
						fixQuality = atoi(nmeaSentenceSection);
 8001154:	6a38      	ldr	r0, [r7, #32]
 8001156:	f002 fb82 	bl	800385e <atoi>
 800115a:	4603      	mov	r3, r0
 800115c:	b2da      	uxtb	r2, r3
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
					if (nmeaSentenceSectionNumber == 7 && nmeaSentenceSectionLen > 0)
 8001164:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001168:	2b07      	cmp	r3, #7
 800116a:	d10a      	bne.n	8001182 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x1fa>
 800116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116e:	2b00      	cmp	r3, #0
 8001170:	d007      	beq.n	8001182 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x1fa>
						satellitesNumber = atoi(nmeaSentenceSection);
 8001172:	6a38      	ldr	r0, [r7, #32]
 8001174:	f002 fb73 	bl	800385e <atoi>
 8001178:	4603      	mov	r3, r0
 800117a:	b2da      	uxtb	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
					if (delimiterPosition == NULL)
 8001182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001184:	2b00      	cmp	r3, #0
 8001186:	d103      	bne.n	8001190 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x208>
						break;
 8001188:	46b5      	mov	sp, r6
 800118a:	f8d7 d008 	ldr.w	sp, [r7, #8]
		}
 800118e:	e00b      	b.n	80011a8 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x220>
					nmeaSentenceSectionNumber++;
 8001190:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001194:	3301      	adds	r3, #1
 8001196:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					parseBufferStart += nmeaSentenceSectionLen + 1;
 800119a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119c:	3301      	adds	r3, #1
 800119e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011a0:	4413      	add	r3, r2
 80011a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011a4:	46b5      	mov	sp, r6
				}
 80011a6:	e754      	b.n	8001052 <_ZN9GpsParser21parseDataNmeaSentenceEv+0xca>
		}
 80011a8:	bf00      	nop
 80011aa:	3744      	adds	r7, #68	; 0x44
 80011ac:	46bd      	mov	sp, r7
 80011ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011b2:	bf00      	nop
 80011b4:	08006628 	.word	0x08006628
 80011b8:	08006620 	.word	0x08006620

080011bc <_ZN9GpsParserC1Ev>:
class GpsParser
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	22fe      	movs	r2, #254	; 0xfe
 80011c8:	701a      	strb	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	721a      	strb	r2, [r3, #8]
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	f04f 0300 	mov.w	r3, #0
 80011ea:	e9c1 2344 	strd	r2, r3, [r1, #272]	; 0x110
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	f04f 0300 	mov.w	r3, #0
 80011f8:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <applicationMain>:
};

void applicationMain(UART_HandleTypeDef huart1)
{
 800121c:	b084      	sub	sp, #16
 800121e:	b580      	push	{r7, lr}
 8001220:	b0cc      	sub	sp, #304	; 0x130
 8001222:	af00      	add	r7, sp, #0
 8001224:	f507 7c9c 	add.w	ip, r7, #312	; 0x138
 8001228:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	GpsParser gpsParser;
 800122c:	463b      	mov	r3, r7
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ffc4 	bl	80011bc <_ZN9GpsParserC1Ev>

	while (1)
	{
		memset(GPS_BUFFER, 0, GPS_BUFFER_SIZE);
 8001234:	2280      	movs	r2, #128	; 0x80
 8001236:	2100      	movs	r1, #0
 8001238:	4812      	ldr	r0, [pc, #72]	; (8001284 <applicationMain+0x68>)
 800123a:	f003 fabe 	bl	80047ba <memset>
		HAL_UART_Receive(&huart1, GPS_BUFFER, GPS_BUFFER_SIZE, 100);
 800123e:	2364      	movs	r3, #100	; 0x64
 8001240:	2280      	movs	r2, #128	; 0x80
 8001242:	4910      	ldr	r1, [pc, #64]	; (8001284 <applicationMain+0x68>)
 8001244:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8001248:	f001 fb48 	bl	80028dc <HAL_UART_Receive>

		//TODO refactor
		uint8_t size = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (size < GPS_BUFFER_SIZE && GPS_BUFFER[size] != 0) {
 8001252:	e004      	b.n	800125e <applicationMain+0x42>
			++size;
 8001254:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8001258:	3301      	adds	r3, #1
 800125a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (size < GPS_BUFFER_SIZE && GPS_BUFFER[size] != 0) {
 800125e:	f997 312f 	ldrsb.w	r3, [r7, #303]	; 0x12f
 8001262:	2b00      	cmp	r3, #0
 8001264:	db05      	blt.n	8001272 <applicationMain+0x56>
 8001266:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800126a:	4a06      	ldr	r2, [pc, #24]	; (8001284 <applicationMain+0x68>)
 800126c:	5cd3      	ldrb	r3, [r2, r3]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f0      	bne.n	8001254 <applicationMain+0x38>
		}

		gpsParser.addData(GPS_BUFFER, size);
 8001272:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 8001276:	463b      	mov	r3, r7
 8001278:	4902      	ldr	r1, [pc, #8]	; (8001284 <applicationMain+0x68>)
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fe3a 	bl	8000ef4 <_ZN9GpsParser7addDataEPhh>
	}
 8001280:	e7d8      	b.n	8001234 <applicationMain+0x18>
 8001282:	bf00      	nop
 8001284:	200001f0 	.word	0x200001f0

08001288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128a:	b08f      	sub	sp, #60	; 0x3c
 800128c:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800128e:	f000 fa8b 	bl	80017a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001292:	f000 f819 	bl	80012c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001296:	f000 f8ab 	bl	80013f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800129a:	f000 f87f 	bl	800139c <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  applicationMain(huart1);
 800129e:	4e09      	ldr	r6, [pc, #36]	; (80012c4 <main+0x3c>)
 80012a0:	466d      	mov	r5, sp
 80012a2:	f106 0410 	add.w	r4, r6, #16
 80012a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80012ba:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80012be:	f7ff ffad 	bl	800121c <applicationMain>

  while (1)
 80012c2:	e7fe      	b.n	80012c2 <main+0x3a>
 80012c4:	20000270 	.word	0x20000270

080012c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b094      	sub	sp, #80	; 0x50
 80012cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ce:	f107 0320 	add.w	r3, r7, #32
 80012d2:	2230      	movs	r2, #48	; 0x30
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f003 fa6f 	bl	80047ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012dc:	f107 030c 	add.w	r3, r7, #12
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	4b28      	ldr	r3, [pc, #160]	; (8001394 <SystemClock_Config+0xcc>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	4a27      	ldr	r2, [pc, #156]	; (8001394 <SystemClock_Config+0xcc>)
 80012f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fa:	6413      	str	r3, [r2, #64]	; 0x40
 80012fc:	4b25      	ldr	r3, [pc, #148]	; (8001394 <SystemClock_Config+0xcc>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001308:	2300      	movs	r3, #0
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	4b22      	ldr	r3, [pc, #136]	; (8001398 <SystemClock_Config+0xd0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a21      	ldr	r2, [pc, #132]	; (8001398 <SystemClock_Config+0xd0>)
 8001312:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <SystemClock_Config+0xd0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001324:	2301      	movs	r3, #1
 8001326:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001328:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132e:	2302      	movs	r3, #2
 8001330:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001332:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001336:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001338:	2304      	movs	r3, #4
 800133a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800133c:	23a8      	movs	r3, #168	; 0xa8
 800133e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001340:	2302      	movs	r3, #2
 8001342:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001344:	2304      	movs	r3, #4
 8001346:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001348:	f107 0320 	add.w	r3, r7, #32
 800134c:	4618      	mov	r0, r3
 800134e:	f000 fddd 	bl	8001f0c <HAL_RCC_OscConfig>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001358:	f000 f872 	bl	8001440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800135c:	230f      	movs	r3, #15
 800135e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001360:	2302      	movs	r3, #2
 8001362:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001368:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800136c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800136e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001372:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	2105      	movs	r1, #5
 800137a:	4618      	mov	r0, r3
 800137c:	f001 f83e 	bl	80023fc <HAL_RCC_ClockConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001386:	f000 f85b 	bl	8001440 <Error_Handler>
  }
}
 800138a:	bf00      	nop
 800138c:	3750      	adds	r7, #80	; 0x50
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40007000 	.word	0x40007000

0800139c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	; (80013ec <MX_USART1_UART_Init+0x50>)
 80013a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013c2:	220c      	movs	r2, #12
 80013c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013d4:	f001 fa32 	bl	800283c <HAL_UART_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013de:	f000 f82f 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000270 	.word	0x20000270
 80013ec:	40011000 	.word	0x40011000

080013f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <MX_GPIO_Init+0x4c>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a0f      	ldr	r2, [pc, #60]	; (800143c <MX_GPIO_Init+0x4c>)
 8001400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <MX_GPIO_Init+0x4c>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_GPIO_Init+0x4c>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a08      	ldr	r2, [pc, #32]	; (800143c <MX_GPIO_Init+0x4c>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_GPIO_Init+0x4c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800

08001440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001444:	b672      	cpsid	i
}
 8001446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001448:	e7fe      	b.n	8001448 <Error_Handler+0x8>
	...

0800144c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <HAL_MspInit+0x4c>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	4a0f      	ldr	r2, [pc, #60]	; (8001498 <HAL_MspInit+0x4c>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001460:	6453      	str	r3, [r2, #68]	; 0x44
 8001462:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <HAL_MspInit+0x4c>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_MspInit+0x4c>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	4a08      	ldr	r2, [pc, #32]	; (8001498 <HAL_MspInit+0x4c>)
 8001478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147c:	6413      	str	r3, [r2, #64]	; 0x40
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_MspInit+0x4c>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800

0800149c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	; 0x28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a1d      	ldr	r2, [pc, #116]	; (8001530 <HAL_UART_MspInit+0x94>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d134      	bne.n	8001528 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <HAL_UART_MspInit+0x98>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <HAL_UART_MspInit+0x98>)
 80014c8:	f043 0310 	orr.w	r3, r3, #16
 80014cc:	6453      	str	r3, [r2, #68]	; 0x44
 80014ce:	4b19      	ldr	r3, [pc, #100]	; (8001534 <HAL_UART_MspInit+0x98>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_UART_MspInit+0x98>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a14      	ldr	r2, [pc, #80]	; (8001534 <HAL_UART_MspInit+0x98>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_UART_MspInit+0x98>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 80014f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001504:	2303      	movs	r3, #3
 8001506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001508:	2307      	movs	r3, #7
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	4809      	ldr	r0, [pc, #36]	; (8001538 <HAL_UART_MspInit+0x9c>)
 8001514:	f000 fb5e 	bl	8001bd4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2100      	movs	r1, #0
 800151c:	2025      	movs	r0, #37	; 0x25
 800151e:	f000 fa90 	bl	8001a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001522:	2025      	movs	r0, #37	; 0x25
 8001524:	f000 faa9 	bl	8001a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001528:	bf00      	nop
 800152a:	3728      	adds	r7, #40	; 0x28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40011000 	.word	0x40011000
 8001534:	40023800 	.word	0x40023800
 8001538:	40020000 	.word	0x40020000

0800153c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001540:	e7fe      	b.n	8001540 <NMI_Handler+0x4>

08001542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <HardFault_Handler+0x4>

08001548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <MemManage_Handler+0x4>

0800154e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <BusFault_Handler+0x4>

08001554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <UsageFault_Handler+0x4>

0800155a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001588:	f000 f960 	bl	800184c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}

08001590 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <USART1_IRQHandler+0x10>)
 8001596:	f001 fa39 	bl	8002a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000270 	.word	0x20000270

080015a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return 1;
 80015a8:	2301      	movs	r3, #1
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <_kill>:

int _kill(int pid, int sig)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015be:	f003 f97d 	bl	80048bc <__errno>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2216      	movs	r2, #22
 80015c6:	601a      	str	r2, [r3, #0]
  return -1;
 80015c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <_exit>:

void _exit (int status)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ffe7 	bl	80015b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015e6:	e7fe      	b.n	80015e6 <_exit+0x12>

080015e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	e00a      	b.n	8001610 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015fa:	f3af 8000 	nop.w
 80015fe:	4601      	mov	r1, r0
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	60ba      	str	r2, [r7, #8]
 8001606:	b2ca      	uxtb	r2, r1
 8001608:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	3301      	adds	r3, #1
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	429a      	cmp	r2, r3
 8001616:	dbf0      	blt.n	80015fa <_read+0x12>
  }

  return len;
 8001618:	687b      	ldr	r3, [r7, #4]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b086      	sub	sp, #24
 8001626:	af00      	add	r7, sp, #0
 8001628:	60f8      	str	r0, [r7, #12]
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	e009      	b.n	8001648 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	1c5a      	adds	r2, r3, #1
 8001638:	60ba      	str	r2, [r7, #8]
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	3301      	adds	r3, #1
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	429a      	cmp	r2, r3
 800164e:	dbf1      	blt.n	8001634 <_write+0x12>
  }
  return len;
 8001650:	687b      	ldr	r3, [r7, #4]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <_close>:

int _close(int file)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001662:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001666:	4618      	mov	r0, r3
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001682:	605a      	str	r2, [r3, #4]
  return 0;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <_isatty>:

int _isatty(int file)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800169a:	2301      	movs	r3, #1
}
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016cc:	4a14      	ldr	r2, [pc, #80]	; (8001720 <_sbrk+0x5c>)
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <_sbrk+0x60>)
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <_sbrk+0x64>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d102      	bne.n	80016e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <_sbrk+0x64>)
 80016e2:	4a12      	ldr	r2, [pc, #72]	; (800172c <_sbrk+0x68>)
 80016e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <_sbrk+0x64>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d207      	bcs.n	8001704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f4:	f003 f8e2 	bl	80048bc <__errno>
 80016f8:	4603      	mov	r3, r0
 80016fa:	220c      	movs	r2, #12
 80016fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001702:	e009      	b.n	8001718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170a:	4b07      	ldr	r3, [pc, #28]	; (8001728 <_sbrk+0x64>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	4a05      	ldr	r2, [pc, #20]	; (8001728 <_sbrk+0x64>)
 8001714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001716:	68fb      	ldr	r3, [r7, #12]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20020000 	.word	0x20020000
 8001724:	00000400 	.word	0x00000400
 8001728:	200002b8 	.word	0x200002b8
 800172c:	20000410 	.word	0x20000410

08001730 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <SystemInit+0x20>)
 8001736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <SystemInit+0x20>)
 800173c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800178c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001758:	f7ff ffea 	bl	8001730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800175c:	480c      	ldr	r0, [pc, #48]	; (8001790 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800175e:	490d      	ldr	r1, [pc, #52]	; (8001794 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001760:	4a0d      	ldr	r2, [pc, #52]	; (8001798 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001764:	e002      	b.n	800176c <LoopCopyDataInit>

08001766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176a:	3304      	adds	r3, #4

0800176c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800176c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001770:	d3f9      	bcc.n	8001766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001772:	4a0a      	ldr	r2, [pc, #40]	; (800179c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001774:	4c0a      	ldr	r4, [pc, #40]	; (80017a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001778:	e001      	b.n	800177e <LoopFillZerobss>

0800177a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800177c:	3204      	adds	r2, #4

0800177e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001780:	d3fb      	bcc.n	800177a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001782:	f003 f8a1 	bl	80048c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001786:	f7ff fd7f 	bl	8001288 <main>
  bx  lr    
 800178a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800178c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001794:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001798:	08006a14 	.word	0x08006a14
  ldr r2, =_sbss
 800179c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80017a0:	2000040c 	.word	0x2000040c

080017a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a4:	e7fe      	b.n	80017a4 <ADC_IRQHandler>
	...

080017a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <HAL_Init+0x40>)
 80017b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <HAL_Init+0x40>)
 80017be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <HAL_Init+0x40>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <HAL_Init+0x40>)
 80017ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d0:	2003      	movs	r0, #3
 80017d2:	f000 f92b 	bl	8001a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017d6:	200f      	movs	r0, #15
 80017d8:	f000 f808 	bl	80017ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017dc:	f7ff fe36 	bl	800144c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023c00 	.word	0x40023c00

080017ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_InitTick+0x54>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_InitTick+0x58>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4619      	mov	r1, r3
 80017fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001802:	fbb3 f3f1 	udiv	r3, r3, r1
 8001806:	fbb2 f3f3 	udiv	r3, r2, r3
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f943 	bl	8001a96 <HAL_SYSTICK_Config>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e00e      	b.n	8001838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b0f      	cmp	r3, #15
 800181e:	d80a      	bhi.n	8001836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001820:	2200      	movs	r2, #0
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001828:	f000 f90b 	bl	8001a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800182c:	4a06      	ldr	r2, [pc, #24]	; (8001848 <HAL_InitTick+0x5c>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	e000      	b.n	8001838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000000 	.word	0x20000000
 8001844:	20000008 	.word	0x20000008
 8001848:	20000004 	.word	0x20000004

0800184c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_IncTick+0x20>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_IncTick+0x24>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4413      	add	r3, r2
 800185c:	4a04      	ldr	r2, [pc, #16]	; (8001870 <HAL_IncTick+0x24>)
 800185e:	6013      	str	r3, [r2, #0]
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000008 	.word	0x20000008
 8001870:	200002bc 	.word	0x200002bc

08001874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return uwTick;
 8001878:	4b03      	ldr	r3, [pc, #12]	; (8001888 <HAL_GetTick+0x14>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	200002bc 	.word	0x200002bc

0800188c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a8:	4013      	ands	r3, r2
 80018aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018be:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	60d3      	str	r3, [r2, #12]
}
 80018c4:	bf00      	nop
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <__NVIC_GetPriorityGrouping+0x18>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	0a1b      	lsrs	r3, r3, #8
 80018de:	f003 0307 	and.w	r3, r3, #7
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	db0b      	blt.n	800191a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	f003 021f 	and.w	r2, r3, #31
 8001908:	4907      	ldr	r1, [pc, #28]	; (8001928 <__NVIC_EnableIRQ+0x38>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	095b      	lsrs	r3, r3, #5
 8001910:	2001      	movs	r0, #1
 8001912:	fa00 f202 	lsl.w	r2, r0, r2
 8001916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000e100 	.word	0xe000e100

0800192c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	6039      	str	r1, [r7, #0]
 8001936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193c:	2b00      	cmp	r3, #0
 800193e:	db0a      	blt.n	8001956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	b2da      	uxtb	r2, r3
 8001944:	490c      	ldr	r1, [pc, #48]	; (8001978 <__NVIC_SetPriority+0x4c>)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	0112      	lsls	r2, r2, #4
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	440b      	add	r3, r1
 8001950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001954:	e00a      	b.n	800196c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4908      	ldr	r1, [pc, #32]	; (800197c <__NVIC_SetPriority+0x50>)
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	3b04      	subs	r3, #4
 8001964:	0112      	lsls	r2, r2, #4
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	440b      	add	r3, r1
 800196a:	761a      	strb	r2, [r3, #24]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000e100 	.word	0xe000e100
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001980:	b480      	push	{r7}
 8001982:	b089      	sub	sp, #36	; 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f1c3 0307 	rsb	r3, r3, #7
 800199a:	2b04      	cmp	r3, #4
 800199c:	bf28      	it	cs
 800199e:	2304      	movcs	r3, #4
 80019a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3304      	adds	r3, #4
 80019a6:	2b06      	cmp	r3, #6
 80019a8:	d902      	bls.n	80019b0 <NVIC_EncodePriority+0x30>
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3b03      	subs	r3, #3
 80019ae:	e000      	b.n	80019b2 <NVIC_EncodePriority+0x32>
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43da      	mvns	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	401a      	ands	r2, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	43d9      	mvns	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	4313      	orrs	r3, r2
         );
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3724      	adds	r7, #36	; 0x24
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f8:	d301      	bcc.n	80019fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00f      	b.n	8001a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fe:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <SysTick_Config+0x40>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a06:	210f      	movs	r1, #15
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a0c:	f7ff ff8e 	bl	800192c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <SysTick_Config+0x40>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a16:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <SysTick_Config+0x40>)
 8001a18:	2207      	movs	r2, #7
 8001a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	e000e010 	.word	0xe000e010

08001a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ff29 	bl	800188c <__NVIC_SetPriorityGrouping>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b086      	sub	sp, #24
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
 8001a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a54:	f7ff ff3e 	bl	80018d4 <__NVIC_GetPriorityGrouping>
 8001a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	6978      	ldr	r0, [r7, #20]
 8001a60:	f7ff ff8e 	bl	8001980 <NVIC_EncodePriority>
 8001a64:	4602      	mov	r2, r0
 8001a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff5d 	bl	800192c <__NVIC_SetPriority>
}
 8001a72:	bf00      	nop
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff31 	bl	80018f0 <__NVIC_EnableIRQ>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ffa2 	bl	80019e8 <SysTick_Config>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b084      	sub	sp, #16
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001abc:	f7ff feda 	bl	8001874 <HAL_GetTick>
 8001ac0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d008      	beq.n	8001ae0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2280      	movs	r2, #128	; 0x80
 8001ad2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e052      	b.n	8001b86 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0216 	bic.w	r2, r2, #22
 8001aee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	695a      	ldr	r2, [r3, #20]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001afe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d103      	bne.n	8001b10 <HAL_DMA_Abort+0x62>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d007      	beq.n	8001b20 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0208 	bic.w	r2, r2, #8
 8001b1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0201 	bic.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b30:	e013      	b.n	8001b5a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b32:	f7ff fe9f 	bl	8001874 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b05      	cmp	r3, #5
 8001b3e:	d90c      	bls.n	8001b5a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2220      	movs	r2, #32
 8001b44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2203      	movs	r2, #3
 8001b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e015      	b.n	8001b86 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1e4      	bne.n	8001b32 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6c:	223f      	movs	r2, #63	; 0x3f
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d004      	beq.n	8001bac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e00c      	b.n	8001bc6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2205      	movs	r2, #5
 8001bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b089      	sub	sp, #36	; 0x24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
 8001bee:	e16b      	b.n	8001ec8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	f040 815a 	bne.w	8001ec2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d005      	beq.n	8001c26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d130      	bne.n	8001c88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	2203      	movs	r2, #3
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 0201 	and.w	r2, r3, #1
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d017      	beq.n	8001cc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d123      	bne.n	8001d18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	08da      	lsrs	r2, r3, #3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3208      	adds	r2, #8
 8001cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	220f      	movs	r2, #15
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	08da      	lsrs	r2, r3, #3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3208      	adds	r2, #8
 8001d12:	69b9      	ldr	r1, [r7, #24]
 8001d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	2203      	movs	r2, #3
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0203 	and.w	r2, r3, #3
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80b4 	beq.w	8001ec2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	4b60      	ldr	r3, [pc, #384]	; (8001ee0 <HAL_GPIO_Init+0x30c>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	4a5f      	ldr	r2, [pc, #380]	; (8001ee0 <HAL_GPIO_Init+0x30c>)
 8001d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d68:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6a:	4b5d      	ldr	r3, [pc, #372]	; (8001ee0 <HAL_GPIO_Init+0x30c>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d76:	4a5b      	ldr	r2, [pc, #364]	; (8001ee4 <HAL_GPIO_Init+0x310>)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	089b      	lsrs	r3, r3, #2
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	220f      	movs	r2, #15
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a52      	ldr	r2, [pc, #328]	; (8001ee8 <HAL_GPIO_Init+0x314>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d02b      	beq.n	8001dfa <HAL_GPIO_Init+0x226>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a51      	ldr	r2, [pc, #324]	; (8001eec <HAL_GPIO_Init+0x318>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d025      	beq.n	8001df6 <HAL_GPIO_Init+0x222>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a50      	ldr	r2, [pc, #320]	; (8001ef0 <HAL_GPIO_Init+0x31c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d01f      	beq.n	8001df2 <HAL_GPIO_Init+0x21e>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4f      	ldr	r2, [pc, #316]	; (8001ef4 <HAL_GPIO_Init+0x320>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d019      	beq.n	8001dee <HAL_GPIO_Init+0x21a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4e      	ldr	r2, [pc, #312]	; (8001ef8 <HAL_GPIO_Init+0x324>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d013      	beq.n	8001dea <HAL_GPIO_Init+0x216>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4d      	ldr	r2, [pc, #308]	; (8001efc <HAL_GPIO_Init+0x328>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00d      	beq.n	8001de6 <HAL_GPIO_Init+0x212>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4c      	ldr	r2, [pc, #304]	; (8001f00 <HAL_GPIO_Init+0x32c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d007      	beq.n	8001de2 <HAL_GPIO_Init+0x20e>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4b      	ldr	r2, [pc, #300]	; (8001f04 <HAL_GPIO_Init+0x330>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d101      	bne.n	8001dde <HAL_GPIO_Init+0x20a>
 8001dda:	2307      	movs	r3, #7
 8001ddc:	e00e      	b.n	8001dfc <HAL_GPIO_Init+0x228>
 8001dde:	2308      	movs	r3, #8
 8001de0:	e00c      	b.n	8001dfc <HAL_GPIO_Init+0x228>
 8001de2:	2306      	movs	r3, #6
 8001de4:	e00a      	b.n	8001dfc <HAL_GPIO_Init+0x228>
 8001de6:	2305      	movs	r3, #5
 8001de8:	e008      	b.n	8001dfc <HAL_GPIO_Init+0x228>
 8001dea:	2304      	movs	r3, #4
 8001dec:	e006      	b.n	8001dfc <HAL_GPIO_Init+0x228>
 8001dee:	2303      	movs	r3, #3
 8001df0:	e004      	b.n	8001dfc <HAL_GPIO_Init+0x228>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e002      	b.n	8001dfc <HAL_GPIO_Init+0x228>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <HAL_GPIO_Init+0x228>
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	69fa      	ldr	r2, [r7, #28]
 8001dfe:	f002 0203 	and.w	r2, r2, #3
 8001e02:	0092      	lsls	r2, r2, #2
 8001e04:	4093      	lsls	r3, r2
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e0c:	4935      	ldr	r1, [pc, #212]	; (8001ee4 <HAL_GPIO_Init+0x310>)
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	089b      	lsrs	r3, r3, #2
 8001e12:	3302      	adds	r3, #2
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e1a:	4b3b      	ldr	r3, [pc, #236]	; (8001f08 <HAL_GPIO_Init+0x334>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e3e:	4a32      	ldr	r2, [pc, #200]	; (8001f08 <HAL_GPIO_Init+0x334>)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e44:	4b30      	ldr	r3, [pc, #192]	; (8001f08 <HAL_GPIO_Init+0x334>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e68:	4a27      	ldr	r2, [pc, #156]	; (8001f08 <HAL_GPIO_Init+0x334>)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e6e:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <HAL_GPIO_Init+0x334>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e92:	4a1d      	ldr	r2, [pc, #116]	; (8001f08 <HAL_GPIO_Init+0x334>)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e98:	4b1b      	ldr	r3, [pc, #108]	; (8001f08 <HAL_GPIO_Init+0x334>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ebc:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <HAL_GPIO_Init+0x334>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	61fb      	str	r3, [r7, #28]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	2b0f      	cmp	r3, #15
 8001ecc:	f67f ae90 	bls.w	8001bf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	bf00      	nop
 8001ed4:	3724      	adds	r7, #36	; 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40013800 	.word	0x40013800
 8001ee8:	40020000 	.word	0x40020000
 8001eec:	40020400 	.word	0x40020400
 8001ef0:	40020800 	.word	0x40020800
 8001ef4:	40020c00 	.word	0x40020c00
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40021400 	.word	0x40021400
 8001f00:	40021800 	.word	0x40021800
 8001f04:	40021c00 	.word	0x40021c00
 8001f08:	40013c00 	.word	0x40013c00

08001f0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e267      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d075      	beq.n	8002016 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f2a:	4b88      	ldr	r3, [pc, #544]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d00c      	beq.n	8001f50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f36:	4b85      	ldr	r3, [pc, #532]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d112      	bne.n	8001f68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f42:	4b82      	ldr	r3, [pc, #520]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f4e:	d10b      	bne.n	8001f68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f50:	4b7e      	ldr	r3, [pc, #504]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d05b      	beq.n	8002014 <HAL_RCC_OscConfig+0x108>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d157      	bne.n	8002014 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e242      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f70:	d106      	bne.n	8001f80 <HAL_RCC_OscConfig+0x74>
 8001f72:	4b76      	ldr	r3, [pc, #472]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a75      	ldr	r2, [pc, #468]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	e01d      	b.n	8001fbc <HAL_RCC_OscConfig+0xb0>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f88:	d10c      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x98>
 8001f8a:	4b70      	ldr	r3, [pc, #448]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a6f      	ldr	r2, [pc, #444]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	4b6d      	ldr	r3, [pc, #436]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a6c      	ldr	r2, [pc, #432]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	e00b      	b.n	8001fbc <HAL_RCC_OscConfig+0xb0>
 8001fa4:	4b69      	ldr	r3, [pc, #420]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a68      	ldr	r2, [pc, #416]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	4b66      	ldr	r3, [pc, #408]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a65      	ldr	r2, [pc, #404]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d013      	beq.n	8001fec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7ff fc56 	bl	8001874 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fcc:	f7ff fc52 	bl	8001874 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b64      	cmp	r3, #100	; 0x64
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e207      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fde:	4b5b      	ldr	r3, [pc, #364]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0xc0>
 8001fea:	e014      	b.n	8002016 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7ff fc42 	bl	8001874 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff4:	f7ff fc3e 	bl	8001874 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b64      	cmp	r3, #100	; 0x64
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e1f3      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002006:	4b51      	ldr	r3, [pc, #324]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0xe8>
 8002012:	e000      	b.n	8002016 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d063      	beq.n	80020ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002022:	4b4a      	ldr	r3, [pc, #296]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00b      	beq.n	8002046 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800202e:	4b47      	ldr	r3, [pc, #284]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002036:	2b08      	cmp	r3, #8
 8002038:	d11c      	bne.n	8002074 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800203a:	4b44      	ldr	r3, [pc, #272]	; (800214c <HAL_RCC_OscConfig+0x240>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d116      	bne.n	8002074 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002046:	4b41      	ldr	r3, [pc, #260]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d005      	beq.n	800205e <HAL_RCC_OscConfig+0x152>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d001      	beq.n	800205e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e1c7      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205e:	4b3b      	ldr	r3, [pc, #236]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4937      	ldr	r1, [pc, #220]	; (800214c <HAL_RCC_OscConfig+0x240>)
 800206e:	4313      	orrs	r3, r2
 8002070:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002072:	e03a      	b.n	80020ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d020      	beq.n	80020be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800207c:	4b34      	ldr	r3, [pc, #208]	; (8002150 <HAL_RCC_OscConfig+0x244>)
 800207e:	2201      	movs	r2, #1
 8002080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002082:	f7ff fbf7 	bl	8001874 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800208a:	f7ff fbf3 	bl	8001874 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e1a8      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209c:	4b2b      	ldr	r3, [pc, #172]	; (800214c <HAL_RCC_OscConfig+0x240>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0f0      	beq.n	800208a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a8:	4b28      	ldr	r3, [pc, #160]	; (800214c <HAL_RCC_OscConfig+0x240>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4925      	ldr	r1, [pc, #148]	; (800214c <HAL_RCC_OscConfig+0x240>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	600b      	str	r3, [r1, #0]
 80020bc:	e015      	b.n	80020ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020be:	4b24      	ldr	r3, [pc, #144]	; (8002150 <HAL_RCC_OscConfig+0x244>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7ff fbd6 	bl	8001874 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020cc:	f7ff fbd2 	bl	8001874 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e187      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020de:	4b1b      	ldr	r3, [pc, #108]	; (800214c <HAL_RCC_OscConfig+0x240>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d036      	beq.n	8002164 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d016      	beq.n	800212c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020fe:	4b15      	ldr	r3, [pc, #84]	; (8002154 <HAL_RCC_OscConfig+0x248>)
 8002100:	2201      	movs	r2, #1
 8002102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002104:	f7ff fbb6 	bl	8001874 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800210c:	f7ff fbb2 	bl	8001874 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e167      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_RCC_OscConfig+0x240>)
 8002120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0x200>
 800212a:	e01b      	b.n	8002164 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800212c:	4b09      	ldr	r3, [pc, #36]	; (8002154 <HAL_RCC_OscConfig+0x248>)
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002132:	f7ff fb9f 	bl	8001874 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002138:	e00e      	b.n	8002158 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800213a:	f7ff fb9b 	bl	8001874 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d907      	bls.n	8002158 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e150      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
 800214c:	40023800 	.word	0x40023800
 8002150:	42470000 	.word	0x42470000
 8002154:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002158:	4b88      	ldr	r3, [pc, #544]	; (800237c <HAL_RCC_OscConfig+0x470>)
 800215a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1ea      	bne.n	800213a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 8097 	beq.w	80022a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002172:	2300      	movs	r3, #0
 8002174:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002176:	4b81      	ldr	r3, [pc, #516]	; (800237c <HAL_RCC_OscConfig+0x470>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10f      	bne.n	80021a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	4b7d      	ldr	r3, [pc, #500]	; (800237c <HAL_RCC_OscConfig+0x470>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	4a7c      	ldr	r2, [pc, #496]	; (800237c <HAL_RCC_OscConfig+0x470>)
 800218c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002190:	6413      	str	r3, [r2, #64]	; 0x40
 8002192:	4b7a      	ldr	r3, [pc, #488]	; (800237c <HAL_RCC_OscConfig+0x470>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219e:	2301      	movs	r3, #1
 80021a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a2:	4b77      	ldr	r3, [pc, #476]	; (8002380 <HAL_RCC_OscConfig+0x474>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d118      	bne.n	80021e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ae:	4b74      	ldr	r3, [pc, #464]	; (8002380 <HAL_RCC_OscConfig+0x474>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a73      	ldr	r2, [pc, #460]	; (8002380 <HAL_RCC_OscConfig+0x474>)
 80021b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ba:	f7ff fb5b 	bl	8001874 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c2:	f7ff fb57 	bl	8001874 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e10c      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d4:	4b6a      	ldr	r3, [pc, #424]	; (8002380 <HAL_RCC_OscConfig+0x474>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d106      	bne.n	80021f6 <HAL_RCC_OscConfig+0x2ea>
 80021e8:	4b64      	ldr	r3, [pc, #400]	; (800237c <HAL_RCC_OscConfig+0x470>)
 80021ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ec:	4a63      	ldr	r2, [pc, #396]	; (800237c <HAL_RCC_OscConfig+0x470>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6713      	str	r3, [r2, #112]	; 0x70
 80021f4:	e01c      	b.n	8002230 <HAL_RCC_OscConfig+0x324>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	2b05      	cmp	r3, #5
 80021fc:	d10c      	bne.n	8002218 <HAL_RCC_OscConfig+0x30c>
 80021fe:	4b5f      	ldr	r3, [pc, #380]	; (800237c <HAL_RCC_OscConfig+0x470>)
 8002200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002202:	4a5e      	ldr	r2, [pc, #376]	; (800237c <HAL_RCC_OscConfig+0x470>)
 8002204:	f043 0304 	orr.w	r3, r3, #4
 8002208:	6713      	str	r3, [r2, #112]	; 0x70
 800220a:	4b5c      	ldr	r3, [pc, #368]	; (800237c <HAL_RCC_OscConfig+0x470>)
 800220c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220e:	4a5b      	ldr	r2, [pc, #364]	; (800237c <HAL_RCC_OscConfig+0x470>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6713      	str	r3, [r2, #112]	; 0x70
 8002216:	e00b      	b.n	8002230 <HAL_RCC_OscConfig+0x324>
 8002218:	4b58      	ldr	r3, [pc, #352]	; (800237c <HAL_RCC_OscConfig+0x470>)
 800221a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221c:	4a57      	ldr	r2, [pc, #348]	; (800237c <HAL_RCC_OscConfig+0x470>)
 800221e:	f023 0301 	bic.w	r3, r3, #1
 8002222:	6713      	str	r3, [r2, #112]	; 0x70
 8002224:	4b55      	ldr	r3, [pc, #340]	; (800237c <HAL_RCC_OscConfig+0x470>)
 8002226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002228:	4a54      	ldr	r2, [pc, #336]	; (800237c <HAL_RCC_OscConfig+0x470>)
 800222a:	f023 0304 	bic.w	r3, r3, #4
 800222e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d015      	beq.n	8002264 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002238:	f7ff fb1c 	bl	8001874 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223e:	e00a      	b.n	8002256 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002240:	f7ff fb18 	bl	8001874 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	f241 3288 	movw	r2, #5000	; 0x1388
 800224e:	4293      	cmp	r3, r2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e0cb      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002256:	4b49      	ldr	r3, [pc, #292]	; (800237c <HAL_RCC_OscConfig+0x470>)
 8002258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0ee      	beq.n	8002240 <HAL_RCC_OscConfig+0x334>
 8002262:	e014      	b.n	800228e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002264:	f7ff fb06 	bl	8001874 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800226a:	e00a      	b.n	8002282 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800226c:	f7ff fb02 	bl	8001874 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	; 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e0b5      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002282:	4b3e      	ldr	r3, [pc, #248]	; (800237c <HAL_RCC_OscConfig+0x470>)
 8002284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1ee      	bne.n	800226c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800228e:	7dfb      	ldrb	r3, [r7, #23]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d105      	bne.n	80022a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002294:	4b39      	ldr	r3, [pc, #228]	; (800237c <HAL_RCC_OscConfig+0x470>)
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	4a38      	ldr	r2, [pc, #224]	; (800237c <HAL_RCC_OscConfig+0x470>)
 800229a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800229e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 80a1 	beq.w	80023ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022aa:	4b34      	ldr	r3, [pc, #208]	; (800237c <HAL_RCC_OscConfig+0x470>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d05c      	beq.n	8002370 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d141      	bne.n	8002342 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022be:	4b31      	ldr	r3, [pc, #196]	; (8002384 <HAL_RCC_OscConfig+0x478>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7ff fad6 	bl	8001874 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022cc:	f7ff fad2 	bl	8001874 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e087      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022de:	4b27      	ldr	r3, [pc, #156]	; (800237c <HAL_RCC_OscConfig+0x470>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69da      	ldr	r2, [r3, #28]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	019b      	lsls	r3, r3, #6
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002300:	085b      	lsrs	r3, r3, #1
 8002302:	3b01      	subs	r3, #1
 8002304:	041b      	lsls	r3, r3, #16
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	061b      	lsls	r3, r3, #24
 800230e:	491b      	ldr	r1, [pc, #108]	; (800237c <HAL_RCC_OscConfig+0x470>)
 8002310:	4313      	orrs	r3, r2
 8002312:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002314:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <HAL_RCC_OscConfig+0x478>)
 8002316:	2201      	movs	r2, #1
 8002318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231a:	f7ff faab 	bl	8001874 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002322:	f7ff faa7 	bl	8001874 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e05c      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002334:	4b11      	ldr	r3, [pc, #68]	; (800237c <HAL_RCC_OscConfig+0x470>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x416>
 8002340:	e054      	b.n	80023ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <HAL_RCC_OscConfig+0x478>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7ff fa94 	bl	8001874 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002350:	f7ff fa90 	bl	8001874 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e045      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002362:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_RCC_OscConfig+0x470>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x444>
 800236e:	e03d      	b.n	80023ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d107      	bne.n	8002388 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e038      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
 800237c:	40023800 	.word	0x40023800
 8002380:	40007000 	.word	0x40007000
 8002384:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002388:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_RCC_OscConfig+0x4ec>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d028      	beq.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d121      	bne.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d11a      	bne.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023b8:	4013      	ands	r3, r2
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d111      	bne.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ce:	085b      	lsrs	r3, r3, #1
 80023d0:	3b01      	subs	r3, #1
 80023d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d107      	bne.n	80023e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40023800 	.word	0x40023800

080023fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0cc      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002410:	4b68      	ldr	r3, [pc, #416]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d90c      	bls.n	8002438 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241e:	4b65      	ldr	r3, [pc, #404]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b63      	ldr	r3, [pc, #396]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0b8      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d020      	beq.n	8002486 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002450:	4b59      	ldr	r3, [pc, #356]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	4a58      	ldr	r2, [pc, #352]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800245a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002468:	4b53      	ldr	r3, [pc, #332]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	4a52      	ldr	r2, [pc, #328]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002472:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002474:	4b50      	ldr	r3, [pc, #320]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	494d      	ldr	r1, [pc, #308]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	4313      	orrs	r3, r2
 8002484:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d044      	beq.n	800251c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249a:	4b47      	ldr	r3, [pc, #284]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d119      	bne.n	80024da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e07f      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d003      	beq.n	80024ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d107      	bne.n	80024ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ba:	4b3f      	ldr	r3, [pc, #252]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d109      	bne.n	80024da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e06f      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ca:	4b3b      	ldr	r3, [pc, #236]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e067      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024da:	4b37      	ldr	r3, [pc, #220]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f023 0203 	bic.w	r2, r3, #3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	4934      	ldr	r1, [pc, #208]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024ec:	f7ff f9c2 	bl	8001874 <HAL_GetTick>
 80024f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f2:	e00a      	b.n	800250a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f4:	f7ff f9be 	bl	8001874 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002502:	4293      	cmp	r3, r2
 8002504:	d901      	bls.n	800250a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e04f      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250a:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 020c 	and.w	r2, r3, #12
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	429a      	cmp	r2, r3
 800251a:	d1eb      	bne.n	80024f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800251c:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d20c      	bcs.n	8002544 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252a:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002532:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d001      	beq.n	8002544 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e032      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002550:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4916      	ldr	r1, [pc, #88]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	4313      	orrs	r3, r2
 8002560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800256e:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	490e      	ldr	r1, [pc, #56]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	4313      	orrs	r3, r2
 8002580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002582:	f000 f821 	bl	80025c8 <HAL_RCC_GetSysClockFreq>
 8002586:	4602      	mov	r2, r0
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	490a      	ldr	r1, [pc, #40]	; (80025bc <HAL_RCC_ClockConfig+0x1c0>)
 8002594:	5ccb      	ldrb	r3, [r1, r3]
 8002596:	fa22 f303 	lsr.w	r3, r2, r3
 800259a:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <HAL_RCC_ClockConfig+0x1c4>)
 800259c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_RCC_ClockConfig+0x1c8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff f922 	bl	80017ec <HAL_InitTick>

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40023c00 	.word	0x40023c00
 80025b8:	40023800 	.word	0x40023800
 80025bc:	08006630 	.word	0x08006630
 80025c0:	20000000 	.word	0x20000000
 80025c4:	20000004 	.word	0x20000004

080025c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025cc:	b094      	sub	sp, #80	; 0x50
 80025ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	647b      	str	r3, [r7, #68]	; 0x44
 80025d4:	2300      	movs	r3, #0
 80025d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025d8:	2300      	movs	r3, #0
 80025da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025e0:	4b79      	ldr	r3, [pc, #484]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d00d      	beq.n	8002608 <HAL_RCC_GetSysClockFreq+0x40>
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	f200 80e1 	bhi.w	80027b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <HAL_RCC_GetSysClockFreq+0x34>
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d003      	beq.n	8002602 <HAL_RCC_GetSysClockFreq+0x3a>
 80025fa:	e0db      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025fc:	4b73      	ldr	r3, [pc, #460]	; (80027cc <HAL_RCC_GetSysClockFreq+0x204>)
 80025fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002600:	e0db      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002602:	4b73      	ldr	r3, [pc, #460]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002604:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002606:	e0d8      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002608:	4b6f      	ldr	r3, [pc, #444]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002610:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002612:	4b6d      	ldr	r3, [pc, #436]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d063      	beq.n	80026e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800261e:	4b6a      	ldr	r3, [pc, #424]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	099b      	lsrs	r3, r3, #6
 8002624:	2200      	movs	r2, #0
 8002626:	63bb      	str	r3, [r7, #56]	; 0x38
 8002628:	63fa      	str	r2, [r7, #60]	; 0x3c
 800262a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002630:	633b      	str	r3, [r7, #48]	; 0x30
 8002632:	2300      	movs	r3, #0
 8002634:	637b      	str	r3, [r7, #52]	; 0x34
 8002636:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800263a:	4622      	mov	r2, r4
 800263c:	462b      	mov	r3, r5
 800263e:	f04f 0000 	mov.w	r0, #0
 8002642:	f04f 0100 	mov.w	r1, #0
 8002646:	0159      	lsls	r1, r3, #5
 8002648:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800264c:	0150      	lsls	r0, r2, #5
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4621      	mov	r1, r4
 8002654:	1a51      	subs	r1, r2, r1
 8002656:	6139      	str	r1, [r7, #16]
 8002658:	4629      	mov	r1, r5
 800265a:	eb63 0301 	sbc.w	r3, r3, r1
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800266c:	4659      	mov	r1, fp
 800266e:	018b      	lsls	r3, r1, #6
 8002670:	4651      	mov	r1, sl
 8002672:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002676:	4651      	mov	r1, sl
 8002678:	018a      	lsls	r2, r1, #6
 800267a:	4651      	mov	r1, sl
 800267c:	ebb2 0801 	subs.w	r8, r2, r1
 8002680:	4659      	mov	r1, fp
 8002682:	eb63 0901 	sbc.w	r9, r3, r1
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002692:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002696:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800269a:	4690      	mov	r8, r2
 800269c:	4699      	mov	r9, r3
 800269e:	4623      	mov	r3, r4
 80026a0:	eb18 0303 	adds.w	r3, r8, r3
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	462b      	mov	r3, r5
 80026a8:	eb49 0303 	adc.w	r3, r9, r3
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026ba:	4629      	mov	r1, r5
 80026bc:	024b      	lsls	r3, r1, #9
 80026be:	4621      	mov	r1, r4
 80026c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026c4:	4621      	mov	r1, r4
 80026c6:	024a      	lsls	r2, r1, #9
 80026c8:	4610      	mov	r0, r2
 80026ca:	4619      	mov	r1, r3
 80026cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ce:	2200      	movs	r2, #0
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026d8:	f7fe fa58 	bl	8000b8c <__aeabi_uldivmod>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4613      	mov	r3, r2
 80026e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026e4:	e058      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e6:	4b38      	ldr	r3, [pc, #224]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	099b      	lsrs	r3, r3, #6
 80026ec:	2200      	movs	r2, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	4611      	mov	r1, r2
 80026f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026f6:	623b      	str	r3, [r7, #32]
 80026f8:	2300      	movs	r3, #0
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
 80026fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002700:	4642      	mov	r2, r8
 8002702:	464b      	mov	r3, r9
 8002704:	f04f 0000 	mov.w	r0, #0
 8002708:	f04f 0100 	mov.w	r1, #0
 800270c:	0159      	lsls	r1, r3, #5
 800270e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002712:	0150      	lsls	r0, r2, #5
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4641      	mov	r1, r8
 800271a:	ebb2 0a01 	subs.w	sl, r2, r1
 800271e:	4649      	mov	r1, r9
 8002720:	eb63 0b01 	sbc.w	fp, r3, r1
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002730:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002734:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002738:	ebb2 040a 	subs.w	r4, r2, sl
 800273c:	eb63 050b 	sbc.w	r5, r3, fp
 8002740:	f04f 0200 	mov.w	r2, #0
 8002744:	f04f 0300 	mov.w	r3, #0
 8002748:	00eb      	lsls	r3, r5, #3
 800274a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800274e:	00e2      	lsls	r2, r4, #3
 8002750:	4614      	mov	r4, r2
 8002752:	461d      	mov	r5, r3
 8002754:	4643      	mov	r3, r8
 8002756:	18e3      	adds	r3, r4, r3
 8002758:	603b      	str	r3, [r7, #0]
 800275a:	464b      	mov	r3, r9
 800275c:	eb45 0303 	adc.w	r3, r5, r3
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	f04f 0300 	mov.w	r3, #0
 800276a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800276e:	4629      	mov	r1, r5
 8002770:	028b      	lsls	r3, r1, #10
 8002772:	4621      	mov	r1, r4
 8002774:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002778:	4621      	mov	r1, r4
 800277a:	028a      	lsls	r2, r1, #10
 800277c:	4610      	mov	r0, r2
 800277e:	4619      	mov	r1, r3
 8002780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002782:	2200      	movs	r2, #0
 8002784:	61bb      	str	r3, [r7, #24]
 8002786:	61fa      	str	r2, [r7, #28]
 8002788:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800278c:	f7fe f9fe 	bl	8000b8c <__aeabi_uldivmod>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4613      	mov	r3, r2
 8002796:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	0c1b      	lsrs	r3, r3, #16
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	3301      	adds	r3, #1
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80027a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027b2:	e002      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <HAL_RCC_GetSysClockFreq+0x204>)
 80027b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3750      	adds	r7, #80	; 0x50
 80027c0:	46bd      	mov	sp, r7
 80027c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027c6:	bf00      	nop
 80027c8:	40023800 	.word	0x40023800
 80027cc:	00f42400 	.word	0x00f42400
 80027d0:	007a1200 	.word	0x007a1200

080027d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027d8:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027da:	681b      	ldr	r3, [r3, #0]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	20000000 	.word	0x20000000

080027ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027f0:	f7ff fff0 	bl	80027d4 <HAL_RCC_GetHCLKFreq>
 80027f4:	4602      	mov	r2, r0
 80027f6:	4b05      	ldr	r3, [pc, #20]	; (800280c <HAL_RCC_GetPCLK1Freq+0x20>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	0a9b      	lsrs	r3, r3, #10
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	4903      	ldr	r1, [pc, #12]	; (8002810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002802:	5ccb      	ldrb	r3, [r1, r3]
 8002804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002808:	4618      	mov	r0, r3
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40023800 	.word	0x40023800
 8002810:	08006640 	.word	0x08006640

08002814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002818:	f7ff ffdc 	bl	80027d4 <HAL_RCC_GetHCLKFreq>
 800281c:	4602      	mov	r2, r0
 800281e:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	0b5b      	lsrs	r3, r3, #13
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	4903      	ldr	r1, [pc, #12]	; (8002838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800282a:	5ccb      	ldrb	r3, [r1, r3]
 800282c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002830:	4618      	mov	r0, r3
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40023800 	.word	0x40023800
 8002838:	08006640 	.word	0x08006640

0800283c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e042      	b.n	80028d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7fe fe1a 	bl	800149c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2224      	movs	r2, #36	; 0x24
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800287e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 fd75 	bl	8003370 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002894:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08a      	sub	sp, #40	; 0x28
 80028e0:	af02      	add	r7, sp, #8
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	603b      	str	r3, [r7, #0]
 80028e8:	4613      	mov	r3, r2
 80028ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b20      	cmp	r3, #32
 80028fa:	f040 8081 	bne.w	8002a00 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <HAL_UART_Receive+0x2e>
 8002904:	88fb      	ldrh	r3, [r7, #6]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e079      	b.n	8002a02 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2222      	movs	r2, #34	; 0x22
 8002918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002922:	f7fe ffa7 	bl	8001874 <HAL_GetTick>
 8002926:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	88fa      	ldrh	r2, [r7, #6]
 800292c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	88fa      	ldrh	r2, [r7, #6]
 8002932:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800293c:	d108      	bne.n	8002950 <HAL_UART_Receive+0x74>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d104      	bne.n	8002950 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	61bb      	str	r3, [r7, #24]
 800294e:	e003      	b.n	8002958 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002954:	2300      	movs	r3, #0
 8002956:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002958:	e047      	b.n	80029ea <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2200      	movs	r2, #0
 8002962:	2120      	movs	r1, #32
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 fb0d 	bl	8002f84 <UART_WaitOnFlagUntilTimeout>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e042      	b.n	8002a02 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10c      	bne.n	800299c <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	b29b      	uxth	r3, r3
 800298a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800298e:	b29a      	uxth	r2, r3
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	3302      	adds	r3, #2
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	e01f      	b.n	80029dc <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a4:	d007      	beq.n	80029b6 <HAL_UART_Receive+0xda>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10a      	bne.n	80029c4 <HAL_UART_Receive+0xe8>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d106      	bne.n	80029c4 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	e008      	b.n	80029d6 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3301      	adds	r3, #1
 80029da:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1b2      	bne.n	800295a <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2220      	movs	r2, #32
 80029f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80029fc:	2300      	movs	r3, #0
 80029fe:	e000      	b.n	8002a02 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002a00:	2302      	movs	r3, #2
  }
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3720      	adds	r7, #32
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b0ba      	sub	sp, #232	; 0xe8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002a4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10f      	bne.n	8002a72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a56:	f003 0320 	and.w	r3, r3, #32
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d009      	beq.n	8002a72 <HAL_UART_IRQHandler+0x66>
 8002a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fbc2 	bl	80031f4 <UART_Receive_IT>
      return;
 8002a70:	e25b      	b.n	8002f2a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 80de 	beq.w	8002c38 <HAL_UART_IRQHandler+0x22c>
 8002a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d106      	bne.n	8002a96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 80d1 	beq.w	8002c38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00b      	beq.n	8002aba <HAL_UART_IRQHandler+0xae>
 8002aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	f043 0201 	orr.w	r2, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00b      	beq.n	8002ade <HAL_UART_IRQHandler+0xd2>
 8002ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	f043 0202 	orr.w	r2, r3, #2
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00b      	beq.n	8002b02 <HAL_UART_IRQHandler+0xf6>
 8002aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	f043 0204 	orr.w	r2, r3, #4
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d011      	beq.n	8002b32 <HAL_UART_IRQHandler+0x126>
 8002b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b12:	f003 0320 	and.w	r3, r3, #32
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d105      	bne.n	8002b26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d005      	beq.n	8002b32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f043 0208 	orr.w	r2, r3, #8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 81f2 	beq.w	8002f20 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b40:	f003 0320 	and.w	r3, r3, #32
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_UART_IRQHandler+0x14e>
 8002b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d002      	beq.n	8002b5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fb4d 	bl	80031f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b64:	2b40      	cmp	r3, #64	; 0x40
 8002b66:	bf0c      	ite	eq
 8002b68:	2301      	moveq	r3, #1
 8002b6a:	2300      	movne	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d103      	bne.n	8002b86 <HAL_UART_IRQHandler+0x17a>
 8002b7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d04f      	beq.n	8002c26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fa55 	bl	8003036 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b96:	2b40      	cmp	r3, #64	; 0x40
 8002b98:	d141      	bne.n	8002c1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	3314      	adds	r3, #20
 8002ba0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ba8:	e853 3f00 	ldrex	r3, [r3]
 8002bac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002bb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	3314      	adds	r3, #20
 8002bc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002bc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002bca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002bd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002bd6:	e841 2300 	strex	r3, r2, [r1]
 8002bda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002bde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1d9      	bne.n	8002b9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d013      	beq.n	8002c16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf2:	4a7e      	ldr	r2, [pc, #504]	; (8002dec <HAL_UART_IRQHandler+0x3e0>)
 8002bf4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe ffc7 	bl	8001b8e <HAL_DMA_Abort_IT>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d016      	beq.n	8002c34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c10:	4610      	mov	r0, r2
 8002c12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c14:	e00e      	b.n	8002c34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f99e 	bl	8002f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c1c:	e00a      	b.n	8002c34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f99a 	bl	8002f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c24:	e006      	b.n	8002c34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f996 	bl	8002f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002c32:	e175      	b.n	8002f20 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c34:	bf00      	nop
    return;
 8002c36:	e173      	b.n	8002f20 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	f040 814f 	bne.w	8002ee0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 8148 	beq.w	8002ee0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 8141 	beq.w	8002ee0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7e:	2b40      	cmp	r3, #64	; 0x40
 8002c80:	f040 80b6 	bne.w	8002df0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 8145 	beq.w	8002f24 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	f080 813e 	bcs.w	8002f24 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cba:	f000 8088 	beq.w	8002dce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	330c      	adds	r3, #12
 8002cc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ccc:	e853 3f00 	ldrex	r3, [r3]
 8002cd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002cd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	330c      	adds	r3, #12
 8002ce6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002cea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002cee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002cf6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002cfa:	e841 2300 	strex	r3, r2, [r1]
 8002cfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1d9      	bne.n	8002cbe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	3314      	adds	r3, #20
 8002d10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d14:	e853 3f00 	ldrex	r3, [r3]
 8002d18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d1c:	f023 0301 	bic.w	r3, r3, #1
 8002d20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	3314      	adds	r3, #20
 8002d2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d3a:	e841 2300 	strex	r3, r2, [r1]
 8002d3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1e1      	bne.n	8002d0a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	3314      	adds	r3, #20
 8002d4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d50:	e853 3f00 	ldrex	r3, [r3]
 8002d54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	3314      	adds	r3, #20
 8002d66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d72:	e841 2300 	strex	r3, r2, [r1]
 8002d76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1e3      	bne.n	8002d46 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2220      	movs	r2, #32
 8002d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	330c      	adds	r3, #12
 8002d92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d96:	e853 3f00 	ldrex	r3, [r3]
 8002d9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d9e:	f023 0310 	bic.w	r3, r3, #16
 8002da2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	330c      	adds	r3, #12
 8002dac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002db0:	65ba      	str	r2, [r7, #88]	; 0x58
 8002db2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002db6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002db8:	e841 2300 	strex	r3, r2, [r1]
 8002dbc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1e3      	bne.n	8002d8c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fe fe70 	bl	8001aae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	4619      	mov	r1, r3
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f8c1 	bl	8002f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002dea:	e09b      	b.n	8002f24 <HAL_UART_IRQHandler+0x518>
 8002dec:	080030fd 	.word	0x080030fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 808e 	beq.w	8002f28 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002e0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 8089 	beq.w	8002f28 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	330c      	adds	r3, #12
 8002e1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e20:	e853 3f00 	ldrex	r3, [r3]
 8002e24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	330c      	adds	r3, #12
 8002e36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002e3a:	647a      	str	r2, [r7, #68]	; 0x44
 8002e3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e42:	e841 2300 	strex	r3, r2, [r1]
 8002e46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1e3      	bne.n	8002e16 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	3314      	adds	r3, #20
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	e853 3f00 	ldrex	r3, [r3]
 8002e5c:	623b      	str	r3, [r7, #32]
   return(result);
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	f023 0301 	bic.w	r3, r3, #1
 8002e64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3314      	adds	r3, #20
 8002e6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e72:	633a      	str	r2, [r7, #48]	; 0x30
 8002e74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e7a:	e841 2300 	strex	r3, r2, [r1]
 8002e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1e3      	bne.n	8002e4e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	330c      	adds	r3, #12
 8002e9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	e853 3f00 	ldrex	r3, [r3]
 8002ea2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f023 0310 	bic.w	r3, r3, #16
 8002eaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	330c      	adds	r3, #12
 8002eb4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002eb8:	61fa      	str	r2, [r7, #28]
 8002eba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ebc:	69b9      	ldr	r1, [r7, #24]
 8002ebe:	69fa      	ldr	r2, [r7, #28]
 8002ec0:	e841 2300 	strex	r3, r2, [r1]
 8002ec4:	617b      	str	r3, [r7, #20]
   return(result);
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1e3      	bne.n	8002e94 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ed2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f847 	bl	8002f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ede:	e023      	b.n	8002f28 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d009      	beq.n	8002f00 <HAL_UART_IRQHandler+0x4f4>
 8002eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 f913 	bl	8003124 <UART_Transmit_IT>
    return;
 8002efe:	e014      	b.n	8002f2a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00e      	beq.n	8002f2a <HAL_UART_IRQHandler+0x51e>
 8002f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f953 	bl	80031c4 <UART_EndTransmit_IT>
    return;
 8002f1e:	e004      	b.n	8002f2a <HAL_UART_IRQHandler+0x51e>
    return;
 8002f20:	bf00      	nop
 8002f22:	e002      	b.n	8002f2a <HAL_UART_IRQHandler+0x51e>
      return;
 8002f24:	bf00      	nop
 8002f26:	e000      	b.n	8002f2a <HAL_UART_IRQHandler+0x51e>
      return;
 8002f28:	bf00      	nop
  }
}
 8002f2a:	37e8      	adds	r7, #232	; 0xe8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	4613      	mov	r3, r2
 8002f92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f94:	e03b      	b.n	800300e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f9c:	d037      	beq.n	800300e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9e:	f7fe fc69 	bl	8001874 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	6a3a      	ldr	r2, [r7, #32]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d302      	bcc.n	8002fb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e03a      	b.n	800302e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d023      	beq.n	800300e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b80      	cmp	r3, #128	; 0x80
 8002fca:	d020      	beq.n	800300e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b40      	cmp	r3, #64	; 0x40
 8002fd0:	d01d      	beq.n	800300e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d116      	bne.n	800300e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f81d 	bl	8003036 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2208      	movs	r2, #8
 8003000:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e00f      	b.n	800302e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4013      	ands	r3, r2
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	429a      	cmp	r2, r3
 800301c:	bf0c      	ite	eq
 800301e:	2301      	moveq	r3, #1
 8003020:	2300      	movne	r3, #0
 8003022:	b2db      	uxtb	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	429a      	cmp	r2, r3
 800302a:	d0b4      	beq.n	8002f96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003036:	b480      	push	{r7}
 8003038:	b095      	sub	sp, #84	; 0x54
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	330c      	adds	r3, #12
 8003044:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003048:	e853 3f00 	ldrex	r3, [r3]
 800304c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800304e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003050:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003054:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	330c      	adds	r3, #12
 800305c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800305e:	643a      	str	r2, [r7, #64]	; 0x40
 8003060:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003062:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003064:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003066:	e841 2300 	strex	r3, r2, [r1]
 800306a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800306c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1e5      	bne.n	800303e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	3314      	adds	r3, #20
 8003078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	e853 3f00 	ldrex	r3, [r3]
 8003080:	61fb      	str	r3, [r7, #28]
   return(result);
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	f023 0301 	bic.w	r3, r3, #1
 8003088:	64bb      	str	r3, [r7, #72]	; 0x48
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3314      	adds	r3, #20
 8003090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003092:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003094:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003096:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800309a:	e841 2300 	strex	r3, r2, [r1]
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1e5      	bne.n	8003072 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d119      	bne.n	80030e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	330c      	adds	r3, #12
 80030b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	e853 3f00 	ldrex	r3, [r3]
 80030bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f023 0310 	bic.w	r3, r3, #16
 80030c4:	647b      	str	r3, [r7, #68]	; 0x44
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	330c      	adds	r3, #12
 80030cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030ce:	61ba      	str	r2, [r7, #24]
 80030d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d2:	6979      	ldr	r1, [r7, #20]
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	e841 2300 	strex	r3, r2, [r1]
 80030da:	613b      	str	r3, [r7, #16]
   return(result);
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1e5      	bne.n	80030ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	; 0x30
}
 80030f0:	bf00      	nop
 80030f2:	3754      	adds	r7, #84	; 0x54
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003108:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f7ff ff1e 	bl	8002f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b21      	cmp	r3, #33	; 0x21
 8003136:	d13e      	bne.n	80031b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003140:	d114      	bne.n	800316c <UART_Transmit_IT+0x48>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d110      	bne.n	800316c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800315e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	1c9a      	adds	r2, r3, #2
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	621a      	str	r2, [r3, #32]
 800316a:	e008      	b.n	800317e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	1c59      	adds	r1, r3, #1
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6211      	str	r1, [r2, #32]
 8003176:	781a      	ldrb	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003182:	b29b      	uxth	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	b29b      	uxth	r3, r3
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	4619      	mov	r1, r3
 800318c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10f      	bne.n	80031b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	e000      	b.n	80031b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031b6:	2302      	movs	r3, #2
  }
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff fea3 	bl	8002f30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08c      	sub	sp, #48	; 0x30
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b22      	cmp	r3, #34	; 0x22
 8003206:	f040 80ae 	bne.w	8003366 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003212:	d117      	bne.n	8003244 <UART_Receive_IT+0x50>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d113      	bne.n	8003244 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800321c:	2300      	movs	r3, #0
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003224:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	b29b      	uxth	r3, r3
 800322e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003232:	b29a      	uxth	r2, r3
 8003234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003236:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323c:	1c9a      	adds	r2, r3, #2
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	629a      	str	r2, [r3, #40]	; 0x28
 8003242:	e026      	b.n	8003292 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800324a:	2300      	movs	r3, #0
 800324c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003256:	d007      	beq.n	8003268 <UART_Receive_IT+0x74>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10a      	bne.n	8003276 <UART_Receive_IT+0x82>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d106      	bne.n	8003276 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	b2da      	uxtb	r2, r3
 8003270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003272:	701a      	strb	r2, [r3, #0]
 8003274:	e008      	b.n	8003288 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	b2db      	uxtb	r3, r3
 800327e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003282:	b2da      	uxtb	r2, r3
 8003284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003286:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29b      	uxth	r3, r3
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	4619      	mov	r1, r3
 80032a0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d15d      	bne.n	8003362 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0220 	bic.w	r2, r2, #32
 80032b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695a      	ldr	r2, [r3, #20]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0201 	bic.w	r2, r2, #1
 80032d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2220      	movs	r2, #32
 80032da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d135      	bne.n	8003358 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	330c      	adds	r3, #12
 80032f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	e853 3f00 	ldrex	r3, [r3]
 8003300:	613b      	str	r3, [r7, #16]
   return(result);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f023 0310 	bic.w	r3, r3, #16
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	330c      	adds	r3, #12
 8003310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003312:	623a      	str	r2, [r7, #32]
 8003314:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003316:	69f9      	ldr	r1, [r7, #28]
 8003318:	6a3a      	ldr	r2, [r7, #32]
 800331a:	e841 2300 	strex	r3, r2, [r1]
 800331e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1e5      	bne.n	80032f2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0310 	and.w	r3, r3, #16
 8003330:	2b10      	cmp	r3, #16
 8003332:	d10a      	bne.n	800334a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800334e:	4619      	mov	r1, r3
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7ff fe0b 	bl	8002f6c <HAL_UARTEx_RxEventCallback>
 8003356:	e002      	b.n	800335e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff fdf3 	bl	8002f44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800335e:	2300      	movs	r3, #0
 8003360:	e002      	b.n	8003368 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	e000      	b.n	8003368 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003366:	2302      	movs	r3, #2
  }
}
 8003368:	4618      	mov	r0, r3
 800336a:	3730      	adds	r7, #48	; 0x30
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003374:	b0c0      	sub	sp, #256	; 0x100
 8003376:	af00      	add	r7, sp, #0
 8003378:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800338c:	68d9      	ldr	r1, [r3, #12]
 800338e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	ea40 0301 	orr.w	r3, r0, r1
 8003398:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800339a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033c8:	f021 010c 	bic.w	r1, r1, #12
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033d6:	430b      	orrs	r3, r1
 80033d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ea:	6999      	ldr	r1, [r3, #24]
 80033ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	ea40 0301 	orr.w	r3, r0, r1
 80033f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	4b8f      	ldr	r3, [pc, #572]	; (800363c <UART_SetConfig+0x2cc>)
 8003400:	429a      	cmp	r2, r3
 8003402:	d005      	beq.n	8003410 <UART_SetConfig+0xa0>
 8003404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	4b8d      	ldr	r3, [pc, #564]	; (8003640 <UART_SetConfig+0x2d0>)
 800340c:	429a      	cmp	r2, r3
 800340e:	d104      	bne.n	800341a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003410:	f7ff fa00 	bl	8002814 <HAL_RCC_GetPCLK2Freq>
 8003414:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003418:	e003      	b.n	8003422 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800341a:	f7ff f9e7 	bl	80027ec <HAL_RCC_GetPCLK1Freq>
 800341e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800342c:	f040 810c 	bne.w	8003648 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003434:	2200      	movs	r2, #0
 8003436:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800343a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800343e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003442:	4622      	mov	r2, r4
 8003444:	462b      	mov	r3, r5
 8003446:	1891      	adds	r1, r2, r2
 8003448:	65b9      	str	r1, [r7, #88]	; 0x58
 800344a:	415b      	adcs	r3, r3
 800344c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800344e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003452:	4621      	mov	r1, r4
 8003454:	eb12 0801 	adds.w	r8, r2, r1
 8003458:	4629      	mov	r1, r5
 800345a:	eb43 0901 	adc.w	r9, r3, r1
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800346a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800346e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003472:	4690      	mov	r8, r2
 8003474:	4699      	mov	r9, r3
 8003476:	4623      	mov	r3, r4
 8003478:	eb18 0303 	adds.w	r3, r8, r3
 800347c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003480:	462b      	mov	r3, r5
 8003482:	eb49 0303 	adc.w	r3, r9, r3
 8003486:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800348a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003496:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800349a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800349e:	460b      	mov	r3, r1
 80034a0:	18db      	adds	r3, r3, r3
 80034a2:	653b      	str	r3, [r7, #80]	; 0x50
 80034a4:	4613      	mov	r3, r2
 80034a6:	eb42 0303 	adc.w	r3, r2, r3
 80034aa:	657b      	str	r3, [r7, #84]	; 0x54
 80034ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80034b4:	f7fd fb6a 	bl	8000b8c <__aeabi_uldivmod>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4b61      	ldr	r3, [pc, #388]	; (8003644 <UART_SetConfig+0x2d4>)
 80034be:	fba3 2302 	umull	r2, r3, r3, r2
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	011c      	lsls	r4, r3, #4
 80034c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ca:	2200      	movs	r2, #0
 80034cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80034d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034d8:	4642      	mov	r2, r8
 80034da:	464b      	mov	r3, r9
 80034dc:	1891      	adds	r1, r2, r2
 80034de:	64b9      	str	r1, [r7, #72]	; 0x48
 80034e0:	415b      	adcs	r3, r3
 80034e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034e8:	4641      	mov	r1, r8
 80034ea:	eb12 0a01 	adds.w	sl, r2, r1
 80034ee:	4649      	mov	r1, r9
 80034f0:	eb43 0b01 	adc.w	fp, r3, r1
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003500:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003504:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003508:	4692      	mov	sl, r2
 800350a:	469b      	mov	fp, r3
 800350c:	4643      	mov	r3, r8
 800350e:	eb1a 0303 	adds.w	r3, sl, r3
 8003512:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003516:	464b      	mov	r3, r9
 8003518:	eb4b 0303 	adc.w	r3, fp, r3
 800351c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800352c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003530:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003534:	460b      	mov	r3, r1
 8003536:	18db      	adds	r3, r3, r3
 8003538:	643b      	str	r3, [r7, #64]	; 0x40
 800353a:	4613      	mov	r3, r2
 800353c:	eb42 0303 	adc.w	r3, r2, r3
 8003540:	647b      	str	r3, [r7, #68]	; 0x44
 8003542:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003546:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800354a:	f7fd fb1f 	bl	8000b8c <__aeabi_uldivmod>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4611      	mov	r1, r2
 8003554:	4b3b      	ldr	r3, [pc, #236]	; (8003644 <UART_SetConfig+0x2d4>)
 8003556:	fba3 2301 	umull	r2, r3, r3, r1
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	2264      	movs	r2, #100	; 0x64
 800355e:	fb02 f303 	mul.w	r3, r2, r3
 8003562:	1acb      	subs	r3, r1, r3
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800356a:	4b36      	ldr	r3, [pc, #216]	; (8003644 <UART_SetConfig+0x2d4>)
 800356c:	fba3 2302 	umull	r2, r3, r3, r2
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003578:	441c      	add	r4, r3
 800357a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800357e:	2200      	movs	r2, #0
 8003580:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003584:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003588:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800358c:	4642      	mov	r2, r8
 800358e:	464b      	mov	r3, r9
 8003590:	1891      	adds	r1, r2, r2
 8003592:	63b9      	str	r1, [r7, #56]	; 0x38
 8003594:	415b      	adcs	r3, r3
 8003596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003598:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800359c:	4641      	mov	r1, r8
 800359e:	1851      	adds	r1, r2, r1
 80035a0:	6339      	str	r1, [r7, #48]	; 0x30
 80035a2:	4649      	mov	r1, r9
 80035a4:	414b      	adcs	r3, r1
 80035a6:	637b      	str	r3, [r7, #52]	; 0x34
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80035b4:	4659      	mov	r1, fp
 80035b6:	00cb      	lsls	r3, r1, #3
 80035b8:	4651      	mov	r1, sl
 80035ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035be:	4651      	mov	r1, sl
 80035c0:	00ca      	lsls	r2, r1, #3
 80035c2:	4610      	mov	r0, r2
 80035c4:	4619      	mov	r1, r3
 80035c6:	4603      	mov	r3, r0
 80035c8:	4642      	mov	r2, r8
 80035ca:	189b      	adds	r3, r3, r2
 80035cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035d0:	464b      	mov	r3, r9
 80035d2:	460a      	mov	r2, r1
 80035d4:	eb42 0303 	adc.w	r3, r2, r3
 80035d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035f0:	460b      	mov	r3, r1
 80035f2:	18db      	adds	r3, r3, r3
 80035f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80035f6:	4613      	mov	r3, r2
 80035f8:	eb42 0303 	adc.w	r3, r2, r3
 80035fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003602:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003606:	f7fd fac1 	bl	8000b8c <__aeabi_uldivmod>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4b0d      	ldr	r3, [pc, #52]	; (8003644 <UART_SetConfig+0x2d4>)
 8003610:	fba3 1302 	umull	r1, r3, r3, r2
 8003614:	095b      	lsrs	r3, r3, #5
 8003616:	2164      	movs	r1, #100	; 0x64
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	3332      	adds	r3, #50	; 0x32
 8003622:	4a08      	ldr	r2, [pc, #32]	; (8003644 <UART_SetConfig+0x2d4>)
 8003624:	fba2 2303 	umull	r2, r3, r2, r3
 8003628:	095b      	lsrs	r3, r3, #5
 800362a:	f003 0207 	and.w	r2, r3, #7
 800362e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4422      	add	r2, r4
 8003636:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003638:	e106      	b.n	8003848 <UART_SetConfig+0x4d8>
 800363a:	bf00      	nop
 800363c:	40011000 	.word	0x40011000
 8003640:	40011400 	.word	0x40011400
 8003644:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800364c:	2200      	movs	r2, #0
 800364e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003652:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003656:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800365a:	4642      	mov	r2, r8
 800365c:	464b      	mov	r3, r9
 800365e:	1891      	adds	r1, r2, r2
 8003660:	6239      	str	r1, [r7, #32]
 8003662:	415b      	adcs	r3, r3
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
 8003666:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800366a:	4641      	mov	r1, r8
 800366c:	1854      	adds	r4, r2, r1
 800366e:	4649      	mov	r1, r9
 8003670:	eb43 0501 	adc.w	r5, r3, r1
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	00eb      	lsls	r3, r5, #3
 800367e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003682:	00e2      	lsls	r2, r4, #3
 8003684:	4614      	mov	r4, r2
 8003686:	461d      	mov	r5, r3
 8003688:	4643      	mov	r3, r8
 800368a:	18e3      	adds	r3, r4, r3
 800368c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003690:	464b      	mov	r3, r9
 8003692:	eb45 0303 	adc.w	r3, r5, r3
 8003696:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800369a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	f04f 0300 	mov.w	r3, #0
 80036b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036b6:	4629      	mov	r1, r5
 80036b8:	008b      	lsls	r3, r1, #2
 80036ba:	4621      	mov	r1, r4
 80036bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036c0:	4621      	mov	r1, r4
 80036c2:	008a      	lsls	r2, r1, #2
 80036c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036c8:	f7fd fa60 	bl	8000b8c <__aeabi_uldivmod>
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	4b60      	ldr	r3, [pc, #384]	; (8003854 <UART_SetConfig+0x4e4>)
 80036d2:	fba3 2302 	umull	r2, r3, r3, r2
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	011c      	lsls	r4, r3, #4
 80036da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036de:	2200      	movs	r2, #0
 80036e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036ec:	4642      	mov	r2, r8
 80036ee:	464b      	mov	r3, r9
 80036f0:	1891      	adds	r1, r2, r2
 80036f2:	61b9      	str	r1, [r7, #24]
 80036f4:	415b      	adcs	r3, r3
 80036f6:	61fb      	str	r3, [r7, #28]
 80036f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036fc:	4641      	mov	r1, r8
 80036fe:	1851      	adds	r1, r2, r1
 8003700:	6139      	str	r1, [r7, #16]
 8003702:	4649      	mov	r1, r9
 8003704:	414b      	adcs	r3, r1
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003714:	4659      	mov	r1, fp
 8003716:	00cb      	lsls	r3, r1, #3
 8003718:	4651      	mov	r1, sl
 800371a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800371e:	4651      	mov	r1, sl
 8003720:	00ca      	lsls	r2, r1, #3
 8003722:	4610      	mov	r0, r2
 8003724:	4619      	mov	r1, r3
 8003726:	4603      	mov	r3, r0
 8003728:	4642      	mov	r2, r8
 800372a:	189b      	adds	r3, r3, r2
 800372c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003730:	464b      	mov	r3, r9
 8003732:	460a      	mov	r2, r1
 8003734:	eb42 0303 	adc.w	r3, r2, r3
 8003738:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	67bb      	str	r3, [r7, #120]	; 0x78
 8003746:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003754:	4649      	mov	r1, r9
 8003756:	008b      	lsls	r3, r1, #2
 8003758:	4641      	mov	r1, r8
 800375a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800375e:	4641      	mov	r1, r8
 8003760:	008a      	lsls	r2, r1, #2
 8003762:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003766:	f7fd fa11 	bl	8000b8c <__aeabi_uldivmod>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4611      	mov	r1, r2
 8003770:	4b38      	ldr	r3, [pc, #224]	; (8003854 <UART_SetConfig+0x4e4>)
 8003772:	fba3 2301 	umull	r2, r3, r3, r1
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	2264      	movs	r2, #100	; 0x64
 800377a:	fb02 f303 	mul.w	r3, r2, r3
 800377e:	1acb      	subs	r3, r1, r3
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	3332      	adds	r3, #50	; 0x32
 8003784:	4a33      	ldr	r2, [pc, #204]	; (8003854 <UART_SetConfig+0x4e4>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003790:	441c      	add	r4, r3
 8003792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003796:	2200      	movs	r2, #0
 8003798:	673b      	str	r3, [r7, #112]	; 0x70
 800379a:	677a      	str	r2, [r7, #116]	; 0x74
 800379c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037a0:	4642      	mov	r2, r8
 80037a2:	464b      	mov	r3, r9
 80037a4:	1891      	adds	r1, r2, r2
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	415b      	adcs	r3, r3
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037b0:	4641      	mov	r1, r8
 80037b2:	1851      	adds	r1, r2, r1
 80037b4:	6039      	str	r1, [r7, #0]
 80037b6:	4649      	mov	r1, r9
 80037b8:	414b      	adcs	r3, r1
 80037ba:	607b      	str	r3, [r7, #4]
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037c8:	4659      	mov	r1, fp
 80037ca:	00cb      	lsls	r3, r1, #3
 80037cc:	4651      	mov	r1, sl
 80037ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037d2:	4651      	mov	r1, sl
 80037d4:	00ca      	lsls	r2, r1, #3
 80037d6:	4610      	mov	r0, r2
 80037d8:	4619      	mov	r1, r3
 80037da:	4603      	mov	r3, r0
 80037dc:	4642      	mov	r2, r8
 80037de:	189b      	adds	r3, r3, r2
 80037e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80037e2:	464b      	mov	r3, r9
 80037e4:	460a      	mov	r2, r1
 80037e6:	eb42 0303 	adc.w	r3, r2, r3
 80037ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	663b      	str	r3, [r7, #96]	; 0x60
 80037f6:	667a      	str	r2, [r7, #100]	; 0x64
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003804:	4649      	mov	r1, r9
 8003806:	008b      	lsls	r3, r1, #2
 8003808:	4641      	mov	r1, r8
 800380a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800380e:	4641      	mov	r1, r8
 8003810:	008a      	lsls	r2, r1, #2
 8003812:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003816:	f7fd f9b9 	bl	8000b8c <__aeabi_uldivmod>
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <UART_SetConfig+0x4e4>)
 8003820:	fba3 1302 	umull	r1, r3, r3, r2
 8003824:	095b      	lsrs	r3, r3, #5
 8003826:	2164      	movs	r1, #100	; 0x64
 8003828:	fb01 f303 	mul.w	r3, r1, r3
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	3332      	adds	r3, #50	; 0x32
 8003832:	4a08      	ldr	r2, [pc, #32]	; (8003854 <UART_SetConfig+0x4e4>)
 8003834:	fba2 2303 	umull	r2, r3, r2, r3
 8003838:	095b      	lsrs	r3, r3, #5
 800383a:	f003 020f 	and.w	r2, r3, #15
 800383e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4422      	add	r2, r4
 8003846:	609a      	str	r2, [r3, #8]
}
 8003848:	bf00      	nop
 800384a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800384e:	46bd      	mov	sp, r7
 8003850:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003854:	51eb851f 	.word	0x51eb851f

08003858 <atof>:
 8003858:	2100      	movs	r1, #0
 800385a:	f000 be11 	b.w	8004480 <strtod>

0800385e <atoi>:
 800385e:	220a      	movs	r2, #10
 8003860:	2100      	movs	r1, #0
 8003862:	f000 be9b 	b.w	800459c <strtol>

08003866 <sulp>:
 8003866:	b570      	push	{r4, r5, r6, lr}
 8003868:	4604      	mov	r4, r0
 800386a:	460d      	mov	r5, r1
 800386c:	ec45 4b10 	vmov	d0, r4, r5
 8003870:	4616      	mov	r6, r2
 8003872:	f002 f837 	bl	80058e4 <__ulp>
 8003876:	ec51 0b10 	vmov	r0, r1, d0
 800387a:	b17e      	cbz	r6, 800389c <sulp+0x36>
 800387c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8003880:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003884:	2b00      	cmp	r3, #0
 8003886:	dd09      	ble.n	800389c <sulp+0x36>
 8003888:	051b      	lsls	r3, r3, #20
 800388a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800388e:	2400      	movs	r4, #0
 8003890:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003894:	4622      	mov	r2, r4
 8003896:	462b      	mov	r3, r5
 8003898:	f7fc febe 	bl	8000618 <__aeabi_dmul>
 800389c:	bd70      	pop	{r4, r5, r6, pc}
	...

080038a0 <_strtod_l>:
 80038a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038a4:	ed2d 8b02 	vpush	{d8}
 80038a8:	b09b      	sub	sp, #108	; 0x6c
 80038aa:	4604      	mov	r4, r0
 80038ac:	9213      	str	r2, [sp, #76]	; 0x4c
 80038ae:	2200      	movs	r2, #0
 80038b0:	9216      	str	r2, [sp, #88]	; 0x58
 80038b2:	460d      	mov	r5, r1
 80038b4:	f04f 0800 	mov.w	r8, #0
 80038b8:	f04f 0900 	mov.w	r9, #0
 80038bc:	460a      	mov	r2, r1
 80038be:	9215      	str	r2, [sp, #84]	; 0x54
 80038c0:	7811      	ldrb	r1, [r2, #0]
 80038c2:	292b      	cmp	r1, #43	; 0x2b
 80038c4:	d04c      	beq.n	8003960 <_strtod_l+0xc0>
 80038c6:	d83a      	bhi.n	800393e <_strtod_l+0x9e>
 80038c8:	290d      	cmp	r1, #13
 80038ca:	d834      	bhi.n	8003936 <_strtod_l+0x96>
 80038cc:	2908      	cmp	r1, #8
 80038ce:	d834      	bhi.n	800393a <_strtod_l+0x9a>
 80038d0:	2900      	cmp	r1, #0
 80038d2:	d03d      	beq.n	8003950 <_strtod_l+0xb0>
 80038d4:	2200      	movs	r2, #0
 80038d6:	920a      	str	r2, [sp, #40]	; 0x28
 80038d8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80038da:	7832      	ldrb	r2, [r6, #0]
 80038dc:	2a30      	cmp	r2, #48	; 0x30
 80038de:	f040 80b4 	bne.w	8003a4a <_strtod_l+0x1aa>
 80038e2:	7872      	ldrb	r2, [r6, #1]
 80038e4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80038e8:	2a58      	cmp	r2, #88	; 0x58
 80038ea:	d170      	bne.n	80039ce <_strtod_l+0x12e>
 80038ec:	9302      	str	r3, [sp, #8]
 80038ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038f0:	9301      	str	r3, [sp, #4]
 80038f2:	ab16      	add	r3, sp, #88	; 0x58
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	4a8e      	ldr	r2, [pc, #568]	; (8003b30 <_strtod_l+0x290>)
 80038f8:	ab17      	add	r3, sp, #92	; 0x5c
 80038fa:	a915      	add	r1, sp, #84	; 0x54
 80038fc:	4620      	mov	r0, r4
 80038fe:	f001 f8d7 	bl	8004ab0 <__gethex>
 8003902:	f010 070f 	ands.w	r7, r0, #15
 8003906:	4605      	mov	r5, r0
 8003908:	d005      	beq.n	8003916 <_strtod_l+0x76>
 800390a:	2f06      	cmp	r7, #6
 800390c:	d12a      	bne.n	8003964 <_strtod_l+0xc4>
 800390e:	3601      	adds	r6, #1
 8003910:	2300      	movs	r3, #0
 8003912:	9615      	str	r6, [sp, #84]	; 0x54
 8003914:	930a      	str	r3, [sp, #40]	; 0x28
 8003916:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003918:	2b00      	cmp	r3, #0
 800391a:	f040 857f 	bne.w	800441c <_strtod_l+0xb7c>
 800391e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003920:	b1db      	cbz	r3, 800395a <_strtod_l+0xba>
 8003922:	4642      	mov	r2, r8
 8003924:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003928:	ec43 2b10 	vmov	d0, r2, r3
 800392c:	b01b      	add	sp, #108	; 0x6c
 800392e:	ecbd 8b02 	vpop	{d8}
 8003932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003936:	2920      	cmp	r1, #32
 8003938:	d1cc      	bne.n	80038d4 <_strtod_l+0x34>
 800393a:	3201      	adds	r2, #1
 800393c:	e7bf      	b.n	80038be <_strtod_l+0x1e>
 800393e:	292d      	cmp	r1, #45	; 0x2d
 8003940:	d1c8      	bne.n	80038d4 <_strtod_l+0x34>
 8003942:	2101      	movs	r1, #1
 8003944:	910a      	str	r1, [sp, #40]	; 0x28
 8003946:	1c51      	adds	r1, r2, #1
 8003948:	9115      	str	r1, [sp, #84]	; 0x54
 800394a:	7852      	ldrb	r2, [r2, #1]
 800394c:	2a00      	cmp	r2, #0
 800394e:	d1c3      	bne.n	80038d8 <_strtod_l+0x38>
 8003950:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003952:	9515      	str	r5, [sp, #84]	; 0x54
 8003954:	2b00      	cmp	r3, #0
 8003956:	f040 855f 	bne.w	8004418 <_strtod_l+0xb78>
 800395a:	4642      	mov	r2, r8
 800395c:	464b      	mov	r3, r9
 800395e:	e7e3      	b.n	8003928 <_strtod_l+0x88>
 8003960:	2100      	movs	r1, #0
 8003962:	e7ef      	b.n	8003944 <_strtod_l+0xa4>
 8003964:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003966:	b13a      	cbz	r2, 8003978 <_strtod_l+0xd8>
 8003968:	2135      	movs	r1, #53	; 0x35
 800396a:	a818      	add	r0, sp, #96	; 0x60
 800396c:	f002 f8b7 	bl	8005ade <__copybits>
 8003970:	9916      	ldr	r1, [sp, #88]	; 0x58
 8003972:	4620      	mov	r0, r4
 8003974:	f001 fc8a 	bl	800528c <_Bfree>
 8003978:	3f01      	subs	r7, #1
 800397a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800397c:	2f04      	cmp	r7, #4
 800397e:	d806      	bhi.n	800398e <_strtod_l+0xee>
 8003980:	e8df f007 	tbb	[pc, r7]
 8003984:	201d0314 	.word	0x201d0314
 8003988:	14          	.byte	0x14
 8003989:	00          	.byte	0x00
 800398a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800398e:	05e9      	lsls	r1, r5, #23
 8003990:	bf48      	it	mi
 8003992:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8003996:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800399a:	0d1b      	lsrs	r3, r3, #20
 800399c:	051b      	lsls	r3, r3, #20
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1b9      	bne.n	8003916 <_strtod_l+0x76>
 80039a2:	f000 ff8b 	bl	80048bc <__errno>
 80039a6:	2322      	movs	r3, #34	; 0x22
 80039a8:	6003      	str	r3, [r0, #0]
 80039aa:	e7b4      	b.n	8003916 <_strtod_l+0x76>
 80039ac:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80039b0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80039b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80039b8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80039bc:	e7e7      	b.n	800398e <_strtod_l+0xee>
 80039be:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8003b38 <_strtod_l+0x298>
 80039c2:	e7e4      	b.n	800398e <_strtod_l+0xee>
 80039c4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80039c8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80039cc:	e7df      	b.n	800398e <_strtod_l+0xee>
 80039ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	9215      	str	r2, [sp, #84]	; 0x54
 80039d4:	785b      	ldrb	r3, [r3, #1]
 80039d6:	2b30      	cmp	r3, #48	; 0x30
 80039d8:	d0f9      	beq.n	80039ce <_strtod_l+0x12e>
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d09b      	beq.n	8003916 <_strtod_l+0x76>
 80039de:	2301      	movs	r3, #1
 80039e0:	f04f 0a00 	mov.w	sl, #0
 80039e4:	9304      	str	r3, [sp, #16]
 80039e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80039e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80039ea:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80039ee:	46d3      	mov	fp, sl
 80039f0:	220a      	movs	r2, #10
 80039f2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80039f4:	7806      	ldrb	r6, [r0, #0]
 80039f6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80039fa:	b2d9      	uxtb	r1, r3
 80039fc:	2909      	cmp	r1, #9
 80039fe:	d926      	bls.n	8003a4e <_strtod_l+0x1ae>
 8003a00:	494c      	ldr	r1, [pc, #304]	; (8003b34 <_strtod_l+0x294>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	f000 feee 	bl	80047e4 <strncmp>
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	d030      	beq.n	8003a6e <_strtod_l+0x1ce>
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	4632      	mov	r2, r6
 8003a10:	9005      	str	r0, [sp, #20]
 8003a12:	465e      	mov	r6, fp
 8003a14:	4603      	mov	r3, r0
 8003a16:	2a65      	cmp	r2, #101	; 0x65
 8003a18:	d001      	beq.n	8003a1e <_strtod_l+0x17e>
 8003a1a:	2a45      	cmp	r2, #69	; 0x45
 8003a1c:	d113      	bne.n	8003a46 <_strtod_l+0x1a6>
 8003a1e:	b91e      	cbnz	r6, 8003a28 <_strtod_l+0x188>
 8003a20:	9a04      	ldr	r2, [sp, #16]
 8003a22:	4302      	orrs	r2, r0
 8003a24:	d094      	beq.n	8003950 <_strtod_l+0xb0>
 8003a26:	2600      	movs	r6, #0
 8003a28:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8003a2a:	1c6a      	adds	r2, r5, #1
 8003a2c:	9215      	str	r2, [sp, #84]	; 0x54
 8003a2e:	786a      	ldrb	r2, [r5, #1]
 8003a30:	2a2b      	cmp	r2, #43	; 0x2b
 8003a32:	d074      	beq.n	8003b1e <_strtod_l+0x27e>
 8003a34:	2a2d      	cmp	r2, #45	; 0x2d
 8003a36:	d078      	beq.n	8003b2a <_strtod_l+0x28a>
 8003a38:	f04f 0c00 	mov.w	ip, #0
 8003a3c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8003a40:	2909      	cmp	r1, #9
 8003a42:	d97f      	bls.n	8003b44 <_strtod_l+0x2a4>
 8003a44:	9515      	str	r5, [sp, #84]	; 0x54
 8003a46:	2700      	movs	r7, #0
 8003a48:	e09e      	b.n	8003b88 <_strtod_l+0x2e8>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e7c8      	b.n	80039e0 <_strtod_l+0x140>
 8003a4e:	f1bb 0f08 	cmp.w	fp, #8
 8003a52:	bfd8      	it	le
 8003a54:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8003a56:	f100 0001 	add.w	r0, r0, #1
 8003a5a:	bfda      	itte	le
 8003a5c:	fb02 3301 	mlale	r3, r2, r1, r3
 8003a60:	9309      	strle	r3, [sp, #36]	; 0x24
 8003a62:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8003a66:	f10b 0b01 	add.w	fp, fp, #1
 8003a6a:	9015      	str	r0, [sp, #84]	; 0x54
 8003a6c:	e7c1      	b.n	80039f2 <_strtod_l+0x152>
 8003a6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	9215      	str	r2, [sp, #84]	; 0x54
 8003a74:	785a      	ldrb	r2, [r3, #1]
 8003a76:	f1bb 0f00 	cmp.w	fp, #0
 8003a7a:	d037      	beq.n	8003aec <_strtod_l+0x24c>
 8003a7c:	9005      	str	r0, [sp, #20]
 8003a7e:	465e      	mov	r6, fp
 8003a80:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003a84:	2b09      	cmp	r3, #9
 8003a86:	d912      	bls.n	8003aae <_strtod_l+0x20e>
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e7c4      	b.n	8003a16 <_strtod_l+0x176>
 8003a8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	9215      	str	r2, [sp, #84]	; 0x54
 8003a92:	785a      	ldrb	r2, [r3, #1]
 8003a94:	3001      	adds	r0, #1
 8003a96:	2a30      	cmp	r2, #48	; 0x30
 8003a98:	d0f8      	beq.n	8003a8c <_strtod_l+0x1ec>
 8003a9a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	f200 84c1 	bhi.w	8004426 <_strtod_l+0xb86>
 8003aa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003aa6:	9005      	str	r0, [sp, #20]
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	930b      	str	r3, [sp, #44]	; 0x2c
 8003aac:	4606      	mov	r6, r0
 8003aae:	3a30      	subs	r2, #48	; 0x30
 8003ab0:	f100 0301 	add.w	r3, r0, #1
 8003ab4:	d014      	beq.n	8003ae0 <_strtod_l+0x240>
 8003ab6:	9905      	ldr	r1, [sp, #20]
 8003ab8:	4419      	add	r1, r3
 8003aba:	9105      	str	r1, [sp, #20]
 8003abc:	4633      	mov	r3, r6
 8003abe:	eb00 0c06 	add.w	ip, r0, r6
 8003ac2:	210a      	movs	r1, #10
 8003ac4:	4563      	cmp	r3, ip
 8003ac6:	d113      	bne.n	8003af0 <_strtod_l+0x250>
 8003ac8:	1833      	adds	r3, r6, r0
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	f106 0601 	add.w	r6, r6, #1
 8003ad0:	4406      	add	r6, r0
 8003ad2:	dc1a      	bgt.n	8003b0a <_strtod_l+0x26a>
 8003ad4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003ad6:	230a      	movs	r3, #10
 8003ad8:	fb03 2301 	mla	r3, r3, r1, r2
 8003adc:	9309      	str	r3, [sp, #36]	; 0x24
 8003ade:	2300      	movs	r3, #0
 8003ae0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003ae2:	1c51      	adds	r1, r2, #1
 8003ae4:	9115      	str	r1, [sp, #84]	; 0x54
 8003ae6:	7852      	ldrb	r2, [r2, #1]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	e7c9      	b.n	8003a80 <_strtod_l+0x1e0>
 8003aec:	4658      	mov	r0, fp
 8003aee:	e7d2      	b.n	8003a96 <_strtod_l+0x1f6>
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	f103 0301 	add.w	r3, r3, #1
 8003af6:	dc03      	bgt.n	8003b00 <_strtod_l+0x260>
 8003af8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003afa:	434f      	muls	r7, r1
 8003afc:	9709      	str	r7, [sp, #36]	; 0x24
 8003afe:	e7e1      	b.n	8003ac4 <_strtod_l+0x224>
 8003b00:	2b10      	cmp	r3, #16
 8003b02:	bfd8      	it	le
 8003b04:	fb01 fa0a 	mulle.w	sl, r1, sl
 8003b08:	e7dc      	b.n	8003ac4 <_strtod_l+0x224>
 8003b0a:	2e10      	cmp	r6, #16
 8003b0c:	bfdc      	itt	le
 8003b0e:	230a      	movle	r3, #10
 8003b10:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8003b14:	e7e3      	b.n	8003ade <_strtod_l+0x23e>
 8003b16:	2300      	movs	r3, #0
 8003b18:	9305      	str	r3, [sp, #20]
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e780      	b.n	8003a20 <_strtod_l+0x180>
 8003b1e:	f04f 0c00 	mov.w	ip, #0
 8003b22:	1caa      	adds	r2, r5, #2
 8003b24:	9215      	str	r2, [sp, #84]	; 0x54
 8003b26:	78aa      	ldrb	r2, [r5, #2]
 8003b28:	e788      	b.n	8003a3c <_strtod_l+0x19c>
 8003b2a:	f04f 0c01 	mov.w	ip, #1
 8003b2e:	e7f8      	b.n	8003b22 <_strtod_l+0x282>
 8003b30:	08006658 	.word	0x08006658
 8003b34:	08006648 	.word	0x08006648
 8003b38:	7ff00000 	.word	0x7ff00000
 8003b3c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003b3e:	1c51      	adds	r1, r2, #1
 8003b40:	9115      	str	r1, [sp, #84]	; 0x54
 8003b42:	7852      	ldrb	r2, [r2, #1]
 8003b44:	2a30      	cmp	r2, #48	; 0x30
 8003b46:	d0f9      	beq.n	8003b3c <_strtod_l+0x29c>
 8003b48:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8003b4c:	2908      	cmp	r1, #8
 8003b4e:	f63f af7a 	bhi.w	8003a46 <_strtod_l+0x1a6>
 8003b52:	3a30      	subs	r2, #48	; 0x30
 8003b54:	9208      	str	r2, [sp, #32]
 8003b56:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003b58:	920c      	str	r2, [sp, #48]	; 0x30
 8003b5a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003b5c:	1c57      	adds	r7, r2, #1
 8003b5e:	9715      	str	r7, [sp, #84]	; 0x54
 8003b60:	7852      	ldrb	r2, [r2, #1]
 8003b62:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8003b66:	f1be 0f09 	cmp.w	lr, #9
 8003b6a:	d938      	bls.n	8003bde <_strtod_l+0x33e>
 8003b6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b6e:	1a7f      	subs	r7, r7, r1
 8003b70:	2f08      	cmp	r7, #8
 8003b72:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8003b76:	dc03      	bgt.n	8003b80 <_strtod_l+0x2e0>
 8003b78:	9908      	ldr	r1, [sp, #32]
 8003b7a:	428f      	cmp	r7, r1
 8003b7c:	bfa8      	it	ge
 8003b7e:	460f      	movge	r7, r1
 8003b80:	f1bc 0f00 	cmp.w	ip, #0
 8003b84:	d000      	beq.n	8003b88 <_strtod_l+0x2e8>
 8003b86:	427f      	negs	r7, r7
 8003b88:	2e00      	cmp	r6, #0
 8003b8a:	d14f      	bne.n	8003c2c <_strtod_l+0x38c>
 8003b8c:	9904      	ldr	r1, [sp, #16]
 8003b8e:	4301      	orrs	r1, r0
 8003b90:	f47f aec1 	bne.w	8003916 <_strtod_l+0x76>
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f47f aedb 	bne.w	8003950 <_strtod_l+0xb0>
 8003b9a:	2a69      	cmp	r2, #105	; 0x69
 8003b9c:	d029      	beq.n	8003bf2 <_strtod_l+0x352>
 8003b9e:	dc26      	bgt.n	8003bee <_strtod_l+0x34e>
 8003ba0:	2a49      	cmp	r2, #73	; 0x49
 8003ba2:	d026      	beq.n	8003bf2 <_strtod_l+0x352>
 8003ba4:	2a4e      	cmp	r2, #78	; 0x4e
 8003ba6:	f47f aed3 	bne.w	8003950 <_strtod_l+0xb0>
 8003baa:	499b      	ldr	r1, [pc, #620]	; (8003e18 <_strtod_l+0x578>)
 8003bac:	a815      	add	r0, sp, #84	; 0x54
 8003bae:	f001 f9bf 	bl	8004f30 <__match>
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	f43f aecc 	beq.w	8003950 <_strtod_l+0xb0>
 8003bb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b28      	cmp	r3, #40	; 0x28
 8003bbe:	d12f      	bne.n	8003c20 <_strtod_l+0x380>
 8003bc0:	4996      	ldr	r1, [pc, #600]	; (8003e1c <_strtod_l+0x57c>)
 8003bc2:	aa18      	add	r2, sp, #96	; 0x60
 8003bc4:	a815      	add	r0, sp, #84	; 0x54
 8003bc6:	f001 f9c7 	bl	8004f58 <__hexnan>
 8003bca:	2805      	cmp	r0, #5
 8003bcc:	d128      	bne.n	8003c20 <_strtod_l+0x380>
 8003bce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003bd0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003bd4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8003bd8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8003bdc:	e69b      	b.n	8003916 <_strtod_l+0x76>
 8003bde:	9f08      	ldr	r7, [sp, #32]
 8003be0:	210a      	movs	r1, #10
 8003be2:	fb01 2107 	mla	r1, r1, r7, r2
 8003be6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8003bea:	9208      	str	r2, [sp, #32]
 8003bec:	e7b5      	b.n	8003b5a <_strtod_l+0x2ba>
 8003bee:	2a6e      	cmp	r2, #110	; 0x6e
 8003bf0:	e7d9      	b.n	8003ba6 <_strtod_l+0x306>
 8003bf2:	498b      	ldr	r1, [pc, #556]	; (8003e20 <_strtod_l+0x580>)
 8003bf4:	a815      	add	r0, sp, #84	; 0x54
 8003bf6:	f001 f99b 	bl	8004f30 <__match>
 8003bfa:	2800      	cmp	r0, #0
 8003bfc:	f43f aea8 	beq.w	8003950 <_strtod_l+0xb0>
 8003c00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003c02:	4988      	ldr	r1, [pc, #544]	; (8003e24 <_strtod_l+0x584>)
 8003c04:	3b01      	subs	r3, #1
 8003c06:	a815      	add	r0, sp, #84	; 0x54
 8003c08:	9315      	str	r3, [sp, #84]	; 0x54
 8003c0a:	f001 f991 	bl	8004f30 <__match>
 8003c0e:	b910      	cbnz	r0, 8003c16 <_strtod_l+0x376>
 8003c10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003c12:	3301      	adds	r3, #1
 8003c14:	9315      	str	r3, [sp, #84]	; 0x54
 8003c16:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8003e34 <_strtod_l+0x594>
 8003c1a:	f04f 0800 	mov.w	r8, #0
 8003c1e:	e67a      	b.n	8003916 <_strtod_l+0x76>
 8003c20:	4881      	ldr	r0, [pc, #516]	; (8003e28 <_strtod_l+0x588>)
 8003c22:	f000 fe89 	bl	8004938 <nan>
 8003c26:	ec59 8b10 	vmov	r8, r9, d0
 8003c2a:	e674      	b.n	8003916 <_strtod_l+0x76>
 8003c2c:	9b05      	ldr	r3, [sp, #20]
 8003c2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c30:	1afb      	subs	r3, r7, r3
 8003c32:	f1bb 0f00 	cmp.w	fp, #0
 8003c36:	bf08      	it	eq
 8003c38:	46b3      	moveq	fp, r6
 8003c3a:	2e10      	cmp	r6, #16
 8003c3c:	9308      	str	r3, [sp, #32]
 8003c3e:	4635      	mov	r5, r6
 8003c40:	bfa8      	it	ge
 8003c42:	2510      	movge	r5, #16
 8003c44:	f7fc fc6e 	bl	8000524 <__aeabi_ui2d>
 8003c48:	2e09      	cmp	r6, #9
 8003c4a:	4680      	mov	r8, r0
 8003c4c:	4689      	mov	r9, r1
 8003c4e:	dd13      	ble.n	8003c78 <_strtod_l+0x3d8>
 8003c50:	4b76      	ldr	r3, [pc, #472]	; (8003e2c <_strtod_l+0x58c>)
 8003c52:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003c56:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003c5a:	f7fc fcdd 	bl	8000618 <__aeabi_dmul>
 8003c5e:	4680      	mov	r8, r0
 8003c60:	4650      	mov	r0, sl
 8003c62:	4689      	mov	r9, r1
 8003c64:	f7fc fc5e 	bl	8000524 <__aeabi_ui2d>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4640      	mov	r0, r8
 8003c6e:	4649      	mov	r1, r9
 8003c70:	f7fc fb1c 	bl	80002ac <__adddf3>
 8003c74:	4680      	mov	r8, r0
 8003c76:	4689      	mov	r9, r1
 8003c78:	2e0f      	cmp	r6, #15
 8003c7a:	dc38      	bgt.n	8003cee <_strtod_l+0x44e>
 8003c7c:	9b08      	ldr	r3, [sp, #32]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f43f ae49 	beq.w	8003916 <_strtod_l+0x76>
 8003c84:	dd24      	ble.n	8003cd0 <_strtod_l+0x430>
 8003c86:	2b16      	cmp	r3, #22
 8003c88:	dc0b      	bgt.n	8003ca2 <_strtod_l+0x402>
 8003c8a:	4968      	ldr	r1, [pc, #416]	; (8003e2c <_strtod_l+0x58c>)
 8003c8c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003c90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c94:	4642      	mov	r2, r8
 8003c96:	464b      	mov	r3, r9
 8003c98:	f7fc fcbe 	bl	8000618 <__aeabi_dmul>
 8003c9c:	4680      	mov	r8, r0
 8003c9e:	4689      	mov	r9, r1
 8003ca0:	e639      	b.n	8003916 <_strtod_l+0x76>
 8003ca2:	9a08      	ldr	r2, [sp, #32]
 8003ca4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	db20      	blt.n	8003cee <_strtod_l+0x44e>
 8003cac:	4c5f      	ldr	r4, [pc, #380]	; (8003e2c <_strtod_l+0x58c>)
 8003cae:	f1c6 060f 	rsb	r6, r6, #15
 8003cb2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8003cb6:	4642      	mov	r2, r8
 8003cb8:	464b      	mov	r3, r9
 8003cba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cbe:	f7fc fcab 	bl	8000618 <__aeabi_dmul>
 8003cc2:	9b08      	ldr	r3, [sp, #32]
 8003cc4:	1b9e      	subs	r6, r3, r6
 8003cc6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8003cca:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003cce:	e7e3      	b.n	8003c98 <_strtod_l+0x3f8>
 8003cd0:	9b08      	ldr	r3, [sp, #32]
 8003cd2:	3316      	adds	r3, #22
 8003cd4:	db0b      	blt.n	8003cee <_strtod_l+0x44e>
 8003cd6:	9b05      	ldr	r3, [sp, #20]
 8003cd8:	1bdf      	subs	r7, r3, r7
 8003cda:	4b54      	ldr	r3, [pc, #336]	; (8003e2c <_strtod_l+0x58c>)
 8003cdc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ce4:	4640      	mov	r0, r8
 8003ce6:	4649      	mov	r1, r9
 8003ce8:	f7fc fdc0 	bl	800086c <__aeabi_ddiv>
 8003cec:	e7d6      	b.n	8003c9c <_strtod_l+0x3fc>
 8003cee:	9b08      	ldr	r3, [sp, #32]
 8003cf0:	1b75      	subs	r5, r6, r5
 8003cf2:	441d      	add	r5, r3
 8003cf4:	2d00      	cmp	r5, #0
 8003cf6:	dd70      	ble.n	8003dda <_strtod_l+0x53a>
 8003cf8:	f015 030f 	ands.w	r3, r5, #15
 8003cfc:	d00a      	beq.n	8003d14 <_strtod_l+0x474>
 8003cfe:	494b      	ldr	r1, [pc, #300]	; (8003e2c <_strtod_l+0x58c>)
 8003d00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003d04:	4642      	mov	r2, r8
 8003d06:	464b      	mov	r3, r9
 8003d08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d0c:	f7fc fc84 	bl	8000618 <__aeabi_dmul>
 8003d10:	4680      	mov	r8, r0
 8003d12:	4689      	mov	r9, r1
 8003d14:	f035 050f 	bics.w	r5, r5, #15
 8003d18:	d04d      	beq.n	8003db6 <_strtod_l+0x516>
 8003d1a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8003d1e:	dd22      	ble.n	8003d66 <_strtod_l+0x4c6>
 8003d20:	2500      	movs	r5, #0
 8003d22:	46ab      	mov	fp, r5
 8003d24:	9509      	str	r5, [sp, #36]	; 0x24
 8003d26:	9505      	str	r5, [sp, #20]
 8003d28:	2322      	movs	r3, #34	; 0x22
 8003d2a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8003e34 <_strtod_l+0x594>
 8003d2e:	6023      	str	r3, [r4, #0]
 8003d30:	f04f 0800 	mov.w	r8, #0
 8003d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f43f aded 	beq.w	8003916 <_strtod_l+0x76>
 8003d3c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8003d3e:	4620      	mov	r0, r4
 8003d40:	f001 faa4 	bl	800528c <_Bfree>
 8003d44:	9905      	ldr	r1, [sp, #20]
 8003d46:	4620      	mov	r0, r4
 8003d48:	f001 faa0 	bl	800528c <_Bfree>
 8003d4c:	4659      	mov	r1, fp
 8003d4e:	4620      	mov	r0, r4
 8003d50:	f001 fa9c 	bl	800528c <_Bfree>
 8003d54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d56:	4620      	mov	r0, r4
 8003d58:	f001 fa98 	bl	800528c <_Bfree>
 8003d5c:	4629      	mov	r1, r5
 8003d5e:	4620      	mov	r0, r4
 8003d60:	f001 fa94 	bl	800528c <_Bfree>
 8003d64:	e5d7      	b.n	8003916 <_strtod_l+0x76>
 8003d66:	4b32      	ldr	r3, [pc, #200]	; (8003e30 <_strtod_l+0x590>)
 8003d68:	9304      	str	r3, [sp, #16]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	112d      	asrs	r5, r5, #4
 8003d6e:	4640      	mov	r0, r8
 8003d70:	4649      	mov	r1, r9
 8003d72:	469a      	mov	sl, r3
 8003d74:	2d01      	cmp	r5, #1
 8003d76:	dc21      	bgt.n	8003dbc <_strtod_l+0x51c>
 8003d78:	b10b      	cbz	r3, 8003d7e <_strtod_l+0x4de>
 8003d7a:	4680      	mov	r8, r0
 8003d7c:	4689      	mov	r9, r1
 8003d7e:	492c      	ldr	r1, [pc, #176]	; (8003e30 <_strtod_l+0x590>)
 8003d80:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8003d84:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003d88:	4642      	mov	r2, r8
 8003d8a:	464b      	mov	r3, r9
 8003d8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d90:	f7fc fc42 	bl	8000618 <__aeabi_dmul>
 8003d94:	4b27      	ldr	r3, [pc, #156]	; (8003e34 <_strtod_l+0x594>)
 8003d96:	460a      	mov	r2, r1
 8003d98:	400b      	ands	r3, r1
 8003d9a:	4927      	ldr	r1, [pc, #156]	; (8003e38 <_strtod_l+0x598>)
 8003d9c:	428b      	cmp	r3, r1
 8003d9e:	4680      	mov	r8, r0
 8003da0:	d8be      	bhi.n	8003d20 <_strtod_l+0x480>
 8003da2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003da6:	428b      	cmp	r3, r1
 8003da8:	bf86      	itte	hi
 8003daa:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8003e3c <_strtod_l+0x59c>
 8003dae:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8003db2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8003db6:	2300      	movs	r3, #0
 8003db8:	9304      	str	r3, [sp, #16]
 8003dba:	e07b      	b.n	8003eb4 <_strtod_l+0x614>
 8003dbc:	07ea      	lsls	r2, r5, #31
 8003dbe:	d505      	bpl.n	8003dcc <_strtod_l+0x52c>
 8003dc0:	9b04      	ldr	r3, [sp, #16]
 8003dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc6:	f7fc fc27 	bl	8000618 <__aeabi_dmul>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	9a04      	ldr	r2, [sp, #16]
 8003dce:	3208      	adds	r2, #8
 8003dd0:	f10a 0a01 	add.w	sl, sl, #1
 8003dd4:	106d      	asrs	r5, r5, #1
 8003dd6:	9204      	str	r2, [sp, #16]
 8003dd8:	e7cc      	b.n	8003d74 <_strtod_l+0x4d4>
 8003dda:	d0ec      	beq.n	8003db6 <_strtod_l+0x516>
 8003ddc:	426d      	negs	r5, r5
 8003dde:	f015 020f 	ands.w	r2, r5, #15
 8003de2:	d00a      	beq.n	8003dfa <_strtod_l+0x55a>
 8003de4:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <_strtod_l+0x58c>)
 8003de6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003dea:	4640      	mov	r0, r8
 8003dec:	4649      	mov	r1, r9
 8003dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df2:	f7fc fd3b 	bl	800086c <__aeabi_ddiv>
 8003df6:	4680      	mov	r8, r0
 8003df8:	4689      	mov	r9, r1
 8003dfa:	112d      	asrs	r5, r5, #4
 8003dfc:	d0db      	beq.n	8003db6 <_strtod_l+0x516>
 8003dfe:	2d1f      	cmp	r5, #31
 8003e00:	dd1e      	ble.n	8003e40 <_strtod_l+0x5a0>
 8003e02:	2500      	movs	r5, #0
 8003e04:	46ab      	mov	fp, r5
 8003e06:	9509      	str	r5, [sp, #36]	; 0x24
 8003e08:	9505      	str	r5, [sp, #20]
 8003e0a:	2322      	movs	r3, #34	; 0x22
 8003e0c:	f04f 0800 	mov.w	r8, #0
 8003e10:	f04f 0900 	mov.w	r9, #0
 8003e14:	6023      	str	r3, [r4, #0]
 8003e16:	e78d      	b.n	8003d34 <_strtod_l+0x494>
 8003e18:	08006653 	.word	0x08006653
 8003e1c:	0800666c 	.word	0x0800666c
 8003e20:	0800664a 	.word	0x0800664a
 8003e24:	0800664d 	.word	0x0800664d
 8003e28:	080069cf 	.word	0x080069cf
 8003e2c:	080068c0 	.word	0x080068c0
 8003e30:	08006898 	.word	0x08006898
 8003e34:	7ff00000 	.word	0x7ff00000
 8003e38:	7ca00000 	.word	0x7ca00000
 8003e3c:	7fefffff 	.word	0x7fefffff
 8003e40:	f015 0310 	ands.w	r3, r5, #16
 8003e44:	bf18      	it	ne
 8003e46:	236a      	movne	r3, #106	; 0x6a
 8003e48:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80041ec <_strtod_l+0x94c>
 8003e4c:	9304      	str	r3, [sp, #16]
 8003e4e:	4640      	mov	r0, r8
 8003e50:	4649      	mov	r1, r9
 8003e52:	2300      	movs	r3, #0
 8003e54:	07ea      	lsls	r2, r5, #31
 8003e56:	d504      	bpl.n	8003e62 <_strtod_l+0x5c2>
 8003e58:	e9da 2300 	ldrd	r2, r3, [sl]
 8003e5c:	f7fc fbdc 	bl	8000618 <__aeabi_dmul>
 8003e60:	2301      	movs	r3, #1
 8003e62:	106d      	asrs	r5, r5, #1
 8003e64:	f10a 0a08 	add.w	sl, sl, #8
 8003e68:	d1f4      	bne.n	8003e54 <_strtod_l+0x5b4>
 8003e6a:	b10b      	cbz	r3, 8003e70 <_strtod_l+0x5d0>
 8003e6c:	4680      	mov	r8, r0
 8003e6e:	4689      	mov	r9, r1
 8003e70:	9b04      	ldr	r3, [sp, #16]
 8003e72:	b1bb      	cbz	r3, 8003ea4 <_strtod_l+0x604>
 8003e74:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8003e78:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	4649      	mov	r1, r9
 8003e80:	dd10      	ble.n	8003ea4 <_strtod_l+0x604>
 8003e82:	2b1f      	cmp	r3, #31
 8003e84:	f340 811e 	ble.w	80040c4 <_strtod_l+0x824>
 8003e88:	2b34      	cmp	r3, #52	; 0x34
 8003e8a:	bfde      	ittt	le
 8003e8c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8003e90:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8003e94:	4093      	lslle	r3, r2
 8003e96:	f04f 0800 	mov.w	r8, #0
 8003e9a:	bfcc      	ite	gt
 8003e9c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8003ea0:	ea03 0901 	andle.w	r9, r3, r1
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	4640      	mov	r0, r8
 8003eaa:	4649      	mov	r1, r9
 8003eac:	f7fc fe1c 	bl	8000ae8 <__aeabi_dcmpeq>
 8003eb0:	2800      	cmp	r0, #0
 8003eb2:	d1a6      	bne.n	8003e02 <_strtod_l+0x562>
 8003eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003eba:	4633      	mov	r3, r6
 8003ebc:	465a      	mov	r2, fp
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f001 fa4c 	bl	800535c <__s2b>
 8003ec4:	9009      	str	r0, [sp, #36]	; 0x24
 8003ec6:	2800      	cmp	r0, #0
 8003ec8:	f43f af2a 	beq.w	8003d20 <_strtod_l+0x480>
 8003ecc:	9a08      	ldr	r2, [sp, #32]
 8003ece:	9b05      	ldr	r3, [sp, #20]
 8003ed0:	2a00      	cmp	r2, #0
 8003ed2:	eba3 0307 	sub.w	r3, r3, r7
 8003ed6:	bfa8      	it	ge
 8003ed8:	2300      	movge	r3, #0
 8003eda:	930c      	str	r3, [sp, #48]	; 0x30
 8003edc:	2500      	movs	r5, #0
 8003ede:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8003ee2:	9312      	str	r3, [sp, #72]	; 0x48
 8003ee4:	46ab      	mov	fp, r5
 8003ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ee8:	4620      	mov	r0, r4
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	f001 f98e 	bl	800520c <_Balloc>
 8003ef0:	9005      	str	r0, [sp, #20]
 8003ef2:	2800      	cmp	r0, #0
 8003ef4:	f43f af18 	beq.w	8003d28 <_strtod_l+0x488>
 8003ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	3202      	adds	r2, #2
 8003efe:	f103 010c 	add.w	r1, r3, #12
 8003f02:	0092      	lsls	r2, r2, #2
 8003f04:	300c      	adds	r0, #12
 8003f06:	f000 fd06 	bl	8004916 <memcpy>
 8003f0a:	ec49 8b10 	vmov	d0, r8, r9
 8003f0e:	aa18      	add	r2, sp, #96	; 0x60
 8003f10:	a917      	add	r1, sp, #92	; 0x5c
 8003f12:	4620      	mov	r0, r4
 8003f14:	f001 fd56 	bl	80059c4 <__d2b>
 8003f18:	ec49 8b18 	vmov	d8, r8, r9
 8003f1c:	9016      	str	r0, [sp, #88]	; 0x58
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	f43f af02 	beq.w	8003d28 <_strtod_l+0x488>
 8003f24:	2101      	movs	r1, #1
 8003f26:	4620      	mov	r0, r4
 8003f28:	f001 fab0 	bl	800548c <__i2b>
 8003f2c:	4683      	mov	fp, r0
 8003f2e:	2800      	cmp	r0, #0
 8003f30:	f43f aefa 	beq.w	8003d28 <_strtod_l+0x488>
 8003f34:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8003f36:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8003f38:	2e00      	cmp	r6, #0
 8003f3a:	bfab      	itete	ge
 8003f3c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8003f3e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8003f40:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8003f42:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8003f46:	bfac      	ite	ge
 8003f48:	eb06 0a03 	addge.w	sl, r6, r3
 8003f4c:	1b9f      	sublt	r7, r3, r6
 8003f4e:	9b04      	ldr	r3, [sp, #16]
 8003f50:	1af6      	subs	r6, r6, r3
 8003f52:	4416      	add	r6, r2
 8003f54:	4ba0      	ldr	r3, [pc, #640]	; (80041d8 <_strtod_l+0x938>)
 8003f56:	3e01      	subs	r6, #1
 8003f58:	429e      	cmp	r6, r3
 8003f5a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003f5e:	f280 80c4 	bge.w	80040ea <_strtod_l+0x84a>
 8003f62:	1b9b      	subs	r3, r3, r6
 8003f64:	2b1f      	cmp	r3, #31
 8003f66:	eba2 0203 	sub.w	r2, r2, r3
 8003f6a:	f04f 0101 	mov.w	r1, #1
 8003f6e:	f300 80b0 	bgt.w	80040d2 <_strtod_l+0x832>
 8003f72:	fa01 f303 	lsl.w	r3, r1, r3
 8003f76:	930e      	str	r3, [sp, #56]	; 0x38
 8003f78:	2300      	movs	r3, #0
 8003f7a:	930d      	str	r3, [sp, #52]	; 0x34
 8003f7c:	eb0a 0602 	add.w	r6, sl, r2
 8003f80:	9b04      	ldr	r3, [sp, #16]
 8003f82:	45b2      	cmp	sl, r6
 8003f84:	4417      	add	r7, r2
 8003f86:	441f      	add	r7, r3
 8003f88:	4653      	mov	r3, sl
 8003f8a:	bfa8      	it	ge
 8003f8c:	4633      	movge	r3, r6
 8003f8e:	42bb      	cmp	r3, r7
 8003f90:	bfa8      	it	ge
 8003f92:	463b      	movge	r3, r7
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	bfc2      	ittt	gt
 8003f98:	1af6      	subgt	r6, r6, r3
 8003f9a:	1aff      	subgt	r7, r7, r3
 8003f9c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8003fa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	dd17      	ble.n	8003fd6 <_strtod_l+0x736>
 8003fa6:	4659      	mov	r1, fp
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4620      	mov	r0, r4
 8003fac:	f001 fb2e 	bl	800560c <__pow5mult>
 8003fb0:	4683      	mov	fp, r0
 8003fb2:	2800      	cmp	r0, #0
 8003fb4:	f43f aeb8 	beq.w	8003d28 <_strtod_l+0x488>
 8003fb8:	4601      	mov	r1, r0
 8003fba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	f001 fa7b 	bl	80054b8 <__multiply>
 8003fc2:	900b      	str	r0, [sp, #44]	; 0x2c
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	f43f aeaf 	beq.w	8003d28 <_strtod_l+0x488>
 8003fca:	9916      	ldr	r1, [sp, #88]	; 0x58
 8003fcc:	4620      	mov	r0, r4
 8003fce:	f001 f95d 	bl	800528c <_Bfree>
 8003fd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003fd4:	9316      	str	r3, [sp, #88]	; 0x58
 8003fd6:	2e00      	cmp	r6, #0
 8003fd8:	f300 808c 	bgt.w	80040f4 <_strtod_l+0x854>
 8003fdc:	9b08      	ldr	r3, [sp, #32]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	dd08      	ble.n	8003ff4 <_strtod_l+0x754>
 8003fe2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003fe4:	9905      	ldr	r1, [sp, #20]
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	f001 fb10 	bl	800560c <__pow5mult>
 8003fec:	9005      	str	r0, [sp, #20]
 8003fee:	2800      	cmp	r0, #0
 8003ff0:	f43f ae9a 	beq.w	8003d28 <_strtod_l+0x488>
 8003ff4:	2f00      	cmp	r7, #0
 8003ff6:	dd08      	ble.n	800400a <_strtod_l+0x76a>
 8003ff8:	9905      	ldr	r1, [sp, #20]
 8003ffa:	463a      	mov	r2, r7
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	f001 fb5f 	bl	80056c0 <__lshift>
 8004002:	9005      	str	r0, [sp, #20]
 8004004:	2800      	cmp	r0, #0
 8004006:	f43f ae8f 	beq.w	8003d28 <_strtod_l+0x488>
 800400a:	f1ba 0f00 	cmp.w	sl, #0
 800400e:	dd08      	ble.n	8004022 <_strtod_l+0x782>
 8004010:	4659      	mov	r1, fp
 8004012:	4652      	mov	r2, sl
 8004014:	4620      	mov	r0, r4
 8004016:	f001 fb53 	bl	80056c0 <__lshift>
 800401a:	4683      	mov	fp, r0
 800401c:	2800      	cmp	r0, #0
 800401e:	f43f ae83 	beq.w	8003d28 <_strtod_l+0x488>
 8004022:	9a05      	ldr	r2, [sp, #20]
 8004024:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004026:	4620      	mov	r0, r4
 8004028:	f001 fbd2 	bl	80057d0 <__mdiff>
 800402c:	4605      	mov	r5, r0
 800402e:	2800      	cmp	r0, #0
 8004030:	f43f ae7a 	beq.w	8003d28 <_strtod_l+0x488>
 8004034:	68c3      	ldr	r3, [r0, #12]
 8004036:	930b      	str	r3, [sp, #44]	; 0x2c
 8004038:	2300      	movs	r3, #0
 800403a:	60c3      	str	r3, [r0, #12]
 800403c:	4659      	mov	r1, fp
 800403e:	f001 fbab 	bl	8005798 <__mcmp>
 8004042:	2800      	cmp	r0, #0
 8004044:	da60      	bge.n	8004108 <_strtod_l+0x868>
 8004046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004048:	ea53 0308 	orrs.w	r3, r3, r8
 800404c:	f040 8084 	bne.w	8004158 <_strtod_l+0x8b8>
 8004050:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004054:	2b00      	cmp	r3, #0
 8004056:	d17f      	bne.n	8004158 <_strtod_l+0x8b8>
 8004058:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800405c:	0d1b      	lsrs	r3, r3, #20
 800405e:	051b      	lsls	r3, r3, #20
 8004060:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004064:	d978      	bls.n	8004158 <_strtod_l+0x8b8>
 8004066:	696b      	ldr	r3, [r5, #20]
 8004068:	b913      	cbnz	r3, 8004070 <_strtod_l+0x7d0>
 800406a:	692b      	ldr	r3, [r5, #16]
 800406c:	2b01      	cmp	r3, #1
 800406e:	dd73      	ble.n	8004158 <_strtod_l+0x8b8>
 8004070:	4629      	mov	r1, r5
 8004072:	2201      	movs	r2, #1
 8004074:	4620      	mov	r0, r4
 8004076:	f001 fb23 	bl	80056c0 <__lshift>
 800407a:	4659      	mov	r1, fp
 800407c:	4605      	mov	r5, r0
 800407e:	f001 fb8b 	bl	8005798 <__mcmp>
 8004082:	2800      	cmp	r0, #0
 8004084:	dd68      	ble.n	8004158 <_strtod_l+0x8b8>
 8004086:	9904      	ldr	r1, [sp, #16]
 8004088:	4a54      	ldr	r2, [pc, #336]	; (80041dc <_strtod_l+0x93c>)
 800408a:	464b      	mov	r3, r9
 800408c:	2900      	cmp	r1, #0
 800408e:	f000 8084 	beq.w	800419a <_strtod_l+0x8fa>
 8004092:	ea02 0109 	and.w	r1, r2, r9
 8004096:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800409a:	dc7e      	bgt.n	800419a <_strtod_l+0x8fa>
 800409c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80040a0:	f77f aeb3 	ble.w	8003e0a <_strtod_l+0x56a>
 80040a4:	4b4e      	ldr	r3, [pc, #312]	; (80041e0 <_strtod_l+0x940>)
 80040a6:	4640      	mov	r0, r8
 80040a8:	4649      	mov	r1, r9
 80040aa:	2200      	movs	r2, #0
 80040ac:	f7fc fab4 	bl	8000618 <__aeabi_dmul>
 80040b0:	4b4a      	ldr	r3, [pc, #296]	; (80041dc <_strtod_l+0x93c>)
 80040b2:	400b      	ands	r3, r1
 80040b4:	4680      	mov	r8, r0
 80040b6:	4689      	mov	r9, r1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f47f ae3f 	bne.w	8003d3c <_strtod_l+0x49c>
 80040be:	2322      	movs	r3, #34	; 0x22
 80040c0:	6023      	str	r3, [r4, #0]
 80040c2:	e63b      	b.n	8003d3c <_strtod_l+0x49c>
 80040c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	ea03 0808 	and.w	r8, r3, r8
 80040d0:	e6e8      	b.n	8003ea4 <_strtod_l+0x604>
 80040d2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80040d6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80040da:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80040de:	36e2      	adds	r6, #226	; 0xe2
 80040e0:	fa01 f306 	lsl.w	r3, r1, r6
 80040e4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80040e8:	e748      	b.n	8003f7c <_strtod_l+0x6dc>
 80040ea:	2100      	movs	r1, #0
 80040ec:	2301      	movs	r3, #1
 80040ee:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80040f2:	e743      	b.n	8003f7c <_strtod_l+0x6dc>
 80040f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80040f6:	4632      	mov	r2, r6
 80040f8:	4620      	mov	r0, r4
 80040fa:	f001 fae1 	bl	80056c0 <__lshift>
 80040fe:	9016      	str	r0, [sp, #88]	; 0x58
 8004100:	2800      	cmp	r0, #0
 8004102:	f47f af6b 	bne.w	8003fdc <_strtod_l+0x73c>
 8004106:	e60f      	b.n	8003d28 <_strtod_l+0x488>
 8004108:	46ca      	mov	sl, r9
 800410a:	d171      	bne.n	80041f0 <_strtod_l+0x950>
 800410c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800410e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004112:	b352      	cbz	r2, 800416a <_strtod_l+0x8ca>
 8004114:	4a33      	ldr	r2, [pc, #204]	; (80041e4 <_strtod_l+0x944>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d12a      	bne.n	8004170 <_strtod_l+0x8d0>
 800411a:	9b04      	ldr	r3, [sp, #16]
 800411c:	4641      	mov	r1, r8
 800411e:	b1fb      	cbz	r3, 8004160 <_strtod_l+0x8c0>
 8004120:	4b2e      	ldr	r3, [pc, #184]	; (80041dc <_strtod_l+0x93c>)
 8004122:	ea09 0303 	and.w	r3, r9, r3
 8004126:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800412a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800412e:	d81a      	bhi.n	8004166 <_strtod_l+0x8c6>
 8004130:	0d1b      	lsrs	r3, r3, #20
 8004132:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	4299      	cmp	r1, r3
 800413c:	d118      	bne.n	8004170 <_strtod_l+0x8d0>
 800413e:	4b2a      	ldr	r3, [pc, #168]	; (80041e8 <_strtod_l+0x948>)
 8004140:	459a      	cmp	sl, r3
 8004142:	d102      	bne.n	800414a <_strtod_l+0x8aa>
 8004144:	3101      	adds	r1, #1
 8004146:	f43f adef 	beq.w	8003d28 <_strtod_l+0x488>
 800414a:	4b24      	ldr	r3, [pc, #144]	; (80041dc <_strtod_l+0x93c>)
 800414c:	ea0a 0303 	and.w	r3, sl, r3
 8004150:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8004154:	f04f 0800 	mov.w	r8, #0
 8004158:	9b04      	ldr	r3, [sp, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1a2      	bne.n	80040a4 <_strtod_l+0x804>
 800415e:	e5ed      	b.n	8003d3c <_strtod_l+0x49c>
 8004160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004164:	e7e9      	b.n	800413a <_strtod_l+0x89a>
 8004166:	4613      	mov	r3, r2
 8004168:	e7e7      	b.n	800413a <_strtod_l+0x89a>
 800416a:	ea53 0308 	orrs.w	r3, r3, r8
 800416e:	d08a      	beq.n	8004086 <_strtod_l+0x7e6>
 8004170:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004172:	b1e3      	cbz	r3, 80041ae <_strtod_l+0x90e>
 8004174:	ea13 0f0a 	tst.w	r3, sl
 8004178:	d0ee      	beq.n	8004158 <_strtod_l+0x8b8>
 800417a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800417c:	9a04      	ldr	r2, [sp, #16]
 800417e:	4640      	mov	r0, r8
 8004180:	4649      	mov	r1, r9
 8004182:	b1c3      	cbz	r3, 80041b6 <_strtod_l+0x916>
 8004184:	f7ff fb6f 	bl	8003866 <sulp>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	ec51 0b18 	vmov	r0, r1, d8
 8004190:	f7fc f88c 	bl	80002ac <__adddf3>
 8004194:	4680      	mov	r8, r0
 8004196:	4689      	mov	r9, r1
 8004198:	e7de      	b.n	8004158 <_strtod_l+0x8b8>
 800419a:	4013      	ands	r3, r2
 800419c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80041a0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80041a4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80041a8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80041ac:	e7d4      	b.n	8004158 <_strtod_l+0x8b8>
 80041ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041b0:	ea13 0f08 	tst.w	r3, r8
 80041b4:	e7e0      	b.n	8004178 <_strtod_l+0x8d8>
 80041b6:	f7ff fb56 	bl	8003866 <sulp>
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	ec51 0b18 	vmov	r0, r1, d8
 80041c2:	f7fc f871 	bl	80002a8 <__aeabi_dsub>
 80041c6:	2200      	movs	r2, #0
 80041c8:	2300      	movs	r3, #0
 80041ca:	4680      	mov	r8, r0
 80041cc:	4689      	mov	r9, r1
 80041ce:	f7fc fc8b 	bl	8000ae8 <__aeabi_dcmpeq>
 80041d2:	2800      	cmp	r0, #0
 80041d4:	d0c0      	beq.n	8004158 <_strtod_l+0x8b8>
 80041d6:	e618      	b.n	8003e0a <_strtod_l+0x56a>
 80041d8:	fffffc02 	.word	0xfffffc02
 80041dc:	7ff00000 	.word	0x7ff00000
 80041e0:	39500000 	.word	0x39500000
 80041e4:	000fffff 	.word	0x000fffff
 80041e8:	7fefffff 	.word	0x7fefffff
 80041ec:	08006680 	.word	0x08006680
 80041f0:	4659      	mov	r1, fp
 80041f2:	4628      	mov	r0, r5
 80041f4:	f001 fc40 	bl	8005a78 <__ratio>
 80041f8:	ec57 6b10 	vmov	r6, r7, d0
 80041fc:	ee10 0a10 	vmov	r0, s0
 8004200:	2200      	movs	r2, #0
 8004202:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004206:	4639      	mov	r1, r7
 8004208:	f7fc fc82 	bl	8000b10 <__aeabi_dcmple>
 800420c:	2800      	cmp	r0, #0
 800420e:	d071      	beq.n	80042f4 <_strtod_l+0xa54>
 8004210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004212:	2b00      	cmp	r3, #0
 8004214:	d17c      	bne.n	8004310 <_strtod_l+0xa70>
 8004216:	f1b8 0f00 	cmp.w	r8, #0
 800421a:	d15a      	bne.n	80042d2 <_strtod_l+0xa32>
 800421c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004220:	2b00      	cmp	r3, #0
 8004222:	d15d      	bne.n	80042e0 <_strtod_l+0xa40>
 8004224:	4b90      	ldr	r3, [pc, #576]	; (8004468 <_strtod_l+0xbc8>)
 8004226:	2200      	movs	r2, #0
 8004228:	4630      	mov	r0, r6
 800422a:	4639      	mov	r1, r7
 800422c:	f7fc fc66 	bl	8000afc <__aeabi_dcmplt>
 8004230:	2800      	cmp	r0, #0
 8004232:	d15c      	bne.n	80042ee <_strtod_l+0xa4e>
 8004234:	4630      	mov	r0, r6
 8004236:	4639      	mov	r1, r7
 8004238:	4b8c      	ldr	r3, [pc, #560]	; (800446c <_strtod_l+0xbcc>)
 800423a:	2200      	movs	r2, #0
 800423c:	f7fc f9ec 	bl	8000618 <__aeabi_dmul>
 8004240:	4606      	mov	r6, r0
 8004242:	460f      	mov	r7, r1
 8004244:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8004248:	9606      	str	r6, [sp, #24]
 800424a:	9307      	str	r3, [sp, #28]
 800424c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004250:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004254:	4b86      	ldr	r3, [pc, #536]	; (8004470 <_strtod_l+0xbd0>)
 8004256:	ea0a 0303 	and.w	r3, sl, r3
 800425a:	930d      	str	r3, [sp, #52]	; 0x34
 800425c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800425e:	4b85      	ldr	r3, [pc, #532]	; (8004474 <_strtod_l+0xbd4>)
 8004260:	429a      	cmp	r2, r3
 8004262:	f040 8090 	bne.w	8004386 <_strtod_l+0xae6>
 8004266:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800426a:	ec49 8b10 	vmov	d0, r8, r9
 800426e:	f001 fb39 	bl	80058e4 <__ulp>
 8004272:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004276:	ec51 0b10 	vmov	r0, r1, d0
 800427a:	f7fc f9cd 	bl	8000618 <__aeabi_dmul>
 800427e:	4642      	mov	r2, r8
 8004280:	464b      	mov	r3, r9
 8004282:	f7fc f813 	bl	80002ac <__adddf3>
 8004286:	460b      	mov	r3, r1
 8004288:	4979      	ldr	r1, [pc, #484]	; (8004470 <_strtod_l+0xbd0>)
 800428a:	4a7b      	ldr	r2, [pc, #492]	; (8004478 <_strtod_l+0xbd8>)
 800428c:	4019      	ands	r1, r3
 800428e:	4291      	cmp	r1, r2
 8004290:	4680      	mov	r8, r0
 8004292:	d944      	bls.n	800431e <_strtod_l+0xa7e>
 8004294:	ee18 2a90 	vmov	r2, s17
 8004298:	4b78      	ldr	r3, [pc, #480]	; (800447c <_strtod_l+0xbdc>)
 800429a:	429a      	cmp	r2, r3
 800429c:	d104      	bne.n	80042a8 <_strtod_l+0xa08>
 800429e:	ee18 3a10 	vmov	r3, s16
 80042a2:	3301      	adds	r3, #1
 80042a4:	f43f ad40 	beq.w	8003d28 <_strtod_l+0x488>
 80042a8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800447c <_strtod_l+0xbdc>
 80042ac:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80042b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80042b2:	4620      	mov	r0, r4
 80042b4:	f000 ffea 	bl	800528c <_Bfree>
 80042b8:	9905      	ldr	r1, [sp, #20]
 80042ba:	4620      	mov	r0, r4
 80042bc:	f000 ffe6 	bl	800528c <_Bfree>
 80042c0:	4659      	mov	r1, fp
 80042c2:	4620      	mov	r0, r4
 80042c4:	f000 ffe2 	bl	800528c <_Bfree>
 80042c8:	4629      	mov	r1, r5
 80042ca:	4620      	mov	r0, r4
 80042cc:	f000 ffde 	bl	800528c <_Bfree>
 80042d0:	e609      	b.n	8003ee6 <_strtod_l+0x646>
 80042d2:	f1b8 0f01 	cmp.w	r8, #1
 80042d6:	d103      	bne.n	80042e0 <_strtod_l+0xa40>
 80042d8:	f1b9 0f00 	cmp.w	r9, #0
 80042dc:	f43f ad95 	beq.w	8003e0a <_strtod_l+0x56a>
 80042e0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8004438 <_strtod_l+0xb98>
 80042e4:	4f60      	ldr	r7, [pc, #384]	; (8004468 <_strtod_l+0xbc8>)
 80042e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80042ea:	2600      	movs	r6, #0
 80042ec:	e7ae      	b.n	800424c <_strtod_l+0x9ac>
 80042ee:	4f5f      	ldr	r7, [pc, #380]	; (800446c <_strtod_l+0xbcc>)
 80042f0:	2600      	movs	r6, #0
 80042f2:	e7a7      	b.n	8004244 <_strtod_l+0x9a4>
 80042f4:	4b5d      	ldr	r3, [pc, #372]	; (800446c <_strtod_l+0xbcc>)
 80042f6:	4630      	mov	r0, r6
 80042f8:	4639      	mov	r1, r7
 80042fa:	2200      	movs	r2, #0
 80042fc:	f7fc f98c 	bl	8000618 <__aeabi_dmul>
 8004300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004302:	4606      	mov	r6, r0
 8004304:	460f      	mov	r7, r1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d09c      	beq.n	8004244 <_strtod_l+0x9a4>
 800430a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800430e:	e79d      	b.n	800424c <_strtod_l+0x9ac>
 8004310:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8004440 <_strtod_l+0xba0>
 8004314:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004318:	ec57 6b17 	vmov	r6, r7, d7
 800431c:	e796      	b.n	800424c <_strtod_l+0x9ac>
 800431e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004322:	9b04      	ldr	r3, [sp, #16]
 8004324:	46ca      	mov	sl, r9
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1c2      	bne.n	80042b0 <_strtod_l+0xa10>
 800432a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800432e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004330:	0d1b      	lsrs	r3, r3, #20
 8004332:	051b      	lsls	r3, r3, #20
 8004334:	429a      	cmp	r2, r3
 8004336:	d1bb      	bne.n	80042b0 <_strtod_l+0xa10>
 8004338:	4630      	mov	r0, r6
 800433a:	4639      	mov	r1, r7
 800433c:	f7fc fc3e 	bl	8000bbc <__aeabi_d2lz>
 8004340:	f7fc f93c 	bl	80005bc <__aeabi_l2d>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4630      	mov	r0, r6
 800434a:	4639      	mov	r1, r7
 800434c:	f7fb ffac 	bl	80002a8 <__aeabi_dsub>
 8004350:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004352:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004356:	ea43 0308 	orr.w	r3, r3, r8
 800435a:	4313      	orrs	r3, r2
 800435c:	4606      	mov	r6, r0
 800435e:	460f      	mov	r7, r1
 8004360:	d054      	beq.n	800440c <_strtod_l+0xb6c>
 8004362:	a339      	add	r3, pc, #228	; (adr r3, 8004448 <_strtod_l+0xba8>)
 8004364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004368:	f7fc fbc8 	bl	8000afc <__aeabi_dcmplt>
 800436c:	2800      	cmp	r0, #0
 800436e:	f47f ace5 	bne.w	8003d3c <_strtod_l+0x49c>
 8004372:	a337      	add	r3, pc, #220	; (adr r3, 8004450 <_strtod_l+0xbb0>)
 8004374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004378:	4630      	mov	r0, r6
 800437a:	4639      	mov	r1, r7
 800437c:	f7fc fbdc 	bl	8000b38 <__aeabi_dcmpgt>
 8004380:	2800      	cmp	r0, #0
 8004382:	d095      	beq.n	80042b0 <_strtod_l+0xa10>
 8004384:	e4da      	b.n	8003d3c <_strtod_l+0x49c>
 8004386:	9b04      	ldr	r3, [sp, #16]
 8004388:	b333      	cbz	r3, 80043d8 <_strtod_l+0xb38>
 800438a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800438c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004390:	d822      	bhi.n	80043d8 <_strtod_l+0xb38>
 8004392:	a331      	add	r3, pc, #196	; (adr r3, 8004458 <_strtod_l+0xbb8>)
 8004394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004398:	4630      	mov	r0, r6
 800439a:	4639      	mov	r1, r7
 800439c:	f7fc fbb8 	bl	8000b10 <__aeabi_dcmple>
 80043a0:	b1a0      	cbz	r0, 80043cc <_strtod_l+0xb2c>
 80043a2:	4639      	mov	r1, r7
 80043a4:	4630      	mov	r0, r6
 80043a6:	f7fc fbd1 	bl	8000b4c <__aeabi_d2uiz>
 80043aa:	2801      	cmp	r0, #1
 80043ac:	bf38      	it	cc
 80043ae:	2001      	movcc	r0, #1
 80043b0:	f7fc f8b8 	bl	8000524 <__aeabi_ui2d>
 80043b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043b6:	4606      	mov	r6, r0
 80043b8:	460f      	mov	r7, r1
 80043ba:	bb23      	cbnz	r3, 8004406 <_strtod_l+0xb66>
 80043bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80043c0:	9010      	str	r0, [sp, #64]	; 0x40
 80043c2:	9311      	str	r3, [sp, #68]	; 0x44
 80043c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80043c8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80043cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80043d0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80043d4:	1a9b      	subs	r3, r3, r2
 80043d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80043d8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80043dc:	eeb0 0a48 	vmov.f32	s0, s16
 80043e0:	eef0 0a68 	vmov.f32	s1, s17
 80043e4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80043e8:	f001 fa7c 	bl	80058e4 <__ulp>
 80043ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80043f0:	ec53 2b10 	vmov	r2, r3, d0
 80043f4:	f7fc f910 	bl	8000618 <__aeabi_dmul>
 80043f8:	ec53 2b18 	vmov	r2, r3, d8
 80043fc:	f7fb ff56 	bl	80002ac <__adddf3>
 8004400:	4680      	mov	r8, r0
 8004402:	4689      	mov	r9, r1
 8004404:	e78d      	b.n	8004322 <_strtod_l+0xa82>
 8004406:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800440a:	e7db      	b.n	80043c4 <_strtod_l+0xb24>
 800440c:	a314      	add	r3, pc, #80	; (adr r3, 8004460 <_strtod_l+0xbc0>)
 800440e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004412:	f7fc fb73 	bl	8000afc <__aeabi_dcmplt>
 8004416:	e7b3      	b.n	8004380 <_strtod_l+0xae0>
 8004418:	2300      	movs	r3, #0
 800441a:	930a      	str	r3, [sp, #40]	; 0x28
 800441c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800441e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	f7ff ba7c 	b.w	800391e <_strtod_l+0x7e>
 8004426:	2a65      	cmp	r2, #101	; 0x65
 8004428:	f43f ab75 	beq.w	8003b16 <_strtod_l+0x276>
 800442c:	2a45      	cmp	r2, #69	; 0x45
 800442e:	f43f ab72 	beq.w	8003b16 <_strtod_l+0x276>
 8004432:	2301      	movs	r3, #1
 8004434:	f7ff bbaa 	b.w	8003b8c <_strtod_l+0x2ec>
 8004438:	00000000 	.word	0x00000000
 800443c:	bff00000 	.word	0xbff00000
 8004440:	00000000 	.word	0x00000000
 8004444:	3ff00000 	.word	0x3ff00000
 8004448:	94a03595 	.word	0x94a03595
 800444c:	3fdfffff 	.word	0x3fdfffff
 8004450:	35afe535 	.word	0x35afe535
 8004454:	3fe00000 	.word	0x3fe00000
 8004458:	ffc00000 	.word	0xffc00000
 800445c:	41dfffff 	.word	0x41dfffff
 8004460:	94a03595 	.word	0x94a03595
 8004464:	3fcfffff 	.word	0x3fcfffff
 8004468:	3ff00000 	.word	0x3ff00000
 800446c:	3fe00000 	.word	0x3fe00000
 8004470:	7ff00000 	.word	0x7ff00000
 8004474:	7fe00000 	.word	0x7fe00000
 8004478:	7c9fffff 	.word	0x7c9fffff
 800447c:	7fefffff 	.word	0x7fefffff

08004480 <strtod>:
 8004480:	460a      	mov	r2, r1
 8004482:	4601      	mov	r1, r0
 8004484:	4802      	ldr	r0, [pc, #8]	; (8004490 <strtod+0x10>)
 8004486:	4b03      	ldr	r3, [pc, #12]	; (8004494 <strtod+0x14>)
 8004488:	6800      	ldr	r0, [r0, #0]
 800448a:	f7ff ba09 	b.w	80038a0 <_strtod_l>
 800448e:	bf00      	nop
 8004490:	200001d0 	.word	0x200001d0
 8004494:	20000018 	.word	0x20000018

08004498 <_strtol_l.constprop.0>:
 8004498:	2b01      	cmp	r3, #1
 800449a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800449e:	d001      	beq.n	80044a4 <_strtol_l.constprop.0+0xc>
 80044a0:	2b24      	cmp	r3, #36	; 0x24
 80044a2:	d906      	bls.n	80044b2 <_strtol_l.constprop.0+0x1a>
 80044a4:	f000 fa0a 	bl	80048bc <__errno>
 80044a8:	2316      	movs	r3, #22
 80044aa:	6003      	str	r3, [r0, #0]
 80044ac:	2000      	movs	r0, #0
 80044ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004598 <_strtol_l.constprop.0+0x100>
 80044b6:	460d      	mov	r5, r1
 80044b8:	462e      	mov	r6, r5
 80044ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044be:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80044c2:	f017 0708 	ands.w	r7, r7, #8
 80044c6:	d1f7      	bne.n	80044b8 <_strtol_l.constprop.0+0x20>
 80044c8:	2c2d      	cmp	r4, #45	; 0x2d
 80044ca:	d132      	bne.n	8004532 <_strtol_l.constprop.0+0x9a>
 80044cc:	782c      	ldrb	r4, [r5, #0]
 80044ce:	2701      	movs	r7, #1
 80044d0:	1cb5      	adds	r5, r6, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d05b      	beq.n	800458e <_strtol_l.constprop.0+0xf6>
 80044d6:	2b10      	cmp	r3, #16
 80044d8:	d109      	bne.n	80044ee <_strtol_l.constprop.0+0x56>
 80044da:	2c30      	cmp	r4, #48	; 0x30
 80044dc:	d107      	bne.n	80044ee <_strtol_l.constprop.0+0x56>
 80044de:	782c      	ldrb	r4, [r5, #0]
 80044e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80044e4:	2c58      	cmp	r4, #88	; 0x58
 80044e6:	d14d      	bne.n	8004584 <_strtol_l.constprop.0+0xec>
 80044e8:	786c      	ldrb	r4, [r5, #1]
 80044ea:	2310      	movs	r3, #16
 80044ec:	3502      	adds	r5, #2
 80044ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80044f2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80044f6:	f04f 0e00 	mov.w	lr, #0
 80044fa:	fbb8 f9f3 	udiv	r9, r8, r3
 80044fe:	4676      	mov	r6, lr
 8004500:	fb03 8a19 	mls	sl, r3, r9, r8
 8004504:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004508:	f1bc 0f09 	cmp.w	ip, #9
 800450c:	d816      	bhi.n	800453c <_strtol_l.constprop.0+0xa4>
 800450e:	4664      	mov	r4, ip
 8004510:	42a3      	cmp	r3, r4
 8004512:	dd24      	ble.n	800455e <_strtol_l.constprop.0+0xc6>
 8004514:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8004518:	d008      	beq.n	800452c <_strtol_l.constprop.0+0x94>
 800451a:	45b1      	cmp	r9, r6
 800451c:	d31c      	bcc.n	8004558 <_strtol_l.constprop.0+0xc0>
 800451e:	d101      	bne.n	8004524 <_strtol_l.constprop.0+0x8c>
 8004520:	45a2      	cmp	sl, r4
 8004522:	db19      	blt.n	8004558 <_strtol_l.constprop.0+0xc0>
 8004524:	fb06 4603 	mla	r6, r6, r3, r4
 8004528:	f04f 0e01 	mov.w	lr, #1
 800452c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004530:	e7e8      	b.n	8004504 <_strtol_l.constprop.0+0x6c>
 8004532:	2c2b      	cmp	r4, #43	; 0x2b
 8004534:	bf04      	itt	eq
 8004536:	782c      	ldrbeq	r4, [r5, #0]
 8004538:	1cb5      	addeq	r5, r6, #2
 800453a:	e7ca      	b.n	80044d2 <_strtol_l.constprop.0+0x3a>
 800453c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004540:	f1bc 0f19 	cmp.w	ip, #25
 8004544:	d801      	bhi.n	800454a <_strtol_l.constprop.0+0xb2>
 8004546:	3c37      	subs	r4, #55	; 0x37
 8004548:	e7e2      	b.n	8004510 <_strtol_l.constprop.0+0x78>
 800454a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800454e:	f1bc 0f19 	cmp.w	ip, #25
 8004552:	d804      	bhi.n	800455e <_strtol_l.constprop.0+0xc6>
 8004554:	3c57      	subs	r4, #87	; 0x57
 8004556:	e7db      	b.n	8004510 <_strtol_l.constprop.0+0x78>
 8004558:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800455c:	e7e6      	b.n	800452c <_strtol_l.constprop.0+0x94>
 800455e:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8004562:	d105      	bne.n	8004570 <_strtol_l.constprop.0+0xd8>
 8004564:	2322      	movs	r3, #34	; 0x22
 8004566:	6003      	str	r3, [r0, #0]
 8004568:	4646      	mov	r6, r8
 800456a:	b942      	cbnz	r2, 800457e <_strtol_l.constprop.0+0xe6>
 800456c:	4630      	mov	r0, r6
 800456e:	e79e      	b.n	80044ae <_strtol_l.constprop.0+0x16>
 8004570:	b107      	cbz	r7, 8004574 <_strtol_l.constprop.0+0xdc>
 8004572:	4276      	negs	r6, r6
 8004574:	2a00      	cmp	r2, #0
 8004576:	d0f9      	beq.n	800456c <_strtol_l.constprop.0+0xd4>
 8004578:	f1be 0f00 	cmp.w	lr, #0
 800457c:	d000      	beq.n	8004580 <_strtol_l.constprop.0+0xe8>
 800457e:	1e69      	subs	r1, r5, #1
 8004580:	6011      	str	r1, [r2, #0]
 8004582:	e7f3      	b.n	800456c <_strtol_l.constprop.0+0xd4>
 8004584:	2430      	movs	r4, #48	; 0x30
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1b1      	bne.n	80044ee <_strtol_l.constprop.0+0x56>
 800458a:	2308      	movs	r3, #8
 800458c:	e7af      	b.n	80044ee <_strtol_l.constprop.0+0x56>
 800458e:	2c30      	cmp	r4, #48	; 0x30
 8004590:	d0a5      	beq.n	80044de <_strtol_l.constprop.0+0x46>
 8004592:	230a      	movs	r3, #10
 8004594:	e7ab      	b.n	80044ee <_strtol_l.constprop.0+0x56>
 8004596:	bf00      	nop
 8004598:	080066a9 	.word	0x080066a9

0800459c <strtol>:
 800459c:	4613      	mov	r3, r2
 800459e:	460a      	mov	r2, r1
 80045a0:	4601      	mov	r1, r0
 80045a2:	4802      	ldr	r0, [pc, #8]	; (80045ac <strtol+0x10>)
 80045a4:	6800      	ldr	r0, [r0, #0]
 80045a6:	f7ff bf77 	b.w	8004498 <_strtol_l.constprop.0>
 80045aa:	bf00      	nop
 80045ac:	200001d0 	.word	0x200001d0

080045b0 <std>:
 80045b0:	2300      	movs	r3, #0
 80045b2:	b510      	push	{r4, lr}
 80045b4:	4604      	mov	r4, r0
 80045b6:	e9c0 3300 	strd	r3, r3, [r0]
 80045ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045be:	6083      	str	r3, [r0, #8]
 80045c0:	8181      	strh	r1, [r0, #12]
 80045c2:	6643      	str	r3, [r0, #100]	; 0x64
 80045c4:	81c2      	strh	r2, [r0, #14]
 80045c6:	6183      	str	r3, [r0, #24]
 80045c8:	4619      	mov	r1, r3
 80045ca:	2208      	movs	r2, #8
 80045cc:	305c      	adds	r0, #92	; 0x5c
 80045ce:	f000 f8f4 	bl	80047ba <memset>
 80045d2:	4b0d      	ldr	r3, [pc, #52]	; (8004608 <std+0x58>)
 80045d4:	6263      	str	r3, [r4, #36]	; 0x24
 80045d6:	4b0d      	ldr	r3, [pc, #52]	; (800460c <std+0x5c>)
 80045d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80045da:	4b0d      	ldr	r3, [pc, #52]	; (8004610 <std+0x60>)
 80045dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045de:	4b0d      	ldr	r3, [pc, #52]	; (8004614 <std+0x64>)
 80045e0:	6323      	str	r3, [r4, #48]	; 0x30
 80045e2:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <std+0x68>)
 80045e4:	6224      	str	r4, [r4, #32]
 80045e6:	429c      	cmp	r4, r3
 80045e8:	d006      	beq.n	80045f8 <std+0x48>
 80045ea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80045ee:	4294      	cmp	r4, r2
 80045f0:	d002      	beq.n	80045f8 <std+0x48>
 80045f2:	33d0      	adds	r3, #208	; 0xd0
 80045f4:	429c      	cmp	r4, r3
 80045f6:	d105      	bne.n	8004604 <std+0x54>
 80045f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80045fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004600:	f000 b986 	b.w	8004910 <__retarget_lock_init_recursive>
 8004604:	bd10      	pop	{r4, pc}
 8004606:	bf00      	nop
 8004608:	08004735 	.word	0x08004735
 800460c:	08004757 	.word	0x08004757
 8004610:	0800478f 	.word	0x0800478f
 8004614:	080047b3 	.word	0x080047b3
 8004618:	200002c0 	.word	0x200002c0

0800461c <stdio_exit_handler>:
 800461c:	4a02      	ldr	r2, [pc, #8]	; (8004628 <stdio_exit_handler+0xc>)
 800461e:	4903      	ldr	r1, [pc, #12]	; (800462c <stdio_exit_handler+0x10>)
 8004620:	4803      	ldr	r0, [pc, #12]	; (8004630 <stdio_exit_handler+0x14>)
 8004622:	f000 b869 	b.w	80046f8 <_fwalk_sglue>
 8004626:	bf00      	nop
 8004628:	2000000c 	.word	0x2000000c
 800462c:	08005c8d 	.word	0x08005c8d
 8004630:	20000184 	.word	0x20000184

08004634 <cleanup_stdio>:
 8004634:	6841      	ldr	r1, [r0, #4]
 8004636:	4b0c      	ldr	r3, [pc, #48]	; (8004668 <cleanup_stdio+0x34>)
 8004638:	4299      	cmp	r1, r3
 800463a:	b510      	push	{r4, lr}
 800463c:	4604      	mov	r4, r0
 800463e:	d001      	beq.n	8004644 <cleanup_stdio+0x10>
 8004640:	f001 fb24 	bl	8005c8c <_fflush_r>
 8004644:	68a1      	ldr	r1, [r4, #8]
 8004646:	4b09      	ldr	r3, [pc, #36]	; (800466c <cleanup_stdio+0x38>)
 8004648:	4299      	cmp	r1, r3
 800464a:	d002      	beq.n	8004652 <cleanup_stdio+0x1e>
 800464c:	4620      	mov	r0, r4
 800464e:	f001 fb1d 	bl	8005c8c <_fflush_r>
 8004652:	68e1      	ldr	r1, [r4, #12]
 8004654:	4b06      	ldr	r3, [pc, #24]	; (8004670 <cleanup_stdio+0x3c>)
 8004656:	4299      	cmp	r1, r3
 8004658:	d004      	beq.n	8004664 <cleanup_stdio+0x30>
 800465a:	4620      	mov	r0, r4
 800465c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004660:	f001 bb14 	b.w	8005c8c <_fflush_r>
 8004664:	bd10      	pop	{r4, pc}
 8004666:	bf00      	nop
 8004668:	200002c0 	.word	0x200002c0
 800466c:	20000328 	.word	0x20000328
 8004670:	20000390 	.word	0x20000390

08004674 <global_stdio_init.part.0>:
 8004674:	b510      	push	{r4, lr}
 8004676:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <global_stdio_init.part.0+0x30>)
 8004678:	4c0b      	ldr	r4, [pc, #44]	; (80046a8 <global_stdio_init.part.0+0x34>)
 800467a:	4a0c      	ldr	r2, [pc, #48]	; (80046ac <global_stdio_init.part.0+0x38>)
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	4620      	mov	r0, r4
 8004680:	2200      	movs	r2, #0
 8004682:	2104      	movs	r1, #4
 8004684:	f7ff ff94 	bl	80045b0 <std>
 8004688:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800468c:	2201      	movs	r2, #1
 800468e:	2109      	movs	r1, #9
 8004690:	f7ff ff8e 	bl	80045b0 <std>
 8004694:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004698:	2202      	movs	r2, #2
 800469a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800469e:	2112      	movs	r1, #18
 80046a0:	f7ff bf86 	b.w	80045b0 <std>
 80046a4:	200003f8 	.word	0x200003f8
 80046a8:	200002c0 	.word	0x200002c0
 80046ac:	0800461d 	.word	0x0800461d

080046b0 <__sfp_lock_acquire>:
 80046b0:	4801      	ldr	r0, [pc, #4]	; (80046b8 <__sfp_lock_acquire+0x8>)
 80046b2:	f000 b92e 	b.w	8004912 <__retarget_lock_acquire_recursive>
 80046b6:	bf00      	nop
 80046b8:	20000401 	.word	0x20000401

080046bc <__sfp_lock_release>:
 80046bc:	4801      	ldr	r0, [pc, #4]	; (80046c4 <__sfp_lock_release+0x8>)
 80046be:	f000 b929 	b.w	8004914 <__retarget_lock_release_recursive>
 80046c2:	bf00      	nop
 80046c4:	20000401 	.word	0x20000401

080046c8 <__sinit>:
 80046c8:	b510      	push	{r4, lr}
 80046ca:	4604      	mov	r4, r0
 80046cc:	f7ff fff0 	bl	80046b0 <__sfp_lock_acquire>
 80046d0:	6a23      	ldr	r3, [r4, #32]
 80046d2:	b11b      	cbz	r3, 80046dc <__sinit+0x14>
 80046d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046d8:	f7ff bff0 	b.w	80046bc <__sfp_lock_release>
 80046dc:	4b04      	ldr	r3, [pc, #16]	; (80046f0 <__sinit+0x28>)
 80046de:	6223      	str	r3, [r4, #32]
 80046e0:	4b04      	ldr	r3, [pc, #16]	; (80046f4 <__sinit+0x2c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1f5      	bne.n	80046d4 <__sinit+0xc>
 80046e8:	f7ff ffc4 	bl	8004674 <global_stdio_init.part.0>
 80046ec:	e7f2      	b.n	80046d4 <__sinit+0xc>
 80046ee:	bf00      	nop
 80046f0:	08004635 	.word	0x08004635
 80046f4:	200003f8 	.word	0x200003f8

080046f8 <_fwalk_sglue>:
 80046f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046fc:	4607      	mov	r7, r0
 80046fe:	4688      	mov	r8, r1
 8004700:	4614      	mov	r4, r2
 8004702:	2600      	movs	r6, #0
 8004704:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004708:	f1b9 0901 	subs.w	r9, r9, #1
 800470c:	d505      	bpl.n	800471a <_fwalk_sglue+0x22>
 800470e:	6824      	ldr	r4, [r4, #0]
 8004710:	2c00      	cmp	r4, #0
 8004712:	d1f7      	bne.n	8004704 <_fwalk_sglue+0xc>
 8004714:	4630      	mov	r0, r6
 8004716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800471a:	89ab      	ldrh	r3, [r5, #12]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d907      	bls.n	8004730 <_fwalk_sglue+0x38>
 8004720:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004724:	3301      	adds	r3, #1
 8004726:	d003      	beq.n	8004730 <_fwalk_sglue+0x38>
 8004728:	4629      	mov	r1, r5
 800472a:	4638      	mov	r0, r7
 800472c:	47c0      	blx	r8
 800472e:	4306      	orrs	r6, r0
 8004730:	3568      	adds	r5, #104	; 0x68
 8004732:	e7e9      	b.n	8004708 <_fwalk_sglue+0x10>

08004734 <__sread>:
 8004734:	b510      	push	{r4, lr}
 8004736:	460c      	mov	r4, r1
 8004738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800473c:	f000 f89a 	bl	8004874 <_read_r>
 8004740:	2800      	cmp	r0, #0
 8004742:	bfab      	itete	ge
 8004744:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004746:	89a3      	ldrhlt	r3, [r4, #12]
 8004748:	181b      	addge	r3, r3, r0
 800474a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800474e:	bfac      	ite	ge
 8004750:	6563      	strge	r3, [r4, #84]	; 0x54
 8004752:	81a3      	strhlt	r3, [r4, #12]
 8004754:	bd10      	pop	{r4, pc}

08004756 <__swrite>:
 8004756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800475a:	461f      	mov	r7, r3
 800475c:	898b      	ldrh	r3, [r1, #12]
 800475e:	05db      	lsls	r3, r3, #23
 8004760:	4605      	mov	r5, r0
 8004762:	460c      	mov	r4, r1
 8004764:	4616      	mov	r6, r2
 8004766:	d505      	bpl.n	8004774 <__swrite+0x1e>
 8004768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800476c:	2302      	movs	r3, #2
 800476e:	2200      	movs	r2, #0
 8004770:	f000 f86e 	bl	8004850 <_lseek_r>
 8004774:	89a3      	ldrh	r3, [r4, #12]
 8004776:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800477a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800477e:	81a3      	strh	r3, [r4, #12]
 8004780:	4632      	mov	r2, r6
 8004782:	463b      	mov	r3, r7
 8004784:	4628      	mov	r0, r5
 8004786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800478a:	f000 b885 	b.w	8004898 <_write_r>

0800478e <__sseek>:
 800478e:	b510      	push	{r4, lr}
 8004790:	460c      	mov	r4, r1
 8004792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004796:	f000 f85b 	bl	8004850 <_lseek_r>
 800479a:	1c43      	adds	r3, r0, #1
 800479c:	89a3      	ldrh	r3, [r4, #12]
 800479e:	bf15      	itete	ne
 80047a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80047a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80047a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80047aa:	81a3      	strheq	r3, [r4, #12]
 80047ac:	bf18      	it	ne
 80047ae:	81a3      	strhne	r3, [r4, #12]
 80047b0:	bd10      	pop	{r4, pc}

080047b2 <__sclose>:
 80047b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047b6:	f000 b83b 	b.w	8004830 <_close_r>

080047ba <memset>:
 80047ba:	4402      	add	r2, r0
 80047bc:	4603      	mov	r3, r0
 80047be:	4293      	cmp	r3, r2
 80047c0:	d100      	bne.n	80047c4 <memset+0xa>
 80047c2:	4770      	bx	lr
 80047c4:	f803 1b01 	strb.w	r1, [r3], #1
 80047c8:	e7f9      	b.n	80047be <memset+0x4>

080047ca <strchr>:
 80047ca:	b2c9      	uxtb	r1, r1
 80047cc:	4603      	mov	r3, r0
 80047ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047d2:	b11a      	cbz	r2, 80047dc <strchr+0x12>
 80047d4:	428a      	cmp	r2, r1
 80047d6:	d1f9      	bne.n	80047cc <strchr+0x2>
 80047d8:	4618      	mov	r0, r3
 80047da:	4770      	bx	lr
 80047dc:	2900      	cmp	r1, #0
 80047de:	bf18      	it	ne
 80047e0:	2300      	movne	r3, #0
 80047e2:	e7f9      	b.n	80047d8 <strchr+0xe>

080047e4 <strncmp>:
 80047e4:	b510      	push	{r4, lr}
 80047e6:	b16a      	cbz	r2, 8004804 <strncmp+0x20>
 80047e8:	3901      	subs	r1, #1
 80047ea:	1884      	adds	r4, r0, r2
 80047ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047f0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d103      	bne.n	8004800 <strncmp+0x1c>
 80047f8:	42a0      	cmp	r0, r4
 80047fa:	d001      	beq.n	8004800 <strncmp+0x1c>
 80047fc:	2a00      	cmp	r2, #0
 80047fe:	d1f5      	bne.n	80047ec <strncmp+0x8>
 8004800:	1ad0      	subs	r0, r2, r3
 8004802:	bd10      	pop	{r4, pc}
 8004804:	4610      	mov	r0, r2
 8004806:	e7fc      	b.n	8004802 <strncmp+0x1e>

08004808 <strncpy>:
 8004808:	b510      	push	{r4, lr}
 800480a:	3901      	subs	r1, #1
 800480c:	4603      	mov	r3, r0
 800480e:	b132      	cbz	r2, 800481e <strncpy+0x16>
 8004810:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004814:	f803 4b01 	strb.w	r4, [r3], #1
 8004818:	3a01      	subs	r2, #1
 800481a:	2c00      	cmp	r4, #0
 800481c:	d1f7      	bne.n	800480e <strncpy+0x6>
 800481e:	441a      	add	r2, r3
 8004820:	2100      	movs	r1, #0
 8004822:	4293      	cmp	r3, r2
 8004824:	d100      	bne.n	8004828 <strncpy+0x20>
 8004826:	bd10      	pop	{r4, pc}
 8004828:	f803 1b01 	strb.w	r1, [r3], #1
 800482c:	e7f9      	b.n	8004822 <strncpy+0x1a>
	...

08004830 <_close_r>:
 8004830:	b538      	push	{r3, r4, r5, lr}
 8004832:	4d06      	ldr	r5, [pc, #24]	; (800484c <_close_r+0x1c>)
 8004834:	2300      	movs	r3, #0
 8004836:	4604      	mov	r4, r0
 8004838:	4608      	mov	r0, r1
 800483a:	602b      	str	r3, [r5, #0]
 800483c:	f7fc ff0d 	bl	800165a <_close>
 8004840:	1c43      	adds	r3, r0, #1
 8004842:	d102      	bne.n	800484a <_close_r+0x1a>
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	b103      	cbz	r3, 800484a <_close_r+0x1a>
 8004848:	6023      	str	r3, [r4, #0]
 800484a:	bd38      	pop	{r3, r4, r5, pc}
 800484c:	200003fc 	.word	0x200003fc

08004850 <_lseek_r>:
 8004850:	b538      	push	{r3, r4, r5, lr}
 8004852:	4d07      	ldr	r5, [pc, #28]	; (8004870 <_lseek_r+0x20>)
 8004854:	4604      	mov	r4, r0
 8004856:	4608      	mov	r0, r1
 8004858:	4611      	mov	r1, r2
 800485a:	2200      	movs	r2, #0
 800485c:	602a      	str	r2, [r5, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	f7fc ff22 	bl	80016a8 <_lseek>
 8004864:	1c43      	adds	r3, r0, #1
 8004866:	d102      	bne.n	800486e <_lseek_r+0x1e>
 8004868:	682b      	ldr	r3, [r5, #0]
 800486a:	b103      	cbz	r3, 800486e <_lseek_r+0x1e>
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	bd38      	pop	{r3, r4, r5, pc}
 8004870:	200003fc 	.word	0x200003fc

08004874 <_read_r>:
 8004874:	b538      	push	{r3, r4, r5, lr}
 8004876:	4d07      	ldr	r5, [pc, #28]	; (8004894 <_read_r+0x20>)
 8004878:	4604      	mov	r4, r0
 800487a:	4608      	mov	r0, r1
 800487c:	4611      	mov	r1, r2
 800487e:	2200      	movs	r2, #0
 8004880:	602a      	str	r2, [r5, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	f7fc feb0 	bl	80015e8 <_read>
 8004888:	1c43      	adds	r3, r0, #1
 800488a:	d102      	bne.n	8004892 <_read_r+0x1e>
 800488c:	682b      	ldr	r3, [r5, #0]
 800488e:	b103      	cbz	r3, 8004892 <_read_r+0x1e>
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	bd38      	pop	{r3, r4, r5, pc}
 8004894:	200003fc 	.word	0x200003fc

08004898 <_write_r>:
 8004898:	b538      	push	{r3, r4, r5, lr}
 800489a:	4d07      	ldr	r5, [pc, #28]	; (80048b8 <_write_r+0x20>)
 800489c:	4604      	mov	r4, r0
 800489e:	4608      	mov	r0, r1
 80048a0:	4611      	mov	r1, r2
 80048a2:	2200      	movs	r2, #0
 80048a4:	602a      	str	r2, [r5, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	f7fc febb 	bl	8001622 <_write>
 80048ac:	1c43      	adds	r3, r0, #1
 80048ae:	d102      	bne.n	80048b6 <_write_r+0x1e>
 80048b0:	682b      	ldr	r3, [r5, #0]
 80048b2:	b103      	cbz	r3, 80048b6 <_write_r+0x1e>
 80048b4:	6023      	str	r3, [r4, #0]
 80048b6:	bd38      	pop	{r3, r4, r5, pc}
 80048b8:	200003fc 	.word	0x200003fc

080048bc <__errno>:
 80048bc:	4b01      	ldr	r3, [pc, #4]	; (80048c4 <__errno+0x8>)
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	200001d0 	.word	0x200001d0

080048c8 <__libc_init_array>:
 80048c8:	b570      	push	{r4, r5, r6, lr}
 80048ca:	4d0d      	ldr	r5, [pc, #52]	; (8004900 <__libc_init_array+0x38>)
 80048cc:	4c0d      	ldr	r4, [pc, #52]	; (8004904 <__libc_init_array+0x3c>)
 80048ce:	1b64      	subs	r4, r4, r5
 80048d0:	10a4      	asrs	r4, r4, #2
 80048d2:	2600      	movs	r6, #0
 80048d4:	42a6      	cmp	r6, r4
 80048d6:	d109      	bne.n	80048ec <__libc_init_array+0x24>
 80048d8:	4d0b      	ldr	r5, [pc, #44]	; (8004908 <__libc_init_array+0x40>)
 80048da:	4c0c      	ldr	r4, [pc, #48]	; (800490c <__libc_init_array+0x44>)
 80048dc:	f001 fe94 	bl	8006608 <_init>
 80048e0:	1b64      	subs	r4, r4, r5
 80048e2:	10a4      	asrs	r4, r4, #2
 80048e4:	2600      	movs	r6, #0
 80048e6:	42a6      	cmp	r6, r4
 80048e8:	d105      	bne.n	80048f6 <__libc_init_array+0x2e>
 80048ea:	bd70      	pop	{r4, r5, r6, pc}
 80048ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f0:	4798      	blx	r3
 80048f2:	3601      	adds	r6, #1
 80048f4:	e7ee      	b.n	80048d4 <__libc_init_array+0xc>
 80048f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048fa:	4798      	blx	r3
 80048fc:	3601      	adds	r6, #1
 80048fe:	e7f2      	b.n	80048e6 <__libc_init_array+0x1e>
 8004900:	08006a0c 	.word	0x08006a0c
 8004904:	08006a0c 	.word	0x08006a0c
 8004908:	08006a0c 	.word	0x08006a0c
 800490c:	08006a10 	.word	0x08006a10

08004910 <__retarget_lock_init_recursive>:
 8004910:	4770      	bx	lr

08004912 <__retarget_lock_acquire_recursive>:
 8004912:	4770      	bx	lr

08004914 <__retarget_lock_release_recursive>:
 8004914:	4770      	bx	lr

08004916 <memcpy>:
 8004916:	440a      	add	r2, r1
 8004918:	4291      	cmp	r1, r2
 800491a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800491e:	d100      	bne.n	8004922 <memcpy+0xc>
 8004920:	4770      	bx	lr
 8004922:	b510      	push	{r4, lr}
 8004924:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004928:	f803 4f01 	strb.w	r4, [r3, #1]!
 800492c:	4291      	cmp	r1, r2
 800492e:	d1f9      	bne.n	8004924 <memcpy+0xe>
 8004930:	bd10      	pop	{r4, pc}
 8004932:	0000      	movs	r0, r0
 8004934:	0000      	movs	r0, r0
	...

08004938 <nan>:
 8004938:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004940 <nan+0x8>
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	00000000 	.word	0x00000000
 8004944:	7ff80000 	.word	0x7ff80000

08004948 <_free_r>:
 8004948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800494a:	2900      	cmp	r1, #0
 800494c:	d044      	beq.n	80049d8 <_free_r+0x90>
 800494e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004952:	9001      	str	r0, [sp, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	f1a1 0404 	sub.w	r4, r1, #4
 800495a:	bfb8      	it	lt
 800495c:	18e4      	addlt	r4, r4, r3
 800495e:	f000 fc49 	bl	80051f4 <__malloc_lock>
 8004962:	4a1e      	ldr	r2, [pc, #120]	; (80049dc <_free_r+0x94>)
 8004964:	9801      	ldr	r0, [sp, #4]
 8004966:	6813      	ldr	r3, [r2, #0]
 8004968:	b933      	cbnz	r3, 8004978 <_free_r+0x30>
 800496a:	6063      	str	r3, [r4, #4]
 800496c:	6014      	str	r4, [r2, #0]
 800496e:	b003      	add	sp, #12
 8004970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004974:	f000 bc44 	b.w	8005200 <__malloc_unlock>
 8004978:	42a3      	cmp	r3, r4
 800497a:	d908      	bls.n	800498e <_free_r+0x46>
 800497c:	6825      	ldr	r5, [r4, #0]
 800497e:	1961      	adds	r1, r4, r5
 8004980:	428b      	cmp	r3, r1
 8004982:	bf01      	itttt	eq
 8004984:	6819      	ldreq	r1, [r3, #0]
 8004986:	685b      	ldreq	r3, [r3, #4]
 8004988:	1949      	addeq	r1, r1, r5
 800498a:	6021      	streq	r1, [r4, #0]
 800498c:	e7ed      	b.n	800496a <_free_r+0x22>
 800498e:	461a      	mov	r2, r3
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	b10b      	cbz	r3, 8004998 <_free_r+0x50>
 8004994:	42a3      	cmp	r3, r4
 8004996:	d9fa      	bls.n	800498e <_free_r+0x46>
 8004998:	6811      	ldr	r1, [r2, #0]
 800499a:	1855      	adds	r5, r2, r1
 800499c:	42a5      	cmp	r5, r4
 800499e:	d10b      	bne.n	80049b8 <_free_r+0x70>
 80049a0:	6824      	ldr	r4, [r4, #0]
 80049a2:	4421      	add	r1, r4
 80049a4:	1854      	adds	r4, r2, r1
 80049a6:	42a3      	cmp	r3, r4
 80049a8:	6011      	str	r1, [r2, #0]
 80049aa:	d1e0      	bne.n	800496e <_free_r+0x26>
 80049ac:	681c      	ldr	r4, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	6053      	str	r3, [r2, #4]
 80049b2:	440c      	add	r4, r1
 80049b4:	6014      	str	r4, [r2, #0]
 80049b6:	e7da      	b.n	800496e <_free_r+0x26>
 80049b8:	d902      	bls.n	80049c0 <_free_r+0x78>
 80049ba:	230c      	movs	r3, #12
 80049bc:	6003      	str	r3, [r0, #0]
 80049be:	e7d6      	b.n	800496e <_free_r+0x26>
 80049c0:	6825      	ldr	r5, [r4, #0]
 80049c2:	1961      	adds	r1, r4, r5
 80049c4:	428b      	cmp	r3, r1
 80049c6:	bf04      	itt	eq
 80049c8:	6819      	ldreq	r1, [r3, #0]
 80049ca:	685b      	ldreq	r3, [r3, #4]
 80049cc:	6063      	str	r3, [r4, #4]
 80049ce:	bf04      	itt	eq
 80049d0:	1949      	addeq	r1, r1, r5
 80049d2:	6021      	streq	r1, [r4, #0]
 80049d4:	6054      	str	r4, [r2, #4]
 80049d6:	e7ca      	b.n	800496e <_free_r+0x26>
 80049d8:	b003      	add	sp, #12
 80049da:	bd30      	pop	{r4, r5, pc}
 80049dc:	20000404 	.word	0x20000404

080049e0 <rshift>:
 80049e0:	6903      	ldr	r3, [r0, #16]
 80049e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80049e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80049ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 80049ee:	f100 0414 	add.w	r4, r0, #20
 80049f2:	dd45      	ble.n	8004a80 <rshift+0xa0>
 80049f4:	f011 011f 	ands.w	r1, r1, #31
 80049f8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80049fc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8004a00:	d10c      	bne.n	8004a1c <rshift+0x3c>
 8004a02:	f100 0710 	add.w	r7, r0, #16
 8004a06:	4629      	mov	r1, r5
 8004a08:	42b1      	cmp	r1, r6
 8004a0a:	d334      	bcc.n	8004a76 <rshift+0x96>
 8004a0c:	1a9b      	subs	r3, r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	1eea      	subs	r2, r5, #3
 8004a12:	4296      	cmp	r6, r2
 8004a14:	bf38      	it	cc
 8004a16:	2300      	movcc	r3, #0
 8004a18:	4423      	add	r3, r4
 8004a1a:	e015      	b.n	8004a48 <rshift+0x68>
 8004a1c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8004a20:	f1c1 0820 	rsb	r8, r1, #32
 8004a24:	40cf      	lsrs	r7, r1
 8004a26:	f105 0e04 	add.w	lr, r5, #4
 8004a2a:	46a1      	mov	r9, r4
 8004a2c:	4576      	cmp	r6, lr
 8004a2e:	46f4      	mov	ip, lr
 8004a30:	d815      	bhi.n	8004a5e <rshift+0x7e>
 8004a32:	1a9a      	subs	r2, r3, r2
 8004a34:	0092      	lsls	r2, r2, #2
 8004a36:	3a04      	subs	r2, #4
 8004a38:	3501      	adds	r5, #1
 8004a3a:	42ae      	cmp	r6, r5
 8004a3c:	bf38      	it	cc
 8004a3e:	2200      	movcc	r2, #0
 8004a40:	18a3      	adds	r3, r4, r2
 8004a42:	50a7      	str	r7, [r4, r2]
 8004a44:	b107      	cbz	r7, 8004a48 <rshift+0x68>
 8004a46:	3304      	adds	r3, #4
 8004a48:	1b1a      	subs	r2, r3, r4
 8004a4a:	42a3      	cmp	r3, r4
 8004a4c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8004a50:	bf08      	it	eq
 8004a52:	2300      	moveq	r3, #0
 8004a54:	6102      	str	r2, [r0, #16]
 8004a56:	bf08      	it	eq
 8004a58:	6143      	streq	r3, [r0, #20]
 8004a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a5e:	f8dc c000 	ldr.w	ip, [ip]
 8004a62:	fa0c fc08 	lsl.w	ip, ip, r8
 8004a66:	ea4c 0707 	orr.w	r7, ip, r7
 8004a6a:	f849 7b04 	str.w	r7, [r9], #4
 8004a6e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004a72:	40cf      	lsrs	r7, r1
 8004a74:	e7da      	b.n	8004a2c <rshift+0x4c>
 8004a76:	f851 cb04 	ldr.w	ip, [r1], #4
 8004a7a:	f847 cf04 	str.w	ip, [r7, #4]!
 8004a7e:	e7c3      	b.n	8004a08 <rshift+0x28>
 8004a80:	4623      	mov	r3, r4
 8004a82:	e7e1      	b.n	8004a48 <rshift+0x68>

08004a84 <__hexdig_fun>:
 8004a84:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004a88:	2b09      	cmp	r3, #9
 8004a8a:	d802      	bhi.n	8004a92 <__hexdig_fun+0xe>
 8004a8c:	3820      	subs	r0, #32
 8004a8e:	b2c0      	uxtb	r0, r0
 8004a90:	4770      	bx	lr
 8004a92:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8004a96:	2b05      	cmp	r3, #5
 8004a98:	d801      	bhi.n	8004a9e <__hexdig_fun+0x1a>
 8004a9a:	3847      	subs	r0, #71	; 0x47
 8004a9c:	e7f7      	b.n	8004a8e <__hexdig_fun+0xa>
 8004a9e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8004aa2:	2b05      	cmp	r3, #5
 8004aa4:	d801      	bhi.n	8004aaa <__hexdig_fun+0x26>
 8004aa6:	3827      	subs	r0, #39	; 0x27
 8004aa8:	e7f1      	b.n	8004a8e <__hexdig_fun+0xa>
 8004aaa:	2000      	movs	r0, #0
 8004aac:	4770      	bx	lr
	...

08004ab0 <__gethex>:
 8004ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab4:	4617      	mov	r7, r2
 8004ab6:	680a      	ldr	r2, [r1, #0]
 8004ab8:	b085      	sub	sp, #20
 8004aba:	f102 0b02 	add.w	fp, r2, #2
 8004abe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8004ac2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8004ac6:	4681      	mov	r9, r0
 8004ac8:	468a      	mov	sl, r1
 8004aca:	9302      	str	r3, [sp, #8]
 8004acc:	32fe      	adds	r2, #254	; 0xfe
 8004ace:	eb02 030b 	add.w	r3, r2, fp
 8004ad2:	46d8      	mov	r8, fp
 8004ad4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8004ad8:	9301      	str	r3, [sp, #4]
 8004ada:	2830      	cmp	r0, #48	; 0x30
 8004adc:	d0f7      	beq.n	8004ace <__gethex+0x1e>
 8004ade:	f7ff ffd1 	bl	8004a84 <__hexdig_fun>
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	d138      	bne.n	8004b5a <__gethex+0xaa>
 8004ae8:	49a7      	ldr	r1, [pc, #668]	; (8004d88 <__gethex+0x2d8>)
 8004aea:	2201      	movs	r2, #1
 8004aec:	4640      	mov	r0, r8
 8004aee:	f7ff fe79 	bl	80047e4 <strncmp>
 8004af2:	4606      	mov	r6, r0
 8004af4:	2800      	cmp	r0, #0
 8004af6:	d169      	bne.n	8004bcc <__gethex+0x11c>
 8004af8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8004afc:	465d      	mov	r5, fp
 8004afe:	f7ff ffc1 	bl	8004a84 <__hexdig_fun>
 8004b02:	2800      	cmp	r0, #0
 8004b04:	d064      	beq.n	8004bd0 <__gethex+0x120>
 8004b06:	465a      	mov	r2, fp
 8004b08:	7810      	ldrb	r0, [r2, #0]
 8004b0a:	2830      	cmp	r0, #48	; 0x30
 8004b0c:	4690      	mov	r8, r2
 8004b0e:	f102 0201 	add.w	r2, r2, #1
 8004b12:	d0f9      	beq.n	8004b08 <__gethex+0x58>
 8004b14:	f7ff ffb6 	bl	8004a84 <__hexdig_fun>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	fab0 f480 	clz	r4, r0
 8004b1e:	0964      	lsrs	r4, r4, #5
 8004b20:	465e      	mov	r6, fp
 8004b22:	9301      	str	r3, [sp, #4]
 8004b24:	4642      	mov	r2, r8
 8004b26:	4615      	mov	r5, r2
 8004b28:	3201      	adds	r2, #1
 8004b2a:	7828      	ldrb	r0, [r5, #0]
 8004b2c:	f7ff ffaa 	bl	8004a84 <__hexdig_fun>
 8004b30:	2800      	cmp	r0, #0
 8004b32:	d1f8      	bne.n	8004b26 <__gethex+0x76>
 8004b34:	4994      	ldr	r1, [pc, #592]	; (8004d88 <__gethex+0x2d8>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	4628      	mov	r0, r5
 8004b3a:	f7ff fe53 	bl	80047e4 <strncmp>
 8004b3e:	b978      	cbnz	r0, 8004b60 <__gethex+0xb0>
 8004b40:	b946      	cbnz	r6, 8004b54 <__gethex+0xa4>
 8004b42:	1c6e      	adds	r6, r5, #1
 8004b44:	4632      	mov	r2, r6
 8004b46:	4615      	mov	r5, r2
 8004b48:	3201      	adds	r2, #1
 8004b4a:	7828      	ldrb	r0, [r5, #0]
 8004b4c:	f7ff ff9a 	bl	8004a84 <__hexdig_fun>
 8004b50:	2800      	cmp	r0, #0
 8004b52:	d1f8      	bne.n	8004b46 <__gethex+0x96>
 8004b54:	1b73      	subs	r3, r6, r5
 8004b56:	009e      	lsls	r6, r3, #2
 8004b58:	e004      	b.n	8004b64 <__gethex+0xb4>
 8004b5a:	2400      	movs	r4, #0
 8004b5c:	4626      	mov	r6, r4
 8004b5e:	e7e1      	b.n	8004b24 <__gethex+0x74>
 8004b60:	2e00      	cmp	r6, #0
 8004b62:	d1f7      	bne.n	8004b54 <__gethex+0xa4>
 8004b64:	782b      	ldrb	r3, [r5, #0]
 8004b66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004b6a:	2b50      	cmp	r3, #80	; 0x50
 8004b6c:	d13d      	bne.n	8004bea <__gethex+0x13a>
 8004b6e:	786b      	ldrb	r3, [r5, #1]
 8004b70:	2b2b      	cmp	r3, #43	; 0x2b
 8004b72:	d02f      	beq.n	8004bd4 <__gethex+0x124>
 8004b74:	2b2d      	cmp	r3, #45	; 0x2d
 8004b76:	d031      	beq.n	8004bdc <__gethex+0x12c>
 8004b78:	1c69      	adds	r1, r5, #1
 8004b7a:	f04f 0b00 	mov.w	fp, #0
 8004b7e:	7808      	ldrb	r0, [r1, #0]
 8004b80:	f7ff ff80 	bl	8004a84 <__hexdig_fun>
 8004b84:	1e42      	subs	r2, r0, #1
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	2a18      	cmp	r2, #24
 8004b8a:	d82e      	bhi.n	8004bea <__gethex+0x13a>
 8004b8c:	f1a0 0210 	sub.w	r2, r0, #16
 8004b90:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004b94:	f7ff ff76 	bl	8004a84 <__hexdig_fun>
 8004b98:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8004b9c:	fa5f fc8c 	uxtb.w	ip, ip
 8004ba0:	f1bc 0f18 	cmp.w	ip, #24
 8004ba4:	d91d      	bls.n	8004be2 <__gethex+0x132>
 8004ba6:	f1bb 0f00 	cmp.w	fp, #0
 8004baa:	d000      	beq.n	8004bae <__gethex+0xfe>
 8004bac:	4252      	negs	r2, r2
 8004bae:	4416      	add	r6, r2
 8004bb0:	f8ca 1000 	str.w	r1, [sl]
 8004bb4:	b1dc      	cbz	r4, 8004bee <__gethex+0x13e>
 8004bb6:	9b01      	ldr	r3, [sp, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	bf14      	ite	ne
 8004bbc:	f04f 0800 	movne.w	r8, #0
 8004bc0:	f04f 0806 	moveq.w	r8, #6
 8004bc4:	4640      	mov	r0, r8
 8004bc6:	b005      	add	sp, #20
 8004bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bcc:	4645      	mov	r5, r8
 8004bce:	4626      	mov	r6, r4
 8004bd0:	2401      	movs	r4, #1
 8004bd2:	e7c7      	b.n	8004b64 <__gethex+0xb4>
 8004bd4:	f04f 0b00 	mov.w	fp, #0
 8004bd8:	1ca9      	adds	r1, r5, #2
 8004bda:	e7d0      	b.n	8004b7e <__gethex+0xce>
 8004bdc:	f04f 0b01 	mov.w	fp, #1
 8004be0:	e7fa      	b.n	8004bd8 <__gethex+0x128>
 8004be2:	230a      	movs	r3, #10
 8004be4:	fb03 0002 	mla	r0, r3, r2, r0
 8004be8:	e7d0      	b.n	8004b8c <__gethex+0xdc>
 8004bea:	4629      	mov	r1, r5
 8004bec:	e7e0      	b.n	8004bb0 <__gethex+0x100>
 8004bee:	eba5 0308 	sub.w	r3, r5, r8
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	4621      	mov	r1, r4
 8004bf6:	2b07      	cmp	r3, #7
 8004bf8:	dc0a      	bgt.n	8004c10 <__gethex+0x160>
 8004bfa:	4648      	mov	r0, r9
 8004bfc:	f000 fb06 	bl	800520c <_Balloc>
 8004c00:	4604      	mov	r4, r0
 8004c02:	b940      	cbnz	r0, 8004c16 <__gethex+0x166>
 8004c04:	4b61      	ldr	r3, [pc, #388]	; (8004d8c <__gethex+0x2dc>)
 8004c06:	4602      	mov	r2, r0
 8004c08:	21e4      	movs	r1, #228	; 0xe4
 8004c0a:	4861      	ldr	r0, [pc, #388]	; (8004d90 <__gethex+0x2e0>)
 8004c0c:	f001 f876 	bl	8005cfc <__assert_func>
 8004c10:	3101      	adds	r1, #1
 8004c12:	105b      	asrs	r3, r3, #1
 8004c14:	e7ef      	b.n	8004bf6 <__gethex+0x146>
 8004c16:	f100 0a14 	add.w	sl, r0, #20
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	495a      	ldr	r1, [pc, #360]	; (8004d88 <__gethex+0x2d8>)
 8004c1e:	f8cd a004 	str.w	sl, [sp, #4]
 8004c22:	469b      	mov	fp, r3
 8004c24:	45a8      	cmp	r8, r5
 8004c26:	d342      	bcc.n	8004cae <__gethex+0x1fe>
 8004c28:	9801      	ldr	r0, [sp, #4]
 8004c2a:	f840 bb04 	str.w	fp, [r0], #4
 8004c2e:	eba0 000a 	sub.w	r0, r0, sl
 8004c32:	1080      	asrs	r0, r0, #2
 8004c34:	6120      	str	r0, [r4, #16]
 8004c36:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8004c3a:	4658      	mov	r0, fp
 8004c3c:	f000 fbd8 	bl	80053f0 <__hi0bits>
 8004c40:	683d      	ldr	r5, [r7, #0]
 8004c42:	eba8 0000 	sub.w	r0, r8, r0
 8004c46:	42a8      	cmp	r0, r5
 8004c48:	dd59      	ble.n	8004cfe <__gethex+0x24e>
 8004c4a:	eba0 0805 	sub.w	r8, r0, r5
 8004c4e:	4641      	mov	r1, r8
 8004c50:	4620      	mov	r0, r4
 8004c52:	f000 ff67 	bl	8005b24 <__any_on>
 8004c56:	4683      	mov	fp, r0
 8004c58:	b1b8      	cbz	r0, 8004c8a <__gethex+0x1da>
 8004c5a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8004c5e:	1159      	asrs	r1, r3, #5
 8004c60:	f003 021f 	and.w	r2, r3, #31
 8004c64:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8004c68:	f04f 0b01 	mov.w	fp, #1
 8004c6c:	fa0b f202 	lsl.w	r2, fp, r2
 8004c70:	420a      	tst	r2, r1
 8004c72:	d00a      	beq.n	8004c8a <__gethex+0x1da>
 8004c74:	455b      	cmp	r3, fp
 8004c76:	dd06      	ble.n	8004c86 <__gethex+0x1d6>
 8004c78:	f1a8 0102 	sub.w	r1, r8, #2
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	f000 ff51 	bl	8005b24 <__any_on>
 8004c82:	2800      	cmp	r0, #0
 8004c84:	d138      	bne.n	8004cf8 <__gethex+0x248>
 8004c86:	f04f 0b02 	mov.w	fp, #2
 8004c8a:	4641      	mov	r1, r8
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	f7ff fea7 	bl	80049e0 <rshift>
 8004c92:	4446      	add	r6, r8
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	42b3      	cmp	r3, r6
 8004c98:	da41      	bge.n	8004d1e <__gethex+0x26e>
 8004c9a:	4621      	mov	r1, r4
 8004c9c:	4648      	mov	r0, r9
 8004c9e:	f000 faf5 	bl	800528c <_Bfree>
 8004ca2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8004cac:	e78a      	b.n	8004bc4 <__gethex+0x114>
 8004cae:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8004cb2:	2a2e      	cmp	r2, #46	; 0x2e
 8004cb4:	d014      	beq.n	8004ce0 <__gethex+0x230>
 8004cb6:	2b20      	cmp	r3, #32
 8004cb8:	d106      	bne.n	8004cc8 <__gethex+0x218>
 8004cba:	9b01      	ldr	r3, [sp, #4]
 8004cbc:	f843 bb04 	str.w	fp, [r3], #4
 8004cc0:	f04f 0b00 	mov.w	fp, #0
 8004cc4:	9301      	str	r3, [sp, #4]
 8004cc6:	465b      	mov	r3, fp
 8004cc8:	7828      	ldrb	r0, [r5, #0]
 8004cca:	9303      	str	r3, [sp, #12]
 8004ccc:	f7ff feda 	bl	8004a84 <__hexdig_fun>
 8004cd0:	9b03      	ldr	r3, [sp, #12]
 8004cd2:	f000 000f 	and.w	r0, r0, #15
 8004cd6:	4098      	lsls	r0, r3
 8004cd8:	ea4b 0b00 	orr.w	fp, fp, r0
 8004cdc:	3304      	adds	r3, #4
 8004cde:	e7a1      	b.n	8004c24 <__gethex+0x174>
 8004ce0:	45a8      	cmp	r8, r5
 8004ce2:	d8e8      	bhi.n	8004cb6 <__gethex+0x206>
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	9303      	str	r3, [sp, #12]
 8004cea:	f7ff fd7b 	bl	80047e4 <strncmp>
 8004cee:	4926      	ldr	r1, [pc, #152]	; (8004d88 <__gethex+0x2d8>)
 8004cf0:	9b03      	ldr	r3, [sp, #12]
 8004cf2:	2800      	cmp	r0, #0
 8004cf4:	d1df      	bne.n	8004cb6 <__gethex+0x206>
 8004cf6:	e795      	b.n	8004c24 <__gethex+0x174>
 8004cf8:	f04f 0b03 	mov.w	fp, #3
 8004cfc:	e7c5      	b.n	8004c8a <__gethex+0x1da>
 8004cfe:	da0b      	bge.n	8004d18 <__gethex+0x268>
 8004d00:	eba5 0800 	sub.w	r8, r5, r0
 8004d04:	4621      	mov	r1, r4
 8004d06:	4642      	mov	r2, r8
 8004d08:	4648      	mov	r0, r9
 8004d0a:	f000 fcd9 	bl	80056c0 <__lshift>
 8004d0e:	eba6 0608 	sub.w	r6, r6, r8
 8004d12:	4604      	mov	r4, r0
 8004d14:	f100 0a14 	add.w	sl, r0, #20
 8004d18:	f04f 0b00 	mov.w	fp, #0
 8004d1c:	e7ba      	b.n	8004c94 <__gethex+0x1e4>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	42b3      	cmp	r3, r6
 8004d22:	dd73      	ble.n	8004e0c <__gethex+0x35c>
 8004d24:	1b9e      	subs	r6, r3, r6
 8004d26:	42b5      	cmp	r5, r6
 8004d28:	dc34      	bgt.n	8004d94 <__gethex+0x2e4>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d023      	beq.n	8004d78 <__gethex+0x2c8>
 8004d30:	2b03      	cmp	r3, #3
 8004d32:	d025      	beq.n	8004d80 <__gethex+0x2d0>
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d115      	bne.n	8004d64 <__gethex+0x2b4>
 8004d38:	42b5      	cmp	r5, r6
 8004d3a:	d113      	bne.n	8004d64 <__gethex+0x2b4>
 8004d3c:	2d01      	cmp	r5, #1
 8004d3e:	d10b      	bne.n	8004d58 <__gethex+0x2a8>
 8004d40:	9a02      	ldr	r2, [sp, #8]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6013      	str	r3, [r2, #0]
 8004d46:	2301      	movs	r3, #1
 8004d48:	6123      	str	r3, [r4, #16]
 8004d4a:	f8ca 3000 	str.w	r3, [sl]
 8004d4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d50:	f04f 0862 	mov.w	r8, #98	; 0x62
 8004d54:	601c      	str	r4, [r3, #0]
 8004d56:	e735      	b.n	8004bc4 <__gethex+0x114>
 8004d58:	1e69      	subs	r1, r5, #1
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	f000 fee2 	bl	8005b24 <__any_on>
 8004d60:	2800      	cmp	r0, #0
 8004d62:	d1ed      	bne.n	8004d40 <__gethex+0x290>
 8004d64:	4621      	mov	r1, r4
 8004d66:	4648      	mov	r0, r9
 8004d68:	f000 fa90 	bl	800528c <_Bfree>
 8004d6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d6e:	2300      	movs	r3, #0
 8004d70:	6013      	str	r3, [r2, #0]
 8004d72:	f04f 0850 	mov.w	r8, #80	; 0x50
 8004d76:	e725      	b.n	8004bc4 <__gethex+0x114>
 8004d78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f2      	bne.n	8004d64 <__gethex+0x2b4>
 8004d7e:	e7df      	b.n	8004d40 <__gethex+0x290>
 8004d80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1dc      	bne.n	8004d40 <__gethex+0x290>
 8004d86:	e7ed      	b.n	8004d64 <__gethex+0x2b4>
 8004d88:	08006648 	.word	0x08006648
 8004d8c:	080067b1 	.word	0x080067b1
 8004d90:	080067c2 	.word	0x080067c2
 8004d94:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8004d98:	f1bb 0f00 	cmp.w	fp, #0
 8004d9c:	d133      	bne.n	8004e06 <__gethex+0x356>
 8004d9e:	f1b8 0f00 	cmp.w	r8, #0
 8004da2:	d004      	beq.n	8004dae <__gethex+0x2fe>
 8004da4:	4641      	mov	r1, r8
 8004da6:	4620      	mov	r0, r4
 8004da8:	f000 febc 	bl	8005b24 <__any_on>
 8004dac:	4683      	mov	fp, r0
 8004dae:	ea4f 1268 	mov.w	r2, r8, asr #5
 8004db2:	2301      	movs	r3, #1
 8004db4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8004db8:	f008 081f 	and.w	r8, r8, #31
 8004dbc:	fa03 f308 	lsl.w	r3, r3, r8
 8004dc0:	4213      	tst	r3, r2
 8004dc2:	4631      	mov	r1, r6
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	bf18      	it	ne
 8004dc8:	f04b 0b02 	orrne.w	fp, fp, #2
 8004dcc:	1bad      	subs	r5, r5, r6
 8004dce:	f7ff fe07 	bl	80049e0 <rshift>
 8004dd2:	687e      	ldr	r6, [r7, #4]
 8004dd4:	f04f 0802 	mov.w	r8, #2
 8004dd8:	f1bb 0f00 	cmp.w	fp, #0
 8004ddc:	d04a      	beq.n	8004e74 <__gethex+0x3c4>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d016      	beq.n	8004e12 <__gethex+0x362>
 8004de4:	2b03      	cmp	r3, #3
 8004de6:	d018      	beq.n	8004e1a <__gethex+0x36a>
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d109      	bne.n	8004e00 <__gethex+0x350>
 8004dec:	f01b 0f02 	tst.w	fp, #2
 8004df0:	d006      	beq.n	8004e00 <__gethex+0x350>
 8004df2:	f8da 3000 	ldr.w	r3, [sl]
 8004df6:	ea4b 0b03 	orr.w	fp, fp, r3
 8004dfa:	f01b 0f01 	tst.w	fp, #1
 8004dfe:	d10f      	bne.n	8004e20 <__gethex+0x370>
 8004e00:	f048 0810 	orr.w	r8, r8, #16
 8004e04:	e036      	b.n	8004e74 <__gethex+0x3c4>
 8004e06:	f04f 0b01 	mov.w	fp, #1
 8004e0a:	e7d0      	b.n	8004dae <__gethex+0x2fe>
 8004e0c:	f04f 0801 	mov.w	r8, #1
 8004e10:	e7e2      	b.n	8004dd8 <__gethex+0x328>
 8004e12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e14:	f1c3 0301 	rsb	r3, r3, #1
 8004e18:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0ef      	beq.n	8004e00 <__gethex+0x350>
 8004e20:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8004e24:	f104 0214 	add.w	r2, r4, #20
 8004e28:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8004e2c:	9301      	str	r3, [sp, #4]
 8004e2e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8004e32:	2300      	movs	r3, #0
 8004e34:	4694      	mov	ip, r2
 8004e36:	f852 1b04 	ldr.w	r1, [r2], #4
 8004e3a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8004e3e:	d01e      	beq.n	8004e7e <__gethex+0x3ce>
 8004e40:	3101      	adds	r1, #1
 8004e42:	f8cc 1000 	str.w	r1, [ip]
 8004e46:	f1b8 0f02 	cmp.w	r8, #2
 8004e4a:	f104 0214 	add.w	r2, r4, #20
 8004e4e:	d13d      	bne.n	8004ecc <__gethex+0x41c>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	42ab      	cmp	r3, r5
 8004e56:	d10b      	bne.n	8004e70 <__gethex+0x3c0>
 8004e58:	1169      	asrs	r1, r5, #5
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	f005 051f 	and.w	r5, r5, #31
 8004e60:	fa03 f505 	lsl.w	r5, r3, r5
 8004e64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004e68:	421d      	tst	r5, r3
 8004e6a:	bf18      	it	ne
 8004e6c:	f04f 0801 	movne.w	r8, #1
 8004e70:	f048 0820 	orr.w	r8, r8, #32
 8004e74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e76:	601c      	str	r4, [r3, #0]
 8004e78:	9b02      	ldr	r3, [sp, #8]
 8004e7a:	601e      	str	r6, [r3, #0]
 8004e7c:	e6a2      	b.n	8004bc4 <__gethex+0x114>
 8004e7e:	4290      	cmp	r0, r2
 8004e80:	f842 3c04 	str.w	r3, [r2, #-4]
 8004e84:	d8d6      	bhi.n	8004e34 <__gethex+0x384>
 8004e86:	68a2      	ldr	r2, [r4, #8]
 8004e88:	4593      	cmp	fp, r2
 8004e8a:	db17      	blt.n	8004ebc <__gethex+0x40c>
 8004e8c:	6861      	ldr	r1, [r4, #4]
 8004e8e:	4648      	mov	r0, r9
 8004e90:	3101      	adds	r1, #1
 8004e92:	f000 f9bb 	bl	800520c <_Balloc>
 8004e96:	4682      	mov	sl, r0
 8004e98:	b918      	cbnz	r0, 8004ea2 <__gethex+0x3f2>
 8004e9a:	4b1b      	ldr	r3, [pc, #108]	; (8004f08 <__gethex+0x458>)
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	2184      	movs	r1, #132	; 0x84
 8004ea0:	e6b3      	b.n	8004c0a <__gethex+0x15a>
 8004ea2:	6922      	ldr	r2, [r4, #16]
 8004ea4:	3202      	adds	r2, #2
 8004ea6:	f104 010c 	add.w	r1, r4, #12
 8004eaa:	0092      	lsls	r2, r2, #2
 8004eac:	300c      	adds	r0, #12
 8004eae:	f7ff fd32 	bl	8004916 <memcpy>
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	4648      	mov	r0, r9
 8004eb6:	f000 f9e9 	bl	800528c <_Bfree>
 8004eba:	4654      	mov	r4, sl
 8004ebc:	6922      	ldr	r2, [r4, #16]
 8004ebe:	1c51      	adds	r1, r2, #1
 8004ec0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004ec4:	6121      	str	r1, [r4, #16]
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	6151      	str	r1, [r2, #20]
 8004eca:	e7bc      	b.n	8004e46 <__gethex+0x396>
 8004ecc:	6921      	ldr	r1, [r4, #16]
 8004ece:	4559      	cmp	r1, fp
 8004ed0:	dd0b      	ble.n	8004eea <__gethex+0x43a>
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	f7ff fd83 	bl	80049e0 <rshift>
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	3601      	adds	r6, #1
 8004ede:	42b3      	cmp	r3, r6
 8004ee0:	f6ff aedb 	blt.w	8004c9a <__gethex+0x1ea>
 8004ee4:	f04f 0801 	mov.w	r8, #1
 8004ee8:	e7c2      	b.n	8004e70 <__gethex+0x3c0>
 8004eea:	f015 051f 	ands.w	r5, r5, #31
 8004eee:	d0f9      	beq.n	8004ee4 <__gethex+0x434>
 8004ef0:	9b01      	ldr	r3, [sp, #4]
 8004ef2:	441a      	add	r2, r3
 8004ef4:	f1c5 0520 	rsb	r5, r5, #32
 8004ef8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8004efc:	f000 fa78 	bl	80053f0 <__hi0bits>
 8004f00:	42a8      	cmp	r0, r5
 8004f02:	dbe6      	blt.n	8004ed2 <__gethex+0x422>
 8004f04:	e7ee      	b.n	8004ee4 <__gethex+0x434>
 8004f06:	bf00      	nop
 8004f08:	080067b1 	.word	0x080067b1

08004f0c <L_shift>:
 8004f0c:	f1c2 0208 	rsb	r2, r2, #8
 8004f10:	0092      	lsls	r2, r2, #2
 8004f12:	b570      	push	{r4, r5, r6, lr}
 8004f14:	f1c2 0620 	rsb	r6, r2, #32
 8004f18:	6843      	ldr	r3, [r0, #4]
 8004f1a:	6804      	ldr	r4, [r0, #0]
 8004f1c:	fa03 f506 	lsl.w	r5, r3, r6
 8004f20:	432c      	orrs	r4, r5
 8004f22:	40d3      	lsrs	r3, r2
 8004f24:	6004      	str	r4, [r0, #0]
 8004f26:	f840 3f04 	str.w	r3, [r0, #4]!
 8004f2a:	4288      	cmp	r0, r1
 8004f2c:	d3f4      	bcc.n	8004f18 <L_shift+0xc>
 8004f2e:	bd70      	pop	{r4, r5, r6, pc}

08004f30 <__match>:
 8004f30:	b530      	push	{r4, r5, lr}
 8004f32:	6803      	ldr	r3, [r0, #0]
 8004f34:	3301      	adds	r3, #1
 8004f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f3a:	b914      	cbnz	r4, 8004f42 <__match+0x12>
 8004f3c:	6003      	str	r3, [r0, #0]
 8004f3e:	2001      	movs	r0, #1
 8004f40:	bd30      	pop	{r4, r5, pc}
 8004f42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8004f4a:	2d19      	cmp	r5, #25
 8004f4c:	bf98      	it	ls
 8004f4e:	3220      	addls	r2, #32
 8004f50:	42a2      	cmp	r2, r4
 8004f52:	d0f0      	beq.n	8004f36 <__match+0x6>
 8004f54:	2000      	movs	r0, #0
 8004f56:	e7f3      	b.n	8004f40 <__match+0x10>

08004f58 <__hexnan>:
 8004f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f5c:	680b      	ldr	r3, [r1, #0]
 8004f5e:	6801      	ldr	r1, [r0, #0]
 8004f60:	115e      	asrs	r6, r3, #5
 8004f62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004f66:	f013 031f 	ands.w	r3, r3, #31
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	bf18      	it	ne
 8004f6e:	3604      	addne	r6, #4
 8004f70:	2500      	movs	r5, #0
 8004f72:	1f37      	subs	r7, r6, #4
 8004f74:	4682      	mov	sl, r0
 8004f76:	4690      	mov	r8, r2
 8004f78:	9301      	str	r3, [sp, #4]
 8004f7a:	f846 5c04 	str.w	r5, [r6, #-4]
 8004f7e:	46b9      	mov	r9, r7
 8004f80:	463c      	mov	r4, r7
 8004f82:	9502      	str	r5, [sp, #8]
 8004f84:	46ab      	mov	fp, r5
 8004f86:	784a      	ldrb	r2, [r1, #1]
 8004f88:	1c4b      	adds	r3, r1, #1
 8004f8a:	9303      	str	r3, [sp, #12]
 8004f8c:	b342      	cbz	r2, 8004fe0 <__hexnan+0x88>
 8004f8e:	4610      	mov	r0, r2
 8004f90:	9105      	str	r1, [sp, #20]
 8004f92:	9204      	str	r2, [sp, #16]
 8004f94:	f7ff fd76 	bl	8004a84 <__hexdig_fun>
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	d14f      	bne.n	800503c <__hexnan+0xe4>
 8004f9c:	9a04      	ldr	r2, [sp, #16]
 8004f9e:	9905      	ldr	r1, [sp, #20]
 8004fa0:	2a20      	cmp	r2, #32
 8004fa2:	d818      	bhi.n	8004fd6 <__hexnan+0x7e>
 8004fa4:	9b02      	ldr	r3, [sp, #8]
 8004fa6:	459b      	cmp	fp, r3
 8004fa8:	dd13      	ble.n	8004fd2 <__hexnan+0x7a>
 8004faa:	454c      	cmp	r4, r9
 8004fac:	d206      	bcs.n	8004fbc <__hexnan+0x64>
 8004fae:	2d07      	cmp	r5, #7
 8004fb0:	dc04      	bgt.n	8004fbc <__hexnan+0x64>
 8004fb2:	462a      	mov	r2, r5
 8004fb4:	4649      	mov	r1, r9
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	f7ff ffa8 	bl	8004f0c <L_shift>
 8004fbc:	4544      	cmp	r4, r8
 8004fbe:	d950      	bls.n	8005062 <__hexnan+0x10a>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	f1a4 0904 	sub.w	r9, r4, #4
 8004fc6:	f844 3c04 	str.w	r3, [r4, #-4]
 8004fca:	f8cd b008 	str.w	fp, [sp, #8]
 8004fce:	464c      	mov	r4, r9
 8004fd0:	461d      	mov	r5, r3
 8004fd2:	9903      	ldr	r1, [sp, #12]
 8004fd4:	e7d7      	b.n	8004f86 <__hexnan+0x2e>
 8004fd6:	2a29      	cmp	r2, #41	; 0x29
 8004fd8:	d155      	bne.n	8005086 <__hexnan+0x12e>
 8004fda:	3102      	adds	r1, #2
 8004fdc:	f8ca 1000 	str.w	r1, [sl]
 8004fe0:	f1bb 0f00 	cmp.w	fp, #0
 8004fe4:	d04f      	beq.n	8005086 <__hexnan+0x12e>
 8004fe6:	454c      	cmp	r4, r9
 8004fe8:	d206      	bcs.n	8004ff8 <__hexnan+0xa0>
 8004fea:	2d07      	cmp	r5, #7
 8004fec:	dc04      	bgt.n	8004ff8 <__hexnan+0xa0>
 8004fee:	462a      	mov	r2, r5
 8004ff0:	4649      	mov	r1, r9
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	f7ff ff8a 	bl	8004f0c <L_shift>
 8004ff8:	4544      	cmp	r4, r8
 8004ffa:	d934      	bls.n	8005066 <__hexnan+0x10e>
 8004ffc:	f1a8 0204 	sub.w	r2, r8, #4
 8005000:	4623      	mov	r3, r4
 8005002:	f853 1b04 	ldr.w	r1, [r3], #4
 8005006:	f842 1f04 	str.w	r1, [r2, #4]!
 800500a:	429f      	cmp	r7, r3
 800500c:	d2f9      	bcs.n	8005002 <__hexnan+0xaa>
 800500e:	1b3b      	subs	r3, r7, r4
 8005010:	f023 0303 	bic.w	r3, r3, #3
 8005014:	3304      	adds	r3, #4
 8005016:	3e03      	subs	r6, #3
 8005018:	3401      	adds	r4, #1
 800501a:	42a6      	cmp	r6, r4
 800501c:	bf38      	it	cc
 800501e:	2304      	movcc	r3, #4
 8005020:	4443      	add	r3, r8
 8005022:	2200      	movs	r2, #0
 8005024:	f843 2b04 	str.w	r2, [r3], #4
 8005028:	429f      	cmp	r7, r3
 800502a:	d2fb      	bcs.n	8005024 <__hexnan+0xcc>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	b91b      	cbnz	r3, 8005038 <__hexnan+0xe0>
 8005030:	4547      	cmp	r7, r8
 8005032:	d126      	bne.n	8005082 <__hexnan+0x12a>
 8005034:	2301      	movs	r3, #1
 8005036:	603b      	str	r3, [r7, #0]
 8005038:	2005      	movs	r0, #5
 800503a:	e025      	b.n	8005088 <__hexnan+0x130>
 800503c:	3501      	adds	r5, #1
 800503e:	2d08      	cmp	r5, #8
 8005040:	f10b 0b01 	add.w	fp, fp, #1
 8005044:	dd06      	ble.n	8005054 <__hexnan+0xfc>
 8005046:	4544      	cmp	r4, r8
 8005048:	d9c3      	bls.n	8004fd2 <__hexnan+0x7a>
 800504a:	2300      	movs	r3, #0
 800504c:	f844 3c04 	str.w	r3, [r4, #-4]
 8005050:	2501      	movs	r5, #1
 8005052:	3c04      	subs	r4, #4
 8005054:	6822      	ldr	r2, [r4, #0]
 8005056:	f000 000f 	and.w	r0, r0, #15
 800505a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800505e:	6020      	str	r0, [r4, #0]
 8005060:	e7b7      	b.n	8004fd2 <__hexnan+0x7a>
 8005062:	2508      	movs	r5, #8
 8005064:	e7b5      	b.n	8004fd2 <__hexnan+0x7a>
 8005066:	9b01      	ldr	r3, [sp, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0df      	beq.n	800502c <__hexnan+0xd4>
 800506c:	f1c3 0320 	rsb	r3, r3, #32
 8005070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005074:	40da      	lsrs	r2, r3
 8005076:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800507a:	4013      	ands	r3, r2
 800507c:	f846 3c04 	str.w	r3, [r6, #-4]
 8005080:	e7d4      	b.n	800502c <__hexnan+0xd4>
 8005082:	3f04      	subs	r7, #4
 8005084:	e7d2      	b.n	800502c <__hexnan+0xd4>
 8005086:	2004      	movs	r0, #4
 8005088:	b007      	add	sp, #28
 800508a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005090 <sbrk_aligned>:
 8005090:	b570      	push	{r4, r5, r6, lr}
 8005092:	4e0e      	ldr	r6, [pc, #56]	; (80050cc <sbrk_aligned+0x3c>)
 8005094:	460c      	mov	r4, r1
 8005096:	6831      	ldr	r1, [r6, #0]
 8005098:	4605      	mov	r5, r0
 800509a:	b911      	cbnz	r1, 80050a2 <sbrk_aligned+0x12>
 800509c:	f000 fe1e 	bl	8005cdc <_sbrk_r>
 80050a0:	6030      	str	r0, [r6, #0]
 80050a2:	4621      	mov	r1, r4
 80050a4:	4628      	mov	r0, r5
 80050a6:	f000 fe19 	bl	8005cdc <_sbrk_r>
 80050aa:	1c43      	adds	r3, r0, #1
 80050ac:	d00a      	beq.n	80050c4 <sbrk_aligned+0x34>
 80050ae:	1cc4      	adds	r4, r0, #3
 80050b0:	f024 0403 	bic.w	r4, r4, #3
 80050b4:	42a0      	cmp	r0, r4
 80050b6:	d007      	beq.n	80050c8 <sbrk_aligned+0x38>
 80050b8:	1a21      	subs	r1, r4, r0
 80050ba:	4628      	mov	r0, r5
 80050bc:	f000 fe0e 	bl	8005cdc <_sbrk_r>
 80050c0:	3001      	adds	r0, #1
 80050c2:	d101      	bne.n	80050c8 <sbrk_aligned+0x38>
 80050c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80050c8:	4620      	mov	r0, r4
 80050ca:	bd70      	pop	{r4, r5, r6, pc}
 80050cc:	20000408 	.word	0x20000408

080050d0 <_malloc_r>:
 80050d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050d4:	1ccd      	adds	r5, r1, #3
 80050d6:	f025 0503 	bic.w	r5, r5, #3
 80050da:	3508      	adds	r5, #8
 80050dc:	2d0c      	cmp	r5, #12
 80050de:	bf38      	it	cc
 80050e0:	250c      	movcc	r5, #12
 80050e2:	2d00      	cmp	r5, #0
 80050e4:	4607      	mov	r7, r0
 80050e6:	db01      	blt.n	80050ec <_malloc_r+0x1c>
 80050e8:	42a9      	cmp	r1, r5
 80050ea:	d905      	bls.n	80050f8 <_malloc_r+0x28>
 80050ec:	230c      	movs	r3, #12
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	2600      	movs	r6, #0
 80050f2:	4630      	mov	r0, r6
 80050f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80051cc <_malloc_r+0xfc>
 80050fc:	f000 f87a 	bl	80051f4 <__malloc_lock>
 8005100:	f8d8 3000 	ldr.w	r3, [r8]
 8005104:	461c      	mov	r4, r3
 8005106:	bb5c      	cbnz	r4, 8005160 <_malloc_r+0x90>
 8005108:	4629      	mov	r1, r5
 800510a:	4638      	mov	r0, r7
 800510c:	f7ff ffc0 	bl	8005090 <sbrk_aligned>
 8005110:	1c43      	adds	r3, r0, #1
 8005112:	4604      	mov	r4, r0
 8005114:	d155      	bne.n	80051c2 <_malloc_r+0xf2>
 8005116:	f8d8 4000 	ldr.w	r4, [r8]
 800511a:	4626      	mov	r6, r4
 800511c:	2e00      	cmp	r6, #0
 800511e:	d145      	bne.n	80051ac <_malloc_r+0xdc>
 8005120:	2c00      	cmp	r4, #0
 8005122:	d048      	beq.n	80051b6 <_malloc_r+0xe6>
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	4631      	mov	r1, r6
 8005128:	4638      	mov	r0, r7
 800512a:	eb04 0903 	add.w	r9, r4, r3
 800512e:	f000 fdd5 	bl	8005cdc <_sbrk_r>
 8005132:	4581      	cmp	r9, r0
 8005134:	d13f      	bne.n	80051b6 <_malloc_r+0xe6>
 8005136:	6821      	ldr	r1, [r4, #0]
 8005138:	1a6d      	subs	r5, r5, r1
 800513a:	4629      	mov	r1, r5
 800513c:	4638      	mov	r0, r7
 800513e:	f7ff ffa7 	bl	8005090 <sbrk_aligned>
 8005142:	3001      	adds	r0, #1
 8005144:	d037      	beq.n	80051b6 <_malloc_r+0xe6>
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	442b      	add	r3, r5
 800514a:	6023      	str	r3, [r4, #0]
 800514c:	f8d8 3000 	ldr.w	r3, [r8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d038      	beq.n	80051c6 <_malloc_r+0xf6>
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	42a2      	cmp	r2, r4
 8005158:	d12b      	bne.n	80051b2 <_malloc_r+0xe2>
 800515a:	2200      	movs	r2, #0
 800515c:	605a      	str	r2, [r3, #4]
 800515e:	e00f      	b.n	8005180 <_malloc_r+0xb0>
 8005160:	6822      	ldr	r2, [r4, #0]
 8005162:	1b52      	subs	r2, r2, r5
 8005164:	d41f      	bmi.n	80051a6 <_malloc_r+0xd6>
 8005166:	2a0b      	cmp	r2, #11
 8005168:	d917      	bls.n	800519a <_malloc_r+0xca>
 800516a:	1961      	adds	r1, r4, r5
 800516c:	42a3      	cmp	r3, r4
 800516e:	6025      	str	r5, [r4, #0]
 8005170:	bf18      	it	ne
 8005172:	6059      	strne	r1, [r3, #4]
 8005174:	6863      	ldr	r3, [r4, #4]
 8005176:	bf08      	it	eq
 8005178:	f8c8 1000 	streq.w	r1, [r8]
 800517c:	5162      	str	r2, [r4, r5]
 800517e:	604b      	str	r3, [r1, #4]
 8005180:	4638      	mov	r0, r7
 8005182:	f104 060b 	add.w	r6, r4, #11
 8005186:	f000 f83b 	bl	8005200 <__malloc_unlock>
 800518a:	f026 0607 	bic.w	r6, r6, #7
 800518e:	1d23      	adds	r3, r4, #4
 8005190:	1af2      	subs	r2, r6, r3
 8005192:	d0ae      	beq.n	80050f2 <_malloc_r+0x22>
 8005194:	1b9b      	subs	r3, r3, r6
 8005196:	50a3      	str	r3, [r4, r2]
 8005198:	e7ab      	b.n	80050f2 <_malloc_r+0x22>
 800519a:	42a3      	cmp	r3, r4
 800519c:	6862      	ldr	r2, [r4, #4]
 800519e:	d1dd      	bne.n	800515c <_malloc_r+0x8c>
 80051a0:	f8c8 2000 	str.w	r2, [r8]
 80051a4:	e7ec      	b.n	8005180 <_malloc_r+0xb0>
 80051a6:	4623      	mov	r3, r4
 80051a8:	6864      	ldr	r4, [r4, #4]
 80051aa:	e7ac      	b.n	8005106 <_malloc_r+0x36>
 80051ac:	4634      	mov	r4, r6
 80051ae:	6876      	ldr	r6, [r6, #4]
 80051b0:	e7b4      	b.n	800511c <_malloc_r+0x4c>
 80051b2:	4613      	mov	r3, r2
 80051b4:	e7cc      	b.n	8005150 <_malloc_r+0x80>
 80051b6:	230c      	movs	r3, #12
 80051b8:	603b      	str	r3, [r7, #0]
 80051ba:	4638      	mov	r0, r7
 80051bc:	f000 f820 	bl	8005200 <__malloc_unlock>
 80051c0:	e797      	b.n	80050f2 <_malloc_r+0x22>
 80051c2:	6025      	str	r5, [r4, #0]
 80051c4:	e7dc      	b.n	8005180 <_malloc_r+0xb0>
 80051c6:	605b      	str	r3, [r3, #4]
 80051c8:	deff      	udf	#255	; 0xff
 80051ca:	bf00      	nop
 80051cc:	20000404 	.word	0x20000404

080051d0 <__ascii_mbtowc>:
 80051d0:	b082      	sub	sp, #8
 80051d2:	b901      	cbnz	r1, 80051d6 <__ascii_mbtowc+0x6>
 80051d4:	a901      	add	r1, sp, #4
 80051d6:	b142      	cbz	r2, 80051ea <__ascii_mbtowc+0x1a>
 80051d8:	b14b      	cbz	r3, 80051ee <__ascii_mbtowc+0x1e>
 80051da:	7813      	ldrb	r3, [r2, #0]
 80051dc:	600b      	str	r3, [r1, #0]
 80051de:	7812      	ldrb	r2, [r2, #0]
 80051e0:	1e10      	subs	r0, r2, #0
 80051e2:	bf18      	it	ne
 80051e4:	2001      	movne	r0, #1
 80051e6:	b002      	add	sp, #8
 80051e8:	4770      	bx	lr
 80051ea:	4610      	mov	r0, r2
 80051ec:	e7fb      	b.n	80051e6 <__ascii_mbtowc+0x16>
 80051ee:	f06f 0001 	mvn.w	r0, #1
 80051f2:	e7f8      	b.n	80051e6 <__ascii_mbtowc+0x16>

080051f4 <__malloc_lock>:
 80051f4:	4801      	ldr	r0, [pc, #4]	; (80051fc <__malloc_lock+0x8>)
 80051f6:	f7ff bb8c 	b.w	8004912 <__retarget_lock_acquire_recursive>
 80051fa:	bf00      	nop
 80051fc:	20000400 	.word	0x20000400

08005200 <__malloc_unlock>:
 8005200:	4801      	ldr	r0, [pc, #4]	; (8005208 <__malloc_unlock+0x8>)
 8005202:	f7ff bb87 	b.w	8004914 <__retarget_lock_release_recursive>
 8005206:	bf00      	nop
 8005208:	20000400 	.word	0x20000400

0800520c <_Balloc>:
 800520c:	b570      	push	{r4, r5, r6, lr}
 800520e:	69c6      	ldr	r6, [r0, #28]
 8005210:	4604      	mov	r4, r0
 8005212:	460d      	mov	r5, r1
 8005214:	b976      	cbnz	r6, 8005234 <_Balloc+0x28>
 8005216:	2010      	movs	r0, #16
 8005218:	f000 fda4 	bl	8005d64 <malloc>
 800521c:	4602      	mov	r2, r0
 800521e:	61e0      	str	r0, [r4, #28]
 8005220:	b920      	cbnz	r0, 800522c <_Balloc+0x20>
 8005222:	4b18      	ldr	r3, [pc, #96]	; (8005284 <_Balloc+0x78>)
 8005224:	4818      	ldr	r0, [pc, #96]	; (8005288 <_Balloc+0x7c>)
 8005226:	216b      	movs	r1, #107	; 0x6b
 8005228:	f000 fd68 	bl	8005cfc <__assert_func>
 800522c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005230:	6006      	str	r6, [r0, #0]
 8005232:	60c6      	str	r6, [r0, #12]
 8005234:	69e6      	ldr	r6, [r4, #28]
 8005236:	68f3      	ldr	r3, [r6, #12]
 8005238:	b183      	cbz	r3, 800525c <_Balloc+0x50>
 800523a:	69e3      	ldr	r3, [r4, #28]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005242:	b9b8      	cbnz	r0, 8005274 <_Balloc+0x68>
 8005244:	2101      	movs	r1, #1
 8005246:	fa01 f605 	lsl.w	r6, r1, r5
 800524a:	1d72      	adds	r2, r6, #5
 800524c:	0092      	lsls	r2, r2, #2
 800524e:	4620      	mov	r0, r4
 8005250:	f000 fd72 	bl	8005d38 <_calloc_r>
 8005254:	b160      	cbz	r0, 8005270 <_Balloc+0x64>
 8005256:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800525a:	e00e      	b.n	800527a <_Balloc+0x6e>
 800525c:	2221      	movs	r2, #33	; 0x21
 800525e:	2104      	movs	r1, #4
 8005260:	4620      	mov	r0, r4
 8005262:	f000 fd69 	bl	8005d38 <_calloc_r>
 8005266:	69e3      	ldr	r3, [r4, #28]
 8005268:	60f0      	str	r0, [r6, #12]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e4      	bne.n	800523a <_Balloc+0x2e>
 8005270:	2000      	movs	r0, #0
 8005272:	bd70      	pop	{r4, r5, r6, pc}
 8005274:	6802      	ldr	r2, [r0, #0]
 8005276:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800527a:	2300      	movs	r3, #0
 800527c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005280:	e7f7      	b.n	8005272 <_Balloc+0x66>
 8005282:	bf00      	nop
 8005284:	08006822 	.word	0x08006822
 8005288:	08006839 	.word	0x08006839

0800528c <_Bfree>:
 800528c:	b570      	push	{r4, r5, r6, lr}
 800528e:	69c6      	ldr	r6, [r0, #28]
 8005290:	4605      	mov	r5, r0
 8005292:	460c      	mov	r4, r1
 8005294:	b976      	cbnz	r6, 80052b4 <_Bfree+0x28>
 8005296:	2010      	movs	r0, #16
 8005298:	f000 fd64 	bl	8005d64 <malloc>
 800529c:	4602      	mov	r2, r0
 800529e:	61e8      	str	r0, [r5, #28]
 80052a0:	b920      	cbnz	r0, 80052ac <_Bfree+0x20>
 80052a2:	4b09      	ldr	r3, [pc, #36]	; (80052c8 <_Bfree+0x3c>)
 80052a4:	4809      	ldr	r0, [pc, #36]	; (80052cc <_Bfree+0x40>)
 80052a6:	218f      	movs	r1, #143	; 0x8f
 80052a8:	f000 fd28 	bl	8005cfc <__assert_func>
 80052ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80052b0:	6006      	str	r6, [r0, #0]
 80052b2:	60c6      	str	r6, [r0, #12]
 80052b4:	b13c      	cbz	r4, 80052c6 <_Bfree+0x3a>
 80052b6:	69eb      	ldr	r3, [r5, #28]
 80052b8:	6862      	ldr	r2, [r4, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052c0:	6021      	str	r1, [r4, #0]
 80052c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80052c6:	bd70      	pop	{r4, r5, r6, pc}
 80052c8:	08006822 	.word	0x08006822
 80052cc:	08006839 	.word	0x08006839

080052d0 <__multadd>:
 80052d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052d4:	690d      	ldr	r5, [r1, #16]
 80052d6:	4607      	mov	r7, r0
 80052d8:	460c      	mov	r4, r1
 80052da:	461e      	mov	r6, r3
 80052dc:	f101 0c14 	add.w	ip, r1, #20
 80052e0:	2000      	movs	r0, #0
 80052e2:	f8dc 3000 	ldr.w	r3, [ip]
 80052e6:	b299      	uxth	r1, r3
 80052e8:	fb02 6101 	mla	r1, r2, r1, r6
 80052ec:	0c1e      	lsrs	r6, r3, #16
 80052ee:	0c0b      	lsrs	r3, r1, #16
 80052f0:	fb02 3306 	mla	r3, r2, r6, r3
 80052f4:	b289      	uxth	r1, r1
 80052f6:	3001      	adds	r0, #1
 80052f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80052fc:	4285      	cmp	r5, r0
 80052fe:	f84c 1b04 	str.w	r1, [ip], #4
 8005302:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005306:	dcec      	bgt.n	80052e2 <__multadd+0x12>
 8005308:	b30e      	cbz	r6, 800534e <__multadd+0x7e>
 800530a:	68a3      	ldr	r3, [r4, #8]
 800530c:	42ab      	cmp	r3, r5
 800530e:	dc19      	bgt.n	8005344 <__multadd+0x74>
 8005310:	6861      	ldr	r1, [r4, #4]
 8005312:	4638      	mov	r0, r7
 8005314:	3101      	adds	r1, #1
 8005316:	f7ff ff79 	bl	800520c <_Balloc>
 800531a:	4680      	mov	r8, r0
 800531c:	b928      	cbnz	r0, 800532a <__multadd+0x5a>
 800531e:	4602      	mov	r2, r0
 8005320:	4b0c      	ldr	r3, [pc, #48]	; (8005354 <__multadd+0x84>)
 8005322:	480d      	ldr	r0, [pc, #52]	; (8005358 <__multadd+0x88>)
 8005324:	21ba      	movs	r1, #186	; 0xba
 8005326:	f000 fce9 	bl	8005cfc <__assert_func>
 800532a:	6922      	ldr	r2, [r4, #16]
 800532c:	3202      	adds	r2, #2
 800532e:	f104 010c 	add.w	r1, r4, #12
 8005332:	0092      	lsls	r2, r2, #2
 8005334:	300c      	adds	r0, #12
 8005336:	f7ff faee 	bl	8004916 <memcpy>
 800533a:	4621      	mov	r1, r4
 800533c:	4638      	mov	r0, r7
 800533e:	f7ff ffa5 	bl	800528c <_Bfree>
 8005342:	4644      	mov	r4, r8
 8005344:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005348:	3501      	adds	r5, #1
 800534a:	615e      	str	r6, [r3, #20]
 800534c:	6125      	str	r5, [r4, #16]
 800534e:	4620      	mov	r0, r4
 8005350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005354:	080067b1 	.word	0x080067b1
 8005358:	08006839 	.word	0x08006839

0800535c <__s2b>:
 800535c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005360:	460c      	mov	r4, r1
 8005362:	4615      	mov	r5, r2
 8005364:	461f      	mov	r7, r3
 8005366:	2209      	movs	r2, #9
 8005368:	3308      	adds	r3, #8
 800536a:	4606      	mov	r6, r0
 800536c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005370:	2100      	movs	r1, #0
 8005372:	2201      	movs	r2, #1
 8005374:	429a      	cmp	r2, r3
 8005376:	db09      	blt.n	800538c <__s2b+0x30>
 8005378:	4630      	mov	r0, r6
 800537a:	f7ff ff47 	bl	800520c <_Balloc>
 800537e:	b940      	cbnz	r0, 8005392 <__s2b+0x36>
 8005380:	4602      	mov	r2, r0
 8005382:	4b19      	ldr	r3, [pc, #100]	; (80053e8 <__s2b+0x8c>)
 8005384:	4819      	ldr	r0, [pc, #100]	; (80053ec <__s2b+0x90>)
 8005386:	21d3      	movs	r1, #211	; 0xd3
 8005388:	f000 fcb8 	bl	8005cfc <__assert_func>
 800538c:	0052      	lsls	r2, r2, #1
 800538e:	3101      	adds	r1, #1
 8005390:	e7f0      	b.n	8005374 <__s2b+0x18>
 8005392:	9b08      	ldr	r3, [sp, #32]
 8005394:	6143      	str	r3, [r0, #20]
 8005396:	2d09      	cmp	r5, #9
 8005398:	f04f 0301 	mov.w	r3, #1
 800539c:	6103      	str	r3, [r0, #16]
 800539e:	dd16      	ble.n	80053ce <__s2b+0x72>
 80053a0:	f104 0909 	add.w	r9, r4, #9
 80053a4:	46c8      	mov	r8, r9
 80053a6:	442c      	add	r4, r5
 80053a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80053ac:	4601      	mov	r1, r0
 80053ae:	3b30      	subs	r3, #48	; 0x30
 80053b0:	220a      	movs	r2, #10
 80053b2:	4630      	mov	r0, r6
 80053b4:	f7ff ff8c 	bl	80052d0 <__multadd>
 80053b8:	45a0      	cmp	r8, r4
 80053ba:	d1f5      	bne.n	80053a8 <__s2b+0x4c>
 80053bc:	f1a5 0408 	sub.w	r4, r5, #8
 80053c0:	444c      	add	r4, r9
 80053c2:	1b2d      	subs	r5, r5, r4
 80053c4:	1963      	adds	r3, r4, r5
 80053c6:	42bb      	cmp	r3, r7
 80053c8:	db04      	blt.n	80053d4 <__s2b+0x78>
 80053ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053ce:	340a      	adds	r4, #10
 80053d0:	2509      	movs	r5, #9
 80053d2:	e7f6      	b.n	80053c2 <__s2b+0x66>
 80053d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80053d8:	4601      	mov	r1, r0
 80053da:	3b30      	subs	r3, #48	; 0x30
 80053dc:	220a      	movs	r2, #10
 80053de:	4630      	mov	r0, r6
 80053e0:	f7ff ff76 	bl	80052d0 <__multadd>
 80053e4:	e7ee      	b.n	80053c4 <__s2b+0x68>
 80053e6:	bf00      	nop
 80053e8:	080067b1 	.word	0x080067b1
 80053ec:	08006839 	.word	0x08006839

080053f0 <__hi0bits>:
 80053f0:	0c03      	lsrs	r3, r0, #16
 80053f2:	041b      	lsls	r3, r3, #16
 80053f4:	b9d3      	cbnz	r3, 800542c <__hi0bits+0x3c>
 80053f6:	0400      	lsls	r0, r0, #16
 80053f8:	2310      	movs	r3, #16
 80053fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80053fe:	bf04      	itt	eq
 8005400:	0200      	lsleq	r0, r0, #8
 8005402:	3308      	addeq	r3, #8
 8005404:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005408:	bf04      	itt	eq
 800540a:	0100      	lsleq	r0, r0, #4
 800540c:	3304      	addeq	r3, #4
 800540e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005412:	bf04      	itt	eq
 8005414:	0080      	lsleq	r0, r0, #2
 8005416:	3302      	addeq	r3, #2
 8005418:	2800      	cmp	r0, #0
 800541a:	db05      	blt.n	8005428 <__hi0bits+0x38>
 800541c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005420:	f103 0301 	add.w	r3, r3, #1
 8005424:	bf08      	it	eq
 8005426:	2320      	moveq	r3, #32
 8005428:	4618      	mov	r0, r3
 800542a:	4770      	bx	lr
 800542c:	2300      	movs	r3, #0
 800542e:	e7e4      	b.n	80053fa <__hi0bits+0xa>

08005430 <__lo0bits>:
 8005430:	6803      	ldr	r3, [r0, #0]
 8005432:	f013 0207 	ands.w	r2, r3, #7
 8005436:	d00c      	beq.n	8005452 <__lo0bits+0x22>
 8005438:	07d9      	lsls	r1, r3, #31
 800543a:	d422      	bmi.n	8005482 <__lo0bits+0x52>
 800543c:	079a      	lsls	r2, r3, #30
 800543e:	bf49      	itett	mi
 8005440:	085b      	lsrmi	r3, r3, #1
 8005442:	089b      	lsrpl	r3, r3, #2
 8005444:	6003      	strmi	r3, [r0, #0]
 8005446:	2201      	movmi	r2, #1
 8005448:	bf5c      	itt	pl
 800544a:	6003      	strpl	r3, [r0, #0]
 800544c:	2202      	movpl	r2, #2
 800544e:	4610      	mov	r0, r2
 8005450:	4770      	bx	lr
 8005452:	b299      	uxth	r1, r3
 8005454:	b909      	cbnz	r1, 800545a <__lo0bits+0x2a>
 8005456:	0c1b      	lsrs	r3, r3, #16
 8005458:	2210      	movs	r2, #16
 800545a:	b2d9      	uxtb	r1, r3
 800545c:	b909      	cbnz	r1, 8005462 <__lo0bits+0x32>
 800545e:	3208      	adds	r2, #8
 8005460:	0a1b      	lsrs	r3, r3, #8
 8005462:	0719      	lsls	r1, r3, #28
 8005464:	bf04      	itt	eq
 8005466:	091b      	lsreq	r3, r3, #4
 8005468:	3204      	addeq	r2, #4
 800546a:	0799      	lsls	r1, r3, #30
 800546c:	bf04      	itt	eq
 800546e:	089b      	lsreq	r3, r3, #2
 8005470:	3202      	addeq	r2, #2
 8005472:	07d9      	lsls	r1, r3, #31
 8005474:	d403      	bmi.n	800547e <__lo0bits+0x4e>
 8005476:	085b      	lsrs	r3, r3, #1
 8005478:	f102 0201 	add.w	r2, r2, #1
 800547c:	d003      	beq.n	8005486 <__lo0bits+0x56>
 800547e:	6003      	str	r3, [r0, #0]
 8005480:	e7e5      	b.n	800544e <__lo0bits+0x1e>
 8005482:	2200      	movs	r2, #0
 8005484:	e7e3      	b.n	800544e <__lo0bits+0x1e>
 8005486:	2220      	movs	r2, #32
 8005488:	e7e1      	b.n	800544e <__lo0bits+0x1e>
	...

0800548c <__i2b>:
 800548c:	b510      	push	{r4, lr}
 800548e:	460c      	mov	r4, r1
 8005490:	2101      	movs	r1, #1
 8005492:	f7ff febb 	bl	800520c <_Balloc>
 8005496:	4602      	mov	r2, r0
 8005498:	b928      	cbnz	r0, 80054a6 <__i2b+0x1a>
 800549a:	4b05      	ldr	r3, [pc, #20]	; (80054b0 <__i2b+0x24>)
 800549c:	4805      	ldr	r0, [pc, #20]	; (80054b4 <__i2b+0x28>)
 800549e:	f240 1145 	movw	r1, #325	; 0x145
 80054a2:	f000 fc2b 	bl	8005cfc <__assert_func>
 80054a6:	2301      	movs	r3, #1
 80054a8:	6144      	str	r4, [r0, #20]
 80054aa:	6103      	str	r3, [r0, #16]
 80054ac:	bd10      	pop	{r4, pc}
 80054ae:	bf00      	nop
 80054b0:	080067b1 	.word	0x080067b1
 80054b4:	08006839 	.word	0x08006839

080054b8 <__multiply>:
 80054b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054bc:	4691      	mov	r9, r2
 80054be:	690a      	ldr	r2, [r1, #16]
 80054c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	bfb8      	it	lt
 80054c8:	460b      	movlt	r3, r1
 80054ca:	460c      	mov	r4, r1
 80054cc:	bfbc      	itt	lt
 80054ce:	464c      	movlt	r4, r9
 80054d0:	4699      	movlt	r9, r3
 80054d2:	6927      	ldr	r7, [r4, #16]
 80054d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80054d8:	68a3      	ldr	r3, [r4, #8]
 80054da:	6861      	ldr	r1, [r4, #4]
 80054dc:	eb07 060a 	add.w	r6, r7, sl
 80054e0:	42b3      	cmp	r3, r6
 80054e2:	b085      	sub	sp, #20
 80054e4:	bfb8      	it	lt
 80054e6:	3101      	addlt	r1, #1
 80054e8:	f7ff fe90 	bl	800520c <_Balloc>
 80054ec:	b930      	cbnz	r0, 80054fc <__multiply+0x44>
 80054ee:	4602      	mov	r2, r0
 80054f0:	4b44      	ldr	r3, [pc, #272]	; (8005604 <__multiply+0x14c>)
 80054f2:	4845      	ldr	r0, [pc, #276]	; (8005608 <__multiply+0x150>)
 80054f4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80054f8:	f000 fc00 	bl	8005cfc <__assert_func>
 80054fc:	f100 0514 	add.w	r5, r0, #20
 8005500:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005504:	462b      	mov	r3, r5
 8005506:	2200      	movs	r2, #0
 8005508:	4543      	cmp	r3, r8
 800550a:	d321      	bcc.n	8005550 <__multiply+0x98>
 800550c:	f104 0314 	add.w	r3, r4, #20
 8005510:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005514:	f109 0314 	add.w	r3, r9, #20
 8005518:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800551c:	9202      	str	r2, [sp, #8]
 800551e:	1b3a      	subs	r2, r7, r4
 8005520:	3a15      	subs	r2, #21
 8005522:	f022 0203 	bic.w	r2, r2, #3
 8005526:	3204      	adds	r2, #4
 8005528:	f104 0115 	add.w	r1, r4, #21
 800552c:	428f      	cmp	r7, r1
 800552e:	bf38      	it	cc
 8005530:	2204      	movcc	r2, #4
 8005532:	9201      	str	r2, [sp, #4]
 8005534:	9a02      	ldr	r2, [sp, #8]
 8005536:	9303      	str	r3, [sp, #12]
 8005538:	429a      	cmp	r2, r3
 800553a:	d80c      	bhi.n	8005556 <__multiply+0x9e>
 800553c:	2e00      	cmp	r6, #0
 800553e:	dd03      	ble.n	8005548 <__multiply+0x90>
 8005540:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005544:	2b00      	cmp	r3, #0
 8005546:	d05b      	beq.n	8005600 <__multiply+0x148>
 8005548:	6106      	str	r6, [r0, #16]
 800554a:	b005      	add	sp, #20
 800554c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005550:	f843 2b04 	str.w	r2, [r3], #4
 8005554:	e7d8      	b.n	8005508 <__multiply+0x50>
 8005556:	f8b3 a000 	ldrh.w	sl, [r3]
 800555a:	f1ba 0f00 	cmp.w	sl, #0
 800555e:	d024      	beq.n	80055aa <__multiply+0xf2>
 8005560:	f104 0e14 	add.w	lr, r4, #20
 8005564:	46a9      	mov	r9, r5
 8005566:	f04f 0c00 	mov.w	ip, #0
 800556a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800556e:	f8d9 1000 	ldr.w	r1, [r9]
 8005572:	fa1f fb82 	uxth.w	fp, r2
 8005576:	b289      	uxth	r1, r1
 8005578:	fb0a 110b 	mla	r1, sl, fp, r1
 800557c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005580:	f8d9 2000 	ldr.w	r2, [r9]
 8005584:	4461      	add	r1, ip
 8005586:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800558a:	fb0a c20b 	mla	r2, sl, fp, ip
 800558e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005592:	b289      	uxth	r1, r1
 8005594:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005598:	4577      	cmp	r7, lr
 800559a:	f849 1b04 	str.w	r1, [r9], #4
 800559e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80055a2:	d8e2      	bhi.n	800556a <__multiply+0xb2>
 80055a4:	9a01      	ldr	r2, [sp, #4]
 80055a6:	f845 c002 	str.w	ip, [r5, r2]
 80055aa:	9a03      	ldr	r2, [sp, #12]
 80055ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80055b0:	3304      	adds	r3, #4
 80055b2:	f1b9 0f00 	cmp.w	r9, #0
 80055b6:	d021      	beq.n	80055fc <__multiply+0x144>
 80055b8:	6829      	ldr	r1, [r5, #0]
 80055ba:	f104 0c14 	add.w	ip, r4, #20
 80055be:	46ae      	mov	lr, r5
 80055c0:	f04f 0a00 	mov.w	sl, #0
 80055c4:	f8bc b000 	ldrh.w	fp, [ip]
 80055c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80055cc:	fb09 220b 	mla	r2, r9, fp, r2
 80055d0:	4452      	add	r2, sl
 80055d2:	b289      	uxth	r1, r1
 80055d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80055d8:	f84e 1b04 	str.w	r1, [lr], #4
 80055dc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80055e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80055e4:	f8be 1000 	ldrh.w	r1, [lr]
 80055e8:	fb09 110a 	mla	r1, r9, sl, r1
 80055ec:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80055f0:	4567      	cmp	r7, ip
 80055f2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80055f6:	d8e5      	bhi.n	80055c4 <__multiply+0x10c>
 80055f8:	9a01      	ldr	r2, [sp, #4]
 80055fa:	50a9      	str	r1, [r5, r2]
 80055fc:	3504      	adds	r5, #4
 80055fe:	e799      	b.n	8005534 <__multiply+0x7c>
 8005600:	3e01      	subs	r6, #1
 8005602:	e79b      	b.n	800553c <__multiply+0x84>
 8005604:	080067b1 	.word	0x080067b1
 8005608:	08006839 	.word	0x08006839

0800560c <__pow5mult>:
 800560c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005610:	4615      	mov	r5, r2
 8005612:	f012 0203 	ands.w	r2, r2, #3
 8005616:	4606      	mov	r6, r0
 8005618:	460f      	mov	r7, r1
 800561a:	d007      	beq.n	800562c <__pow5mult+0x20>
 800561c:	4c25      	ldr	r4, [pc, #148]	; (80056b4 <__pow5mult+0xa8>)
 800561e:	3a01      	subs	r2, #1
 8005620:	2300      	movs	r3, #0
 8005622:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005626:	f7ff fe53 	bl	80052d0 <__multadd>
 800562a:	4607      	mov	r7, r0
 800562c:	10ad      	asrs	r5, r5, #2
 800562e:	d03d      	beq.n	80056ac <__pow5mult+0xa0>
 8005630:	69f4      	ldr	r4, [r6, #28]
 8005632:	b97c      	cbnz	r4, 8005654 <__pow5mult+0x48>
 8005634:	2010      	movs	r0, #16
 8005636:	f000 fb95 	bl	8005d64 <malloc>
 800563a:	4602      	mov	r2, r0
 800563c:	61f0      	str	r0, [r6, #28]
 800563e:	b928      	cbnz	r0, 800564c <__pow5mult+0x40>
 8005640:	4b1d      	ldr	r3, [pc, #116]	; (80056b8 <__pow5mult+0xac>)
 8005642:	481e      	ldr	r0, [pc, #120]	; (80056bc <__pow5mult+0xb0>)
 8005644:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005648:	f000 fb58 	bl	8005cfc <__assert_func>
 800564c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005650:	6004      	str	r4, [r0, #0]
 8005652:	60c4      	str	r4, [r0, #12]
 8005654:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005658:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800565c:	b94c      	cbnz	r4, 8005672 <__pow5mult+0x66>
 800565e:	f240 2171 	movw	r1, #625	; 0x271
 8005662:	4630      	mov	r0, r6
 8005664:	f7ff ff12 	bl	800548c <__i2b>
 8005668:	2300      	movs	r3, #0
 800566a:	f8c8 0008 	str.w	r0, [r8, #8]
 800566e:	4604      	mov	r4, r0
 8005670:	6003      	str	r3, [r0, #0]
 8005672:	f04f 0900 	mov.w	r9, #0
 8005676:	07eb      	lsls	r3, r5, #31
 8005678:	d50a      	bpl.n	8005690 <__pow5mult+0x84>
 800567a:	4639      	mov	r1, r7
 800567c:	4622      	mov	r2, r4
 800567e:	4630      	mov	r0, r6
 8005680:	f7ff ff1a 	bl	80054b8 <__multiply>
 8005684:	4639      	mov	r1, r7
 8005686:	4680      	mov	r8, r0
 8005688:	4630      	mov	r0, r6
 800568a:	f7ff fdff 	bl	800528c <_Bfree>
 800568e:	4647      	mov	r7, r8
 8005690:	106d      	asrs	r5, r5, #1
 8005692:	d00b      	beq.n	80056ac <__pow5mult+0xa0>
 8005694:	6820      	ldr	r0, [r4, #0]
 8005696:	b938      	cbnz	r0, 80056a8 <__pow5mult+0x9c>
 8005698:	4622      	mov	r2, r4
 800569a:	4621      	mov	r1, r4
 800569c:	4630      	mov	r0, r6
 800569e:	f7ff ff0b 	bl	80054b8 <__multiply>
 80056a2:	6020      	str	r0, [r4, #0]
 80056a4:	f8c0 9000 	str.w	r9, [r0]
 80056a8:	4604      	mov	r4, r0
 80056aa:	e7e4      	b.n	8005676 <__pow5mult+0x6a>
 80056ac:	4638      	mov	r0, r7
 80056ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056b2:	bf00      	nop
 80056b4:	08006988 	.word	0x08006988
 80056b8:	08006822 	.word	0x08006822
 80056bc:	08006839 	.word	0x08006839

080056c0 <__lshift>:
 80056c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056c4:	460c      	mov	r4, r1
 80056c6:	6849      	ldr	r1, [r1, #4]
 80056c8:	6923      	ldr	r3, [r4, #16]
 80056ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80056ce:	68a3      	ldr	r3, [r4, #8]
 80056d0:	4607      	mov	r7, r0
 80056d2:	4691      	mov	r9, r2
 80056d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80056d8:	f108 0601 	add.w	r6, r8, #1
 80056dc:	42b3      	cmp	r3, r6
 80056de:	db0b      	blt.n	80056f8 <__lshift+0x38>
 80056e0:	4638      	mov	r0, r7
 80056e2:	f7ff fd93 	bl	800520c <_Balloc>
 80056e6:	4605      	mov	r5, r0
 80056e8:	b948      	cbnz	r0, 80056fe <__lshift+0x3e>
 80056ea:	4602      	mov	r2, r0
 80056ec:	4b28      	ldr	r3, [pc, #160]	; (8005790 <__lshift+0xd0>)
 80056ee:	4829      	ldr	r0, [pc, #164]	; (8005794 <__lshift+0xd4>)
 80056f0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80056f4:	f000 fb02 	bl	8005cfc <__assert_func>
 80056f8:	3101      	adds	r1, #1
 80056fa:	005b      	lsls	r3, r3, #1
 80056fc:	e7ee      	b.n	80056dc <__lshift+0x1c>
 80056fe:	2300      	movs	r3, #0
 8005700:	f100 0114 	add.w	r1, r0, #20
 8005704:	f100 0210 	add.w	r2, r0, #16
 8005708:	4618      	mov	r0, r3
 800570a:	4553      	cmp	r3, sl
 800570c:	db33      	blt.n	8005776 <__lshift+0xb6>
 800570e:	6920      	ldr	r0, [r4, #16]
 8005710:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005714:	f104 0314 	add.w	r3, r4, #20
 8005718:	f019 091f 	ands.w	r9, r9, #31
 800571c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005720:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005724:	d02b      	beq.n	800577e <__lshift+0xbe>
 8005726:	f1c9 0e20 	rsb	lr, r9, #32
 800572a:	468a      	mov	sl, r1
 800572c:	2200      	movs	r2, #0
 800572e:	6818      	ldr	r0, [r3, #0]
 8005730:	fa00 f009 	lsl.w	r0, r0, r9
 8005734:	4310      	orrs	r0, r2
 8005736:	f84a 0b04 	str.w	r0, [sl], #4
 800573a:	f853 2b04 	ldr.w	r2, [r3], #4
 800573e:	459c      	cmp	ip, r3
 8005740:	fa22 f20e 	lsr.w	r2, r2, lr
 8005744:	d8f3      	bhi.n	800572e <__lshift+0x6e>
 8005746:	ebac 0304 	sub.w	r3, ip, r4
 800574a:	3b15      	subs	r3, #21
 800574c:	f023 0303 	bic.w	r3, r3, #3
 8005750:	3304      	adds	r3, #4
 8005752:	f104 0015 	add.w	r0, r4, #21
 8005756:	4584      	cmp	ip, r0
 8005758:	bf38      	it	cc
 800575a:	2304      	movcc	r3, #4
 800575c:	50ca      	str	r2, [r1, r3]
 800575e:	b10a      	cbz	r2, 8005764 <__lshift+0xa4>
 8005760:	f108 0602 	add.w	r6, r8, #2
 8005764:	3e01      	subs	r6, #1
 8005766:	4638      	mov	r0, r7
 8005768:	612e      	str	r6, [r5, #16]
 800576a:	4621      	mov	r1, r4
 800576c:	f7ff fd8e 	bl	800528c <_Bfree>
 8005770:	4628      	mov	r0, r5
 8005772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005776:	f842 0f04 	str.w	r0, [r2, #4]!
 800577a:	3301      	adds	r3, #1
 800577c:	e7c5      	b.n	800570a <__lshift+0x4a>
 800577e:	3904      	subs	r1, #4
 8005780:	f853 2b04 	ldr.w	r2, [r3], #4
 8005784:	f841 2f04 	str.w	r2, [r1, #4]!
 8005788:	459c      	cmp	ip, r3
 800578a:	d8f9      	bhi.n	8005780 <__lshift+0xc0>
 800578c:	e7ea      	b.n	8005764 <__lshift+0xa4>
 800578e:	bf00      	nop
 8005790:	080067b1 	.word	0x080067b1
 8005794:	08006839 	.word	0x08006839

08005798 <__mcmp>:
 8005798:	b530      	push	{r4, r5, lr}
 800579a:	6902      	ldr	r2, [r0, #16]
 800579c:	690c      	ldr	r4, [r1, #16]
 800579e:	1b12      	subs	r2, r2, r4
 80057a0:	d10e      	bne.n	80057c0 <__mcmp+0x28>
 80057a2:	f100 0314 	add.w	r3, r0, #20
 80057a6:	3114      	adds	r1, #20
 80057a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80057ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80057b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80057b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80057b8:	42a5      	cmp	r5, r4
 80057ba:	d003      	beq.n	80057c4 <__mcmp+0x2c>
 80057bc:	d305      	bcc.n	80057ca <__mcmp+0x32>
 80057be:	2201      	movs	r2, #1
 80057c0:	4610      	mov	r0, r2
 80057c2:	bd30      	pop	{r4, r5, pc}
 80057c4:	4283      	cmp	r3, r0
 80057c6:	d3f3      	bcc.n	80057b0 <__mcmp+0x18>
 80057c8:	e7fa      	b.n	80057c0 <__mcmp+0x28>
 80057ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057ce:	e7f7      	b.n	80057c0 <__mcmp+0x28>

080057d0 <__mdiff>:
 80057d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d4:	460c      	mov	r4, r1
 80057d6:	4606      	mov	r6, r0
 80057d8:	4611      	mov	r1, r2
 80057da:	4620      	mov	r0, r4
 80057dc:	4690      	mov	r8, r2
 80057de:	f7ff ffdb 	bl	8005798 <__mcmp>
 80057e2:	1e05      	subs	r5, r0, #0
 80057e4:	d110      	bne.n	8005808 <__mdiff+0x38>
 80057e6:	4629      	mov	r1, r5
 80057e8:	4630      	mov	r0, r6
 80057ea:	f7ff fd0f 	bl	800520c <_Balloc>
 80057ee:	b930      	cbnz	r0, 80057fe <__mdiff+0x2e>
 80057f0:	4b3a      	ldr	r3, [pc, #232]	; (80058dc <__mdiff+0x10c>)
 80057f2:	4602      	mov	r2, r0
 80057f4:	f240 2137 	movw	r1, #567	; 0x237
 80057f8:	4839      	ldr	r0, [pc, #228]	; (80058e0 <__mdiff+0x110>)
 80057fa:	f000 fa7f 	bl	8005cfc <__assert_func>
 80057fe:	2301      	movs	r3, #1
 8005800:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005804:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005808:	bfa4      	itt	ge
 800580a:	4643      	movge	r3, r8
 800580c:	46a0      	movge	r8, r4
 800580e:	4630      	mov	r0, r6
 8005810:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005814:	bfa6      	itte	ge
 8005816:	461c      	movge	r4, r3
 8005818:	2500      	movge	r5, #0
 800581a:	2501      	movlt	r5, #1
 800581c:	f7ff fcf6 	bl	800520c <_Balloc>
 8005820:	b920      	cbnz	r0, 800582c <__mdiff+0x5c>
 8005822:	4b2e      	ldr	r3, [pc, #184]	; (80058dc <__mdiff+0x10c>)
 8005824:	4602      	mov	r2, r0
 8005826:	f240 2145 	movw	r1, #581	; 0x245
 800582a:	e7e5      	b.n	80057f8 <__mdiff+0x28>
 800582c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005830:	6926      	ldr	r6, [r4, #16]
 8005832:	60c5      	str	r5, [r0, #12]
 8005834:	f104 0914 	add.w	r9, r4, #20
 8005838:	f108 0514 	add.w	r5, r8, #20
 800583c:	f100 0e14 	add.w	lr, r0, #20
 8005840:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005844:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005848:	f108 0210 	add.w	r2, r8, #16
 800584c:	46f2      	mov	sl, lr
 800584e:	2100      	movs	r1, #0
 8005850:	f859 3b04 	ldr.w	r3, [r9], #4
 8005854:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005858:	fa11 f88b 	uxtah	r8, r1, fp
 800585c:	b299      	uxth	r1, r3
 800585e:	0c1b      	lsrs	r3, r3, #16
 8005860:	eba8 0801 	sub.w	r8, r8, r1
 8005864:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005868:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800586c:	fa1f f888 	uxth.w	r8, r8
 8005870:	1419      	asrs	r1, r3, #16
 8005872:	454e      	cmp	r6, r9
 8005874:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005878:	f84a 3b04 	str.w	r3, [sl], #4
 800587c:	d8e8      	bhi.n	8005850 <__mdiff+0x80>
 800587e:	1b33      	subs	r3, r6, r4
 8005880:	3b15      	subs	r3, #21
 8005882:	f023 0303 	bic.w	r3, r3, #3
 8005886:	3304      	adds	r3, #4
 8005888:	3415      	adds	r4, #21
 800588a:	42a6      	cmp	r6, r4
 800588c:	bf38      	it	cc
 800588e:	2304      	movcc	r3, #4
 8005890:	441d      	add	r5, r3
 8005892:	4473      	add	r3, lr
 8005894:	469e      	mov	lr, r3
 8005896:	462e      	mov	r6, r5
 8005898:	4566      	cmp	r6, ip
 800589a:	d30e      	bcc.n	80058ba <__mdiff+0xea>
 800589c:	f10c 0203 	add.w	r2, ip, #3
 80058a0:	1b52      	subs	r2, r2, r5
 80058a2:	f022 0203 	bic.w	r2, r2, #3
 80058a6:	3d03      	subs	r5, #3
 80058a8:	45ac      	cmp	ip, r5
 80058aa:	bf38      	it	cc
 80058ac:	2200      	movcc	r2, #0
 80058ae:	4413      	add	r3, r2
 80058b0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80058b4:	b17a      	cbz	r2, 80058d6 <__mdiff+0x106>
 80058b6:	6107      	str	r7, [r0, #16]
 80058b8:	e7a4      	b.n	8005804 <__mdiff+0x34>
 80058ba:	f856 8b04 	ldr.w	r8, [r6], #4
 80058be:	fa11 f288 	uxtah	r2, r1, r8
 80058c2:	1414      	asrs	r4, r2, #16
 80058c4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80058c8:	b292      	uxth	r2, r2
 80058ca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80058ce:	f84e 2b04 	str.w	r2, [lr], #4
 80058d2:	1421      	asrs	r1, r4, #16
 80058d4:	e7e0      	b.n	8005898 <__mdiff+0xc8>
 80058d6:	3f01      	subs	r7, #1
 80058d8:	e7ea      	b.n	80058b0 <__mdiff+0xe0>
 80058da:	bf00      	nop
 80058dc:	080067b1 	.word	0x080067b1
 80058e0:	08006839 	.word	0x08006839

080058e4 <__ulp>:
 80058e4:	b082      	sub	sp, #8
 80058e6:	ed8d 0b00 	vstr	d0, [sp]
 80058ea:	9a01      	ldr	r2, [sp, #4]
 80058ec:	4b0f      	ldr	r3, [pc, #60]	; (800592c <__ulp+0x48>)
 80058ee:	4013      	ands	r3, r2
 80058f0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	dc08      	bgt.n	800590a <__ulp+0x26>
 80058f8:	425b      	negs	r3, r3
 80058fa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80058fe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005902:	da04      	bge.n	800590e <__ulp+0x2a>
 8005904:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005908:	4113      	asrs	r3, r2
 800590a:	2200      	movs	r2, #0
 800590c:	e008      	b.n	8005920 <__ulp+0x3c>
 800590e:	f1a2 0314 	sub.w	r3, r2, #20
 8005912:	2b1e      	cmp	r3, #30
 8005914:	bfda      	itte	le
 8005916:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800591a:	40da      	lsrle	r2, r3
 800591c:	2201      	movgt	r2, #1
 800591e:	2300      	movs	r3, #0
 8005920:	4619      	mov	r1, r3
 8005922:	4610      	mov	r0, r2
 8005924:	ec41 0b10 	vmov	d0, r0, r1
 8005928:	b002      	add	sp, #8
 800592a:	4770      	bx	lr
 800592c:	7ff00000 	.word	0x7ff00000

08005930 <__b2d>:
 8005930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005934:	6906      	ldr	r6, [r0, #16]
 8005936:	f100 0814 	add.w	r8, r0, #20
 800593a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800593e:	1f37      	subs	r7, r6, #4
 8005940:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005944:	4610      	mov	r0, r2
 8005946:	f7ff fd53 	bl	80053f0 <__hi0bits>
 800594a:	f1c0 0320 	rsb	r3, r0, #32
 800594e:	280a      	cmp	r0, #10
 8005950:	600b      	str	r3, [r1, #0]
 8005952:	491b      	ldr	r1, [pc, #108]	; (80059c0 <__b2d+0x90>)
 8005954:	dc15      	bgt.n	8005982 <__b2d+0x52>
 8005956:	f1c0 0c0b 	rsb	ip, r0, #11
 800595a:	fa22 f30c 	lsr.w	r3, r2, ip
 800595e:	45b8      	cmp	r8, r7
 8005960:	ea43 0501 	orr.w	r5, r3, r1
 8005964:	bf34      	ite	cc
 8005966:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800596a:	2300      	movcs	r3, #0
 800596c:	3015      	adds	r0, #21
 800596e:	fa02 f000 	lsl.w	r0, r2, r0
 8005972:	fa23 f30c 	lsr.w	r3, r3, ip
 8005976:	4303      	orrs	r3, r0
 8005978:	461c      	mov	r4, r3
 800597a:	ec45 4b10 	vmov	d0, r4, r5
 800597e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005982:	45b8      	cmp	r8, r7
 8005984:	bf3a      	itte	cc
 8005986:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800598a:	f1a6 0708 	subcc.w	r7, r6, #8
 800598e:	2300      	movcs	r3, #0
 8005990:	380b      	subs	r0, #11
 8005992:	d012      	beq.n	80059ba <__b2d+0x8a>
 8005994:	f1c0 0120 	rsb	r1, r0, #32
 8005998:	fa23 f401 	lsr.w	r4, r3, r1
 800599c:	4082      	lsls	r2, r0
 800599e:	4322      	orrs	r2, r4
 80059a0:	4547      	cmp	r7, r8
 80059a2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80059a6:	bf8c      	ite	hi
 80059a8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80059ac:	2200      	movls	r2, #0
 80059ae:	4083      	lsls	r3, r0
 80059b0:	40ca      	lsrs	r2, r1
 80059b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80059b6:	4313      	orrs	r3, r2
 80059b8:	e7de      	b.n	8005978 <__b2d+0x48>
 80059ba:	ea42 0501 	orr.w	r5, r2, r1
 80059be:	e7db      	b.n	8005978 <__b2d+0x48>
 80059c0:	3ff00000 	.word	0x3ff00000

080059c4 <__d2b>:
 80059c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80059c8:	460f      	mov	r7, r1
 80059ca:	2101      	movs	r1, #1
 80059cc:	ec59 8b10 	vmov	r8, r9, d0
 80059d0:	4616      	mov	r6, r2
 80059d2:	f7ff fc1b 	bl	800520c <_Balloc>
 80059d6:	4604      	mov	r4, r0
 80059d8:	b930      	cbnz	r0, 80059e8 <__d2b+0x24>
 80059da:	4602      	mov	r2, r0
 80059dc:	4b24      	ldr	r3, [pc, #144]	; (8005a70 <__d2b+0xac>)
 80059de:	4825      	ldr	r0, [pc, #148]	; (8005a74 <__d2b+0xb0>)
 80059e0:	f240 310f 	movw	r1, #783	; 0x30f
 80059e4:	f000 f98a 	bl	8005cfc <__assert_func>
 80059e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80059ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80059f0:	bb2d      	cbnz	r5, 8005a3e <__d2b+0x7a>
 80059f2:	9301      	str	r3, [sp, #4]
 80059f4:	f1b8 0300 	subs.w	r3, r8, #0
 80059f8:	d026      	beq.n	8005a48 <__d2b+0x84>
 80059fa:	4668      	mov	r0, sp
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	f7ff fd17 	bl	8005430 <__lo0bits>
 8005a02:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005a06:	b1e8      	cbz	r0, 8005a44 <__d2b+0x80>
 8005a08:	f1c0 0320 	rsb	r3, r0, #32
 8005a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a10:	430b      	orrs	r3, r1
 8005a12:	40c2      	lsrs	r2, r0
 8005a14:	6163      	str	r3, [r4, #20]
 8005a16:	9201      	str	r2, [sp, #4]
 8005a18:	9b01      	ldr	r3, [sp, #4]
 8005a1a:	61a3      	str	r3, [r4, #24]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	bf14      	ite	ne
 8005a20:	2202      	movne	r2, #2
 8005a22:	2201      	moveq	r2, #1
 8005a24:	6122      	str	r2, [r4, #16]
 8005a26:	b1bd      	cbz	r5, 8005a58 <__d2b+0x94>
 8005a28:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005a2c:	4405      	add	r5, r0
 8005a2e:	603d      	str	r5, [r7, #0]
 8005a30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005a34:	6030      	str	r0, [r6, #0]
 8005a36:	4620      	mov	r0, r4
 8005a38:	b003      	add	sp, #12
 8005a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a42:	e7d6      	b.n	80059f2 <__d2b+0x2e>
 8005a44:	6161      	str	r1, [r4, #20]
 8005a46:	e7e7      	b.n	8005a18 <__d2b+0x54>
 8005a48:	a801      	add	r0, sp, #4
 8005a4a:	f7ff fcf1 	bl	8005430 <__lo0bits>
 8005a4e:	9b01      	ldr	r3, [sp, #4]
 8005a50:	6163      	str	r3, [r4, #20]
 8005a52:	3020      	adds	r0, #32
 8005a54:	2201      	movs	r2, #1
 8005a56:	e7e5      	b.n	8005a24 <__d2b+0x60>
 8005a58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005a5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005a60:	6038      	str	r0, [r7, #0]
 8005a62:	6918      	ldr	r0, [r3, #16]
 8005a64:	f7ff fcc4 	bl	80053f0 <__hi0bits>
 8005a68:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005a6c:	e7e2      	b.n	8005a34 <__d2b+0x70>
 8005a6e:	bf00      	nop
 8005a70:	080067b1 	.word	0x080067b1
 8005a74:	08006839 	.word	0x08006839

08005a78 <__ratio>:
 8005a78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7c:	4688      	mov	r8, r1
 8005a7e:	4669      	mov	r1, sp
 8005a80:	4681      	mov	r9, r0
 8005a82:	f7ff ff55 	bl	8005930 <__b2d>
 8005a86:	a901      	add	r1, sp, #4
 8005a88:	4640      	mov	r0, r8
 8005a8a:	ec55 4b10 	vmov	r4, r5, d0
 8005a8e:	f7ff ff4f 	bl	8005930 <__b2d>
 8005a92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005a96:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005a9a:	eba3 0c02 	sub.w	ip, r3, r2
 8005a9e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005aa2:	1a9b      	subs	r3, r3, r2
 8005aa4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8005aa8:	ec51 0b10 	vmov	r0, r1, d0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	bfd6      	itet	le
 8005ab0:	460a      	movle	r2, r1
 8005ab2:	462a      	movgt	r2, r5
 8005ab4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005ab8:	468b      	mov	fp, r1
 8005aba:	462f      	mov	r7, r5
 8005abc:	bfd4      	ite	le
 8005abe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8005ac2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	ee10 2a10 	vmov	r2, s0
 8005acc:	465b      	mov	r3, fp
 8005ace:	4639      	mov	r1, r7
 8005ad0:	f7fa fecc 	bl	800086c <__aeabi_ddiv>
 8005ad4:	ec41 0b10 	vmov	d0, r0, r1
 8005ad8:	b003      	add	sp, #12
 8005ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005ade <__copybits>:
 8005ade:	3901      	subs	r1, #1
 8005ae0:	b570      	push	{r4, r5, r6, lr}
 8005ae2:	1149      	asrs	r1, r1, #5
 8005ae4:	6914      	ldr	r4, [r2, #16]
 8005ae6:	3101      	adds	r1, #1
 8005ae8:	f102 0314 	add.w	r3, r2, #20
 8005aec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005af0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005af4:	1f05      	subs	r5, r0, #4
 8005af6:	42a3      	cmp	r3, r4
 8005af8:	d30c      	bcc.n	8005b14 <__copybits+0x36>
 8005afa:	1aa3      	subs	r3, r4, r2
 8005afc:	3b11      	subs	r3, #17
 8005afe:	f023 0303 	bic.w	r3, r3, #3
 8005b02:	3211      	adds	r2, #17
 8005b04:	42a2      	cmp	r2, r4
 8005b06:	bf88      	it	hi
 8005b08:	2300      	movhi	r3, #0
 8005b0a:	4418      	add	r0, r3
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	4288      	cmp	r0, r1
 8005b10:	d305      	bcc.n	8005b1e <__copybits+0x40>
 8005b12:	bd70      	pop	{r4, r5, r6, pc}
 8005b14:	f853 6b04 	ldr.w	r6, [r3], #4
 8005b18:	f845 6f04 	str.w	r6, [r5, #4]!
 8005b1c:	e7eb      	b.n	8005af6 <__copybits+0x18>
 8005b1e:	f840 3b04 	str.w	r3, [r0], #4
 8005b22:	e7f4      	b.n	8005b0e <__copybits+0x30>

08005b24 <__any_on>:
 8005b24:	f100 0214 	add.w	r2, r0, #20
 8005b28:	6900      	ldr	r0, [r0, #16]
 8005b2a:	114b      	asrs	r3, r1, #5
 8005b2c:	4298      	cmp	r0, r3
 8005b2e:	b510      	push	{r4, lr}
 8005b30:	db11      	blt.n	8005b56 <__any_on+0x32>
 8005b32:	dd0a      	ble.n	8005b4a <__any_on+0x26>
 8005b34:	f011 011f 	ands.w	r1, r1, #31
 8005b38:	d007      	beq.n	8005b4a <__any_on+0x26>
 8005b3a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005b3e:	fa24 f001 	lsr.w	r0, r4, r1
 8005b42:	fa00 f101 	lsl.w	r1, r0, r1
 8005b46:	428c      	cmp	r4, r1
 8005b48:	d10b      	bne.n	8005b62 <__any_on+0x3e>
 8005b4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d803      	bhi.n	8005b5a <__any_on+0x36>
 8005b52:	2000      	movs	r0, #0
 8005b54:	bd10      	pop	{r4, pc}
 8005b56:	4603      	mov	r3, r0
 8005b58:	e7f7      	b.n	8005b4a <__any_on+0x26>
 8005b5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005b5e:	2900      	cmp	r1, #0
 8005b60:	d0f5      	beq.n	8005b4e <__any_on+0x2a>
 8005b62:	2001      	movs	r0, #1
 8005b64:	e7f6      	b.n	8005b54 <__any_on+0x30>

08005b66 <__ascii_wctomb>:
 8005b66:	b149      	cbz	r1, 8005b7c <__ascii_wctomb+0x16>
 8005b68:	2aff      	cmp	r2, #255	; 0xff
 8005b6a:	bf85      	ittet	hi
 8005b6c:	238a      	movhi	r3, #138	; 0x8a
 8005b6e:	6003      	strhi	r3, [r0, #0]
 8005b70:	700a      	strbls	r2, [r1, #0]
 8005b72:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005b76:	bf98      	it	ls
 8005b78:	2001      	movls	r0, #1
 8005b7a:	4770      	bx	lr
 8005b7c:	4608      	mov	r0, r1
 8005b7e:	4770      	bx	lr

08005b80 <__sflush_r>:
 8005b80:	898a      	ldrh	r2, [r1, #12]
 8005b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b86:	4605      	mov	r5, r0
 8005b88:	0710      	lsls	r0, r2, #28
 8005b8a:	460c      	mov	r4, r1
 8005b8c:	d458      	bmi.n	8005c40 <__sflush_r+0xc0>
 8005b8e:	684b      	ldr	r3, [r1, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	dc05      	bgt.n	8005ba0 <__sflush_r+0x20>
 8005b94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	dc02      	bgt.n	8005ba0 <__sflush_r+0x20>
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ba2:	2e00      	cmp	r6, #0
 8005ba4:	d0f9      	beq.n	8005b9a <__sflush_r+0x1a>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005bac:	682f      	ldr	r7, [r5, #0]
 8005bae:	6a21      	ldr	r1, [r4, #32]
 8005bb0:	602b      	str	r3, [r5, #0]
 8005bb2:	d032      	beq.n	8005c1a <__sflush_r+0x9a>
 8005bb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bb6:	89a3      	ldrh	r3, [r4, #12]
 8005bb8:	075a      	lsls	r2, r3, #29
 8005bba:	d505      	bpl.n	8005bc8 <__sflush_r+0x48>
 8005bbc:	6863      	ldr	r3, [r4, #4]
 8005bbe:	1ac0      	subs	r0, r0, r3
 8005bc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bc2:	b10b      	cbz	r3, 8005bc8 <__sflush_r+0x48>
 8005bc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bc6:	1ac0      	subs	r0, r0, r3
 8005bc8:	2300      	movs	r3, #0
 8005bca:	4602      	mov	r2, r0
 8005bcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bce:	6a21      	ldr	r1, [r4, #32]
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	47b0      	blx	r6
 8005bd4:	1c43      	adds	r3, r0, #1
 8005bd6:	89a3      	ldrh	r3, [r4, #12]
 8005bd8:	d106      	bne.n	8005be8 <__sflush_r+0x68>
 8005bda:	6829      	ldr	r1, [r5, #0]
 8005bdc:	291d      	cmp	r1, #29
 8005bde:	d82b      	bhi.n	8005c38 <__sflush_r+0xb8>
 8005be0:	4a29      	ldr	r2, [pc, #164]	; (8005c88 <__sflush_r+0x108>)
 8005be2:	410a      	asrs	r2, r1
 8005be4:	07d6      	lsls	r6, r2, #31
 8005be6:	d427      	bmi.n	8005c38 <__sflush_r+0xb8>
 8005be8:	2200      	movs	r2, #0
 8005bea:	6062      	str	r2, [r4, #4]
 8005bec:	04d9      	lsls	r1, r3, #19
 8005bee:	6922      	ldr	r2, [r4, #16]
 8005bf0:	6022      	str	r2, [r4, #0]
 8005bf2:	d504      	bpl.n	8005bfe <__sflush_r+0x7e>
 8005bf4:	1c42      	adds	r2, r0, #1
 8005bf6:	d101      	bne.n	8005bfc <__sflush_r+0x7c>
 8005bf8:	682b      	ldr	r3, [r5, #0]
 8005bfa:	b903      	cbnz	r3, 8005bfe <__sflush_r+0x7e>
 8005bfc:	6560      	str	r0, [r4, #84]	; 0x54
 8005bfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c00:	602f      	str	r7, [r5, #0]
 8005c02:	2900      	cmp	r1, #0
 8005c04:	d0c9      	beq.n	8005b9a <__sflush_r+0x1a>
 8005c06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c0a:	4299      	cmp	r1, r3
 8005c0c:	d002      	beq.n	8005c14 <__sflush_r+0x94>
 8005c0e:	4628      	mov	r0, r5
 8005c10:	f7fe fe9a 	bl	8004948 <_free_r>
 8005c14:	2000      	movs	r0, #0
 8005c16:	6360      	str	r0, [r4, #52]	; 0x34
 8005c18:	e7c0      	b.n	8005b9c <__sflush_r+0x1c>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	47b0      	blx	r6
 8005c20:	1c41      	adds	r1, r0, #1
 8005c22:	d1c8      	bne.n	8005bb6 <__sflush_r+0x36>
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0c5      	beq.n	8005bb6 <__sflush_r+0x36>
 8005c2a:	2b1d      	cmp	r3, #29
 8005c2c:	d001      	beq.n	8005c32 <__sflush_r+0xb2>
 8005c2e:	2b16      	cmp	r3, #22
 8005c30:	d101      	bne.n	8005c36 <__sflush_r+0xb6>
 8005c32:	602f      	str	r7, [r5, #0]
 8005c34:	e7b1      	b.n	8005b9a <__sflush_r+0x1a>
 8005c36:	89a3      	ldrh	r3, [r4, #12]
 8005c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c3c:	81a3      	strh	r3, [r4, #12]
 8005c3e:	e7ad      	b.n	8005b9c <__sflush_r+0x1c>
 8005c40:	690f      	ldr	r7, [r1, #16]
 8005c42:	2f00      	cmp	r7, #0
 8005c44:	d0a9      	beq.n	8005b9a <__sflush_r+0x1a>
 8005c46:	0793      	lsls	r3, r2, #30
 8005c48:	680e      	ldr	r6, [r1, #0]
 8005c4a:	bf08      	it	eq
 8005c4c:	694b      	ldreq	r3, [r1, #20]
 8005c4e:	600f      	str	r7, [r1, #0]
 8005c50:	bf18      	it	ne
 8005c52:	2300      	movne	r3, #0
 8005c54:	eba6 0807 	sub.w	r8, r6, r7
 8005c58:	608b      	str	r3, [r1, #8]
 8005c5a:	f1b8 0f00 	cmp.w	r8, #0
 8005c5e:	dd9c      	ble.n	8005b9a <__sflush_r+0x1a>
 8005c60:	6a21      	ldr	r1, [r4, #32]
 8005c62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c64:	4643      	mov	r3, r8
 8005c66:	463a      	mov	r2, r7
 8005c68:	4628      	mov	r0, r5
 8005c6a:	47b0      	blx	r6
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	dc06      	bgt.n	8005c7e <__sflush_r+0xfe>
 8005c70:	89a3      	ldrh	r3, [r4, #12]
 8005c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c76:	81a3      	strh	r3, [r4, #12]
 8005c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c7c:	e78e      	b.n	8005b9c <__sflush_r+0x1c>
 8005c7e:	4407      	add	r7, r0
 8005c80:	eba8 0800 	sub.w	r8, r8, r0
 8005c84:	e7e9      	b.n	8005c5a <__sflush_r+0xda>
 8005c86:	bf00      	nop
 8005c88:	dfbffffe 	.word	0xdfbffffe

08005c8c <_fflush_r>:
 8005c8c:	b538      	push	{r3, r4, r5, lr}
 8005c8e:	690b      	ldr	r3, [r1, #16]
 8005c90:	4605      	mov	r5, r0
 8005c92:	460c      	mov	r4, r1
 8005c94:	b913      	cbnz	r3, 8005c9c <_fflush_r+0x10>
 8005c96:	2500      	movs	r5, #0
 8005c98:	4628      	mov	r0, r5
 8005c9a:	bd38      	pop	{r3, r4, r5, pc}
 8005c9c:	b118      	cbz	r0, 8005ca6 <_fflush_r+0x1a>
 8005c9e:	6a03      	ldr	r3, [r0, #32]
 8005ca0:	b90b      	cbnz	r3, 8005ca6 <_fflush_r+0x1a>
 8005ca2:	f7fe fd11 	bl	80046c8 <__sinit>
 8005ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d0f3      	beq.n	8005c96 <_fflush_r+0xa>
 8005cae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005cb0:	07d0      	lsls	r0, r2, #31
 8005cb2:	d404      	bmi.n	8005cbe <_fflush_r+0x32>
 8005cb4:	0599      	lsls	r1, r3, #22
 8005cb6:	d402      	bmi.n	8005cbe <_fflush_r+0x32>
 8005cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cba:	f7fe fe2a 	bl	8004912 <__retarget_lock_acquire_recursive>
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	f7ff ff5d 	bl	8005b80 <__sflush_r>
 8005cc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cc8:	07da      	lsls	r2, r3, #31
 8005cca:	4605      	mov	r5, r0
 8005ccc:	d4e4      	bmi.n	8005c98 <_fflush_r+0xc>
 8005cce:	89a3      	ldrh	r3, [r4, #12]
 8005cd0:	059b      	lsls	r3, r3, #22
 8005cd2:	d4e1      	bmi.n	8005c98 <_fflush_r+0xc>
 8005cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cd6:	f7fe fe1d 	bl	8004914 <__retarget_lock_release_recursive>
 8005cda:	e7dd      	b.n	8005c98 <_fflush_r+0xc>

08005cdc <_sbrk_r>:
 8005cdc:	b538      	push	{r3, r4, r5, lr}
 8005cde:	4d06      	ldr	r5, [pc, #24]	; (8005cf8 <_sbrk_r+0x1c>)
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	4604      	mov	r4, r0
 8005ce4:	4608      	mov	r0, r1
 8005ce6:	602b      	str	r3, [r5, #0]
 8005ce8:	f7fb fcec 	bl	80016c4 <_sbrk>
 8005cec:	1c43      	adds	r3, r0, #1
 8005cee:	d102      	bne.n	8005cf6 <_sbrk_r+0x1a>
 8005cf0:	682b      	ldr	r3, [r5, #0]
 8005cf2:	b103      	cbz	r3, 8005cf6 <_sbrk_r+0x1a>
 8005cf4:	6023      	str	r3, [r4, #0]
 8005cf6:	bd38      	pop	{r3, r4, r5, pc}
 8005cf8:	200003fc 	.word	0x200003fc

08005cfc <__assert_func>:
 8005cfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005cfe:	4614      	mov	r4, r2
 8005d00:	461a      	mov	r2, r3
 8005d02:	4b09      	ldr	r3, [pc, #36]	; (8005d28 <__assert_func+0x2c>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4605      	mov	r5, r0
 8005d08:	68d8      	ldr	r0, [r3, #12]
 8005d0a:	b14c      	cbz	r4, 8005d20 <__assert_func+0x24>
 8005d0c:	4b07      	ldr	r3, [pc, #28]	; (8005d2c <__assert_func+0x30>)
 8005d0e:	9100      	str	r1, [sp, #0]
 8005d10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005d14:	4906      	ldr	r1, [pc, #24]	; (8005d30 <__assert_func+0x34>)
 8005d16:	462b      	mov	r3, r5
 8005d18:	f000 f82c 	bl	8005d74 <fiprintf>
 8005d1c:	f000 f83c 	bl	8005d98 <abort>
 8005d20:	4b04      	ldr	r3, [pc, #16]	; (8005d34 <__assert_func+0x38>)
 8005d22:	461c      	mov	r4, r3
 8005d24:	e7f3      	b.n	8005d0e <__assert_func+0x12>
 8005d26:	bf00      	nop
 8005d28:	200001d0 	.word	0x200001d0
 8005d2c:	08006994 	.word	0x08006994
 8005d30:	080069a1 	.word	0x080069a1
 8005d34:	080069cf 	.word	0x080069cf

08005d38 <_calloc_r>:
 8005d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d3a:	fba1 2402 	umull	r2, r4, r1, r2
 8005d3e:	b94c      	cbnz	r4, 8005d54 <_calloc_r+0x1c>
 8005d40:	4611      	mov	r1, r2
 8005d42:	9201      	str	r2, [sp, #4]
 8005d44:	f7ff f9c4 	bl	80050d0 <_malloc_r>
 8005d48:	9a01      	ldr	r2, [sp, #4]
 8005d4a:	4605      	mov	r5, r0
 8005d4c:	b930      	cbnz	r0, 8005d5c <_calloc_r+0x24>
 8005d4e:	4628      	mov	r0, r5
 8005d50:	b003      	add	sp, #12
 8005d52:	bd30      	pop	{r4, r5, pc}
 8005d54:	220c      	movs	r2, #12
 8005d56:	6002      	str	r2, [r0, #0]
 8005d58:	2500      	movs	r5, #0
 8005d5a:	e7f8      	b.n	8005d4e <_calloc_r+0x16>
 8005d5c:	4621      	mov	r1, r4
 8005d5e:	f7fe fd2c 	bl	80047ba <memset>
 8005d62:	e7f4      	b.n	8005d4e <_calloc_r+0x16>

08005d64 <malloc>:
 8005d64:	4b02      	ldr	r3, [pc, #8]	; (8005d70 <malloc+0xc>)
 8005d66:	4601      	mov	r1, r0
 8005d68:	6818      	ldr	r0, [r3, #0]
 8005d6a:	f7ff b9b1 	b.w	80050d0 <_malloc_r>
 8005d6e:	bf00      	nop
 8005d70:	200001d0 	.word	0x200001d0

08005d74 <fiprintf>:
 8005d74:	b40e      	push	{r1, r2, r3}
 8005d76:	b503      	push	{r0, r1, lr}
 8005d78:	4601      	mov	r1, r0
 8005d7a:	ab03      	add	r3, sp, #12
 8005d7c:	4805      	ldr	r0, [pc, #20]	; (8005d94 <fiprintf+0x20>)
 8005d7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d82:	6800      	ldr	r0, [r0, #0]
 8005d84:	9301      	str	r3, [sp, #4]
 8005d86:	f000 f837 	bl	8005df8 <_vfiprintf_r>
 8005d8a:	b002      	add	sp, #8
 8005d8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d90:	b003      	add	sp, #12
 8005d92:	4770      	bx	lr
 8005d94:	200001d0 	.word	0x200001d0

08005d98 <abort>:
 8005d98:	b508      	push	{r3, lr}
 8005d9a:	2006      	movs	r0, #6
 8005d9c:	f000 fb94 	bl	80064c8 <raise>
 8005da0:	2001      	movs	r0, #1
 8005da2:	f7fb fc17 	bl	80015d4 <_exit>

08005da6 <__sfputc_r>:
 8005da6:	6893      	ldr	r3, [r2, #8]
 8005da8:	3b01      	subs	r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	b410      	push	{r4}
 8005dae:	6093      	str	r3, [r2, #8]
 8005db0:	da08      	bge.n	8005dc4 <__sfputc_r+0x1e>
 8005db2:	6994      	ldr	r4, [r2, #24]
 8005db4:	42a3      	cmp	r3, r4
 8005db6:	db01      	blt.n	8005dbc <__sfputc_r+0x16>
 8005db8:	290a      	cmp	r1, #10
 8005dba:	d103      	bne.n	8005dc4 <__sfputc_r+0x1e>
 8005dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dc0:	f000 bac4 	b.w	800634c <__swbuf_r>
 8005dc4:	6813      	ldr	r3, [r2, #0]
 8005dc6:	1c58      	adds	r0, r3, #1
 8005dc8:	6010      	str	r0, [r2, #0]
 8005dca:	7019      	strb	r1, [r3, #0]
 8005dcc:	4608      	mov	r0, r1
 8005dce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <__sfputs_r>:
 8005dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd6:	4606      	mov	r6, r0
 8005dd8:	460f      	mov	r7, r1
 8005dda:	4614      	mov	r4, r2
 8005ddc:	18d5      	adds	r5, r2, r3
 8005dde:	42ac      	cmp	r4, r5
 8005de0:	d101      	bne.n	8005de6 <__sfputs_r+0x12>
 8005de2:	2000      	movs	r0, #0
 8005de4:	e007      	b.n	8005df6 <__sfputs_r+0x22>
 8005de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dea:	463a      	mov	r2, r7
 8005dec:	4630      	mov	r0, r6
 8005dee:	f7ff ffda 	bl	8005da6 <__sfputc_r>
 8005df2:	1c43      	adds	r3, r0, #1
 8005df4:	d1f3      	bne.n	8005dde <__sfputs_r+0xa>
 8005df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005df8 <_vfiprintf_r>:
 8005df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dfc:	460d      	mov	r5, r1
 8005dfe:	b09d      	sub	sp, #116	; 0x74
 8005e00:	4614      	mov	r4, r2
 8005e02:	4698      	mov	r8, r3
 8005e04:	4606      	mov	r6, r0
 8005e06:	b118      	cbz	r0, 8005e10 <_vfiprintf_r+0x18>
 8005e08:	6a03      	ldr	r3, [r0, #32]
 8005e0a:	b90b      	cbnz	r3, 8005e10 <_vfiprintf_r+0x18>
 8005e0c:	f7fe fc5c 	bl	80046c8 <__sinit>
 8005e10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e12:	07d9      	lsls	r1, r3, #31
 8005e14:	d405      	bmi.n	8005e22 <_vfiprintf_r+0x2a>
 8005e16:	89ab      	ldrh	r3, [r5, #12]
 8005e18:	059a      	lsls	r2, r3, #22
 8005e1a:	d402      	bmi.n	8005e22 <_vfiprintf_r+0x2a>
 8005e1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e1e:	f7fe fd78 	bl	8004912 <__retarget_lock_acquire_recursive>
 8005e22:	89ab      	ldrh	r3, [r5, #12]
 8005e24:	071b      	lsls	r3, r3, #28
 8005e26:	d501      	bpl.n	8005e2c <_vfiprintf_r+0x34>
 8005e28:	692b      	ldr	r3, [r5, #16]
 8005e2a:	b99b      	cbnz	r3, 8005e54 <_vfiprintf_r+0x5c>
 8005e2c:	4629      	mov	r1, r5
 8005e2e:	4630      	mov	r0, r6
 8005e30:	f000 faca 	bl	80063c8 <__swsetup_r>
 8005e34:	b170      	cbz	r0, 8005e54 <_vfiprintf_r+0x5c>
 8005e36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e38:	07dc      	lsls	r4, r3, #31
 8005e3a:	d504      	bpl.n	8005e46 <_vfiprintf_r+0x4e>
 8005e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e40:	b01d      	add	sp, #116	; 0x74
 8005e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e46:	89ab      	ldrh	r3, [r5, #12]
 8005e48:	0598      	lsls	r0, r3, #22
 8005e4a:	d4f7      	bmi.n	8005e3c <_vfiprintf_r+0x44>
 8005e4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e4e:	f7fe fd61 	bl	8004914 <__retarget_lock_release_recursive>
 8005e52:	e7f3      	b.n	8005e3c <_vfiprintf_r+0x44>
 8005e54:	2300      	movs	r3, #0
 8005e56:	9309      	str	r3, [sp, #36]	; 0x24
 8005e58:	2320      	movs	r3, #32
 8005e5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e62:	2330      	movs	r3, #48	; 0x30
 8005e64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006018 <_vfiprintf_r+0x220>
 8005e68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e6c:	f04f 0901 	mov.w	r9, #1
 8005e70:	4623      	mov	r3, r4
 8005e72:	469a      	mov	sl, r3
 8005e74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e78:	b10a      	cbz	r2, 8005e7e <_vfiprintf_r+0x86>
 8005e7a:	2a25      	cmp	r2, #37	; 0x25
 8005e7c:	d1f9      	bne.n	8005e72 <_vfiprintf_r+0x7a>
 8005e7e:	ebba 0b04 	subs.w	fp, sl, r4
 8005e82:	d00b      	beq.n	8005e9c <_vfiprintf_r+0xa4>
 8005e84:	465b      	mov	r3, fp
 8005e86:	4622      	mov	r2, r4
 8005e88:	4629      	mov	r1, r5
 8005e8a:	4630      	mov	r0, r6
 8005e8c:	f7ff ffa2 	bl	8005dd4 <__sfputs_r>
 8005e90:	3001      	adds	r0, #1
 8005e92:	f000 80a9 	beq.w	8005fe8 <_vfiprintf_r+0x1f0>
 8005e96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e98:	445a      	add	r2, fp
 8005e9a:	9209      	str	r2, [sp, #36]	; 0x24
 8005e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 80a1 	beq.w	8005fe8 <_vfiprintf_r+0x1f0>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005eac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005eb0:	f10a 0a01 	add.w	sl, sl, #1
 8005eb4:	9304      	str	r3, [sp, #16]
 8005eb6:	9307      	str	r3, [sp, #28]
 8005eb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ebc:	931a      	str	r3, [sp, #104]	; 0x68
 8005ebe:	4654      	mov	r4, sl
 8005ec0:	2205      	movs	r2, #5
 8005ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ec6:	4854      	ldr	r0, [pc, #336]	; (8006018 <_vfiprintf_r+0x220>)
 8005ec8:	f7fa f99a 	bl	8000200 <memchr>
 8005ecc:	9a04      	ldr	r2, [sp, #16]
 8005ece:	b9d8      	cbnz	r0, 8005f08 <_vfiprintf_r+0x110>
 8005ed0:	06d1      	lsls	r1, r2, #27
 8005ed2:	bf44      	itt	mi
 8005ed4:	2320      	movmi	r3, #32
 8005ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eda:	0713      	lsls	r3, r2, #28
 8005edc:	bf44      	itt	mi
 8005ede:	232b      	movmi	r3, #43	; 0x2b
 8005ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ee8:	2b2a      	cmp	r3, #42	; 0x2a
 8005eea:	d015      	beq.n	8005f18 <_vfiprintf_r+0x120>
 8005eec:	9a07      	ldr	r2, [sp, #28]
 8005eee:	4654      	mov	r4, sl
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	f04f 0c0a 	mov.w	ip, #10
 8005ef6:	4621      	mov	r1, r4
 8005ef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005efc:	3b30      	subs	r3, #48	; 0x30
 8005efe:	2b09      	cmp	r3, #9
 8005f00:	d94d      	bls.n	8005f9e <_vfiprintf_r+0x1a6>
 8005f02:	b1b0      	cbz	r0, 8005f32 <_vfiprintf_r+0x13a>
 8005f04:	9207      	str	r2, [sp, #28]
 8005f06:	e014      	b.n	8005f32 <_vfiprintf_r+0x13a>
 8005f08:	eba0 0308 	sub.w	r3, r0, r8
 8005f0c:	fa09 f303 	lsl.w	r3, r9, r3
 8005f10:	4313      	orrs	r3, r2
 8005f12:	9304      	str	r3, [sp, #16]
 8005f14:	46a2      	mov	sl, r4
 8005f16:	e7d2      	b.n	8005ebe <_vfiprintf_r+0xc6>
 8005f18:	9b03      	ldr	r3, [sp, #12]
 8005f1a:	1d19      	adds	r1, r3, #4
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	9103      	str	r1, [sp, #12]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	bfbb      	ittet	lt
 8005f24:	425b      	neglt	r3, r3
 8005f26:	f042 0202 	orrlt.w	r2, r2, #2
 8005f2a:	9307      	strge	r3, [sp, #28]
 8005f2c:	9307      	strlt	r3, [sp, #28]
 8005f2e:	bfb8      	it	lt
 8005f30:	9204      	strlt	r2, [sp, #16]
 8005f32:	7823      	ldrb	r3, [r4, #0]
 8005f34:	2b2e      	cmp	r3, #46	; 0x2e
 8005f36:	d10c      	bne.n	8005f52 <_vfiprintf_r+0x15a>
 8005f38:	7863      	ldrb	r3, [r4, #1]
 8005f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f3c:	d134      	bne.n	8005fa8 <_vfiprintf_r+0x1b0>
 8005f3e:	9b03      	ldr	r3, [sp, #12]
 8005f40:	1d1a      	adds	r2, r3, #4
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	9203      	str	r2, [sp, #12]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	bfb8      	it	lt
 8005f4a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005f4e:	3402      	adds	r4, #2
 8005f50:	9305      	str	r3, [sp, #20]
 8005f52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006028 <_vfiprintf_r+0x230>
 8005f56:	7821      	ldrb	r1, [r4, #0]
 8005f58:	2203      	movs	r2, #3
 8005f5a:	4650      	mov	r0, sl
 8005f5c:	f7fa f950 	bl	8000200 <memchr>
 8005f60:	b138      	cbz	r0, 8005f72 <_vfiprintf_r+0x17a>
 8005f62:	9b04      	ldr	r3, [sp, #16]
 8005f64:	eba0 000a 	sub.w	r0, r0, sl
 8005f68:	2240      	movs	r2, #64	; 0x40
 8005f6a:	4082      	lsls	r2, r0
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	3401      	adds	r4, #1
 8005f70:	9304      	str	r3, [sp, #16]
 8005f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f76:	4829      	ldr	r0, [pc, #164]	; (800601c <_vfiprintf_r+0x224>)
 8005f78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f7c:	2206      	movs	r2, #6
 8005f7e:	f7fa f93f 	bl	8000200 <memchr>
 8005f82:	2800      	cmp	r0, #0
 8005f84:	d03f      	beq.n	8006006 <_vfiprintf_r+0x20e>
 8005f86:	4b26      	ldr	r3, [pc, #152]	; (8006020 <_vfiprintf_r+0x228>)
 8005f88:	bb1b      	cbnz	r3, 8005fd2 <_vfiprintf_r+0x1da>
 8005f8a:	9b03      	ldr	r3, [sp, #12]
 8005f8c:	3307      	adds	r3, #7
 8005f8e:	f023 0307 	bic.w	r3, r3, #7
 8005f92:	3308      	adds	r3, #8
 8005f94:	9303      	str	r3, [sp, #12]
 8005f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f98:	443b      	add	r3, r7
 8005f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f9c:	e768      	b.n	8005e70 <_vfiprintf_r+0x78>
 8005f9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fa2:	460c      	mov	r4, r1
 8005fa4:	2001      	movs	r0, #1
 8005fa6:	e7a6      	b.n	8005ef6 <_vfiprintf_r+0xfe>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	3401      	adds	r4, #1
 8005fac:	9305      	str	r3, [sp, #20]
 8005fae:	4619      	mov	r1, r3
 8005fb0:	f04f 0c0a 	mov.w	ip, #10
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fba:	3a30      	subs	r2, #48	; 0x30
 8005fbc:	2a09      	cmp	r2, #9
 8005fbe:	d903      	bls.n	8005fc8 <_vfiprintf_r+0x1d0>
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0c6      	beq.n	8005f52 <_vfiprintf_r+0x15a>
 8005fc4:	9105      	str	r1, [sp, #20]
 8005fc6:	e7c4      	b.n	8005f52 <_vfiprintf_r+0x15a>
 8005fc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fcc:	4604      	mov	r4, r0
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e7f0      	b.n	8005fb4 <_vfiprintf_r+0x1bc>
 8005fd2:	ab03      	add	r3, sp, #12
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	462a      	mov	r2, r5
 8005fd8:	4b12      	ldr	r3, [pc, #72]	; (8006024 <_vfiprintf_r+0x22c>)
 8005fda:	a904      	add	r1, sp, #16
 8005fdc:	4630      	mov	r0, r6
 8005fde:	f3af 8000 	nop.w
 8005fe2:	4607      	mov	r7, r0
 8005fe4:	1c78      	adds	r0, r7, #1
 8005fe6:	d1d6      	bne.n	8005f96 <_vfiprintf_r+0x19e>
 8005fe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fea:	07d9      	lsls	r1, r3, #31
 8005fec:	d405      	bmi.n	8005ffa <_vfiprintf_r+0x202>
 8005fee:	89ab      	ldrh	r3, [r5, #12]
 8005ff0:	059a      	lsls	r2, r3, #22
 8005ff2:	d402      	bmi.n	8005ffa <_vfiprintf_r+0x202>
 8005ff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ff6:	f7fe fc8d 	bl	8004914 <__retarget_lock_release_recursive>
 8005ffa:	89ab      	ldrh	r3, [r5, #12]
 8005ffc:	065b      	lsls	r3, r3, #25
 8005ffe:	f53f af1d 	bmi.w	8005e3c <_vfiprintf_r+0x44>
 8006002:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006004:	e71c      	b.n	8005e40 <_vfiprintf_r+0x48>
 8006006:	ab03      	add	r3, sp, #12
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	462a      	mov	r2, r5
 800600c:	4b05      	ldr	r3, [pc, #20]	; (8006024 <_vfiprintf_r+0x22c>)
 800600e:	a904      	add	r1, sp, #16
 8006010:	4630      	mov	r0, r6
 8006012:	f000 f879 	bl	8006108 <_printf_i>
 8006016:	e7e4      	b.n	8005fe2 <_vfiprintf_r+0x1ea>
 8006018:	080069d0 	.word	0x080069d0
 800601c:	080069da 	.word	0x080069da
 8006020:	00000000 	.word	0x00000000
 8006024:	08005dd5 	.word	0x08005dd5
 8006028:	080069d6 	.word	0x080069d6

0800602c <_printf_common>:
 800602c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006030:	4616      	mov	r6, r2
 8006032:	4699      	mov	r9, r3
 8006034:	688a      	ldr	r2, [r1, #8]
 8006036:	690b      	ldr	r3, [r1, #16]
 8006038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800603c:	4293      	cmp	r3, r2
 800603e:	bfb8      	it	lt
 8006040:	4613      	movlt	r3, r2
 8006042:	6033      	str	r3, [r6, #0]
 8006044:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006048:	4607      	mov	r7, r0
 800604a:	460c      	mov	r4, r1
 800604c:	b10a      	cbz	r2, 8006052 <_printf_common+0x26>
 800604e:	3301      	adds	r3, #1
 8006050:	6033      	str	r3, [r6, #0]
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	0699      	lsls	r1, r3, #26
 8006056:	bf42      	ittt	mi
 8006058:	6833      	ldrmi	r3, [r6, #0]
 800605a:	3302      	addmi	r3, #2
 800605c:	6033      	strmi	r3, [r6, #0]
 800605e:	6825      	ldr	r5, [r4, #0]
 8006060:	f015 0506 	ands.w	r5, r5, #6
 8006064:	d106      	bne.n	8006074 <_printf_common+0x48>
 8006066:	f104 0a19 	add.w	sl, r4, #25
 800606a:	68e3      	ldr	r3, [r4, #12]
 800606c:	6832      	ldr	r2, [r6, #0]
 800606e:	1a9b      	subs	r3, r3, r2
 8006070:	42ab      	cmp	r3, r5
 8006072:	dc26      	bgt.n	80060c2 <_printf_common+0x96>
 8006074:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006078:	1e13      	subs	r3, r2, #0
 800607a:	6822      	ldr	r2, [r4, #0]
 800607c:	bf18      	it	ne
 800607e:	2301      	movne	r3, #1
 8006080:	0692      	lsls	r2, r2, #26
 8006082:	d42b      	bmi.n	80060dc <_printf_common+0xb0>
 8006084:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006088:	4649      	mov	r1, r9
 800608a:	4638      	mov	r0, r7
 800608c:	47c0      	blx	r8
 800608e:	3001      	adds	r0, #1
 8006090:	d01e      	beq.n	80060d0 <_printf_common+0xa4>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	6922      	ldr	r2, [r4, #16]
 8006096:	f003 0306 	and.w	r3, r3, #6
 800609a:	2b04      	cmp	r3, #4
 800609c:	bf02      	ittt	eq
 800609e:	68e5      	ldreq	r5, [r4, #12]
 80060a0:	6833      	ldreq	r3, [r6, #0]
 80060a2:	1aed      	subeq	r5, r5, r3
 80060a4:	68a3      	ldr	r3, [r4, #8]
 80060a6:	bf0c      	ite	eq
 80060a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060ac:	2500      	movne	r5, #0
 80060ae:	4293      	cmp	r3, r2
 80060b0:	bfc4      	itt	gt
 80060b2:	1a9b      	subgt	r3, r3, r2
 80060b4:	18ed      	addgt	r5, r5, r3
 80060b6:	2600      	movs	r6, #0
 80060b8:	341a      	adds	r4, #26
 80060ba:	42b5      	cmp	r5, r6
 80060bc:	d11a      	bne.n	80060f4 <_printf_common+0xc8>
 80060be:	2000      	movs	r0, #0
 80060c0:	e008      	b.n	80060d4 <_printf_common+0xa8>
 80060c2:	2301      	movs	r3, #1
 80060c4:	4652      	mov	r2, sl
 80060c6:	4649      	mov	r1, r9
 80060c8:	4638      	mov	r0, r7
 80060ca:	47c0      	blx	r8
 80060cc:	3001      	adds	r0, #1
 80060ce:	d103      	bne.n	80060d8 <_printf_common+0xac>
 80060d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d8:	3501      	adds	r5, #1
 80060da:	e7c6      	b.n	800606a <_printf_common+0x3e>
 80060dc:	18e1      	adds	r1, r4, r3
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	2030      	movs	r0, #48	; 0x30
 80060e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060e6:	4422      	add	r2, r4
 80060e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060f0:	3302      	adds	r3, #2
 80060f2:	e7c7      	b.n	8006084 <_printf_common+0x58>
 80060f4:	2301      	movs	r3, #1
 80060f6:	4622      	mov	r2, r4
 80060f8:	4649      	mov	r1, r9
 80060fa:	4638      	mov	r0, r7
 80060fc:	47c0      	blx	r8
 80060fe:	3001      	adds	r0, #1
 8006100:	d0e6      	beq.n	80060d0 <_printf_common+0xa4>
 8006102:	3601      	adds	r6, #1
 8006104:	e7d9      	b.n	80060ba <_printf_common+0x8e>
	...

08006108 <_printf_i>:
 8006108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800610c:	7e0f      	ldrb	r7, [r1, #24]
 800610e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006110:	2f78      	cmp	r7, #120	; 0x78
 8006112:	4691      	mov	r9, r2
 8006114:	4680      	mov	r8, r0
 8006116:	460c      	mov	r4, r1
 8006118:	469a      	mov	sl, r3
 800611a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800611e:	d807      	bhi.n	8006130 <_printf_i+0x28>
 8006120:	2f62      	cmp	r7, #98	; 0x62
 8006122:	d80a      	bhi.n	800613a <_printf_i+0x32>
 8006124:	2f00      	cmp	r7, #0
 8006126:	f000 80d4 	beq.w	80062d2 <_printf_i+0x1ca>
 800612a:	2f58      	cmp	r7, #88	; 0x58
 800612c:	f000 80c0 	beq.w	80062b0 <_printf_i+0x1a8>
 8006130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006138:	e03a      	b.n	80061b0 <_printf_i+0xa8>
 800613a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800613e:	2b15      	cmp	r3, #21
 8006140:	d8f6      	bhi.n	8006130 <_printf_i+0x28>
 8006142:	a101      	add	r1, pc, #4	; (adr r1, 8006148 <_printf_i+0x40>)
 8006144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006148:	080061a1 	.word	0x080061a1
 800614c:	080061b5 	.word	0x080061b5
 8006150:	08006131 	.word	0x08006131
 8006154:	08006131 	.word	0x08006131
 8006158:	08006131 	.word	0x08006131
 800615c:	08006131 	.word	0x08006131
 8006160:	080061b5 	.word	0x080061b5
 8006164:	08006131 	.word	0x08006131
 8006168:	08006131 	.word	0x08006131
 800616c:	08006131 	.word	0x08006131
 8006170:	08006131 	.word	0x08006131
 8006174:	080062b9 	.word	0x080062b9
 8006178:	080061e1 	.word	0x080061e1
 800617c:	08006273 	.word	0x08006273
 8006180:	08006131 	.word	0x08006131
 8006184:	08006131 	.word	0x08006131
 8006188:	080062db 	.word	0x080062db
 800618c:	08006131 	.word	0x08006131
 8006190:	080061e1 	.word	0x080061e1
 8006194:	08006131 	.word	0x08006131
 8006198:	08006131 	.word	0x08006131
 800619c:	0800627b 	.word	0x0800627b
 80061a0:	682b      	ldr	r3, [r5, #0]
 80061a2:	1d1a      	adds	r2, r3, #4
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	602a      	str	r2, [r5, #0]
 80061a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061b0:	2301      	movs	r3, #1
 80061b2:	e09f      	b.n	80062f4 <_printf_i+0x1ec>
 80061b4:	6820      	ldr	r0, [r4, #0]
 80061b6:	682b      	ldr	r3, [r5, #0]
 80061b8:	0607      	lsls	r7, r0, #24
 80061ba:	f103 0104 	add.w	r1, r3, #4
 80061be:	6029      	str	r1, [r5, #0]
 80061c0:	d501      	bpl.n	80061c6 <_printf_i+0xbe>
 80061c2:	681e      	ldr	r6, [r3, #0]
 80061c4:	e003      	b.n	80061ce <_printf_i+0xc6>
 80061c6:	0646      	lsls	r6, r0, #25
 80061c8:	d5fb      	bpl.n	80061c2 <_printf_i+0xba>
 80061ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80061ce:	2e00      	cmp	r6, #0
 80061d0:	da03      	bge.n	80061da <_printf_i+0xd2>
 80061d2:	232d      	movs	r3, #45	; 0x2d
 80061d4:	4276      	negs	r6, r6
 80061d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061da:	485a      	ldr	r0, [pc, #360]	; (8006344 <_printf_i+0x23c>)
 80061dc:	230a      	movs	r3, #10
 80061de:	e012      	b.n	8006206 <_printf_i+0xfe>
 80061e0:	682b      	ldr	r3, [r5, #0]
 80061e2:	6820      	ldr	r0, [r4, #0]
 80061e4:	1d19      	adds	r1, r3, #4
 80061e6:	6029      	str	r1, [r5, #0]
 80061e8:	0605      	lsls	r5, r0, #24
 80061ea:	d501      	bpl.n	80061f0 <_printf_i+0xe8>
 80061ec:	681e      	ldr	r6, [r3, #0]
 80061ee:	e002      	b.n	80061f6 <_printf_i+0xee>
 80061f0:	0641      	lsls	r1, r0, #25
 80061f2:	d5fb      	bpl.n	80061ec <_printf_i+0xe4>
 80061f4:	881e      	ldrh	r6, [r3, #0]
 80061f6:	4853      	ldr	r0, [pc, #332]	; (8006344 <_printf_i+0x23c>)
 80061f8:	2f6f      	cmp	r7, #111	; 0x6f
 80061fa:	bf0c      	ite	eq
 80061fc:	2308      	moveq	r3, #8
 80061fe:	230a      	movne	r3, #10
 8006200:	2100      	movs	r1, #0
 8006202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006206:	6865      	ldr	r5, [r4, #4]
 8006208:	60a5      	str	r5, [r4, #8]
 800620a:	2d00      	cmp	r5, #0
 800620c:	bfa2      	ittt	ge
 800620e:	6821      	ldrge	r1, [r4, #0]
 8006210:	f021 0104 	bicge.w	r1, r1, #4
 8006214:	6021      	strge	r1, [r4, #0]
 8006216:	b90e      	cbnz	r6, 800621c <_printf_i+0x114>
 8006218:	2d00      	cmp	r5, #0
 800621a:	d04b      	beq.n	80062b4 <_printf_i+0x1ac>
 800621c:	4615      	mov	r5, r2
 800621e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006222:	fb03 6711 	mls	r7, r3, r1, r6
 8006226:	5dc7      	ldrb	r7, [r0, r7]
 8006228:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800622c:	4637      	mov	r7, r6
 800622e:	42bb      	cmp	r3, r7
 8006230:	460e      	mov	r6, r1
 8006232:	d9f4      	bls.n	800621e <_printf_i+0x116>
 8006234:	2b08      	cmp	r3, #8
 8006236:	d10b      	bne.n	8006250 <_printf_i+0x148>
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	07de      	lsls	r6, r3, #31
 800623c:	d508      	bpl.n	8006250 <_printf_i+0x148>
 800623e:	6923      	ldr	r3, [r4, #16]
 8006240:	6861      	ldr	r1, [r4, #4]
 8006242:	4299      	cmp	r1, r3
 8006244:	bfde      	ittt	le
 8006246:	2330      	movle	r3, #48	; 0x30
 8006248:	f805 3c01 	strble.w	r3, [r5, #-1]
 800624c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006250:	1b52      	subs	r2, r2, r5
 8006252:	6122      	str	r2, [r4, #16]
 8006254:	f8cd a000 	str.w	sl, [sp]
 8006258:	464b      	mov	r3, r9
 800625a:	aa03      	add	r2, sp, #12
 800625c:	4621      	mov	r1, r4
 800625e:	4640      	mov	r0, r8
 8006260:	f7ff fee4 	bl	800602c <_printf_common>
 8006264:	3001      	adds	r0, #1
 8006266:	d14a      	bne.n	80062fe <_printf_i+0x1f6>
 8006268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800626c:	b004      	add	sp, #16
 800626e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	f043 0320 	orr.w	r3, r3, #32
 8006278:	6023      	str	r3, [r4, #0]
 800627a:	4833      	ldr	r0, [pc, #204]	; (8006348 <_printf_i+0x240>)
 800627c:	2778      	movs	r7, #120	; 0x78
 800627e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	6829      	ldr	r1, [r5, #0]
 8006286:	061f      	lsls	r7, r3, #24
 8006288:	f851 6b04 	ldr.w	r6, [r1], #4
 800628c:	d402      	bmi.n	8006294 <_printf_i+0x18c>
 800628e:	065f      	lsls	r7, r3, #25
 8006290:	bf48      	it	mi
 8006292:	b2b6      	uxthmi	r6, r6
 8006294:	07df      	lsls	r7, r3, #31
 8006296:	bf48      	it	mi
 8006298:	f043 0320 	orrmi.w	r3, r3, #32
 800629c:	6029      	str	r1, [r5, #0]
 800629e:	bf48      	it	mi
 80062a0:	6023      	strmi	r3, [r4, #0]
 80062a2:	b91e      	cbnz	r6, 80062ac <_printf_i+0x1a4>
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	f023 0320 	bic.w	r3, r3, #32
 80062aa:	6023      	str	r3, [r4, #0]
 80062ac:	2310      	movs	r3, #16
 80062ae:	e7a7      	b.n	8006200 <_printf_i+0xf8>
 80062b0:	4824      	ldr	r0, [pc, #144]	; (8006344 <_printf_i+0x23c>)
 80062b2:	e7e4      	b.n	800627e <_printf_i+0x176>
 80062b4:	4615      	mov	r5, r2
 80062b6:	e7bd      	b.n	8006234 <_printf_i+0x12c>
 80062b8:	682b      	ldr	r3, [r5, #0]
 80062ba:	6826      	ldr	r6, [r4, #0]
 80062bc:	6961      	ldr	r1, [r4, #20]
 80062be:	1d18      	adds	r0, r3, #4
 80062c0:	6028      	str	r0, [r5, #0]
 80062c2:	0635      	lsls	r5, r6, #24
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	d501      	bpl.n	80062cc <_printf_i+0x1c4>
 80062c8:	6019      	str	r1, [r3, #0]
 80062ca:	e002      	b.n	80062d2 <_printf_i+0x1ca>
 80062cc:	0670      	lsls	r0, r6, #25
 80062ce:	d5fb      	bpl.n	80062c8 <_printf_i+0x1c0>
 80062d0:	8019      	strh	r1, [r3, #0]
 80062d2:	2300      	movs	r3, #0
 80062d4:	6123      	str	r3, [r4, #16]
 80062d6:	4615      	mov	r5, r2
 80062d8:	e7bc      	b.n	8006254 <_printf_i+0x14c>
 80062da:	682b      	ldr	r3, [r5, #0]
 80062dc:	1d1a      	adds	r2, r3, #4
 80062de:	602a      	str	r2, [r5, #0]
 80062e0:	681d      	ldr	r5, [r3, #0]
 80062e2:	6862      	ldr	r2, [r4, #4]
 80062e4:	2100      	movs	r1, #0
 80062e6:	4628      	mov	r0, r5
 80062e8:	f7f9 ff8a 	bl	8000200 <memchr>
 80062ec:	b108      	cbz	r0, 80062f2 <_printf_i+0x1ea>
 80062ee:	1b40      	subs	r0, r0, r5
 80062f0:	6060      	str	r0, [r4, #4]
 80062f2:	6863      	ldr	r3, [r4, #4]
 80062f4:	6123      	str	r3, [r4, #16]
 80062f6:	2300      	movs	r3, #0
 80062f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062fc:	e7aa      	b.n	8006254 <_printf_i+0x14c>
 80062fe:	6923      	ldr	r3, [r4, #16]
 8006300:	462a      	mov	r2, r5
 8006302:	4649      	mov	r1, r9
 8006304:	4640      	mov	r0, r8
 8006306:	47d0      	blx	sl
 8006308:	3001      	adds	r0, #1
 800630a:	d0ad      	beq.n	8006268 <_printf_i+0x160>
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	079b      	lsls	r3, r3, #30
 8006310:	d413      	bmi.n	800633a <_printf_i+0x232>
 8006312:	68e0      	ldr	r0, [r4, #12]
 8006314:	9b03      	ldr	r3, [sp, #12]
 8006316:	4298      	cmp	r0, r3
 8006318:	bfb8      	it	lt
 800631a:	4618      	movlt	r0, r3
 800631c:	e7a6      	b.n	800626c <_printf_i+0x164>
 800631e:	2301      	movs	r3, #1
 8006320:	4632      	mov	r2, r6
 8006322:	4649      	mov	r1, r9
 8006324:	4640      	mov	r0, r8
 8006326:	47d0      	blx	sl
 8006328:	3001      	adds	r0, #1
 800632a:	d09d      	beq.n	8006268 <_printf_i+0x160>
 800632c:	3501      	adds	r5, #1
 800632e:	68e3      	ldr	r3, [r4, #12]
 8006330:	9903      	ldr	r1, [sp, #12]
 8006332:	1a5b      	subs	r3, r3, r1
 8006334:	42ab      	cmp	r3, r5
 8006336:	dcf2      	bgt.n	800631e <_printf_i+0x216>
 8006338:	e7eb      	b.n	8006312 <_printf_i+0x20a>
 800633a:	2500      	movs	r5, #0
 800633c:	f104 0619 	add.w	r6, r4, #25
 8006340:	e7f5      	b.n	800632e <_printf_i+0x226>
 8006342:	bf00      	nop
 8006344:	080069e1 	.word	0x080069e1
 8006348:	080069f2 	.word	0x080069f2

0800634c <__swbuf_r>:
 800634c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800634e:	460e      	mov	r6, r1
 8006350:	4614      	mov	r4, r2
 8006352:	4605      	mov	r5, r0
 8006354:	b118      	cbz	r0, 800635e <__swbuf_r+0x12>
 8006356:	6a03      	ldr	r3, [r0, #32]
 8006358:	b90b      	cbnz	r3, 800635e <__swbuf_r+0x12>
 800635a:	f7fe f9b5 	bl	80046c8 <__sinit>
 800635e:	69a3      	ldr	r3, [r4, #24]
 8006360:	60a3      	str	r3, [r4, #8]
 8006362:	89a3      	ldrh	r3, [r4, #12]
 8006364:	071a      	lsls	r2, r3, #28
 8006366:	d525      	bpl.n	80063b4 <__swbuf_r+0x68>
 8006368:	6923      	ldr	r3, [r4, #16]
 800636a:	b31b      	cbz	r3, 80063b4 <__swbuf_r+0x68>
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	6922      	ldr	r2, [r4, #16]
 8006370:	1a98      	subs	r0, r3, r2
 8006372:	6963      	ldr	r3, [r4, #20]
 8006374:	b2f6      	uxtb	r6, r6
 8006376:	4283      	cmp	r3, r0
 8006378:	4637      	mov	r7, r6
 800637a:	dc04      	bgt.n	8006386 <__swbuf_r+0x3a>
 800637c:	4621      	mov	r1, r4
 800637e:	4628      	mov	r0, r5
 8006380:	f7ff fc84 	bl	8005c8c <_fflush_r>
 8006384:	b9e0      	cbnz	r0, 80063c0 <__swbuf_r+0x74>
 8006386:	68a3      	ldr	r3, [r4, #8]
 8006388:	3b01      	subs	r3, #1
 800638a:	60a3      	str	r3, [r4, #8]
 800638c:	6823      	ldr	r3, [r4, #0]
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	6022      	str	r2, [r4, #0]
 8006392:	701e      	strb	r6, [r3, #0]
 8006394:	6962      	ldr	r2, [r4, #20]
 8006396:	1c43      	adds	r3, r0, #1
 8006398:	429a      	cmp	r2, r3
 800639a:	d004      	beq.n	80063a6 <__swbuf_r+0x5a>
 800639c:	89a3      	ldrh	r3, [r4, #12]
 800639e:	07db      	lsls	r3, r3, #31
 80063a0:	d506      	bpl.n	80063b0 <__swbuf_r+0x64>
 80063a2:	2e0a      	cmp	r6, #10
 80063a4:	d104      	bne.n	80063b0 <__swbuf_r+0x64>
 80063a6:	4621      	mov	r1, r4
 80063a8:	4628      	mov	r0, r5
 80063aa:	f7ff fc6f 	bl	8005c8c <_fflush_r>
 80063ae:	b938      	cbnz	r0, 80063c0 <__swbuf_r+0x74>
 80063b0:	4638      	mov	r0, r7
 80063b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063b4:	4621      	mov	r1, r4
 80063b6:	4628      	mov	r0, r5
 80063b8:	f000 f806 	bl	80063c8 <__swsetup_r>
 80063bc:	2800      	cmp	r0, #0
 80063be:	d0d5      	beq.n	800636c <__swbuf_r+0x20>
 80063c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80063c4:	e7f4      	b.n	80063b0 <__swbuf_r+0x64>
	...

080063c8 <__swsetup_r>:
 80063c8:	b538      	push	{r3, r4, r5, lr}
 80063ca:	4b2a      	ldr	r3, [pc, #168]	; (8006474 <__swsetup_r+0xac>)
 80063cc:	4605      	mov	r5, r0
 80063ce:	6818      	ldr	r0, [r3, #0]
 80063d0:	460c      	mov	r4, r1
 80063d2:	b118      	cbz	r0, 80063dc <__swsetup_r+0x14>
 80063d4:	6a03      	ldr	r3, [r0, #32]
 80063d6:	b90b      	cbnz	r3, 80063dc <__swsetup_r+0x14>
 80063d8:	f7fe f976 	bl	80046c8 <__sinit>
 80063dc:	89a3      	ldrh	r3, [r4, #12]
 80063de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063e2:	0718      	lsls	r0, r3, #28
 80063e4:	d422      	bmi.n	800642c <__swsetup_r+0x64>
 80063e6:	06d9      	lsls	r1, r3, #27
 80063e8:	d407      	bmi.n	80063fa <__swsetup_r+0x32>
 80063ea:	2309      	movs	r3, #9
 80063ec:	602b      	str	r3, [r5, #0]
 80063ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063f2:	81a3      	strh	r3, [r4, #12]
 80063f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063f8:	e034      	b.n	8006464 <__swsetup_r+0x9c>
 80063fa:	0758      	lsls	r0, r3, #29
 80063fc:	d512      	bpl.n	8006424 <__swsetup_r+0x5c>
 80063fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006400:	b141      	cbz	r1, 8006414 <__swsetup_r+0x4c>
 8006402:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006406:	4299      	cmp	r1, r3
 8006408:	d002      	beq.n	8006410 <__swsetup_r+0x48>
 800640a:	4628      	mov	r0, r5
 800640c:	f7fe fa9c 	bl	8004948 <_free_r>
 8006410:	2300      	movs	r3, #0
 8006412:	6363      	str	r3, [r4, #52]	; 0x34
 8006414:	89a3      	ldrh	r3, [r4, #12]
 8006416:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800641a:	81a3      	strh	r3, [r4, #12]
 800641c:	2300      	movs	r3, #0
 800641e:	6063      	str	r3, [r4, #4]
 8006420:	6923      	ldr	r3, [r4, #16]
 8006422:	6023      	str	r3, [r4, #0]
 8006424:	89a3      	ldrh	r3, [r4, #12]
 8006426:	f043 0308 	orr.w	r3, r3, #8
 800642a:	81a3      	strh	r3, [r4, #12]
 800642c:	6923      	ldr	r3, [r4, #16]
 800642e:	b94b      	cbnz	r3, 8006444 <__swsetup_r+0x7c>
 8006430:	89a3      	ldrh	r3, [r4, #12]
 8006432:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800643a:	d003      	beq.n	8006444 <__swsetup_r+0x7c>
 800643c:	4621      	mov	r1, r4
 800643e:	4628      	mov	r0, r5
 8006440:	f000 f884 	bl	800654c <__smakebuf_r>
 8006444:	89a0      	ldrh	r0, [r4, #12]
 8006446:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800644a:	f010 0301 	ands.w	r3, r0, #1
 800644e:	d00a      	beq.n	8006466 <__swsetup_r+0x9e>
 8006450:	2300      	movs	r3, #0
 8006452:	60a3      	str	r3, [r4, #8]
 8006454:	6963      	ldr	r3, [r4, #20]
 8006456:	425b      	negs	r3, r3
 8006458:	61a3      	str	r3, [r4, #24]
 800645a:	6923      	ldr	r3, [r4, #16]
 800645c:	b943      	cbnz	r3, 8006470 <__swsetup_r+0xa8>
 800645e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006462:	d1c4      	bne.n	80063ee <__swsetup_r+0x26>
 8006464:	bd38      	pop	{r3, r4, r5, pc}
 8006466:	0781      	lsls	r1, r0, #30
 8006468:	bf58      	it	pl
 800646a:	6963      	ldrpl	r3, [r4, #20]
 800646c:	60a3      	str	r3, [r4, #8]
 800646e:	e7f4      	b.n	800645a <__swsetup_r+0x92>
 8006470:	2000      	movs	r0, #0
 8006472:	e7f7      	b.n	8006464 <__swsetup_r+0x9c>
 8006474:	200001d0 	.word	0x200001d0

08006478 <_raise_r>:
 8006478:	291f      	cmp	r1, #31
 800647a:	b538      	push	{r3, r4, r5, lr}
 800647c:	4604      	mov	r4, r0
 800647e:	460d      	mov	r5, r1
 8006480:	d904      	bls.n	800648c <_raise_r+0x14>
 8006482:	2316      	movs	r3, #22
 8006484:	6003      	str	r3, [r0, #0]
 8006486:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800648a:	bd38      	pop	{r3, r4, r5, pc}
 800648c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800648e:	b112      	cbz	r2, 8006496 <_raise_r+0x1e>
 8006490:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006494:	b94b      	cbnz	r3, 80064aa <_raise_r+0x32>
 8006496:	4620      	mov	r0, r4
 8006498:	f000 f830 	bl	80064fc <_getpid_r>
 800649c:	462a      	mov	r2, r5
 800649e:	4601      	mov	r1, r0
 80064a0:	4620      	mov	r0, r4
 80064a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064a6:	f000 b817 	b.w	80064d8 <_kill_r>
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d00a      	beq.n	80064c4 <_raise_r+0x4c>
 80064ae:	1c59      	adds	r1, r3, #1
 80064b0:	d103      	bne.n	80064ba <_raise_r+0x42>
 80064b2:	2316      	movs	r3, #22
 80064b4:	6003      	str	r3, [r0, #0]
 80064b6:	2001      	movs	r0, #1
 80064b8:	e7e7      	b.n	800648a <_raise_r+0x12>
 80064ba:	2400      	movs	r4, #0
 80064bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80064c0:	4628      	mov	r0, r5
 80064c2:	4798      	blx	r3
 80064c4:	2000      	movs	r0, #0
 80064c6:	e7e0      	b.n	800648a <_raise_r+0x12>

080064c8 <raise>:
 80064c8:	4b02      	ldr	r3, [pc, #8]	; (80064d4 <raise+0xc>)
 80064ca:	4601      	mov	r1, r0
 80064cc:	6818      	ldr	r0, [r3, #0]
 80064ce:	f7ff bfd3 	b.w	8006478 <_raise_r>
 80064d2:	bf00      	nop
 80064d4:	200001d0 	.word	0x200001d0

080064d8 <_kill_r>:
 80064d8:	b538      	push	{r3, r4, r5, lr}
 80064da:	4d07      	ldr	r5, [pc, #28]	; (80064f8 <_kill_r+0x20>)
 80064dc:	2300      	movs	r3, #0
 80064de:	4604      	mov	r4, r0
 80064e0:	4608      	mov	r0, r1
 80064e2:	4611      	mov	r1, r2
 80064e4:	602b      	str	r3, [r5, #0]
 80064e6:	f7fb f865 	bl	80015b4 <_kill>
 80064ea:	1c43      	adds	r3, r0, #1
 80064ec:	d102      	bne.n	80064f4 <_kill_r+0x1c>
 80064ee:	682b      	ldr	r3, [r5, #0]
 80064f0:	b103      	cbz	r3, 80064f4 <_kill_r+0x1c>
 80064f2:	6023      	str	r3, [r4, #0]
 80064f4:	bd38      	pop	{r3, r4, r5, pc}
 80064f6:	bf00      	nop
 80064f8:	200003fc 	.word	0x200003fc

080064fc <_getpid_r>:
 80064fc:	f7fb b852 	b.w	80015a4 <_getpid>

08006500 <__swhatbuf_r>:
 8006500:	b570      	push	{r4, r5, r6, lr}
 8006502:	460c      	mov	r4, r1
 8006504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006508:	2900      	cmp	r1, #0
 800650a:	b096      	sub	sp, #88	; 0x58
 800650c:	4615      	mov	r5, r2
 800650e:	461e      	mov	r6, r3
 8006510:	da0d      	bge.n	800652e <__swhatbuf_r+0x2e>
 8006512:	89a3      	ldrh	r3, [r4, #12]
 8006514:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006518:	f04f 0100 	mov.w	r1, #0
 800651c:	bf0c      	ite	eq
 800651e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006522:	2340      	movne	r3, #64	; 0x40
 8006524:	2000      	movs	r0, #0
 8006526:	6031      	str	r1, [r6, #0]
 8006528:	602b      	str	r3, [r5, #0]
 800652a:	b016      	add	sp, #88	; 0x58
 800652c:	bd70      	pop	{r4, r5, r6, pc}
 800652e:	466a      	mov	r2, sp
 8006530:	f000 f848 	bl	80065c4 <_fstat_r>
 8006534:	2800      	cmp	r0, #0
 8006536:	dbec      	blt.n	8006512 <__swhatbuf_r+0x12>
 8006538:	9901      	ldr	r1, [sp, #4]
 800653a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800653e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006542:	4259      	negs	r1, r3
 8006544:	4159      	adcs	r1, r3
 8006546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800654a:	e7eb      	b.n	8006524 <__swhatbuf_r+0x24>

0800654c <__smakebuf_r>:
 800654c:	898b      	ldrh	r3, [r1, #12]
 800654e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006550:	079d      	lsls	r5, r3, #30
 8006552:	4606      	mov	r6, r0
 8006554:	460c      	mov	r4, r1
 8006556:	d507      	bpl.n	8006568 <__smakebuf_r+0x1c>
 8006558:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800655c:	6023      	str	r3, [r4, #0]
 800655e:	6123      	str	r3, [r4, #16]
 8006560:	2301      	movs	r3, #1
 8006562:	6163      	str	r3, [r4, #20]
 8006564:	b002      	add	sp, #8
 8006566:	bd70      	pop	{r4, r5, r6, pc}
 8006568:	ab01      	add	r3, sp, #4
 800656a:	466a      	mov	r2, sp
 800656c:	f7ff ffc8 	bl	8006500 <__swhatbuf_r>
 8006570:	9900      	ldr	r1, [sp, #0]
 8006572:	4605      	mov	r5, r0
 8006574:	4630      	mov	r0, r6
 8006576:	f7fe fdab 	bl	80050d0 <_malloc_r>
 800657a:	b948      	cbnz	r0, 8006590 <__smakebuf_r+0x44>
 800657c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006580:	059a      	lsls	r2, r3, #22
 8006582:	d4ef      	bmi.n	8006564 <__smakebuf_r+0x18>
 8006584:	f023 0303 	bic.w	r3, r3, #3
 8006588:	f043 0302 	orr.w	r3, r3, #2
 800658c:	81a3      	strh	r3, [r4, #12]
 800658e:	e7e3      	b.n	8006558 <__smakebuf_r+0xc>
 8006590:	89a3      	ldrh	r3, [r4, #12]
 8006592:	6020      	str	r0, [r4, #0]
 8006594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006598:	81a3      	strh	r3, [r4, #12]
 800659a:	9b00      	ldr	r3, [sp, #0]
 800659c:	6163      	str	r3, [r4, #20]
 800659e:	9b01      	ldr	r3, [sp, #4]
 80065a0:	6120      	str	r0, [r4, #16]
 80065a2:	b15b      	cbz	r3, 80065bc <__smakebuf_r+0x70>
 80065a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065a8:	4630      	mov	r0, r6
 80065aa:	f000 f81d 	bl	80065e8 <_isatty_r>
 80065ae:	b128      	cbz	r0, 80065bc <__smakebuf_r+0x70>
 80065b0:	89a3      	ldrh	r3, [r4, #12]
 80065b2:	f023 0303 	bic.w	r3, r3, #3
 80065b6:	f043 0301 	orr.w	r3, r3, #1
 80065ba:	81a3      	strh	r3, [r4, #12]
 80065bc:	89a3      	ldrh	r3, [r4, #12]
 80065be:	431d      	orrs	r5, r3
 80065c0:	81a5      	strh	r5, [r4, #12]
 80065c2:	e7cf      	b.n	8006564 <__smakebuf_r+0x18>

080065c4 <_fstat_r>:
 80065c4:	b538      	push	{r3, r4, r5, lr}
 80065c6:	4d07      	ldr	r5, [pc, #28]	; (80065e4 <_fstat_r+0x20>)
 80065c8:	2300      	movs	r3, #0
 80065ca:	4604      	mov	r4, r0
 80065cc:	4608      	mov	r0, r1
 80065ce:	4611      	mov	r1, r2
 80065d0:	602b      	str	r3, [r5, #0]
 80065d2:	f7fb f84e 	bl	8001672 <_fstat>
 80065d6:	1c43      	adds	r3, r0, #1
 80065d8:	d102      	bne.n	80065e0 <_fstat_r+0x1c>
 80065da:	682b      	ldr	r3, [r5, #0]
 80065dc:	b103      	cbz	r3, 80065e0 <_fstat_r+0x1c>
 80065de:	6023      	str	r3, [r4, #0]
 80065e0:	bd38      	pop	{r3, r4, r5, pc}
 80065e2:	bf00      	nop
 80065e4:	200003fc 	.word	0x200003fc

080065e8 <_isatty_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	4d06      	ldr	r5, [pc, #24]	; (8006604 <_isatty_r+0x1c>)
 80065ec:	2300      	movs	r3, #0
 80065ee:	4604      	mov	r4, r0
 80065f0:	4608      	mov	r0, r1
 80065f2:	602b      	str	r3, [r5, #0]
 80065f4:	f7fb f84d 	bl	8001692 <_isatty>
 80065f8:	1c43      	adds	r3, r0, #1
 80065fa:	d102      	bne.n	8006602 <_isatty_r+0x1a>
 80065fc:	682b      	ldr	r3, [r5, #0]
 80065fe:	b103      	cbz	r3, 8006602 <_isatty_r+0x1a>
 8006600:	6023      	str	r3, [r4, #0]
 8006602:	bd38      	pop	{r3, r4, r5, pc}
 8006604:	200003fc 	.word	0x200003fc

08006608 <_init>:
 8006608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660a:	bf00      	nop
 800660c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800660e:	bc08      	pop	{r3}
 8006610:	469e      	mov	lr, r3
 8006612:	4770      	bx	lr

08006614 <_fini>:
 8006614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006616:	bf00      	nop
 8006618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800661a:	bc08      	pop	{r3}
 800661c:	469e      	mov	lr, r3
 800661e:	4770      	bx	lr

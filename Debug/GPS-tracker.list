
GPS-tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e194  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000068b4  0801e328  0801e328  0002e328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000678  08024bdc  08024bdc  00034bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000660  08025254  08025254  00035254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080258b4  080258b4  000401fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080258b4  080258b4  000358b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080258c0  080258c0  000358c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  080258c8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000401fc  2**0
                  CONTENTS
 10 .bss          00001674  200001fc  200001fc  000401fc  2**2
                  ALLOC
 11 ._user_heap_stack 00001a00  20001870  20001870  000401fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000401fc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003ec84  00000000  00000000  0004026f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000095b8  00000000  00000000  0007eef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000020c0  00000000  00000000  000884b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001924  00000000  00000000  0008a570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002f5d9  00000000  00000000  0008be94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000303d9  00000000  00000000  000bb46d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e2208  00000000  00000000  000eb846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000b6f0  00000000  00000000  001cda50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  001d9140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801e30c 	.word	0x0801e30c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	0801e30c 	.word	0x0801e30c

080001d0 <d_make_comp>:
 80001d0:	2931      	cmp	r1, #49	; 0x31
 80001d2:	b570      	push	{r4, r5, r6, lr}
 80001d4:	4686      	mov	lr, r0
 80001d6:	d845      	bhi.n	8000264 <d_make_comp+0x94>
 80001d8:	2928      	cmp	r1, #40	; 0x28
 80001da:	d82a      	bhi.n	8000232 <d_make_comp+0x62>
 80001dc:	290a      	cmp	r1, #10
 80001de:	d920      	bls.n	8000222 <d_make_comp+0x52>
 80001e0:	f1a1 0c0b 	sub.w	ip, r1, #11
 80001e4:	4c32      	ldr	r4, [pc, #200]	; (80002b0 <d_make_comp+0xe0>)
 80001e6:	fa5f fc8c 	uxtb.w	ip, ip
 80001ea:	2001      	movs	r0, #1
 80001ec:	fa00 f00c 	lsl.w	r0, r0, ip
 80001f0:	4004      	ands	r4, r0
 80001f2:	2c00      	cmp	r4, #0
 80001f4:	d04d      	beq.n	8000292 <d_make_comp+0xc2>
 80001f6:	b1d2      	cbz	r2, 800022e <d_make_comp+0x5e>
 80001f8:	e9de 4005 	ldrd	r4, r0, [lr, #20]
 80001fc:	4284      	cmp	r4, r0
 80001fe:	da16      	bge.n	800022e <d_make_comp+0x5e>
 8000200:	f8de 5010 	ldr.w	r5, [lr, #16]
 8000204:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8000208:	eb05 008c 	add.w	r0, r5, ip, lsl #2
 800020c:	3401      	adds	r4, #1
 800020e:	2600      	movs	r6, #0
 8000210:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8000214:	f8ce 4014 	str.w	r4, [lr, #20]
 8000218:	f805 102c 	strb.w	r1, [r5, ip, lsl #2]
 800021c:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8000220:	bd70      	pop	{r4, r5, r6, pc}
 8000222:	2904      	cmp	r1, #4
 8000224:	d930      	bls.n	8000288 <d_make_comp+0xb8>
 8000226:	f1a1 0009 	sub.w	r0, r1, #9
 800022a:	2801      	cmp	r0, #1
 800022c:	d9e3      	bls.n	80001f6 <d_make_comp+0x26>
 800022e:	2000      	movs	r0, #0
 8000230:	bd70      	pop	{r4, r5, r6, pc}
 8000232:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
 8000236:	2808      	cmp	r0, #8
 8000238:	d8f9      	bhi.n	800022e <d_make_comp+0x5e>
 800023a:	a401      	add	r4, pc, #4	; (adr r4, 8000240 <d_make_comp+0x70>)
 800023c:	f854 f020 	ldr.w	pc, [r4, r0, lsl #2]
 8000240:	080001f9 	.word	0x080001f9
 8000244:	0800028d 	.word	0x0800028d
 8000248:	08000289 	.word	0x08000289
 800024c:	0800022f 	.word	0x0800022f
 8000250:	08000289 	.word	0x08000289
 8000254:	080001f9 	.word	0x080001f9
 8000258:	080001f9 	.word	0x080001f9
 800025c:	080001f7 	.word	0x080001f7
 8000260:	0800028d 	.word	0x0800028d
 8000264:	f1a1 0034 	sub.w	r0, r1, #52	; 0x34
 8000268:	b2c0      	uxtb	r0, r0
 800026a:	281d      	cmp	r0, #29
 800026c:	d8df      	bhi.n	800022e <d_make_comp+0x5e>
 800026e:	4c11      	ldr	r4, [pc, #68]	; (80002b4 <d_make_comp+0xe4>)
 8000270:	f04f 0c01 	mov.w	ip, #1
 8000274:	fa0c fc00 	lsl.w	ip, ip, r0
 8000278:	ea0c 0404 	and.w	r4, ip, r4
 800027c:	2c00      	cmp	r4, #0
 800027e:	d1ba      	bne.n	80001f6 <d_make_comp+0x26>
 8000280:	480d      	ldr	r0, [pc, #52]	; (80002b8 <d_make_comp+0xe8>)
 8000282:	ea0c 0000 	and.w	r0, ip, r0
 8000286:	b170      	cbz	r0, 80002a6 <d_make_comp+0xd6>
 8000288:	2a00      	cmp	r2, #0
 800028a:	d0d0      	beq.n	800022e <d_make_comp+0x5e>
 800028c:	2b00      	cmp	r3, #0
 800028e:	d1b3      	bne.n	80001f8 <d_make_comp+0x28>
 8000290:	e7cd      	b.n	800022e <d_make_comp+0x5e>
 8000292:	f410 1f7f 	tst.w	r0, #4177920	; 0x3fc000
 8000296:	d1af      	bne.n	80001f8 <d_make_comp+0x28>
 8000298:	4c08      	ldr	r4, [pc, #32]	; (80002bc <d_make_comp+0xec>)
 800029a:	4004      	ands	r4, r0
 800029c:	2c00      	cmp	r4, #0
 800029e:	d0c6      	beq.n	800022e <d_make_comp+0x5e>
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	d1f3      	bne.n	800028c <d_make_comp+0xbc>
 80002a4:	e7c3      	b.n	800022e <d_make_comp+0x5e>
 80002a6:	f01c 5c50 	ands.w	ip, ip, #872415232	; 0x34000000
 80002aa:	d0c0      	beq.n	800022e <d_make_comp+0x5e>
 80002ac:	e7a4      	b.n	80001f8 <d_make_comp+0x28>
 80002ae:	bf00      	nop
 80002b0:	2f801ffe 	.word	0x2f801ffe
 80002b4:	01c71107 	.word	0x01c71107
 80002b8:	0a002ef8 	.word	0x0a002ef8
 80002bc:	00400001 	.word	0x00400001

080002c0 <d_number>:
 80002c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c2:	68c2      	ldr	r2, [r0, #12]
 80002c4:	7811      	ldrb	r1, [r2, #0]
 80002c6:	296e      	cmp	r1, #110	; 0x6e
 80002c8:	4686      	mov	lr, r0
 80002ca:	d025      	beq.n	8000318 <d_number+0x58>
 80002cc:	3930      	subs	r1, #48	; 0x30
 80002ce:	b2cb      	uxtb	r3, r1
 80002d0:	2b09      	cmp	r3, #9
 80002d2:	d82b      	bhi.n	800032c <d_number+0x6c>
 80002d4:	2600      	movs	r6, #0
 80002d6:	4d16      	ldr	r5, [pc, #88]	; (8000330 <d_number+0x70>)
 80002d8:	2000      	movs	r0, #0
 80002da:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80002de:	e002      	b.n	80002e6 <d_number+0x26>
 80002e0:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
 80002e4:	dc15      	bgt.n	8000312 <d_number+0x52>
 80002e6:	3201      	adds	r2, #1
 80002e8:	f8ce 200c 	str.w	r2, [lr, #12]
 80002ec:	7813      	ldrb	r3, [r2, #0]
 80002ee:	3b30      	subs	r3, #48	; 0x30
 80002f0:	fa5f fc83 	uxtb.w	ip, r3
 80002f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80002f8:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80002fc:	f1bc 0f09 	cmp.w	ip, #9
 8000300:	4619      	mov	r1, r3
 8000302:	eba4 0303 	sub.w	r3, r4, r3
 8000306:	fba5 7303 	umull	r7, r3, r5, r3
 800030a:	d9e9      	bls.n	80002e0 <d_number+0x20>
 800030c:	b106      	cbz	r6, 8000310 <d_number+0x50>
 800030e:	4240      	negs	r0, r0
 8000310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000312:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000318:	1c53      	adds	r3, r2, #1
 800031a:	60c3      	str	r3, [r0, #12]
 800031c:	7851      	ldrb	r1, [r2, #1]
 800031e:	3930      	subs	r1, #48	; 0x30
 8000320:	b2ca      	uxtb	r2, r1
 8000322:	2a09      	cmp	r2, #9
 8000324:	d802      	bhi.n	800032c <d_number+0x6c>
 8000326:	461a      	mov	r2, r3
 8000328:	2601      	movs	r6, #1
 800032a:	e7d4      	b.n	80002d6 <d_number+0x16>
 800032c:	2000      	movs	r0, #0
 800032e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000330:	cccccccd 	.word	0xcccccccd

08000334 <d_call_offset>:
 8000334:	b510      	push	{r4, lr}
 8000336:	4604      	mov	r4, r0
 8000338:	b929      	cbnz	r1, 8000346 <d_call_offset+0x12>
 800033a:	68c3      	ldr	r3, [r0, #12]
 800033c:	781a      	ldrb	r2, [r3, #0]
 800033e:	b16a      	cbz	r2, 800035c <d_call_offset+0x28>
 8000340:	1c5a      	adds	r2, r3, #1
 8000342:	60c2      	str	r2, [r0, #12]
 8000344:	7819      	ldrb	r1, [r3, #0]
 8000346:	2968      	cmp	r1, #104	; 0x68
 8000348:	d00c      	beq.n	8000364 <d_call_offset+0x30>
 800034a:	2976      	cmp	r1, #118	; 0x76
 800034c:	d106      	bne.n	800035c <d_call_offset+0x28>
 800034e:	4620      	mov	r0, r4
 8000350:	f7ff ffb6 	bl	80002c0 <d_number>
 8000354:	68e3      	ldr	r3, [r4, #12]
 8000356:	781a      	ldrb	r2, [r3, #0]
 8000358:	2a5f      	cmp	r2, #95	; 0x5f
 800035a:	d001      	beq.n	8000360 <d_call_offset+0x2c>
 800035c:	2000      	movs	r0, #0
 800035e:	bd10      	pop	{r4, pc}
 8000360:	3301      	adds	r3, #1
 8000362:	60e3      	str	r3, [r4, #12]
 8000364:	4620      	mov	r0, r4
 8000366:	f7ff ffab 	bl	80002c0 <d_number>
 800036a:	68e3      	ldr	r3, [r4, #12]
 800036c:	781a      	ldrb	r2, [r3, #0]
 800036e:	2a5f      	cmp	r2, #95	; 0x5f
 8000370:	d1f4      	bne.n	800035c <d_call_offset+0x28>
 8000372:	3301      	adds	r3, #1
 8000374:	60e3      	str	r3, [r4, #12]
 8000376:	2001      	movs	r0, #1
 8000378:	bd10      	pop	{r4, pc}
 800037a:	bf00      	nop

0800037c <d_ref_qualifier>:
 800037c:	b410      	push	{r4}
 800037e:	68c3      	ldr	r3, [r0, #12]
 8000380:	460a      	mov	r2, r1
 8000382:	7819      	ldrb	r1, [r3, #0]
 8000384:	2952      	cmp	r1, #82	; 0x52
 8000386:	d00f      	beq.n	80003a8 <d_ref_qualifier+0x2c>
 8000388:	294f      	cmp	r1, #79	; 0x4f
 800038a:	d003      	beq.n	8000394 <d_ref_qualifier+0x18>
 800038c:	4610      	mov	r0, r2
 800038e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000392:	4770      	bx	lr
 8000394:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8000396:	2120      	movs	r1, #32
 8000398:	3403      	adds	r4, #3
 800039a:	3301      	adds	r3, #1
 800039c:	62c4      	str	r4, [r0, #44]	; 0x2c
 800039e:	60c3      	str	r3, [r0, #12]
 80003a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80003a4:	2300      	movs	r3, #0
 80003a6:	e713      	b.n	80001d0 <d_make_comp>
 80003a8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80003aa:	211f      	movs	r1, #31
 80003ac:	3402      	adds	r4, #2
 80003ae:	e7f4      	b.n	800039a <d_ref_qualifier+0x1e>

080003b0 <d_count_templates_scopes>:
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d066      	beq.n	8000482 <d_count_templates_scopes+0xd2>
 80003b4:	b538      	push	{r3, r4, r5, lr}
 80003b6:	4605      	mov	r5, r0
 80003b8:	460c      	mov	r4, r1
 80003ba:	68a3      	ldr	r3, [r4, #8]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	dc39      	bgt.n	8000434 <d_count_templates_scopes+0x84>
 80003c0:	f8d5 011c 	ldr.w	r0, [r5, #284]	; 0x11c
 80003c4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80003c8:	f103 0301 	add.w	r3, r3, #1
 80003cc:	dc32      	bgt.n	8000434 <d_count_templates_scopes+0x84>
 80003ce:	7822      	ldrb	r2, [r4, #0]
 80003d0:	60a3      	str	r3, [r4, #8]
 80003d2:	1e53      	subs	r3, r2, #1
 80003d4:	2b50      	cmp	r3, #80	; 0x50
 80003d6:	d82d      	bhi.n	8000434 <d_count_templates_scopes+0x84>
 80003d8:	e8df f003 	tbb	[pc, r3]
 80003dc:	4c313131 	.word	0x4c313131
 80003e0:	2d2d2c2c 	.word	0x2d2d2c2c
 80003e4:	31313131 	.word	0x31313131
 80003e8:	31313131 	.word	0x31313131
 80003ec:	31313131 	.word	0x31313131
 80003f0:	2c313131 	.word	0x2c313131
 80003f4:	31313131 	.word	0x31313131
 80003f8:	31313131 	.word	0x31313131
 80003fc:	42423131 	.word	0x42423131
 8000400:	312c3131 	.word	0x312c3131
 8000404:	29313131 	.word	0x29313131
 8000408:	31313131 	.word	0x31313131
 800040c:	312d2c31 	.word	0x312d2c31
 8000410:	31313131 	.word	0x31313131
 8000414:	31313131 	.word	0x31313131
 8000418:	31313131 	.word	0x31313131
 800041c:	312c2c31 	.word	0x312c2c31
 8000420:	29292929 	.word	0x29292929
 8000424:	3131312c 	.word	0x3131312c
 8000428:	31313131 	.word	0x31313131
 800042c:	31          	.byte	0x31
 800042d:	00          	.byte	0x00
 800042e:	68e4      	ldr	r4, [r4, #12]
 8000430:	2c00      	cmp	r4, #0
 8000432:	d1c2      	bne.n	80003ba <d_count_templates_scopes+0xa>
 8000434:	bd38      	pop	{r3, r4, r5, pc}
 8000436:	6924      	ldr	r4, [r4, #16]
 8000438:	2c00      	cmp	r4, #0
 800043a:	d1be      	bne.n	80003ba <d_count_templates_scopes+0xa>
 800043c:	e7fa      	b.n	8000434 <d_count_templates_scopes+0x84>
 800043e:	68e1      	ldr	r1, [r4, #12]
 8000440:	1c43      	adds	r3, r0, #1
 8000442:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
 8000446:	4628      	mov	r0, r5
 8000448:	f7ff ffb2 	bl	80003b0 <d_count_templates_scopes>
 800044c:	6921      	ldr	r1, [r4, #16]
 800044e:	4628      	mov	r0, r5
 8000450:	f7ff ffae 	bl	80003b0 <d_count_templates_scopes>
 8000454:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
 8000458:	3b01      	subs	r3, #1
 800045a:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
 800045e:	bd38      	pop	{r3, r4, r5, pc}
 8000460:	68e1      	ldr	r1, [r4, #12]
 8000462:	780b      	ldrb	r3, [r1, #0]
 8000464:	2b05      	cmp	r3, #5
 8000466:	d1eb      	bne.n	8000440 <d_count_templates_scopes+0x90>
 8000468:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
 800046c:	3301      	adds	r3, #1
 800046e:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
 8000472:	e7e5      	b.n	8000440 <d_count_templates_scopes+0x90>
 8000474:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
 8000478:	68e1      	ldr	r1, [r4, #12]
 800047a:	3301      	adds	r3, #1
 800047c:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
 8000480:	e7de      	b.n	8000440 <d_count_templates_scopes+0x90>
 8000482:	4770      	bx	lr

08000484 <d_pack_length>:
 8000484:	4603      	mov	r3, r0
 8000486:	b148      	cbz	r0, 800049c <d_pack_length+0x18>
 8000488:	2300      	movs	r3, #0
 800048a:	e004      	b.n	8000496 <d_pack_length+0x12>
 800048c:	68c2      	ldr	r2, [r0, #12]
 800048e:	b12a      	cbz	r2, 800049c <d_pack_length+0x18>
 8000490:	6900      	ldr	r0, [r0, #16]
 8000492:	3301      	adds	r3, #1
 8000494:	b110      	cbz	r0, 800049c <d_pack_length+0x18>
 8000496:	7802      	ldrb	r2, [r0, #0]
 8000498:	2a2f      	cmp	r2, #47	; 0x2f
 800049a:	d0f7      	beq.n	800048c <d_pack_length+0x8>
 800049c:	4618      	mov	r0, r3
 800049e:	4770      	bx	lr

080004a0 <d_discriminator>:
 80004a0:	68c3      	ldr	r3, [r0, #12]
 80004a2:	781a      	ldrb	r2, [r3, #0]
 80004a4:	2a5f      	cmp	r2, #95	; 0x5f
 80004a6:	d001      	beq.n	80004ac <d_discriminator+0xc>
 80004a8:	2001      	movs	r0, #1
 80004aa:	4770      	bx	lr
 80004ac:	b510      	push	{r4, lr}
 80004ae:	1c5a      	adds	r2, r3, #1
 80004b0:	60c2      	str	r2, [r0, #12]
 80004b2:	785a      	ldrb	r2, [r3, #1]
 80004b4:	2a5f      	cmp	r2, #95	; 0x5f
 80004b6:	4604      	mov	r4, r0
 80004b8:	d004      	beq.n	80004c4 <d_discriminator+0x24>
 80004ba:	f7ff ff01 	bl	80002c0 <d_number>
 80004be:	43c0      	mvns	r0, r0
 80004c0:	0fc0      	lsrs	r0, r0, #31
 80004c2:	bd10      	pop	{r4, pc}
 80004c4:	3302      	adds	r3, #2
 80004c6:	60c3      	str	r3, [r0, #12]
 80004c8:	f7ff fefa 	bl	80002c0 <d_number>
 80004cc:	2800      	cmp	r0, #0
 80004ce:	db09      	blt.n	80004e4 <d_discriminator+0x44>
 80004d0:	2809      	cmp	r0, #9
 80004d2:	dd05      	ble.n	80004e0 <d_discriminator+0x40>
 80004d4:	68e3      	ldr	r3, [r4, #12]
 80004d6:	781a      	ldrb	r2, [r3, #0]
 80004d8:	2a5f      	cmp	r2, #95	; 0x5f
 80004da:	d103      	bne.n	80004e4 <d_discriminator+0x44>
 80004dc:	3301      	adds	r3, #1
 80004de:	60e3      	str	r3, [r4, #12]
 80004e0:	2001      	movs	r0, #1
 80004e2:	bd10      	pop	{r4, pc}
 80004e4:	2000      	movs	r0, #0
 80004e6:	bd10      	pop	{r4, pc}

080004e8 <d_index_template_argument.part.0>:
 80004e8:	b920      	cbnz	r0, 80004f4 <d_index_template_argument.part.0+0xc>
 80004ea:	e009      	b.n	8000500 <d_index_template_argument.part.0+0x18>
 80004ec:	b139      	cbz	r1, 80004fe <d_index_template_argument.part.0+0x16>
 80004ee:	6900      	ldr	r0, [r0, #16]
 80004f0:	3901      	subs	r1, #1
 80004f2:	b130      	cbz	r0, 8000502 <d_index_template_argument.part.0+0x1a>
 80004f4:	7803      	ldrb	r3, [r0, #0]
 80004f6:	2b2f      	cmp	r3, #47	; 0x2f
 80004f8:	d0f8      	beq.n	80004ec <d_index_template_argument.part.0+0x4>
 80004fa:	2000      	movs	r0, #0
 80004fc:	4770      	bx	lr
 80004fe:	68c0      	ldr	r0, [r0, #12]
 8000500:	4770      	bx	lr
 8000502:	4770      	bx	lr

08000504 <d_growable_string_callback_adapter>:
 8000504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000506:	4614      	mov	r4, r2
 8000508:	6852      	ldr	r2, [r2, #4]
 800050a:	68a5      	ldr	r5, [r4, #8]
 800050c:	1c4b      	adds	r3, r1, #1
 800050e:	4413      	add	r3, r2
 8000510:	42ab      	cmp	r3, r5
 8000512:	b083      	sub	sp, #12
 8000514:	460e      	mov	r6, r1
 8000516:	4607      	mov	r7, r0
 8000518:	d811      	bhi.n	800053e <d_growable_string_callback_adapter+0x3a>
 800051a:	68e5      	ldr	r5, [r4, #12]
 800051c:	b96d      	cbnz	r5, 800053a <d_growable_string_callback_adapter+0x36>
 800051e:	6863      	ldr	r3, [r4, #4]
 8000520:	6820      	ldr	r0, [r4, #0]
 8000522:	4632      	mov	r2, r6
 8000524:	4418      	add	r0, r3
 8000526:	4639      	mov	r1, r7
 8000528:	f01b fbb1 	bl	801bc8e <memcpy>
 800052c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8000530:	4433      	add	r3, r6
 8000532:	549d      	strb	r5, [r3, r2]
 8000534:	6863      	ldr	r3, [r4, #4]
 8000536:	4433      	add	r3, r6
 8000538:	6063      	str	r3, [r4, #4]
 800053a:	b003      	add	sp, #12
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	68e2      	ldr	r2, [r4, #12]
 8000540:	2a00      	cmp	r2, #0
 8000542:	d1fa      	bne.n	800053a <d_growable_string_callback_adapter+0x36>
 8000544:	b155      	cbz	r5, 800055c <d_growable_string_callback_adapter+0x58>
 8000546:	006d      	lsls	r5, r5, #1
 8000548:	42ab      	cmp	r3, r5
 800054a:	d8fc      	bhi.n	8000546 <d_growable_string_callback_adapter+0x42>
 800054c:	6820      	ldr	r0, [r4, #0]
 800054e:	4629      	mov	r1, r5
 8000550:	f019 fbea 	bl	8019d28 <realloc>
 8000554:	b138      	cbz	r0, 8000566 <d_growable_string_callback_adapter+0x62>
 8000556:	6020      	str	r0, [r4, #0]
 8000558:	60a5      	str	r5, [r4, #8]
 800055a:	e7de      	b.n	800051a <d_growable_string_callback_adapter+0x16>
 800055c:	2b02      	cmp	r3, #2
 800055e:	f04f 0502 	mov.w	r5, #2
 8000562:	d8f0      	bhi.n	8000546 <d_growable_string_callback_adapter+0x42>
 8000564:	e7f2      	b.n	800054c <d_growable_string_callback_adapter+0x48>
 8000566:	9001      	str	r0, [sp, #4]
 8000568:	6820      	ldr	r0, [r4, #0]
 800056a:	f019 fb29 	bl	8019bc0 <free>
 800056e:	9b01      	ldr	r3, [sp, #4]
 8000570:	2201      	movs	r2, #1
 8000572:	e9c4 3300 	strd	r3, r3, [r4]
 8000576:	e9c4 3202 	strd	r3, r2, [r4, #8]
 800057a:	e7de      	b.n	800053a <d_growable_string_callback_adapter+0x36>

0800057c <next_is_type_qual.isra.0>:
 800057c:	7803      	ldrb	r3, [r0, #0]
 800057e:	2b72      	cmp	r3, #114	; 0x72
 8000580:	d007      	beq.n	8000592 <next_is_type_qual.isra.0+0x16>
 8000582:	2b56      	cmp	r3, #86	; 0x56
 8000584:	d005      	beq.n	8000592 <next_is_type_qual.isra.0+0x16>
 8000586:	2b4b      	cmp	r3, #75	; 0x4b
 8000588:	d003      	beq.n	8000592 <next_is_type_qual.isra.0+0x16>
 800058a:	2b44      	cmp	r3, #68	; 0x44
 800058c:	d003      	beq.n	8000596 <next_is_type_qual.isra.0+0x1a>
 800058e:	2000      	movs	r0, #0
 8000590:	4770      	bx	lr
 8000592:	2001      	movs	r0, #1
 8000594:	4770      	bx	lr
 8000596:	7840      	ldrb	r0, [r0, #1]
 8000598:	f000 03df 	and.w	r3, r0, #223	; 0xdf
 800059c:	2b4f      	cmp	r3, #79	; 0x4f
 800059e:	d0f8      	beq.n	8000592 <next_is_type_qual.isra.0+0x16>
 80005a0:	3877      	subs	r0, #119	; 0x77
 80005a2:	2801      	cmp	r0, #1
 80005a4:	bf8c      	ite	hi
 80005a6:	2000      	movhi	r0, #0
 80005a8:	2001      	movls	r0, #1
 80005aa:	4770      	bx	lr

080005ac <d_append_char>:
 80005ac:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80005b0:	2bff      	cmp	r3, #255	; 0xff
 80005b2:	b570      	push	{r4, r5, r6, lr}
 80005b4:	4604      	mov	r4, r0
 80005b6:	460d      	mov	r5, r1
 80005b8:	d006      	beq.n	80005c8 <d_append_char+0x1c>
 80005ba:	1c5a      	adds	r2, r3, #1
 80005bc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80005c0:	54e5      	strb	r5, [r4, r3]
 80005c2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
 80005c8:	2600      	movs	r6, #0
 80005ca:	4619      	mov	r1, r3
 80005cc:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 80005d0:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
 80005d4:	4798      	blx	r3
 80005d6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80005da:	2201      	movs	r2, #1
 80005dc:	4413      	add	r3, r2
 80005de:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80005e2:	4633      	mov	r3, r6
 80005e4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80005e8:	54e5      	strb	r5, [r4, r3]
 80005ea:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80005ee:	bd70      	pop	{r4, r5, r6, pc}

080005f0 <d_lookup_template_argument>:
 80005f0:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80005f4:	b19b      	cbz	r3, 800061e <d_lookup_template_argument+0x2e>
 80005f6:	68ca      	ldr	r2, [r1, #12]
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	2a00      	cmp	r2, #0
 80005fc:	691b      	ldr	r3, [r3, #16]
 80005fe:	db09      	blt.n	8000614 <d_lookup_template_argument+0x24>
 8000600:	b923      	cbnz	r3, 800060c <d_lookup_template_argument+0x1c>
 8000602:	e007      	b.n	8000614 <d_lookup_template_argument+0x24>
 8000604:	b142      	cbz	r2, 8000618 <d_lookup_template_argument+0x28>
 8000606:	691b      	ldr	r3, [r3, #16]
 8000608:	3a01      	subs	r2, #1
 800060a:	b11b      	cbz	r3, 8000614 <d_lookup_template_argument+0x24>
 800060c:	7819      	ldrb	r1, [r3, #0]
 800060e:	292f      	cmp	r1, #47	; 0x2f
 8000610:	d0f8      	beq.n	8000604 <d_lookup_template_argument+0x14>
 8000612:	2300      	movs	r3, #0
 8000614:	4618      	mov	r0, r3
 8000616:	4770      	bx	lr
 8000618:	68db      	ldr	r3, [r3, #12]
 800061a:	4618      	mov	r0, r3
 800061c:	4770      	bx	lr
 800061e:	2201      	movs	r2, #1
 8000620:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
 8000624:	e7f6      	b.n	8000614 <d_lookup_template_argument+0x24>
 8000626:	bf00      	nop

08000628 <d_find_pack>:
 8000628:	2900      	cmp	r1, #0
 800062a:	d040      	beq.n	80006ae <d_find_pack+0x86>
 800062c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000630:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80006b8 <d_find_pack+0x90>
 8000634:	4f1f      	ldr	r7, [pc, #124]	; (80006b4 <d_find_pack+0x8c>)
 8000636:	4605      	mov	r5, r0
 8000638:	460c      	mov	r4, r1
 800063a:	2601      	movs	r6, #1
 800063c:	7823      	ldrb	r3, [r4, #0]
 800063e:	2b08      	cmp	r3, #8
 8000640:	d813      	bhi.n	800066a <d_find_pack+0x42>
 8000642:	2b08      	cmp	r3, #8
 8000644:	d81e      	bhi.n	8000684 <d_find_pack+0x5c>
 8000646:	e8df f003 	tbb	[pc, r3]
 800064a:	1d0d      	.short	0x1d0d
 800064c:	271d1d1d 	.word	0x271d1d1d
 8000650:	230d      	.short	0x230d
 8000652:	23          	.byte	0x23
 8000653:	00          	.byte	0x00
 8000654:	2b17      	cmp	r3, #23
 8000656:	d915      	bls.n	8000684 <d_find_pack+0x5c>
 8000658:	3b18      	subs	r3, #24
 800065a:	b2db      	uxtb	r3, r3
 800065c:	fa27 f303 	lsr.w	r3, r7, r3
 8000660:	07db      	lsls	r3, r3, #31
 8000662:	d50f      	bpl.n	8000684 <d_find_pack+0x5c>
 8000664:	2000      	movs	r0, #0
 8000666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800066a:	2b2c      	cmp	r3, #44	; 0x2c
 800066c:	d9f2      	bls.n	8000654 <d_find_pack+0x2c>
 800066e:	3b32      	subs	r3, #50	; 0x32
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b1b      	cmp	r3, #27
 8000674:	d806      	bhi.n	8000684 <d_find_pack+0x5c>
 8000676:	fa06 f203 	lsl.w	r2, r6, r3
 800067a:	ea12 0f08 	tst.w	r2, r8
 800067e:	d1f1      	bne.n	8000664 <d_find_pack+0x3c>
 8000680:	2b01      	cmp	r3, #1
 8000682:	d005      	beq.n	8000690 <d_find_pack+0x68>
 8000684:	68e1      	ldr	r1, [r4, #12]
 8000686:	4628      	mov	r0, r5
 8000688:	f7ff ffce 	bl	8000628 <d_find_pack>
 800068c:	2800      	cmp	r0, #0
 800068e:	d1ea      	bne.n	8000666 <d_find_pack+0x3e>
 8000690:	6924      	ldr	r4, [r4, #16]
 8000692:	2c00      	cmp	r4, #0
 8000694:	d1d2      	bne.n	800063c <d_find_pack+0x14>
 8000696:	e7e5      	b.n	8000664 <d_find_pack+0x3c>
 8000698:	4621      	mov	r1, r4
 800069a:	4628      	mov	r0, r5
 800069c:	f7ff ffa8 	bl	80005f0 <d_lookup_template_argument>
 80006a0:	2800      	cmp	r0, #0
 80006a2:	d0df      	beq.n	8000664 <d_find_pack+0x3c>
 80006a4:	7803      	ldrb	r3, [r0, #0]
 80006a6:	2b2f      	cmp	r3, #47	; 0x2f
 80006a8:	d1dc      	bne.n	8000664 <d_find_pack+0x3c>
 80006aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006ae:	2000      	movs	r0, #0
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	00108001 	.word	0x00108001
 80006b8:	0ce30001 	.word	0x0ce30001

080006bc <d_append_string>:
 80006bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006c0:	4604      	mov	r4, r0
 80006c2:	4608      	mov	r0, r1
 80006c4:	460d      	mov	r5, r1
 80006c6:	f005 fdbb 	bl	8006240 <strlen>
 80006ca:	b340      	cbz	r0, 800071e <d_append_string+0x62>
 80006cc:	3d01      	subs	r5, #1
 80006ce:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80006d2:	182f      	adds	r7, r5, r0
 80006d4:	f04f 0800 	mov.w	r8, #0
 80006d8:	e009      	b.n	80006ee <d_append_string+0x32>
 80006da:	460b      	mov	r3, r1
 80006dc:	42bd      	cmp	r5, r7
 80006de:	f101 0101 	add.w	r1, r1, #1
 80006e2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80006e6:	54e6      	strb	r6, [r4, r3]
 80006e8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80006ec:	d017      	beq.n	800071e <d_append_string+0x62>
 80006ee:	29ff      	cmp	r1, #255	; 0xff
 80006f0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80006f4:	d1f1      	bne.n	80006da <d_append_string+0x1e>
 80006f6:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 80006fa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80006fe:	4620      	mov	r0, r4
 8000700:	4798      	blx	r3
 8000702:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8000706:	2101      	movs	r1, #1
 8000708:	440b      	add	r3, r1
 800070a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800070e:	2300      	movs	r3, #0
 8000710:	42bd      	cmp	r5, r7
 8000712:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000716:	54e6      	strb	r6, [r4, r3]
 8000718:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800071c:	d1e7      	bne.n	80006ee <d_append_string+0x32>
 800071e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000722:	bf00      	nop

08000724 <d_template_param>:
 8000724:	b538      	push	{r3, r4, r5, lr}
 8000726:	68c3      	ldr	r3, [r0, #12]
 8000728:	781a      	ldrb	r2, [r3, #0]
 800072a:	2a54      	cmp	r2, #84	; 0x54
 800072c:	d124      	bne.n	8000778 <d_template_param+0x54>
 800072e:	1c5a      	adds	r2, r3, #1
 8000730:	60c2      	str	r2, [r0, #12]
 8000732:	785a      	ldrb	r2, [r3, #1]
 8000734:	2a5f      	cmp	r2, #95	; 0x5f
 8000736:	4604      	mov	r4, r0
 8000738:	d020      	beq.n	800077c <d_template_param+0x58>
 800073a:	2a6e      	cmp	r2, #110	; 0x6e
 800073c:	d01c      	beq.n	8000778 <d_template_param+0x54>
 800073e:	f7ff fdbf 	bl	80002c0 <d_number>
 8000742:	1c41      	adds	r1, r0, #1
 8000744:	d418      	bmi.n	8000778 <d_template_param+0x54>
 8000746:	68e3      	ldr	r3, [r4, #12]
 8000748:	781a      	ldrb	r2, [r3, #0]
 800074a:	2a5f      	cmp	r2, #95	; 0x5f
 800074c:	d114      	bne.n	8000778 <d_template_param+0x54>
 800074e:	3301      	adds	r3, #1
 8000750:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 8000754:	4282      	cmp	r2, r0
 8000756:	60e3      	str	r3, [r4, #12]
 8000758:	da0e      	bge.n	8000778 <d_template_param+0x54>
 800075a:	6923      	ldr	r3, [r4, #16]
 800075c:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 8000760:	eb03 008c 	add.w	r0, r3, ip, lsl #2
 8000764:	3201      	adds	r2, #1
 8000766:	2500      	movs	r5, #0
 8000768:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800076c:	6162      	str	r2, [r4, #20]
 800076e:	2205      	movs	r2, #5
 8000770:	f803 202c 	strb.w	r2, [r3, ip, lsl #2]
 8000774:	60c1      	str	r1, [r0, #12]
 8000776:	bd38      	pop	{r3, r4, r5, pc}
 8000778:	2000      	movs	r0, #0
 800077a:	bd38      	pop	{r3, r4, r5, pc}
 800077c:	3302      	adds	r3, #2
 800077e:	2100      	movs	r1, #0
 8000780:	e7e6      	b.n	8000750 <d_template_param+0x2c>
 8000782:	bf00      	nop

08000784 <d_append_num>:
 8000784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000788:	b088      	sub	sp, #32
 800078a:	460a      	mov	r2, r1
 800078c:	4604      	mov	r4, r0
 800078e:	491a      	ldr	r1, [pc, #104]	; (80007f8 <d_append_num+0x74>)
 8000790:	a801      	add	r0, sp, #4
 8000792:	f01b f84f 	bl	801b834 <siprintf>
 8000796:	a801      	add	r0, sp, #4
 8000798:	f005 fd52 	bl	8006240 <strlen>
 800079c:	b340      	cbz	r0, 80007f0 <d_append_num+0x6c>
 800079e:	ad01      	add	r5, sp, #4
 80007a0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80007a4:	182f      	adds	r7, r5, r0
 80007a6:	f04f 0800 	mov.w	r8, #0
 80007aa:	e009      	b.n	80007c0 <d_append_num+0x3c>
 80007ac:	460b      	mov	r3, r1
 80007ae:	42bd      	cmp	r5, r7
 80007b0:	f101 0101 	add.w	r1, r1, #1
 80007b4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80007b8:	54e6      	strb	r6, [r4, r3]
 80007ba:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80007be:	d017      	beq.n	80007f0 <d_append_num+0x6c>
 80007c0:	29ff      	cmp	r1, #255	; 0xff
 80007c2:	f815 6b01 	ldrb.w	r6, [r5], #1
 80007c6:	d1f1      	bne.n	80007ac <d_append_num+0x28>
 80007c8:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 80007cc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80007d0:	4620      	mov	r0, r4
 80007d2:	4798      	blx	r3
 80007d4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80007d8:	2101      	movs	r1, #1
 80007da:	440b      	add	r3, r1
 80007dc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80007e0:	2300      	movs	r3, #0
 80007e2:	42bd      	cmp	r5, r7
 80007e4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80007e8:	54e6      	strb	r6, [r4, r3]
 80007ea:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80007ee:	d1e7      	bne.n	80007c0 <d_append_num+0x3c>
 80007f0:	b008      	add	sp, #32
 80007f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007f6:	bf00      	nop
 80007f8:	08023e1c 	.word	0x08023e1c

080007fc <d_source_name>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	4604      	mov	r4, r0
 8000800:	f7ff fd5e 	bl	80002c0 <d_number>
 8000804:	1e05      	subs	r5, r0, #0
 8000806:	dd46      	ble.n	8000896 <d_source_name+0x9a>
 8000808:	68e6      	ldr	r6, [r4, #12]
 800080a:	6863      	ldr	r3, [r4, #4]
 800080c:	1b9b      	subs	r3, r3, r6
 800080e:	429d      	cmp	r5, r3
 8000810:	dc3e      	bgt.n	8000890 <d_source_name+0x94>
 8000812:	68a2      	ldr	r2, [r4, #8]
 8000814:	1973      	adds	r3, r6, r5
 8000816:	0752      	lsls	r2, r2, #29
 8000818:	60e3      	str	r3, [r4, #12]
 800081a:	d504      	bpl.n	8000826 <d_source_name+0x2a>
 800081c:	5d72      	ldrb	r2, [r6, r5]
 800081e:	2a24      	cmp	r2, #36	; 0x24
 8000820:	bf04      	itt	eq
 8000822:	3301      	addeq	r3, #1
 8000824:	60e3      	streq	r3, [r4, #12]
 8000826:	2d09      	cmp	r5, #9
 8000828:	dd22      	ble.n	8000870 <d_source_name+0x74>
 800082a:	492a      	ldr	r1, [pc, #168]	; (80008d4 <d_source_name+0xd8>)
 800082c:	2208      	movs	r2, #8
 800082e:	4630      	mov	r0, r6
 8000830:	f01b f8f8 	bl	801ba24 <memcmp>
 8000834:	b930      	cbnz	r0, 8000844 <d_source_name+0x48>
 8000836:	7a33      	ldrb	r3, [r6, #8]
 8000838:	2b2e      	cmp	r3, #46	; 0x2e
 800083a:	d02e      	beq.n	800089a <d_source_name+0x9e>
 800083c:	2b5f      	cmp	r3, #95	; 0x5f
 800083e:	d02c      	beq.n	800089a <d_source_name+0x9e>
 8000840:	2b24      	cmp	r3, #36	; 0x24
 8000842:	d02a      	beq.n	800089a <d_source_name+0x9e>
 8000844:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000848:	4293      	cmp	r3, r2
 800084a:	da21      	bge.n	8000890 <d_source_name+0x94>
 800084c:	6920      	ldr	r0, [r4, #16]
 800084e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000852:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8000856:	3301      	adds	r3, #1
 8000858:	2200      	movs	r2, #0
 800085a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800085e:	6163      	str	r3, [r4, #20]
 8000860:	2300      	movs	r3, #0
 8000862:	7003      	strb	r3, [r0, #0]
 8000864:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8000868:	e9c0 6503 	strd	r6, r5, [r0, #12]
 800086c:	62a0      	str	r0, [r4, #40]	; 0x28
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000874:	4293      	cmp	r3, r2
 8000876:	da0b      	bge.n	8000890 <d_source_name+0x94>
 8000878:	6920      	ldr	r0, [r4, #16]
 800087a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800087e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8000882:	3301      	adds	r3, #1
 8000884:	2200      	movs	r2, #0
 8000886:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800088a:	6163      	str	r3, [r4, #20]
 800088c:	2e00      	cmp	r6, #0
 800088e:	d1e7      	bne.n	8000860 <d_source_name+0x64>
 8000890:	2000      	movs	r0, #0
 8000892:	62a0      	str	r0, [r4, #40]	; 0x28
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	2000      	movs	r0, #0
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	7a73      	ldrb	r3, [r6, #9]
 800089c:	2b4e      	cmp	r3, #78	; 0x4e
 800089e:	d1d1      	bne.n	8000844 <d_source_name+0x48>
 80008a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80008a2:	6963      	ldr	r3, [r4, #20]
 80008a4:	69a1      	ldr	r1, [r4, #24]
 80008a6:	3216      	adds	r2, #22
 80008a8:	1b52      	subs	r2, r2, r5
 80008aa:	428b      	cmp	r3, r1
 80008ac:	62e2      	str	r2, [r4, #44]	; 0x2c
 80008ae:	daef      	bge.n	8000890 <d_source_name+0x94>
 80008b0:	6922      	ldr	r2, [r4, #16]
 80008b2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80008b6:	0081      	lsls	r1, r0, #2
 80008b8:	3301      	adds	r3, #1
 80008ba:	6163      	str	r3, [r4, #20]
 80008bc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80008c0:	2300      	movs	r3, #0
 80008c2:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80008c6:	5453      	strb	r3, [r2, r1]
 80008c8:	4a03      	ldr	r2, [pc, #12]	; (80008d8 <d_source_name+0xdc>)
 80008ca:	2315      	movs	r3, #21
 80008cc:	e9c0 2303 	strd	r2, r3, [r0, #12]
 80008d0:	e7df      	b.n	8000892 <d_source_name+0x96>
 80008d2:	bf00      	nop
 80008d4:	08023e20 	.word	0x08023e20
 80008d8:	08023e2c 	.word	0x08023e2c

080008dc <d_substitution>:
 80008dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008e0:	68c3      	ldr	r3, [r0, #12]
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	2a53      	cmp	r2, #83	; 0x53
 80008e6:	d131      	bne.n	800094c <d_substitution+0x70>
 80008e8:	1c5a      	adds	r2, r3, #1
 80008ea:	60c2      	str	r2, [r0, #12]
 80008ec:	785a      	ldrb	r2, [r3, #1]
 80008ee:	4604      	mov	r4, r0
 80008f0:	b3a2      	cbz	r2, 800095c <d_substitution+0x80>
 80008f2:	1c9a      	adds	r2, r3, #2
 80008f4:	60c2      	str	r2, [r0, #12]
 80008f6:	785a      	ldrb	r2, [r3, #1]
 80008f8:	2a5f      	cmp	r2, #95	; 0x5f
 80008fa:	d044      	beq.n	8000986 <d_substitution+0xaa>
 80008fc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8000900:	b2d8      	uxtb	r0, r3
 8000902:	2809      	cmp	r0, #9
 8000904:	d826      	bhi.n	8000954 <d_substitution+0x78>
 8000906:	2100      	movs	r1, #0
 8000908:	e00d      	b.n	8000926 <d_substitution+0x4a>
 800090a:	3b30      	subs	r3, #48	; 0x30
 800090c:	4299      	cmp	r1, r3
 800090e:	d81d      	bhi.n	800094c <d_substitution+0x70>
 8000910:	68e0      	ldr	r0, [r4, #12]
 8000912:	7802      	ldrb	r2, [r0, #0]
 8000914:	4619      	mov	r1, r3
 8000916:	1c45      	adds	r5, r0, #1
 8000918:	b11a      	cbz	r2, 8000922 <d_substitution+0x46>
 800091a:	60e5      	str	r5, [r4, #12]
 800091c:	7802      	ldrb	r2, [r0, #0]
 800091e:	2a5f      	cmp	r2, #95	; 0x5f
 8000920:	d03b      	beq.n	800099a <d_substitution+0xbe>
 8000922:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8000926:	b2d8      	uxtb	r0, r3
 8000928:	2809      	cmp	r0, #9
 800092a:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800092e:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
 8000932:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000936:	d9e8      	bls.n	800090a <d_substitution+0x2e>
 8000938:	f1bc 0f19 	cmp.w	ip, #25
 800093c:	d806      	bhi.n	800094c <d_substitution+0x70>
 800093e:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000942:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000946:	3b37      	subs	r3, #55	; 0x37
 8000948:	4299      	cmp	r1, r3
 800094a:	d9e1      	bls.n	8000910 <d_substitution+0x34>
 800094c:	2500      	movs	r5, #0
 800094e:	4628      	mov	r0, r5
 8000950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000954:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 8000958:	2819      	cmp	r0, #25
 800095a:	d9d4      	bls.n	8000906 <d_substitution+0x2a>
 800095c:	68a3      	ldr	r3, [r4, #8]
 800095e:	f003 0308 	and.w	r3, r3, #8
 8000962:	2b00      	cmp	r3, #0
 8000964:	bf14      	ite	ne
 8000966:	2501      	movne	r5, #1
 8000968:	2500      	moveq	r5, #0
 800096a:	d100      	bne.n	800096e <d_substitution+0x92>
 800096c:	b9b9      	cbnz	r1, 800099e <d_substitution+0xc2>
 800096e:	4b3f      	ldr	r3, [pc, #252]	; (8000a6c <d_substitution+0x190>)
 8000970:	2174      	movs	r1, #116	; 0x74
 8000972:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
 8000976:	e001      	b.n	800097c <d_substitution+0xa0>
 8000978:	f813 1f1c 	ldrb.w	r1, [r3, #28]!
 800097c:	4291      	cmp	r1, r2
 800097e:	d015      	beq.n	80009ac <d_substitution+0xd0>
 8000980:	4283      	cmp	r3, r0
 8000982:	d1f9      	bne.n	8000978 <d_substitution+0x9c>
 8000984:	e7e2      	b.n	800094c <d_substitution+0x70>
 8000986:	2300      	movs	r3, #0
 8000988:	6a22      	ldr	r2, [r4, #32]
 800098a:	429a      	cmp	r2, r3
 800098c:	d9de      	bls.n	800094c <d_substitution+0x70>
 800098e:	69e2      	ldr	r2, [r4, #28]
 8000990:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8000994:	4628      	mov	r0, r5
 8000996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800099a:	3301      	adds	r3, #1
 800099c:	e7f4      	b.n	8000988 <d_substitution+0xac>
 800099e:	68e3      	ldr	r3, [r4, #12]
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	3b43      	subs	r3, #67	; 0x43
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	bf98      	it	ls
 80009a8:	460d      	movls	r5, r1
 80009aa:	e7e0      	b.n	800096e <d_substitution+0x92>
 80009ac:	695e      	ldr	r6, [r3, #20]
 80009ae:	2e00      	cmp	r6, #0
 80009b0:	d054      	beq.n	8000a5c <d_substitution+0x180>
 80009b2:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 80009b6:	4282      	cmp	r2, r0
 80009b8:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80009bc:	da53      	bge.n	8000a66 <d_substitution+0x18a>
 80009be:	6927      	ldr	r7, [r4, #16]
 80009c0:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 80009c4:	eb07 018c 	add.w	r1, r7, ip, lsl #2
 80009c8:	f04f 0e00 	mov.w	lr, #0
 80009cc:	e9c1 ee01 	strd	lr, lr, [r1, #4]
 80009d0:	3201      	adds	r2, #1
 80009d2:	f04f 0e18 	mov.w	lr, #24
 80009d6:	6162      	str	r2, [r4, #20]
 80009d8:	f807 e02c 	strb.w	lr, [r7, ip, lsl #2]
 80009dc:	e9c1 6803 	strd	r6, r8, [r1, #12]
 80009e0:	62a1      	str	r1, [r4, #40]	; 0x28
 80009e2:	2d00      	cmp	r5, #0
 80009e4:	d037      	beq.n	8000a56 <d_substitution+0x17a>
 80009e6:	e9d3 7103 	ldrd	r7, r1, [r3, #12]
 80009ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009ec:	4282      	cmp	r2, r0
 80009ee:	440b      	add	r3, r1
 80009f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80009f2:	da36      	bge.n	8000a62 <d_substitution+0x186>
 80009f4:	6923      	ldr	r3, [r4, #16]
 80009f6:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 80009fa:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 80009fe:	3201      	adds	r2, #1
 8000a00:	2600      	movs	r6, #0
 8000a02:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8000a06:	6162      	str	r2, [r4, #20]
 8000a08:	2218      	movs	r2, #24
 8000a0a:	f803 2020 	strb.w	r2, [r3, r0, lsl #2]
 8000a0e:	e9c5 7103 	strd	r7, r1, [r5, #12]
 8000a12:	68e3      	ldr	r3, [r4, #12]
 8000a14:	781a      	ldrb	r2, [r3, #0]
 8000a16:	2a42      	cmp	r2, #66	; 0x42
 8000a18:	d199      	bne.n	800094e <d_substitution+0x72>
 8000a1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	60e3      	str	r3, [r4, #12]
 8000a20:	4620      	mov	r0, r4
 8000a22:	f7ff feeb 	bl	80007fc <d_source_name>
 8000a26:	462a      	mov	r2, r5
 8000a28:	4603      	mov	r3, r0
 8000a2a:	214d      	movs	r1, #77	; 0x4d
 8000a2c:	4620      	mov	r0, r4
 8000a2e:	f7ff fbcf 	bl	80001d0 <d_make_comp>
 8000a32:	68e3      	ldr	r3, [r4, #12]
 8000a34:	781a      	ldrb	r2, [r3, #0]
 8000a36:	2a42      	cmp	r2, #66	; 0x42
 8000a38:	4605      	mov	r5, r0
 8000a3a:	d0ef      	beq.n	8000a1c <d_substitution+0x140>
 8000a3c:	62a6      	str	r6, [r4, #40]	; 0x28
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	d084      	beq.n	800094c <d_substitution+0x70>
 8000a42:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8000a46:	4293      	cmp	r3, r2
 8000a48:	da80      	bge.n	800094c <d_substitution+0x70>
 8000a4a:	69e1      	ldr	r1, [r4, #28]
 8000a4c:	1c5a      	adds	r2, r3, #1
 8000a4e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8000a52:	6222      	str	r2, [r4, #32]
 8000a54:	e77b      	b.n	800094e <d_substitution+0x72>
 8000a56:	e9d3 7101 	ldrd	r7, r1, [r3, #4]
 8000a5a:	e7c6      	b.n	80009ea <d_substitution+0x10e>
 8000a5c:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 8000a60:	e7bf      	b.n	80009e2 <d_substitution+0x106>
 8000a62:	2500      	movs	r5, #0
 8000a64:	e7d5      	b.n	8000a12 <d_substitution+0x136>
 8000a66:	2100      	movs	r1, #0
 8000a68:	e7ba      	b.n	80009e0 <d_substitution+0x104>
 8000a6a:	bf00      	nop
 8000a6c:	0801f2fc 	.word	0x0801f2fc

08000a70 <d_type>:
 8000a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a74:	68c2      	ldr	r2, [r0, #12]
 8000a76:	b083      	sub	sp, #12
 8000a78:	4604      	mov	r4, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	f7ff fd7e 	bl	800057c <next_is_type_qual.isra.0>
 8000a80:	2800      	cmp	r0, #0
 8000a82:	d166      	bne.n	8000b52 <d_type+0xe2>
 8000a84:	7813      	ldrb	r3, [r2, #0]
 8000a86:	2b5a      	cmp	r3, #90	; 0x5a
 8000a88:	d831      	bhi.n	8000aee <d_type+0x7e>
 8000a8a:	2b2f      	cmp	r3, #47	; 0x2f
 8000a8c:	d95c      	bls.n	8000b48 <d_type+0xd8>
 8000a8e:	3b30      	subs	r3, #48	; 0x30
 8000a90:	2b2a      	cmp	r3, #42	; 0x2a
 8000a92:	d859      	bhi.n	8000b48 <d_type+0xd8>
 8000a94:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000a98:	008c008c 	.word	0x008c008c
 8000a9c:	008c008c 	.word	0x008c008c
 8000aa0:	008c008c 	.word	0x008c008c
 8000aa4:	008c008c 	.word	0x008c008c
 8000aa8:	008c008c 	.word	0x008c008c
 8000aac:	00580058 	.word	0x00580058
 8000ab0:	00580058 	.word	0x00580058
 8000ab4:	00580058 	.word	0x00580058
 8000ab8:	01d60058 	.word	0x01d60058
 8000abc:	00d90058 	.word	0x00d90058
 8000ac0:	005800ed 	.word	0x005800ed
 8000ac4:	016000e7 	.word	0x016000e7
 8000ac8:	00580058 	.word	0x00580058
 8000acc:	00580058 	.word	0x00580058
 8000ad0:	02180058 	.word	0x02180058
 8000ad4:	00cb008c 	.word	0x00cb008c
 8000ad8:	005800bd 	.word	0x005800bd
 8000adc:	019500af 	.word	0x019500af
 8000ae0:	01be016e 	.word	0x01be016e
 8000ae4:	00580058 	.word	0x00580058
 8000ae8:	00580058 	.word	0x00580058
 8000aec:	008c      	.short	0x008c
 8000aee:	3b61      	subs	r3, #97	; 0x61
 8000af0:	fa5f fc83 	uxtb.w	ip, r3
 8000af4:	f1bc 0f19 	cmp.w	ip, #25
 8000af8:	d826      	bhi.n	8000b48 <d_type+0xd8>
 8000afa:	4dc4      	ldr	r5, [pc, #784]	; (8000e0c <d_type+0x39c>)
 8000afc:	2101      	movs	r1, #1
 8000afe:	fa01 f10c 	lsl.w	r1, r1, ip
 8000b02:	400d      	ands	r5, r1
 8000b04:	b1ed      	cbz	r5, 8000b42 <d_type+0xd2>
 8000b06:	49c2      	ldr	r1, [pc, #776]	; (8000e10 <d_type+0x3a0>)
 8000b08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000b0c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8000b10:	e9d4 3505 	ldrd	r3, r5, [r4, #20]
 8000b14:	42ab      	cmp	r3, r5
 8000b16:	f280 83c5 	bge.w	80012a4 <d_type+0x834>
 8000b1a:	6926      	ldr	r6, [r4, #16]
 8000b1c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8000b20:	eb06 058c 	add.w	r5, r6, ip, lsl #2
 8000b24:	3301      	adds	r3, #1
 8000b26:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8000b2a:	6163      	str	r3, [r4, #20]
 8000b2c:	2327      	movs	r3, #39	; 0x27
 8000b2e:	f806 302c 	strb.w	r3, [r6, ip, lsl #2]
 8000b32:	60e9      	str	r1, [r5, #12]
 8000b34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b36:	6849      	ldr	r1, [r1, #4]
 8000b38:	3201      	adds	r2, #1
 8000b3a:	440b      	add	r3, r1
 8000b3c:	60e2      	str	r2, [r4, #12]
 8000b3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b40:	e003      	b.n	8000b4a <d_type+0xda>
 8000b42:	f1bc 0f14 	cmp.w	ip, #20
 8000b46:	d048      	beq.n	8000bda <d_type+0x16a>
 8000b48:	2500      	movs	r5, #0
 8000b4a:	4628      	mov	r0, r5
 8000b4c:	b003      	add	sp, #12
 8000b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b52:	2200      	movs	r2, #0
 8000b54:	a901      	add	r1, sp, #4
 8000b56:	4620      	mov	r0, r4
 8000b58:	f001 fab4 	bl	80020c4 <d_cv_qualifiers>
 8000b5c:	4605      	mov	r5, r0
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	d0f2      	beq.n	8000b48 <d_type+0xd8>
 8000b62:	68e3      	ldr	r3, [r4, #12]
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b46      	cmp	r3, #70	; 0x46
 8000b68:	4620      	mov	r0, r4
 8000b6a:	d01e      	beq.n	8000baa <d_type+0x13a>
 8000b6c:	f7ff ff80 	bl	8000a70 <d_type>
 8000b70:	6028      	str	r0, [r5, #0]
 8000b72:	2800      	cmp	r0, #0
 8000b74:	d0e8      	beq.n	8000b48 <d_type+0xd8>
 8000b76:	7803      	ldrb	r3, [r0, #0]
 8000b78:	3b1f      	subs	r3, #31
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d805      	bhi.n	8000b8a <d_type+0x11a>
 8000b7e:	9a01      	ldr	r2, [sp, #4]
 8000b80:	68c3      	ldr	r3, [r0, #12]
 8000b82:	60c2      	str	r2, [r0, #12]
 8000b84:	682a      	ldr	r2, [r5, #0]
 8000b86:	9201      	str	r2, [sp, #4]
 8000b88:	602b      	str	r3, [r5, #0]
 8000b8a:	9d01      	ldr	r5, [sp, #4]
 8000b8c:	2d00      	cmp	r5, #0
 8000b8e:	d0db      	beq.n	8000b48 <d_type+0xd8>
 8000b90:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8000b94:	4293      	cmp	r3, r2
 8000b96:	dad7      	bge.n	8000b48 <d_type+0xd8>
 8000b98:	69e1      	ldr	r1, [r4, #28]
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	4628      	mov	r0, r5
 8000b9e:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 8000ba2:	6222      	str	r2, [r4, #32]
 8000ba4:	b003      	add	sp, #12
 8000ba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000baa:	f000 fbfd 	bl	80013a8 <d_function_type>
 8000bae:	e7df      	b.n	8000b70 <d_type+0x100>
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	f001 fd6b 	bl	800268c <d_name>
 8000bb6:	4605      	mov	r5, r0
 8000bb8:	9001      	str	r0, [sp, #4]
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d0c4      	beq.n	8000b48 <d_type+0xd8>
 8000bbe:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	dac0      	bge.n	8000b48 <d_type+0xd8>
 8000bc6:	69e1      	ldr	r1, [r4, #28]
 8000bc8:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 8000bcc:	9d01      	ldr	r5, [sp, #4]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	4628      	mov	r0, r5
 8000bd2:	6222      	str	r2, [r4, #32]
 8000bd4:	b003      	add	sp, #12
 8000bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000bda:	3201      	adds	r2, #1
 8000bdc:	60e2      	str	r2, [r4, #12]
 8000bde:	4620      	mov	r0, r4
 8000be0:	f7ff fe0c 	bl	80007fc <d_source_name>
 8000be4:	462b      	mov	r3, r5
 8000be6:	4602      	mov	r2, r0
 8000be8:	2128      	movs	r1, #40	; 0x28
 8000bea:	4620      	mov	r0, r4
 8000bec:	f7ff faf0 	bl	80001d0 <d_make_comp>
 8000bf0:	4605      	mov	r5, r0
 8000bf2:	9001      	str	r0, [sp, #4]
 8000bf4:	e7e1      	b.n	8000bba <d_type+0x14a>
 8000bf6:	3201      	adds	r2, #1
 8000bf8:	60e2      	str	r2, [r4, #12]
 8000bfa:	4620      	mov	r0, r4
 8000bfc:	f7ff ff38 	bl	8000a70 <d_type>
 8000c00:	2300      	movs	r3, #0
 8000c02:	4602      	mov	r2, r0
 8000c04:	2123      	movs	r1, #35	; 0x23
 8000c06:	4620      	mov	r0, r4
 8000c08:	f7ff fae2 	bl	80001d0 <d_make_comp>
 8000c0c:	4605      	mov	r5, r0
 8000c0e:	9001      	str	r0, [sp, #4]
 8000c10:	e7d3      	b.n	8000bba <d_type+0x14a>
 8000c12:	3201      	adds	r2, #1
 8000c14:	60e2      	str	r2, [r4, #12]
 8000c16:	4620      	mov	r0, r4
 8000c18:	f7ff ff2a 	bl	8000a70 <d_type>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	4602      	mov	r2, r0
 8000c20:	2122      	movs	r1, #34	; 0x22
 8000c22:	4620      	mov	r0, r4
 8000c24:	f7ff fad4 	bl	80001d0 <d_make_comp>
 8000c28:	4605      	mov	r5, r0
 8000c2a:	9001      	str	r0, [sp, #4]
 8000c2c:	e7c5      	b.n	8000bba <d_type+0x14a>
 8000c2e:	3201      	adds	r2, #1
 8000c30:	60e2      	str	r2, [r4, #12]
 8000c32:	4620      	mov	r0, r4
 8000c34:	f7ff ff1c 	bl	8000a70 <d_type>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	2124      	movs	r1, #36	; 0x24
 8000c3e:	4620      	mov	r0, r4
 8000c40:	f7ff fac6 	bl	80001d0 <d_make_comp>
 8000c44:	4605      	mov	r5, r0
 8000c46:	9001      	str	r0, [sp, #4]
 8000c48:	e7b7      	b.n	8000bba <d_type+0x14a>
 8000c4a:	3201      	adds	r2, #1
 8000c4c:	60e2      	str	r2, [r4, #12]
 8000c4e:	4620      	mov	r0, r4
 8000c50:	f7ff ff0e 	bl	8000a70 <d_type>
 8000c54:	2300      	movs	r3, #0
 8000c56:	4602      	mov	r2, r0
 8000c58:	2125      	movs	r1, #37	; 0x25
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	f7ff fab8 	bl	80001d0 <d_make_comp>
 8000c60:	4605      	mov	r5, r0
 8000c62:	9001      	str	r0, [sp, #4]
 8000c64:	e7a9      	b.n	8000bba <d_type+0x14a>
 8000c66:	4620      	mov	r0, r4
 8000c68:	f000 fb9e 	bl	80013a8 <d_function_type>
 8000c6c:	4605      	mov	r5, r0
 8000c6e:	9001      	str	r0, [sp, #4]
 8000c70:	e7a3      	b.n	8000bba <d_type+0x14a>
 8000c72:	1c53      	adds	r3, r2, #1
 8000c74:	60e3      	str	r3, [r4, #12]
 8000c76:	7853      	ldrb	r3, [r2, #1]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	f43f af65 	beq.w	8000b48 <d_type+0xd8>
 8000c7e:	1c93      	adds	r3, r2, #2
 8000c80:	60e3      	str	r3, [r4, #12]
 8000c82:	7853      	ldrb	r3, [r2, #1]
 8000c84:	3b46      	subs	r3, #70	; 0x46
 8000c86:	2b30      	cmp	r3, #48	; 0x30
 8000c88:	f63f af5e 	bhi.w	8000b48 <d_type+0xd8>
 8000c8c:	a101      	add	r1, pc, #4	; (adr r1, 8000c94 <d_type+0x224>)
 8000c8e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000c92:	bf00      	nop
 8000c94:	08000f35 	.word	0x08000f35
 8000c98:	08000b49 	.word	0x08000b49
 8000c9c:	08000b49 	.word	0x08000b49
 8000ca0:	08000b49 	.word	0x08000b49
 8000ca4:	08000b49 	.word	0x08000b49
 8000ca8:	08000b49 	.word	0x08000b49
 8000cac:	08000b49 	.word	0x08000b49
 8000cb0:	08000b49 	.word	0x08000b49
 8000cb4:	08000b49 	.word	0x08000b49
 8000cb8:	08000b49 	.word	0x08000b49
 8000cbc:	08000b49 	.word	0x08000b49
 8000cc0:	08000b49 	.word	0x08000b49
 8000cc4:	08000b49 	.word	0x08000b49
 8000cc8:	08000b49 	.word	0x08000b49
 8000ccc:	08000ef9 	.word	0x08000ef9
 8000cd0:	08000b49 	.word	0x08000b49
 8000cd4:	08000b49 	.word	0x08000b49
 8000cd8:	08000b49 	.word	0x08000b49
 8000cdc:	08000b49 	.word	0x08000b49
 8000ce0:	08000b49 	.word	0x08000b49
 8000ce4:	08000b49 	.word	0x08000b49
 8000ce8:	08000b49 	.word	0x08000b49
 8000cec:	08000b49 	.word	0x08000b49
 8000cf0:	08000b49 	.word	0x08000b49
 8000cf4:	08000b49 	.word	0x08000b49
 8000cf8:	08000b49 	.word	0x08000b49
 8000cfc:	08000b49 	.word	0x08000b49
 8000d00:	08000fcd 	.word	0x08000fcd
 8000d04:	08000b49 	.word	0x08000b49
 8000d08:	08000fa1 	.word	0x08000fa1
 8000d0c:	080011bb 	.word	0x080011bb
 8000d10:	0800118b 	.word	0x0800118b
 8000d14:	08001029 	.word	0x08001029
 8000d18:	08000b49 	.word	0x08000b49
 8000d1c:	08000ff9 	.word	0x08000ff9
 8000d20:	0800115b 	.word	0x0800115b
 8000d24:	08000b49 	.word	0x08000b49
 8000d28:	08000b49 	.word	0x08000b49
 8000d2c:	08000b49 	.word	0x08000b49
 8000d30:	08000b49 	.word	0x08000b49
 8000d34:	0800112b 	.word	0x0800112b
 8000d38:	08000b49 	.word	0x08000b49
 8000d3c:	08001113 	.word	0x08001113
 8000d40:	08000b49 	.word	0x08000b49
 8000d44:	08000b49 	.word	0x08000b49
 8000d48:	080010e3 	.word	0x080010e3
 8000d4c:	08000ef9 	.word	0x08000ef9
 8000d50:	080010b3 	.word	0x080010b3
 8000d54:	08001059 	.word	0x08001059
 8000d58:	3201      	adds	r2, #1
 8000d5a:	60e2      	str	r2, [r4, #12]
 8000d5c:	4620      	mov	r0, r4
 8000d5e:	f7ff fe87 	bl	8000a70 <d_type>
 8000d62:	2300      	movs	r3, #0
 8000d64:	4602      	mov	r2, r0
 8000d66:	2126      	movs	r1, #38	; 0x26
 8000d68:	4620      	mov	r0, r4
 8000d6a:	f7ff fa31 	bl	80001d0 <d_make_comp>
 8000d6e:	4605      	mov	r5, r0
 8000d70:	9001      	str	r0, [sp, #4]
 8000d72:	e722      	b.n	8000bba <d_type+0x14a>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f7ff fcd5 	bl	8000724 <d_template_param>
 8000d7a:	68e6      	ldr	r6, [r4, #12]
 8000d7c:	9001      	str	r0, [sp, #4]
 8000d7e:	7833      	ldrb	r3, [r6, #0]
 8000d80:	2b49      	cmp	r3, #73	; 0x49
 8000d82:	4605      	mov	r5, r0
 8000d84:	f47f af19 	bne.w	8000bba <d_type+0x14a>
 8000d88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f040 8257 	bne.w	800123e <d_type+0x7ce>
 8000d90:	2800      	cmp	r0, #0
 8000d92:	f43f aed9 	beq.w	8000b48 <d_type+0xd8>
 8000d96:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 8000d9a:	428a      	cmp	r2, r1
 8000d9c:	f6bf aed4 	bge.w	8000b48 <d_type+0xd8>
 8000da0:	69e1      	ldr	r1, [r4, #28]
 8000da2:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8000da6:	3201      	adds	r2, #1
 8000da8:	6222      	str	r2, [r4, #32]
 8000daa:	7832      	ldrb	r2, [r6, #0]
 8000dac:	3a49      	subs	r2, #73	; 0x49
 8000dae:	2a01      	cmp	r2, #1
 8000db0:	d805      	bhi.n	8000dbe <d_type+0x34e>
 8000db2:	3601      	adds	r6, #1
 8000db4:	60e6      	str	r6, [r4, #12]
 8000db6:	4620      	mov	r0, r4
 8000db8:	f000 fe0a 	bl	80019d0 <d_template_args_1>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	462a      	mov	r2, r5
 8000dc0:	e01c      	b.n	8000dfc <d_type+0x38c>
 8000dc2:	7853      	ldrb	r3, [r2, #1]
 8000dc4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000dc8:	2a09      	cmp	r2, #9
 8000dca:	d905      	bls.n	8000dd8 <d_type+0x368>
 8000dcc:	2b5f      	cmp	r3, #95	; 0x5f
 8000dce:	d003      	beq.n	8000dd8 <d_type+0x368>
 8000dd0:	3b41      	subs	r3, #65	; 0x41
 8000dd2:	2b19      	cmp	r3, #25
 8000dd4:	f200 8226 	bhi.w	8001224 <d_type+0x7b4>
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4620      	mov	r0, r4
 8000ddc:	f7ff fd7e 	bl	80008dc <d_substitution>
 8000de0:	68e3      	ldr	r3, [r4, #12]
 8000de2:	9001      	str	r0, [sp, #4]
 8000de4:	781a      	ldrb	r2, [r3, #0]
 8000de6:	2a49      	cmp	r2, #73	; 0x49
 8000de8:	4605      	mov	r5, r0
 8000dea:	f47f aeae 	bne.w	8000b4a <d_type+0xda>
 8000dee:	3301      	adds	r3, #1
 8000df0:	60e3      	str	r3, [r4, #12]
 8000df2:	4620      	mov	r0, r4
 8000df4:	f000 fdec 	bl	80019d0 <d_template_args_1>
 8000df8:	462a      	mov	r2, r5
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	4620      	mov	r0, r4
 8000e00:	f7ff f9e6 	bl	80001d0 <d_make_comp>
 8000e04:	4605      	mov	r5, r0
 8000e06:	9001      	str	r0, [sp, #4]
 8000e08:	e6d7      	b.n	8000bba <d_type+0x14a>
 8000e0a:	bf00      	nop
 8000e0c:	03ec7bff 	.word	0x03ec7bff
 8000e10:	0801f3c0 	.word	0x0801f3c0
 8000e14:	3201      	adds	r2, #1
 8000e16:	60e2      	str	r2, [r4, #12]
 8000e18:	4620      	mov	r0, r4
 8000e1a:	f7ff fcef 	bl	80007fc <d_source_name>
 8000e1e:	68e3      	ldr	r3, [r4, #12]
 8000e20:	9001      	str	r0, [sp, #4]
 8000e22:	781a      	ldrb	r2, [r3, #0]
 8000e24:	2a49      	cmp	r2, #73	; 0x49
 8000e26:	4605      	mov	r5, r0
 8000e28:	f000 81e1 	beq.w	80011ee <d_type+0x77e>
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	f7ff fe1f 	bl	8000a70 <d_type>
 8000e32:	462b      	mov	r3, r5
 8000e34:	4602      	mov	r2, r0
 8000e36:	2121      	movs	r1, #33	; 0x21
 8000e38:	4620      	mov	r0, r4
 8000e3a:	f7ff f9c9 	bl	80001d0 <d_make_comp>
 8000e3e:	4605      	mov	r5, r0
 8000e40:	9001      	str	r0, [sp, #4]
 8000e42:	e6ba      	b.n	8000bba <d_type+0x14a>
 8000e44:	1c55      	adds	r5, r2, #1
 8000e46:	60e5      	str	r5, [r4, #12]
 8000e48:	7853      	ldrb	r3, [r2, #1]
 8000e4a:	2b5f      	cmp	r3, #95	; 0x5f
 8000e4c:	f000 81cd 	beq.w	80011ea <d_type+0x77a>
 8000e50:	3b30      	subs	r3, #48	; 0x30
 8000e52:	2b09      	cmp	r3, #9
 8000e54:	f200 81d8 	bhi.w	8001208 <d_type+0x798>
 8000e58:	462b      	mov	r3, r5
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	60e3      	str	r3, [r4, #12]
 8000e60:	7819      	ldrb	r1, [r3, #0]
 8000e62:	3930      	subs	r1, #48	; 0x30
 8000e64:	2909      	cmp	r1, #9
 8000e66:	d9f8      	bls.n	8000e5a <d_type+0x3ea>
 8000e68:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
 8000e6c:	4281      	cmp	r1, r0
 8000e6e:	ebac 0202 	sub.w	r2, ip, r2
 8000e72:	f6bf ae69 	bge.w	8000b48 <d_type+0xd8>
 8000e76:	6927      	ldr	r7, [r4, #16]
 8000e78:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8000e7c:	eb07 0680 	add.w	r6, r7, r0, lsl #2
 8000e80:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 8000e84:	2000      	movs	r0, #0
 8000e86:	3101      	adds	r1, #1
 8000e88:	4282      	cmp	r2, r0
 8000e8a:	e9c6 0001 	strd	r0, r0, [r6, #4]
 8000e8e:	6161      	str	r1, [r4, #20]
 8000e90:	f77f ae5a 	ble.w	8000b48 <d_type+0xd8>
 8000e94:	e9c6 0001 	strd	r0, r0, [r6, #4]
 8000e98:	f807 000e 	strb.w	r0, [r7, lr]
 8000e9c:	e9c6 5203 	strd	r5, r2, [r6, #12]
 8000ea0:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8000ea4:	461d      	mov	r5, r3
 8000ea6:	2a5f      	cmp	r2, #95	; 0x5f
 8000ea8:	f47f ae4e 	bne.w	8000b48 <d_type+0xd8>
 8000eac:	3501      	adds	r5, #1
 8000eae:	60e5      	str	r5, [r4, #12]
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	f7ff fddd 	bl	8000a70 <d_type>
 8000eb6:	4632      	mov	r2, r6
 8000eb8:	4603      	mov	r3, r0
 8000eba:	212a      	movs	r1, #42	; 0x2a
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	f7ff f987 	bl	80001d0 <d_make_comp>
 8000ec2:	4605      	mov	r5, r0
 8000ec4:	9001      	str	r0, [sp, #4]
 8000ec6:	e678      	b.n	8000bba <d_type+0x14a>
 8000ec8:	3201      	adds	r2, #1
 8000eca:	60e2      	str	r2, [r4, #12]
 8000ecc:	4620      	mov	r0, r4
 8000ece:	f7ff fdcf 	bl	8000a70 <d_type>
 8000ed2:	4605      	mov	r5, r0
 8000ed4:	2800      	cmp	r0, #0
 8000ed6:	f43f ae37 	beq.w	8000b48 <d_type+0xd8>
 8000eda:	4620      	mov	r0, r4
 8000edc:	f7ff fdc8 	bl	8000a70 <d_type>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	f43f ae30 	beq.w	8000b48 <d_type+0xd8>
 8000ee8:	462a      	mov	r2, r5
 8000eea:	212b      	movs	r1, #43	; 0x2b
 8000eec:	4620      	mov	r0, r4
 8000eee:	f7ff f96f 	bl	80001d0 <d_make_comp>
 8000ef2:	4605      	mov	r5, r0
 8000ef4:	9001      	str	r0, [sp, #4]
 8000ef6:	e660      	b.n	8000bba <d_type+0x14a>
 8000ef8:	2301      	movs	r3, #1
 8000efa:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8000efc:	6323      	str	r3, [r4, #48]	; 0x30
 8000efe:	4620      	mov	r0, r4
 8000f00:	f000 fe2e 	bl	8001b60 <d_expression_1>
 8000f04:	6325      	str	r5, [r4, #48]	; 0x30
 8000f06:	4602      	mov	r2, r0
 8000f08:	2300      	movs	r3, #0
 8000f0a:	2144      	movs	r1, #68	; 0x44
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	f7ff f95f 	bl	80001d0 <d_make_comp>
 8000f12:	4605      	mov	r5, r0
 8000f14:	9001      	str	r0, [sp, #4]
 8000f16:	2800      	cmp	r0, #0
 8000f18:	f43f ae16 	beq.w	8000b48 <d_type+0xd8>
 8000f1c:	68e3      	ldr	r3, [r4, #12]
 8000f1e:	781a      	ldrb	r2, [r3, #0]
 8000f20:	2a00      	cmp	r2, #0
 8000f22:	f43f ae11 	beq.w	8000b48 <d_type+0xd8>
 8000f26:	1c5a      	adds	r2, r3, #1
 8000f28:	60e2      	str	r2, [r4, #12]
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b45      	cmp	r3, #69	; 0x45
 8000f2e:	f47f ae0b 	bne.w	8000b48 <d_type+0xd8>
 8000f32:	e644      	b.n	8000bbe <d_type+0x14e>
 8000f34:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	f280 81b5 	bge.w	80012a8 <d_type+0x838>
 8000f3e:	6921      	ldr	r1, [r4, #16]
 8000f40:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8000f44:	eb01 0580 	add.w	r5, r1, r0, lsl #2
 8000f48:	3301      	adds	r3, #1
 8000f4a:	2600      	movs	r6, #0
 8000f4c:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8000f50:	6163      	str	r3, [r4, #20]
 8000f52:	232c      	movs	r3, #44	; 0x2c
 8000f54:	f801 3020 	strb.w	r3, [r1, r0, lsl #2]
 8000f58:	7893      	ldrb	r3, [r2, #2]
 8000f5a:	9501      	str	r5, [sp, #4]
 8000f5c:	3b30      	subs	r3, #48	; 0x30
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b09      	cmp	r3, #9
 8000f62:	bf94      	ite	ls
 8000f64:	2301      	movls	r3, #1
 8000f66:	4633      	movhi	r3, r6
 8000f68:	822b      	strh	r3, [r5, #16]
 8000f6a:	d802      	bhi.n	8000f72 <d_type+0x502>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	f7ff f9a7 	bl	80002c0 <d_number>
 8000f72:	4620      	mov	r0, r4
 8000f74:	f7ff fd7c 	bl	8000a70 <d_type>
 8000f78:	60e8      	str	r0, [r5, #12]
 8000f7a:	2800      	cmp	r0, #0
 8000f7c:	f43f ade4 	beq.w	8000b48 <d_type+0xd8>
 8000f80:	4620      	mov	r0, r4
 8000f82:	f7ff f99d 	bl	80002c0 <d_number>
 8000f86:	68e2      	ldr	r2, [r4, #12]
 8000f88:	7813      	ldrb	r3, [r2, #0]
 8000f8a:	b113      	cbz	r3, 8000f92 <d_type+0x522>
 8000f8c:	1c53      	adds	r3, r2, #1
 8000f8e:	60e3      	str	r3, [r4, #12]
 8000f90:	7813      	ldrb	r3, [r2, #0]
 8000f92:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
 8000f96:	fab3 f383 	clz	r3, r3
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	826b      	strh	r3, [r5, #18]
 8000f9e:	e5d4      	b.n	8000b4a <d_type+0xda>
 8000fa0:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	f6bf adcf 	bge.w	8000b48 <d_type+0xd8>
 8000faa:	6922      	ldr	r2, [r4, #16]
 8000fac:	49c0      	ldr	r1, [pc, #768]	; (80012b0 <d_type+0x840>)
 8000fae:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8000fb2:	00a8      	lsls	r0, r5, #2
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	6163      	str	r3, [r4, #20]
 8000fb8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8000fc2:	5413      	strb	r3, [r2, r0]
 8000fc4:	230e      	movs	r3, #14
 8000fc6:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8000fca:	e5be      	b.n	8000b4a <d_type+0xda>
 8000fcc:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	f6bf adb9 	bge.w	8000b48 <d_type+0xd8>
 8000fd6:	6922      	ldr	r2, [r4, #16]
 8000fd8:	49b6      	ldr	r1, [pc, #728]	; (80012b4 <d_type+0x844>)
 8000fda:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8000fde:	00a8      	lsls	r0, r5, #2
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	6163      	str	r3, [r4, #20]
 8000fe4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8000fee:	5413      	strb	r3, [r2, r0]
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8000ff6:	e5a8      	b.n	8000b4a <d_type+0xda>
 8000ff8:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	f280 816b 	bge.w	80012d8 <d_type+0x868>
 8001002:	6922      	ldr	r2, [r4, #16]
 8001004:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001008:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800100c:	3301      	adds	r3, #1
 800100e:	2000      	movs	r0, #0
 8001010:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8001014:	6163      	str	r3, [r4, #20]
 8001016:	2327      	movs	r3, #39	; 0x27
 8001018:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 800101c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800101e:	4aa6      	ldr	r2, [pc, #664]	; (80012b8 <d_type+0x848>)
 8001020:	60ea      	str	r2, [r5, #12]
 8001022:	3304      	adds	r3, #4
 8001024:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001026:	e590      	b.n	8000b4a <d_type+0xda>
 8001028:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800102c:	4293      	cmp	r3, r2
 800102e:	f280 8153 	bge.w	80012d8 <d_type+0x868>
 8001032:	6922      	ldr	r2, [r4, #16]
 8001034:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001038:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800103c:	3301      	adds	r3, #1
 800103e:	2000      	movs	r0, #0
 8001040:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8001044:	6163      	str	r3, [r4, #20]
 8001046:	2327      	movs	r3, #39	; 0x27
 8001048:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 800104c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800104e:	4a9b      	ldr	r2, [pc, #620]	; (80012bc <d_type+0x84c>)
 8001050:	60ea      	str	r2, [r5, #12]
 8001052:	3309      	adds	r3, #9
 8001054:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001056:	e578      	b.n	8000b4a <d_type+0xda>
 8001058:	7893      	ldrb	r3, [r2, #2]
 800105a:	2b5f      	cmp	r3, #95	; 0x5f
 800105c:	f000 8114 	beq.w	8001288 <d_type+0x818>
 8001060:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001064:	4293      	cmp	r3, r2
 8001066:	f6bf ad6f 	bge.w	8000b48 <d_type+0xd8>
 800106a:	6922      	ldr	r2, [r4, #16]
 800106c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001070:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8001074:	3301      	adds	r3, #1
 8001076:	2000      	movs	r0, #0
 8001078:	e9c5 0001 	strd	r0, r0, [r5, #4]
 800107c:	6163      	str	r3, [r4, #20]
 800107e:	2343      	movs	r3, #67	; 0x43
 8001080:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 8001084:	4620      	mov	r0, r4
 8001086:	f7ff f91b 	bl	80002c0 <d_number>
 800108a:	60e8      	str	r0, [r5, #12]
 800108c:	68e3      	ldr	r3, [r4, #12]
 800108e:	781a      	ldrb	r2, [r3, #0]
 8001090:	2a5f      	cmp	r2, #95	; 0x5f
 8001092:	f47f ad59 	bne.w	8000b48 <d_type+0xd8>
 8001096:	3301      	adds	r3, #1
 8001098:	60e3      	str	r3, [r4, #12]
 800109a:	4620      	mov	r0, r4
 800109c:	f7ff fce8 	bl	8000a70 <d_type>
 80010a0:	462a      	mov	r2, r5
 80010a2:	4603      	mov	r3, r0
 80010a4:	212d      	movs	r1, #45	; 0x2d
 80010a6:	4620      	mov	r0, r4
 80010a8:	f7ff f892 	bl	80001d0 <d_make_comp>
 80010ac:	4605      	mov	r5, r0
 80010ae:	9001      	str	r0, [sp, #4]
 80010b0:	e583      	b.n	8000bba <d_type+0x14a>
 80010b2:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80010b6:	4293      	cmp	r3, r2
 80010b8:	f280 810e 	bge.w	80012d8 <d_type+0x868>
 80010bc:	6922      	ldr	r2, [r4, #16]
 80010be:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80010c2:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 80010c6:	3301      	adds	r3, #1
 80010c8:	2000      	movs	r0, #0
 80010ca:	e9c5 0001 	strd	r0, r0, [r5, #4]
 80010ce:	6163      	str	r3, [r4, #20]
 80010d0:	2327      	movs	r3, #39	; 0x27
 80010d2:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 80010d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80010d8:	4a79      	ldr	r2, [pc, #484]	; (80012c0 <d_type+0x850>)
 80010da:	60ea      	str	r2, [r5, #12]
 80010dc:	3307      	adds	r3, #7
 80010de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80010e0:	e533      	b.n	8000b4a <d_type+0xda>
 80010e2:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80010e6:	4293      	cmp	r3, r2
 80010e8:	f280 80f6 	bge.w	80012d8 <d_type+0x868>
 80010ec:	6922      	ldr	r2, [r4, #16]
 80010ee:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80010f2:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 80010f6:	3301      	adds	r3, #1
 80010f8:	2000      	movs	r0, #0
 80010fa:	e9c5 0001 	strd	r0, r0, [r5, #4]
 80010fe:	6163      	str	r3, [r4, #20]
 8001100:	2327      	movs	r3, #39	; 0x27
 8001102:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 8001106:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001108:	4a6e      	ldr	r2, [pc, #440]	; (80012c4 <d_type+0x854>)
 800110a:	60ea      	str	r2, [r5, #12]
 800110c:	3308      	adds	r3, #8
 800110e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001110:	e51b      	b.n	8000b4a <d_type+0xda>
 8001112:	4620      	mov	r0, r4
 8001114:	f7ff fcac 	bl	8000a70 <d_type>
 8001118:	2300      	movs	r3, #0
 800111a:	4602      	mov	r2, r0
 800111c:	214c      	movs	r1, #76	; 0x4c
 800111e:	4620      	mov	r0, r4
 8001120:	f7ff f856 	bl	80001d0 <d_make_comp>
 8001124:	4605      	mov	r5, r0
 8001126:	9001      	str	r0, [sp, #4]
 8001128:	e547      	b.n	8000bba <d_type+0x14a>
 800112a:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800112e:	4293      	cmp	r3, r2
 8001130:	f280 80d2 	bge.w	80012d8 <d_type+0x868>
 8001134:	6922      	ldr	r2, [r4, #16]
 8001136:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800113a:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800113e:	3301      	adds	r3, #1
 8001140:	2000      	movs	r0, #0
 8001142:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8001146:	6163      	str	r3, [r4, #20]
 8001148:	2327      	movs	r3, #39	; 0x27
 800114a:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 800114e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001150:	4a5d      	ldr	r2, [pc, #372]	; (80012c8 <d_type+0x858>)
 8001152:	60ea      	str	r2, [r5, #12]
 8001154:	3311      	adds	r3, #17
 8001156:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001158:	e4f7      	b.n	8000b4a <d_type+0xda>
 800115a:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800115e:	4293      	cmp	r3, r2
 8001160:	f280 80ba 	bge.w	80012d8 <d_type+0x868>
 8001164:	6922      	ldr	r2, [r4, #16]
 8001166:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800116a:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800116e:	3301      	adds	r3, #1
 8001170:	2000      	movs	r0, #0
 8001172:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8001176:	6163      	str	r3, [r4, #20]
 8001178:	2327      	movs	r3, #39	; 0x27
 800117a:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 800117e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001180:	4a52      	ldr	r2, [pc, #328]	; (80012cc <d_type+0x85c>)
 8001182:	60ea      	str	r2, [r5, #12]
 8001184:	3308      	adds	r3, #8
 8001186:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001188:	e4df      	b.n	8000b4a <d_type+0xda>
 800118a:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800118e:	4293      	cmp	r3, r2
 8001190:	f280 80a2 	bge.w	80012d8 <d_type+0x868>
 8001194:	6922      	ldr	r2, [r4, #16]
 8001196:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800119a:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800119e:	3301      	adds	r3, #1
 80011a0:	2000      	movs	r0, #0
 80011a2:	e9c5 0001 	strd	r0, r0, [r5, #4]
 80011a6:	6163      	str	r3, [r4, #20]
 80011a8:	2327      	movs	r3, #39	; 0x27
 80011aa:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 80011ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80011b0:	4a47      	ldr	r2, [pc, #284]	; (80012d0 <d_type+0x860>)
 80011b2:	60ea      	str	r2, [r5, #12]
 80011b4:	330a      	adds	r3, #10
 80011b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80011b8:	e4c7      	b.n	8000b4a <d_type+0xda>
 80011ba:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 80011be:	4293      	cmp	r3, r2
 80011c0:	f280 808a 	bge.w	80012d8 <d_type+0x868>
 80011c4:	6922      	ldr	r2, [r4, #16]
 80011c6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80011ca:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 80011ce:	3301      	adds	r3, #1
 80011d0:	2000      	movs	r0, #0
 80011d2:	e9c5 0001 	strd	r0, r0, [r5, #4]
 80011d6:	6163      	str	r3, [r4, #20]
 80011d8:	2327      	movs	r3, #39	; 0x27
 80011da:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 80011de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80011e0:	4a3c      	ldr	r2, [pc, #240]	; (80012d4 <d_type+0x864>)
 80011e2:	60ea      	str	r2, [r5, #12]
 80011e4:	3309      	adds	r3, #9
 80011e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80011e8:	e4af      	b.n	8000b4a <d_type+0xda>
 80011ea:	2600      	movs	r6, #0
 80011ec:	e65e      	b.n	8000eac <d_type+0x43c>
 80011ee:	3301      	adds	r3, #1
 80011f0:	60e3      	str	r3, [r4, #12]
 80011f2:	4620      	mov	r0, r4
 80011f4:	f000 fbec 	bl	80019d0 <d_template_args_1>
 80011f8:	462a      	mov	r2, r5
 80011fa:	4603      	mov	r3, r0
 80011fc:	2104      	movs	r1, #4
 80011fe:	4620      	mov	r0, r4
 8001200:	f7fe ffe6 	bl	80001d0 <d_make_comp>
 8001204:	4605      	mov	r5, r0
 8001206:	e611      	b.n	8000e2c <d_type+0x3bc>
 8001208:	2301      	movs	r3, #1
 800120a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800120c:	6323      	str	r3, [r4, #48]	; 0x30
 800120e:	4620      	mov	r0, r4
 8001210:	f000 fca6 	bl	8001b60 <d_expression_1>
 8001214:	6325      	str	r5, [r4, #48]	; 0x30
 8001216:	4606      	mov	r6, r0
 8001218:	2800      	cmp	r0, #0
 800121a:	f43f ac95 	beq.w	8000b48 <d_type+0xd8>
 800121e:	68e5      	ldr	r5, [r4, #12]
 8001220:	782a      	ldrb	r2, [r5, #0]
 8001222:	e640      	b.n	8000ea6 <d_type+0x436>
 8001224:	4620      	mov	r0, r4
 8001226:	f001 fa31 	bl	800268c <d_name>
 800122a:	4605      	mov	r5, r0
 800122c:	9001      	str	r0, [sp, #4]
 800122e:	2800      	cmp	r0, #0
 8001230:	f43f ac8a 	beq.w	8000b48 <d_type+0xd8>
 8001234:	7803      	ldrb	r3, [r0, #0]
 8001236:	2b18      	cmp	r3, #24
 8001238:	f47f acc1 	bne.w	8000bbe <d_type+0x14e>
 800123c:	e485      	b.n	8000b4a <d_type+0xda>
 800123e:	1c73      	adds	r3, r6, #1
 8001240:	60e3      	str	r3, [r4, #12]
 8001242:	4620      	mov	r0, r4
 8001244:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8001248:	f8d4 8020 	ldr.w	r8, [r4, #32]
 800124c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800124e:	f000 fbbf 	bl	80019d0 <d_template_args_1>
 8001252:	68e3      	ldr	r3, [r4, #12]
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b49      	cmp	r3, #73	; 0x49
 8001258:	d006      	beq.n	8001268 <d_type+0x7f8>
 800125a:	60e6      	str	r6, [r4, #12]
 800125c:	f8c4 9014 	str.w	r9, [r4, #20]
 8001260:	f8c4 8020 	str.w	r8, [r4, #32]
 8001264:	62e7      	str	r7, [r4, #44]	; 0x2c
 8001266:	e4a8      	b.n	8000bba <d_type+0x14a>
 8001268:	2d00      	cmp	r5, #0
 800126a:	f43f ac6d 	beq.w	8000b48 <d_type+0xd8>
 800126e:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 8001272:	4299      	cmp	r1, r3
 8001274:	f6bf ac68 	bge.w	8000b48 <d_type+0xd8>
 8001278:	69e2      	ldr	r2, [r4, #28]
 800127a:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800127e:	3101      	adds	r1, #1
 8001280:	4603      	mov	r3, r0
 8001282:	462a      	mov	r2, r5
 8001284:	6221      	str	r1, [r4, #32]
 8001286:	e5b9      	b.n	8000dfc <d_type+0x38c>
 8001288:	3203      	adds	r2, #3
 800128a:	2301      	movs	r3, #1
 800128c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800128e:	60e2      	str	r2, [r4, #12]
 8001290:	6323      	str	r3, [r4, #48]	; 0x30
 8001292:	4620      	mov	r0, r4
 8001294:	f000 fc64 	bl	8001b60 <d_expression_1>
 8001298:	6325      	str	r5, [r4, #48]	; 0x30
 800129a:	4605      	mov	r5, r0
 800129c:	2800      	cmp	r0, #0
 800129e:	f47f aef5 	bne.w	800108c <d_type+0x61c>
 80012a2:	e451      	b.n	8000b48 <d_type+0xd8>
 80012a4:	68c3      	ldr	r3, [r0, #12]
 80012a6:	deff      	udf	#255	; 0xff
 80012a8:	2300      	movs	r3, #0
 80012aa:	701b      	strb	r3, [r3, #0]
 80012ac:	deff      	udf	#255	; 0xff
 80012ae:	bf00      	nop
 80012b0:	08023e4c 	.word	0x08023e4c
 80012b4:	08023e44 	.word	0x08023e44
 80012b8:	0801f604 	.word	0x0801f604
 80012bc:	0801f5c8 	.word	0x0801f5c8
 80012c0:	0801f618 	.word	0x0801f618
 80012c4:	0801f62c 	.word	0x0801f62c
 80012c8:	0801f654 	.word	0x0801f654
 80012cc:	0801f640 	.word	0x0801f640
 80012d0:	0801f5f0 	.word	0x0801f5f0
 80012d4:	0801f5dc 	.word	0x0801f5dc
 80012d8:	2300      	movs	r3, #0
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	deff      	udf	#255	; 0xff
 80012de:	bf00      	nop

080012e0 <d_parmlist>:
 80012e0:	b530      	push	{r4, r5, lr}
 80012e2:	68c2      	ldr	r2, [r0, #12]
 80012e4:	b083      	sub	sp, #12
 80012e6:	2300      	movs	r3, #0
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	7813      	ldrb	r3, [r2, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d034      	beq.n	800135a <d_parmlist+0x7a>
 80012f0:	4604      	mov	r4, r0
 80012f2:	ad01      	add	r5, sp, #4
 80012f4:	2b4f      	cmp	r3, #79	; 0x4f
 80012f6:	d00c      	beq.n	8001312 <d_parmlist+0x32>
 80012f8:	d809      	bhi.n	800130e <d_parmlist+0x2e>
 80012fa:	2b2e      	cmp	r3, #46	; 0x2e
 80012fc:	d001      	beq.n	8001302 <d_parmlist+0x22>
 80012fe:	2b45      	cmp	r3, #69	; 0x45
 8001300:	d10a      	bne.n	8001318 <d_parmlist+0x38>
 8001302:	9801      	ldr	r0, [sp, #4]
 8001304:	b348      	cbz	r0, 800135a <d_parmlist+0x7a>
 8001306:	6903      	ldr	r3, [r0, #16]
 8001308:	b1cb      	cbz	r3, 800133e <d_parmlist+0x5e>
 800130a:	b003      	add	sp, #12
 800130c:	bd30      	pop	{r4, r5, pc}
 800130e:	2b52      	cmp	r3, #82	; 0x52
 8001310:	d102      	bne.n	8001318 <d_parmlist+0x38>
 8001312:	7853      	ldrb	r3, [r2, #1]
 8001314:	2b45      	cmp	r3, #69	; 0x45
 8001316:	d0f4      	beq.n	8001302 <d_parmlist+0x22>
 8001318:	4620      	mov	r0, r4
 800131a:	f7ff fba9 	bl	8000a70 <d_type>
 800131e:	4602      	mov	r2, r0
 8001320:	2300      	movs	r3, #0
 8001322:	212e      	movs	r1, #46	; 0x2e
 8001324:	4620      	mov	r0, r4
 8001326:	b1c2      	cbz	r2, 800135a <d_parmlist+0x7a>
 8001328:	f7fe ff52 	bl	80001d0 <d_make_comp>
 800132c:	6028      	str	r0, [r5, #0]
 800132e:	b1a0      	cbz	r0, 800135a <d_parmlist+0x7a>
 8001330:	68e2      	ldr	r2, [r4, #12]
 8001332:	7813      	ldrb	r3, [r2, #0]
 8001334:	f100 0510 	add.w	r5, r0, #16
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1db      	bne.n	80012f4 <d_parmlist+0x14>
 800133c:	e7e1      	b.n	8001302 <d_parmlist+0x22>
 800133e:	68c2      	ldr	r2, [r0, #12]
 8001340:	7811      	ldrb	r1, [r2, #0]
 8001342:	2927      	cmp	r1, #39	; 0x27
 8001344:	d1e1      	bne.n	800130a <d_parmlist+0x2a>
 8001346:	68d2      	ldr	r2, [r2, #12]
 8001348:	7c11      	ldrb	r1, [r2, #16]
 800134a:	2909      	cmp	r1, #9
 800134c:	d1dd      	bne.n	800130a <d_parmlist+0x2a>
 800134e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001350:	6852      	ldr	r2, [r2, #4]
 8001352:	1a89      	subs	r1, r1, r2
 8001354:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001356:	60c3      	str	r3, [r0, #12]
 8001358:	e7d7      	b.n	800130a <d_parmlist+0x2a>
 800135a:	2000      	movs	r0, #0
 800135c:	b003      	add	sp, #12
 800135e:	bd30      	pop	{r4, r5, pc}

08001360 <d_bare_function_type>:
 8001360:	b570      	push	{r4, r5, r6, lr}
 8001362:	68c3      	ldr	r3, [r0, #12]
 8001364:	781a      	ldrb	r2, [r3, #0]
 8001366:	2a4a      	cmp	r2, #74	; 0x4a
 8001368:	4605      	mov	r5, r0
 800136a:	d01a      	beq.n	80013a2 <d_bare_function_type+0x42>
 800136c:	b181      	cbz	r1, 8001390 <d_bare_function_type+0x30>
 800136e:	4628      	mov	r0, r5
 8001370:	f7ff fb7e 	bl	8000a70 <d_type>
 8001374:	4604      	mov	r4, r0
 8001376:	b190      	cbz	r0, 800139e <d_bare_function_type+0x3e>
 8001378:	4628      	mov	r0, r5
 800137a:	f7ff ffb1 	bl	80012e0 <d_parmlist>
 800137e:	4603      	mov	r3, r0
 8001380:	b168      	cbz	r0, 800139e <d_bare_function_type+0x3e>
 8001382:	4622      	mov	r2, r4
 8001384:	4628      	mov	r0, r5
 8001386:	2129      	movs	r1, #41	; 0x29
 8001388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800138c:	f7fe bf20 	b.w	80001d0 <d_make_comp>
 8001390:	4628      	mov	r0, r5
 8001392:	460c      	mov	r4, r1
 8001394:	f7ff ffa4 	bl	80012e0 <d_parmlist>
 8001398:	4603      	mov	r3, r0
 800139a:	2800      	cmp	r0, #0
 800139c:	d1f1      	bne.n	8001382 <d_bare_function_type+0x22>
 800139e:	2000      	movs	r0, #0
 80013a0:	bd70      	pop	{r4, r5, r6, pc}
 80013a2:	3301      	adds	r3, #1
 80013a4:	60c3      	str	r3, [r0, #12]
 80013a6:	e7e2      	b.n	800136e <d_bare_function_type+0xe>

080013a8 <d_function_type>:
 80013a8:	b510      	push	{r4, lr}
 80013aa:	4604      	mov	r4, r0
 80013ac:	6880      	ldr	r0, [r0, #8]
 80013ae:	f410 2080 	ands.w	r0, r0, #262144	; 0x40000
 80013b2:	d10b      	bne.n	80013cc <d_function_type+0x24>
 80013b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80013b6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80013ba:	d806      	bhi.n	80013ca <d_function_type+0x22>
 80013bc:	1c51      	adds	r1, r2, #1
 80013be:	68e3      	ldr	r3, [r4, #12]
 80013c0:	63e1      	str	r1, [r4, #60]	; 0x3c
 80013c2:	7819      	ldrb	r1, [r3, #0]
 80013c4:	2946      	cmp	r1, #70	; 0x46
 80013c6:	d007      	beq.n	80013d8 <d_function_type+0x30>
 80013c8:	63e2      	str	r2, [r4, #60]	; 0x3c
 80013ca:	bd10      	pop	{r4, pc}
 80013cc:	68e3      	ldr	r3, [r4, #12]
 80013ce:	781a      	ldrb	r2, [r3, #0]
 80013d0:	2a46      	cmp	r2, #70	; 0x46
 80013d2:	d001      	beq.n	80013d8 <d_function_type+0x30>
 80013d4:	2000      	movs	r0, #0
 80013d6:	bd10      	pop	{r4, pc}
 80013d8:	1c5a      	adds	r2, r3, #1
 80013da:	60e2      	str	r2, [r4, #12]
 80013dc:	785a      	ldrb	r2, [r3, #1]
 80013de:	2a59      	cmp	r2, #89	; 0x59
 80013e0:	bf04      	itt	eq
 80013e2:	3302      	addeq	r3, #2
 80013e4:	60e3      	streq	r3, [r4, #12]
 80013e6:	2101      	movs	r1, #1
 80013e8:	4620      	mov	r0, r4
 80013ea:	f7ff ffb9 	bl	8001360 <d_bare_function_type>
 80013ee:	4601      	mov	r1, r0
 80013f0:	4620      	mov	r0, r4
 80013f2:	f7fe ffc3 	bl	800037c <d_ref_qualifier>
 80013f6:	68e3      	ldr	r3, [r4, #12]
 80013f8:	781a      	ldrb	r2, [r3, #0]
 80013fa:	2a45      	cmp	r2, #69	; 0x45
 80013fc:	bf04      	itt	eq
 80013fe:	3301      	addeq	r3, #1
 8001400:	60e3      	streq	r3, [r4, #12]
 8001402:	68a3      	ldr	r3, [r4, #8]
 8001404:	bf18      	it	ne
 8001406:	2000      	movne	r0, #0
 8001408:	035b      	lsls	r3, r3, #13
 800140a:	d4de      	bmi.n	80013ca <d_function_type+0x22>
 800140c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800140e:	3a01      	subs	r2, #1
 8001410:	e7da      	b.n	80013c8 <d_function_type+0x20>
 8001412:	bf00      	nop

08001414 <d_operator_name>:
 8001414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001416:	68c3      	ldr	r3, [r0, #12]
 8001418:	781f      	ldrb	r7, [r3, #0]
 800141a:	4606      	mov	r6, r0
 800141c:	bb77      	cbnz	r7, 800147c <d_operator_name+0x68>
 800141e:	f04f 0e00 	mov.w	lr, #0
 8001422:	4d3d      	ldr	r5, [pc, #244]	; (8001518 <d_operator_name+0x104>)
 8001424:	2148      	movs	r1, #72	; 0x48
 8001426:	2200      	movs	r2, #0
 8001428:	1a8b      	subs	r3, r1, r2
 800142a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800142e:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8001432:	0118      	lsls	r0, r3, #4
 8001434:	eb05 1c03 	add.w	ip, r5, r3, lsl #4
 8001438:	582c      	ldr	r4, [r5, r0]
 800143a:	7820      	ldrb	r0, [r4, #0]
 800143c:	42b8      	cmp	r0, r7
 800143e:	d006      	beq.n	800144e <d_operator_name+0x3a>
 8001440:	bf94      	ite	ls
 8001442:	1c5a      	addls	r2, r3, #1
 8001444:	4619      	movhi	r1, r3
 8001446:	428a      	cmp	r2, r1
 8001448:	d1ee      	bne.n	8001428 <d_operator_name+0x14>
 800144a:	2000      	movs	r0, #0
 800144c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800144e:	7860      	ldrb	r0, [r4, #1]
 8001450:	4570      	cmp	r0, lr
 8001452:	d1f5      	bne.n	8001440 <d_operator_name+0x2c>
 8001454:	e9d6 3205 	ldrd	r3, r2, [r6, #20]
 8001458:	4293      	cmp	r3, r2
 800145a:	daf6      	bge.n	800144a <d_operator_name+0x36>
 800145c:	6932      	ldr	r2, [r6, #16]
 800145e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001462:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8001466:	3301      	adds	r3, #1
 8001468:	2400      	movs	r4, #0
 800146a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800146e:	6173      	str	r3, [r6, #20]
 8001470:	2332      	movs	r3, #50	; 0x32
 8001472:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 8001476:	f8c0 c00c 	str.w	ip, [r0, #12]
 800147a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	60c2      	str	r2, [r0, #12]
 8001480:	f893 e001 	ldrb.w	lr, [r3, #1]
 8001484:	781f      	ldrb	r7, [r3, #0]
 8001486:	f1be 0f00 	cmp.w	lr, #0
 800148a:	d102      	bne.n	8001492 <d_operator_name+0x7e>
 800148c:	2f76      	cmp	r7, #118	; 0x76
 800148e:	d0c8      	beq.n	8001422 <d_operator_name+0xe>
 8001490:	e7c5      	b.n	800141e <d_operator_name+0xa>
 8001492:	1c9a      	adds	r2, r3, #2
 8001494:	60c2      	str	r2, [r0, #12]
 8001496:	2f76      	cmp	r7, #118	; 0x76
 8001498:	f893 e001 	ldrb.w	lr, [r3, #1]
 800149c:	d11f      	bne.n	80014de <d_operator_name+0xca>
 800149e:	f1ae 0430 	sub.w	r4, lr, #48	; 0x30
 80014a2:	b2e3      	uxtb	r3, r4
 80014a4:	2b09      	cmp	r3, #9
 80014a6:	d8bc      	bhi.n	8001422 <d_operator_name+0xe>
 80014a8:	f7ff f9a8 	bl	80007fc <d_source_name>
 80014ac:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
 80014b0:	428b      	cmp	r3, r1
 80014b2:	4602      	mov	r2, r0
 80014b4:	dac9      	bge.n	800144a <d_operator_name+0x36>
 80014b6:	6937      	ldr	r7, [r6, #16]
 80014b8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80014bc:	eb07 0081 	add.w	r0, r7, r1, lsl #2
 80014c0:	3301      	adds	r3, #1
 80014c2:	2500      	movs	r5, #0
 80014c4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80014c8:	0089      	lsls	r1, r1, #2
 80014ca:	6173      	str	r3, [r6, #20]
 80014cc:	2a00      	cmp	r2, #0
 80014ce:	d0bc      	beq.n	800144a <d_operator_name+0x36>
 80014d0:	2333      	movs	r3, #51	; 0x33
 80014d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80014d6:	547b      	strb	r3, [r7, r1]
 80014d8:	e9c0 4203 	strd	r4, r2, [r0, #12]
 80014dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014de:	2f63      	cmp	r7, #99	; 0x63
 80014e0:	d19f      	bne.n	8001422 <d_operator_name+0xe>
 80014e2:	f1be 0f76 	cmp.w	lr, #118	; 0x76
 80014e6:	d19c      	bne.n	8001422 <d_operator_name+0xe>
 80014e8:	e9d0 340c 	ldrd	r3, r4, [r0, #48]	; 0x30
 80014ec:	fab3 f383 	clz	r3, r3
 80014f0:	095b      	lsrs	r3, r3, #5
 80014f2:	6343      	str	r3, [r0, #52]	; 0x34
 80014f4:	f7ff fabc 	bl	8000a70 <d_type>
 80014f8:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80014fa:	4602      	mov	r2, r0
 80014fc:	b133      	cbz	r3, 800150c <d_operator_name+0xf8>
 80014fe:	2300      	movs	r3, #0
 8001500:	2135      	movs	r1, #53	; 0x35
 8001502:	4630      	mov	r0, r6
 8001504:	f7fe fe64 	bl	80001d0 <d_make_comp>
 8001508:	6374      	str	r4, [r6, #52]	; 0x34
 800150a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800150c:	2134      	movs	r1, #52	; 0x34
 800150e:	4630      	mov	r0, r6
 8001510:	f7fe fe5e 	bl	80001d0 <d_make_comp>
 8001514:	e7f8      	b.n	8001508 <d_operator_name+0xf4>
 8001516:	bf00      	nop
 8001518:	0801f668 	.word	0x0801f668

0800151c <d_unqualified_name>:
 800151c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800151e:	68c3      	ldr	r3, [r0, #12]
 8001520:	781a      	ldrb	r2, [r3, #0]
 8001522:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8001526:	2909      	cmp	r1, #9
 8001528:	4604      	mov	r4, r0
 800152a:	d965      	bls.n	80015f8 <d_unqualified_name+0xdc>
 800152c:	2a55      	cmp	r2, #85	; 0x55
 800152e:	d06c      	beq.n	800160a <d_unqualified_name+0xee>
 8001530:	d838      	bhi.n	80015a4 <d_unqualified_name+0x88>
 8001532:	2a44      	cmp	r2, #68	; 0x44
 8001534:	d90f      	bls.n	8001556 <d_unqualified_name+0x3a>
 8001536:	2a4c      	cmp	r2, #76	; 0x4c
 8001538:	d10a      	bne.n	8001550 <d_unqualified_name+0x34>
 800153a:	3301      	adds	r3, #1
 800153c:	60c3      	str	r3, [r0, #12]
 800153e:	f7ff f95d 	bl	80007fc <d_source_name>
 8001542:	4605      	mov	r5, r0
 8001544:	b120      	cbz	r0, 8001550 <d_unqualified_name+0x34>
 8001546:	4620      	mov	r0, r4
 8001548:	f7fe ffaa 	bl	80004a0 <d_discriminator>
 800154c:	2800      	cmp	r0, #0
 800154e:	d13b      	bne.n	80015c8 <d_unqualified_name+0xac>
 8001550:	2500      	movs	r5, #0
 8001552:	4628      	mov	r0, r5
 8001554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001556:	2a42      	cmp	r2, #66	; 0x42
 8001558:	d9fa      	bls.n	8001550 <d_unqualified_name+0x34>
 800155a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800155c:	b141      	cbz	r1, 8001570 <d_unqualified_name+0x54>
 800155e:	7808      	ldrb	r0, [r1, #0]
 8001560:	2800      	cmp	r0, #0
 8001562:	f040 8091 	bne.w	8001688 <d_unqualified_name+0x16c>
 8001566:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001568:	6908      	ldr	r0, [r1, #16]
 800156a:	4402      	add	r2, r0
 800156c:	62e2      	str	r2, [r4, #44]	; 0x2c
 800156e:	781a      	ldrb	r2, [r3, #0]
 8001570:	2a43      	cmp	r2, #67	; 0x43
 8001572:	f000 80c8 	beq.w	8001706 <d_unqualified_name+0x1ea>
 8001576:	2a44      	cmp	r2, #68	; 0x44
 8001578:	f040 8084 	bne.w	8001684 <d_unqualified_name+0x168>
 800157c:	785a      	ldrb	r2, [r3, #1]
 800157e:	3a30      	subs	r2, #48	; 0x30
 8001580:	2a05      	cmp	r2, #5
 8001582:	d8e5      	bhi.n	8001550 <d_unqualified_name+0x34>
 8001584:	a001      	add	r0, pc, #4	; (adr r0, 800158c <d_unqualified_name+0x70>)
 8001586:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800158a:	bf00      	nop
 800158c:	08001697 	.word	0x08001697
 8001590:	080016ef 	.word	0x080016ef
 8001594:	080016dd 	.word	0x080016dd
 8001598:	08001551 	.word	0x08001551
 800159c:	080016e9 	.word	0x080016e9
 80015a0:	080016e3 	.word	0x080016e3
 80015a4:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 80015a8:	2919      	cmp	r1, #25
 80015aa:	d8d1      	bhi.n	8001550 <d_unqualified_name+0x34>
 80015ac:	2a6f      	cmp	r2, #111	; 0x6f
 80015ae:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80015b0:	f000 80a0 	beq.w	80016f4 <d_unqualified_name+0x1d8>
 80015b4:	4620      	mov	r0, r4
 80015b6:	f7ff ff2d 	bl	8001414 <d_operator_name>
 80015ba:	6325      	str	r5, [r4, #48]	; 0x30
 80015bc:	4605      	mov	r5, r0
 80015be:	b118      	cbz	r0, 80015c8 <d_unqualified_name+0xac>
 80015c0:	7803      	ldrb	r3, [r0, #0]
 80015c2:	2b32      	cmp	r3, #50	; 0x32
 80015c4:	f000 80c6 	beq.w	8001754 <d_unqualified_name+0x238>
 80015c8:	68e3      	ldr	r3, [r4, #12]
 80015ca:	781a      	ldrb	r2, [r3, #0]
 80015cc:	2a42      	cmp	r2, #66	; 0x42
 80015ce:	d1c0      	bne.n	8001552 <d_unqualified_name+0x36>
 80015d0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80015d2:	3301      	adds	r3, #1
 80015d4:	60e3      	str	r3, [r4, #12]
 80015d6:	4620      	mov	r0, r4
 80015d8:	f7ff f910 	bl	80007fc <d_source_name>
 80015dc:	462a      	mov	r2, r5
 80015de:	4603      	mov	r3, r0
 80015e0:	214d      	movs	r1, #77	; 0x4d
 80015e2:	4620      	mov	r0, r4
 80015e4:	f7fe fdf4 	bl	80001d0 <d_make_comp>
 80015e8:	68e3      	ldr	r3, [r4, #12]
 80015ea:	781a      	ldrb	r2, [r3, #0]
 80015ec:	2a42      	cmp	r2, #66	; 0x42
 80015ee:	4605      	mov	r5, r0
 80015f0:	d0ef      	beq.n	80015d2 <d_unqualified_name+0xb6>
 80015f2:	62a6      	str	r6, [r4, #40]	; 0x28
 80015f4:	4628      	mov	r0, r5
 80015f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015f8:	f7ff f900 	bl	80007fc <d_source_name>
 80015fc:	68e3      	ldr	r3, [r4, #12]
 80015fe:	781a      	ldrb	r2, [r3, #0]
 8001600:	4605      	mov	r5, r0
 8001602:	2a42      	cmp	r2, #66	; 0x42
 8001604:	d0e4      	beq.n	80015d0 <d_unqualified_name+0xb4>
 8001606:	4628      	mov	r0, r5
 8001608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800160a:	785a      	ldrb	r2, [r3, #1]
 800160c:	2a6c      	cmp	r2, #108	; 0x6c
 800160e:	f000 80c1 	beq.w	8001794 <d_unqualified_name+0x278>
 8001612:	2a74      	cmp	r2, #116	; 0x74
 8001614:	d19c      	bne.n	8001550 <d_unqualified_name+0x34>
 8001616:	1c59      	adds	r1, r3, #1
 8001618:	60c1      	str	r1, [r0, #12]
 800161a:	785a      	ldrb	r2, [r3, #1]
 800161c:	2a74      	cmp	r2, #116	; 0x74
 800161e:	d137      	bne.n	8001690 <d_unqualified_name+0x174>
 8001620:	1c9a      	adds	r2, r3, #2
 8001622:	60c2      	str	r2, [r0, #12]
 8001624:	789a      	ldrb	r2, [r3, #2]
 8001626:	2a5f      	cmp	r2, #95	; 0x5f
 8001628:	f000 8108 	beq.w	800183c <d_unqualified_name+0x320>
 800162c:	2a6e      	cmp	r2, #110	; 0x6e
 800162e:	d08f      	beq.n	8001550 <d_unqualified_name+0x34>
 8001630:	f7fe fe46 	bl	80002c0 <d_number>
 8001634:	3001      	adds	r0, #1
 8001636:	68e3      	ldr	r3, [r4, #12]
 8001638:	f100 80fd 	bmi.w	8001836 <d_unqualified_name+0x31a>
 800163c:	781a      	ldrb	r2, [r3, #0]
 800163e:	2a5f      	cmp	r2, #95	; 0x5f
 8001640:	d120      	bne.n	8001684 <d_unqualified_name+0x168>
 8001642:	3301      	adds	r3, #1
 8001644:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 8001648:	428a      	cmp	r2, r1
 800164a:	60e3      	str	r3, [r4, #12]
 800164c:	f280 8100 	bge.w	8001850 <d_unqualified_name+0x334>
 8001650:	6926      	ldr	r6, [r4, #16]
 8001652:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 8001656:	eb06 0587 	add.w	r5, r6, r7, lsl #2
 800165a:	3201      	adds	r2, #1
 800165c:	2100      	movs	r1, #0
 800165e:	e9c5 1101 	strd	r1, r1, [r5, #4]
 8001662:	6162      	str	r2, [r4, #20]
 8001664:	2249      	movs	r2, #73	; 0x49
 8001666:	f806 2027 	strb.w	r2, [r6, r7, lsl #2]
 800166a:	60e8      	str	r0, [r5, #12]
 800166c:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
 8001670:	4282      	cmp	r2, r0
 8001672:	f280 80ea 	bge.w	800184a <d_unqualified_name+0x32e>
 8001676:	69e1      	ldr	r1, [r4, #28]
 8001678:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 800167c:	3201      	adds	r2, #1
 800167e:	6222      	str	r2, [r4, #32]
 8001680:	781a      	ldrb	r2, [r3, #0]
 8001682:	e7be      	b.n	8001602 <d_unqualified_name+0xe6>
 8001684:	2500      	movs	r5, #0
 8001686:	e7bc      	b.n	8001602 <d_unqualified_name+0xe6>
 8001688:	2818      	cmp	r0, #24
 800168a:	f47f af71 	bne.w	8001570 <d_unqualified_name+0x54>
 800168e:	e76a      	b.n	8001566 <d_unqualified_name+0x4a>
 8001690:	460b      	mov	r3, r1
 8001692:	2500      	movs	r5, #0
 8001694:	e7b5      	b.n	8001602 <d_unqualified_name+0xe6>
 8001696:	f04f 0e01 	mov.w	lr, #1
 800169a:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 800169e:	1c9f      	adds	r7, r3, #2
 80016a0:	4282      	cmp	r2, r0
 80016a2:	60e7      	str	r7, [r4, #12]
 80016a4:	f280 80c2 	bge.w	800182c <d_unqualified_name+0x310>
 80016a8:	f8d4 c010 	ldr.w	ip, [r4, #16]
 80016ac:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 80016b0:	eb0c 0580 	add.w	r5, ip, r0, lsl #2
 80016b4:	3201      	adds	r2, #1
 80016b6:	2600      	movs	r6, #0
 80016b8:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80016bc:	0080      	lsls	r0, r0, #2
 80016be:	6162      	str	r2, [r4, #20]
 80016c0:	2900      	cmp	r1, #0
 80016c2:	f000 80b3 	beq.w	800182c <d_unqualified_name+0x310>
 80016c6:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80016ca:	2208      	movs	r2, #8
 80016cc:	f80c 2000 	strb.w	r2, [ip, r0]
 80016d0:	f885 e00c 	strb.w	lr, [r5, #12]
 80016d4:	6129      	str	r1, [r5, #16]
 80016d6:	789a      	ldrb	r2, [r3, #2]
 80016d8:	463b      	mov	r3, r7
 80016da:	e792      	b.n	8001602 <d_unqualified_name+0xe6>
 80016dc:	f04f 0e03 	mov.w	lr, #3
 80016e0:	e7db      	b.n	800169a <d_unqualified_name+0x17e>
 80016e2:	f04f 0e05 	mov.w	lr, #5
 80016e6:	e7d8      	b.n	800169a <d_unqualified_name+0x17e>
 80016e8:	f04f 0e04 	mov.w	lr, #4
 80016ec:	e7d5      	b.n	800169a <d_unqualified_name+0x17e>
 80016ee:	f04f 0e02 	mov.w	lr, #2
 80016f2:	e7d2      	b.n	800169a <d_unqualified_name+0x17e>
 80016f4:	785a      	ldrb	r2, [r3, #1]
 80016f6:	2a6e      	cmp	r2, #110	; 0x6e
 80016f8:	f47f af5c 	bne.w	80015b4 <d_unqualified_name+0x98>
 80016fc:	3302      	adds	r3, #2
 80016fe:	2200      	movs	r2, #0
 8001700:	60c3      	str	r3, [r0, #12]
 8001702:	6302      	str	r2, [r0, #48]	; 0x30
 8001704:	e756      	b.n	80015b4 <d_unqualified_name+0x98>
 8001706:	785a      	ldrb	r2, [r3, #1]
 8001708:	2a49      	cmp	r2, #73	; 0x49
 800170a:	d07f      	beq.n	800180c <d_unqualified_name+0x2f0>
 800170c:	f1a2 0031 	sub.w	r0, r2, #49	; 0x31
 8001710:	2804      	cmp	r0, #4
 8001712:	f63f af1d 	bhi.w	8001550 <d_unqualified_name+0x34>
 8001716:	3a30      	subs	r2, #48	; 0x30
 8001718:	3302      	adds	r3, #2
 800171a:	b2d6      	uxtb	r6, r2
 800171c:	60e3      	str	r3, [r4, #12]
 800171e:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001722:	4293      	cmp	r3, r2
 8001724:	f280 8086 	bge.w	8001834 <d_unqualified_name+0x318>
 8001728:	6927      	ldr	r7, [r4, #16]
 800172a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800172e:	eb07 0582 	add.w	r5, r7, r2, lsl #2
 8001732:	3301      	adds	r3, #1
 8001734:	2000      	movs	r0, #0
 8001736:	e9c5 0001 	strd	r0, r0, [r5, #4]
 800173a:	0092      	lsls	r2, r2, #2
 800173c:	6163      	str	r3, [r4, #20]
 800173e:	2900      	cmp	r1, #0
 8001740:	d078      	beq.n	8001834 <d_unqualified_name+0x318>
 8001742:	2307      	movs	r3, #7
 8001744:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8001748:	54bb      	strb	r3, [r7, r2]
 800174a:	68e3      	ldr	r3, [r4, #12]
 800174c:	732e      	strb	r6, [r5, #12]
 800174e:	6129      	str	r1, [r5, #16]
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	e756      	b.n	8001602 <d_unqualified_name+0xe6>
 8001754:	68c2      	ldr	r2, [r0, #12]
 8001756:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001758:	6891      	ldr	r1, [r2, #8]
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	3307      	adds	r3, #7
 800175e:	440b      	add	r3, r1
 8001760:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001762:	7813      	ldrb	r3, [r2, #0]
 8001764:	2b6c      	cmp	r3, #108	; 0x6c
 8001766:	f47f af2f 	bne.w	80015c8 <d_unqualified_name+0xac>
 800176a:	7853      	ldrb	r3, [r2, #1]
 800176c:	2b69      	cmp	r3, #105	; 0x69
 800176e:	f47f af2b 	bne.w	80015c8 <d_unqualified_name+0xac>
 8001772:	7893      	ldrb	r3, [r2, #2]
 8001774:	2b00      	cmp	r3, #0
 8001776:	f47f af27 	bne.w	80015c8 <d_unqualified_name+0xac>
 800177a:	4620      	mov	r0, r4
 800177c:	f7ff f83e 	bl	80007fc <d_source_name>
 8001780:	462a      	mov	r2, r5
 8001782:	4603      	mov	r3, r0
 8001784:	2137      	movs	r1, #55	; 0x37
 8001786:	4620      	mov	r0, r4
 8001788:	f7fe fd22 	bl	80001d0 <d_make_comp>
 800178c:	68e3      	ldr	r3, [r4, #12]
 800178e:	4605      	mov	r5, r0
 8001790:	781a      	ldrb	r2, [r3, #0]
 8001792:	e736      	b.n	8001602 <d_unqualified_name+0xe6>
 8001794:	1c59      	adds	r1, r3, #1
 8001796:	60c1      	str	r1, [r0, #12]
 8001798:	785a      	ldrb	r2, [r3, #1]
 800179a:	2a6c      	cmp	r2, #108	; 0x6c
 800179c:	f47f af78 	bne.w	8001690 <d_unqualified_name+0x174>
 80017a0:	3302      	adds	r3, #2
 80017a2:	60c3      	str	r3, [r0, #12]
 80017a4:	f7ff fd9c 	bl	80012e0 <d_parmlist>
 80017a8:	68e3      	ldr	r3, [r4, #12]
 80017aa:	4606      	mov	r6, r0
 80017ac:	2800      	cmp	r0, #0
 80017ae:	d042      	beq.n	8001836 <d_unqualified_name+0x31a>
 80017b0:	781a      	ldrb	r2, [r3, #0]
 80017b2:	2a45      	cmp	r2, #69	; 0x45
 80017b4:	f47f af66 	bne.w	8001684 <d_unqualified_name+0x168>
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	60e2      	str	r2, [r4, #12]
 80017bc:	785a      	ldrb	r2, [r3, #1]
 80017be:	2a5f      	cmp	r2, #95	; 0x5f
 80017c0:	d049      	beq.n	8001856 <d_unqualified_name+0x33a>
 80017c2:	2a6e      	cmp	r2, #110	; 0x6e
 80017c4:	f43f aec4 	beq.w	8001550 <d_unqualified_name+0x34>
 80017c8:	4620      	mov	r0, r4
 80017ca:	f7fe fd79 	bl	80002c0 <d_number>
 80017ce:	3001      	adds	r0, #1
 80017d0:	68e3      	ldr	r3, [r4, #12]
 80017d2:	d430      	bmi.n	8001836 <d_unqualified_name+0x31a>
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	2a5f      	cmp	r2, #95	; 0x5f
 80017d8:	f47f af54 	bne.w	8001684 <d_unqualified_name+0x168>
 80017dc:	3301      	adds	r3, #1
 80017de:	6962      	ldr	r2, [r4, #20]
 80017e0:	69a1      	ldr	r1, [r4, #24]
 80017e2:	60e3      	str	r3, [r4, #12]
 80017e4:	428a      	cmp	r2, r1
 80017e6:	da33      	bge.n	8001850 <d_unqualified_name+0x334>
 80017e8:	6921      	ldr	r1, [r4, #16]
 80017ea:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 80017ee:	eb01 0587 	add.w	r5, r1, r7, lsl #2
 80017f2:	3201      	adds	r2, #1
 80017f4:	f04f 0c00 	mov.w	ip, #0
 80017f8:	e9c5 cc01 	strd	ip, ip, [r5, #4]
 80017fc:	6162      	str	r2, [r4, #20]
 80017fe:	2247      	movs	r2, #71	; 0x47
 8001800:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
 8001804:	e9c5 6003 	strd	r6, r0, [r5, #12]
 8001808:	781a      	ldrb	r2, [r3, #0]
 800180a:	e6fa      	b.n	8001602 <d_unqualified_name+0xe6>
 800180c:	1c59      	adds	r1, r3, #1
 800180e:	60e1      	str	r1, [r4, #12]
 8001810:	789a      	ldrb	r2, [r3, #2]
 8001812:	f1a2 0031 	sub.w	r0, r2, #49	; 0x31
 8001816:	2804      	cmp	r0, #4
 8001818:	d813      	bhi.n	8001842 <d_unqualified_name+0x326>
 800181a:	3303      	adds	r3, #3
 800181c:	3a30      	subs	r2, #48	; 0x30
 800181e:	60e3      	str	r3, [r4, #12]
 8001820:	4620      	mov	r0, r4
 8001822:	b2d6      	uxtb	r6, r2
 8001824:	f7ff f924 	bl	8000a70 <d_type>
 8001828:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800182a:	e778      	b.n	800171e <d_unqualified_name+0x202>
 800182c:	789a      	ldrb	r2, [r3, #2]
 800182e:	2500      	movs	r5, #0
 8001830:	463b      	mov	r3, r7
 8001832:	e6e6      	b.n	8001602 <d_unqualified_name+0xe6>
 8001834:	68e3      	ldr	r3, [r4, #12]
 8001836:	781a      	ldrb	r2, [r3, #0]
 8001838:	2500      	movs	r5, #0
 800183a:	e6e2      	b.n	8001602 <d_unqualified_name+0xe6>
 800183c:	3303      	adds	r3, #3
 800183e:	2000      	movs	r0, #0
 8001840:	e700      	b.n	8001644 <d_unqualified_name+0x128>
 8001842:	785a      	ldrb	r2, [r3, #1]
 8001844:	2500      	movs	r5, #0
 8001846:	460b      	mov	r3, r1
 8001848:	e6db      	b.n	8001602 <d_unqualified_name+0xe6>
 800184a:	781a      	ldrb	r2, [r3, #0]
 800184c:	460d      	mov	r5, r1
 800184e:	e6d8      	b.n	8001602 <d_unqualified_name+0xe6>
 8001850:	781a      	ldrb	r2, [r3, #0]
 8001852:	2500      	movs	r5, #0
 8001854:	e6d5      	b.n	8001602 <d_unqualified_name+0xe6>
 8001856:	3302      	adds	r3, #2
 8001858:	2000      	movs	r0, #0
 800185a:	e7c0      	b.n	80017de <d_unqualified_name+0x2c2>

0800185c <d_expr_primary>:
 800185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185e:	68c2      	ldr	r2, [r0, #12]
 8001860:	7813      	ldrb	r3, [r2, #0]
 8001862:	2b4c      	cmp	r3, #76	; 0x4c
 8001864:	d132      	bne.n	80018cc <d_expr_primary+0x70>
 8001866:	1c53      	adds	r3, r2, #1
 8001868:	60c3      	str	r3, [r0, #12]
 800186a:	7851      	ldrb	r1, [r2, #1]
 800186c:	295f      	cmp	r1, #95	; 0x5f
 800186e:	4604      	mov	r4, r0
 8001870:	d051      	beq.n	8001916 <d_expr_primary+0xba>
 8001872:	295a      	cmp	r1, #90	; 0x5a
 8001874:	d113      	bne.n	800189e <d_expr_primary+0x42>
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	60e2      	str	r2, [r4, #12]
 800187a:	785b      	ldrb	r3, [r3, #1]
 800187c:	2b47      	cmp	r3, #71	; 0x47
 800187e:	d043      	beq.n	8001908 <d_expr_primary+0xac>
 8001880:	2b54      	cmp	r3, #84	; 0x54
 8001882:	d041      	beq.n	8001908 <d_expr_primary+0xac>
 8001884:	2100      	movs	r1, #0
 8001886:	4620      	mov	r0, r4
 8001888:	f001 f84e 	bl	8002928 <d_encoding.part.0>
 800188c:	68e3      	ldr	r3, [r4, #12]
 800188e:	781a      	ldrb	r2, [r3, #0]
 8001890:	4606      	mov	r6, r0
 8001892:	2a45      	cmp	r2, #69	; 0x45
 8001894:	d11a      	bne.n	80018cc <d_expr_primary+0x70>
 8001896:	3301      	adds	r3, #1
 8001898:	60e3      	str	r3, [r4, #12]
 800189a:	4630      	mov	r0, r6
 800189c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800189e:	f7ff f8e7 	bl	8000a70 <d_type>
 80018a2:	4606      	mov	r6, r0
 80018a4:	b190      	cbz	r0, 80018cc <d_expr_primary+0x70>
 80018a6:	7803      	ldrb	r3, [r0, #0]
 80018a8:	2b27      	cmp	r3, #39	; 0x27
 80018aa:	d012      	beq.n	80018d2 <d_expr_primary+0x76>
 80018ac:	68e2      	ldr	r2, [r4, #12]
 80018ae:	7815      	ldrb	r5, [r2, #0]
 80018b0:	2d6e      	cmp	r5, #110	; 0x6e
 80018b2:	d023      	beq.n	80018fc <d_expr_primary+0xa0>
 80018b4:	213d      	movs	r1, #61	; 0x3d
 80018b6:	2d45      	cmp	r5, #69	; 0x45
 80018b8:	d059      	beq.n	800196e <d_expr_primary+0x112>
 80018ba:	4613      	mov	r3, r2
 80018bc:	e003      	b.n	80018c6 <d_expr_primary+0x6a>
 80018be:	60e3      	str	r3, [r4, #12]
 80018c0:	781d      	ldrb	r5, [r3, #0]
 80018c2:	2d45      	cmp	r5, #69	; 0x45
 80018c4:	d02f      	beq.n	8001926 <d_expr_primary+0xca>
 80018c6:	3301      	adds	r3, #1
 80018c8:	2d00      	cmp	r5, #0
 80018ca:	d1f8      	bne.n	80018be <d_expr_primary+0x62>
 80018cc:	2600      	movs	r6, #0
 80018ce:	4630      	mov	r0, r6
 80018d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018d2:	68c3      	ldr	r3, [r0, #12]
 80018d4:	7c1a      	ldrb	r2, [r3, #16]
 80018d6:	b11a      	cbz	r2, 80018e0 <d_expr_primary+0x84>
 80018d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80018da:	6859      	ldr	r1, [r3, #4]
 80018dc:	1a52      	subs	r2, r2, r1
 80018de:	62e2      	str	r2, [r4, #44]	; 0x2c
 80018e0:	4925      	ldr	r1, [pc, #148]	; (8001978 <d_expr_primary+0x11c>)
 80018e2:	6818      	ldr	r0, [r3, #0]
 80018e4:	f004 fc4c 	bl	8006180 <strcmp>
 80018e8:	2800      	cmp	r0, #0
 80018ea:	d1df      	bne.n	80018ac <d_expr_primary+0x50>
 80018ec:	68e2      	ldr	r2, [r4, #12]
 80018ee:	7815      	ldrb	r5, [r2, #0]
 80018f0:	2d45      	cmp	r5, #69	; 0x45
 80018f2:	d03e      	beq.n	8001972 <d_expr_primary+0x116>
 80018f4:	2d6e      	cmp	r5, #110	; 0x6e
 80018f6:	d001      	beq.n	80018fc <d_expr_primary+0xa0>
 80018f8:	213d      	movs	r1, #61	; 0x3d
 80018fa:	e7de      	b.n	80018ba <d_expr_primary+0x5e>
 80018fc:	1c53      	adds	r3, r2, #1
 80018fe:	60e3      	str	r3, [r4, #12]
 8001900:	7855      	ldrb	r5, [r2, #1]
 8001902:	213e      	movs	r1, #62	; 0x3e
 8001904:	461a      	mov	r2, r3
 8001906:	e7d6      	b.n	80018b6 <d_expr_primary+0x5a>
 8001908:	4620      	mov	r0, r4
 800190a:	f000 fc85 	bl	8002218 <d_special_name>
 800190e:	68e3      	ldr	r3, [r4, #12]
 8001910:	4606      	mov	r6, r0
 8001912:	781a      	ldrb	r2, [r3, #0]
 8001914:	e7bd      	b.n	8001892 <d_expr_primary+0x36>
 8001916:	1c93      	adds	r3, r2, #2
 8001918:	60c3      	str	r3, [r0, #12]
 800191a:	7892      	ldrb	r2, [r2, #2]
 800191c:	2a5a      	cmp	r2, #90	; 0x5a
 800191e:	bf18      	it	ne
 8001920:	2600      	movne	r6, #0
 8001922:	d1b6      	bne.n	8001892 <d_expr_primary+0x36>
 8001924:	e7a7      	b.n	8001876 <d_expr_primary+0x1a>
 8001926:	1a9d      	subs	r5, r3, r2
 8001928:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
 800192c:	4298      	cmp	r0, r3
 800192e:	da1c      	bge.n	800196a <d_expr_primary+0x10e>
 8001930:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8001934:	eb00 0780 	add.w	r7, r0, r0, lsl #2
 8001938:	eb0e 0387 	add.w	r3, lr, r7, lsl #2
 800193c:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8001940:	2700      	movs	r7, #0
 8001942:	3001      	adds	r0, #1
 8001944:	42bd      	cmp	r5, r7
 8001946:	e9c3 7701 	strd	r7, r7, [r3, #4]
 800194a:	6160      	str	r0, [r4, #20]
 800194c:	dd0d      	ble.n	800196a <d_expr_primary+0x10e>
 800194e:	e9c3 7701 	strd	r7, r7, [r3, #4]
 8001952:	f80e 700c 	strb.w	r7, [lr, ip]
 8001956:	e9c3 2503 	strd	r2, r5, [r3, #12]
 800195a:	4632      	mov	r2, r6
 800195c:	4620      	mov	r0, r4
 800195e:	f7fe fc37 	bl	80001d0 <d_make_comp>
 8001962:	68e3      	ldr	r3, [r4, #12]
 8001964:	4606      	mov	r6, r0
 8001966:	781a      	ldrb	r2, [r3, #0]
 8001968:	e793      	b.n	8001892 <d_expr_primary+0x36>
 800196a:	2300      	movs	r3, #0
 800196c:	e7f5      	b.n	800195a <d_expr_primary+0xfe>
 800196e:	2500      	movs	r5, #0
 8001970:	e7da      	b.n	8001928 <d_expr_primary+0xcc>
 8001972:	3201      	adds	r2, #1
 8001974:	60e2      	str	r2, [r4, #12]
 8001976:	e7aa      	b.n	80018ce <d_expr_primary+0x72>
 8001978:	08023e5c 	.word	0x08023e5c

0800197c <d_template_arg>:
 800197c:	b538      	push	{r3, r4, r5, lr}
 800197e:	68c2      	ldr	r2, [r0, #12]
 8001980:	7813      	ldrb	r3, [r2, #0]
 8001982:	2b4c      	cmp	r3, #76	; 0x4c
 8001984:	d01f      	beq.n	80019c6 <d_template_arg+0x4a>
 8001986:	4604      	mov	r4, r0
 8001988:	d807      	bhi.n	800199a <d_template_arg+0x1e>
 800198a:	3b49      	subs	r3, #73	; 0x49
 800198c:	2b01      	cmp	r3, #1
 800198e:	d815      	bhi.n	80019bc <d_template_arg+0x40>
 8001990:	3201      	adds	r2, #1
 8001992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001996:	60c2      	str	r2, [r0, #12]
 8001998:	e01a      	b.n	80019d0 <d_template_args_1>
 800199a:	2b58      	cmp	r3, #88	; 0x58
 800199c:	d10e      	bne.n	80019bc <d_template_arg+0x40>
 800199e:	3201      	adds	r2, #1
 80019a0:	2301      	movs	r3, #1
 80019a2:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80019a4:	60c2      	str	r2, [r0, #12]
 80019a6:	6303      	str	r3, [r0, #48]	; 0x30
 80019a8:	f000 f8da 	bl	8001b60 <d_expression_1>
 80019ac:	68e3      	ldr	r3, [r4, #12]
 80019ae:	6325      	str	r5, [r4, #48]	; 0x30
 80019b0:	781a      	ldrb	r2, [r3, #0]
 80019b2:	2a45      	cmp	r2, #69	; 0x45
 80019b4:	d10a      	bne.n	80019cc <d_template_arg+0x50>
 80019b6:	3301      	adds	r3, #1
 80019b8:	60e3      	str	r3, [r4, #12]
 80019ba:	bd38      	pop	{r3, r4, r5, pc}
 80019bc:	4620      	mov	r0, r4
 80019be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019c2:	f7ff b855 	b.w	8000a70 <d_type>
 80019c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019ca:	e747      	b.n	800185c <d_expr_primary>
 80019cc:	2000      	movs	r0, #0
 80019ce:	bd38      	pop	{r3, r4, r5, pc}

080019d0 <d_template_args_1>:
 80019d0:	b570      	push	{r4, r5, r6, lr}
 80019d2:	68c3      	ldr	r3, [r0, #12]
 80019d4:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80019d6:	781a      	ldrb	r2, [r3, #0]
 80019d8:	2a45      	cmp	r2, #69	; 0x45
 80019da:	b082      	sub	sp, #8
 80019dc:	4604      	mov	r4, r0
 80019de:	d01f      	beq.n	8001a20 <d_template_args_1+0x50>
 80019e0:	2300      	movs	r3, #0
 80019e2:	9301      	str	r3, [sp, #4]
 80019e4:	ad01      	add	r5, sp, #4
 80019e6:	e009      	b.n	80019fc <d_template_args_1+0x2c>
 80019e8:	f7fe fbf2 	bl	80001d0 <d_make_comp>
 80019ec:	6028      	str	r0, [r5, #0]
 80019ee:	f100 0510 	add.w	r5, r0, #16
 80019f2:	b160      	cbz	r0, 8001a0e <d_template_args_1+0x3e>
 80019f4:	68e3      	ldr	r3, [r4, #12]
 80019f6:	781a      	ldrb	r2, [r3, #0]
 80019f8:	2a45      	cmp	r2, #69	; 0x45
 80019fa:	d00b      	beq.n	8001a14 <d_template_args_1+0x44>
 80019fc:	4620      	mov	r0, r4
 80019fe:	f7ff ffbd 	bl	800197c <d_template_arg>
 8001a02:	4602      	mov	r2, r0
 8001a04:	2300      	movs	r3, #0
 8001a06:	212f      	movs	r1, #47	; 0x2f
 8001a08:	4620      	mov	r0, r4
 8001a0a:	2a00      	cmp	r2, #0
 8001a0c:	d1ec      	bne.n	80019e8 <d_template_args_1+0x18>
 8001a0e:	2000      	movs	r0, #0
 8001a10:	b002      	add	sp, #8
 8001a12:	bd70      	pop	{r4, r5, r6, pc}
 8001a14:	9801      	ldr	r0, [sp, #4]
 8001a16:	62a6      	str	r6, [r4, #40]	; 0x28
 8001a18:	3301      	adds	r3, #1
 8001a1a:	60e3      	str	r3, [r4, #12]
 8001a1c:	b002      	add	sp, #8
 8001a1e:	bd70      	pop	{r4, r5, r6, pc}
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	2300      	movs	r3, #0
 8001a24:	60c2      	str	r2, [r0, #12]
 8001a26:	212f      	movs	r1, #47	; 0x2f
 8001a28:	461a      	mov	r2, r3
 8001a2a:	b002      	add	sp, #8
 8001a2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001a30:	f7fe bbce 	b.w	80001d0 <d_make_comp>

08001a34 <d_prefix>:
 8001a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a36:	68c2      	ldr	r2, [r0, #12]
 8001a38:	7814      	ldrb	r4, [r2, #0]
 8001a3a:	b394      	cbz	r4, 8001aa2 <d_prefix+0x6e>
 8001a3c:	4606      	mov	r6, r0
 8001a3e:	460f      	mov	r7, r1
 8001a40:	2500      	movs	r5, #0
 8001a42:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8001a46:	2b4a      	cmp	r3, #74	; 0x4a
 8001a48:	d82b      	bhi.n	8001aa2 <d_prefix+0x6e>
 8001a4a:	e8df f003 	tbb	[pc, r3]
 8001a4e:	2d2d      	.short	0x2d2d
 8001a50:	2d2d2d2d 	.word	0x2d2d2d2d
 8001a54:	2d2d2d2d 	.word	0x2d2d2d2d
 8001a58:	2a2a2a2a 	.word	0x2a2a2a2a
 8001a5c:	2a2a2a2a 	.word	0x2a2a2a2a
 8001a60:	2b772d2a 	.word	0x2b772d2a
 8001a64:	682a2a2a 	.word	0x682a2a2a
 8001a68:	5f2d2a2a 	.word	0x5f2d2a2a
 8001a6c:	2a2a2a2a 	.word	0x2a2a2a2a
 8001a70:	2d4b532a 	.word	0x2d4b532a
 8001a74:	2a2a2a2a 	.word	0x2a2a2a2a
 8001a78:	2a2a2a2a 	.word	0x2a2a2a2a
 8001a7c:	2d2a2a2a 	.word	0x2d2a2a2a
 8001a80:	2d2d2d2d 	.word	0x2d2d2d2d
 8001a84:	2d2d2d2d 	.word	0x2d2d2d2d
 8001a88:	2d2d2d2d 	.word	0x2d2d2d2d
 8001a8c:	2d2d2d2d 	.word	0x2d2d2d2d
 8001a90:	2d2d2d2d 	.word	0x2d2d2d2d
 8001a94:	2d2d2d2d 	.word	0x2d2d2d2d
 8001a98:	2d          	.byte	0x2d
 8001a99:	00          	.byte	0x00
 8001a9a:	68f2      	ldr	r2, [r6, #12]
 8001a9c:	7814      	ldrb	r4, [r2, #0]
 8001a9e:	2c00      	cmp	r4, #0
 8001aa0:	d1cf      	bne.n	8001a42 <d_prefix+0xe>
 8001aa2:	2500      	movs	r5, #0
 8001aa4:	4628      	mov	r0, r5
 8001aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001aa8:	4630      	mov	r0, r6
 8001aaa:	f7ff fd37 	bl	800151c <d_unqualified_name>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2d00      	cmp	r5, #0
 8001ab2:	d14e      	bne.n	8001b52 <d_prefix+0x11e>
 8001ab4:	4605      	mov	r5, r0
 8001ab6:	2c53      	cmp	r4, #83	; 0x53
 8001ab8:	d0ef      	beq.n	8001a9a <d_prefix+0x66>
 8001aba:	68f2      	ldr	r2, [r6, #12]
 8001abc:	7814      	ldrb	r4, [r2, #0]
 8001abe:	2c45      	cmp	r4, #69	; 0x45
 8001ac0:	d0f0      	beq.n	8001aa4 <d_prefix+0x70>
 8001ac2:	2f00      	cmp	r7, #0
 8001ac4:	d0eb      	beq.n	8001a9e <d_prefix+0x6a>
 8001ac6:	2d00      	cmp	r5, #0
 8001ac8:	d0eb      	beq.n	8001aa2 <d_prefix+0x6e>
 8001aca:	e9d6 3108 	ldrd	r3, r1, [r6, #32]
 8001ace:	428b      	cmp	r3, r1
 8001ad0:	dae7      	bge.n	8001aa2 <d_prefix+0x6e>
 8001ad2:	69f1      	ldr	r1, [r6, #28]
 8001ad4:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	6233      	str	r3, [r6, #32]
 8001adc:	7814      	ldrb	r4, [r2, #0]
 8001ade:	2c00      	cmp	r4, #0
 8001ae0:	d1af      	bne.n	8001a42 <d_prefix+0xe>
 8001ae2:	e7de      	b.n	8001aa2 <d_prefix+0x6e>
 8001ae4:	4630      	mov	r0, r6
 8001ae6:	f7fe fe1d 	bl	8000724 <d_template_param>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2d00      	cmp	r5, #0
 8001aee:	d130      	bne.n	8001b52 <d_prefix+0x11e>
 8001af0:	461d      	mov	r5, r3
 8001af2:	e7e2      	b.n	8001aba <d_prefix+0x86>
 8001af4:	2101      	movs	r1, #1
 8001af6:	4630      	mov	r0, r6
 8001af8:	f7fe fef0 	bl	80008dc <d_substitution>
 8001afc:	4603      	mov	r3, r0
 8001afe:	bb45      	cbnz	r5, 8001b52 <d_prefix+0x11e>
 8001b00:	68f2      	ldr	r2, [r6, #12]
 8001b02:	7814      	ldrb	r4, [r2, #0]
 8001b04:	461d      	mov	r5, r3
 8001b06:	2c00      	cmp	r4, #0
 8001b08:	d19b      	bne.n	8001a42 <d_prefix+0xe>
 8001b0a:	e7ca      	b.n	8001aa2 <d_prefix+0x6e>
 8001b0c:	2d00      	cmp	r5, #0
 8001b0e:	d0c8      	beq.n	8001aa2 <d_prefix+0x6e>
 8001b10:	1c53      	adds	r3, r2, #1
 8001b12:	60f3      	str	r3, [r6, #12]
 8001b14:	7854      	ldrb	r4, [r2, #1]
 8001b16:	461a      	mov	r2, r3
 8001b18:	2c00      	cmp	r4, #0
 8001b1a:	d192      	bne.n	8001a42 <d_prefix+0xe>
 8001b1c:	e7c1      	b.n	8001aa2 <d_prefix+0x6e>
 8001b1e:	2d00      	cmp	r5, #0
 8001b20:	d0bf      	beq.n	8001aa2 <d_prefix+0x6e>
 8001b22:	3201      	adds	r2, #1
 8001b24:	60f2      	str	r2, [r6, #12]
 8001b26:	4630      	mov	r0, r6
 8001b28:	f7ff ff52 	bl	80019d0 <d_template_args_1>
 8001b2c:	2104      	movs	r1, #4
 8001b2e:	4603      	mov	r3, r0
 8001b30:	462a      	mov	r2, r5
 8001b32:	4630      	mov	r0, r6
 8001b34:	f7fe fb4c 	bl	80001d0 <d_make_comp>
 8001b38:	4605      	mov	r5, r0
 8001b3a:	e7bc      	b.n	8001ab6 <d_prefix+0x82>
 8001b3c:	7853      	ldrb	r3, [r2, #1]
 8001b3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8001b42:	2b54      	cmp	r3, #84	; 0x54
 8001b44:	4630      	mov	r0, r6
 8001b46:	d006      	beq.n	8001b56 <d_prefix+0x122>
 8001b48:	f7ff fce8 	bl	800151c <d_unqualified_name>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2d00      	cmp	r5, #0
 8001b50:	d0ce      	beq.n	8001af0 <d_prefix+0xbc>
 8001b52:	2101      	movs	r1, #1
 8001b54:	e7ec      	b.n	8001b30 <d_prefix+0xfc>
 8001b56:	f7fe ff8b 	bl	8000a70 <d_type>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	e7c6      	b.n	8001aec <d_prefix+0xb8>
 8001b5e:	bf00      	nop

08001b60 <d_expression_1>:
 8001b60:	68c2      	ldr	r2, [r0, #12]
 8001b62:	7813      	ldrb	r3, [r2, #0]
 8001b64:	2b4c      	cmp	r3, #76	; 0x4c
 8001b66:	f000 8089 	beq.w	8001c7c <d_expression_1+0x11c>
 8001b6a:	2b54      	cmp	r3, #84	; 0x54
 8001b6c:	f000 8087 	beq.w	8001c7e <d_expression_1+0x11e>
 8001b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b72:	2b73      	cmp	r3, #115	; 0x73
 8001b74:	b083      	sub	sp, #12
 8001b76:	4604      	mov	r4, r0
 8001b78:	d05a      	beq.n	8001c30 <d_expression_1+0xd0>
 8001b7a:	2b66      	cmp	r3, #102	; 0x66
 8001b7c:	d028      	beq.n	8001bd0 <d_expression_1+0x70>
 8001b7e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8001b82:	2909      	cmp	r1, #9
 8001b84:	d80c      	bhi.n	8001ba0 <d_expression_1+0x40>
 8001b86:	4620      	mov	r0, r4
 8001b88:	f7ff fcc8 	bl	800151c <d_unqualified_name>
 8001b8c:	4605      	mov	r5, r0
 8001b8e:	2800      	cmp	r0, #0
 8001b90:	d070      	beq.n	8001c74 <d_expression_1+0x114>
 8001b92:	68e3      	ldr	r3, [r4, #12]
 8001b94:	781a      	ldrb	r2, [r3, #0]
 8001b96:	2a49      	cmp	r2, #73	; 0x49
 8001b98:	d073      	beq.n	8001c82 <d_expression_1+0x122>
 8001b9a:	4628      	mov	r0, r5
 8001b9c:	b003      	add	sp, #12
 8001b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba0:	2b6f      	cmp	r3, #111	; 0x6f
 8001ba2:	d061      	beq.n	8001c68 <d_expression_1+0x108>
 8001ba4:	2b69      	cmp	r3, #105	; 0x69
 8001ba6:	d17a      	bne.n	8001c9e <d_expression_1+0x13e>
 8001ba8:	7853      	ldrb	r3, [r2, #1]
 8001baa:	2b6c      	cmp	r3, #108	; 0x6c
 8001bac:	d147      	bne.n	8001c3e <d_expression_1+0xde>
 8001bae:	3202      	adds	r2, #2
 8001bb0:	60e2      	str	r2, [r4, #12]
 8001bb2:	2500      	movs	r5, #0
 8001bb4:	7811      	ldrb	r1, [r2, #0]
 8001bb6:	2900      	cmp	r1, #0
 8001bb8:	d05c      	beq.n	8001c74 <d_expression_1+0x114>
 8001bba:	7853      	ldrb	r3, [r2, #1]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d059      	beq.n	8001c74 <d_expression_1+0x114>
 8001bc0:	2145      	movs	r1, #69	; 0x45
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	f000 fa44 	bl	8002050 <d_exprlist>
 8001bc8:	462a      	mov	r2, r5
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2131      	movs	r1, #49	; 0x31
 8001bce:	e060      	b.n	8001c92 <d_expression_1+0x132>
 8001bd0:	7853      	ldrb	r3, [r2, #1]
 8001bd2:	2b70      	cmp	r3, #112	; 0x70
 8001bd4:	d133      	bne.n	8001c3e <d_expression_1+0xde>
 8001bd6:	1c93      	adds	r3, r2, #2
 8001bd8:	60c3      	str	r3, [r0, #12]
 8001bda:	7893      	ldrb	r3, [r2, #2]
 8001bdc:	2b54      	cmp	r3, #84	; 0x54
 8001bde:	f000 8147 	beq.w	8001e70 <d_expression_1+0x310>
 8001be2:	2b5f      	cmp	r3, #95	; 0x5f
 8001be4:	f000 8085 	beq.w	8001cf2 <d_expression_1+0x192>
 8001be8:	2b6e      	cmp	r3, #110	; 0x6e
 8001bea:	d043      	beq.n	8001c74 <d_expression_1+0x114>
 8001bec:	f7fe fb68 	bl	80002c0 <d_number>
 8001bf0:	1c41      	adds	r1, r0, #1
 8001bf2:	d43f      	bmi.n	8001c74 <d_expression_1+0x114>
 8001bf4:	68e3      	ldr	r3, [r4, #12]
 8001bf6:	781a      	ldrb	r2, [r3, #0]
 8001bf8:	2a5f      	cmp	r2, #95	; 0x5f
 8001bfa:	d13b      	bne.n	8001c74 <d_expression_1+0x114>
 8001bfc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001c00:	3301      	adds	r3, #1
 8001c02:	4291      	cmp	r1, r2
 8001c04:	60e3      	str	r3, [r4, #12]
 8001c06:	d035      	beq.n	8001c74 <d_expression_1+0x114>
 8001c08:	3002      	adds	r0, #2
 8001c0a:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	da30      	bge.n	8001c74 <d_expression_1+0x114>
 8001c12:	6922      	ldr	r2, [r4, #16]
 8001c14:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001c18:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	2600      	movs	r6, #0
 8001c20:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8001c24:	6163      	str	r3, [r4, #20]
 8001c26:	2306      	movs	r3, #6
 8001c28:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 8001c2c:	60e8      	str	r0, [r5, #12]
 8001c2e:	e7b4      	b.n	8001b9a <d_expression_1+0x3a>
 8001c30:	7853      	ldrb	r3, [r2, #1]
 8001c32:	2b72      	cmp	r3, #114	; 0x72
 8001c34:	f000 80f7 	beq.w	8001e26 <d_expression_1+0x2c6>
 8001c38:	2b70      	cmp	r3, #112	; 0x70
 8001c3a:	f000 8111 	beq.w	8001e60 <d_expression_1+0x300>
 8001c3e:	4620      	mov	r0, r4
 8001c40:	f7ff fbe8 	bl	8001414 <d_operator_name>
 8001c44:	4605      	mov	r5, r0
 8001c46:	b1a8      	cbz	r0, 8001c74 <d_expression_1+0x114>
 8001c48:	7803      	ldrb	r3, [r0, #0]
 8001c4a:	2b32      	cmp	r3, #50	; 0x32
 8001c4c:	d034      	beq.n	8001cb8 <d_expression_1+0x158>
 8001c4e:	2b34      	cmp	r3, #52	; 0x34
 8001c50:	f000 819a 	beq.w	8001f88 <d_expression_1+0x428>
 8001c54:	d80e      	bhi.n	8001c74 <d_expression_1+0x114>
 8001c56:	2b33      	cmp	r3, #51	; 0x33
 8001c58:	d10c      	bne.n	8001c74 <d_expression_1+0x114>
 8001c5a:	68c3      	ldr	r3, [r0, #12]
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d809      	bhi.n	8001c74 <d_expression_1+0x114>
 8001c60:	e8df f003 	tbb	[pc, r3]
 8001c64:	0808cd6c 	.word	0x0808cd6c
 8001c68:	7853      	ldrb	r3, [r2, #1]
 8001c6a:	2b6e      	cmp	r3, #110	; 0x6e
 8001c6c:	d1e7      	bne.n	8001c3e <d_expression_1+0xde>
 8001c6e:	3202      	adds	r2, #2
 8001c70:	60c2      	str	r2, [r0, #12]
 8001c72:	e788      	b.n	8001b86 <d_expression_1+0x26>
 8001c74:	2500      	movs	r5, #0
 8001c76:	4628      	mov	r0, r5
 8001c78:	b003      	add	sp, #12
 8001c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c7c:	e5ee      	b.n	800185c <d_expr_primary>
 8001c7e:	f7fe bd51 	b.w	8000724 <d_template_param>
 8001c82:	3301      	adds	r3, #1
 8001c84:	60e3      	str	r3, [r4, #12]
 8001c86:	4620      	mov	r0, r4
 8001c88:	f7ff fea2 	bl	80019d0 <d_template_args_1>
 8001c8c:	462a      	mov	r2, r5
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2104      	movs	r1, #4
 8001c92:	4620      	mov	r0, r4
 8001c94:	b003      	add	sp, #12
 8001c96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001c9a:	f7fe ba99 	b.w	80001d0 <d_make_comp>
 8001c9e:	2b74      	cmp	r3, #116	; 0x74
 8001ca0:	f040 80b2 	bne.w	8001e08 <d_expression_1+0x2a8>
 8001ca4:	7853      	ldrb	r3, [r2, #1]
 8001ca6:	2b6c      	cmp	r3, #108	; 0x6c
 8001ca8:	d1c9      	bne.n	8001c3e <d_expression_1+0xde>
 8001caa:	3202      	adds	r2, #2
 8001cac:	60e2      	str	r2, [r4, #12]
 8001cae:	f7fe fedf 	bl	8000a70 <d_type>
 8001cb2:	68e2      	ldr	r2, [r4, #12]
 8001cb4:	4605      	mov	r5, r0
 8001cb6:	e77d      	b.n	8001bb4 <d_expression_1+0x54>
 8001cb8:	68c1      	ldr	r1, [r0, #12]
 8001cba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001cbc:	688a      	ldr	r2, [r1, #8]
 8001cbe:	680e      	ldr	r6, [r1, #0]
 8001cc0:	3a02      	subs	r2, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001cc6:	7833      	ldrb	r3, [r6, #0]
 8001cc8:	2b73      	cmp	r3, #115	; 0x73
 8001cca:	d10b      	bne.n	8001ce4 <d_expression_1+0x184>
 8001ccc:	7872      	ldrb	r2, [r6, #1]
 8001cce:	2a74      	cmp	r2, #116	; 0x74
 8001cd0:	d108      	bne.n	8001ce4 <d_expression_1+0x184>
 8001cd2:	78b2      	ldrb	r2, [r6, #2]
 8001cd4:	b932      	cbnz	r2, 8001ce4 <d_expression_1+0x184>
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	f7fe feca 	bl	8000a70 <d_type>
 8001cdc:	462a      	mov	r2, r5
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2137      	movs	r1, #55	; 0x37
 8001ce2:	e7d6      	b.n	8001c92 <d_expression_1+0x132>
 8001ce4:	68cf      	ldr	r7, [r1, #12]
 8001ce6:	2f03      	cmp	r7, #3
 8001ce8:	d8c4      	bhi.n	8001c74 <d_expression_1+0x114>
 8001cea:	e8df f007 	tbb	[pc, r7]
 8001cee:	0627      	.short	0x0627
 8001cf0:	2b54      	.short	0x2b54
 8001cf2:	3203      	adds	r2, #3
 8001cf4:	60c2      	str	r2, [r0, #12]
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	e787      	b.n	8001c0a <d_expression_1+0xaa>
 8001cfa:	7832      	ldrb	r2, [r6, #0]
 8001cfc:	2a70      	cmp	r2, #112	; 0x70
 8001cfe:	f000 80c0 	beq.w	8001e82 <d_expression_1+0x322>
 8001d02:	2a6d      	cmp	r2, #109	; 0x6d
 8001d04:	f000 80bd 	beq.w	8001e82 <d_expression_1+0x322>
 8001d08:	2700      	movs	r7, #0
 8001d0a:	2b73      	cmp	r3, #115	; 0x73
 8001d0c:	f040 80b4 	bne.w	8001e78 <d_expression_1+0x318>
 8001d10:	7873      	ldrb	r3, [r6, #1]
 8001d12:	2b50      	cmp	r3, #80	; 0x50
 8001d14:	f040 80b0 	bne.w	8001e78 <d_expression_1+0x318>
 8001d18:	78b3      	ldrb	r3, [r6, #2]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f040 80ac 	bne.w	8001e78 <d_expression_1+0x318>
 8001d20:	4620      	mov	r0, r4
 8001d22:	f7ff fe55 	bl	80019d0 <d_template_args_1>
 8001d26:	4603      	mov	r3, r0
 8001d28:	b12f      	cbz	r7, 8001d36 <d_expression_1+0x1d6>
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	2139      	movs	r1, #57	; 0x39
 8001d2e:	4620      	mov	r0, r4
 8001d30:	f7fe fa4e 	bl	80001d0 <d_make_comp>
 8001d34:	4603      	mov	r3, r0
 8001d36:	462a      	mov	r2, r5
 8001d38:	2137      	movs	r1, #55	; 0x37
 8001d3a:	e7aa      	b.n	8001c92 <d_expression_1+0x132>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	462a      	mov	r2, r5
 8001d40:	2136      	movs	r1, #54	; 0x36
 8001d42:	e7a6      	b.n	8001c92 <d_expression_1+0x132>
 8001d44:	2b71      	cmp	r3, #113	; 0x71
 8001d46:	f040 80c4 	bne.w	8001ed2 <d_expression_1+0x372>
 8001d4a:	7872      	ldrb	r2, [r6, #1]
 8001d4c:	2a75      	cmp	r2, #117	; 0x75
 8001d4e:	f040 80c0 	bne.w	8001ed2 <d_expression_1+0x372>
 8001d52:	78b2      	ldrb	r2, [r6, #2]
 8001d54:	2a00      	cmp	r2, #0
 8001d56:	f040 80bc 	bne.w	8001ed2 <d_expression_1+0x372>
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	f7ff ff00 	bl	8001b60 <d_expression_1>
 8001d60:	4606      	mov	r6, r0
 8001d62:	4620      	mov	r0, r4
 8001d64:	f7ff fefc 	bl	8001b60 <d_expression_1>
 8001d68:	4607      	mov	r7, r0
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	f7ff fef8 	bl	8001b60 <d_expression_1>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2800      	cmp	r0, #0
 8001d74:	f43f af7e 	beq.w	8001c74 <d_expression_1+0x114>
 8001d78:	463a      	mov	r2, r7
 8001d7a:	213c      	movs	r1, #60	; 0x3c
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	f7fe fa27 	bl	80001d0 <d_make_comp>
 8001d82:	4632      	mov	r2, r6
 8001d84:	4603      	mov	r3, r0
 8001d86:	213b      	movs	r1, #59	; 0x3b
 8001d88:	4620      	mov	r0, r4
 8001d8a:	f7fe fa21 	bl	80001d0 <d_make_comp>
 8001d8e:	462a      	mov	r2, r5
 8001d90:	4603      	mov	r3, r0
 8001d92:	213a      	movs	r1, #58	; 0x3a
 8001d94:	e77d      	b.n	8001c92 <d_expression_1+0x132>
 8001d96:	68eb      	ldr	r3, [r5, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	785a      	ldrb	r2, [r3, #1]
 8001d9c:	2a63      	cmp	r2, #99	; 0x63
 8001d9e:	f000 810e 	beq.w	8001fbe <d_expression_1+0x45e>
 8001da2:	7833      	ldrb	r3, [r6, #0]
 8001da4:	2b66      	cmp	r3, #102	; 0x66
 8001da6:	f000 8135 	beq.w	8002014 <d_expression_1+0x4b4>
 8001daa:	2b64      	cmp	r3, #100	; 0x64
 8001dac:	f040 8129 	bne.w	8002002 <d_expression_1+0x4a2>
 8001db0:	7873      	ldrb	r3, [r6, #1]
 8001db2:	2b69      	cmp	r3, #105	; 0x69
 8001db4:	f040 8125 	bne.w	8002002 <d_expression_1+0x4a2>
 8001db8:	78b3      	ldrb	r3, [r6, #2]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f040 8121 	bne.w	8002002 <d_expression_1+0x4a2>
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	f7ff fbab 	bl	800151c <d_unqualified_name>
 8001dc6:	4607      	mov	r7, r0
 8001dc8:	7833      	ldrb	r3, [r6, #0]
 8001dca:	2b63      	cmp	r3, #99	; 0x63
 8001dcc:	f040 80b4 	bne.w	8001f38 <d_expression_1+0x3d8>
 8001dd0:	7872      	ldrb	r2, [r6, #1]
 8001dd2:	2a6c      	cmp	r2, #108	; 0x6c
 8001dd4:	f040 80b0 	bne.w	8001f38 <d_expression_1+0x3d8>
 8001dd8:	78b2      	ldrb	r2, [r6, #2]
 8001dda:	2a00      	cmp	r2, #0
 8001ddc:	f040 80ac 	bne.w	8001f38 <d_expression_1+0x3d8>
 8001de0:	2145      	movs	r1, #69	; 0x45
 8001de2:	4620      	mov	r0, r4
 8001de4:	f000 f934 	bl	8002050 <d_exprlist>
 8001de8:	4602      	mov	r2, r0
 8001dea:	4613      	mov	r3, r2
 8001dec:	2139      	movs	r1, #57	; 0x39
 8001dee:	463a      	mov	r2, r7
 8001df0:	4620      	mov	r0, r4
 8001df2:	f7fe f9ed 	bl	80001d0 <d_make_comp>
 8001df6:	462a      	mov	r2, r5
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2138      	movs	r1, #56	; 0x38
 8001dfc:	e749      	b.n	8001c92 <d_expression_1+0x132>
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f7ff feae 	bl	8001b60 <d_expression_1>
 8001e04:	4603      	mov	r3, r0
 8001e06:	e796      	b.n	8001d36 <d_expression_1+0x1d6>
 8001e08:	2b75      	cmp	r3, #117	; 0x75
 8001e0a:	f47f af18 	bne.w	8001c3e <d_expression_1+0xde>
 8001e0e:	3201      	adds	r2, #1
 8001e10:	60c2      	str	r2, [r0, #12]
 8001e12:	f7fe fcf3 	bl	80007fc <d_source_name>
 8001e16:	9001      	str	r0, [sp, #4]
 8001e18:	4620      	mov	r0, r4
 8001e1a:	f7ff fdd9 	bl	80019d0 <d_template_args_1>
 8001e1e:	9a01      	ldr	r2, [sp, #4]
 8001e20:	4603      	mov	r3, r0
 8001e22:	213f      	movs	r1, #63	; 0x3f
 8001e24:	e735      	b.n	8001c92 <d_expression_1+0x132>
 8001e26:	1c93      	adds	r3, r2, #2
 8001e28:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001e2a:	60c3      	str	r3, [r0, #12]
 8001e2c:	7893      	ldrb	r3, [r2, #2]
 8001e2e:	b131      	cbz	r1, 8001e3e <d_expression_1+0x2de>
 8001e30:	2b55      	cmp	r3, #85	; 0x55
 8001e32:	d84a      	bhi.n	8001eca <d_expression_1+0x36a>
 8001e34:	2b42      	cmp	r3, #66	; 0x42
 8001e36:	d832      	bhi.n	8001e9e <d_expression_1+0x33e>
 8001e38:	3b30      	subs	r3, #48	; 0x30
 8001e3a:	2b09      	cmp	r3, #9
 8001e3c:	d936      	bls.n	8001eac <d_expression_1+0x34c>
 8001e3e:	4620      	mov	r0, r4
 8001e40:	f7fe fe16 	bl	8000a70 <d_type>
 8001e44:	4605      	mov	r5, r0
 8001e46:	4620      	mov	r0, r4
 8001e48:	f7ff fb68 	bl	800151c <d_unqualified_name>
 8001e4c:	68e3      	ldr	r3, [r4, #12]
 8001e4e:	7819      	ldrb	r1, [r3, #0]
 8001e50:	2949      	cmp	r1, #73	; 0x49
 8001e52:	4602      	mov	r2, r0
 8001e54:	f000 80a5 	beq.w	8001fa2 <d_expression_1+0x442>
 8001e58:	4613      	mov	r3, r2
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	462a      	mov	r2, r5
 8001e5e:	e718      	b.n	8001c92 <d_expression_1+0x132>
 8001e60:	3202      	adds	r2, #2
 8001e62:	60c2      	str	r2, [r0, #12]
 8001e64:	f7ff fe7c 	bl	8001b60 <d_expression_1>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	214c      	movs	r1, #76	; 0x4c
 8001e6e:	e710      	b.n	8001c92 <d_expression_1+0x132>
 8001e70:	3203      	adds	r2, #3
 8001e72:	60c2      	str	r2, [r0, #12]
 8001e74:	2000      	movs	r0, #0
 8001e76:	e6c8      	b.n	8001c0a <d_expression_1+0xaa>
 8001e78:	4620      	mov	r0, r4
 8001e7a:	f7ff fe71 	bl	8001b60 <d_expression_1>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	e752      	b.n	8001d28 <d_expression_1+0x1c8>
 8001e82:	7871      	ldrb	r1, [r6, #1]
 8001e84:	4291      	cmp	r1, r2
 8001e86:	f47f af3f 	bne.w	8001d08 <d_expression_1+0x1a8>
 8001e8a:	68e2      	ldr	r2, [r4, #12]
 8001e8c:	7811      	ldrb	r1, [r2, #0]
 8001e8e:	295f      	cmp	r1, #95	; 0x5f
 8001e90:	f47f af3b 	bne.w	8001d0a <d_expression_1+0x1aa>
 8001e94:	3201      	adds	r2, #1
 8001e96:	60e2      	str	r2, [r4, #12]
 8001e98:	7833      	ldrb	r3, [r6, #0]
 8001e9a:	2700      	movs	r7, #0
 8001e9c:	e735      	b.n	8001d0a <d_expression_1+0x1aa>
 8001e9e:	4a6a      	ldr	r2, [pc, #424]	; (8002048 <d_expression_1+0x4e8>)
 8001ea0:	3b43      	subs	r3, #67	; 0x43
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea8:	07db      	lsls	r3, r3, #31
 8001eaa:	d5c8      	bpl.n	8001e3e <d_expression_1+0x2de>
 8001eac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eb0:	63a3      	str	r3, [r4, #56]	; 0x38
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	f7ff fdbd 	bl	8001a34 <d_prefix>
 8001eba:	68e3      	ldr	r3, [r4, #12]
 8001ebc:	781a      	ldrb	r2, [r3, #0]
 8001ebe:	2a45      	cmp	r2, #69	; 0x45
 8001ec0:	4605      	mov	r5, r0
 8001ec2:	d1c0      	bne.n	8001e46 <d_expression_1+0x2e6>
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	60e3      	str	r3, [r4, #12]
 8001ec8:	e7bd      	b.n	8001e46 <d_expression_1+0x2e6>
 8001eca:	3b61      	subs	r3, #97	; 0x61
 8001ecc:	2b19      	cmp	r3, #25
 8001ece:	d8b6      	bhi.n	8001e3e <d_expression_1+0x2de>
 8001ed0:	e7ec      	b.n	8001eac <d_expression_1+0x34c>
 8001ed2:	2b64      	cmp	r3, #100	; 0x64
 8001ed4:	d106      	bne.n	8001ee4 <d_expression_1+0x384>
 8001ed6:	7873      	ldrb	r3, [r6, #1]
 8001ed8:	2b58      	cmp	r3, #88	; 0x58
 8001eda:	d103      	bne.n	8001ee4 <d_expression_1+0x384>
 8001edc:	78b3      	ldrb	r3, [r6, #2]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f43f af3b 	beq.w	8001d5a <d_expression_1+0x1fa>
 8001ee4:	7833      	ldrb	r3, [r6, #0]
 8001ee6:	2b66      	cmp	r3, #102	; 0x66
 8001ee8:	f000 8099 	beq.w	800201e <d_expression_1+0x4be>
 8001eec:	2b6e      	cmp	r3, #110	; 0x6e
 8001eee:	f47f aec1 	bne.w	8001c74 <d_expression_1+0x114>
 8001ef2:	7873      	ldrb	r3, [r6, #1]
 8001ef4:	2b77      	cmp	r3, #119	; 0x77
 8001ef6:	d002      	beq.n	8001efe <d_expression_1+0x39e>
 8001ef8:	2b61      	cmp	r3, #97	; 0x61
 8001efa:	f47f aebb 	bne.w	8001c74 <d_expression_1+0x114>
 8001efe:	215f      	movs	r1, #95	; 0x5f
 8001f00:	4620      	mov	r0, r4
 8001f02:	f000 f8a5 	bl	8002050 <d_exprlist>
 8001f06:	4606      	mov	r6, r0
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f7fe fdb1 	bl	8000a70 <d_type>
 8001f0e:	68e3      	ldr	r3, [r4, #12]
 8001f10:	781a      	ldrb	r2, [r3, #0]
 8001f12:	2a45      	cmp	r2, #69	; 0x45
 8001f14:	4607      	mov	r7, r0
 8001f16:	f000 8092 	beq.w	800203e <d_expression_1+0x4de>
 8001f1a:	2a70      	cmp	r2, #112	; 0x70
 8001f1c:	f000 8083 	beq.w	8002026 <d_expression_1+0x4c6>
 8001f20:	2a69      	cmp	r2, #105	; 0x69
 8001f22:	f47f aea7 	bne.w	8001c74 <d_expression_1+0x114>
 8001f26:	785b      	ldrb	r3, [r3, #1]
 8001f28:	2b6c      	cmp	r3, #108	; 0x6c
 8001f2a:	f47f aea3 	bne.w	8001c74 <d_expression_1+0x114>
 8001f2e:	4620      	mov	r0, r4
 8001f30:	f7ff fe16 	bl	8001b60 <d_expression_1>
 8001f34:	4603      	mov	r3, r0
 8001f36:	e71f      	b.n	8001d78 <d_expression_1+0x218>
 8001f38:	2b64      	cmp	r3, #100	; 0x64
 8001f3a:	d155      	bne.n	8001fe8 <d_expression_1+0x488>
 8001f3c:	7872      	ldrb	r2, [r6, #1]
 8001f3e:	2a74      	cmp	r2, #116	; 0x74
 8001f40:	d152      	bne.n	8001fe8 <d_expression_1+0x488>
 8001f42:	78b2      	ldrb	r2, [r6, #2]
 8001f44:	2a00      	cmp	r2, #0
 8001f46:	d14f      	bne.n	8001fe8 <d_expression_1+0x488>
 8001f48:	68e3      	ldr	r3, [r4, #12]
 8001f4a:	781a      	ldrb	r2, [r3, #0]
 8001f4c:	2a67      	cmp	r2, #103	; 0x67
 8001f4e:	d05d      	beq.n	800200c <d_expression_1+0x4ac>
 8001f50:	2a73      	cmp	r2, #115	; 0x73
 8001f52:	d102      	bne.n	8001f5a <d_expression_1+0x3fa>
 8001f54:	785b      	ldrb	r3, [r3, #1]
 8001f56:	2b72      	cmp	r3, #114	; 0x72
 8001f58:	d04e      	beq.n	8001ff8 <d_expression_1+0x498>
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f7ff fade 	bl	800151c <d_unqualified_name>
 8001f60:	68e3      	ldr	r3, [r4, #12]
 8001f62:	7819      	ldrb	r1, [r3, #0]
 8001f64:	2949      	cmp	r1, #73	; 0x49
 8001f66:	4602      	mov	r2, r0
 8001f68:	f47f af3f 	bne.w	8001dea <d_expression_1+0x28a>
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	60e3      	str	r3, [r4, #12]
 8001f70:	4620      	mov	r0, r4
 8001f72:	9201      	str	r2, [sp, #4]
 8001f74:	f7ff fd2c 	bl	80019d0 <d_template_args_1>
 8001f78:	9a01      	ldr	r2, [sp, #4]
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2104      	movs	r1, #4
 8001f7e:	4620      	mov	r0, r4
 8001f80:	f7fe f926 	bl	80001d0 <d_make_comp>
 8001f84:	4602      	mov	r2, r0
 8001f86:	e730      	b.n	8001dea <d_expression_1+0x28a>
 8001f88:	68e3      	ldr	r3, [r4, #12]
 8001f8a:	781a      	ldrb	r2, [r3, #0]
 8001f8c:	2a5f      	cmp	r2, #95	; 0x5f
 8001f8e:	f47f af36 	bne.w	8001dfe <d_expression_1+0x29e>
 8001f92:	3301      	adds	r3, #1
 8001f94:	60e3      	str	r3, [r4, #12]
 8001f96:	2145      	movs	r1, #69	; 0x45
 8001f98:	4620      	mov	r0, r4
 8001f9a:	f000 f859 	bl	8002050 <d_exprlist>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	e6c9      	b.n	8001d36 <d_expression_1+0x1d6>
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	60e3      	str	r3, [r4, #12]
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	9201      	str	r2, [sp, #4]
 8001faa:	f7ff fd11 	bl	80019d0 <d_template_args_1>
 8001fae:	9a01      	ldr	r2, [sp, #4]
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2104      	movs	r1, #4
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	f7fe f90b 	bl	80001d0 <d_make_comp>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	e74c      	b.n	8001e58 <d_expression_1+0x2f8>
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b73      	cmp	r3, #115	; 0x73
 8001fc2:	d00c      	beq.n	8001fde <d_expression_1+0x47e>
 8001fc4:	3b63      	subs	r3, #99	; 0x63
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b0f      	cmp	r3, #15
 8001fca:	f63f aeea 	bhi.w	8001da2 <d_expression_1+0x242>
 8001fce:	4a1f      	ldr	r2, [pc, #124]	; (800204c <d_expression_1+0x4ec>)
 8001fd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001fd4:	f8d3 37fc 	ldr.w	r3, [r3, #2044]	; 0x7fc
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f43f aee2 	beq.w	8001da2 <d_expression_1+0x242>
 8001fde:	4620      	mov	r0, r4
 8001fe0:	f7fe fd46 	bl	8000a70 <d_type>
 8001fe4:	4607      	mov	r7, r0
 8001fe6:	e6ef      	b.n	8001dc8 <d_expression_1+0x268>
 8001fe8:	2b70      	cmp	r3, #112	; 0x70
 8001fea:	d105      	bne.n	8001ff8 <d_expression_1+0x498>
 8001fec:	7873      	ldrb	r3, [r6, #1]
 8001fee:	2b74      	cmp	r3, #116	; 0x74
 8001ff0:	d102      	bne.n	8001ff8 <d_expression_1+0x498>
 8001ff2:	78b3      	ldrb	r3, [r6, #2]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0a7      	beq.n	8001f48 <d_expression_1+0x3e8>
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f7ff fdb1 	bl	8001b60 <d_expression_1>
 8001ffe:	4602      	mov	r2, r0
 8002000:	e6f3      	b.n	8001dea <d_expression_1+0x28a>
 8002002:	4620      	mov	r0, r4
 8002004:	f7ff fdac 	bl	8001b60 <d_expression_1>
 8002008:	4607      	mov	r7, r0
 800200a:	e6dd      	b.n	8001dc8 <d_expression_1+0x268>
 800200c:	785b      	ldrb	r3, [r3, #1]
 800200e:	2b73      	cmp	r3, #115	; 0x73
 8002010:	d1a3      	bne.n	8001f5a <d_expression_1+0x3fa>
 8002012:	e7f1      	b.n	8001ff8 <d_expression_1+0x498>
 8002014:	4620      	mov	r0, r4
 8002016:	f7ff f9fd 	bl	8001414 <d_operator_name>
 800201a:	4607      	mov	r7, r0
 800201c:	e6d4      	b.n	8001dc8 <d_expression_1+0x268>
 800201e:	4620      	mov	r0, r4
 8002020:	f7ff f9f8 	bl	8001414 <d_operator_name>
 8002024:	e69c      	b.n	8001d60 <d_expression_1+0x200>
 8002026:	785a      	ldrb	r2, [r3, #1]
 8002028:	2a69      	cmp	r2, #105	; 0x69
 800202a:	f47f ae23 	bne.w	8001c74 <d_expression_1+0x114>
 800202e:	3302      	adds	r3, #2
 8002030:	60e3      	str	r3, [r4, #12]
 8002032:	2145      	movs	r1, #69	; 0x45
 8002034:	4620      	mov	r0, r4
 8002036:	f000 f80b 	bl	8002050 <d_exprlist>
 800203a:	4603      	mov	r3, r0
 800203c:	e69c      	b.n	8001d78 <d_expression_1+0x218>
 800203e:	3301      	adds	r3, #1
 8002040:	60e3      	str	r3, [r4, #12]
 8002042:	2300      	movs	r3, #0
 8002044:	e698      	b.n	8001d78 <d_expression_1+0x218>
 8002046:	bf00      	nop
 8002048:	00040201 	.word	0x00040201
 800204c:	0801f2fc 	.word	0x0801f2fc

08002050 <d_exprlist>:
 8002050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002054:	68c2      	ldr	r2, [r0, #12]
 8002056:	460e      	mov	r6, r1
 8002058:	7811      	ldrb	r1, [r2, #0]
 800205a:	b082      	sub	sp, #8
 800205c:	2300      	movs	r3, #0
 800205e:	42b1      	cmp	r1, r6
 8002060:	4604      	mov	r4, r0
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	d024      	beq.n	80020b0 <d_exprlist+0x60>
 8002066:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
 800206a:	ad01      	add	r5, sp, #4
 800206c:	2701      	movs	r7, #1
 800206e:	e009      	b.n	8002084 <d_exprlist+0x34>
 8002070:	f7fe f8ae 	bl	80001d0 <d_make_comp>
 8002074:	6028      	str	r0, [r5, #0]
 8002076:	f100 0510 	add.w	r5, r0, #16
 800207a:	b178      	cbz	r0, 800209c <d_exprlist+0x4c>
 800207c:	68e3      	ldr	r3, [r4, #12]
 800207e:	781a      	ldrb	r2, [r3, #0]
 8002080:	42b2      	cmp	r2, r6
 8002082:	d00f      	beq.n	80020a4 <d_exprlist+0x54>
 8002084:	6327      	str	r7, [r4, #48]	; 0x30
 8002086:	4620      	mov	r0, r4
 8002088:	f7ff fd6a 	bl	8001b60 <d_expression_1>
 800208c:	4602      	mov	r2, r0
 800208e:	2300      	movs	r3, #0
 8002090:	212e      	movs	r1, #46	; 0x2e
 8002092:	4620      	mov	r0, r4
 8002094:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8002098:	2a00      	cmp	r2, #0
 800209a:	d1e9      	bne.n	8002070 <d_exprlist+0x20>
 800209c:	2000      	movs	r0, #0
 800209e:	b002      	add	sp, #8
 80020a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020a4:	9801      	ldr	r0, [sp, #4]
 80020a6:	3301      	adds	r3, #1
 80020a8:	60e3      	str	r3, [r4, #12]
 80020aa:	b002      	add	sp, #8
 80020ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020b0:	3201      	adds	r2, #1
 80020b2:	60c2      	str	r2, [r0, #12]
 80020b4:	212e      	movs	r1, #46	; 0x2e
 80020b6:	461a      	mov	r2, r3
 80020b8:	b002      	add	sp, #8
 80020ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020be:	f7fe b887 	b.w	80001d0 <d_make_comp>
 80020c2:	bf00      	nop

080020c4 <d_cv_qualifiers>:
 80020c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020c8:	460f      	mov	r7, r1
 80020ca:	68c1      	ldr	r1, [r0, #12]
 80020cc:	f1b2 0900 	subs.w	r9, r2, #0
 80020d0:	b083      	sub	sp, #12
 80020d2:	780a      	ldrb	r2, [r1, #0]
 80020d4:	4604      	mov	r4, r0
 80020d6:	bf15      	itete	ne
 80020d8:	f04f 0a1e 	movne.w	sl, #30
 80020dc:	f04f 0a1b 	moveq.w	sl, #27
 80020e0:	f04f 081d 	movne.w	r8, #29
 80020e4:	f04f 081a 	moveq.w	r8, #26
 80020e8:	bf14      	ite	ne
 80020ea:	261c      	movne	r6, #28
 80020ec:	2619      	moveq	r6, #25
 80020ee:	463d      	mov	r5, r7
 80020f0:	f04f 0b01 	mov.w	fp, #1
 80020f4:	e01b      	b.n	800212e <d_cv_qualifiers+0x6a>
 80020f6:	2a56      	cmp	r2, #86	; 0x56
 80020f8:	d033      	beq.n	8002162 <d_cv_qualifiers+0x9e>
 80020fa:	2a4b      	cmp	r2, #75	; 0x4b
 80020fc:	d037      	beq.n	800216e <d_cv_qualifiers+0xaa>
 80020fe:	784b      	ldrb	r3, [r1, #1]
 8002100:	b353      	cbz	r3, 8002158 <d_cv_qualifiers+0x94>
 8002102:	1c8b      	adds	r3, r1, #2
 8002104:	60e3      	str	r3, [r4, #12]
 8002106:	784b      	ldrb	r3, [r1, #1]
 8002108:	2b78      	cmp	r3, #120	; 0x78
 800210a:	d04f      	beq.n	80021ac <d_cv_qualifiers+0xe8>
 800210c:	2b6f      	cmp	r3, #111	; 0x6f
 800210e:	d134      	bne.n	800217a <d_cv_qualifiers+0xb6>
 8002110:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002112:	3309      	adds	r3, #9
 8002114:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002116:	2150      	movs	r1, #80	; 0x50
 8002118:	2300      	movs	r3, #0
 800211a:	2200      	movs	r2, #0
 800211c:	4620      	mov	r0, r4
 800211e:	f7fe f857 	bl	80001d0 <d_make_comp>
 8002122:	6028      	str	r0, [r5, #0]
 8002124:	b1c0      	cbz	r0, 8002158 <d_cv_qualifiers+0x94>
 8002126:	68e1      	ldr	r1, [r4, #12]
 8002128:	780a      	ldrb	r2, [r1, #0]
 800212a:	f100 050c 	add.w	r5, r0, #12
 800212e:	4608      	mov	r0, r1
 8002130:	f7fe fa24 	bl	800057c <next_is_type_qual.isra.0>
 8002134:	2800      	cmp	r0, #0
 8002136:	d03f      	beq.n	80021b8 <d_cv_qualifiers+0xf4>
 8002138:	1c4b      	adds	r3, r1, #1
 800213a:	2a72      	cmp	r2, #114	; 0x72
 800213c:	60e3      	str	r3, [r4, #12]
 800213e:	d1da      	bne.n	80020f6 <d_cv_qualifiers+0x32>
 8002140:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002142:	3309      	adds	r3, #9
 8002144:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002146:	4631      	mov	r1, r6
 8002148:	2300      	movs	r3, #0
 800214a:	2200      	movs	r2, #0
 800214c:	4620      	mov	r0, r4
 800214e:	f7fe f83f 	bl	80001d0 <d_make_comp>
 8002152:	6028      	str	r0, [r5, #0]
 8002154:	2800      	cmp	r0, #0
 8002156:	d1e6      	bne.n	8002126 <d_cv_qualifiers+0x62>
 8002158:	2500      	movs	r5, #0
 800215a:	4628      	mov	r0, r5
 800215c:	b003      	add	sp, #12
 800215e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002162:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002164:	3309      	adds	r3, #9
 8002166:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002168:	4641      	mov	r1, r8
 800216a:	2300      	movs	r3, #0
 800216c:	e7d5      	b.n	800211a <d_cv_qualifiers+0x56>
 800216e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002170:	3306      	adds	r3, #6
 8002172:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002174:	4651      	mov	r1, sl
 8002176:	2300      	movs	r3, #0
 8002178:	e7cf      	b.n	800211a <d_cv_qualifiers+0x56>
 800217a:	2b4f      	cmp	r3, #79	; 0x4f
 800217c:	d138      	bne.n	80021f0 <d_cv_qualifiers+0x12c>
 800217e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002180:	3309      	adds	r3, #9
 8002182:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002184:	4620      	mov	r0, r4
 8002186:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002188:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
 800218c:	9301      	str	r3, [sp, #4]
 800218e:	f7ff fce7 	bl	8001b60 <d_expression_1>
 8002192:	9b01      	ldr	r3, [sp, #4]
 8002194:	6323      	str	r3, [r4, #48]	; 0x30
 8002196:	4603      	mov	r3, r0
 8002198:	2800      	cmp	r0, #0
 800219a:	d0dd      	beq.n	8002158 <d_cv_qualifiers+0x94>
 800219c:	68e2      	ldr	r2, [r4, #12]
 800219e:	7811      	ldrb	r1, [r2, #0]
 80021a0:	2945      	cmp	r1, #69	; 0x45
 80021a2:	d1d9      	bne.n	8002158 <d_cv_qualifiers+0x94>
 80021a4:	3201      	adds	r2, #1
 80021a6:	60e2      	str	r2, [r4, #12]
 80021a8:	2150      	movs	r1, #80	; 0x50
 80021aa:	e7b6      	b.n	800211a <d_cv_qualifiers+0x56>
 80021ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80021ae:	3311      	adds	r3, #17
 80021b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80021b2:	214e      	movs	r1, #78	; 0x4e
 80021b4:	2300      	movs	r3, #0
 80021b6:	e7b0      	b.n	800211a <d_cv_qualifiers+0x56>
 80021b8:	f1b9 0f00 	cmp.w	r9, #0
 80021bc:	d1cd      	bne.n	800215a <d_cv_qualifiers+0x96>
 80021be:	2a46      	cmp	r2, #70	; 0x46
 80021c0:	d1cb      	bne.n	800215a <d_cv_qualifiers+0x96>
 80021c2:	42bd      	cmp	r5, r7
 80021c4:	d0c9      	beq.n	800215a <d_cv_qualifiers+0x96>
 80021c6:	201d      	movs	r0, #29
 80021c8:	211e      	movs	r1, #30
 80021ca:	221c      	movs	r2, #28
 80021cc:	e004      	b.n	80021d8 <d_cv_qualifiers+0x114>
 80021ce:	2b19      	cmp	r3, #25
 80021d0:	d00c      	beq.n	80021ec <d_cv_qualifiers+0x128>
 80021d2:	370c      	adds	r7, #12
 80021d4:	42bd      	cmp	r5, r7
 80021d6:	d0c0      	beq.n	800215a <d_cv_qualifiers+0x96>
 80021d8:	683f      	ldr	r7, [r7, #0]
 80021da:	783b      	ldrb	r3, [r7, #0]
 80021dc:	2b1a      	cmp	r3, #26
 80021de:	d003      	beq.n	80021e8 <d_cv_qualifiers+0x124>
 80021e0:	2b1b      	cmp	r3, #27
 80021e2:	d1f4      	bne.n	80021ce <d_cv_qualifiers+0x10a>
 80021e4:	7039      	strb	r1, [r7, #0]
 80021e6:	e7f4      	b.n	80021d2 <d_cv_qualifiers+0x10e>
 80021e8:	7038      	strb	r0, [r7, #0]
 80021ea:	e7f2      	b.n	80021d2 <d_cv_qualifiers+0x10e>
 80021ec:	703a      	strb	r2, [r7, #0]
 80021ee:	e7f0      	b.n	80021d2 <d_cv_qualifiers+0x10e>
 80021f0:	2b77      	cmp	r3, #119	; 0x77
 80021f2:	d1b1      	bne.n	8002158 <d_cv_qualifiers+0x94>
 80021f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80021f6:	3306      	adds	r3, #6
 80021f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80021fa:	4620      	mov	r0, r4
 80021fc:	f7ff f870 	bl	80012e0 <d_parmlist>
 8002200:	4603      	mov	r3, r0
 8002202:	2800      	cmp	r0, #0
 8002204:	d0a8      	beq.n	8002158 <d_cv_qualifiers+0x94>
 8002206:	68e2      	ldr	r2, [r4, #12]
 8002208:	7811      	ldrb	r1, [r2, #0]
 800220a:	2945      	cmp	r1, #69	; 0x45
 800220c:	d1a4      	bne.n	8002158 <d_cv_qualifiers+0x94>
 800220e:	3201      	adds	r2, #1
 8002210:	60e2      	str	r2, [r4, #12]
 8002212:	2151      	movs	r1, #81	; 0x51
 8002214:	e781      	b.n	800211a <d_cv_qualifiers+0x56>
 8002216:	bf00      	nop

08002218 <d_special_name>:
 8002218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800221c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800221e:	68c3      	ldr	r3, [r0, #12]
 8002220:	f101 0214 	add.w	r2, r1, #20
 8002224:	62c2      	str	r2, [r0, #44]	; 0x2c
 8002226:	781a      	ldrb	r2, [r3, #0]
 8002228:	2a54      	cmp	r2, #84	; 0x54
 800222a:	b082      	sub	sp, #8
 800222c:	4604      	mov	r4, r0
 800222e:	d075      	beq.n	800231c <d_special_name+0x104>
 8002230:	2a47      	cmp	r2, #71	; 0x47
 8002232:	d128      	bne.n	8002286 <d_special_name+0x6e>
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	60c2      	str	r2, [r0, #12]
 8002238:	785a      	ldrb	r2, [r3, #1]
 800223a:	b322      	cbz	r2, 8002286 <d_special_name+0x6e>
 800223c:	1c9a      	adds	r2, r3, #2
 800223e:	60c2      	str	r2, [r0, #12]
 8002240:	785a      	ldrb	r2, [r3, #1]
 8002242:	2a56      	cmp	r2, #86	; 0x56
 8002244:	d823      	bhi.n	800228e <d_special_name+0x76>
 8002246:	2a40      	cmp	r2, #64	; 0x40
 8002248:	d91d      	bls.n	8002286 <d_special_name+0x6e>
 800224a:	3a41      	subs	r2, #65	; 0x41
 800224c:	2a15      	cmp	r2, #21
 800224e:	d81a      	bhi.n	8002286 <d_special_name+0x6e>
 8002250:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002254:	0019011d 	.word	0x0019011d
 8002258:	00190019 	.word	0x00190019
 800225c:	00190019 	.word	0x00190019
 8002260:	00190019 	.word	0x00190019
 8002264:	00190019 	.word	0x00190019
 8002268:	00190019 	.word	0x00190019
 800226c:	00190019 	.word	0x00190019
 8002270:	00190019 	.word	0x00190019
 8002274:	00ff0019 	.word	0x00ff0019
 8002278:	00e90019 	.word	0x00e90019
 800227c:	00de0019 	.word	0x00de0019
 8002280:	68e3      	ldr	r3, [r4, #12]
 8002282:	3302      	adds	r3, #2
 8002284:	60e3      	str	r3, [r4, #12]
 8002286:	2000      	movs	r0, #0
 8002288:	b002      	add	sp, #8
 800228a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800228e:	2a72      	cmp	r2, #114	; 0x72
 8002290:	d1f9      	bne.n	8002286 <d_special_name+0x6e>
 8002292:	f7fe f815 	bl	80002c0 <d_number>
 8002296:	2801      	cmp	r0, #1
 8002298:	ddf5      	ble.n	8002286 <d_special_name+0x6e>
 800229a:	68e3      	ldr	r3, [r4, #12]
 800229c:	781a      	ldrb	r2, [r3, #0]
 800229e:	2a00      	cmp	r2, #0
 80022a0:	d0f1      	beq.n	8002286 <d_special_name+0x6e>
 80022a2:	1c5e      	adds	r6, r3, #1
 80022a4:	60e6      	str	r6, [r4, #12]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b5f      	cmp	r3, #95	; 0x5f
 80022aa:	d1ec      	bne.n	8002286 <d_special_name+0x6e>
 80022ac:	2200      	movs	r2, #0
 80022ae:	1e45      	subs	r5, r0, #1
 80022b0:	4617      	mov	r7, r2
 80022b2:	f04f 0842 	mov.w	r8, #66	; 0x42
 80022b6:	7833      	ldrb	r3, [r6, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0e4      	beq.n	8002286 <d_special_name+0x6e>
 80022bc:	2b24      	cmp	r3, #36	; 0x24
 80022be:	f040 819f 	bne.w	8002600 <d_special_name+0x3e8>
 80022c2:	7873      	ldrb	r3, [r6, #1]
 80022c4:	2b53      	cmp	r3, #83	; 0x53
 80022c6:	f000 81bf 	beq.w	8002648 <d_special_name+0x430>
 80022ca:	2b5f      	cmp	r3, #95	; 0x5f
 80022cc:	f000 81ba 	beq.w	8002644 <d_special_name+0x42c>
 80022d0:	2b24      	cmp	r3, #36	; 0x24
 80022d2:	d1d8      	bne.n	8002286 <d_special_name+0x6e>
 80022d4:	4619      	mov	r1, r3
 80022d6:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
 80022da:	4298      	cmp	r0, r3
 80022dc:	dad0      	bge.n	8002280 <d_special_name+0x68>
 80022de:	6926      	ldr	r6, [r4, #16]
 80022e0:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
 80022e4:	eb06 038c 	add.w	r3, r6, ip, lsl #2
 80022e8:	3001      	adds	r0, #1
 80022ea:	e9c3 7701 	strd	r7, r7, [r3, #4]
 80022ee:	6160      	str	r0, [r4, #20]
 80022f0:	f806 802c 	strb.w	r8, [r6, ip, lsl #2]
 80022f4:	68e6      	ldr	r6, [r4, #12]
 80022f6:	60d9      	str	r1, [r3, #12]
 80022f8:	3d02      	subs	r5, #2
 80022fa:	3602      	adds	r6, #2
 80022fc:	60e6      	str	r6, [r4, #12]
 80022fe:	2a00      	cmp	r2, #0
 8002300:	f000 819e 	beq.w	8002640 <d_special_name+0x428>
 8002304:	2141      	movs	r1, #65	; 0x41
 8002306:	4620      	mov	r0, r4
 8002308:	f7fd ff62 	bl	80001d0 <d_make_comp>
 800230c:	4602      	mov	r2, r0
 800230e:	2800      	cmp	r0, #0
 8002310:	d0b9      	beq.n	8002286 <d_special_name+0x6e>
 8002312:	2d00      	cmp	r5, #0
 8002314:	dccf      	bgt.n	80022b6 <d_special_name+0x9e>
 8002316:	2300      	movs	r3, #0
 8002318:	2140      	movs	r1, #64	; 0x40
 800231a:	e07e      	b.n	800241a <d_special_name+0x202>
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	60c2      	str	r2, [r0, #12]
 8002320:	785a      	ldrb	r2, [r3, #1]
 8002322:	2a00      	cmp	r2, #0
 8002324:	d0af      	beq.n	8002286 <d_special_name+0x6e>
 8002326:	1c9a      	adds	r2, r3, #2
 8002328:	60c2      	str	r2, [r0, #12]
 800232a:	785b      	ldrb	r3, [r3, #1]
 800232c:	3b41      	subs	r3, #65	; 0x41
 800232e:	2b35      	cmp	r3, #53	; 0x35
 8002330:	d8a9      	bhi.n	8002286 <d_special_name+0x6e>
 8002332:	a201      	add	r2, pc, #4	; (adr r2, 8002338 <d_special_name+0x120>)
 8002334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002338:	080024ff 	.word	0x080024ff
 800233c:	08002287 	.word	0x08002287
 8002340:	080024cb 	.word	0x080024cb
 8002344:	08002287 	.word	0x08002287
 8002348:	08002287 	.word	0x08002287
 800234c:	0800250b 	.word	0x0800250b
 8002350:	08002287 	.word	0x08002287
 8002354:	0800256f 	.word	0x0800256f
 8002358:	080025e9 	.word	0x080025e9
 800235c:	080025dd 	.word	0x080025dd
 8002360:	08002287 	.word	0x08002287
 8002364:	08002287 	.word	0x08002287
 8002368:	08002287 	.word	0x08002287
 800236c:	08002287 	.word	0x08002287
 8002370:	08002287 	.word	0x08002287
 8002374:	08002287 	.word	0x08002287
 8002378:	08002287 	.word	0x08002287
 800237c:	08002287 	.word	0x08002287
 8002380:	080025f5 	.word	0x080025f5
 8002384:	0800257b 	.word	0x0800257b
 8002388:	08002287 	.word	0x08002287
 800238c:	0800258b 	.word	0x0800258b
 8002390:	0800259b 	.word	0x0800259b
 8002394:	08002287 	.word	0x08002287
 8002398:	08002287 	.word	0x08002287
 800239c:	08002287 	.word	0x08002287
 80023a0:	08002287 	.word	0x08002287
 80023a4:	08002287 	.word	0x08002287
 80023a8:	08002287 	.word	0x08002287
 80023ac:	08002287 	.word	0x08002287
 80023b0:	08002287 	.word	0x08002287
 80023b4:	08002287 	.word	0x08002287
 80023b8:	08002287 	.word	0x08002287
 80023bc:	08002287 	.word	0x08002287
 80023c0:	080025a7 	.word	0x080025a7
 80023c4:	08002287 	.word	0x08002287
 80023c8:	08002287 	.word	0x08002287
 80023cc:	08002287 	.word	0x08002287
 80023d0:	08002287 	.word	0x08002287
 80023d4:	08002517 	.word	0x08002517
 80023d8:	08002287 	.word	0x08002287
 80023dc:	08002287 	.word	0x08002287
 80023e0:	08002287 	.word	0x08002287
 80023e4:	08002287 	.word	0x08002287
 80023e8:	08002287 	.word	0x08002287
 80023ec:	08002287 	.word	0x08002287
 80023f0:	08002287 	.word	0x08002287
 80023f4:	08002287 	.word	0x08002287
 80023f8:	08002287 	.word	0x08002287
 80023fc:	08002287 	.word	0x08002287
 8002400:	08002287 	.word	0x08002287
 8002404:	08002287 	.word	0x08002287
 8002408:	08002287 	.word	0x08002287
 800240c:	08002543 	.word	0x08002543
 8002410:	f000 f93c 	bl	800268c <d_name>
 8002414:	2300      	movs	r3, #0
 8002416:	4602      	mov	r2, r0
 8002418:	2113      	movs	r1, #19
 800241a:	4620      	mov	r0, r4
 800241c:	b002      	add	sp, #8
 800241e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002422:	f7fd bed5 	b.w	80001d0 <d_make_comp>
 8002426:	789a      	ldrb	r2, [r3, #2]
 8002428:	2a00      	cmp	r2, #0
 800242a:	f000 810f 	beq.w	800264c <d_special_name+0x434>
 800242e:	1cda      	adds	r2, r3, #3
 8002430:	60c2      	str	r2, [r0, #12]
 8002432:	789a      	ldrb	r2, [r3, #2]
 8002434:	78db      	ldrb	r3, [r3, #3]
 8002436:	2a6e      	cmp	r2, #110	; 0x6e
 8002438:	d03a      	beq.n	80024b0 <d_special_name+0x298>
 800243a:	2b47      	cmp	r3, #71	; 0x47
 800243c:	d002      	beq.n	8002444 <d_special_name+0x22c>
 800243e:	2b54      	cmp	r3, #84	; 0x54
 8002440:	f040 8104 	bne.w	800264c <d_special_name+0x434>
 8002444:	4620      	mov	r0, r4
 8002446:	f7ff fee7 	bl	8002218 <d_special_name>
 800244a:	4602      	mov	r2, r0
 800244c:	2300      	movs	r3, #0
 800244e:	214a      	movs	r1, #74	; 0x4a
 8002450:	e7e3      	b.n	800241a <d_special_name+0x202>
 8002452:	f000 f91b 	bl	800268c <d_name>
 8002456:	e9d4 1305 	ldrd	r1, r3, [r4, #20]
 800245a:	4299      	cmp	r1, r3
 800245c:	4602      	mov	r2, r0
 800245e:	f280 80ff 	bge.w	8002660 <d_special_name+0x448>
 8002462:	9001      	str	r0, [sp, #4]
 8002464:	6920      	ldr	r0, [r4, #16]
 8002466:	eb01 0681 	add.w	r6, r1, r1, lsl #2
 800246a:	eb00 0586 	add.w	r5, r0, r6, lsl #2
 800246e:	2300      	movs	r3, #0
 8002470:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8002474:	3101      	adds	r1, #1
 8002476:	2343      	movs	r3, #67	; 0x43
 8002478:	6161      	str	r1, [r4, #20]
 800247a:	f800 3026 	strb.w	r3, [r0, r6, lsl #2]
 800247e:	4620      	mov	r0, r4
 8002480:	f7fd ff1e 	bl	80002c0 <d_number>
 8002484:	9a01      	ldr	r2, [sp, #4]
 8002486:	60e8      	str	r0, [r5, #12]
 8002488:	462b      	mov	r3, r5
 800248a:	2116      	movs	r1, #22
 800248c:	e7c5      	b.n	800241a <d_special_name+0x202>
 800248e:	789b      	ldrb	r3, [r3, #2]
 8002490:	2b47      	cmp	r3, #71	; 0x47
 8002492:	d001      	beq.n	8002498 <d_special_name+0x280>
 8002494:	2b54      	cmp	r3, #84	; 0x54
 8002496:	d106      	bne.n	80024a6 <d_special_name+0x28e>
 8002498:	4620      	mov	r0, r4
 800249a:	f7ff febd 	bl	8002218 <d_special_name>
 800249e:	4602      	mov	r2, r0
 80024a0:	2300      	movs	r3, #0
 80024a2:	2117      	movs	r1, #23
 80024a4:	e7b9      	b.n	800241a <d_special_name+0x202>
 80024a6:	2100      	movs	r1, #0
 80024a8:	f000 fa3e 	bl	8002928 <d_encoding.part.0>
 80024ac:	4602      	mov	r2, r0
 80024ae:	e7f7      	b.n	80024a0 <d_special_name+0x288>
 80024b0:	2b47      	cmp	r3, #71	; 0x47
 80024b2:	f000 80e1 	beq.w	8002678 <d_special_name+0x460>
 80024b6:	2b54      	cmp	r3, #84	; 0x54
 80024b8:	f000 80de 	beq.w	8002678 <d_special_name+0x460>
 80024bc:	2100      	movs	r1, #0
 80024be:	f000 fa33 	bl	8002928 <d_encoding.part.0>
 80024c2:	4602      	mov	r2, r0
 80024c4:	2300      	movs	r3, #0
 80024c6:	214b      	movs	r1, #75	; 0x4b
 80024c8:	e7a7      	b.n	800241a <d_special_name+0x202>
 80024ca:	f7fe fad1 	bl	8000a70 <d_type>
 80024ce:	4605      	mov	r5, r0
 80024d0:	4620      	mov	r0, r4
 80024d2:	f7fd fef5 	bl	80002c0 <d_number>
 80024d6:	2800      	cmp	r0, #0
 80024d8:	f6ff aed5 	blt.w	8002286 <d_special_name+0x6e>
 80024dc:	68e3      	ldr	r3, [r4, #12]
 80024de:	781a      	ldrb	r2, [r3, #0]
 80024e0:	2a5f      	cmp	r2, #95	; 0x5f
 80024e2:	f47f aed0 	bne.w	8002286 <d_special_name+0x6e>
 80024e6:	3301      	adds	r3, #1
 80024e8:	60e3      	str	r3, [r4, #12]
 80024ea:	4620      	mov	r0, r4
 80024ec:	f7fe fac0 	bl	8000a70 <d_type>
 80024f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80024f2:	3105      	adds	r1, #5
 80024f4:	62e1      	str	r1, [r4, #44]	; 0x2c
 80024f6:	4602      	mov	r2, r0
 80024f8:	462b      	mov	r3, r5
 80024fa:	210b      	movs	r1, #11
 80024fc:	e78d      	b.n	800241a <d_special_name+0x202>
 80024fe:	f7ff fa3d 	bl	800197c <d_template_arg>
 8002502:	2300      	movs	r3, #0
 8002504:	4602      	mov	r2, r0
 8002506:	2130      	movs	r1, #48	; 0x30
 8002508:	e787      	b.n	800241a <d_special_name+0x202>
 800250a:	f7fe fab1 	bl	8000a70 <d_type>
 800250e:	2300      	movs	r3, #0
 8002510:	4602      	mov	r2, r0
 8002512:	210e      	movs	r1, #14
 8002514:	e781      	b.n	800241a <d_special_name+0x202>
 8002516:	2168      	movs	r1, #104	; 0x68
 8002518:	f7fd ff0c 	bl	8000334 <d_call_offset>
 800251c:	2800      	cmp	r0, #0
 800251e:	f43f aeb2 	beq.w	8002286 <d_special_name+0x6e>
 8002522:	68e3      	ldr	r3, [r4, #12]
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b47      	cmp	r3, #71	; 0x47
 8002528:	f000 80a1 	beq.w	800266e <d_special_name+0x456>
 800252c:	2b54      	cmp	r3, #84	; 0x54
 800252e:	f000 809e 	beq.w	800266e <d_special_name+0x456>
 8002532:	2100      	movs	r1, #0
 8002534:	4620      	mov	r0, r4
 8002536:	f000 f9f7 	bl	8002928 <d_encoding.part.0>
 800253a:	4602      	mov	r2, r0
 800253c:	2300      	movs	r3, #0
 800253e:	210f      	movs	r1, #15
 8002540:	e76b      	b.n	800241a <d_special_name+0x202>
 8002542:	2176      	movs	r1, #118	; 0x76
 8002544:	f7fd fef6 	bl	8000334 <d_call_offset>
 8002548:	2800      	cmp	r0, #0
 800254a:	f43f ae9c 	beq.w	8002286 <d_special_name+0x6e>
 800254e:	68e3      	ldr	r3, [r4, #12]
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b47      	cmp	r3, #71	; 0x47
 8002554:	f000 8086 	beq.w	8002664 <d_special_name+0x44c>
 8002558:	2b54      	cmp	r3, #84	; 0x54
 800255a:	f000 8083 	beq.w	8002664 <d_special_name+0x44c>
 800255e:	2100      	movs	r1, #0
 8002560:	4620      	mov	r0, r4
 8002562:	f000 f9e1 	bl	8002928 <d_encoding.part.0>
 8002566:	4602      	mov	r2, r0
 8002568:	2300      	movs	r3, #0
 800256a:	2110      	movs	r1, #16
 800256c:	e755      	b.n	800241a <d_special_name+0x202>
 800256e:	f000 f88d 	bl	800268c <d_name>
 8002572:	2300      	movs	r3, #0
 8002574:	4602      	mov	r2, r0
 8002576:	2114      	movs	r1, #20
 8002578:	e74f      	b.n	800241a <d_special_name+0x202>
 800257a:	310a      	adds	r1, #10
 800257c:	62c1      	str	r1, [r0, #44]	; 0x2c
 800257e:	f7fe fa77 	bl	8000a70 <d_type>
 8002582:	2300      	movs	r3, #0
 8002584:	4602      	mov	r2, r0
 8002586:	210a      	movs	r1, #10
 8002588:	e747      	b.n	800241a <d_special_name+0x202>
 800258a:	310f      	adds	r1, #15
 800258c:	62c1      	str	r1, [r0, #44]	; 0x2c
 800258e:	f7fe fa6f 	bl	8000a70 <d_type>
 8002592:	2300      	movs	r3, #0
 8002594:	4602      	mov	r2, r0
 8002596:	2109      	movs	r1, #9
 8002598:	e73f      	b.n	800241a <d_special_name+0x202>
 800259a:	f000 f877 	bl	800268c <d_name>
 800259e:	2300      	movs	r3, #0
 80025a0:	4602      	mov	r2, r0
 80025a2:	2115      	movs	r1, #21
 80025a4:	e739      	b.n	800241a <d_special_name+0x202>
 80025a6:	2100      	movs	r1, #0
 80025a8:	f7fd fec4 	bl	8000334 <d_call_offset>
 80025ac:	2800      	cmp	r0, #0
 80025ae:	f43f ae6a 	beq.w	8002286 <d_special_name+0x6e>
 80025b2:	2100      	movs	r1, #0
 80025b4:	4620      	mov	r0, r4
 80025b6:	f7fd febd 	bl	8000334 <d_call_offset>
 80025ba:	2800      	cmp	r0, #0
 80025bc:	f43f ae63 	beq.w	8002286 <d_special_name+0x6e>
 80025c0:	68e3      	ldr	r3, [r4, #12]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b47      	cmp	r3, #71	; 0x47
 80025c6:	d05c      	beq.n	8002682 <d_special_name+0x46a>
 80025c8:	2b54      	cmp	r3, #84	; 0x54
 80025ca:	d05a      	beq.n	8002682 <d_special_name+0x46a>
 80025cc:	2100      	movs	r1, #0
 80025ce:	4620      	mov	r0, r4
 80025d0:	f000 f9aa 	bl	8002928 <d_encoding.part.0>
 80025d4:	4602      	mov	r2, r0
 80025d6:	2300      	movs	r3, #0
 80025d8:	2111      	movs	r1, #17
 80025da:	e71e      	b.n	800241a <d_special_name+0x202>
 80025dc:	f7fe fa48 	bl	8000a70 <d_type>
 80025e0:	2300      	movs	r3, #0
 80025e2:	4602      	mov	r2, r0
 80025e4:	2112      	movs	r1, #18
 80025e6:	e718      	b.n	800241a <d_special_name+0x202>
 80025e8:	f7fe fa42 	bl	8000a70 <d_type>
 80025ec:	2300      	movs	r3, #0
 80025ee:	4602      	mov	r2, r0
 80025f0:	210c      	movs	r1, #12
 80025f2:	e712      	b.n	800241a <d_special_name+0x202>
 80025f4:	f7fe fa3c 	bl	8000a70 <d_type>
 80025f8:	2300      	movs	r3, #0
 80025fa:	4602      	mov	r2, r0
 80025fc:	210d      	movs	r1, #13
 80025fe:	e70c      	b.n	800241a <d_special_name+0x202>
 8002600:	46b4      	mov	ip, r6
 8002602:	2100      	movs	r1, #0
 8002604:	e004      	b.n	8002610 <d_special_name+0x3f8>
 8002606:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800260a:	b123      	cbz	r3, 8002616 <d_special_name+0x3fe>
 800260c:	2b24      	cmp	r3, #36	; 0x24
 800260e:	d002      	beq.n	8002616 <d_special_name+0x3fe>
 8002610:	3101      	adds	r1, #1
 8002612:	42a9      	cmp	r1, r5
 8002614:	dbf7      	blt.n	8002606 <d_special_name+0x3ee>
 8002616:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800261a:	4283      	cmp	r3, r0
 800261c:	da1c      	bge.n	8002658 <d_special_name+0x440>
 800261e:	6920      	ldr	r0, [r4, #16]
 8002620:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8002624:	3301      	adds	r3, #1
 8002626:	6163      	str	r3, [r4, #20]
 8002628:	eb00 038c 	add.w	r3, r0, ip, lsl #2
 800262c:	e9c3 7701 	strd	r7, r7, [r3, #4]
 8002630:	f800 702c 	strb.w	r7, [r0, ip, lsl #2]
 8002634:	e9c3 6103 	strd	r6, r1, [r3, #12]
 8002638:	68e6      	ldr	r6, [r4, #12]
 800263a:	1a6d      	subs	r5, r5, r1
 800263c:	440e      	add	r6, r1
 800263e:	e65d      	b.n	80022fc <d_special_name+0xe4>
 8002640:	461a      	mov	r2, r3
 8002642:	e666      	b.n	8002312 <d_special_name+0xfa>
 8002644:	212e      	movs	r1, #46	; 0x2e
 8002646:	e646      	b.n	80022d6 <d_special_name+0xbe>
 8002648:	212f      	movs	r1, #47	; 0x2f
 800264a:	e644      	b.n	80022d6 <d_special_name+0xbe>
 800264c:	2100      	movs	r1, #0
 800264e:	4620      	mov	r0, r4
 8002650:	f000 f96a 	bl	8002928 <d_encoding.part.0>
 8002654:	4602      	mov	r2, r0
 8002656:	e6f9      	b.n	800244c <d_special_name+0x234>
 8002658:	68e3      	ldr	r3, [r4, #12]
 800265a:	440b      	add	r3, r1
 800265c:	60e3      	str	r3, [r4, #12]
 800265e:	e612      	b.n	8002286 <d_special_name+0x6e>
 8002660:	2500      	movs	r5, #0
 8002662:	e711      	b.n	8002488 <d_special_name+0x270>
 8002664:	4620      	mov	r0, r4
 8002666:	f7ff fdd7 	bl	8002218 <d_special_name>
 800266a:	4602      	mov	r2, r0
 800266c:	e77c      	b.n	8002568 <d_special_name+0x350>
 800266e:	4620      	mov	r0, r4
 8002670:	f7ff fdd2 	bl	8002218 <d_special_name>
 8002674:	4602      	mov	r2, r0
 8002676:	e761      	b.n	800253c <d_special_name+0x324>
 8002678:	4620      	mov	r0, r4
 800267a:	f7ff fdcd 	bl	8002218 <d_special_name>
 800267e:	4602      	mov	r2, r0
 8002680:	e720      	b.n	80024c4 <d_special_name+0x2ac>
 8002682:	4620      	mov	r0, r4
 8002684:	f7ff fdc8 	bl	8002218 <d_special_name>
 8002688:	4602      	mov	r2, r0
 800268a:	e7a4      	b.n	80025d6 <d_special_name+0x3be>

0800268c <d_name>:
 800268c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800268e:	68c2      	ldr	r2, [r0, #12]
 8002690:	7813      	ldrb	r3, [r2, #0]
 8002692:	3b4e      	subs	r3, #78	; 0x4e
 8002694:	b083      	sub	sp, #12
 8002696:	4604      	mov	r4, r0
 8002698:	2b0c      	cmp	r3, #12
 800269a:	d808      	bhi.n	80026ae <d_name+0x22>
 800269c:	e8df f003 	tbb	[pc, r3]
 80026a0:	07070731 	.word	0x07070731
 80026a4:	12071707 	.word	0x12071707
 80026a8:	07070707 	.word	0x07070707
 80026ac:	55          	.byte	0x55
 80026ad:	00          	.byte	0x00
 80026ae:	f7fe ff35 	bl	800151c <d_unqualified_name>
 80026b2:	68e3      	ldr	r3, [r4, #12]
 80026b4:	781a      	ldrb	r2, [r3, #0]
 80026b6:	2a49      	cmp	r2, #73	; 0x49
 80026b8:	4605      	mov	r5, r0
 80026ba:	f000 80d2 	beq.w	8002862 <d_name+0x1d6>
 80026be:	4628      	mov	r0, r5
 80026c0:	b003      	add	sp, #12
 80026c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026c4:	b003      	add	sp, #12
 80026c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80026ca:	f7fe bf27 	b.w	800151c <d_unqualified_name>
 80026ce:	7853      	ldrb	r3, [r2, #1]
 80026d0:	2b74      	cmp	r3, #116	; 0x74
 80026d2:	f000 808e 	beq.w	80027f2 <d_name+0x166>
 80026d6:	2100      	movs	r1, #0
 80026d8:	f7fe f900 	bl	80008dc <d_substitution>
 80026dc:	68e3      	ldr	r3, [r4, #12]
 80026de:	781a      	ldrb	r2, [r3, #0]
 80026e0:	2a49      	cmp	r2, #73	; 0x49
 80026e2:	4605      	mov	r5, r0
 80026e4:	d1eb      	bne.n	80026be <d_name+0x32>
 80026e6:	3301      	adds	r3, #1
 80026e8:	60e3      	str	r3, [r4, #12]
 80026ea:	4620      	mov	r0, r4
 80026ec:	f7ff f970 	bl	80019d0 <d_template_args_1>
 80026f0:	4603      	mov	r3, r0
 80026f2:	462a      	mov	r2, r5
 80026f4:	2104      	movs	r1, #4
 80026f6:	4620      	mov	r0, r4
 80026f8:	b003      	add	sp, #12
 80026fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80026fe:	f7fd bd67 	b.w	80001d0 <d_make_comp>
 8002702:	3201      	adds	r2, #1
 8002704:	60c2      	str	r2, [r0, #12]
 8002706:	a901      	add	r1, sp, #4
 8002708:	2201      	movs	r2, #1
 800270a:	f7ff fcdb 	bl	80020c4 <d_cv_qualifiers>
 800270e:	4605      	mov	r5, r0
 8002710:	2800      	cmp	r0, #0
 8002712:	f000 80b7 	beq.w	8002884 <d_name+0x1f8>
 8002716:	2100      	movs	r1, #0
 8002718:	4620      	mov	r0, r4
 800271a:	f7fd fe2f 	bl	800037c <d_ref_qualifier>
 800271e:	2101      	movs	r1, #1
 8002720:	4606      	mov	r6, r0
 8002722:	4620      	mov	r0, r4
 8002724:	f7ff f986 	bl	8001a34 <d_prefix>
 8002728:	6028      	str	r0, [r5, #0]
 800272a:	2800      	cmp	r0, #0
 800272c:	f000 80aa 	beq.w	8002884 <d_name+0x1f8>
 8002730:	b116      	cbz	r6, 8002738 <d_name+0xac>
 8002732:	9b01      	ldr	r3, [sp, #4]
 8002734:	60f3      	str	r3, [r6, #12]
 8002736:	9601      	str	r6, [sp, #4]
 8002738:	68e3      	ldr	r3, [r4, #12]
 800273a:	781a      	ldrb	r2, [r3, #0]
 800273c:	2a45      	cmp	r2, #69	; 0x45
 800273e:	f040 80a1 	bne.w	8002884 <d_name+0x1f8>
 8002742:	3301      	adds	r3, #1
 8002744:	9d01      	ldr	r5, [sp, #4]
 8002746:	60e3      	str	r3, [r4, #12]
 8002748:	e7b9      	b.n	80026be <d_name+0x32>
 800274a:	1c53      	adds	r3, r2, #1
 800274c:	60c3      	str	r3, [r0, #12]
 800274e:	7853      	ldrb	r3, [r2, #1]
 8002750:	2b47      	cmp	r3, #71	; 0x47
 8002752:	d002      	beq.n	800275a <d_name+0xce>
 8002754:	2b54      	cmp	r3, #84	; 0x54
 8002756:	f040 8099 	bne.w	800288c <d_name+0x200>
 800275a:	4620      	mov	r0, r4
 800275c:	f7ff fd5c 	bl	8002218 <d_special_name>
 8002760:	4605      	mov	r5, r0
 8002762:	2d00      	cmp	r5, #0
 8002764:	f000 808e 	beq.w	8002884 <d_name+0x1f8>
 8002768:	68e3      	ldr	r3, [r4, #12]
 800276a:	781a      	ldrb	r2, [r3, #0]
 800276c:	2a45      	cmp	r2, #69	; 0x45
 800276e:	f040 8089 	bne.w	8002884 <d_name+0x1f8>
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	60e2      	str	r2, [r4, #12]
 8002776:	785a      	ldrb	r2, [r3, #1]
 8002778:	2a73      	cmp	r2, #115	; 0x73
 800277a:	f000 80ad 	beq.w	80028d8 <d_name+0x24c>
 800277e:	2a64      	cmp	r2, #100	; 0x64
 8002780:	f000 8089 	beq.w	8002896 <d_name+0x20a>
 8002784:	4620      	mov	r0, r4
 8002786:	f7ff ff81 	bl	800268c <d_name>
 800278a:	4603      	mov	r3, r0
 800278c:	b328      	cbz	r0, 80027da <d_name+0x14e>
 800278e:	7802      	ldrb	r2, [r0, #0]
 8002790:	2a47      	cmp	r2, #71	; 0x47
 8002792:	d022      	beq.n	80027da <d_name+0x14e>
 8002794:	2a49      	cmp	r2, #73	; 0x49
 8002796:	d020      	beq.n	80027da <d_name+0x14e>
 8002798:	461f      	mov	r7, r3
 800279a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800279e:	4620      	mov	r0, r4
 80027a0:	f7fd fe7e 	bl	80004a0 <d_discriminator>
 80027a4:	2800      	cmp	r0, #0
 80027a6:	d06d      	beq.n	8002884 <d_name+0x1f8>
 80027a8:	1c73      	adds	r3, r6, #1
 80027aa:	bf08      	it	eq
 80027ac:	463b      	moveq	r3, r7
 80027ae:	d014      	beq.n	80027da <d_name+0x14e>
 80027b0:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	f280 80b0 	bge.w	800291a <d_name+0x28e>
 80027ba:	6921      	ldr	r1, [r4, #16]
 80027bc:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 80027c0:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 80027c4:	3201      	adds	r2, #1
 80027c6:	f04f 0c00 	mov.w	ip, #0
 80027ca:	e9c3 cc01 	strd	ip, ip, [r3, #4]
 80027ce:	6162      	str	r2, [r4, #20]
 80027d0:	2248      	movs	r2, #72	; 0x48
 80027d2:	f801 2020 	strb.w	r2, [r1, r0, lsl #2]
 80027d6:	e9c3 7603 	strd	r7, r6, [r3, #12]
 80027da:	782a      	ldrb	r2, [r5, #0]
 80027dc:	2a03      	cmp	r2, #3
 80027de:	d105      	bne.n	80027ec <d_name+0x160>
 80027e0:	692a      	ldr	r2, [r5, #16]
 80027e2:	7811      	ldrb	r1, [r2, #0]
 80027e4:	2929      	cmp	r1, #41	; 0x29
 80027e6:	bf04      	itt	eq
 80027e8:	2100      	moveq	r1, #0
 80027ea:	60d1      	streq	r1, [r2, #12]
 80027ec:	462a      	mov	r2, r5
 80027ee:	2102      	movs	r1, #2
 80027f0:	e781      	b.n	80026f6 <d_name+0x6a>
 80027f2:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
 80027f6:	3202      	adds	r2, #2
 80027f8:	428b      	cmp	r3, r1
 80027fa:	60c2      	str	r2, [r0, #12]
 80027fc:	f280 8088 	bge.w	8002910 <d_name+0x284>
 8002800:	6902      	ldr	r2, [r0, #16]
 8002802:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8002806:	00a9      	lsls	r1, r5, #2
 8002808:	3301      	adds	r3, #1
 800280a:	6143      	str	r3, [r0, #20]
 800280c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8002810:	2300      	movs	r3, #0
 8002812:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8002816:	5453      	strb	r3, [r2, r1]
 8002818:	4a41      	ldr	r2, [pc, #260]	; (8002920 <d_name+0x294>)
 800281a:	2303      	movs	r3, #3
 800281c:	e9c5 2303 	strd	r2, r3, [r5, #12]
 8002820:	4620      	mov	r0, r4
 8002822:	f7fe fe7b 	bl	800151c <d_unqualified_name>
 8002826:	462a      	mov	r2, r5
 8002828:	4603      	mov	r3, r0
 800282a:	2101      	movs	r1, #1
 800282c:	4620      	mov	r0, r4
 800282e:	f7fd fccf 	bl	80001d0 <d_make_comp>
 8002832:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002834:	68e3      	ldr	r3, [r4, #12]
 8002836:	3203      	adds	r2, #3
 8002838:	62e2      	str	r2, [r4, #44]	; 0x2c
 800283a:	781a      	ldrb	r2, [r3, #0]
 800283c:	2a49      	cmp	r2, #73	; 0x49
 800283e:	4605      	mov	r5, r0
 8002840:	f47f af3d 	bne.w	80026be <d_name+0x32>
 8002844:	b1f0      	cbz	r0, 8002884 <d_name+0x1f8>
 8002846:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 800284a:	428a      	cmp	r2, r1
 800284c:	da1a      	bge.n	8002884 <d_name+0x1f8>
 800284e:	69e1      	ldr	r1, [r4, #28]
 8002850:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8002854:	3201      	adds	r2, #1
 8002856:	6222      	str	r2, [r4, #32]
 8002858:	781a      	ldrb	r2, [r3, #0]
 800285a:	3a49      	subs	r2, #73	; 0x49
 800285c:	2a01      	cmp	r2, #1
 800285e:	d80f      	bhi.n	8002880 <d_name+0x1f4>
 8002860:	e741      	b.n	80026e6 <d_name+0x5a>
 8002862:	b178      	cbz	r0, 8002884 <d_name+0x1f8>
 8002864:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
 8002868:	428a      	cmp	r2, r1
 800286a:	da0b      	bge.n	8002884 <d_name+0x1f8>
 800286c:	69e1      	ldr	r1, [r4, #28]
 800286e:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8002872:	3201      	adds	r2, #1
 8002874:	6222      	str	r2, [r4, #32]
 8002876:	781a      	ldrb	r2, [r3, #0]
 8002878:	3a49      	subs	r2, #73	; 0x49
 800287a:	2a01      	cmp	r2, #1
 800287c:	f67f af33 	bls.w	80026e6 <d_name+0x5a>
 8002880:	2300      	movs	r3, #0
 8002882:	e736      	b.n	80026f2 <d_name+0x66>
 8002884:	2500      	movs	r5, #0
 8002886:	4628      	mov	r0, r5
 8002888:	b003      	add	sp, #12
 800288a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800288c:	2100      	movs	r1, #0
 800288e:	f000 f84b 	bl	8002928 <d_encoding.part.0>
 8002892:	4605      	mov	r5, r0
 8002894:	e765      	b.n	8002762 <d_name+0xd6>
 8002896:	1c9a      	adds	r2, r3, #2
 8002898:	60e2      	str	r2, [r4, #12]
 800289a:	789a      	ldrb	r2, [r3, #2]
 800289c:	2a5f      	cmp	r2, #95	; 0x5f
 800289e:	d039      	beq.n	8002914 <d_name+0x288>
 80028a0:	2a6e      	cmp	r2, #110	; 0x6e
 80028a2:	d0ef      	beq.n	8002884 <d_name+0x1f8>
 80028a4:	4620      	mov	r0, r4
 80028a6:	f7fd fd0b 	bl	80002c0 <d_number>
 80028aa:	1c46      	adds	r6, r0, #1
 80028ac:	d4ea      	bmi.n	8002884 <d_name+0x1f8>
 80028ae:	68e3      	ldr	r3, [r4, #12]
 80028b0:	781a      	ldrb	r2, [r3, #0]
 80028b2:	2a5f      	cmp	r2, #95	; 0x5f
 80028b4:	d1e6      	bne.n	8002884 <d_name+0x1f8>
 80028b6:	3301      	adds	r3, #1
 80028b8:	60e3      	str	r3, [r4, #12]
 80028ba:	4620      	mov	r0, r4
 80028bc:	f7ff fee6 	bl	800268c <d_name>
 80028c0:	4607      	mov	r7, r0
 80028c2:	2800      	cmp	r0, #0
 80028c4:	f43f af74 	beq.w	80027b0 <d_name+0x124>
 80028c8:	783b      	ldrb	r3, [r7, #0]
 80028ca:	2b47      	cmp	r3, #71	; 0x47
 80028cc:	f43f af70 	beq.w	80027b0 <d_name+0x124>
 80028d0:	2b49      	cmp	r3, #73	; 0x49
 80028d2:	f43f af6d 	beq.w	80027b0 <d_name+0x124>
 80028d6:	e762      	b.n	800279e <d_name+0x112>
 80028d8:	3302      	adds	r3, #2
 80028da:	60e3      	str	r3, [r4, #12]
 80028dc:	4620      	mov	r0, r4
 80028de:	f7fd fddf 	bl	80004a0 <d_discriminator>
 80028e2:	2800      	cmp	r0, #0
 80028e4:	d0ce      	beq.n	8002884 <d_name+0x1f8>
 80028e6:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	da15      	bge.n	800291a <d_name+0x28e>
 80028ee:	6921      	ldr	r1, [r4, #16]
 80028f0:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80028f4:	0098      	lsls	r0, r3, #2
 80028f6:	3201      	adds	r2, #1
 80028f8:	6162      	str	r2, [r4, #20]
 80028fa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80028fe:	2200      	movs	r2, #0
 8002900:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8002904:	540a      	strb	r2, [r1, r0]
 8002906:	4907      	ldr	r1, [pc, #28]	; (8002924 <d_name+0x298>)
 8002908:	220e      	movs	r2, #14
 800290a:	e9c3 1203 	strd	r1, r2, [r3, #12]
 800290e:	e764      	b.n	80027da <d_name+0x14e>
 8002910:	2500      	movs	r5, #0
 8002912:	e785      	b.n	8002820 <d_name+0x194>
 8002914:	3303      	adds	r3, #3
 8002916:	2600      	movs	r6, #0
 8002918:	e7ce      	b.n	80028b8 <d_name+0x22c>
 800291a:	2300      	movs	r3, #0
 800291c:	e75d      	b.n	80027da <d_name+0x14e>
 800291e:	bf00      	nop
 8002920:	08023e80 	.word	0x08023e80
 8002924:	08023e70 	.word	0x08023e70

08002928 <d_encoding.part.0>:
 8002928:	b570      	push	{r4, r5, r6, lr}
 800292a:	4605      	mov	r5, r0
 800292c:	460e      	mov	r6, r1
 800292e:	f7ff fead 	bl	800268c <d_name>
 8002932:	b300      	cbz	r0, 8002976 <d_encoding.part.0+0x4e>
 8002934:	4604      	mov	r4, r0
 8002936:	b30e      	cbz	r6, 800297c <d_encoding.part.0+0x54>
 8002938:	68ab      	ldr	r3, [r5, #8]
 800293a:	07db      	lsls	r3, r3, #31
 800293c:	d41e      	bmi.n	800297c <d_encoding.part.0+0x54>
 800293e:	7823      	ldrb	r3, [r4, #0]
 8002940:	2b4e      	cmp	r3, #78	; 0x4e
 8002942:	f1a3 011c 	sub.w	r1, r3, #28
 8002946:	f1a3 0250 	sub.w	r2, r3, #80	; 0x50
 800294a:	d03a      	beq.n	80029c2 <d_encoding.part.0+0x9a>
 800294c:	d837      	bhi.n	80029be <d_encoding.part.0+0x96>
 800294e:	2904      	cmp	r1, #4
 8002950:	d937      	bls.n	80029c2 <d_encoding.part.0+0x9a>
 8002952:	2b02      	cmp	r3, #2
 8002954:	d110      	bne.n	8002978 <d_encoding.part.0+0x50>
 8002956:	6923      	ldr	r3, [r4, #16]
 8002958:	b16b      	cbz	r3, 8002976 <d_encoding.part.0+0x4e>
 800295a:	781a      	ldrb	r2, [r3, #0]
 800295c:	2a4e      	cmp	r2, #78	; 0x4e
 800295e:	f1a2 001c 	sub.w	r0, r2, #28
 8002962:	f1a2 0150 	sub.w	r1, r2, #80	; 0x50
 8002966:	d002      	beq.n	800296e <d_encoding.part.0+0x46>
 8002968:	d83d      	bhi.n	80029e6 <d_encoding.part.0+0xbe>
 800296a:	2804      	cmp	r0, #4
 800296c:	d804      	bhi.n	8002978 <d_encoding.part.0+0x50>
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	6123      	str	r3, [r4, #16]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f1      	bne.n	800295a <d_encoding.part.0+0x32>
 8002976:	2400      	movs	r4, #0
 8002978:	4620      	mov	r0, r4
 800297a:	bd70      	pop	{r4, r5, r6, pc}
 800297c:	68eb      	ldr	r3, [r5, #12]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0f9      	beq.n	8002978 <d_encoding.part.0+0x50>
 8002984:	2b45      	cmp	r3, #69	; 0x45
 8002986:	d0f7      	beq.n	8002978 <d_encoding.part.0+0x50>
 8002988:	4621      	mov	r1, r4
 800298a:	780b      	ldrb	r3, [r1, #0]
 800298c:	2b04      	cmp	r3, #4
 800298e:	d02d      	beq.n	80029ec <d_encoding.part.0+0xc4>
 8002990:	d81e      	bhi.n	80029d0 <d_encoding.part.0+0xa8>
 8002992:	2b02      	cmp	r3, #2
 8002994:	d11a      	bne.n	80029cc <d_encoding.part.0+0xa4>
 8002996:	6909      	ldr	r1, [r1, #16]
 8002998:	2900      	cmp	r1, #0
 800299a:	d1f6      	bne.n	800298a <d_encoding.part.0+0x62>
 800299c:	4628      	mov	r0, r5
 800299e:	f7fe fcdf 	bl	8001360 <d_bare_function_type>
 80029a2:	2800      	cmp	r0, #0
 80029a4:	d0e7      	beq.n	8002976 <d_encoding.part.0+0x4e>
 80029a6:	b916      	cbnz	r6, 80029ae <d_encoding.part.0+0x86>
 80029a8:	7823      	ldrb	r3, [r4, #0]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d032      	beq.n	8002a14 <d_encoding.part.0+0xec>
 80029ae:	4603      	mov	r3, r0
 80029b0:	4622      	mov	r2, r4
 80029b2:	4628      	mov	r0, r5
 80029b4:	2103      	movs	r1, #3
 80029b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80029ba:	f7fd bc09 	b.w	80001d0 <d_make_comp>
 80029be:	2a01      	cmp	r2, #1
 80029c0:	d8da      	bhi.n	8002978 <d_encoding.part.0+0x50>
 80029c2:	68e4      	ldr	r4, [r4, #12]
 80029c4:	e7bb      	b.n	800293e <d_encoding.part.0+0x16>
 80029c6:	3b1c      	subs	r3, #28
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d908      	bls.n	80029de <d_encoding.part.0+0xb6>
 80029cc:	2100      	movs	r1, #0
 80029ce:	e7e5      	b.n	800299c <d_encoding.part.0+0x74>
 80029d0:	2b4e      	cmp	r3, #78	; 0x4e
 80029d2:	f1a3 0250 	sub.w	r2, r3, #80	; 0x50
 80029d6:	d002      	beq.n	80029de <d_encoding.part.0+0xb6>
 80029d8:	d9f5      	bls.n	80029c6 <d_encoding.part.0+0x9e>
 80029da:	2a01      	cmp	r2, #1
 80029dc:	d8f6      	bhi.n	80029cc <d_encoding.part.0+0xa4>
 80029de:	68c9      	ldr	r1, [r1, #12]
 80029e0:	2900      	cmp	r1, #0
 80029e2:	d1d2      	bne.n	800298a <d_encoding.part.0+0x62>
 80029e4:	e7da      	b.n	800299c <d_encoding.part.0+0x74>
 80029e6:	2901      	cmp	r1, #1
 80029e8:	d8c6      	bhi.n	8002978 <d_encoding.part.0+0x50>
 80029ea:	e7c0      	b.n	800296e <d_encoding.part.0+0x46>
 80029ec:	68cb      	ldr	r3, [r1, #12]
 80029ee:	b15b      	cbz	r3, 8002a08 <d_encoding.part.0+0xe0>
 80029f0:	7819      	ldrb	r1, [r3, #0]
 80029f2:	2908      	cmp	r1, #8
 80029f4:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80029f8:	d808      	bhi.n	8002a0c <d_encoding.part.0+0xe4>
 80029fa:	2906      	cmp	r1, #6
 80029fc:	d8e6      	bhi.n	80029cc <d_encoding.part.0+0xa4>
 80029fe:	2a01      	cmp	r2, #1
 8002a00:	d802      	bhi.n	8002a08 <d_encoding.part.0+0xe0>
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f3      	bne.n	80029f0 <d_encoding.part.0+0xc8>
 8002a08:	2101      	movs	r1, #1
 8002a0a:	e7c7      	b.n	800299c <d_encoding.part.0+0x74>
 8002a0c:	3935      	subs	r1, #53	; 0x35
 8002a0e:	bf18      	it	ne
 8002a10:	2101      	movne	r1, #1
 8002a12:	e7c3      	b.n	800299c <d_encoding.part.0+0x74>
 8002a14:	7803      	ldrb	r3, [r0, #0]
 8002a16:	2b29      	cmp	r3, #41	; 0x29
 8002a18:	bf08      	it	eq
 8002a1a:	60c6      	streq	r6, [r0, #12]
 8002a1c:	e7c7      	b.n	80029ae <d_encoding.part.0+0x86>
 8002a1e:	bf00      	nop

08002a20 <d_print_comp_inner>:
 8002a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a24:	4604      	mov	r4, r0
 8002a26:	b095      	sub	sp, #84	; 0x54
 8002a28:	2a00      	cmp	r2, #0
 8002a2a:	d066      	beq.n	8002afa <d_print_comp_inner+0xda>
 8002a2c:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
 8002a30:	2d00      	cmp	r5, #0
 8002a32:	d165      	bne.n	8002b00 <d_print_comp_inner+0xe0>
 8002a34:	7817      	ldrb	r7, [r2, #0]
 8002a36:	4616      	mov	r6, r2
 8002a38:	2f51      	cmp	r7, #81	; 0x51
 8002a3a:	d85e      	bhi.n	8002afa <d_print_comp_inner+0xda>
 8002a3c:	e8df f017 	tbh	[pc, r7, lsl #1]
 8002a40:	011b095c 	.word	0x011b095c
 8002a44:	04ee011b 	.word	0x04ee011b
 8002a48:	02de0898 	.word	0x02de0898
 8002a4c:	0097044a 	.word	0x0097044a
 8002a50:	08f9008b 	.word	0x08f9008b
 8002a54:	03a608d2 	.word	0x03a608d2
 8002a58:	019101b8 	.word	0x019101b8
 8002a5c:	0747016a 	.word	0x0747016a
 8002a60:	06f90720 	.word	0x06f90720
 8002a64:	07bc07e3 	.word	0x07bc07e3
 8002a68:	076e0795 	.word	0x076e0795
 8002a6c:	0423037f 	.word	0x0423037f
 8002a70:	009903f8 	.word	0x009903f8
 8002a74:	00990099 	.word	0x00990099
 8002a78:	00630063 	.word	0x00630063
 8002a7c:	00630063 	.word	0x00630063
 8002a80:	00630063 	.word	0x00630063
 8002a84:	00c50063 	.word	0x00c50063
 8002a88:	006300c5 	.word	0x006300c5
 8002a8c:	09870063 	.word	0x09870063
 8002a90:	04c80083 	.word	0x04c80083
 8002a94:	00af068d 	.word	0x00af068d
 8002a98:	00af066b 	.word	0x00af066b
 8002a9c:	00e600e6 	.word	0x00e600e6
 8002aa0:	03340358 	.word	0x03340358
 8002aa4:	0831030a 	.word	0x0831030a
 8002aa8:	080a005d 	.word	0x080a005d
 8002aac:	06460663 	.word	0x06460663
 8002ab0:	005d05eb 	.word	0x005d05eb
 8002ab4:	005d0920 	.word	0x005d0920
 8002ab8:	012a005d 	.word	0x012a005d
 8002abc:	0455012a 	.word	0x0455012a
 8002ac0:	0858085e 	.word	0x0858085e
 8002ac4:	047804ba 	.word	0x047804ba
 8002ac8:	05c4054f 	.word	0x05c4054f
 8002acc:	0576059d 	.word	0x0576059d
 8002ad0:	02a4005d 	.word	0x02a4005d
 8002ad4:	0256027d 	.word	0x0256027d
 8002ad8:	01df020a 	.word	0x01df020a
 8002adc:	03cd0063 	.word	0x03cd0063
 8002ae0:	00630063 	.word	0x00630063
 8002ae4:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
 8002ae8:	2900      	cmp	r1, #0
 8002aea:	f2c1 8425 	blt.w	8004338 <d_print_comp_inner+0x1918>
 8002aee:	f7fd fcfb 	bl	80004e8 <d_index_template_argument.part.0>
 8002af2:	4602      	mov	r2, r0
 8002af4:	2800      	cmp	r0, #0
 8002af6:	f041 841f 	bne.w	8004338 <d_print_comp_inner+0x1918>
 8002afa:	2301      	movs	r3, #1
 8002afc:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8002b00:	b015      	add	sp, #84	; 0x54
 8002b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b06:	2200      	movs	r2, #0
 8002b08:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8002b0c:	9304      	str	r3, [sp, #16]
 8002b0e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8002b12:	9307      	str	r3, [sp, #28]
 8002b14:	ab04      	add	r3, sp, #16
 8002b16:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	9605      	str	r6, [sp, #20]
 8002b1e:	9306      	str	r3, [sp, #24]
 8002b20:	2a00      	cmp	r2, #0
 8002b22:	f001 87e8 	beq.w	8004af6 <d_print_comp_inner+0x20d6>
 8002b26:	2111      	movs	r1, #17
 8002b28:	4620      	mov	r0, r4
 8002b2a:	f001 fff5 	bl	8004b18 <d_print_comp>
 8002b2e:	9b06      	ldr	r3, [sp, #24]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f001 82e9 	beq.w	8004108 <d_print_comp_inner+0x16e8>
 8002b36:	9b04      	ldr	r3, [sp, #16]
 8002b38:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002b3c:	2d00      	cmp	r5, #0
 8002b3e:	d0df      	beq.n	8002b00 <d_print_comp_inner+0xe0>
 8002b40:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
 8002b44:	e7dc      	b.n	8002b00 <d_print_comp_inner+0xe0>
 8002b46:	68f2      	ldr	r2, [r6, #12]
 8002b48:	2111      	movs	r1, #17
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	b015      	add	sp, #84	; 0x54
 8002b4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b52:	f001 bfe1 	b.w	8004b18 <d_print_comp>
 8002b56:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002b5a:	29ff      	cmp	r1, #255	; 0xff
 8002b5c:	f001 855f 	beq.w	800461e <d_print_comp_inner+0x1bfe>
 8002b60:	1c4a      	adds	r2, r1, #1
 8002b62:	237e      	movs	r3, #126	; 0x7e
 8002b64:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002b68:	5463      	strb	r3, [r4, r1]
 8002b6a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002b6e:	6932      	ldr	r2, [r6, #16]
 8002b70:	e7ea      	b.n	8002b48 <d_print_comp_inner+0x128>
 8002b72:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
 8002b76:	f1bc 0f00 	cmp.w	ip, #0
 8002b7a:	d00e      	beq.n	8002b9a <d_print_comp_inner+0x17a>
 8002b7c:	4663      	mov	r3, ip
 8002b7e:	6899      	ldr	r1, [r3, #8]
 8002b80:	b941      	cbnz	r1, 8002b94 <d_print_comp_inner+0x174>
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	7812      	ldrb	r2, [r2, #0]
 8002b86:	f1a2 0019 	sub.w	r0, r2, #25
 8002b8a:	2802      	cmp	r0, #2
 8002b8c:	f201 84ef 	bhi.w	800456e <d_print_comp_inner+0x1b4e>
 8002b90:	4297      	cmp	r7, r2
 8002b92:	d0d8      	beq.n	8002b46 <d_print_comp_inner+0x126>
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f1      	bne.n	8002b7e <d_print_comp_inner+0x15e>
 8002b9a:	68f2      	ldr	r2, [r6, #12]
 8002b9c:	e02b      	b.n	8002bf6 <d_print_comp_inner+0x1d6>
 8002b9e:	e9d0 3144 	ldrd	r3, r1, [r0, #272]	; 0x110
 8002ba2:	aa04      	add	r2, sp, #16
 8002ba4:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 8002ba8:	2200      	movs	r2, #0
 8002baa:	e9cd 1604 	strd	r1, r6, [sp, #16]
 8002bae:	9206      	str	r2, [sp, #24]
 8002bb0:	2111      	movs	r1, #17
 8002bb2:	6932      	ldr	r2, [r6, #16]
 8002bb4:	9307      	str	r3, [sp, #28]
 8002bb6:	f001 ffaf 	bl	8004b18 <d_print_comp>
 8002bba:	9b06      	ldr	r3, [sp, #24]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f001 84c3 	beq.w	8004548 <d_print_comp_inner+0x1b28>
 8002bc2:	9b04      	ldr	r3, [sp, #16]
 8002bc4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002bc8:	e79a      	b.n	8002b00 <d_print_comp_inner+0xe0>
 8002bca:	68d2      	ldr	r2, [r2, #12]
 8002bcc:	f8d0 5120 	ldr.w	r5, [r0, #288]	; 0x120
 8002bd0:	7813      	ldrb	r3, [r2, #0]
 8002bd2:	2d00      	cmp	r5, #0
 8002bd4:	f041 8370 	bne.w	80042b8 <d_print_comp_inner+0x1898>
 8002bd8:	2b05      	cmp	r3, #5
 8002bda:	f001 85d4 	beq.w	8004786 <d_print_comp_inner+0x1d66>
 8002bde:	4610      	mov	r0, r2
 8002be0:	2b23      	cmp	r3, #35	; 0x23
 8002be2:	f001 82d8 	beq.w	8004196 <d_print_comp_inner+0x1776>
 8002be6:	429f      	cmp	r7, r3
 8002be8:	f001 82d5 	beq.w	8004196 <d_print_comp_inner+0x1776>
 8002bec:	2b24      	cmp	r3, #36	; 0x24
 8002bee:	f001 860c 	beq.w	800480a <d_print_comp_inner+0x1dea>
 8002bf2:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8002bf6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8002bfa:	9307      	str	r3, [sp, #28]
 8002bfc:	ab04      	add	r3, sp, #16
 8002bfe:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002c02:	2300      	movs	r3, #0
 8002c04:	e9cd c604 	strd	ip, r6, [sp, #16]
 8002c08:	9306      	str	r3, [sp, #24]
 8002c0a:	e78c      	b.n	8002b26 <d_print_comp_inner+0x106>
 8002c0c:	68d2      	ldr	r2, [r2, #12]
 8002c0e:	b112      	cbz	r2, 8002c16 <d_print_comp_inner+0x1f6>
 8002c10:	2111      	movs	r1, #17
 8002c12:	f001 ff81 	bl	8004b18 <d_print_comp>
 8002c16:	6933      	ldr	r3, [r6, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f43f af71 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 8002c1e:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
 8002c22:	2dfd      	cmp	r5, #253	; 0xfd
 8002c24:	f201 84a7 	bhi.w	8004576 <d_print_comp_inner+0x1b56>
 8002c28:	f8df 8384 	ldr.w	r8, [pc, #900]	; 8002fb0 <d_print_comp_inner+0x590>
 8002c2c:	272c      	movs	r7, #44	; 0x2c
 8002c2e:	f108 0a01 	add.w	sl, r8, #1
 8002c32:	f04f 0900 	mov.w	r9, #0
 8002c36:	4629      	mov	r1, r5
 8002c38:	e00b      	b.n	8002c52 <d_print_comp_inner+0x232>
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	3101      	adds	r1, #1
 8002c3e:	45d0      	cmp	r8, sl
 8002c40:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002c44:	54e7      	strb	r7, [r4, r3]
 8002c46:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002c4a:	f001 8264 	beq.w	8004116 <d_print_comp_inner+0x16f6>
 8002c4e:	f818 7f01 	ldrb.w	r7, [r8, #1]!
 8002c52:	29ff      	cmp	r1, #255	; 0xff
 8002c54:	d1f1      	bne.n	8002c3a <d_print_comp_inner+0x21a>
 8002c56:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002c5a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002c5e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002c62:	4620      	mov	r0, r4
 8002c64:	4798      	blx	r3
 8002c66:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8002c70:	2101      	movs	r1, #1
 8002c72:	2300      	movs	r3, #0
 8002c74:	e7e3      	b.n	8002c3e <d_print_comp_inner+0x21e>
 8002c76:	68d2      	ldr	r2, [r2, #12]
 8002c78:	2111      	movs	r1, #17
 8002c7a:	f001 ff4d 	bl	8004b18 <d_print_comp>
 8002c7e:	49c7      	ldr	r1, [pc, #796]	; (8002f9c <d_print_comp_inner+0x57c>)
 8002c80:	4620      	mov	r0, r4
 8002c82:	f7fd fd1b 	bl	80006bc <d_append_string>
 8002c86:	6937      	ldr	r7, [r6, #16]
 8002c88:	783b      	ldrb	r3, [r7, #0]
 8002c8a:	2b48      	cmp	r3, #72	; 0x48
 8002c8c:	f001 808b 	beq.w	8003da6 <d_print_comp_inner+0x1386>
 8002c90:	463a      	mov	r2, r7
 8002c92:	e759      	b.n	8002b48 <d_print_comp_inner+0x128>
 8002c94:	68d2      	ldr	r2, [r2, #12]
 8002c96:	7813      	ldrb	r3, [r2, #0]
 8002c98:	2b27      	cmp	r3, #39	; 0x27
 8002c9a:	f041 835a 	bne.w	8004352 <d_print_comp_inner+0x1932>
 8002c9e:	68d3      	ldr	r3, [r2, #12]
 8002ca0:	7c1d      	ldrb	r5, [r3, #16]
 8002ca2:	2d06      	cmp	r5, #6
 8002ca4:	f201 827d 	bhi.w	80041a2 <d_print_comp_inner+0x1782>
 8002ca8:	2d00      	cmp	r5, #0
 8002caa:	f041 851c 	bne.w	80046e6 <d_print_comp_inner+0x1cc6>
 8002cae:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002cb2:	29ff      	cmp	r1, #255	; 0xff
 8002cb4:	f001 84f0 	beq.w	8004698 <d_print_comp_inner+0x1c78>
 8002cb8:	1c4b      	adds	r3, r1, #1
 8002cba:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002cbe:	2328      	movs	r3, #40	; 0x28
 8002cc0:	5463      	strb	r3, [r4, r1]
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	2111      	movs	r1, #17
 8002cc6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002cca:	f001 ff25 	bl	8004b18 <d_print_comp>
 8002cce:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002cd2:	29ff      	cmp	r1, #255	; 0xff
 8002cd4:	f001 84f7 	beq.w	80046c6 <d_print_comp_inner+0x1ca6>
 8002cd8:	1c4b      	adds	r3, r1, #1
 8002cda:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002cde:	2329      	movs	r3, #41	; 0x29
 8002ce0:	5463      	strb	r3, [r4, r1]
 8002ce2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002ce6:	7833      	ldrb	r3, [r6, #0]
 8002ce8:	2b3e      	cmp	r3, #62	; 0x3e
 8002cea:	f001 84e6 	beq.w	80046ba <d_print_comp_inner+0x1c9a>
 8002cee:	2d08      	cmp	r5, #8
 8002cf0:	f47f af3d 	bne.w	8002b6e <d_print_comp_inner+0x14e>
 8002cf4:	215b      	movs	r1, #91	; 0x5b
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	f7fd fc58 	bl	80005ac <d_append_char>
 8002cfc:	2111      	movs	r1, #17
 8002cfe:	6932      	ldr	r2, [r6, #16]
 8002d00:	4620      	mov	r0, r4
 8002d02:	f001 ff09 	bl	8004b18 <d_print_comp>
 8002d06:	215d      	movs	r1, #93	; 0x5d
 8002d08:	4620      	mov	r0, r4
 8002d0a:	b015      	add	sp, #84	; 0x54
 8002d0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d10:	f7fd bc4c 	b.w	80005ac <d_append_char>
 8002d14:	4fa2      	ldr	r7, [pc, #648]	; (8002fa0 <d_print_comp_inner+0x580>)
 8002d16:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002d1a:	f107 090f 	add.w	r9, r7, #15
 8002d1e:	2574      	movs	r5, #116	; 0x74
 8002d20:	f04f 0800 	mov.w	r8, #0
 8002d24:	e00b      	b.n	8002d3e <d_print_comp_inner+0x31e>
 8002d26:	460b      	mov	r3, r1
 8002d28:	3101      	adds	r1, #1
 8002d2a:	454f      	cmp	r7, r9
 8002d2c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002d30:	54e5      	strb	r5, [r4, r3]
 8002d32:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8002d36:	f43f af06 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8002d3a:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8002d3e:	29ff      	cmp	r1, #255	; 0xff
 8002d40:	d1f1      	bne.n	8002d26 <d_print_comp_inner+0x306>
 8002d42:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d46:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d4a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002d4e:	4620      	mov	r0, r4
 8002d50:	4798      	blx	r3
 8002d52:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8002d56:	3301      	adds	r3, #1
 8002d58:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e7e3      	b.n	8002d2a <d_print_comp_inner+0x30a>
 8002d62:	4f90      	ldr	r7, [pc, #576]	; (8002fa4 <d_print_comp_inner+0x584>)
 8002d64:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002d68:	f107 0911 	add.w	r9, r7, #17
 8002d6c:	2574      	movs	r5, #116	; 0x74
 8002d6e:	f04f 0800 	mov.w	r8, #0
 8002d72:	e00b      	b.n	8002d8c <d_print_comp_inner+0x36c>
 8002d74:	460b      	mov	r3, r1
 8002d76:	3101      	adds	r1, #1
 8002d78:	45b9      	cmp	r9, r7
 8002d7a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002d7e:	54e5      	strb	r5, [r4, r3]
 8002d80:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8002d84:	f43f aedf 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8002d88:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8002d8c:	29ff      	cmp	r1, #255	; 0xff
 8002d8e:	d1f1      	bne.n	8002d74 <d_print_comp_inner+0x354>
 8002d90:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d94:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d98:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	4798      	blx	r3
 8002da0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8002da4:	3301      	adds	r3, #1
 8002da6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8002daa:	2101      	movs	r1, #1
 8002dac:	2300      	movs	r3, #0
 8002dae:	e7e3      	b.n	8002d78 <d_print_comp_inner+0x358>
 8002db0:	4f7d      	ldr	r7, [pc, #500]	; (8002fa8 <d_print_comp_inner+0x588>)
 8002db2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002db6:	f107 090c 	add.w	r9, r7, #12
 8002dba:	2574      	movs	r5, #116	; 0x74
 8002dbc:	f04f 0800 	mov.w	r8, #0
 8002dc0:	e00b      	b.n	8002dda <d_print_comp_inner+0x3ba>
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	3101      	adds	r1, #1
 8002dc6:	454f      	cmp	r7, r9
 8002dc8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002dcc:	54e5      	strb	r5, [r4, r3]
 8002dce:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8002dd2:	f43f aeb8 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8002dd6:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8002dda:	29ff      	cmp	r1, #255	; 0xff
 8002ddc:	d1f1      	bne.n	8002dc2 <d_print_comp_inner+0x3a2>
 8002dde:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002de2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002de6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002dea:	4620      	mov	r0, r4
 8002dec:	4798      	blx	r3
 8002dee:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8002df2:	3301      	adds	r3, #1
 8002df4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8002df8:	2101      	movs	r1, #1
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	e7e3      	b.n	8002dc6 <d_print_comp_inner+0x3a6>
 8002dfe:	4f6b      	ldr	r7, [pc, #428]	; (8002fac <d_print_comp_inner+0x58c>)
 8002e00:	68d2      	ldr	r2, [r2, #12]
 8002e02:	2111      	movs	r1, #17
 8002e04:	f001 fe88 	bl	8004b18 <d_print_comp>
 8002e08:	f107 0904 	add.w	r9, r7, #4
 8002e0c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002e10:	255b      	movs	r5, #91	; 0x5b
 8002e12:	f04f 0800 	mov.w	r8, #0
 8002e16:	e00b      	b.n	8002e30 <d_print_comp_inner+0x410>
 8002e18:	460b      	mov	r3, r1
 8002e1a:	3101      	adds	r1, #1
 8002e1c:	45b9      	cmp	r9, r7
 8002e1e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002e22:	54e5      	strb	r5, [r4, r3]
 8002e24:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8002e28:	f000 87f3 	beq.w	8003e12 <d_print_comp_inner+0x13f2>
 8002e2c:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8002e30:	29ff      	cmp	r1, #255	; 0xff
 8002e32:	d1f1      	bne.n	8002e18 <d_print_comp_inner+0x3f8>
 8002e34:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e38:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e3c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002e40:	4620      	mov	r0, r4
 8002e42:	4798      	blx	r3
 8002e44:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8002e48:	3301      	adds	r3, #1
 8002e4a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8002e4e:	2101      	movs	r1, #1
 8002e50:	2300      	movs	r3, #0
 8002e52:	e7e3      	b.n	8002e1c <d_print_comp_inner+0x3fc>
 8002e54:	f8d2 a00c 	ldr.w	sl, [r2, #12]
 8002e58:	4651      	mov	r1, sl
 8002e5a:	f7fd fbe5 	bl	8000628 <d_find_pack>
 8002e5e:	f04f 0800 	mov.w	r8, #0
 8002e62:	b910      	cbnz	r0, 8002e6a <d_print_comp_inner+0x44a>
 8002e64:	f001 bd22 	b.w	80048ac <d_print_comp_inner+0x1e8c>
 8002e68:	46c8      	mov	r8, r9
 8002e6a:	7803      	ldrb	r3, [r0, #0]
 8002e6c:	2b2f      	cmp	r3, #47	; 0x2f
 8002e6e:	f108 0901 	add.w	r9, r8, #1
 8002e72:	f041 8187 	bne.w	8004184 <d_print_comp_inner+0x1764>
 8002e76:	68c3      	ldr	r3, [r0, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f001 8183 	beq.w	8004184 <d_print_comp_inner+0x1764>
 8002e7e:	6900      	ldr	r0, [r0, #16]
 8002e80:	2800      	cmp	r0, #0
 8002e82:	d1f1      	bne.n	8002e68 <d_print_comp_inner+0x448>
 8002e84:	e003      	b.n	8002e8e <d_print_comp_inner+0x46e>
 8002e86:	3501      	adds	r5, #1
 8002e88:	454d      	cmp	r5, r9
 8002e8a:	f6bf ae39 	bge.w	8002b00 <d_print_comp_inner+0xe0>
 8002e8e:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 8002e92:	4652      	mov	r2, sl
 8002e94:	2111      	movs	r1, #17
 8002e96:	4620      	mov	r0, r4
 8002e98:	f001 fe3e 	bl	8004b18 <d_print_comp>
 8002e9c:	45a8      	cmp	r8, r5
 8002e9e:	ddf2      	ble.n	8002e86 <d_print_comp_inner+0x466>
 8002ea0:	4f43      	ldr	r7, [pc, #268]	; (8002fb0 <d_print_comp_inner+0x590>)
 8002ea2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002ea6:	f107 0b01 	add.w	fp, r7, #1
 8002eaa:	262c      	movs	r6, #44	; 0x2c
 8002eac:	e00a      	b.n	8002ec4 <d_print_comp_inner+0x4a4>
 8002eae:	460b      	mov	r3, r1
 8002eb0:	3101      	adds	r1, #1
 8002eb2:	45bb      	cmp	fp, r7
 8002eb4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002eb8:	54e6      	strb	r6, [r4, r3]
 8002eba:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8002ebe:	d0e2      	beq.n	8002e86 <d_print_comp_inner+0x466>
 8002ec0:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 8002ec4:	29ff      	cmp	r1, #255	; 0xff
 8002ec6:	d1f2      	bne.n	8002eae <d_print_comp_inner+0x48e>
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002ed0:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8002ed4:	4620      	mov	r0, r4
 8002ed6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002eda:	4798      	blx	r3
 8002edc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	2300      	movs	r3, #0
 8002eea:	e7e2      	b.n	8002eb2 <d_print_comp_inner+0x492>
 8002eec:	4f31      	ldr	r7, [pc, #196]	; (8002fb4 <d_print_comp_inner+0x594>)
 8002eee:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002ef2:	f107 0919 	add.w	r9, r7, #25
 8002ef6:	256e      	movs	r5, #110	; 0x6e
 8002ef8:	f04f 0800 	mov.w	r8, #0
 8002efc:	e00b      	b.n	8002f16 <d_print_comp_inner+0x4f6>
 8002efe:	460b      	mov	r3, r1
 8002f00:	3101      	adds	r1, #1
 8002f02:	45b9      	cmp	r9, r7
 8002f04:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002f08:	54e5      	strb	r5, [r4, r3]
 8002f0a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8002f0e:	f43f ae1a 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8002f12:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8002f16:	29ff      	cmp	r1, #255	; 0xff
 8002f18:	d1f1      	bne.n	8002efe <d_print_comp_inner+0x4de>
 8002f1a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f1e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f22:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002f26:	4620      	mov	r0, r4
 8002f28:	4798      	blx	r3
 8002f2a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8002f2e:	3301      	adds	r3, #1
 8002f30:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8002f34:	2101      	movs	r1, #1
 8002f36:	2300      	movs	r3, #0
 8002f38:	e7e3      	b.n	8002f02 <d_print_comp_inner+0x4e2>
 8002f3a:	4f1f      	ldr	r7, [pc, #124]	; (8002fb8 <d_print_comp_inner+0x598>)
 8002f3c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002f40:	f107 0915 	add.w	r9, r7, #21
 8002f44:	2574      	movs	r5, #116	; 0x74
 8002f46:	f04f 0800 	mov.w	r8, #0
 8002f4a:	e00b      	b.n	8002f64 <d_print_comp_inner+0x544>
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	3101      	adds	r1, #1
 8002f50:	45b9      	cmp	r9, r7
 8002f52:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002f56:	54e5      	strb	r5, [r4, r3]
 8002f58:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8002f5c:	f43f adf3 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8002f60:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8002f64:	29ff      	cmp	r1, #255	; 0xff
 8002f66:	d1f1      	bne.n	8002f4c <d_print_comp_inner+0x52c>
 8002f68:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f6c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f70:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002f74:	4620      	mov	r0, r4
 8002f76:	4798      	blx	r3
 8002f78:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8002f82:	2101      	movs	r1, #1
 8002f84:	2300      	movs	r3, #0
 8002f86:	e7e3      	b.n	8002f50 <d_print_comp_inner+0x530>
 8002f88:	4f0c      	ldr	r7, [pc, #48]	; (8002fbc <d_print_comp_inner+0x59c>)
 8002f8a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002f8e:	f107 090d 	add.w	r9, r7, #13
 8002f92:	257b      	movs	r5, #123	; 0x7b
 8002f94:	f04f 0800 	mov.w	r8, #0
 8002f98:	e01e      	b.n	8002fd8 <d_print_comp_inner+0x5b8>
 8002f9a:	bf00      	nop
 8002f9c:	08023e8c 	.word	0x08023e8c
 8002fa0:	08023f2c 	.word	0x08023f2c
 8002fa4:	08023f18 	.word	0x08023f18
 8002fa8:	08023f08 	.word	0x08023f08
 8002fac:	08023e84 	.word	0x08023e84
 8002fb0:	0802402c 	.word	0x0802402c
 8002fb4:	08023ff8 	.word	0x08023ff8
 8002fb8:	08023ffc 	.word	0x08023ffc
 8002fbc:	08024100 	.word	0x08024100
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	3101      	adds	r1, #1
 8002fc4:	454f      	cmp	r7, r9
 8002fc6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002fca:	54e5      	strb	r5, [r4, r3]
 8002fcc:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8002fd0:	f000 8739 	beq.w	8003e46 <d_print_comp_inner+0x1426>
 8002fd4:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8002fd8:	29ff      	cmp	r1, #255	; 0xff
 8002fda:	d1f1      	bne.n	8002fc0 <d_print_comp_inner+0x5a0>
 8002fdc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002fe0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002fe4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002fe8:	4620      	mov	r0, r4
 8002fea:	4798      	blx	r3
 8002fec:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	e7e3      	b.n	8002fc4 <d_print_comp_inner+0x5a4>
 8002ffc:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 8003000:	2b00      	cmp	r3, #0
 8003002:	f001 818e 	beq.w	8004322 <d_print_comp_inner+0x1902>
 8003006:	4fd3      	ldr	r7, [pc, #844]	; (8003354 <d_print_comp_inner+0x934>)
 8003008:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800300c:	f107 0904 	add.w	r9, r7, #4
 8003010:	2561      	movs	r5, #97	; 0x61
 8003012:	f04f 0800 	mov.w	r8, #0
 8003016:	e00b      	b.n	8003030 <d_print_comp_inner+0x610>
 8003018:	460b      	mov	r3, r1
 800301a:	3101      	adds	r1, #1
 800301c:	45b9      	cmp	r9, r7
 800301e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003022:	54e5      	strb	r5, [r4, r3]
 8003024:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003028:	f001 814a 	beq.w	80042c0 <d_print_comp_inner+0x18a0>
 800302c:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003030:	29ff      	cmp	r1, #255	; 0xff
 8003032:	d1f1      	bne.n	8003018 <d_print_comp_inner+0x5f8>
 8003034:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003038:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800303c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003040:	4620      	mov	r0, r4
 8003042:	4798      	blx	r3
 8003044:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003048:	3301      	adds	r3, #1
 800304a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800304e:	2101      	movs	r1, #1
 8003050:	2300      	movs	r3, #0
 8003052:	e7e3      	b.n	800301c <d_print_comp_inner+0x5fc>
 8003054:	68d7      	ldr	r7, [r2, #12]
 8003056:	4ec0      	ldr	r6, [pc, #768]	; (8003358 <d_print_comp_inner+0x938>)
 8003058:	f8d7 8008 	ldr.w	r8, [r7, #8]
 800305c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003060:	f106 0a07 	add.w	sl, r6, #7
 8003064:	256f      	movs	r5, #111	; 0x6f
 8003066:	f04f 0900 	mov.w	r9, #0
 800306a:	e00b      	b.n	8003084 <d_print_comp_inner+0x664>
 800306c:	460b      	mov	r3, r1
 800306e:	3101      	adds	r1, #1
 8003070:	45b2      	cmp	sl, r6
 8003072:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003076:	54e5      	strb	r5, [r4, r3]
 8003078:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800307c:	f000 8726 	beq.w	8003ecc <d_print_comp_inner+0x14ac>
 8003080:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8003084:	29ff      	cmp	r1, #255	; 0xff
 8003086:	d1f1      	bne.n	800306c <d_print_comp_inner+0x64c>
 8003088:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800308c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003090:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003094:	4620      	mov	r0, r4
 8003096:	4798      	blx	r3
 8003098:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800309c:	3301      	adds	r3, #1
 800309e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80030a2:	2101      	movs	r1, #1
 80030a4:	2300      	movs	r3, #0
 80030a6:	e7e3      	b.n	8003070 <d_print_comp_inner+0x650>
 80030a8:	e9d2 2503 	ldrd	r2, r5, [r2, #12]
 80030ac:	b112      	cbz	r2, 80030b4 <d_print_comp_inner+0x694>
 80030ae:	2111      	movs	r1, #17
 80030b0:	f001 fd32 	bl	8004b18 <d_print_comp>
 80030b4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80030b8:	29ff      	cmp	r1, #255	; 0xff
 80030ba:	f001 826d 	beq.w	8004598 <d_print_comp_inner+0x1b78>
 80030be:	1c4a      	adds	r2, r1, #1
 80030c0:	237b      	movs	r3, #123	; 0x7b
 80030c2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80030c6:	4620      	mov	r0, r4
 80030c8:	5463      	strb	r3, [r4, r1]
 80030ca:	462a      	mov	r2, r5
 80030cc:	2111      	movs	r1, #17
 80030ce:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80030d2:	f001 fd21 	bl	8004b18 <d_print_comp>
 80030d6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80030da:	29ff      	cmp	r1, #255	; 0xff
 80030dc:	f000 86e6 	beq.w	8003eac <d_print_comp_inner+0x148c>
 80030e0:	1c4a      	adds	r2, r1, #1
 80030e2:	237d      	movs	r3, #125	; 0x7d
 80030e4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80030e8:	5463      	strb	r3, [r4, r1]
 80030ea:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80030ee:	e507      	b.n	8002b00 <d_print_comp_inner+0xe0>
 80030f0:	4f9a      	ldr	r7, [pc, #616]	; (800335c <d_print_comp_inner+0x93c>)
 80030f2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80030f6:	f107 091d 	add.w	r9, r7, #29
 80030fa:	2574      	movs	r5, #116	; 0x74
 80030fc:	f04f 0800 	mov.w	r8, #0
 8003100:	e00b      	b.n	800311a <d_print_comp_inner+0x6fa>
 8003102:	460b      	mov	r3, r1
 8003104:	3101      	adds	r1, #1
 8003106:	45b9      	cmp	r9, r7
 8003108:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800310c:	54e5      	strb	r5, [r4, r3]
 800310e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003112:	f43f ad18 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8003116:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 800311a:	29ff      	cmp	r1, #255	; 0xff
 800311c:	d1f1      	bne.n	8003102 <d_print_comp_inner+0x6e2>
 800311e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003122:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003126:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800312a:	4620      	mov	r0, r4
 800312c:	4798      	blx	r3
 800312e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003132:	3301      	adds	r3, #1
 8003134:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003138:	2101      	movs	r1, #1
 800313a:	2300      	movs	r3, #0
 800313c:	e7e3      	b.n	8003106 <d_print_comp_inner+0x6e6>
 800313e:	4f88      	ldr	r7, [pc, #544]	; (8003360 <d_print_comp_inner+0x940>)
 8003140:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003144:	f107 0914 	add.w	r9, r7, #20
 8003148:	2572      	movs	r5, #114	; 0x72
 800314a:	f04f 0800 	mov.w	r8, #0
 800314e:	e00b      	b.n	8003168 <d_print_comp_inner+0x748>
 8003150:	460b      	mov	r3, r1
 8003152:	3101      	adds	r1, #1
 8003154:	45b9      	cmp	r9, r7
 8003156:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800315a:	54e5      	strb	r5, [r4, r3]
 800315c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003160:	f000 86f4 	beq.w	8003f4c <d_print_comp_inner+0x152c>
 8003164:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003168:	29ff      	cmp	r1, #255	; 0xff
 800316a:	d1f1      	bne.n	8003150 <d_print_comp_inner+0x730>
 800316c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003170:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003174:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003178:	4620      	mov	r0, r4
 800317a:	4798      	blx	r3
 800317c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003180:	3301      	adds	r3, #1
 8003182:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003186:	2101      	movs	r1, #1
 8003188:	2300      	movs	r3, #0
 800318a:	e7e3      	b.n	8003154 <d_print_comp_inner+0x734>
 800318c:	4f75      	ldr	r7, [pc, #468]	; (8003364 <d_print_comp_inner+0x944>)
 800318e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003192:	f107 0917 	add.w	r9, r7, #23
 8003196:	2563      	movs	r5, #99	; 0x63
 8003198:	f04f 0800 	mov.w	r8, #0
 800319c:	e00b      	b.n	80031b6 <d_print_comp_inner+0x796>
 800319e:	460b      	mov	r3, r1
 80031a0:	3101      	adds	r1, #1
 80031a2:	454f      	cmp	r7, r9
 80031a4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80031a8:	54e5      	strb	r5, [r4, r3]
 80031aa:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80031ae:	f000 877c 	beq.w	80040aa <d_print_comp_inner+0x168a>
 80031b2:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 80031b6:	29ff      	cmp	r1, #255	; 0xff
 80031b8:	d1f1      	bne.n	800319e <d_print_comp_inner+0x77e>
 80031ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80031be:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80031c2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80031c6:	4620      	mov	r0, r4
 80031c8:	4798      	blx	r3
 80031ca:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80031ce:	3301      	adds	r3, #1
 80031d0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80031d4:	2101      	movs	r1, #1
 80031d6:	2300      	movs	r3, #0
 80031d8:	e7e3      	b.n	80031a2 <d_print_comp_inner+0x782>
 80031da:	4f63      	ldr	r7, [pc, #396]	; (8003368 <d_print_comp_inner+0x948>)
 80031dc:	68d2      	ldr	r2, [r2, #12]
 80031de:	2111      	movs	r1, #17
 80031e0:	f001 fc9a 	bl	8004b18 <d_print_comp>
 80031e4:	f107 0907 	add.w	r9, r7, #7
 80031e8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80031ec:	2520      	movs	r5, #32
 80031ee:	f04f 0800 	mov.w	r8, #0
 80031f2:	e00b      	b.n	800320c <d_print_comp_inner+0x7ec>
 80031f4:	460b      	mov	r3, r1
 80031f6:	3101      	adds	r1, #1
 80031f8:	45b9      	cmp	r9, r7
 80031fa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80031fe:	54e5      	strb	r5, [r4, r3]
 8003200:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003204:	f000 8605 	beq.w	8003e12 <d_print_comp_inner+0x13f2>
 8003208:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 800320c:	29ff      	cmp	r1, #255	; 0xff
 800320e:	d1f1      	bne.n	80031f4 <d_print_comp_inner+0x7d4>
 8003210:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003214:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003218:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800321c:	4620      	mov	r0, r4
 800321e:	4798      	blx	r3
 8003220:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003224:	3301      	adds	r3, #1
 8003226:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800322a:	2101      	movs	r1, #1
 800322c:	2300      	movs	r3, #0
 800322e:	e7e3      	b.n	80031f8 <d_print_comp_inner+0x7d8>
 8003230:	e9d2 5303 	ldrd	r5, r3, [r2, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	f43f ac63 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 800323a:	442b      	add	r3, r5
 800323c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003240:	3d01      	subs	r5, #1
 8003242:	1e5f      	subs	r7, r3, #1
 8003244:	f04f 0800 	mov.w	r8, #0
 8003248:	e009      	b.n	800325e <d_print_comp_inner+0x83e>
 800324a:	460b      	mov	r3, r1
 800324c:	3101      	adds	r1, #1
 800324e:	42af      	cmp	r7, r5
 8003250:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003254:	54e6      	strb	r6, [r4, r3]
 8003256:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800325a:	f43f ac51 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 800325e:	29ff      	cmp	r1, #255	; 0xff
 8003260:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003264:	d1f1      	bne.n	800324a <d_print_comp_inner+0x82a>
 8003266:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800326a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800326e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003272:	4620      	mov	r0, r4
 8003274:	4798      	blx	r3
 8003276:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800327a:	3301      	adds	r3, #1
 800327c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003280:	2101      	movs	r1, #1
 8003282:	2300      	movs	r3, #0
 8003284:	e7e3      	b.n	800324e <d_print_comp_inner+0x82e>
 8003286:	4f39      	ldr	r7, [pc, #228]	; (800336c <d_print_comp_inner+0x94c>)
 8003288:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800328c:	f107 0910 	add.w	r9, r7, #16
 8003290:	2568      	movs	r5, #104	; 0x68
 8003292:	f04f 0800 	mov.w	r8, #0
 8003296:	e00b      	b.n	80032b0 <d_print_comp_inner+0x890>
 8003298:	460b      	mov	r3, r1
 800329a:	3101      	adds	r1, #1
 800329c:	45b9      	cmp	r9, r7
 800329e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80032a2:	54e5      	strb	r5, [r4, r3]
 80032a4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80032a8:	f43f ac4d 	beq.w	8002b46 <d_print_comp_inner+0x126>
 80032ac:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 80032b0:	29ff      	cmp	r1, #255	; 0xff
 80032b2:	d1f1      	bne.n	8003298 <d_print_comp_inner+0x878>
 80032b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80032b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80032bc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80032c0:	4620      	mov	r0, r4
 80032c2:	4798      	blx	r3
 80032c4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80032c8:	3301      	adds	r3, #1
 80032ca:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80032ce:	2101      	movs	r1, #1
 80032d0:	2300      	movs	r3, #0
 80032d2:	e7e3      	b.n	800329c <d_print_comp_inner+0x87c>
 80032d4:	68d5      	ldr	r5, [r2, #12]
 80032d6:	2d00      	cmp	r5, #0
 80032d8:	f040 87a1 	bne.w	800421e <d_print_comp_inner+0x17fe>
 80032dc:	4924      	ldr	r1, [pc, #144]	; (8003370 <d_print_comp_inner+0x950>)
 80032de:	4620      	mov	r0, r4
 80032e0:	b015      	add	sp, #84	; 0x54
 80032e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032e6:	f7fd b9e9 	b.w	80006bc <d_append_string>
 80032ea:	2111      	movs	r1, #17
 80032ec:	68d2      	ldr	r2, [r2, #12]
 80032ee:	f001 fc13 	bl	8004b18 <d_print_comp>
 80032f2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80032f6:	29ff      	cmp	r1, #255	; 0xff
 80032f8:	f001 816e 	beq.w	80045d8 <d_print_comp_inner+0x1bb8>
 80032fc:	1c4a      	adds	r2, r1, #1
 80032fe:	2328      	movs	r3, #40	; 0x28
 8003300:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003304:	5463      	strb	r3, [r4, r1]
 8003306:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800330a:	6932      	ldr	r2, [r6, #16]
 800330c:	2111      	movs	r1, #17
 800330e:	4620      	mov	r0, r4
 8003310:	f001 fc02 	bl	8004b18 <d_print_comp>
 8003314:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003318:	29ff      	cmp	r1, #255	; 0xff
 800331a:	f001 802c 	beq.w	8004376 <d_print_comp_inner+0x1956>
 800331e:	1c4a      	adds	r2, r1, #1
 8003320:	2329      	movs	r3, #41	; 0x29
 8003322:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003326:	5463      	strb	r3, [r4, r1]
 8003328:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800332c:	f7ff bbe8 	b.w	8002b00 <d_print_comp_inner+0xe0>
 8003330:	68d2      	ldr	r2, [r2, #12]
 8003332:	4910      	ldr	r1, [pc, #64]	; (8003374 <d_print_comp_inner+0x954>)
 8003334:	a804      	add	r0, sp, #16
 8003336:	f018 fa7d 	bl	801b834 <siprintf>
 800333a:	a804      	add	r0, sp, #16
 800333c:	f002 ff80 	bl	8006240 <strlen>
 8003340:	2800      	cmp	r0, #0
 8003342:	f43f abdd 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 8003346:	ad04      	add	r5, sp, #16
 8003348:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800334c:	182f      	adds	r7, r5, r0
 800334e:	f04f 0800 	mov.w	r8, #0
 8003352:	e01b      	b.n	800338c <d_print_comp_inner+0x96c>
 8003354:	08023ea4 	.word	0x08023ea4
 8003358:	08024030 	.word	0x08024030
 800335c:	08023eac 	.word	0x08023eac
 8003360:	08023fcc 	.word	0x08023fcc
 8003364:	08023ee4 	.word	0x08023ee4
 8003368:	08024110 	.word	0x08024110
 800336c:	08023fe4 	.word	0x08023fe4
 8003370:	080240a0 	.word	0x080240a0
 8003374:	08023e1c 	.word	0x08023e1c
 8003378:	460b      	mov	r3, r1
 800337a:	3101      	adds	r1, #1
 800337c:	42af      	cmp	r7, r5
 800337e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003382:	54e6      	strb	r6, [r4, r3]
 8003384:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003388:	f43f abba 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 800338c:	29ff      	cmp	r1, #255	; 0xff
 800338e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003392:	d1f1      	bne.n	8003378 <d_print_comp_inner+0x958>
 8003394:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003398:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800339c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80033a0:	4620      	mov	r0, r4
 80033a2:	4798      	blx	r3
 80033a4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80033a8:	3301      	adds	r3, #1
 80033aa:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80033ae:	2101      	movs	r1, #1
 80033b0:	2300      	movs	r3, #0
 80033b2:	e7e3      	b.n	800337c <d_print_comp_inner+0x95c>
 80033b4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80033b8:	7b15      	ldrb	r5, [r2, #12]
 80033ba:	29ff      	cmp	r1, #255	; 0xff
 80033bc:	f001 811e 	beq.w	80045fc <d_print_comp_inner+0x1bdc>
 80033c0:	1c4b      	adds	r3, r1, #1
 80033c2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80033c6:	5465      	strb	r5, [r4, r1]
 80033c8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80033cc:	f7ff bb98 	b.w	8002b00 <d_print_comp_inner+0xe0>
 80033d0:	68d2      	ldr	r2, [r2, #12]
 80033d2:	b1ca      	cbz	r2, 8003408 <d_print_comp_inner+0x9e8>
 80033d4:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
 80033d8:	ab04      	add	r3, sp, #16
 80033da:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 80033de:	2300      	movs	r3, #0
 80033e0:	e9cd 1604 	strd	r1, r6, [sp, #16]
 80033e4:	9306      	str	r3, [sp, #24]
 80033e6:	2111      	movs	r1, #17
 80033e8:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80033ec:	9307      	str	r3, [sp, #28]
 80033ee:	f001 fb93 	bl	8004b18 <d_print_comp>
 80033f2:	9b06      	ldr	r3, [sp, #24]
 80033f4:	9a04      	ldr	r2, [sp, #16]
 80033f6:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f47f ab80 	bne.w	8002b00 <d_print_comp_inner+0xe0>
 8003400:	2120      	movs	r1, #32
 8003402:	4620      	mov	r0, r4
 8003404:	f7fd f8d2 	bl	80005ac <d_append_char>
 8003408:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800340c:	4632      	mov	r2, r6
 800340e:	2111      	movs	r1, #17
 8003410:	4620      	mov	r0, r4
 8003412:	b015      	add	sp, #84	; 0x54
 8003414:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003418:	f001 bec4 	b.w	80051a4 <d_print_function_type>
 800341c:	68d7      	ldr	r7, [r2, #12]
 800341e:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
 8003422:	2200      	movs	r2, #0
 8003424:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 8003428:	2f00      	cmp	r7, #0
 800342a:	f43f ab66 	beq.w	8002afa <d_print_comp_inner+0xda>
 800342e:	f10d 0810 	add.w	r8, sp, #16
 8003432:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
 8003436:	4643      	mov	r3, r8
 8003438:	4611      	mov	r1, r2
 800343a:	4696      	mov	lr, r2
 800343c:	e9c3 2700 	strd	r2, r7, [r3]
 8003440:	e9c3 ec02 	strd	lr, ip, [r3, #8]
 8003444:	783a      	ldrb	r2, [r7, #0]
 8003446:	2a4e      	cmp	r2, #78	; 0x4e
 8003448:	469a      	mov	sl, r3
 800344a:	f1a2 0b1c 	sub.w	fp, r2, #28
 800344e:	f1a2 0050 	sub.w	r0, r2, #80	; 0x50
 8003452:	f101 0501 	add.w	r5, r1, #1
 8003456:	f000 8688 	beq.w	800416a <d_print_comp_inner+0x174a>
 800345a:	f200 84ed 	bhi.w	8003e38 <d_print_comp_inner+0x1418>
 800345e:	f1bb 0f04 	cmp.w	fp, #4
 8003462:	f240 8682 	bls.w	800416a <d_print_comp_inner+0x174a>
 8003466:	2a02      	cmp	r2, #2
 8003468:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 800346c:	d114      	bne.n	8003498 <d_print_comp_inner+0xa78>
 800346e:	693f      	ldr	r7, [r7, #16]
 8003470:	783a      	ldrb	r2, [r7, #0]
 8003472:	2a48      	cmp	r2, #72	; 0x48
 8003474:	f001 8252 	beq.w	800491c <d_print_comp_inner+0x1efc>
 8003478:	eb08 1101 	add.w	r1, r8, r1, lsl #4
 800347c:	f04f 0a00 	mov.w	sl, #0
 8003480:	2a4e      	cmp	r2, #78	; 0x4e
 8003482:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
 8003486:	f1a2 001c 	sub.w	r0, r2, #28
 800348a:	f000 8787 	beq.w	800439c <d_print_comp_inner+0x197c>
 800348e:	f200 8782 	bhi.w	8004396 <d_print_comp_inner+0x1976>
 8003492:	2804      	cmp	r0, #4
 8003494:	f240 8782 	bls.w	800439c <d_print_comp_inner+0x197c>
 8003498:	2a04      	cmp	r2, #4
 800349a:	d104      	bne.n	80034a6 <d_print_comp_inner+0xa86>
 800349c:	e9cd c702 	strd	ip, r7, [sp, #8]
 80034a0:	ab02      	add	r3, sp, #8
 80034a2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80034a6:	6932      	ldr	r2, [r6, #16]
 80034a8:	2111      	movs	r1, #17
 80034aa:	4620      	mov	r0, r4
 80034ac:	f001 fb34 	bl	8004b18 <d_print_comp>
 80034b0:	783b      	ldrb	r3, [r7, #0]
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d102      	bne.n	80034bc <d_print_comp_inner+0xa9c>
 80034b6:	9b02      	ldr	r3, [sp, #8]
 80034b8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80034bc:	eb08 1805 	add.w	r8, r8, r5, lsl #4
 80034c0:	2720      	movs	r7, #32
 80034c2:	f858 6c08 	ldr.w	r6, [r8, #-8]
 80034c6:	3d01      	subs	r5, #1
 80034c8:	2e00      	cmp	r6, #0
 80034ca:	f000 863b 	beq.w	8004144 <d_print_comp_inner+0x1724>
 80034ce:	f1a8 0810 	sub.w	r8, r8, #16
 80034d2:	2d00      	cmp	r5, #0
 80034d4:	d1f5      	bne.n	80034c2 <d_print_comp_inner+0xaa2>
 80034d6:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80034da:	f7ff bb11 	b.w	8002b00 <d_print_comp_inner+0xe0>
 80034de:	4fab      	ldr	r7, [pc, #684]	; (800378c <d_print_comp_inner+0xd6c>)
 80034e0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80034e4:	f107 0909 	add.w	r9, r7, #9
 80034e8:	2564      	movs	r5, #100	; 0x64
 80034ea:	f04f 0800 	mov.w	r8, #0
 80034ee:	e00b      	b.n	8003508 <d_print_comp_inner+0xae8>
 80034f0:	460b      	mov	r3, r1
 80034f2:	3101      	adds	r1, #1
 80034f4:	454f      	cmp	r7, r9
 80034f6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80034fa:	54e5      	strb	r5, [r4, r3]
 80034fc:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003500:	f000 85ff 	beq.w	8004102 <d_print_comp_inner+0x16e2>
 8003504:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003508:	29ff      	cmp	r1, #255	; 0xff
 800350a:	d1f1      	bne.n	80034f0 <d_print_comp_inner+0xad0>
 800350c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003510:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003514:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003518:	4620      	mov	r0, r4
 800351a:	4798      	blx	r3
 800351c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003520:	3301      	adds	r3, #1
 8003522:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003526:	2101      	movs	r1, #1
 8003528:	2300      	movs	r3, #0
 800352a:	e7e3      	b.n	80034f4 <d_print_comp_inner+0xad4>
 800352c:	4f98      	ldr	r7, [pc, #608]	; (8003790 <d_print_comp_inner+0xd70>)
 800352e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003532:	f107 0907 	add.w	r9, r7, #7
 8003536:	257b      	movs	r5, #123	; 0x7b
 8003538:	f04f 0800 	mov.w	r8, #0
 800353c:	e00b      	b.n	8003556 <d_print_comp_inner+0xb36>
 800353e:	460b      	mov	r3, r1
 8003540:	3101      	adds	r1, #1
 8003542:	454f      	cmp	r7, r9
 8003544:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003548:	54e5      	strb	r5, [r4, r3]
 800354a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800354e:	f000 8546 	beq.w	8003fde <d_print_comp_inner+0x15be>
 8003552:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003556:	29ff      	cmp	r1, #255	; 0xff
 8003558:	d1f1      	bne.n	800353e <d_print_comp_inner+0xb1e>
 800355a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800355e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003562:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003566:	4620      	mov	r0, r4
 8003568:	4798      	blx	r3
 800356a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800356e:	3301      	adds	r3, #1
 8003570:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003574:	2101      	movs	r1, #1
 8003576:	2300      	movs	r3, #0
 8003578:	e7e3      	b.n	8003542 <d_print_comp_inner+0xb22>
 800357a:	4f86      	ldr	r7, [pc, #536]	; (8003794 <d_print_comp_inner+0xd74>)
 800357c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003580:	f107 091b 	add.w	r9, r7, #27
 8003584:	2567      	movs	r5, #103	; 0x67
 8003586:	f04f 0800 	mov.w	r8, #0
 800358a:	e00b      	b.n	80035a4 <d_print_comp_inner+0xb84>
 800358c:	460b      	mov	r3, r1
 800358e:	3101      	adds	r1, #1
 8003590:	45b9      	cmp	r9, r7
 8003592:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003596:	54e5      	strb	r5, [r4, r3]
 8003598:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800359c:	f43f aad3 	beq.w	8002b46 <d_print_comp_inner+0x126>
 80035a0:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 80035a4:	29ff      	cmp	r1, #255	; 0xff
 80035a6:	d1f1      	bne.n	800358c <d_print_comp_inner+0xb6c>
 80035a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80035ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80035b0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80035b4:	4620      	mov	r0, r4
 80035b6:	4798      	blx	r3
 80035b8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80035bc:	3301      	adds	r3, #1
 80035be:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80035c2:	2101      	movs	r1, #1
 80035c4:	2300      	movs	r3, #0
 80035c6:	e7e3      	b.n	8003590 <d_print_comp_inner+0xb70>
 80035c8:	4f73      	ldr	r7, [pc, #460]	; (8003798 <d_print_comp_inner+0xd78>)
 80035ca:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80035ce:	f107 091c 	add.w	r9, r7, #28
 80035d2:	2567      	movs	r5, #103	; 0x67
 80035d4:	f04f 0800 	mov.w	r8, #0
 80035d8:	e00b      	b.n	80035f2 <d_print_comp_inner+0xbd2>
 80035da:	460b      	mov	r3, r1
 80035dc:	3101      	adds	r1, #1
 80035de:	45b9      	cmp	r9, r7
 80035e0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80035e4:	54e5      	strb	r5, [r4, r3]
 80035e6:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80035ea:	f43f aaac 	beq.w	8002b46 <d_print_comp_inner+0x126>
 80035ee:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 80035f2:	29ff      	cmp	r1, #255	; 0xff
 80035f4:	d1f1      	bne.n	80035da <d_print_comp_inner+0xbba>
 80035f6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80035fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80035fe:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003602:	4620      	mov	r0, r4
 8003604:	4798      	blx	r3
 8003606:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800360a:	3301      	adds	r3, #1
 800360c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003610:	2101      	movs	r1, #1
 8003612:	2300      	movs	r3, #0
 8003614:	e7e3      	b.n	80035de <d_print_comp_inner+0xbbe>
 8003616:	6913      	ldr	r3, [r2, #16]
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b39      	cmp	r3, #57	; 0x39
 800361c:	f47f aa6d 	bne.w	8002afa <d_print_comp_inner+0xda>
 8003620:	68d2      	ldr	r2, [r2, #12]
 8003622:	68d3      	ldr	r3, [r2, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	7859      	ldrb	r1, [r3, #1]
 8003628:	2963      	cmp	r1, #99	; 0x63
 800362a:	f001 8081 	beq.w	8004730 <d_print_comp_inner+0x1d10>
 800362e:	4632      	mov	r2, r6
 8003630:	2111      	movs	r1, #17
 8003632:	4620      	mov	r0, r4
 8003634:	f002 fb14 	bl	8005c60 <d_maybe_print_fold_expression>
 8003638:	2800      	cmp	r0, #0
 800363a:	f47f aa61 	bne.w	8002b00 <d_print_comp_inner+0xe0>
 800363e:	4632      	mov	r2, r6
 8003640:	2111      	movs	r1, #17
 8003642:	4620      	mov	r0, r4
 8003644:	f002 fc36 	bl	8005eb4 <d_maybe_print_designated_init>
 8003648:	2800      	cmp	r0, #0
 800364a:	f47f aa59 	bne.w	8002b00 <d_print_comp_inner+0xe0>
 800364e:	68f3      	ldr	r3, [r6, #12]
 8003650:	781a      	ldrb	r2, [r3, #0]
 8003652:	2a32      	cmp	r2, #50	; 0x32
 8003654:	f001 81df 	beq.w	8004a16 <d_print_comp_inner+0x1ff6>
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	4950      	ldr	r1, [pc, #320]	; (800379c <d_print_comp_inner+0xd7c>)
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	f002 fd8f 	bl	8006180 <strcmp>
 8003662:	6933      	ldr	r3, [r6, #16]
 8003664:	b920      	cbnz	r0, 8003670 <d_print_comp_inner+0xc50>
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	7811      	ldrb	r1, [r2, #0]
 800366a:	2903      	cmp	r1, #3
 800366c:	f001 8202 	beq.w	8004a74 <d_print_comp_inner+0x2054>
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	2111      	movs	r1, #17
 8003674:	4620      	mov	r0, r4
 8003676:	f002 fa85 	bl	8005b84 <d_print_subexpr>
 800367a:	68f5      	ldr	r5, [r6, #12]
 800367c:	4948      	ldr	r1, [pc, #288]	; (80037a0 <d_print_comp_inner+0xd80>)
 800367e:	68eb      	ldr	r3, [r5, #12]
 8003680:	681f      	ldr	r7, [r3, #0]
 8003682:	4638      	mov	r0, r7
 8003684:	f002 fd7c 	bl	8006180 <strcmp>
 8003688:	2800      	cmp	r0, #0
 800368a:	f001 81e3 	beq.w	8004a54 <d_print_comp_inner+0x2034>
 800368e:	4943      	ldr	r1, [pc, #268]	; (800379c <d_print_comp_inner+0xd7c>)
 8003690:	4638      	mov	r0, r7
 8003692:	f002 fd75 	bl	8006180 <strcmp>
 8003696:	2800      	cmp	r0, #0
 8003698:	f041 81fa 	bne.w	8004a90 <d_print_comp_inner+0x2070>
 800369c:	6933      	ldr	r3, [r6, #16]
 800369e:	2111      	movs	r1, #17
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	4620      	mov	r0, r4
 80036a4:	f002 fa6e 	bl	8005b84 <d_print_subexpr>
 80036a8:	68f3      	ldr	r3, [r6, #12]
 80036aa:	781a      	ldrb	r2, [r3, #0]
 80036ac:	2a32      	cmp	r2, #50	; 0x32
 80036ae:	f47f aa27 	bne.w	8002b00 <d_print_comp_inner+0xe0>
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	2a01      	cmp	r2, #1
 80036b8:	f47f aa22 	bne.w	8002b00 <d_print_comp_inner+0xe0>
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b3e      	cmp	r3, #62	; 0x3e
 80036c2:	f47f aa1d 	bne.w	8002b00 <d_print_comp_inner+0xe0>
 80036c6:	2129      	movs	r1, #41	; 0x29
 80036c8:	f7ff bb1e 	b.w	8002d08 <d_print_comp_inner+0x2e8>
 80036cc:	e9d2 7503 	ldrd	r7, r5, [r2, #12]
 80036d0:	783b      	ldrb	r3, [r7, #0]
 80036d2:	2b32      	cmp	r3, #50	; 0x32
 80036d4:	f000 86b1 	beq.w	800443a <d_print_comp_inner+0x1a1a>
 80036d8:	2b34      	cmp	r3, #52	; 0x34
 80036da:	f041 820f 	bne.w	8004afc <d_print_comp_inner+0x20dc>
 80036de:	2128      	movs	r1, #40	; 0x28
 80036e0:	f7fc ff64 	bl	80005ac <d_append_char>
 80036e4:	4620      	mov	r0, r4
 80036e6:	2111      	movs	r1, #17
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	f001 fa15 	bl	8004b18 <d_print_comp>
 80036ee:	2129      	movs	r1, #41	; 0x29
 80036f0:	4620      	mov	r0, r4
 80036f2:	f7fc ff5b 	bl	80005ac <d_append_char>
 80036f6:	462a      	mov	r2, r5
 80036f8:	2111      	movs	r1, #17
 80036fa:	4620      	mov	r0, r4
 80036fc:	b015      	add	sp, #84	; 0x54
 80036fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003702:	f002 ba3f 	b.w	8005b84 <d_print_subexpr>
 8003706:	68d2      	ldr	r2, [r2, #12]
 8003708:	2111      	movs	r1, #17
 800370a:	4620      	mov	r0, r4
 800370c:	b015      	add	sp, #84	; 0x54
 800370e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003712:	f002 b83b 	b.w	800578c <d_print_expr_op>
 8003716:	f9b2 3012 	ldrsh.w	r3, [r2, #18]
 800371a:	2b00      	cmp	r3, #0
 800371c:	f040 871b 	bne.w	8004556 <d_print_comp_inner+0x1b36>
 8003720:	68f2      	ldr	r2, [r6, #12]
 8003722:	4b20      	ldr	r3, [pc, #128]	; (80037a4 <d_print_comp_inner+0xd84>)
 8003724:	68d1      	ldr	r1, [r2, #12]
 8003726:	4299      	cmp	r1, r3
 8003728:	d00f      	beq.n	800374a <d_print_comp_inner+0xd2a>
 800372a:	2111      	movs	r1, #17
 800372c:	4620      	mov	r0, r4
 800372e:	f001 f9f3 	bl	8004b18 <d_print_comp>
 8003732:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003736:	29ff      	cmp	r1, #255	; 0xff
 8003738:	f001 80c0 	beq.w	80048bc <d_print_comp_inner+0x1e9c>
 800373c:	2320      	movs	r3, #32
 800373e:	1c4a      	adds	r2, r1, #1
 8003740:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003744:	5463      	strb	r3, [r4, r1]
 8003746:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800374a:	f9b6 8010 	ldrsh.w	r8, [r6, #16]
 800374e:	f1b8 0f00 	cmp.w	r8, #0
 8003752:	f000 8540 	beq.w	80041d6 <d_print_comp_inner+0x17b6>
 8003756:	4914      	ldr	r1, [pc, #80]	; (80037a8 <d_print_comp_inner+0xd88>)
 8003758:	e5c1      	b.n	80032de <d_print_comp_inner+0x8be>
 800375a:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
 800375e:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8003762:	9307      	str	r3, [sp, #28]
 8003764:	f10d 0810 	add.w	r8, sp, #16
 8003768:	2300      	movs	r3, #0
 800376a:	46e1      	mov	r9, ip
 800376c:	f8cd c010 	str.w	ip, [sp, #16]
 8003770:	f8c0 8114 	str.w	r8, [r0, #276]	; 0x114
 8003774:	9205      	str	r2, [sp, #20]
 8003776:	9306      	str	r3, [sp, #24]
 8003778:	f1bc 0f00 	cmp.w	ip, #0
 800377c:	f001 813f 	beq.w	80049fe <d_print_comp_inner+0x1fde>
 8003780:	2701      	movs	r7, #1
 8003782:	4665      	mov	r5, ip
 8003784:	46be      	mov	lr, r7
 8003786:	4694      	mov	ip, r2
 8003788:	4646      	mov	r6, r8
 800378a:	e028      	b.n	80037de <d_print_comp_inner+0xdbe>
 800378c:	08024090 	.word	0x08024090
 8003790:	080240f0 	.word	0x080240f0
 8003794:	080240d0 	.word	0x080240d0
 8003798:	080240b0 	.word	0x080240b0
 800379c:	0802404c 	.word	0x0802404c
 80037a0:	08024050 	.word	0x08024050
 80037a4:	0801f460 	.word	0x0801f460
 80037a8:	0802401c 	.word	0x0802401c
 80037ac:	68ab      	ldr	r3, [r5, #8]
 80037ae:	b9a3      	cbnz	r3, 80037da <d_print_comp_inner+0xdba>
 80037b0:	2f03      	cmp	r7, #3
 80037b2:	f63f a9a2 	bhi.w	8002afa <d_print_comp_inner+0xda>
 80037b6:	ab14      	add	r3, sp, #80	; 0x50
 80037b8:	eb03 1b07 	add.w	fp, r3, r7, lsl #4
 80037bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80037c0:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
 80037c4:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 80037c8:	f84b 6c40 	str.w	r6, [fp, #-64]
 80037cc:	eb08 1607 	add.w	r6, r8, r7, lsl #4
 80037d0:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
 80037d4:	3701      	adds	r7, #1
 80037d6:	f8c5 e008 	str.w	lr, [r5, #8]
 80037da:	682d      	ldr	r5, [r5, #0]
 80037dc:	b125      	cbz	r5, 80037e8 <d_print_comp_inner+0xdc8>
 80037de:	686b      	ldr	r3, [r5, #4]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	3b19      	subs	r3, #25
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d9e1      	bls.n	80037ac <d_print_comp_inner+0xd8c>
 80037e8:	f8dc 2010 	ldr.w	r2, [ip, #16]
 80037ec:	2111      	movs	r1, #17
 80037ee:	4620      	mov	r0, r4
 80037f0:	4666      	mov	r6, ip
 80037f2:	f001 f991 	bl	8004b18 <d_print_comp>
 80037f6:	9b06      	ldr	r3, [sp, #24]
 80037f8:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f47f a97f 	bne.w	8002b00 <d_print_comp_inner+0xe0>
 8003802:	2f01      	cmp	r7, #1
 8003804:	d00c      	beq.n	8003820 <d_print_comp_inner+0xe00>
 8003806:	eb08 1807 	add.w	r8, r8, r7, lsl #4
 800380a:	f858 2c0c 	ldr.w	r2, [r8, #-12]
 800380e:	3f01      	subs	r7, #1
 8003810:	2111      	movs	r1, #17
 8003812:	4620      	mov	r0, r4
 8003814:	f001 f9ae 	bl	8004b74 <d_print_mod>
 8003818:	2f01      	cmp	r7, #1
 800381a:	f1a8 0810 	sub.w	r8, r8, #16
 800381e:	d1f4      	bne.n	800380a <d_print_comp_inner+0xdea>
 8003820:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8003824:	4632      	mov	r2, r6
 8003826:	2111      	movs	r1, #17
 8003828:	4620      	mov	r0, r4
 800382a:	f001 fecb 	bl	80055c4 <d_print_array_type>
 800382e:	f7ff b967 	b.w	8002b00 <d_print_comp_inner+0xe0>
 8003832:	4fc6      	ldr	r7, [pc, #792]	; (8003b4c <d_print_comp_inner+0x112c>)
 8003834:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003838:	f107 0919 	add.w	r9, r7, #25
 800383c:	2563      	movs	r5, #99	; 0x63
 800383e:	f04f 0800 	mov.w	r8, #0
 8003842:	e00b      	b.n	800385c <d_print_comp_inner+0xe3c>
 8003844:	460b      	mov	r3, r1
 8003846:	3101      	adds	r1, #1
 8003848:	45b9      	cmp	r9, r7
 800384a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800384e:	54e5      	strb	r5, [r4, r3]
 8003850:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003854:	f43f a977 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8003858:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 800385c:	29ff      	cmp	r1, #255	; 0xff
 800385e:	d1f1      	bne.n	8003844 <d_print_comp_inner+0xe24>
 8003860:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003864:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003868:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800386c:	4620      	mov	r0, r4
 800386e:	4798      	blx	r3
 8003870:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003874:	3301      	adds	r3, #1
 8003876:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800387a:	2101      	movs	r1, #1
 800387c:	2300      	movs	r3, #0
 800387e:	e7e3      	b.n	8003848 <d_print_comp_inner+0xe28>
 8003880:	4fb3      	ldr	r7, [pc, #716]	; (8003b50 <d_print_comp_inner+0x1130>)
 8003882:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003886:	f107 0910 	add.w	r9, r7, #16
 800388a:	2576      	movs	r5, #118	; 0x76
 800388c:	f04f 0800 	mov.w	r8, #0
 8003890:	e00b      	b.n	80038aa <d_print_comp_inner+0xe8a>
 8003892:	460b      	mov	r3, r1
 8003894:	3101      	adds	r1, #1
 8003896:	45b9      	cmp	r9, r7
 8003898:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800389c:	54e5      	strb	r5, [r4, r3]
 800389e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80038a2:	f43f a950 	beq.w	8002b46 <d_print_comp_inner+0x126>
 80038a6:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 80038aa:	29ff      	cmp	r1, #255	; 0xff
 80038ac:	d1f1      	bne.n	8003892 <d_print_comp_inner+0xe72>
 80038ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80038b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80038b6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80038ba:	4620      	mov	r0, r4
 80038bc:	4798      	blx	r3
 80038be:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80038c2:	3301      	adds	r3, #1
 80038c4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80038c8:	2101      	movs	r1, #1
 80038ca:	2300      	movs	r3, #0
 80038cc:	e7e3      	b.n	8003896 <d_print_comp_inner+0xe76>
 80038ce:	4fa1      	ldr	r7, [pc, #644]	; (8003b54 <d_print_comp_inner+0x1134>)
 80038d0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80038d4:	f107 0914 	add.w	r9, r7, #20
 80038d8:	256e      	movs	r5, #110	; 0x6e
 80038da:	f04f 0800 	mov.w	r8, #0
 80038de:	e00b      	b.n	80038f8 <d_print_comp_inner+0xed8>
 80038e0:	460b      	mov	r3, r1
 80038e2:	3101      	adds	r1, #1
 80038e4:	45b9      	cmp	r9, r7
 80038e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80038ea:	54e5      	strb	r5, [r4, r3]
 80038ec:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80038f0:	f43f a929 	beq.w	8002b46 <d_print_comp_inner+0x126>
 80038f4:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 80038f8:	29ff      	cmp	r1, #255	; 0xff
 80038fa:	d1f1      	bne.n	80038e0 <d_print_comp_inner+0xec0>
 80038fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003900:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003904:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003908:	4620      	mov	r0, r4
 800390a:	4798      	blx	r3
 800390c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003910:	3301      	adds	r3, #1
 8003912:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003916:	2101      	movs	r1, #1
 8003918:	2300      	movs	r3, #0
 800391a:	e7e3      	b.n	80038e4 <d_print_comp_inner+0xec4>
 800391c:	4f8e      	ldr	r7, [pc, #568]	; (8003b58 <d_print_comp_inner+0x1138>)
 800391e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003922:	f107 0918 	add.w	r9, r7, #24
 8003926:	2554      	movs	r5, #84	; 0x54
 8003928:	f04f 0800 	mov.w	r8, #0
 800392c:	e00b      	b.n	8003946 <d_print_comp_inner+0xf26>
 800392e:	460b      	mov	r3, r1
 8003930:	3101      	adds	r1, #1
 8003932:	45b9      	cmp	r9, r7
 8003934:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003938:	54e5      	strb	r5, [r4, r3]
 800393a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800393e:	f43f a902 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8003942:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003946:	29ff      	cmp	r1, #255	; 0xff
 8003948:	d1f1      	bne.n	800392e <d_print_comp_inner+0xf0e>
 800394a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800394e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003952:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003956:	4620      	mov	r0, r4
 8003958:	4798      	blx	r3
 800395a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800395e:	3301      	adds	r3, #1
 8003960:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003964:	2101      	movs	r1, #1
 8003966:	2300      	movs	r3, #0
 8003968:	e7e3      	b.n	8003932 <d_print_comp_inner+0xf12>
 800396a:	4f7c      	ldr	r7, [pc, #496]	; (8003b5c <d_print_comp_inner+0x113c>)
 800396c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003970:	f107 0915 	add.w	r9, r7, #21
 8003974:	2554      	movs	r5, #84	; 0x54
 8003976:	f04f 0800 	mov.w	r8, #0
 800397a:	e00b      	b.n	8003994 <d_print_comp_inner+0xf74>
 800397c:	460b      	mov	r3, r1
 800397e:	3101      	adds	r1, #1
 8003980:	45b9      	cmp	r9, r7
 8003982:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003986:	54e5      	strb	r5, [r4, r3]
 8003988:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800398c:	f43f a8db 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8003990:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003994:	29ff      	cmp	r1, #255	; 0xff
 8003996:	d1f1      	bne.n	800397c <d_print_comp_inner+0xf5c>
 8003998:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800399c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80039a0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80039a4:	4620      	mov	r0, r4
 80039a6:	4798      	blx	r3
 80039a8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80039ac:	3301      	adds	r3, #1
 80039ae:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80039b2:	2101      	movs	r1, #1
 80039b4:	2300      	movs	r3, #0
 80039b6:	e7e3      	b.n	8003980 <d_print_comp_inner+0xf60>
 80039b8:	4f69      	ldr	r7, [pc, #420]	; (8003b60 <d_print_comp_inner+0x1140>)
 80039ba:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80039be:	f107 0912 	add.w	r9, r7, #18
 80039c2:	2567      	movs	r5, #103	; 0x67
 80039c4:	f04f 0800 	mov.w	r8, #0
 80039c8:	e00b      	b.n	80039e2 <d_print_comp_inner+0xfc2>
 80039ca:	460b      	mov	r3, r1
 80039cc:	3101      	adds	r1, #1
 80039ce:	45b9      	cmp	r9, r7
 80039d0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80039d4:	54e5      	strb	r5, [r4, r3]
 80039d6:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80039da:	f43f a8b4 	beq.w	8002b46 <d_print_comp_inner+0x126>
 80039de:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 80039e2:	29ff      	cmp	r1, #255	; 0xff
 80039e4:	d1f1      	bne.n	80039ca <d_print_comp_inner+0xfaa>
 80039e6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80039ea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80039ee:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80039f2:	4620      	mov	r0, r4
 80039f4:	4798      	blx	r3
 80039f6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80039fa:	3301      	adds	r3, #1
 80039fc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003a00:	2101      	movs	r1, #1
 8003a02:	2300      	movs	r3, #0
 8003a04:	e7e3      	b.n	80039ce <d_print_comp_inner+0xfae>
 8003a06:	4f57      	ldr	r7, [pc, #348]	; (8003b64 <d_print_comp_inner+0x1144>)
 8003a08:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003a0c:	f107 090e 	add.w	r9, r7, #14
 8003a10:	256a      	movs	r5, #106	; 0x6a
 8003a12:	f04f 0800 	mov.w	r8, #0
 8003a16:	e00b      	b.n	8003a30 <d_print_comp_inner+0x1010>
 8003a18:	460b      	mov	r3, r1
 8003a1a:	3101      	adds	r1, #1
 8003a1c:	45b9      	cmp	r9, r7
 8003a1e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003a22:	54e5      	strb	r5, [r4, r3]
 8003a24:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003a28:	f43f a88d 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8003a2c:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003a30:	29ff      	cmp	r1, #255	; 0xff
 8003a32:	d1f1      	bne.n	8003a18 <d_print_comp_inner+0xff8>
 8003a34:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a38:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a3c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003a40:	4620      	mov	r0, r4
 8003a42:	4798      	blx	r3
 8003a44:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003a48:	3301      	adds	r3, #1
 8003a4a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003a4e:	2101      	movs	r1, #1
 8003a50:	2300      	movs	r3, #0
 8003a52:	e7e3      	b.n	8003a1c <d_print_comp_inner+0xffc>
 8003a54:	4f44      	ldr	r7, [pc, #272]	; (8003b68 <d_print_comp_inner+0x1148>)
 8003a56:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003a5a:	f107 0908 	add.w	r9, r7, #8
 8003a5e:	256f      	movs	r5, #111	; 0x6f
 8003a60:	f04f 0800 	mov.w	r8, #0
 8003a64:	e00b      	b.n	8003a7e <d_print_comp_inner+0x105e>
 8003a66:	460b      	mov	r3, r1
 8003a68:	3101      	adds	r1, #1
 8003a6a:	45b9      	cmp	r9, r7
 8003a6c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003a70:	54e5      	strb	r5, [r4, r3]
 8003a72:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003a76:	f000 8295 	beq.w	8003fa4 <d_print_comp_inner+0x1584>
 8003a7a:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003a7e:	29ff      	cmp	r1, #255	; 0xff
 8003a80:	d1f1      	bne.n	8003a66 <d_print_comp_inner+0x1046>
 8003a82:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a86:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a8a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003a8e:	4620      	mov	r0, r4
 8003a90:	4798      	blx	r3
 8003a92:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003a96:	3301      	adds	r3, #1
 8003a98:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	e7e3      	b.n	8003a6a <d_print_comp_inner+0x104a>
 8003aa2:	4f31      	ldr	r7, [pc, #196]	; (8003b68 <d_print_comp_inner+0x1148>)
 8003aa4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003aa8:	f107 0908 	add.w	r9, r7, #8
 8003aac:	256f      	movs	r5, #111	; 0x6f
 8003aae:	f04f 0800 	mov.w	r8, #0
 8003ab2:	e00b      	b.n	8003acc <d_print_comp_inner+0x10ac>
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	3101      	adds	r1, #1
 8003ab8:	45b9      	cmp	r9, r7
 8003aba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003abe:	54e5      	strb	r5, [r4, r3]
 8003ac0:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003ac4:	f43f a853 	beq.w	8002b6e <d_print_comp_inner+0x14e>
 8003ac8:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003acc:	29ff      	cmp	r1, #255	; 0xff
 8003ace:	d1f1      	bne.n	8003ab4 <d_print_comp_inner+0x1094>
 8003ad0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003ad4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003ad8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003adc:	4620      	mov	r0, r4
 8003ade:	4798      	blx	r3
 8003ae0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003aea:	2101      	movs	r1, #1
 8003aec:	2300      	movs	r3, #0
 8003aee:	e7e3      	b.n	8003ab8 <d_print_comp_inner+0x1098>
 8003af0:	68d2      	ldr	r2, [r2, #12]
 8003af2:	2111      	movs	r1, #17
 8003af4:	f001 f810 	bl	8004b18 <d_print_comp>
 8003af8:	f7ff b839 	b.w	8002b6e <d_print_comp_inner+0x14e>
 8003afc:	4f1b      	ldr	r7, [pc, #108]	; (8003b6c <d_print_comp_inner+0x114c>)
 8003afe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003b02:	f107 090d 	add.w	r9, r7, #13
 8003b06:	256a      	movs	r5, #106	; 0x6a
 8003b08:	f04f 0800 	mov.w	r8, #0
 8003b0c:	e00b      	b.n	8003b26 <d_print_comp_inner+0x1106>
 8003b0e:	460b      	mov	r3, r1
 8003b10:	3101      	adds	r1, #1
 8003b12:	45b9      	cmp	r9, r7
 8003b14:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003b18:	54e5      	strb	r5, [r4, r3]
 8003b1a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003b1e:	f43f a812 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8003b22:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003b26:	29ff      	cmp	r1, #255	; 0xff
 8003b28:	d1f1      	bne.n	8003b0e <d_print_comp_inner+0x10ee>
 8003b2a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003b2e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003b32:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003b36:	4620      	mov	r0, r4
 8003b38:	4798      	blx	r3
 8003b3a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003b3e:	3301      	adds	r3, #1
 8003b40:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003b44:	2101      	movs	r1, #1
 8003b46:	2300      	movs	r3, #0
 8003b48:	e7e3      	b.n	8003b12 <d_print_comp_inner+0x10f2>
 8003b4a:	bf00      	nop
 8003b4c:	08023f58 	.word	0x08023f58
 8003b50:	08023f44 	.word	0x08023f44
 8003b54:	08023f40 	.word	0x08023f40
 8003b58:	08023fb0 	.word	0x08023fb0
 8003b5c:	08023f98 	.word	0x08023f98
 8003b60:	08023f84 	.word	0x08023f84
 8003b64:	08023f74 	.word	0x08023f74
 8003b68:	0802403c 	.word	0x0802403c
 8003b6c:	08024080 	.word	0x08024080
 8003b70:	2300      	movs	r3, #0
 8003b72:	f8d0 8114 	ldr.w	r8, [r0, #276]	; 0x114
 8003b76:	f8d0 7148 	ldr.w	r7, [r0, #328]	; 0x148
 8003b7a:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
 8003b7e:	2111      	movs	r1, #17
 8003b80:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8003b84:	68d2      	ldr	r2, [r2, #12]
 8003b86:	f000 ffc7 	bl	8004b18 <d_print_comp>
 8003b8a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003b8e:	2b3c      	cmp	r3, #60	; 0x3c
 8003b90:	f000 857c 	beq.w	800468c <d_print_comp_inner+0x1c6c>
 8003b94:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003b98:	29ff      	cmp	r1, #255	; 0xff
 8003b9a:	f000 8567 	beq.w	800466c <d_print_comp_inner+0x1c4c>
 8003b9e:	1c4b      	adds	r3, r1, #1
 8003ba0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003ba4:	233c      	movs	r3, #60	; 0x3c
 8003ba6:	5463      	strb	r3, [r4, r1]
 8003ba8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003bac:	6932      	ldr	r2, [r6, #16]
 8003bae:	2111      	movs	r1, #17
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	f000 ffb1 	bl	8004b18 <d_print_comp>
 8003bb6:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003bba:	2b3e      	cmp	r3, #62	; 0x3e
 8003bbc:	f000 8550 	beq.w	8004660 <d_print_comp_inner+0x1c40>
 8003bc0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003bc4:	29ff      	cmp	r1, #255	; 0xff
 8003bc6:	f000 853b 	beq.w	8004640 <d_print_comp_inner+0x1c20>
 8003bca:	1c4b      	adds	r3, r1, #1
 8003bcc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003bd0:	233e      	movs	r3, #62	; 0x3e
 8003bd2:	5463      	strb	r3, [r4, r1]
 8003bd4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003bd8:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 8003bdc:	f8c4 7148 	str.w	r7, [r4, #328]	; 0x148
 8003be0:	f7fe bf8e 	b.w	8002b00 <d_print_comp_inner+0xe0>
 8003be4:	4fc4      	ldr	r7, [pc, #784]	; (8003ef8 <d_print_comp_inner+0x14d8>)
 8003be6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003bea:	f107 0907 	add.w	r9, r7, #7
 8003bee:	2556      	movs	r5, #86	; 0x56
 8003bf0:	f04f 0800 	mov.w	r8, #0
 8003bf4:	e00b      	b.n	8003c0e <d_print_comp_inner+0x11ee>
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	3101      	adds	r1, #1
 8003bfa:	454f      	cmp	r7, r9
 8003bfc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003c00:	54e5      	strb	r5, [r4, r3]
 8003c02:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003c06:	f43e af9e 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8003c0a:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003c0e:	29ff      	cmp	r1, #255	; 0xff
 8003c10:	d1f1      	bne.n	8003bf6 <d_print_comp_inner+0x11d6>
 8003c12:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c16:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c1a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003c1e:	4620      	mov	r0, r4
 8003c20:	4798      	blx	r3
 8003c22:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003c26:	3301      	adds	r3, #1
 8003c28:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	2300      	movs	r3, #0
 8003c30:	e7e3      	b.n	8003bfa <d_print_comp_inner+0x11da>
 8003c32:	4fb2      	ldr	r7, [pc, #712]	; (8003efc <d_print_comp_inner+0x14dc>)
 8003c34:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003c38:	f107 090a 	add.w	r9, r7, #10
 8003c3c:	2576      	movs	r5, #118	; 0x76
 8003c3e:	f04f 0800 	mov.w	r8, #0
 8003c42:	e00b      	b.n	8003c5c <d_print_comp_inner+0x123c>
 8003c44:	460b      	mov	r3, r1
 8003c46:	3101      	adds	r1, #1
 8003c48:	45b9      	cmp	r9, r7
 8003c4a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003c4e:	54e5      	strb	r5, [r4, r3]
 8003c50:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003c54:	f43e af77 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8003c58:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003c5c:	29ff      	cmp	r1, #255	; 0xff
 8003c5e:	d1f1      	bne.n	8003c44 <d_print_comp_inner+0x1224>
 8003c60:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c64:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c68:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	4798      	blx	r3
 8003c70:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003c74:	3301      	adds	r3, #1
 8003c76:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	e7e3      	b.n	8003c48 <d_print_comp_inner+0x1228>
 8003c80:	6913      	ldr	r3, [r2, #16]
 8003c82:	781a      	ldrb	r2, [r3, #0]
 8003c84:	2a3b      	cmp	r2, #59	; 0x3b
 8003c86:	f47e af38 	bne.w	8002afa <d_print_comp_inner+0xda>
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b3c      	cmp	r3, #60	; 0x3c
 8003c90:	f47e af33 	bne.w	8002afa <d_print_comp_inner+0xda>
 8003c94:	4632      	mov	r2, r6
 8003c96:	2111      	movs	r1, #17
 8003c98:	f001 ffe2 	bl	8005c60 <d_maybe_print_fold_expression>
 8003c9c:	2800      	cmp	r0, #0
 8003c9e:	f47e af2f 	bne.w	8002b00 <d_print_comp_inner+0xe0>
 8003ca2:	4632      	mov	r2, r6
 8003ca4:	2111      	movs	r1, #17
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	f002 f904 	bl	8005eb4 <d_maybe_print_designated_init>
 8003cac:	2800      	cmp	r0, #0
 8003cae:	f47e af27 	bne.w	8002b00 <d_print_comp_inner+0xe0>
 8003cb2:	e9d6 8303 	ldrd	r8, r3, [r6, #12]
 8003cb6:	e9d3 6303 	ldrd	r6, r3, [r3, #12]
 8003cba:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8003cbe:	4990      	ldr	r1, [pc, #576]	; (8003f00 <d_print_comp_inner+0x14e0>)
 8003cc0:	6810      	ldr	r0, [r2, #0]
 8003cc2:	e9d3 7503 	ldrd	r7, r5, [r3, #12]
 8003cc6:	f002 fa5b 	bl	8006180 <strcmp>
 8003cca:	2800      	cmp	r0, #0
 8003ccc:	f040 86e7 	bne.w	8004a9e <d_print_comp_inner+0x207e>
 8003cd0:	4632      	mov	r2, r6
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	2111      	movs	r1, #17
 8003cd6:	f001 ff55 	bl	8005b84 <d_print_subexpr>
 8003cda:	4642      	mov	r2, r8
 8003cdc:	4620      	mov	r0, r4
 8003cde:	2111      	movs	r1, #17
 8003ce0:	f001 fd54 	bl	800578c <d_print_expr_op>
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	463a      	mov	r2, r7
 8003ce8:	2111      	movs	r1, #17
 8003cea:	f001 ff4b 	bl	8005b84 <d_print_subexpr>
 8003cee:	4985      	ldr	r1, [pc, #532]	; (8003f04 <d_print_comp_inner+0x14e4>)
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	f7fc fce3 	bl	80006bc <d_append_string>
 8003cf6:	e4fe      	b.n	80036f6 <d_print_comp_inner+0xcd6>
 8003cf8:	e9d2 5303 	ldrd	r5, r3, [r2, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f43e aeff 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 8003d02:	442b      	add	r3, r5
 8003d04:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003d08:	3d01      	subs	r5, #1
 8003d0a:	1e5f      	subs	r7, r3, #1
 8003d0c:	f04f 0800 	mov.w	r8, #0
 8003d10:	e009      	b.n	8003d26 <d_print_comp_inner+0x1306>
 8003d12:	460b      	mov	r3, r1
 8003d14:	3101      	adds	r1, #1
 8003d16:	42af      	cmp	r7, r5
 8003d18:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003d1c:	54e6      	strb	r6, [r4, r3]
 8003d1e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003d22:	f43e aeed 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 8003d26:	29ff      	cmp	r1, #255	; 0xff
 8003d28:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003d2c:	d1f1      	bne.n	8003d12 <d_print_comp_inner+0x12f2>
 8003d2e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d32:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d36:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	4798      	blx	r3
 8003d3e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003d42:	3301      	adds	r3, #1
 8003d44:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003d48:	2101      	movs	r1, #1
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e7e3      	b.n	8003d16 <d_print_comp_inner+0x12f6>
 8003d4e:	68d2      	ldr	r2, [r2, #12]
 8003d50:	e9d2 5300 	ldrd	r5, r3, [r2]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f43e aed3 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 8003d5a:	442b      	add	r3, r5
 8003d5c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003d60:	3d01      	subs	r5, #1
 8003d62:	1e5f      	subs	r7, r3, #1
 8003d64:	f04f 0800 	mov.w	r8, #0
 8003d68:	e009      	b.n	8003d7e <d_print_comp_inner+0x135e>
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	3101      	adds	r1, #1
 8003d6e:	42af      	cmp	r7, r5
 8003d70:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003d74:	54e6      	strb	r6, [r4, r3]
 8003d76:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003d7a:	f43e aec1 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 8003d7e:	29ff      	cmp	r1, #255	; 0xff
 8003d80:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003d84:	d1f1      	bne.n	8003d6a <d_print_comp_inner+0x134a>
 8003d86:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d8a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d8e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003d92:	4620      	mov	r0, r4
 8003d94:	4798      	blx	r3
 8003d96:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003da0:	2101      	movs	r1, #1
 8003da2:	2300      	movs	r3, #0
 8003da4:	e7e3      	b.n	8003d6e <d_print_comp_inner+0x134e>
 8003da6:	4958      	ldr	r1, [pc, #352]	; (8003f08 <d_print_comp_inner+0x14e8>)
 8003da8:	4620      	mov	r0, r4
 8003daa:	f7fc fc87 	bl	80006bc <d_append_string>
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4956      	ldr	r1, [pc, #344]	; (8003f0c <d_print_comp_inner+0x14ec>)
 8003db2:	3201      	adds	r2, #1
 8003db4:	a804      	add	r0, sp, #16
 8003db6:	f017 fd3d 	bl	801b834 <siprintf>
 8003dba:	a804      	add	r0, sp, #16
 8003dbc:	f002 fa40 	bl	8006240 <strlen>
 8003dc0:	2800      	cmp	r0, #0
 8003dc2:	f000 83fb 	beq.w	80045bc <d_print_comp_inner+0x1b9c>
 8003dc6:	ad04      	add	r5, sp, #16
 8003dc8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003dcc:	eb05 0900 	add.w	r9, r5, r0
 8003dd0:	f04f 0800 	mov.w	r8, #0
 8003dd4:	e009      	b.n	8003dea <d_print_comp_inner+0x13ca>
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	3101      	adds	r1, #1
 8003dda:	45a9      	cmp	r9, r5
 8003ddc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003de0:	54e6      	strb	r6, [r4, r3]
 8003de2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003de6:	f000 83e9 	beq.w	80045bc <d_print_comp_inner+0x1b9c>
 8003dea:	29ff      	cmp	r1, #255	; 0xff
 8003dec:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003df0:	d1f1      	bne.n	8003dd6 <d_print_comp_inner+0x13b6>
 8003df2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003df6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003dfa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003dfe:	4620      	mov	r0, r4
 8003e00:	4798      	blx	r3
 8003e02:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003e06:	3301      	adds	r3, #1
 8003e08:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e7e3      	b.n	8003dda <d_print_comp_inner+0x13ba>
 8003e12:	2111      	movs	r1, #17
 8003e14:	6932      	ldr	r2, [r6, #16]
 8003e16:	4620      	mov	r0, r4
 8003e18:	f000 fe7e 	bl	8004b18 <d_print_comp>
 8003e1c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003e20:	29ff      	cmp	r1, #255	; 0xff
 8003e22:	f000 8299 	beq.w	8004358 <d_print_comp_inner+0x1938>
 8003e26:	1c4a      	adds	r2, r1, #1
 8003e28:	235d      	movs	r3, #93	; 0x5d
 8003e2a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003e2e:	5463      	strb	r3, [r4, r1]
 8003e30:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003e34:	f7fe be64 	b.w	8002b00 <d_print_comp_inner+0xe0>
 8003e38:	2801      	cmp	r0, #1
 8003e3a:	f240 8196 	bls.w	800416a <d_print_comp_inner+0x174a>
 8003e3e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003e42:	f7ff bb30 	b.w	80034a6 <d_print_comp_inner+0xa86>
 8003e46:	68f2      	ldr	r2, [r6, #12]
 8003e48:	4930      	ldr	r1, [pc, #192]	; (8003f0c <d_print_comp_inner+0x14ec>)
 8003e4a:	3201      	adds	r2, #1
 8003e4c:	a804      	add	r0, sp, #16
 8003e4e:	f017 fcf1 	bl	801b834 <siprintf>
 8003e52:	a804      	add	r0, sp, #16
 8003e54:	f002 f9f4 	bl	8006240 <strlen>
 8003e58:	b318      	cbz	r0, 8003ea2 <d_print_comp_inner+0x1482>
 8003e5a:	ad04      	add	r5, sp, #16
 8003e5c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003e60:	182f      	adds	r7, r5, r0
 8003e62:	f04f 0800 	mov.w	r8, #0
 8003e66:	e008      	b.n	8003e7a <d_print_comp_inner+0x145a>
 8003e68:	460b      	mov	r3, r1
 8003e6a:	3101      	adds	r1, #1
 8003e6c:	42af      	cmp	r7, r5
 8003e6e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003e72:	54e6      	strb	r6, [r4, r3]
 8003e74:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003e78:	d015      	beq.n	8003ea6 <d_print_comp_inner+0x1486>
 8003e7a:	29ff      	cmp	r1, #255	; 0xff
 8003e7c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003e80:	d1f2      	bne.n	8003e68 <d_print_comp_inner+0x1448>
 8003e82:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e86:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e8a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003e8e:	4620      	mov	r0, r4
 8003e90:	4798      	blx	r3
 8003e92:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003e96:	3301      	adds	r3, #1
 8003e98:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	e7e4      	b.n	8003e6c <d_print_comp_inner+0x144c>
 8003ea2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003ea6:	29ff      	cmp	r1, #255	; 0xff
 8003ea8:	f47f a91a 	bne.w	80030e0 <d_print_comp_inner+0x6c0>
 8003eac:	2500      	movs	r5, #0
 8003eae:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8003eb2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	4798      	blx	r3
 8003eba:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	f7ff b90b 	b.w	80030e2 <d_print_comp_inner+0x6c2>
 8003ecc:	687d      	ldr	r5, [r7, #4]
 8003ece:	782b      	ldrb	r3, [r5, #0]
 8003ed0:	3b61      	subs	r3, #97	; 0x61
 8003ed2:	2b19      	cmp	r3, #25
 8003ed4:	f240 832d 	bls.w	8004532 <d_print_comp_inner+0x1b12>
 8003ed8:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 8003edc:	5deb      	ldrb	r3, [r5, r7]
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	bf18      	it	ne
 8003ee2:	4647      	movne	r7, r8
 8003ee4:	2f00      	cmp	r7, #0
 8003ee6:	f43e ae0b 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 8003eea:	3d01      	subs	r5, #1
 8003eec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003ef0:	442f      	add	r7, r5
 8003ef2:	f04f 0800 	mov.w	r8, #0
 8003ef6:	e015      	b.n	8003f24 <d_print_comp_inner+0x1504>
 8003ef8:	08023ed8 	.word	0x08023ed8
 8003efc:	08023ecc 	.word	0x08023ecc
 8003f00:	08024054 	.word	0x08024054
 8003f04:	08024058 	.word	0x08024058
 8003f08:	08023e90 	.word	0x08023e90
 8003f0c:	08023e1c 	.word	0x08023e1c
 8003f10:	460b      	mov	r3, r1
 8003f12:	3101      	adds	r1, #1
 8003f14:	42af      	cmp	r7, r5
 8003f16:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003f1a:	54e6      	strb	r6, [r4, r3]
 8003f1c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003f20:	f43e adee 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 8003f24:	29ff      	cmp	r1, #255	; 0xff
 8003f26:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003f2a:	d1f1      	bne.n	8003f10 <d_print_comp_inner+0x14f0>
 8003f2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003f30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003f34:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003f38:	4620      	mov	r0, r4
 8003f3a:	4798      	blx	r3
 8003f3c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003f40:	3301      	adds	r3, #1
 8003f42:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003f46:	2101      	movs	r1, #1
 8003f48:	2300      	movs	r3, #0
 8003f4a:	e7e3      	b.n	8003f14 <d_print_comp_inner+0x14f4>
 8003f4c:	4fcc      	ldr	r7, [pc, #816]	; (8004280 <d_print_comp_inner+0x1860>)
 8003f4e:	6932      	ldr	r2, [r6, #16]
 8003f50:	2111      	movs	r1, #17
 8003f52:	4620      	mov	r0, r4
 8003f54:	f000 fde0 	bl	8004b18 <d_print_comp>
 8003f58:	f107 0904 	add.w	r9, r7, #4
 8003f5c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003f60:	2520      	movs	r5, #32
 8003f62:	f04f 0800 	mov.w	r8, #0
 8003f66:	e00b      	b.n	8003f80 <d_print_comp_inner+0x1560>
 8003f68:	460b      	mov	r3, r1
 8003f6a:	3101      	adds	r1, #1
 8003f6c:	45b9      	cmp	r9, r7
 8003f6e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003f72:	54e5      	strb	r5, [r4, r3]
 8003f74:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003f78:	f43e ade5 	beq.w	8002b46 <d_print_comp_inner+0x126>
 8003f7c:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8003f80:	29ff      	cmp	r1, #255	; 0xff
 8003f82:	d1f1      	bne.n	8003f68 <d_print_comp_inner+0x1548>
 8003f84:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003f88:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003f8c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003f90:	4620      	mov	r0, r4
 8003f92:	4798      	blx	r3
 8003f94:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8003f98:	3301      	adds	r3, #1
 8003f9a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e7e3      	b.n	8003f6c <d_print_comp_inner+0x154c>
 8003fa4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8003fa8:	b133      	cbz	r3, 8003fb8 <d_print_comp_inner+0x1598>
 8003faa:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 8003fae:	9104      	str	r1, [sp, #16]
 8003fb0:	aa04      	add	r2, sp, #16
 8003fb2:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
 8003fb6:	9305      	str	r3, [sp, #20]
 8003fb8:	68f2      	ldr	r2, [r6, #12]
 8003fba:	7813      	ldrb	r3, [r2, #0]
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	f000 8207 	beq.w	80043d0 <d_print_comp_inner+0x19b0>
 8003fc2:	2111      	movs	r1, #17
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	f000 fda7 	bl	8004b18 <d_print_comp>
 8003fca:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f43e ad96 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 8003fd4:	9b04      	ldr	r3, [sp, #16]
 8003fd6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8003fda:	f7fe bd91 	b.w	8002b00 <d_print_comp_inner+0xe0>
 8003fde:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003fe2:	68f2      	ldr	r2, [r6, #12]
 8003fe4:	4fa7      	ldr	r7, [pc, #668]	; (8004284 <d_print_comp_inner+0x1864>)
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003fec:	2111      	movs	r1, #17
 8003fee:	4620      	mov	r0, r4
 8003ff0:	f000 fd92 	bl	8004b18 <d_print_comp>
 8003ff4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003ff8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004002:	f107 0901 	add.w	r9, r7, #1
 8004006:	2529      	movs	r5, #41	; 0x29
 8004008:	f04f 0800 	mov.w	r8, #0
 800400c:	e00a      	b.n	8004024 <d_print_comp_inner+0x1604>
 800400e:	460b      	mov	r3, r1
 8004010:	3101      	adds	r1, #1
 8004012:	454f      	cmp	r7, r9
 8004014:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004018:	54e5      	strb	r5, [r4, r3]
 800401a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800401e:	d013      	beq.n	8004048 <d_print_comp_inner+0x1628>
 8004020:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8004024:	29ff      	cmp	r1, #255	; 0xff
 8004026:	d1f2      	bne.n	800400e <d_print_comp_inner+0x15ee>
 8004028:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800402c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004030:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004034:	4620      	mov	r0, r4
 8004036:	4798      	blx	r3
 8004038:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800403c:	3301      	adds	r3, #1
 800403e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004042:	2101      	movs	r1, #1
 8004044:	2300      	movs	r3, #0
 8004046:	e7e4      	b.n	8004012 <d_print_comp_inner+0x15f2>
 8004048:	6932      	ldr	r2, [r6, #16]
 800404a:	498f      	ldr	r1, [pc, #572]	; (8004288 <d_print_comp_inner+0x1868>)
 800404c:	3201      	adds	r2, #1
 800404e:	a804      	add	r0, sp, #16
 8004050:	f017 fbf0 	bl	801b834 <siprintf>
 8004054:	a804      	add	r0, sp, #16
 8004056:	f002 f8f3 	bl	8006240 <strlen>
 800405a:	2800      	cmp	r0, #0
 800405c:	f43f af21 	beq.w	8003ea2 <d_print_comp_inner+0x1482>
 8004060:	ad04      	add	r5, sp, #16
 8004062:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004066:	182f      	adds	r7, r5, r0
 8004068:	f04f 0800 	mov.w	r8, #0
 800406c:	e009      	b.n	8004082 <d_print_comp_inner+0x1662>
 800406e:	460b      	mov	r3, r1
 8004070:	3101      	adds	r1, #1
 8004072:	42bd      	cmp	r5, r7
 8004074:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004078:	54e6      	strb	r6, [r4, r3]
 800407a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800407e:	f43f af12 	beq.w	8003ea6 <d_print_comp_inner+0x1486>
 8004082:	29ff      	cmp	r1, #255	; 0xff
 8004084:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004088:	d1f1      	bne.n	800406e <d_print_comp_inner+0x164e>
 800408a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800408e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004092:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004096:	4620      	mov	r0, r4
 8004098:	4798      	blx	r3
 800409a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800409e:	3301      	adds	r3, #1
 80040a0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80040a4:	2101      	movs	r1, #1
 80040a6:	2300      	movs	r3, #0
 80040a8:	e7e3      	b.n	8004072 <d_print_comp_inner+0x1652>
 80040aa:	4f78      	ldr	r7, [pc, #480]	; (800428c <d_print_comp_inner+0x186c>)
 80040ac:	68f2      	ldr	r2, [r6, #12]
 80040ae:	2111      	movs	r1, #17
 80040b0:	4620      	mov	r0, r4
 80040b2:	f000 fd31 	bl	8004b18 <d_print_comp>
 80040b6:	f107 0903 	add.w	r9, r7, #3
 80040ba:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80040be:	252d      	movs	r5, #45	; 0x2d
 80040c0:	f04f 0800 	mov.w	r8, #0
 80040c4:	e00b      	b.n	80040de <d_print_comp_inner+0x16be>
 80040c6:	460b      	mov	r3, r1
 80040c8:	3101      	adds	r1, #1
 80040ca:	45b9      	cmp	r9, r7
 80040cc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80040d0:	54e5      	strb	r5, [r4, r3]
 80040d2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80040d6:	f43e ad4a 	beq.w	8002b6e <d_print_comp_inner+0x14e>
 80040da:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 80040de:	29ff      	cmp	r1, #255	; 0xff
 80040e0:	d1f1      	bne.n	80040c6 <d_print_comp_inner+0x16a6>
 80040e2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80040e6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80040ea:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80040ee:	4620      	mov	r0, r4
 80040f0:	4798      	blx	r3
 80040f2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80040f6:	3301      	adds	r3, #1
 80040f8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80040fc:	2101      	movs	r1, #1
 80040fe:	2300      	movs	r3, #0
 8004100:	e7e3      	b.n	80040ca <d_print_comp_inner+0x16aa>
 8004102:	68f2      	ldr	r2, [r6, #12]
 8004104:	f7ff b902 	b.w	800330c <d_print_comp_inner+0x8ec>
 8004108:	4632      	mov	r2, r6
 800410a:	2111      	movs	r1, #17
 800410c:	4620      	mov	r0, r4
 800410e:	f000 fd31 	bl	8004b74 <d_print_mod>
 8004112:	f7fe bd10 	b.w	8002b36 <d_print_comp_inner+0x116>
 8004116:	6932      	ldr	r2, [r6, #16]
 8004118:	f8d4 6128 	ldr.w	r6, [r4, #296]	; 0x128
 800411c:	460d      	mov	r5, r1
 800411e:	4620      	mov	r0, r4
 8004120:	2111      	movs	r1, #17
 8004122:	f000 fcf9 	bl	8004b18 <d_print_comp>
 8004126:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800412a:	42b3      	cmp	r3, r6
 800412c:	f47e ace8 	bne.w	8002b00 <d_print_comp_inner+0xe0>
 8004130:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004134:	429d      	cmp	r5, r3
 8004136:	f47e ace3 	bne.w	8002b00 <d_print_comp_inner+0xe0>
 800413a:	3d02      	subs	r5, #2
 800413c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8004140:	f7fe bcde 	b.w	8002b00 <d_print_comp_inner+0xe0>
 8004144:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004148:	29ff      	cmp	r1, #255	; 0xff
 800414a:	f000 8361 	beq.w	8004810 <d_print_comp_inner+0x1df0>
 800414e:	1c4b      	adds	r3, r1, #1
 8004150:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004154:	f858 2c0c 	ldr.w	r2, [r8, #-12]
 8004158:	5467      	strb	r7, [r4, r1]
 800415a:	4620      	mov	r0, r4
 800415c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004160:	2111      	movs	r1, #17
 8004162:	f000 fd07 	bl	8004b74 <d_print_mod>
 8004166:	f7ff b9b2 	b.w	80034ce <d_print_comp_inner+0xaae>
 800416a:	68ff      	ldr	r7, [r7, #12]
 800416c:	4652      	mov	r2, sl
 800416e:	2f00      	cmp	r7, #0
 8004170:	f000 84ae 	beq.w	8004ad0 <d_print_comp_inner+0x20b0>
 8004174:	2d04      	cmp	r5, #4
 8004176:	f103 0310 	add.w	r3, r3, #16
 800417a:	f000 81f1 	beq.w	8004560 <d_print_comp_inner+0x1b40>
 800417e:	4629      	mov	r1, r5
 8004180:	f7ff b95c 	b.w	800343c <d_print_comp_inner+0xa1c>
 8004184:	f1b8 0f00 	cmp.w	r8, #0
 8004188:	f43e acba 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 800418c:	46c1      	mov	r9, r8
 800418e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004192:	f7fe be7c 	b.w	8002e8e <d_print_comp_inner+0x46e>
 8004196:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 800419a:	68c2      	ldr	r2, [r0, #12]
 800419c:	4606      	mov	r6, r0
 800419e:	f7fe bd2a 	b.w	8002bf6 <d_print_comp_inner+0x1d6>
 80041a2:	2d07      	cmp	r5, #7
 80041a4:	f47e ad83 	bne.w	8002cae <d_print_comp_inner+0x28e>
 80041a8:	6933      	ldr	r3, [r6, #16]
 80041aa:	7819      	ldrb	r1, [r3, #0]
 80041ac:	2900      	cmp	r1, #0
 80041ae:	f47e ad7e 	bne.w	8002cae <d_print_comp_inner+0x28e>
 80041b2:	6919      	ldr	r1, [r3, #16]
 80041b4:	2901      	cmp	r1, #1
 80041b6:	f47e ad7a 	bne.w	8002cae <d_print_comp_inner+0x28e>
 80041ba:	2f3d      	cmp	r7, #61	; 0x3d
 80041bc:	f47e ad77 	bne.w	8002cae <d_print_comp_inner+0x28e>
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b30      	cmp	r3, #48	; 0x30
 80041c6:	f000 849f 	beq.w	8004b08 <d_print_comp_inner+0x20e8>
 80041ca:	2b31      	cmp	r3, #49	; 0x31
 80041cc:	f47e ad6f 	bne.w	8002cae <d_print_comp_inner+0x28e>
 80041d0:	492f      	ldr	r1, [pc, #188]	; (8004290 <d_print_comp_inner+0x1870>)
 80041d2:	f7ff b884 	b.w	80032de <d_print_comp_inner+0x8be>
 80041d6:	4e2f      	ldr	r6, [pc, #188]	; (8004294 <d_print_comp_inner+0x1874>)
 80041d8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80041dc:	1d77      	adds	r7, r6, #5
 80041de:	255f      	movs	r5, #95	; 0x5f
 80041e0:	e00b      	b.n	80041fa <d_print_comp_inner+0x17da>
 80041e2:	460b      	mov	r3, r1
 80041e4:	3101      	adds	r1, #1
 80041e6:	42b7      	cmp	r7, r6
 80041e8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80041ec:	54e5      	strb	r5, [r4, r3]
 80041ee:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80041f2:	f43e ac85 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 80041f6:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 80041fa:	29ff      	cmp	r1, #255	; 0xff
 80041fc:	d1f1      	bne.n	80041e2 <d_print_comp_inner+0x17c2>
 80041fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004202:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004206:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800420a:	4620      	mov	r0, r4
 800420c:	4798      	blx	r3
 800420e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004212:	3301      	adds	r3, #1
 8004214:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004218:	2101      	movs	r1, #1
 800421a:	2300      	movs	r3, #0
 800421c:	e7e3      	b.n	80041e6 <d_print_comp_inner+0x17c6>
 800421e:	491e      	ldr	r1, [pc, #120]	; (8004298 <d_print_comp_inner+0x1878>)
 8004220:	f7fc fa4c 	bl	80006bc <d_append_string>
 8004224:	4918      	ldr	r1, [pc, #96]	; (8004288 <d_print_comp_inner+0x1868>)
 8004226:	462a      	mov	r2, r5
 8004228:	a804      	add	r0, sp, #16
 800422a:	f017 fb03 	bl	801b834 <siprintf>
 800422e:	a804      	add	r0, sp, #16
 8004230:	f002 f806 	bl	8006240 <strlen>
 8004234:	b390      	cbz	r0, 800429c <d_print_comp_inner+0x187c>
 8004236:	ad04      	add	r5, sp, #16
 8004238:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800423c:	182f      	adds	r7, r5, r0
 800423e:	f04f 0800 	mov.w	r8, #0
 8004242:	e008      	b.n	8004256 <d_print_comp_inner+0x1836>
 8004244:	460b      	mov	r3, r1
 8004246:	3101      	adds	r1, #1
 8004248:	42bd      	cmp	r5, r7
 800424a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800424e:	54e6      	strb	r6, [r4, r3]
 8004250:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004254:	d024      	beq.n	80042a0 <d_print_comp_inner+0x1880>
 8004256:	29ff      	cmp	r1, #255	; 0xff
 8004258:	f815 6b01 	ldrb.w	r6, [r5], #1
 800425c:	d1f2      	bne.n	8004244 <d_print_comp_inner+0x1824>
 800425e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004262:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004266:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800426a:	4620      	mov	r0, r4
 800426c:	4798      	blx	r3
 800426e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004272:	3301      	adds	r3, #1
 8004274:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004278:	2101      	movs	r1, #1
 800427a:	2300      	movs	r3, #0
 800427c:	e7e4      	b.n	8004248 <d_print_comp_inner+0x1828>
 800427e:	bf00      	nop
 8004280:	08023fc4 	.word	0x08023fc4
 8004284:	080240fc 	.word	0x080240fc
 8004288:	08023e1c 	.word	0x08023e1c
 800428c:	08023f00 	.word	0x08023f00
 8004290:	08024078 	.word	0x08024078
 8004294:	08024024 	.word	0x08024024
 8004298:	080240a8 	.word	0x080240a8
 800429c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80042a0:	29ff      	cmp	r1, #255	; 0xff
 80042a2:	f000 82f5 	beq.w	8004890 <d_print_comp_inner+0x1e70>
 80042a6:	237d      	movs	r3, #125	; 0x7d
 80042a8:	1c4a      	adds	r2, r1, #1
 80042aa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80042ae:	5463      	strb	r3, [r4, r1]
 80042b0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80042b4:	f7fe bc24 	b.w	8002b00 <d_print_comp_inner+0xe0>
 80042b8:	4610      	mov	r0, r2
 80042ba:	2500      	movs	r5, #0
 80042bc:	f7fe bc90 	b.w	8002be0 <d_print_comp_inner+0x1c0>
 80042c0:	68f2      	ldr	r2, [r6, #12]
 80042c2:	49c2      	ldr	r1, [pc, #776]	; (80045cc <d_print_comp_inner+0x1bac>)
 80042c4:	3201      	adds	r2, #1
 80042c6:	a804      	add	r0, sp, #16
 80042c8:	f017 fab4 	bl	801b834 <siprintf>
 80042cc:	a804      	add	r0, sp, #16
 80042ce:	f001 ffb7 	bl	8006240 <strlen>
 80042d2:	2800      	cmp	r0, #0
 80042d4:	f43e ac14 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 80042d8:	ad04      	add	r5, sp, #16
 80042da:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80042de:	182f      	adds	r7, r5, r0
 80042e0:	f04f 0800 	mov.w	r8, #0
 80042e4:	e009      	b.n	80042fa <d_print_comp_inner+0x18da>
 80042e6:	460b      	mov	r3, r1
 80042e8:	3101      	adds	r1, #1
 80042ea:	42bd      	cmp	r5, r7
 80042ec:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80042f0:	54e6      	strb	r6, [r4, r3]
 80042f2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80042f6:	f43e ac03 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 80042fa:	29ff      	cmp	r1, #255	; 0xff
 80042fc:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004300:	d1f1      	bne.n	80042e6 <d_print_comp_inner+0x18c6>
 8004302:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004306:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800430a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800430e:	4620      	mov	r0, r4
 8004310:	4798      	blx	r3
 8004312:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004316:	3301      	adds	r3, #1
 8004318:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800431c:	2101      	movs	r1, #1
 800431e:	2300      	movs	r3, #0
 8004320:	e7e3      	b.n	80042ea <d_print_comp_inner+0x18ca>
 8004322:	4611      	mov	r1, r2
 8004324:	f7fc f964 	bl	80005f0 <d_lookup_template_argument>
 8004328:	4602      	mov	r2, r0
 800432a:	2800      	cmp	r0, #0
 800432c:	f43e abe5 	beq.w	8002afa <d_print_comp_inner+0xda>
 8004330:	7803      	ldrb	r3, [r0, #0]
 8004332:	2b2f      	cmp	r3, #47	; 0x2f
 8004334:	f43e abd6 	beq.w	8002ae4 <d_print_comp_inner+0xc4>
 8004338:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 800433c:	682b      	ldr	r3, [r5, #0]
 800433e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004342:	2111      	movs	r1, #17
 8004344:	4620      	mov	r0, r4
 8004346:	f000 fbe7 	bl	8004b18 <d_print_comp>
 800434a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 800434e:	f7fe bbd7 	b.w	8002b00 <d_print_comp_inner+0xe0>
 8004352:	2500      	movs	r5, #0
 8004354:	f7fe bcab 	b.w	8002cae <d_print_comp_inner+0x28e>
 8004358:	2500      	movs	r5, #0
 800435a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800435e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004362:	4620      	mov	r0, r4
 8004364:	4798      	blx	r3
 8004366:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800436a:	2201      	movs	r2, #1
 800436c:	4413      	add	r3, r2
 800436e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004372:	4629      	mov	r1, r5
 8004374:	e558      	b.n	8003e28 <d_print_comp_inner+0x1408>
 8004376:	2500      	movs	r5, #0
 8004378:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800437c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004380:	4620      	mov	r0, r4
 8004382:	4798      	blx	r3
 8004384:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004388:	2201      	movs	r2, #1
 800438a:	4413      	add	r3, r2
 800438c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004390:	4629      	mov	r1, r5
 8004392:	f7fe bfc5 	b.w	8003320 <d_print_comp_inner+0x900>
 8004396:	2b01      	cmp	r3, #1
 8004398:	f63f a885 	bhi.w	80034a6 <d_print_comp_inner+0xa86>
 800439c:	2d04      	cmp	r5, #4
 800439e:	f43e abac 	beq.w	8002afa <d_print_comp_inner+0xda>
 80043a2:	468e      	mov	lr, r1
 80043a4:	f101 0b10 	add.w	fp, r1, #16
 80043a8:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 80043aa:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
 80043ae:	e9ce 7a01 	strd	r7, sl, [lr, #4]
 80043b2:	68ff      	ldr	r7, [r7, #12]
 80043b4:	f8ce e010 	str.w	lr, [lr, #16]
 80043b8:	3501      	adds	r5, #1
 80043ba:	f8ce c00c 	str.w	ip, [lr, #12]
 80043be:	4659      	mov	r1, fp
 80043c0:	f8c4 b114 	str.w	fp, [r4, #276]	; 0x114
 80043c4:	2f00      	cmp	r7, #0
 80043c6:	f43e ab98 	beq.w	8002afa <d_print_comp_inner+0xda>
 80043ca:	783a      	ldrb	r2, [r7, #0]
 80043cc:	f7ff b858 	b.w	8003480 <d_print_comp_inner+0xa60>
 80043d0:	68d2      	ldr	r2, [r2, #12]
 80043d2:	2111      	movs	r1, #17
 80043d4:	4620      	mov	r0, r4
 80043d6:	f000 fb9f 	bl	8004b18 <d_print_comp>
 80043da:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 80043de:	b113      	cbz	r3, 80043e6 <d_print_comp_inner+0x19c6>
 80043e0:	9b04      	ldr	r3, [sp, #16]
 80043e2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80043e6:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 80043ea:	2b3c      	cmp	r3, #60	; 0x3c
 80043ec:	f000 82c0 	beq.w	8004970 <d_print_comp_inner+0x1f50>
 80043f0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80043f4:	29ff      	cmp	r1, #255	; 0xff
 80043f6:	f000 82ab 	beq.w	8004950 <d_print_comp_inner+0x1f30>
 80043fa:	1c4a      	adds	r2, r1, #1
 80043fc:	233c      	movs	r3, #60	; 0x3c
 80043fe:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004402:	5463      	strb	r3, [r4, r1]
 8004404:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004408:	68f3      	ldr	r3, [r6, #12]
 800440a:	2111      	movs	r1, #17
 800440c:	691a      	ldr	r2, [r3, #16]
 800440e:	4620      	mov	r0, r4
 8004410:	f000 fb82 	bl	8004b18 <d_print_comp>
 8004414:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8004418:	2b3e      	cmp	r3, #62	; 0x3e
 800441a:	f000 8294 	beq.w	8004946 <d_print_comp_inner+0x1f26>
 800441e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004422:	29ff      	cmp	r1, #255	; 0xff
 8004424:	f000 8281 	beq.w	800492a <d_print_comp_inner+0x1f0a>
 8004428:	233e      	movs	r3, #62	; 0x3e
 800442a:	1c4a      	adds	r2, r1, #1
 800442c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004430:	5463      	strb	r3, [r4, r1]
 8004432:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004436:	f7fe bb63 	b.w	8002b00 <d_print_comp_inner+0xe0>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681e      	ldr	r6, [r3, #0]
 800443e:	7833      	ldrb	r3, [r6, #0]
 8004440:	2b61      	cmp	r3, #97	; 0x61
 8004442:	f040 8092 	bne.w	800456a <d_print_comp_inner+0x1b4a>
 8004446:	7872      	ldrb	r2, [r6, #1]
 8004448:	2a64      	cmp	r2, #100	; 0x64
 800444a:	f040 808e 	bne.w	800456a <d_print_comp_inner+0x1b4a>
 800444e:	78b2      	ldrb	r2, [r6, #2]
 8004450:	2a00      	cmp	r2, #0
 8004452:	f040 808a 	bne.w	800456a <d_print_comp_inner+0x1b4a>
 8004456:	782a      	ldrb	r2, [r5, #0]
 8004458:	2a03      	cmp	r2, #3
 800445a:	f000 828e 	beq.w	800497a <d_print_comp_inner+0x1f5a>
 800445e:	2a39      	cmp	r2, #57	; 0x39
 8004460:	f000 8296 	beq.w	8004990 <d_print_comp_inner+0x1f70>
 8004464:	2b73      	cmp	r3, #115	; 0x73
 8004466:	d111      	bne.n	800448c <d_print_comp_inner+0x1a6c>
 8004468:	7872      	ldrb	r2, [r6, #1]
 800446a:	2a5a      	cmp	r2, #90	; 0x5a
 800446c:	d135      	bne.n	80044da <d_print_comp_inner+0x1aba>
 800446e:	78b2      	ldrb	r2, [r6, #2]
 8004470:	bb9a      	cbnz	r2, 80044da <d_print_comp_inner+0x1aba>
 8004472:	4629      	mov	r1, r5
 8004474:	4620      	mov	r0, r4
 8004476:	f7fc f8d7 	bl	8000628 <d_find_pack>
 800447a:	f7fc f803 	bl	8000484 <d_pack_length>
 800447e:	4601      	mov	r1, r0
 8004480:	4620      	mov	r0, r4
 8004482:	b015      	add	sp, #84	; 0x54
 8004484:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004488:	f7fc b97c 	b.w	8000784 <d_append_num>
 800448c:	463a      	mov	r2, r7
 800448e:	2111      	movs	r1, #17
 8004490:	4620      	mov	r0, r4
 8004492:	f001 f97b 	bl	800578c <d_print_expr_op>
 8004496:	7833      	ldrb	r3, [r6, #0]
 8004498:	2b67      	cmp	r3, #103	; 0x67
 800449a:	d107      	bne.n	80044ac <d_print_comp_inner+0x1a8c>
 800449c:	7872      	ldrb	r2, [r6, #1]
 800449e:	2a73      	cmp	r2, #115	; 0x73
 80044a0:	d104      	bne.n	80044ac <d_print_comp_inner+0x1a8c>
 80044a2:	78b2      	ldrb	r2, [r6, #2]
 80044a4:	b912      	cbnz	r2, 80044ac <d_print_comp_inner+0x1a8c>
 80044a6:	462a      	mov	r2, r5
 80044a8:	f7fe bb4e 	b.w	8002b48 <d_print_comp_inner+0x128>
 80044ac:	2b73      	cmp	r3, #115	; 0x73
 80044ae:	f47f a922 	bne.w	80036f6 <d_print_comp_inner+0xcd6>
 80044b2:	7873      	ldrb	r3, [r6, #1]
 80044b4:	2b74      	cmp	r3, #116	; 0x74
 80044b6:	f47f a91e 	bne.w	80036f6 <d_print_comp_inner+0xcd6>
 80044ba:	78b3      	ldrb	r3, [r6, #2]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f47f a91a 	bne.w	80036f6 <d_print_comp_inner+0xcd6>
 80044c2:	2128      	movs	r1, #40	; 0x28
 80044c4:	4620      	mov	r0, r4
 80044c6:	f7fc f871 	bl	80005ac <d_append_char>
 80044ca:	2111      	movs	r1, #17
 80044cc:	462a      	mov	r2, r5
 80044ce:	4620      	mov	r0, r4
 80044d0:	f000 fb22 	bl	8004b18 <d_print_comp>
 80044d4:	2129      	movs	r1, #41	; 0x29
 80044d6:	f7fe bc17 	b.w	8002d08 <d_print_comp_inner+0x2e8>
 80044da:	2b73      	cmp	r3, #115	; 0x73
 80044dc:	d1d6      	bne.n	800448c <d_print_comp_inner+0x1a6c>
 80044de:	7873      	ldrb	r3, [r6, #1]
 80044e0:	2b50      	cmp	r3, #80	; 0x50
 80044e2:	d1d3      	bne.n	800448c <d_print_comp_inner+0x1a6c>
 80044e4:	78b3      	ldrb	r3, [r6, #2]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1d0      	bne.n	800448c <d_print_comp_inner+0x1a6c>
 80044ea:	461e      	mov	r6, r3
 80044ec:	e004      	b.n	80044f8 <d_print_comp_inner+0x1ad8>
 80044ee:	3601      	adds	r6, #1
 80044f0:	692d      	ldr	r5, [r5, #16]
 80044f2:	2d00      	cmp	r5, #0
 80044f4:	f000 819c 	beq.w	8004830 <d_print_comp_inner+0x1e10>
 80044f8:	782b      	ldrb	r3, [r5, #0]
 80044fa:	2b2f      	cmp	r3, #47	; 0x2f
 80044fc:	f040 8198 	bne.w	8004830 <d_print_comp_inner+0x1e10>
 8004500:	68eb      	ldr	r3, [r5, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 8194 	beq.w	8004830 <d_print_comp_inner+0x1e10>
 8004508:	781a      	ldrb	r2, [r3, #0]
 800450a:	2a4c      	cmp	r2, #76	; 0x4c
 800450c:	d1ef      	bne.n	80044ee <d_print_comp_inner+0x1ace>
 800450e:	68d9      	ldr	r1, [r3, #12]
 8004510:	4620      	mov	r0, r4
 8004512:	f7fc f889 	bl	8000628 <d_find_pack>
 8004516:	4603      	mov	r3, r0
 8004518:	b148      	cbz	r0, 800452e <d_print_comp_inner+0x1b0e>
 800451a:	2300      	movs	r3, #0
 800451c:	e004      	b.n	8004528 <d_print_comp_inner+0x1b08>
 800451e:	68c2      	ldr	r2, [r0, #12]
 8004520:	b12a      	cbz	r2, 800452e <d_print_comp_inner+0x1b0e>
 8004522:	6900      	ldr	r0, [r0, #16]
 8004524:	3301      	adds	r3, #1
 8004526:	b110      	cbz	r0, 800452e <d_print_comp_inner+0x1b0e>
 8004528:	7802      	ldrb	r2, [r0, #0]
 800452a:	2a2f      	cmp	r2, #47	; 0x2f
 800452c:	d0f7      	beq.n	800451e <d_print_comp_inner+0x1afe>
 800452e:	441e      	add	r6, r3
 8004530:	e7de      	b.n	80044f0 <d_print_comp_inner+0x1ad0>
 8004532:	29ff      	cmp	r1, #255	; 0xff
 8004534:	f000 81d3 	beq.w	80048de <d_print_comp_inner+0x1ebe>
 8004538:	1c4b      	adds	r3, r1, #1
 800453a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800453e:	2320      	movs	r3, #32
 8004540:	5463      	strb	r3, [r4, r1]
 8004542:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004546:	e4c7      	b.n	8003ed8 <d_print_comp_inner+0x14b8>
 8004548:	4632      	mov	r2, r6
 800454a:	2111      	movs	r1, #17
 800454c:	4620      	mov	r0, r4
 800454e:	f000 fb11 	bl	8004b74 <d_print_mod>
 8004552:	f7fe bb36 	b.w	8002bc2 <d_print_comp_inner+0x1a2>
 8004556:	491e      	ldr	r1, [pc, #120]	; (80045d0 <d_print_comp_inner+0x1bb0>)
 8004558:	f7fc f8b0 	bl	80006bc <d_append_string>
 800455c:	f7ff b8e0 	b.w	8003720 <d_print_comp_inner+0xd00>
 8004560:	2301      	movs	r3, #1
 8004562:	e9c4 a345 	strd	sl, r3, [r4, #276]	; 0x114
 8004566:	f7fe bacb 	b.w	8002b00 <d_print_comp_inner+0xe0>
 800456a:	782a      	ldrb	r2, [r5, #0]
 800456c:	e777      	b.n	800445e <d_print_comp_inner+0x1a3e>
 800456e:	68f2      	ldr	r2, [r6, #12]
 8004570:	460d      	mov	r5, r1
 8004572:	f7fe bb40 	b.w	8002bf6 <d_print_comp_inner+0x1d6>
 8004576:	2700      	movs	r7, #0
 8004578:	5567      	strb	r7, [r4, r5]
 800457a:	4629      	mov	r1, r5
 800457c:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8004580:	4620      	mov	r0, r4
 8004582:	4798      	blx	r3
 8004584:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004588:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 800458c:	3301      	adds	r3, #1
 800458e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004592:	463d      	mov	r5, r7
 8004594:	f7fe bb48 	b.w	8002c28 <d_print_comp_inner+0x208>
 8004598:	2600      	movs	r6, #0
 800459a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800459e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80045a2:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80045a6:	4620      	mov	r0, r4
 80045a8:	4798      	blx	r3
 80045aa:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80045ae:	2201      	movs	r2, #1
 80045b0:	4413      	add	r3, r2
 80045b2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80045b6:	4631      	mov	r1, r6
 80045b8:	f7fe bd82 	b.w	80030c0 <d_print_comp_inner+0x6a0>
 80045bc:	4905      	ldr	r1, [pc, #20]	; (80045d4 <d_print_comp_inner+0x1bb4>)
 80045be:	4620      	mov	r0, r4
 80045c0:	f7fc f87c 	bl	80006bc <d_append_string>
 80045c4:	68ff      	ldr	r7, [r7, #12]
 80045c6:	463a      	mov	r2, r7
 80045c8:	f7fe babe 	b.w	8002b48 <d_print_comp_inner+0x128>
 80045cc:	08023e1c 	.word	0x08023e1c
 80045d0:	08024014 	.word	0x08024014
 80045d4:	08023ea0 	.word	0x08023ea0
 80045d8:	2500      	movs	r5, #0
 80045da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80045de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80045e2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80045e6:	4620      	mov	r0, r4
 80045e8:	4798      	blx	r3
 80045ea:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80045ee:	2201      	movs	r2, #1
 80045f0:	4413      	add	r3, r2
 80045f2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80045f6:	4629      	mov	r1, r5
 80045f8:	f7fe be81 	b.w	80032fe <d_print_comp_inner+0x8de>
 80045fc:	2600      	movs	r6, #0
 80045fe:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8004602:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8004606:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 800460a:	4798      	blx	r3
 800460c:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 8004610:	2301      	movs	r3, #1
 8004612:	441a      	add	r2, r3
 8004614:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8004618:	4631      	mov	r1, r6
 800461a:	f7fe bed2 	b.w	80033c2 <d_print_comp_inner+0x9a2>
 800461e:	2500      	movs	r5, #0
 8004620:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8004624:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8004628:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 800462c:	4798      	blx	r3
 800462e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004632:	2201      	movs	r2, #1
 8004634:	4413      	add	r3, r2
 8004636:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800463a:	4629      	mov	r1, r5
 800463c:	f7fe ba91 	b.w	8002b62 <d_print_comp_inner+0x142>
 8004640:	2500      	movs	r5, #0
 8004642:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8004646:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800464a:	4620      	mov	r0, r4
 800464c:	4798      	blx	r3
 800464e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004652:	3301      	adds	r3, #1
 8004654:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004658:	4629      	mov	r1, r5
 800465a:	2301      	movs	r3, #1
 800465c:	f7ff bab6 	b.w	8003bcc <d_print_comp_inner+0x11ac>
 8004660:	2120      	movs	r1, #32
 8004662:	4620      	mov	r0, r4
 8004664:	f7fb ffa2 	bl	80005ac <d_append_char>
 8004668:	f7ff baaa 	b.w	8003bc0 <d_print_comp_inner+0x11a0>
 800466c:	2500      	movs	r5, #0
 800466e:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8004672:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004676:	4620      	mov	r0, r4
 8004678:	4798      	blx	r3
 800467a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800467e:	3301      	adds	r3, #1
 8004680:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004684:	4629      	mov	r1, r5
 8004686:	2301      	movs	r3, #1
 8004688:	f7ff ba8a 	b.w	8003ba0 <d_print_comp_inner+0x1180>
 800468c:	2120      	movs	r1, #32
 800468e:	4620      	mov	r0, r4
 8004690:	f7fb ff8c 	bl	80005ac <d_append_char>
 8004694:	f7ff ba7e 	b.w	8003b94 <d_print_comp_inner+0x1174>
 8004698:	2700      	movs	r7, #0
 800469a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800469e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80046a2:	4620      	mov	r0, r4
 80046a4:	4798      	blx	r3
 80046a6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80046aa:	68f2      	ldr	r2, [r6, #12]
 80046ac:	3301      	adds	r3, #1
 80046ae:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80046b2:	4639      	mov	r1, r7
 80046b4:	2301      	movs	r3, #1
 80046b6:	f7fe bb00 	b.w	8002cba <d_print_comp_inner+0x29a>
 80046ba:	212d      	movs	r1, #45	; 0x2d
 80046bc:	4620      	mov	r0, r4
 80046be:	f7fb ff75 	bl	80005ac <d_append_char>
 80046c2:	f7fe bb14 	b.w	8002cee <d_print_comp_inner+0x2ce>
 80046c6:	2700      	movs	r7, #0
 80046c8:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 80046cc:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80046d0:	4620      	mov	r0, r4
 80046d2:	4798      	blx	r3
 80046d4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80046d8:	3301      	adds	r3, #1
 80046da:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80046de:	4639      	mov	r1, r7
 80046e0:	2301      	movs	r3, #1
 80046e2:	f7fe bafa 	b.w	8002cda <d_print_comp_inner+0x2ba>
 80046e6:	6933      	ldr	r3, [r6, #16]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f47e aadf 	bne.w	8002cae <d_print_comp_inner+0x28e>
 80046f0:	2f3e      	cmp	r7, #62	; 0x3e
 80046f2:	f000 81f8 	beq.w	8004ae6 <d_print_comp_inner+0x20c6>
 80046f6:	6932      	ldr	r2, [r6, #16]
 80046f8:	2111      	movs	r1, #17
 80046fa:	4620      	mov	r0, r4
 80046fc:	3d02      	subs	r5, #2
 80046fe:	f000 fa0b 	bl	8004b18 <d_print_comp>
 8004702:	2d04      	cmp	r5, #4
 8004704:	f63e a9fc 	bhi.w	8002b00 <d_print_comp_inner+0xe0>
 8004708:	e8df f005 	tbb	[pc, r5]
 800470c:	06090c0f 	.word	0x06090c0f
 8004710:	03          	.byte	0x03
 8004711:	00          	.byte	0x00
 8004712:	49c9      	ldr	r1, [pc, #804]	; (8004a38 <d_print_comp_inner+0x2018>)
 8004714:	f7fe bde3 	b.w	80032de <d_print_comp_inner+0x8be>
 8004718:	49c8      	ldr	r1, [pc, #800]	; (8004a3c <d_print_comp_inner+0x201c>)
 800471a:	f7fe bde0 	b.w	80032de <d_print_comp_inner+0x8be>
 800471e:	49c8      	ldr	r1, [pc, #800]	; (8004a40 <d_print_comp_inner+0x2020>)
 8004720:	f7fe bddd 	b.w	80032de <d_print_comp_inner+0x8be>
 8004724:	216c      	movs	r1, #108	; 0x6c
 8004726:	f7fe baef 	b.w	8002d08 <d_print_comp_inner+0x2e8>
 800472a:	2175      	movs	r1, #117	; 0x75
 800472c:	f7fe baec 	b.w	8002d08 <d_print_comp_inner+0x2e8>
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b73      	cmp	r3, #115	; 0x73
 8004734:	d00c      	beq.n	8004750 <d_print_comp_inner+0x1d30>
 8004736:	3b63      	subs	r3, #99	; 0x63
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b0f      	cmp	r3, #15
 800473c:	f63e af77 	bhi.w	800362e <d_print_comp_inner+0xc0e>
 8004740:	49c0      	ldr	r1, [pc, #768]	; (8004a44 <d_print_comp_inner+0x2024>)
 8004742:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004746:	f8d3 37fc 	ldr.w	r3, [r3, #2044]	; 0x7fc
 800474a:	2b00      	cmp	r3, #0
 800474c:	f43e af6f 	beq.w	800362e <d_print_comp_inner+0xc0e>
 8004750:	2111      	movs	r1, #17
 8004752:	4620      	mov	r0, r4
 8004754:	f001 f81a 	bl	800578c <d_print_expr_op>
 8004758:	213c      	movs	r1, #60	; 0x3c
 800475a:	4620      	mov	r0, r4
 800475c:	f7fb ff26 	bl	80005ac <d_append_char>
 8004760:	6933      	ldr	r3, [r6, #16]
 8004762:	2111      	movs	r1, #17
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	4620      	mov	r0, r4
 8004768:	f000 f9d6 	bl	8004b18 <d_print_comp>
 800476c:	49b6      	ldr	r1, [pc, #728]	; (8004a48 <d_print_comp_inner+0x2028>)
 800476e:	4620      	mov	r0, r4
 8004770:	f7fb ffa4 	bl	80006bc <d_append_string>
 8004774:	6933      	ldr	r3, [r6, #16]
 8004776:	2111      	movs	r1, #17
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	4620      	mov	r0, r4
 800477c:	f000 f9cc 	bl	8004b18 <d_print_comp>
 8004780:	2129      	movs	r1, #41	; 0x29
 8004782:	f7fe bac1 	b.w	8002d08 <d_print_comp_inner+0x2e8>
 8004786:	f8d0 c134 	ldr.w	ip, [r0, #308]	; 0x134
 800478a:	f1bc 0f00 	cmp.w	ip, #0
 800478e:	f340 8107 	ble.w	80049a0 <d_print_comp_inner+0x1f80>
 8004792:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
 8004796:	462b      	mov	r3, r5
 8004798:	4670      	mov	r0, lr
 800479a:	e004      	b.n	80047a6 <d_print_comp_inner+0x1d86>
 800479c:	4563      	cmp	r3, ip
 800479e:	f100 0008 	add.w	r0, r0, #8
 80047a2:	f000 80fd 	beq.w	80049a0 <d_print_comp_inner+0x1f80>
 80047a6:	f85e 1033 	ldr.w	r1, [lr, r3, lsl #3]
 80047aa:	428a      	cmp	r2, r1
 80047ac:	f103 0301 	add.w	r3, r3, #1
 80047b0:	d1f4      	bne.n	800479c <d_print_comp_inner+0x1d7c>
 80047b2:	f8d4 c12c 	ldr.w	ip, [r4, #300]	; 0x12c
 80047b6:	4663      	mov	r3, ip
 80047b8:	f1bc 0f00 	cmp.w	ip, #0
 80047bc:	d104      	bne.n	80047c8 <d_print_comp_inner+0x1da8>
 80047be:	e09d      	b.n	80048fc <d_print_comp_inner+0x1edc>
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 809a 	beq.w	80048fc <d_print_comp_inner+0x1edc>
 80047c8:	6819      	ldr	r1, [r3, #0]
 80047ca:	4291      	cmp	r1, r2
 80047cc:	d003      	beq.n	80047d6 <d_print_comp_inner+0x1db6>
 80047ce:	42b1      	cmp	r1, r6
 80047d0:	d1f6      	bne.n	80047c0 <d_print_comp_inner+0x1da0>
 80047d2:	459c      	cmp	ip, r3
 80047d4:	d0f4      	beq.n	80047c0 <d_print_comp_inner+0x1da0>
 80047d6:	4611      	mov	r1, r2
 80047d8:	4620      	mov	r0, r4
 80047da:	9201      	str	r2, [sp, #4]
 80047dc:	f7fb ff08 	bl	80005f0 <d_lookup_template_argument>
 80047e0:	9a01      	ldr	r2, [sp, #4]
 80047e2:	2800      	cmp	r0, #0
 80047e4:	f43e a989 	beq.w	8002afa <d_print_comp_inner+0xda>
 80047e8:	7803      	ldrb	r3, [r0, #0]
 80047ea:	2b2f      	cmp	r3, #47	; 0x2f
 80047ec:	f47e a9f8 	bne.w	8002be0 <d_print_comp_inner+0x1c0>
 80047f0:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
 80047f4:	2900      	cmp	r1, #0
 80047f6:	f6fe a9fc 	blt.w	8002bf2 <d_print_comp_inner+0x1d2>
 80047fa:	f7fb fe75 	bl	80004e8 <d_index_template_argument.part.0>
 80047fe:	2800      	cmp	r0, #0
 8004800:	f000 816a 	beq.w	8004ad8 <d_print_comp_inner+0x20b8>
 8004804:	7803      	ldrb	r3, [r0, #0]
 8004806:	f7fe b9eb 	b.w	8002be0 <d_print_comp_inner+0x1c0>
 800480a:	68c2      	ldr	r2, [r0, #12]
 800480c:	f7fe b97c 	b.w	8002b08 <d_print_comp_inner+0xe8>
 8004810:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004814:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004818:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800481c:	4620      	mov	r0, r4
 800481e:	4798      	blx	r3
 8004820:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004824:	3301      	adds	r3, #1
 8004826:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800482a:	4631      	mov	r1, r6
 800482c:	2301      	movs	r3, #1
 800482e:	e48f      	b.n	8004150 <d_print_comp_inner+0x1730>
 8004830:	4986      	ldr	r1, [pc, #536]	; (8004a4c <d_print_comp_inner+0x202c>)
 8004832:	4632      	mov	r2, r6
 8004834:	a804      	add	r0, sp, #16
 8004836:	f016 fffd 	bl	801b834 <siprintf>
 800483a:	a804      	add	r0, sp, #16
 800483c:	f001 fd00 	bl	8006240 <strlen>
 8004840:	2800      	cmp	r0, #0
 8004842:	f43e a95d 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 8004846:	ad04      	add	r5, sp, #16
 8004848:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800484c:	182f      	adds	r7, r5, r0
 800484e:	f04f 0800 	mov.w	r8, #0
 8004852:	e009      	b.n	8004868 <d_print_comp_inner+0x1e48>
 8004854:	460b      	mov	r3, r1
 8004856:	3101      	adds	r1, #1
 8004858:	42af      	cmp	r7, r5
 800485a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800485e:	54e6      	strb	r6, [r4, r3]
 8004860:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004864:	f43e a94c 	beq.w	8002b00 <d_print_comp_inner+0xe0>
 8004868:	29ff      	cmp	r1, #255	; 0xff
 800486a:	f815 6b01 	ldrb.w	r6, [r5], #1
 800486e:	d1f1      	bne.n	8004854 <d_print_comp_inner+0x1e34>
 8004870:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004874:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004878:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800487c:	4620      	mov	r0, r4
 800487e:	4798      	blx	r3
 8004880:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004884:	3301      	adds	r3, #1
 8004886:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800488a:	2101      	movs	r1, #1
 800488c:	2300      	movs	r3, #0
 800488e:	e7e3      	b.n	8004858 <d_print_comp_inner+0x1e38>
 8004890:	2500      	movs	r5, #0
 8004892:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8004896:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800489a:	4620      	mov	r0, r4
 800489c:	4798      	blx	r3
 800489e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80048a2:	3301      	adds	r3, #1
 80048a4:	4629      	mov	r1, r5
 80048a6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80048aa:	e4fc      	b.n	80042a6 <d_print_comp_inner+0x1886>
 80048ac:	2111      	movs	r1, #17
 80048ae:	4620      	mov	r0, r4
 80048b0:	4652      	mov	r2, sl
 80048b2:	f001 f967 	bl	8005b84 <d_print_subexpr>
 80048b6:	4966      	ldr	r1, [pc, #408]	; (8004a50 <d_print_comp_inner+0x2030>)
 80048b8:	f7fe bd11 	b.w	80032de <d_print_comp_inner+0x8be>
 80048bc:	2500      	movs	r5, #0
 80048be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80048c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80048c6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80048ca:	4620      	mov	r0, r4
 80048cc:	4798      	blx	r3
 80048ce:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80048d2:	3301      	adds	r3, #1
 80048d4:	4629      	mov	r1, r5
 80048d6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80048da:	f7fe bf2f 	b.w	800373c <d_print_comp_inner+0xd1c>
 80048de:	2600      	movs	r6, #0
 80048e0:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 80048e4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80048e8:	4620      	mov	r0, r4
 80048ea:	4798      	blx	r3
 80048ec:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80048f0:	687d      	ldr	r5, [r7, #4]
 80048f2:	3301      	adds	r3, #1
 80048f4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80048f8:	4631      	mov	r1, r6
 80048fa:	e61d      	b.n	8004538 <d_print_comp_inner+0x1b18>
 80048fc:	6843      	ldr	r3, [r0, #4]
 80048fe:	f8d4 8110 	ldr.w	r8, [r4, #272]	; 0x110
 8004902:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004906:	4611      	mov	r1, r2
 8004908:	4620      	mov	r0, r4
 800490a:	9201      	str	r2, [sp, #4]
 800490c:	f7fb fe70 	bl	80005f0 <d_lookup_template_argument>
 8004910:	9a01      	ldr	r2, [sp, #4]
 8004912:	2800      	cmp	r0, #0
 8004914:	f000 80e3 	beq.w	8004ade <d_print_comp_inner+0x20be>
 8004918:	2501      	movs	r5, #1
 800491a:	e765      	b.n	80047e8 <d_print_comp_inner+0x1dc8>
 800491c:	68ff      	ldr	r7, [r7, #12]
 800491e:	2f00      	cmp	r7, #0
 8004920:	f43e a8eb 	beq.w	8002afa <d_print_comp_inner+0xda>
 8004924:	783a      	ldrb	r2, [r7, #0]
 8004926:	f7fe bda7 	b.w	8003478 <d_print_comp_inner+0xa58>
 800492a:	2500      	movs	r5, #0
 800492c:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8004930:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004934:	4620      	mov	r0, r4
 8004936:	4798      	blx	r3
 8004938:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800493c:	3301      	adds	r3, #1
 800493e:	4629      	mov	r1, r5
 8004940:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004944:	e570      	b.n	8004428 <d_print_comp_inner+0x1a08>
 8004946:	2120      	movs	r1, #32
 8004948:	4620      	mov	r0, r4
 800494a:	f7fb fe2f 	bl	80005ac <d_append_char>
 800494e:	e566      	b.n	800441e <d_print_comp_inner+0x19fe>
 8004950:	2500      	movs	r5, #0
 8004952:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004956:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800495a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800495e:	4620      	mov	r0, r4
 8004960:	4798      	blx	r3
 8004962:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004966:	3301      	adds	r3, #1
 8004968:	4629      	mov	r1, r5
 800496a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800496e:	e544      	b.n	80043fa <d_print_comp_inner+0x19da>
 8004970:	2120      	movs	r1, #32
 8004972:	4620      	mov	r0, r4
 8004974:	f7fb fe1a 	bl	80005ac <d_append_char>
 8004978:	e53a      	b.n	80043f0 <d_print_comp_inner+0x19d0>
 800497a:	68ea      	ldr	r2, [r5, #12]
 800497c:	7811      	ldrb	r1, [r2, #0]
 800497e:	2901      	cmp	r1, #1
 8004980:	f47f ad70 	bne.w	8004464 <d_print_comp_inner+0x1a44>
 8004984:	6929      	ldr	r1, [r5, #16]
 8004986:	7809      	ldrb	r1, [r1, #0]
 8004988:	2929      	cmp	r1, #41	; 0x29
 800498a:	bf08      	it	eq
 800498c:	4615      	moveq	r5, r2
 800498e:	e569      	b.n	8004464 <d_print_comp_inner+0x1a44>
 8004990:	68ea      	ldr	r2, [r5, #12]
 8004992:	2111      	movs	r1, #17
 8004994:	4620      	mov	r0, r4
 8004996:	f001 f8f5 	bl	8005b84 <d_print_subexpr>
 800499a:	463a      	mov	r2, r7
 800499c:	f7fe beb4 	b.w	8003708 <d_print_comp_inner+0xce8>
 80049a0:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 80049a4:	4563      	cmp	r3, ip
 80049a6:	f77e a8a8 	ble.w	8002afa <d_print_comp_inner+0xda>
 80049aa:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
 80049ae:	f8d4 e110 	ldr.w	lr, [r4, #272]	; 0x110
 80049b2:	eb01 03cc 	add.w	r3, r1, ip, lsl #3
 80049b6:	f10c 0001 	add.w	r0, ip, #1
 80049ba:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
 80049be:	3304      	adds	r3, #4
 80049c0:	f841 203c 	str.w	r2, [r1, ip, lsl #3]
 80049c4:	f1be 0f00 	cmp.w	lr, #0
 80049c8:	f000 8092 	beq.w	8004af0 <d_print_comp_inner+0x20d0>
 80049cc:	e9d4 0950 	ldrd	r0, r9, [r4, #320]	; 0x140
 80049d0:	4694      	mov	ip, r2
 80049d2:	e010      	b.n	80049f6 <d_print_comp_inner+0x1fd6>
 80049d4:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 80049d8:	f8de 2004 	ldr.w	r2, [lr, #4]
 80049dc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80049e0:	3001      	adds	r0, #1
 80049e2:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
 80049e6:	604a      	str	r2, [r1, #4]
 80049e8:	6019      	str	r1, [r3, #0]
 80049ea:	f8de e000 	ldr.w	lr, [lr]
 80049ee:	460b      	mov	r3, r1
 80049f0:	f1be 0f00 	cmp.w	lr, #0
 80049f4:	d07b      	beq.n	8004aee <d_print_comp_inner+0x20ce>
 80049f6:	4581      	cmp	r9, r0
 80049f8:	dcec      	bgt.n	80049d4 <d_print_comp_inner+0x1fb4>
 80049fa:	f7fe b87e 	b.w	8002afa <d_print_comp_inner+0xda>
 80049fe:	6912      	ldr	r2, [r2, #16]
 8004a00:	2111      	movs	r1, #17
 8004a02:	f000 f889 	bl	8004b18 <d_print_comp>
 8004a06:	9b06      	ldr	r3, [sp, #24]
 8004a08:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f43e af07 	beq.w	8003820 <d_print_comp_inner+0xe00>
 8004a12:	f7fe b875 	b.w	8002b00 <d_print_comp_inner+0xe0>
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	6891      	ldr	r1, [r2, #8]
 8004a1a:	2901      	cmp	r1, #1
 8004a1c:	f47e ae1c 	bne.w	8003658 <d_print_comp_inner+0xc38>
 8004a20:	6852      	ldr	r2, [r2, #4]
 8004a22:	7812      	ldrb	r2, [r2, #0]
 8004a24:	2a3e      	cmp	r2, #62	; 0x3e
 8004a26:	f47e ae17 	bne.w	8003658 <d_print_comp_inner+0xc38>
 8004a2a:	2128      	movs	r1, #40	; 0x28
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	f7fb fdbd 	bl	80005ac <d_append_char>
 8004a32:	68f3      	ldr	r3, [r6, #12]
 8004a34:	f7fe be10 	b.w	8003658 <d_print_comp_inner+0xc38>
 8004a38:	0802406c 	.word	0x0802406c
 8004a3c:	08024068 	.word	0x08024068
 8004a40:	08024064 	.word	0x08024064
 8004a44:	0801f2fc 	.word	0x0801f2fc
 8004a48:	08024048 	.word	0x08024048
 8004a4c:	08023e1c 	.word	0x08023e1c
 8004a50:	0802409c 	.word	0x0802409c
 8004a54:	4620      	mov	r0, r4
 8004a56:	215b      	movs	r1, #91	; 0x5b
 8004a58:	f7fb fda8 	bl	80005ac <d_append_char>
 8004a5c:	6933      	ldr	r3, [r6, #16]
 8004a5e:	4620      	mov	r0, r4
 8004a60:	691a      	ldr	r2, [r3, #16]
 8004a62:	2111      	movs	r1, #17
 8004a64:	f000 f858 	bl	8004b18 <d_print_comp>
 8004a68:	215d      	movs	r1, #93	; 0x5d
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	f7fb fd9e 	bl	80005ac <d_append_char>
 8004a70:	f7fe be1a 	b.w	80036a8 <d_print_comp_inner+0xc88>
 8004a74:	6913      	ldr	r3, [r2, #16]
 8004a76:	68d2      	ldr	r2, [r2, #12]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b29      	cmp	r3, #41	; 0x29
 8004a7c:	bf1c      	itt	ne
 8004a7e:	2301      	movne	r3, #1
 8004a80:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 8004a84:	2111      	movs	r1, #17
 8004a86:	4620      	mov	r0, r4
 8004a88:	f001 f87c 	bl	8005b84 <d_print_subexpr>
 8004a8c:	f7fe bdf5 	b.w	800367a <d_print_comp_inner+0xc5a>
 8004a90:	462a      	mov	r2, r5
 8004a92:	2111      	movs	r1, #17
 8004a94:	4620      	mov	r0, r4
 8004a96:	f000 fe79 	bl	800578c <d_print_expr_op>
 8004a9a:	f7fe bdff 	b.w	800369c <d_print_comp_inner+0xc7c>
 8004a9e:	491c      	ldr	r1, [pc, #112]	; (8004b10 <d_print_comp_inner+0x20f0>)
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	f7fb fe0b 	bl	80006bc <d_append_string>
 8004aa6:	68f3      	ldr	r3, [r6, #12]
 8004aa8:	b143      	cbz	r3, 8004abc <d_print_comp_inner+0x209c>
 8004aaa:	2111      	movs	r1, #17
 8004aac:	4620      	mov	r0, r4
 8004aae:	4632      	mov	r2, r6
 8004ab0:	f001 f868 	bl	8005b84 <d_print_subexpr>
 8004ab4:	2120      	movs	r1, #32
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f7fb fd78 	bl	80005ac <d_append_char>
 8004abc:	463a      	mov	r2, r7
 8004abe:	2111      	movs	r1, #17
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	f000 f829 	bl	8004b18 <d_print_comp>
 8004ac6:	2d00      	cmp	r5, #0
 8004ac8:	f47e ae15 	bne.w	80036f6 <d_print_comp_inner+0xcd6>
 8004acc:	f7fe b818 	b.w	8002b00 <d_print_comp_inner+0xe0>
 8004ad0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8004ad4:	f7fe b811 	b.w	8002afa <d_print_comp_inner+0xda>
 8004ad8:	2d00      	cmp	r5, #0
 8004ada:	f43e a80e 	beq.w	8002afa <d_print_comp_inner+0xda>
 8004ade:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
 8004ae2:	f7fe b80a 	b.w	8002afa <d_print_comp_inner+0xda>
 8004ae6:	212d      	movs	r1, #45	; 0x2d
 8004ae8:	f7fb fd60 	bl	80005ac <d_append_char>
 8004aec:	e603      	b.n	80046f6 <d_print_comp_inner+0x1cd6>
 8004aee:	4662      	mov	r2, ip
 8004af0:	2100      	movs	r1, #0
 8004af2:	6019      	str	r1, [r3, #0]
 8004af4:	e66f      	b.n	80047d6 <d_print_comp_inner+0x1db6>
 8004af6:	68f2      	ldr	r2, [r6, #12]
 8004af8:	f7fe b815 	b.w	8002b26 <d_print_comp_inner+0x106>
 8004afc:	463a      	mov	r2, r7
 8004afe:	2111      	movs	r1, #17
 8004b00:	f000 fe44 	bl	800578c <d_print_expr_op>
 8004b04:	f7fe bdf7 	b.w	80036f6 <d_print_comp_inner+0xcd6>
 8004b08:	4902      	ldr	r1, [pc, #8]	; (8004b14 <d_print_comp_inner+0x20f4>)
 8004b0a:	f7fe bbe8 	b.w	80032de <d_print_comp_inner+0x8be>
 8004b0e:	bf00      	nop
 8004b10:	0802405c 	.word	0x0802405c
 8004b14:	08024070 	.word	0x08024070

08004b18 <d_print_comp>:
 8004b18:	b530      	push	{r4, r5, lr}
 8004b1a:	4605      	mov	r5, r0
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	b31a      	cbz	r2, 8004b68 <d_print_comp+0x50>
 8004b20:	6853      	ldr	r3, [r2, #4]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	4614      	mov	r4, r2
 8004b26:	dc1f      	bgt.n	8004b68 <d_print_comp+0x50>
 8004b28:	f8d0 111c 	ldr.w	r1, [r0, #284]	; 0x11c
 8004b2c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004b30:	dc1a      	bgt.n	8004b68 <d_print_comp+0x50>
 8004b32:	3301      	adds	r3, #1
 8004b34:	6053      	str	r3, [r2, #4]
 8004b36:	3101      	adds	r1, #1
 8004b38:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 8004b3c:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
 8004b40:	f8c0 d12c 	str.w	sp, [r0, #300]	; 0x12c
 8004b44:	2111      	movs	r1, #17
 8004b46:	e9cd 2300 	strd	r2, r3, [sp]
 8004b4a:	f7fd ff69 	bl	8002a20 <d_print_comp_inner>
 8004b4e:	6862      	ldr	r2, [r4, #4]
 8004b50:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
 8004b54:	9901      	ldr	r1, [sp, #4]
 8004b56:	f8c5 112c 	str.w	r1, [r5, #300]	; 0x12c
 8004b5a:	3a01      	subs	r2, #1
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	6062      	str	r2, [r4, #4]
 8004b60:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
 8004b64:	b003      	add	sp, #12
 8004b66:	bd30      	pop	{r4, r5, pc}
 8004b68:	2301      	movs	r3, #1
 8004b6a:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118
 8004b6e:	b003      	add	sp, #12
 8004b70:	bd30      	pop	{r4, r5, pc}
 8004b72:	bf00      	nop

08004b74 <d_print_mod>:
 8004b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b78:	7813      	ldrb	r3, [r2, #0]
 8004b7a:	3b03      	subs	r3, #3
 8004b7c:	4615      	mov	r5, r2
 8004b7e:	4604      	mov	r4, r0
 8004b80:	2b4e      	cmp	r3, #78	; 0x4e
 8004b82:	d850      	bhi.n	8004c26 <d_print_mod+0xb2>
 8004b84:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004b88:	004f011a 	.word	0x004f011a
 8004b8c:	004f004f 	.word	0x004f004f
 8004b90:	004f004f 	.word	0x004f004f
 8004b94:	004f004f 	.word	0x004f004f
 8004b98:	004f004f 	.word	0x004f004f
 8004b9c:	004f004f 	.word	0x004f004f
 8004ba0:	004f004f 	.word	0x004f004f
 8004ba4:	004f004f 	.word	0x004f004f
 8004ba8:	004f004f 	.word	0x004f004f
 8004bac:	004f004f 	.word	0x004f004f
 8004bb0:	004f004f 	.word	0x004f004f
 8004bb4:	007b0054 	.word	0x007b0054
 8004bb8:	005400a2 	.word	0x005400a2
 8004bbc:	00a2007b 	.word	0x00a2007b
 8004bc0:	00fb00ee 	.word	0x00fb00ee
 8004bc4:	02830108 	.word	0x02830108
 8004bc8:	012d011f 	.word	0x012d011f
 8004bcc:	01780152 	.word	0x01780152
 8004bd0:	004f004f 	.word	0x004f004f
 8004bd4:	004f004f 	.word	0x004f004f
 8004bd8:	004f019e 	.word	0x004f019e
 8004bdc:	004f01ce 	.word	0x004f01ce
 8004be0:	004f004f 	.word	0x004f004f
 8004be4:	004f004f 	.word	0x004f004f
 8004be8:	004f004f 	.word	0x004f004f
 8004bec:	004f004f 	.word	0x004f004f
 8004bf0:	004f004f 	.word	0x004f004f
 8004bf4:	004f004f 	.word	0x004f004f
 8004bf8:	004f004f 	.word	0x004f004f
 8004bfc:	004f004f 	.word	0x004f004f
 8004c00:	004f004f 	.word	0x004f004f
 8004c04:	004f004f 	.word	0x004f004f
 8004c08:	004f004f 	.word	0x004f004f
 8004c0c:	004f004f 	.word	0x004f004f
 8004c10:	004f004f 	.word	0x004f004f
 8004c14:	004f004f 	.word	0x004f004f
 8004c18:	004f004f 	.word	0x004f004f
 8004c1c:	01f5004f 	.word	0x01f5004f
 8004c20:	0230004f 	.word	0x0230004f
 8004c24:	00c7      	.short	0x00c7
 8004c26:	462a      	mov	r2, r5
 8004c28:	2111      	movs	r1, #17
 8004c2a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c2e:	e773      	b.n	8004b18 <d_print_comp>
 8004c30:	4ed4      	ldr	r6, [pc, #848]	; (8004f84 <d_print_mod+0x410>)
 8004c32:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004c36:	f106 0708 	add.w	r7, r6, #8
 8004c3a:	2520      	movs	r5, #32
 8004c3c:	f04f 0800 	mov.w	r8, #0
 8004c40:	e00b      	b.n	8004c5a <d_print_mod+0xe6>
 8004c42:	460b      	mov	r3, r1
 8004c44:	3101      	adds	r1, #1
 8004c46:	42be      	cmp	r6, r7
 8004c48:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004c4c:	54e5      	strb	r5, [r4, r3]
 8004c4e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8004c52:	f000 80c4 	beq.w	8004dde <d_print_mod+0x26a>
 8004c56:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8004c5a:	29ff      	cmp	r1, #255	; 0xff
 8004c5c:	d1f1      	bne.n	8004c42 <d_print_mod+0xce>
 8004c5e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c62:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c66:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	4798      	blx	r3
 8004c6e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004c72:	3301      	adds	r3, #1
 8004c74:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004c78:	2101      	movs	r1, #1
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	e7e3      	b.n	8004c46 <d_print_mod+0xd2>
 8004c7e:	4ec2      	ldr	r6, [pc, #776]	; (8004f88 <d_print_mod+0x414>)
 8004c80:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004c84:	f106 0708 	add.w	r7, r6, #8
 8004c88:	2520      	movs	r5, #32
 8004c8a:	f04f 0800 	mov.w	r8, #0
 8004c8e:	e00b      	b.n	8004ca8 <d_print_mod+0x134>
 8004c90:	460b      	mov	r3, r1
 8004c92:	3101      	adds	r1, #1
 8004c94:	42b7      	cmp	r7, r6
 8004c96:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004c9a:	54e5      	strb	r5, [r4, r3]
 8004c9c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8004ca0:	f000 809d 	beq.w	8004dde <d_print_mod+0x26a>
 8004ca4:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8004ca8:	29ff      	cmp	r1, #255	; 0xff
 8004caa:	d1f1      	bne.n	8004c90 <d_print_mod+0x11c>
 8004cac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004cb0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004cb4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004cb8:	4620      	mov	r0, r4
 8004cba:	4798      	blx	r3
 8004cbc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	2300      	movs	r3, #0
 8004cca:	e7e3      	b.n	8004c94 <d_print_mod+0x120>
 8004ccc:	4eaf      	ldr	r6, [pc, #700]	; (8004f8c <d_print_mod+0x418>)
 8004cce:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004cd2:	1d77      	adds	r7, r6, #5
 8004cd4:	2520      	movs	r5, #32
 8004cd6:	f04f 0800 	mov.w	r8, #0
 8004cda:	e00a      	b.n	8004cf2 <d_print_mod+0x17e>
 8004cdc:	460b      	mov	r3, r1
 8004cde:	3101      	adds	r1, #1
 8004ce0:	42b7      	cmp	r7, r6
 8004ce2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004ce6:	54e5      	strb	r5, [r4, r3]
 8004ce8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8004cec:	d077      	beq.n	8004dde <d_print_mod+0x26a>
 8004cee:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8004cf2:	29ff      	cmp	r1, #255	; 0xff
 8004cf4:	d1f2      	bne.n	8004cdc <d_print_mod+0x168>
 8004cf6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004cfa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004cfe:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004d02:	4620      	mov	r0, r4
 8004d04:	4798      	blx	r3
 8004d06:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004d10:	2101      	movs	r1, #1
 8004d12:	2300      	movs	r3, #0
 8004d14:	e7e4      	b.n	8004ce0 <d_print_mod+0x16c>
 8004d16:	4f9e      	ldr	r7, [pc, #632]	; (8004f90 <d_print_mod+0x41c>)
 8004d18:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004d1c:	f107 0905 	add.w	r9, r7, #5
 8004d20:	2620      	movs	r6, #32
 8004d22:	f04f 0800 	mov.w	r8, #0
 8004d26:	e00b      	b.n	8004d40 <d_print_mod+0x1cc>
 8004d28:	460b      	mov	r3, r1
 8004d2a:	3101      	adds	r1, #1
 8004d2c:	45b9      	cmp	r9, r7
 8004d2e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004d32:	54e6      	strb	r6, [r4, r3]
 8004d34:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004d38:	f000 817c 	beq.w	8005034 <d_print_mod+0x4c0>
 8004d3c:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 8004d40:	29ff      	cmp	r1, #255	; 0xff
 8004d42:	d1f1      	bne.n	8004d28 <d_print_mod+0x1b4>
 8004d44:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004d48:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004d4c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004d50:	4620      	mov	r0, r4
 8004d52:	4798      	blx	r3
 8004d54:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004d58:	3301      	adds	r3, #1
 8004d5a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004d5e:	2101      	movs	r1, #1
 8004d60:	2300      	movs	r3, #0
 8004d62:	e7e3      	b.n	8004d2c <d_print_mod+0x1b8>
 8004d64:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8004d68:	2bff      	cmp	r3, #255	; 0xff
 8004d6a:	f000 81cd 	beq.w	8005108 <d_print_mod+0x594>
 8004d6e:	2220      	movs	r2, #32
 8004d70:	1c59      	adds	r1, r3, #1
 8004d72:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
 8004d76:	54c2      	strb	r2, [r0, r3]
 8004d78:	f880 2104 	strb.w	r2, [r0, #260]	; 0x104
 8004d7c:	e025      	b.n	8004dca <d_print_mod+0x256>
 8004d7e:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8004d82:	2bff      	cmp	r3, #255	; 0xff
 8004d84:	f000 81b1 	beq.w	80050ea <d_print_mod+0x576>
 8004d88:	1c59      	adds	r1, r3, #1
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004d90:	54e2      	strb	r2, [r4, r3]
 8004d92:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8004d96:	e026      	b.n	8004de6 <d_print_mod+0x272>
 8004d98:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004d9c:	29ff      	cmp	r1, #255	; 0xff
 8004d9e:	f000 8194 	beq.w	80050ca <d_print_mod+0x556>
 8004da2:	1c4a      	adds	r2, r1, #1
 8004da4:	2320      	movs	r3, #32
 8004da6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004daa:	5463      	strb	r3, [r4, r1]
 8004dac:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004db0:	692a      	ldr	r2, [r5, #16]
 8004db2:	4620      	mov	r0, r4
 8004db4:	2111      	movs	r1, #17
 8004db6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dba:	e6ad      	b.n	8004b18 <d_print_comp>
 8004dbc:	68ea      	ldr	r2, [r5, #12]
 8004dbe:	2111      	movs	r1, #17
 8004dc0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dc4:	e6a8      	b.n	8004b18 <d_print_comp>
 8004dc6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004dca:	29ff      	cmp	r1, #255	; 0xff
 8004dcc:	f000 81bb 	beq.w	8005146 <d_print_mod+0x5d2>
 8004dd0:	1c4a      	adds	r2, r1, #1
 8004dd2:	2326      	movs	r3, #38	; 0x26
 8004dd4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004dd8:	5463      	strb	r3, [r4, r1]
 8004dda:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004de2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004de6:	4d6b      	ldr	r5, [pc, #428]	; (8004f94 <d_print_mod+0x420>)
 8004de8:	2626      	movs	r6, #38	; 0x26
 8004dea:	1c6f      	adds	r7, r5, #1
 8004dec:	f04f 0800 	mov.w	r8, #0
 8004df0:	e00a      	b.n	8004e08 <d_print_mod+0x294>
 8004df2:	460b      	mov	r3, r1
 8004df4:	3101      	adds	r1, #1
 8004df6:	42bd      	cmp	r5, r7
 8004df8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004dfc:	54e6      	strb	r6, [r4, r3]
 8004dfe:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004e02:	d0ec      	beq.n	8004dde <d_print_mod+0x26a>
 8004e04:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004e08:	29ff      	cmp	r1, #255	; 0xff
 8004e0a:	d1f2      	bne.n	8004df2 <d_print_mod+0x27e>
 8004e0c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e14:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004e18:	4620      	mov	r0, r4
 8004e1a:	4798      	blx	r3
 8004e1c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004e20:	3301      	adds	r3, #1
 8004e22:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004e26:	2101      	movs	r1, #1
 8004e28:	2300      	movs	r3, #0
 8004e2a:	e7e4      	b.n	8004df6 <d_print_mod+0x282>
 8004e2c:	4e5a      	ldr	r6, [pc, #360]	; (8004f98 <d_print_mod+0x424>)
 8004e2e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004e32:	f106 0708 	add.w	r7, r6, #8
 8004e36:	2520      	movs	r5, #32
 8004e38:	f04f 0800 	mov.w	r8, #0
 8004e3c:	e00a      	b.n	8004e54 <d_print_mod+0x2e0>
 8004e3e:	460b      	mov	r3, r1
 8004e40:	3101      	adds	r1, #1
 8004e42:	42b7      	cmp	r7, r6
 8004e44:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004e48:	54e5      	strb	r5, [r4, r3]
 8004e4a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8004e4e:	d0c6      	beq.n	8004dde <d_print_mod+0x26a>
 8004e50:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8004e54:	29ff      	cmp	r1, #255	; 0xff
 8004e56:	d1f2      	bne.n	8004e3e <d_print_mod+0x2ca>
 8004e58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e60:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004e64:	4620      	mov	r0, r4
 8004e66:	4798      	blx	r3
 8004e68:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004e72:	2101      	movs	r1, #1
 8004e74:	2300      	movs	r3, #0
 8004e76:	e7e4      	b.n	8004e42 <d_print_mod+0x2ce>
 8004e78:	4e48      	ldr	r6, [pc, #288]	; (8004f9c <d_print_mod+0x428>)
 8004e7a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004e7e:	f106 070a 	add.w	r7, r6, #10
 8004e82:	2520      	movs	r5, #32
 8004e84:	f04f 0800 	mov.w	r8, #0
 8004e88:	e00a      	b.n	8004ea0 <d_print_mod+0x32c>
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	3101      	adds	r1, #1
 8004e8e:	42b7      	cmp	r7, r6
 8004e90:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004e94:	54e5      	strb	r5, [r4, r3]
 8004e96:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8004e9a:	d0a0      	beq.n	8004dde <d_print_mod+0x26a>
 8004e9c:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8004ea0:	29ff      	cmp	r1, #255	; 0xff
 8004ea2:	d1f2      	bne.n	8004e8a <d_print_mod+0x316>
 8004ea4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ea8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004eac:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	4798      	blx	r3
 8004eb4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004eb8:	3301      	adds	r3, #1
 8004eba:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	e7e4      	b.n	8004e8e <d_print_mod+0x31a>
 8004ec4:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8004ec8:	2b28      	cmp	r3, #40	; 0x28
 8004eca:	f040 80d4 	bne.w	8005076 <d_print_mod+0x502>
 8004ece:	4e34      	ldr	r6, [pc, #208]	; (8004fa0 <d_print_mod+0x42c>)
 8004ed0:	68ea      	ldr	r2, [r5, #12]
 8004ed2:	2111      	movs	r1, #17
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	f7ff fe1f 	bl	8004b18 <d_print_comp>
 8004eda:	1cb7      	adds	r7, r6, #2
 8004edc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004ee0:	253a      	movs	r5, #58	; 0x3a
 8004ee2:	f04f 0800 	mov.w	r8, #0
 8004ee6:	e00b      	b.n	8004f00 <d_print_mod+0x38c>
 8004ee8:	460b      	mov	r3, r1
 8004eea:	3101      	adds	r1, #1
 8004eec:	42b7      	cmp	r7, r6
 8004eee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004ef2:	54e5      	strb	r5, [r4, r3]
 8004ef4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8004ef8:	f43f af71 	beq.w	8004dde <d_print_mod+0x26a>
 8004efc:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8004f00:	29ff      	cmp	r1, #255	; 0xff
 8004f02:	d1f1      	bne.n	8004ee8 <d_print_mod+0x374>
 8004f04:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f08:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f0c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004f10:	4620      	mov	r0, r4
 8004f12:	4798      	blx	r3
 8004f14:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004f18:	3301      	adds	r3, #1
 8004f1a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004f1e:	2101      	movs	r1, #1
 8004f20:	2300      	movs	r3, #0
 8004f22:	e7e3      	b.n	8004eec <d_print_mod+0x378>
 8004f24:	4f1f      	ldr	r7, [pc, #124]	; (8004fa4 <d_print_mod+0x430>)
 8004f26:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004f2a:	f107 0909 	add.w	r9, r7, #9
 8004f2e:	2620      	movs	r6, #32
 8004f30:	f04f 0800 	mov.w	r8, #0
 8004f34:	e00b      	b.n	8004f4e <d_print_mod+0x3da>
 8004f36:	460b      	mov	r3, r1
 8004f38:	3101      	adds	r1, #1
 8004f3a:	454f      	cmp	r7, r9
 8004f3c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004f40:	54e6      	strb	r6, [r4, r3]
 8004f42:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004f46:	f000 8084 	beq.w	8005052 <d_print_mod+0x4de>
 8004f4a:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 8004f4e:	29ff      	cmp	r1, #255	; 0xff
 8004f50:	d1f1      	bne.n	8004f36 <d_print_mod+0x3c2>
 8004f52:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f56:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f5a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004f5e:	4620      	mov	r0, r4
 8004f60:	4798      	blx	r3
 8004f62:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004f66:	3301      	adds	r3, #1
 8004f68:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	2300      	movs	r3, #0
 8004f70:	e7e3      	b.n	8004f3a <d_print_mod+0x3c6>
 8004f72:	4e0d      	ldr	r6, [pc, #52]	; (8004fa8 <d_print_mod+0x434>)
 8004f74:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004f78:	f106 0710 	add.w	r7, r6, #16
 8004f7c:	2520      	movs	r5, #32
 8004f7e:	f04f 0800 	mov.w	r8, #0
 8004f82:	e01f      	b.n	8004fc4 <d_print_mod+0x450>
 8004f84:	0802411c 	.word	0x0802411c
 8004f88:	08024128 	.word	0x08024128
 8004f8c:	08024134 	.word	0x08024134
 8004f90:	0802415c 	.word	0x0802415c
 8004f94:	08024164 	.word	0x08024164
 8004f98:	08024168 	.word	0x08024168
 8004f9c:	08024174 	.word	0x08024174
 8004fa0:	08024180 	.word	0x08024180
 8004fa4:	08024184 	.word	0x08024184
 8004fa8:	0802413c 	.word	0x0802413c
 8004fac:	460b      	mov	r3, r1
 8004fae:	3101      	adds	r1, #1
 8004fb0:	42b7      	cmp	r7, r6
 8004fb2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004fb6:	54e5      	strb	r5, [r4, r3]
 8004fb8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8004fbc:	f43f af0f 	beq.w	8004dde <d_print_mod+0x26a>
 8004fc0:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8004fc4:	29ff      	cmp	r1, #255	; 0xff
 8004fc6:	d1f1      	bne.n	8004fac <d_print_mod+0x438>
 8004fc8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004fcc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004fd0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	4798      	blx	r3
 8004fd8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004fdc:	3301      	adds	r3, #1
 8004fde:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	e7e3      	b.n	8004fb0 <d_print_mod+0x43c>
 8004fe8:	4f6d      	ldr	r7, [pc, #436]	; (80051a0 <d_print_mod+0x62c>)
 8004fea:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004fee:	f107 0908 	add.w	r9, r7, #8
 8004ff2:	2620      	movs	r6, #32
 8004ff4:	f04f 0800 	mov.w	r8, #0
 8004ff8:	e00a      	b.n	8005010 <d_print_mod+0x49c>
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	3101      	adds	r1, #1
 8004ffe:	45b9      	cmp	r9, r7
 8005000:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005004:	54e6      	strb	r6, [r4, r3]
 8005006:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800500a:	d013      	beq.n	8005034 <d_print_mod+0x4c0>
 800500c:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 8005010:	29ff      	cmp	r1, #255	; 0xff
 8005012:	d1f2      	bne.n	8004ffa <d_print_mod+0x486>
 8005014:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005018:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800501c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005020:	4620      	mov	r0, r4
 8005022:	4798      	blx	r3
 8005024:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005028:	3301      	adds	r3, #1
 800502a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800502e:	2101      	movs	r1, #1
 8005030:	2300      	movs	r3, #0
 8005032:	e7e4      	b.n	8004ffe <d_print_mod+0x48a>
 8005034:	692a      	ldr	r2, [r5, #16]
 8005036:	2a00      	cmp	r2, #0
 8005038:	f43f aed1 	beq.w	8004dde <d_print_mod+0x26a>
 800503c:	29ff      	cmp	r1, #255	; 0xff
 800503e:	d032      	beq.n	80050a6 <d_print_mod+0x532>
 8005040:	1c48      	adds	r0, r1, #1
 8005042:	2328      	movs	r3, #40	; 0x28
 8005044:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8005048:	5463      	strb	r3, [r4, r1]
 800504a:	2111      	movs	r1, #17
 800504c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005050:	e001      	b.n	8005056 <d_print_mod+0x4e2>
 8005052:	68ea      	ldr	r2, [r5, #12]
 8005054:	2111      	movs	r1, #17
 8005056:	4620      	mov	r0, r4
 8005058:	f7ff fd5e 	bl	8004b18 <d_print_comp>
 800505c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005060:	29ff      	cmp	r1, #255	; 0xff
 8005062:	d061      	beq.n	8005128 <d_print_mod+0x5b4>
 8005064:	1c4a      	adds	r2, r1, #1
 8005066:	2329      	movs	r3, #41	; 0x29
 8005068:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800506c:	5463      	strb	r3, [r4, r1]
 800506e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005076:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800507a:	29ff      	cmp	r1, #255	; 0xff
 800507c:	d072      	beq.n	8005164 <d_print_mod+0x5f0>
 800507e:	1c4a      	adds	r2, r1, #1
 8005080:	2320      	movs	r3, #32
 8005082:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005086:	5463      	strb	r3, [r4, r1]
 8005088:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800508c:	e71f      	b.n	8004ece <d_print_mod+0x35a>
 800508e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005092:	29ff      	cmp	r1, #255	; 0xff
 8005094:	d076      	beq.n	8005184 <d_print_mod+0x610>
 8005096:	1c4a      	adds	r2, r1, #1
 8005098:	232a      	movs	r3, #42	; 0x2a
 800509a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800509e:	5463      	strb	r3, [r4, r1]
 80050a0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80050a4:	e69b      	b.n	8004dde <d_print_mod+0x26a>
 80050a6:	2600      	movs	r6, #0
 80050a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80050ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80050b0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80050b4:	4620      	mov	r0, r4
 80050b6:	4798      	blx	r3
 80050b8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80050bc:	692a      	ldr	r2, [r5, #16]
 80050be:	3301      	adds	r3, #1
 80050c0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80050c4:	2001      	movs	r0, #1
 80050c6:	4631      	mov	r1, r6
 80050c8:	e7bb      	b.n	8005042 <d_print_mod+0x4ce>
 80050ca:	2600      	movs	r6, #0
 80050cc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80050d0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80050d4:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 80050d8:	4798      	blx	r3
 80050da:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80050de:	2201      	movs	r2, #1
 80050e0:	4413      	add	r3, r2
 80050e2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80050e6:	4631      	mov	r1, r6
 80050e8:	e65c      	b.n	8004da4 <d_print_mod+0x230>
 80050ea:	2500      	movs	r5, #0
 80050ec:	4619      	mov	r1, r3
 80050ee:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 80050f2:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
 80050f6:	4798      	blx	r3
 80050f8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80050fc:	2101      	movs	r1, #1
 80050fe:	440b      	add	r3, r1
 8005100:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005104:	462b      	mov	r3, r5
 8005106:	e640      	b.n	8004d8a <d_print_mod+0x216>
 8005108:	2100      	movs	r1, #0
 800510a:	e9d0 5242 	ldrd	r5, r2, [r0, #264]	; 0x108
 800510e:	f880 10ff 	strb.w	r1, [r0, #255]	; 0xff
 8005112:	4619      	mov	r1, r3
 8005114:	47a8      	blx	r5
 8005116:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800511a:	2220      	movs	r2, #32
 800511c:	3301      	adds	r3, #1
 800511e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005122:	7022      	strb	r2, [r4, #0]
 8005124:	2101      	movs	r1, #1
 8005126:	e653      	b.n	8004dd0 <d_print_mod+0x25c>
 8005128:	2500      	movs	r5, #0
 800512a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800512e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005132:	4620      	mov	r0, r4
 8005134:	4798      	blx	r3
 8005136:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800513a:	2201      	movs	r2, #1
 800513c:	4413      	add	r3, r2
 800513e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005142:	4629      	mov	r1, r5
 8005144:	e78f      	b.n	8005066 <d_print_mod+0x4f2>
 8005146:	2500      	movs	r5, #0
 8005148:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800514c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005150:	4620      	mov	r0, r4
 8005152:	4798      	blx	r3
 8005154:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005158:	2201      	movs	r2, #1
 800515a:	4413      	add	r3, r2
 800515c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005160:	4629      	mov	r1, r5
 8005162:	e636      	b.n	8004dd2 <d_print_mod+0x25e>
 8005164:	2600      	movs	r6, #0
 8005166:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800516a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800516e:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8005172:	4798      	blx	r3
 8005174:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005178:	2201      	movs	r2, #1
 800517a:	4413      	add	r3, r2
 800517c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005180:	4631      	mov	r1, r6
 8005182:	e77d      	b.n	8005080 <d_print_mod+0x50c>
 8005184:	2500      	movs	r5, #0
 8005186:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
 800518a:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 800518e:	4798      	blx	r3
 8005190:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005194:	2201      	movs	r2, #1
 8005196:	4413      	add	r3, r2
 8005198:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800519c:	4629      	mov	r1, r5
 800519e:	e77b      	b.n	8005098 <d_print_mod+0x524>
 80051a0:	08024150 	.word	0x08024150

080051a4 <d_print_function_type>:
 80051a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051a8:	4604      	mov	r4, r0
 80051aa:	4616      	mov	r6, r2
 80051ac:	461d      	mov	r5, r3
 80051ae:	b19b      	cbz	r3, 80051d8 <d_print_function_type+0x34>
 80051b0:	4f71      	ldr	r7, [pc, #452]	; (8005378 <d_print_function_type+0x1d4>)
 80051b2:	2001      	movs	r0, #1
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	b97a      	cbnz	r2, 80051d8 <d_print_function_type+0x34>
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	7811      	ldrb	r1, [r2, #0]
 80051bc:	3919      	subs	r1, #25
 80051be:	b2c9      	uxtb	r1, r1
 80051c0:	2912      	cmp	r1, #18
 80051c2:	fa00 f201 	lsl.w	r2, r0, r1
 80051c6:	d804      	bhi.n	80051d2 <d_print_function_type+0x2e>
 80051c8:	423a      	tst	r2, r7
 80051ca:	d135      	bne.n	8005238 <d_print_function_type+0x94>
 80051cc:	f412 6f60 	tst.w	r2, #3584	; 0xe00
 80051d0:	d174      	bne.n	80052bc <d_print_function_type+0x118>
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1ed      	bne.n	80051b4 <d_print_function_type+0x10>
 80051d8:	2300      	movs	r3, #0
 80051da:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
 80051de:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80051e2:	462a      	mov	r2, r5
 80051e4:	2111      	movs	r1, #17
 80051e6:	4620      	mov	r0, r4
 80051e8:	f000 f8c8 	bl	800537c <d_print_mod_list>
 80051ec:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80051f0:	2bff      	cmp	r3, #255	; 0xff
 80051f2:	d04b      	beq.n	800528c <d_print_function_type+0xe8>
 80051f4:	2228      	movs	r2, #40	; 0x28
 80051f6:	1c59      	adds	r1, r3, #1
 80051f8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80051fc:	54e2      	strb	r2, [r4, r3]
 80051fe:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005202:	6932      	ldr	r2, [r6, #16]
 8005204:	b12a      	cbz	r2, 8005212 <d_print_function_type+0x6e>
 8005206:	2111      	movs	r1, #17
 8005208:	4620      	mov	r0, r4
 800520a:	f7ff fc85 	bl	8004b18 <d_print_comp>
 800520e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005212:	29ff      	cmp	r1, #255	; 0xff
 8005214:	d076      	beq.n	8005304 <d_print_function_type+0x160>
 8005216:	1c4b      	adds	r3, r1, #1
 8005218:	2229      	movs	r2, #41	; 0x29
 800521a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800521e:	4620      	mov	r0, r4
 8005220:	5462      	strb	r2, [r4, r1]
 8005222:	2301      	movs	r3, #1
 8005224:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005228:	2111      	movs	r1, #17
 800522a:	462a      	mov	r2, r5
 800522c:	f000 f8a6 	bl	800537c <d_print_mod_list>
 8005230:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
 8005234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005238:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800523c:	2b20      	cmp	r3, #32
 800523e:	d145      	bne.n	80052cc <d_print_function_type+0x128>
 8005240:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005244:	29ff      	cmp	r1, #255	; 0xff
 8005246:	d04e      	beq.n	80052e6 <d_print_function_type+0x142>
 8005248:	1c4b      	adds	r3, r1, #1
 800524a:	f04f 0828 	mov.w	r8, #40	; 0x28
 800524e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005252:	f804 8001 	strb.w	r8, [r4, r1]
 8005256:	f04f 0900 	mov.w	r9, #0
 800525a:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
 800525e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005262:	2111      	movs	r1, #17
 8005264:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8005268:	464b      	mov	r3, r9
 800526a:	462a      	mov	r2, r5
 800526c:	4620      	mov	r0, r4
 800526e:	f000 f885 	bl	800537c <d_print_mod_list>
 8005272:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005276:	29ff      	cmp	r1, #255	; 0xff
 8005278:	d053      	beq.n	8005322 <d_print_function_type+0x17e>
 800527a:	1c4b      	adds	r3, r1, #1
 800527c:	2229      	movs	r2, #41	; 0x29
 800527e:	2bff      	cmp	r3, #255	; 0xff
 8005280:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005284:	5462      	strb	r2, [r4, r1]
 8005286:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800528a:	d1b3      	bne.n	80051f4 <d_print_function_type+0x50>
 800528c:	4619      	mov	r1, r3
 800528e:	2300      	movs	r3, #0
 8005290:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8005294:	4620      	mov	r0, r4
 8005296:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800529a:	4798      	blx	r3
 800529c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80052a0:	3301      	adds	r3, #1
 80052a2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80052a6:	2328      	movs	r3, #40	; 0x28
 80052a8:	7023      	strb	r3, [r4, #0]
 80052aa:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80052ae:	6932      	ldr	r2, [r6, #16]
 80052b0:	2101      	movs	r1, #1
 80052b2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80052b6:	2a00      	cmp	r2, #0
 80052b8:	d1a5      	bne.n	8005206 <d_print_function_type+0x62>
 80052ba:	e7ac      	b.n	8005216 <d_print_function_type+0x72>
 80052bc:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 80052c0:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 80052c4:	2a28      	cmp	r2, #40	; 0x28
 80052c6:	d0bb      	beq.n	8005240 <d_print_function_type+0x9c>
 80052c8:	2b20      	cmp	r3, #32
 80052ca:	d0b9      	beq.n	8005240 <d_print_function_type+0x9c>
 80052cc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80052d0:	2bff      	cmp	r3, #255	; 0xff
 80052d2:	d03e      	beq.n	8005352 <d_print_function_type+0x1ae>
 80052d4:	1c59      	adds	r1, r3, #1
 80052d6:	2220      	movs	r2, #32
 80052d8:	29ff      	cmp	r1, #255	; 0xff
 80052da:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80052de:	54e2      	strb	r2, [r4, r3]
 80052e0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80052e4:	d1b0      	bne.n	8005248 <d_print_function_type+0xa4>
 80052e6:	2700      	movs	r7, #0
 80052e8:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 80052ec:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80052f0:	4620      	mov	r0, r4
 80052f2:	4798      	blx	r3
 80052f4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80052f8:	3301      	adds	r3, #1
 80052fa:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80052fe:	4639      	mov	r1, r7
 8005300:	2301      	movs	r3, #1
 8005302:	e7a2      	b.n	800524a <d_print_function_type+0xa6>
 8005304:	2600      	movs	r6, #0
 8005306:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800530a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800530e:	4620      	mov	r0, r4
 8005310:	4798      	blx	r3
 8005312:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005316:	3301      	adds	r3, #1
 8005318:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800531c:	4631      	mov	r1, r6
 800531e:	2301      	movs	r3, #1
 8005320:	e77a      	b.n	8005218 <d_print_function_type+0x74>
 8005322:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8005326:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800532a:	4620      	mov	r0, r4
 800532c:	4798      	blx	r3
 800532e:	f642 0329 	movw	r3, #10281	; 0x2829
 8005332:	8023      	strh	r3, [r4, #0]
 8005334:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8005338:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800533c:	6932      	ldr	r2, [r6, #16]
 800533e:	3301      	adds	r3, #1
 8005340:	2102      	movs	r1, #2
 8005342:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005346:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800534a:	2a00      	cmp	r2, #0
 800534c:	f47f af5b 	bne.w	8005206 <d_print_function_type+0x62>
 8005350:	e761      	b.n	8005216 <d_print_function_type+0x72>
 8005352:	2200      	movs	r2, #0
 8005354:	4619      	mov	r1, r3
 8005356:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 800535a:	f8d4 7108 	ldr.w	r7, [r4, #264]	; 0x108
 800535e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005362:	4620      	mov	r0, r4
 8005364:	47b8      	blx	r7
 8005366:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800536a:	2220      	movs	r2, #32
 800536c:	3301      	adds	r3, #1
 800536e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005372:	7022      	strb	r2, [r4, #0]
 8005374:	2101      	movs	r1, #1
 8005376:	e767      	b.n	8005248 <d_print_function_type+0xa4>
 8005378:	00043107 	.word	0x00043107

0800537c <d_print_mod_list>:
 800537c:	2a00      	cmp	r2, #0
 800537e:	f000 80c2 	beq.w	8005506 <d_print_mod_list+0x18a>
 8005382:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005386:	4605      	mov	r5, r0
 8005388:	b088      	sub	sp, #32
 800538a:	461e      	mov	r6, r3
 800538c:	4614      	mov	r4, r2
 800538e:	2701      	movs	r7, #1
 8005390:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 8005394:	b9ca      	cbnz	r2, 80053ca <d_print_mod_list+0x4e>
 8005396:	68a2      	ldr	r2, [r4, #8]
 8005398:	bb0a      	cbnz	r2, 80053de <d_print_mod_list+0x62>
 800539a:	6862      	ldr	r2, [r4, #4]
 800539c:	7811      	ldrb	r1, [r2, #0]
 800539e:	b1be      	cbz	r6, 80053d0 <d_print_mod_list+0x54>
 80053a0:	68e3      	ldr	r3, [r4, #12]
 80053a2:	f8d5 8110 	ldr.w	r8, [r5, #272]	; 0x110
 80053a6:	60a7      	str	r7, [r4, #8]
 80053a8:	2929      	cmp	r1, #41	; 0x29
 80053aa:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 80053ae:	d024      	beq.n	80053fa <d_print_mod_list+0x7e>
 80053b0:	292a      	cmp	r1, #42	; 0x2a
 80053b2:	d02c      	beq.n	800540e <d_print_mod_list+0x92>
 80053b4:	2902      	cmp	r1, #2
 80053b6:	d034      	beq.n	8005422 <d_print_mod_list+0xa6>
 80053b8:	2111      	movs	r1, #17
 80053ba:	4628      	mov	r0, r5
 80053bc:	f7ff fbda 	bl	8004b74 <d_print_mod>
 80053c0:	6824      	ldr	r4, [r4, #0]
 80053c2:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
 80053c6:	2c00      	cmp	r4, #0
 80053c8:	d1e2      	bne.n	8005390 <d_print_mod_list+0x14>
 80053ca:	b008      	add	sp, #32
 80053cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d0:	294e      	cmp	r1, #78	; 0x4e
 80053d2:	d004      	beq.n	80053de <d_print_mod_list+0x62>
 80053d4:	d807      	bhi.n	80053e6 <d_print_mod_list+0x6a>
 80053d6:	f1a1 031c 	sub.w	r3, r1, #28
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d8e0      	bhi.n	80053a0 <d_print_mod_list+0x24>
 80053de:	6824      	ldr	r4, [r4, #0]
 80053e0:	2c00      	cmp	r4, #0
 80053e2:	d1d5      	bne.n	8005390 <d_print_mod_list+0x14>
 80053e4:	e7f1      	b.n	80053ca <d_print_mod_list+0x4e>
 80053e6:	3950      	subs	r1, #80	; 0x50
 80053e8:	2901      	cmp	r1, #1
 80053ea:	d9f8      	bls.n	80053de <d_print_mod_list+0x62>
 80053ec:	68e3      	ldr	r3, [r4, #12]
 80053ee:	f8d5 8110 	ldr.w	r8, [r5, #272]	; 0x110
 80053f2:	60a7      	str	r7, [r4, #8]
 80053f4:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 80053f8:	e7de      	b.n	80053b8 <d_print_mod_list+0x3c>
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	2111      	movs	r1, #17
 80053fe:	4628      	mov	r0, r5
 8005400:	f7ff fed0 	bl	80051a4 <d_print_function_type>
 8005404:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
 8005408:	b008      	add	sp, #32
 800540a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	2111      	movs	r1, #17
 8005412:	4628      	mov	r0, r5
 8005414:	f000 f8d6 	bl	80055c4 <d_print_array_type>
 8005418:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
 800541c:	b008      	add	sp, #32
 800541e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005422:	4e64      	ldr	r6, [pc, #400]	; (80055b4 <d_print_mod_list+0x238>)
 8005424:	f8d5 7114 	ldr.w	r7, [r5, #276]	; 0x114
 8005428:	68d2      	ldr	r2, [r2, #12]
 800542a:	f04f 0900 	mov.w	r9, #0
 800542e:	2111      	movs	r1, #17
 8005430:	f8c5 9114 	str.w	r9, [r5, #276]	; 0x114
 8005434:	4628      	mov	r0, r5
 8005436:	f7ff fb6f 	bl	8004b18 <d_print_comp>
 800543a:	f106 0a01 	add.w	sl, r6, #1
 800543e:	f8c5 7114 	str.w	r7, [r5, #276]	; 0x114
 8005442:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005446:	273a      	movs	r7, #58	; 0x3a
 8005448:	e00a      	b.n	8005460 <d_print_mod_list+0xe4>
 800544a:	460b      	mov	r3, r1
 800544c:	3101      	adds	r1, #1
 800544e:	4556      	cmp	r6, sl
 8005450:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005454:	54ef      	strb	r7, [r5, r3]
 8005456:	f885 7104 	strb.w	r7, [r5, #260]	; 0x104
 800545a:	d013      	beq.n	8005484 <d_print_mod_list+0x108>
 800545c:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8005460:	29ff      	cmp	r1, #255	; 0xff
 8005462:	d1f2      	bne.n	800544a <d_print_mod_list+0xce>
 8005464:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005468:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800546c:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 8005470:	4628      	mov	r0, r5
 8005472:	4798      	blx	r3
 8005474:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 8005478:	3301      	adds	r3, #1
 800547a:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
 800547e:	2101      	movs	r1, #1
 8005480:	2300      	movs	r3, #0
 8005482:	e7e4      	b.n	800544e <d_print_mod_list+0xd2>
 8005484:	6863      	ldr	r3, [r4, #4]
 8005486:	691c      	ldr	r4, [r3, #16]
 8005488:	7823      	ldrb	r3, [r4, #0]
 800548a:	2b48      	cmp	r3, #72	; 0x48
 800548c:	d017      	beq.n	80054be <d_print_mod_list+0x142>
 800548e:	2b4e      	cmp	r3, #78	; 0x4e
 8005490:	f1a3 0250 	sub.w	r2, r3, #80	; 0x50
 8005494:	f1a3 011c 	sub.w	r1, r3, #28
 8005498:	d00e      	beq.n	80054b8 <d_print_mod_list+0x13c>
 800549a:	d80b      	bhi.n	80054b4 <d_print_mod_list+0x138>
 800549c:	2904      	cmp	r1, #4
 800549e:	d90b      	bls.n	80054b8 <d_print_mod_list+0x13c>
 80054a0:	4622      	mov	r2, r4
 80054a2:	2111      	movs	r1, #17
 80054a4:	4628      	mov	r0, r5
 80054a6:	f7ff fb37 	bl	8004b18 <d_print_comp>
 80054aa:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
 80054ae:	b008      	add	sp, #32
 80054b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054b4:	2a01      	cmp	r2, #1
 80054b6:	d8f3      	bhi.n	80054a0 <d_print_mod_list+0x124>
 80054b8:	68e4      	ldr	r4, [r4, #12]
 80054ba:	7823      	ldrb	r3, [r4, #0]
 80054bc:	e7e7      	b.n	800548e <d_print_mod_list+0x112>
 80054be:	4f3e      	ldr	r7, [pc, #248]	; (80055b8 <d_print_mod_list+0x23c>)
 80054c0:	267b      	movs	r6, #123	; 0x7b
 80054c2:	f107 0a0c 	add.w	sl, r7, #12
 80054c6:	f04f 0900 	mov.w	r9, #0
 80054ca:	e00a      	b.n	80054e2 <d_print_mod_list+0x166>
 80054cc:	460b      	mov	r3, r1
 80054ce:	3101      	adds	r1, #1
 80054d0:	4557      	cmp	r7, sl
 80054d2:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 80054d6:	54ee      	strb	r6, [r5, r3]
 80054d8:	f885 6104 	strb.w	r6, [r5, #260]	; 0x104
 80054dc:	d014      	beq.n	8005508 <d_print_mod_list+0x18c>
 80054de:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 80054e2:	29ff      	cmp	r1, #255	; 0xff
 80054e4:	d1f2      	bne.n	80054cc <d_print_mod_list+0x150>
 80054e6:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80054ea:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80054ee:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 80054f2:	4628      	mov	r0, r5
 80054f4:	4798      	blx	r3
 80054f6:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 80054fa:	3301      	adds	r3, #1
 80054fc:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
 8005500:	2101      	movs	r1, #1
 8005502:	2300      	movs	r3, #0
 8005504:	e7e4      	b.n	80054d0 <d_print_mod_list+0x154>
 8005506:	4770      	bx	lr
 8005508:	6922      	ldr	r2, [r4, #16]
 800550a:	492c      	ldr	r1, [pc, #176]	; (80055bc <d_print_mod_list+0x240>)
 800550c:	3201      	adds	r2, #1
 800550e:	a801      	add	r0, sp, #4
 8005510:	f016 f990 	bl	801b834 <siprintf>
 8005514:	a801      	add	r0, sp, #4
 8005516:	f000 fe93 	bl	8006240 <strlen>
 800551a:	b320      	cbz	r0, 8005566 <d_print_mod_list+0x1ea>
 800551c:	ae01      	add	r6, sp, #4
 800551e:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005522:	eb06 0a00 	add.w	sl, r6, r0
 8005526:	f04f 0900 	mov.w	r9, #0
 800552a:	e008      	b.n	800553e <d_print_mod_list+0x1c2>
 800552c:	460b      	mov	r3, r1
 800552e:	3101      	adds	r1, #1
 8005530:	4556      	cmp	r6, sl
 8005532:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005536:	54ef      	strb	r7, [r5, r3]
 8005538:	f885 7104 	strb.w	r7, [r5, #260]	; 0x104
 800553c:	d015      	beq.n	800556a <d_print_mod_list+0x1ee>
 800553e:	29ff      	cmp	r1, #255	; 0xff
 8005540:	f816 7b01 	ldrb.w	r7, [r6], #1
 8005544:	d1f2      	bne.n	800552c <d_print_mod_list+0x1b0>
 8005546:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800554a:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800554e:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 8005552:	4628      	mov	r0, r5
 8005554:	4798      	blx	r3
 8005556:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 800555a:	3301      	adds	r3, #1
 800555c:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
 8005560:	2101      	movs	r1, #1
 8005562:	2300      	movs	r3, #0
 8005564:	e7e4      	b.n	8005530 <d_print_mod_list+0x1b4>
 8005566:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800556a:	4f15      	ldr	r7, [pc, #84]	; (80055c0 <d_print_mod_list+0x244>)
 800556c:	267d      	movs	r6, #125	; 0x7d
 800556e:	f107 0a02 	add.w	sl, r7, #2
 8005572:	f04f 0900 	mov.w	r9, #0
 8005576:	e00a      	b.n	800558e <d_print_mod_list+0x212>
 8005578:	460b      	mov	r3, r1
 800557a:	3101      	adds	r1, #1
 800557c:	4557      	cmp	r7, sl
 800557e:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005582:	54ee      	strb	r6, [r5, r3]
 8005584:	f885 6104 	strb.w	r6, [r5, #260]	; 0x104
 8005588:	d096      	beq.n	80054b8 <d_print_mod_list+0x13c>
 800558a:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 800558e:	29ff      	cmp	r1, #255	; 0xff
 8005590:	d1f2      	bne.n	8005578 <d_print_mod_list+0x1fc>
 8005592:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005596:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800559a:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
 800559e:	4628      	mov	r0, r5
 80055a0:	4798      	blx	r3
 80055a2:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 80055a6:	3301      	adds	r3, #1
 80055a8:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
 80055ac:	2101      	movs	r1, #1
 80055ae:	2300      	movs	r3, #0
 80055b0:	e7e4      	b.n	800557c <d_print_mod_list+0x200>
 80055b2:	bf00      	nop
 80055b4:	08023e8c 	.word	0x08023e8c
 80055b8:	08023e90 	.word	0x08023e90
 80055bc:	08023e1c 	.word	0x08023e1c
 80055c0:	08023ea0 	.word	0x08023ea0

080055c4 <d_print_array_type>:
 80055c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c8:	4604      	mov	r4, r0
 80055ca:	4617      	mov	r7, r2
 80055cc:	b153      	cbz	r3, 80055e4 <d_print_array_type+0x20>
 80055ce:	461e      	mov	r6, r3
 80055d0:	689d      	ldr	r5, [r3, #8]
 80055d2:	b37d      	cbz	r5, 8005634 <d_print_array_type+0x70>
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1fa      	bne.n	80055d0 <d_print_array_type+0xc>
 80055da:	4632      	mov	r2, r6
 80055dc:	2111      	movs	r1, #17
 80055de:	4620      	mov	r0, r4
 80055e0:	f7ff fecc 	bl	800537c <d_print_mod_list>
 80055e4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80055e8:	2bff      	cmp	r3, #255	; 0xff
 80055ea:	f000 809d 	beq.w	8005728 <d_print_array_type+0x164>
 80055ee:	1c59      	adds	r1, r3, #1
 80055f0:	2220      	movs	r2, #32
 80055f2:	29ff      	cmp	r1, #255	; 0xff
 80055f4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80055f8:	54e2      	strb	r2, [r4, r3]
 80055fa:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80055fe:	d027      	beq.n	8005650 <d_print_array_type+0x8c>
 8005600:	225b      	movs	r2, #91	; 0x5b
 8005602:	1c4b      	adds	r3, r1, #1
 8005604:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005608:	5462      	strb	r2, [r4, r1]
 800560a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	b12a      	cbz	r2, 800561e <d_print_array_type+0x5a>
 8005612:	2111      	movs	r1, #17
 8005614:	4620      	mov	r0, r4
 8005616:	f7ff fa7f 	bl	8004b18 <d_print_comp>
 800561a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800561e:	2bff      	cmp	r3, #255	; 0xff
 8005620:	d02f      	beq.n	8005682 <d_print_array_type+0xbe>
 8005622:	1c59      	adds	r1, r3, #1
 8005624:	225d      	movs	r2, #93	; 0x5d
 8005626:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800562a:	54e2      	strb	r2, [r4, r3]
 800562c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b2a      	cmp	r3, #42	; 0x2a
 800563a:	d132      	bne.n	80056a2 <d_print_array_type+0xde>
 800563c:	2111      	movs	r1, #17
 800563e:	462b      	mov	r3, r5
 8005640:	4632      	mov	r2, r6
 8005642:	4620      	mov	r0, r4
 8005644:	f7ff fe9a 	bl	800537c <d_print_mod_list>
 8005648:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800564c:	29ff      	cmp	r1, #255	; 0xff
 800564e:	d1d7      	bne.n	8005600 <d_print_array_type+0x3c>
 8005650:	2200      	movs	r2, #0
 8005652:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005656:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 800565a:	4620      	mov	r0, r4
 800565c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005660:	4798      	blx	r3
 8005662:	225b      	movs	r2, #91	; 0x5b
 8005664:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005668:	7022      	strb	r2, [r4, #0]
 800566a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	1c59      	adds	r1, r3, #1
 8005672:	2301      	movs	r3, #1
 8005674:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
 8005678:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800567c:	2a00      	cmp	r2, #0
 800567e:	d1c8      	bne.n	8005612 <d_print_array_type+0x4e>
 8005680:	e7cf      	b.n	8005622 <d_print_array_type+0x5e>
 8005682:	2500      	movs	r5, #0
 8005684:	4619      	mov	r1, r3
 8005686:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800568a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800568e:	4620      	mov	r0, r4
 8005690:	4798      	blx	r3
 8005692:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005696:	2101      	movs	r1, #1
 8005698:	440b      	add	r3, r1
 800569a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800569e:	462b      	mov	r3, r5
 80056a0:	e7c0      	b.n	8005624 <d_print_array_type+0x60>
 80056a2:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8005788 <d_print_array_type+0x1c4>
 80056a6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80056aa:	f04f 0920 	mov.w	r9, #32
 80056ae:	f108 0a01 	add.w	sl, r8, #1
 80056b2:	e00c      	b.n	80056ce <d_print_array_type+0x10a>
 80056b4:	460b      	mov	r3, r1
 80056b6:	45d0      	cmp	r8, sl
 80056b8:	f101 0101 	add.w	r1, r1, #1
 80056bc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80056c0:	f804 9003 	strb.w	r9, [r4, r3]
 80056c4:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80056c8:	d01a      	beq.n	8005700 <d_print_array_type+0x13c>
 80056ca:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 80056ce:	29ff      	cmp	r1, #255	; 0xff
 80056d0:	d1f0      	bne.n	80056b4 <d_print_array_type+0xf0>
 80056d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80056d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80056da:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80056de:	4620      	mov	r0, r4
 80056e0:	4798      	blx	r3
 80056e2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80056e6:	3301      	adds	r3, #1
 80056e8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80056ec:	2300      	movs	r3, #0
 80056ee:	2101      	movs	r1, #1
 80056f0:	45d0      	cmp	r8, sl
 80056f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80056f6:	f804 9003 	strb.w	r9, [r4, r3]
 80056fa:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80056fe:	d1e4      	bne.n	80056ca <d_print_array_type+0x106>
 8005700:	2111      	movs	r1, #17
 8005702:	2300      	movs	r3, #0
 8005704:	4632      	mov	r2, r6
 8005706:	4620      	mov	r0, r4
 8005708:	f7ff fe38 	bl	800537c <d_print_mod_list>
 800570c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005710:	29ff      	cmp	r1, #255	; 0xff
 8005712:	d026      	beq.n	8005762 <d_print_array_type+0x19e>
 8005714:	1c4b      	adds	r3, r1, #1
 8005716:	2229      	movs	r2, #41	; 0x29
 8005718:	2bff      	cmp	r3, #255	; 0xff
 800571a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800571e:	5462      	strb	r2, [r4, r1]
 8005720:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005724:	f47f af63 	bne.w	80055ee <d_print_array_type+0x2a>
 8005728:	2200      	movs	r2, #0
 800572a:	4619      	mov	r1, r3
 800572c:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8005730:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
 8005734:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005738:	4620      	mov	r0, r4
 800573a:	47a8      	blx	r5
 800573c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005740:	225b      	movs	r2, #91	; 0x5b
 8005742:	f645 3120 	movw	r1, #23328	; 0x5b20
 8005746:	8021      	strh	r1, [r4, #0]
 8005748:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	3301      	adds	r3, #1
 8005750:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005754:	2302      	movs	r3, #2
 8005756:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800575a:	2a00      	cmp	r2, #0
 800575c:	f47f af59 	bne.w	8005612 <d_print_array_type+0x4e>
 8005760:	e75f      	b.n	8005622 <d_print_array_type+0x5e>
 8005762:	2200      	movs	r2, #0
 8005764:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005768:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 800576c:	4620      	mov	r0, r4
 800576e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005772:	4798      	blx	r3
 8005774:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005778:	2229      	movs	r2, #41	; 0x29
 800577a:	3301      	adds	r3, #1
 800577c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005780:	7022      	strb	r2, [r4, #0]
 8005782:	2301      	movs	r3, #1
 8005784:	e733      	b.n	80055ee <d_print_array_type+0x2a>
 8005786:	bf00      	nop
 8005788:	08024098 	.word	0x08024098

0800578c <d_print_expr_op>:
 800578c:	7811      	ldrb	r1, [r2, #0]
 800578e:	2932      	cmp	r1, #50	; 0x32
 8005790:	d002      	beq.n	8005798 <d_print_expr_op+0xc>
 8005792:	2111      	movs	r1, #17
 8005794:	f7ff b9c0 	b.w	8004b18 <d_print_comp>
 8005798:	68d3      	ldr	r3, [r2, #12]
 800579a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800579e:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
 80057a2:	b367      	cbz	r7, 80057fe <d_print_expr_op+0x72>
 80057a4:	442f      	add	r7, r5
 80057a6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80057aa:	4604      	mov	r4, r0
 80057ac:	3d01      	subs	r5, #1
 80057ae:	3f01      	subs	r7, #1
 80057b0:	f04f 0800 	mov.w	r8, #0
 80057b4:	e009      	b.n	80057ca <d_print_expr_op+0x3e>
 80057b6:	460b      	mov	r3, r1
 80057b8:	42bd      	cmp	r5, r7
 80057ba:	f101 0101 	add.w	r1, r1, #1
 80057be:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80057c2:	54e6      	strb	r6, [r4, r3]
 80057c4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80057c8:	d019      	beq.n	80057fe <d_print_expr_op+0x72>
 80057ca:	29ff      	cmp	r1, #255	; 0xff
 80057cc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80057d0:	d1f1      	bne.n	80057b6 <d_print_expr_op+0x2a>
 80057d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80057d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80057da:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80057de:	4620      	mov	r0, r4
 80057e0:	4798      	blx	r3
 80057e2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80057e6:	3301      	adds	r3, #1
 80057e8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80057ec:	2300      	movs	r3, #0
 80057ee:	2101      	movs	r1, #1
 80057f0:	42bd      	cmp	r5, r7
 80057f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80057f6:	54e6      	strb	r6, [r4, r3]
 80057f8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80057fc:	d1e5      	bne.n	80057ca <d_print_expr_op+0x3e>
 80057fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005802:	bf00      	nop

08005804 <d_demangle_callback.constprop.0>:
 8005804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005808:	ed2d 8b02 	vpush	{d8}
 800580c:	b0e7      	sub	sp, #412	; 0x19c
 800580e:	7803      	ldrb	r3, [r0, #0]
 8005810:	af00      	add	r7, sp, #0
 8005812:	2b5f      	cmp	r3, #95	; 0x5f
 8005814:	e9c7 2100 	strd	r2, r1, [r7]
 8005818:	4605      	mov	r5, r0
 800581a:	f000 8144 	beq.w	8005aa6 <d_demangle_callback.constprop.0+0x2a2>
 800581e:	49a9      	ldr	r1, [pc, #676]	; (8005ac4 <d_demangle_callback.constprop.0+0x2c0>)
 8005820:	2208      	movs	r2, #8
 8005822:	4628      	mov	r0, r5
 8005824:	f016 f923 	bl	801ba6e <strncmp>
 8005828:	2800      	cmp	r0, #0
 800582a:	f000 8107 	beq.w	8005a3c <d_demangle_callback.constprop.0+0x238>
 800582e:	f04f 0900 	mov.w	r9, #0
 8005832:	2301      	movs	r3, #1
 8005834:	f1b9 0f02 	cmp.w	r9, #2
 8005838:	647b      	str	r3, [r7, #68]	; 0x44
 800583a:	bf0c      	ite	eq
 800583c:	2345      	moveq	r3, #69	; 0x45
 800583e:	2346      	movne	r3, #70	; 0x46
 8005840:	f1a9 0a02 	sub.w	sl, r9, #2
 8005844:	ee08 3a10 	vmov	s16, r3
 8005848:	fa5f fa8a 	uxtb.w	sl, sl
 800584c:	4628      	mov	r0, r5
 800584e:	f000 fcf7 	bl	8006240 <strlen>
 8005852:	182b      	adds	r3, r5, r0
 8005854:	0042      	lsls	r2, r0, #1
 8005856:	2100      	movs	r1, #0
 8005858:	e9c7 5303 	strd	r5, r3, [r7, #12]
 800585c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005860:	f04f 0311 	mov.w	r3, #17
 8005864:	e9c7 3505 	strd	r3, r5, [r7, #20]
 8005868:	e9c7 1208 	strd	r1, r2, [r7, #32]
 800586c:	e9c7 100b 	strd	r1, r0, [r7, #44]	; 0x2c
 8005870:	e9c7 110d 	strd	r1, r1, [r7, #52]	; 0x34
 8005874:	e9c7 110f 	strd	r1, r1, [r7, #60]	; 0x3c
 8005878:	64b9      	str	r1, [r7, #72]	; 0x48
 800587a:	f200 811b 	bhi.w	8005ab4 <d_demangle_callback.constprop.0+0x2b0>
 800587e:	0083      	lsls	r3, r0, #2
 8005880:	46e8      	mov	r8, sp
 8005882:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005886:	3307      	adds	r3, #7
 8005888:	eba8 00c0 	sub.w	r0, r8, r0, lsl #3
 800588c:	4685      	mov	sp, r0
 800588e:	f023 0307 	bic.w	r3, r3, #7
 8005892:	466e      	mov	r6, sp
 8005894:	f1b9 0f01 	cmp.w	r9, #1
 8005898:	ebad 0d03 	sub.w	sp, sp, r3
 800589c:	61fe      	str	r6, [r7, #28]
 800589e:	f8c7 d028 	str.w	sp, [r7, #40]	; 0x28
 80058a2:	d040      	beq.n	8005926 <d_demangle_callback.constprop.0+0x122>
 80058a4:	f1ba 0f01 	cmp.w	sl, #1
 80058a8:	d835      	bhi.n	8005916 <d_demangle_callback.constprop.0+0x112>
 80058aa:	7aeb      	ldrb	r3, [r5, #11]
 80058ac:	f105 040b 	add.w	r4, r5, #11
 80058b0:	2b5f      	cmp	r3, #95	; 0x5f
 80058b2:	61bc      	str	r4, [r7, #24]
 80058b4:	d103      	bne.n	80058be <d_demangle_callback.constprop.0+0xba>
 80058b6:	7b2b      	ldrb	r3, [r5, #12]
 80058b8:	2b5a      	cmp	r3, #90	; 0x5a
 80058ba:	f000 80b0 	beq.w	8005a1e <d_demangle_callback.constprop.0+0x21a>
 80058be:	2a00      	cmp	r2, #0
 80058c0:	f340 80ab 	ble.w	8005a1a <d_demangle_callback.constprop.0+0x216>
 80058c4:	4620      	mov	r0, r4
 80058c6:	f000 fcbb 	bl	8006240 <strlen>
 80058ca:	2300      	movs	r3, #0
 80058cc:	2201      	movs	r2, #1
 80058ce:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80058d2:	623a      	str	r2, [r7, #32]
 80058d4:	2800      	cmp	r0, #0
 80058d6:	f000 80a0 	beq.w	8005a1a <d_demangle_callback.constprop.0+0x216>
 80058da:	e9c6 4003 	strd	r4, r0, [r6, #12]
 80058de:	7033      	strb	r3, [r6, #0]
 80058e0:	2300      	movs	r3, #0
 80058e2:	4632      	mov	r2, r6
 80058e4:	ee18 1a10 	vmov	r1, s16
 80058e8:	f107 000c 	add.w	r0, r7, #12
 80058ec:	f7fa fc70 	bl	80001d0 <d_make_comp>
 80058f0:	4606      	mov	r6, r0
 80058f2:	4620      	mov	r0, r4
 80058f4:	f000 fca4 	bl	8006240 <strlen>
 80058f8:	1823      	adds	r3, r4, r0
 80058fa:	61bb      	str	r3, [r7, #24]
 80058fc:	5c23      	ldrb	r3, [r4, r0]
 80058fe:	b913      	cbnz	r3, 8005906 <d_demangle_callback.constprop.0+0x102>
 8005900:	2e00      	cmp	r6, #0
 8005902:	f040 80e1 	bne.w	8005ac8 <d_demangle_callback.constprop.0+0x2c4>
 8005906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005908:	3301      	adds	r3, #1
 800590a:	f040 80c3 	bne.w	8005a94 <d_demangle_callback.constprop.0+0x290>
 800590e:	2300      	movs	r3, #0
 8005910:	647b      	str	r3, [r7, #68]	; 0x44
 8005912:	46c5      	mov	sp, r8
 8005914:	e79a      	b.n	800584c <d_demangle_callback.constprop.0+0x48>
 8005916:	f107 000c 	add.w	r0, r7, #12
 800591a:	f7fb f8a9 	bl	8000a70 <d_type>
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	4606      	mov	r6, r0
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	e7eb      	b.n	80058fe <d_demangle_callback.constprop.0+0xfa>
 8005926:	782b      	ldrb	r3, [r5, #0]
 8005928:	2b5f      	cmp	r3, #95	; 0x5f
 800592a:	d1ec      	bne.n	8005906 <d_demangle_callback.constprop.0+0x102>
 800592c:	786b      	ldrb	r3, [r5, #1]
 800592e:	1c6a      	adds	r2, r5, #1
 8005930:	2b5a      	cmp	r3, #90	; 0x5a
 8005932:	61ba      	str	r2, [r7, #24]
 8005934:	d1e7      	bne.n	8005906 <d_demangle_callback.constprop.0+0x102>
 8005936:	78ab      	ldrb	r3, [r5, #2]
 8005938:	1caa      	adds	r2, r5, #2
 800593a:	2b47      	cmp	r3, #71	; 0x47
 800593c:	61ba      	str	r2, [r7, #24]
 800593e:	f000 809b 	beq.w	8005a78 <d_demangle_callback.constprop.0+0x274>
 8005942:	2b54      	cmp	r3, #84	; 0x54
 8005944:	f000 8098 	beq.w	8005a78 <d_demangle_callback.constprop.0+0x274>
 8005948:	4649      	mov	r1, r9
 800594a:	f107 000c 	add.w	r0, r7, #12
 800594e:	f7fc ffeb 	bl	8002928 <d_encoding.part.0>
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	07db      	lsls	r3, r3, #31
 8005956:	4606      	mov	r6, r0
 8005958:	f140 8097 	bpl.w	8005a8a <d_demangle_callback.constprop.0+0x286>
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	7813      	ldrb	r3, [r2, #0]
 8005960:	2b2e      	cmp	r3, #46	; 0x2e
 8005962:	d1cc      	bne.n	80058fe <d_demangle_callback.constprop.0+0xfa>
 8005964:	4633      	mov	r3, r6
 8005966:	4616      	mov	r6, r2
 8005968:	461a      	mov	r2, r3
 800596a:	7873      	ldrb	r3, [r6, #1]
 800596c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8005970:	2919      	cmp	r1, #25
 8005972:	f04f 0b00 	mov.w	fp, #0
 8005976:	d945      	bls.n	8005a04 <d_demangle_callback.constprop.0+0x200>
 8005978:	2b5f      	cmp	r3, #95	; 0x5f
 800597a:	d043      	beq.n	8005a04 <d_demangle_callback.constprop.0+0x200>
 800597c:	3b30      	subs	r3, #48	; 0x30
 800597e:	2b09      	cmp	r3, #9
 8005980:	f200 80fd 	bhi.w	8005b7e <d_demangle_callback.constprop.0+0x37a>
 8005984:	7831      	ldrb	r1, [r6, #0]
 8005986:	4634      	mov	r4, r6
 8005988:	292e      	cmp	r1, #46	; 0x2e
 800598a:	d112      	bne.n	80059b2 <d_demangle_callback.constprop.0+0x1ae>
 800598c:	7863      	ldrb	r3, [r4, #1]
 800598e:	3b30      	subs	r3, #48	; 0x30
 8005990:	2b09      	cmp	r3, #9
 8005992:	d80e      	bhi.n	80059b2 <d_demangle_callback.constprop.0+0x1ae>
 8005994:	78a3      	ldrb	r3, [r4, #2]
 8005996:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800599a:	1ca0      	adds	r0, r4, #2
 800599c:	2909      	cmp	r1, #9
 800599e:	4604      	mov	r4, r0
 80059a0:	d805      	bhi.n	80059ae <d_demangle_callback.constprop.0+0x1aa>
 80059a2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80059a6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80059aa:	2909      	cmp	r1, #9
 80059ac:	d9f9      	bls.n	80059a2 <d_demangle_callback.constprop.0+0x19e>
 80059ae:	2b2e      	cmp	r3, #46	; 0x2e
 80059b0:	d0ec      	beq.n	800598c <d_demangle_callback.constprop.0+0x188>
 80059b2:	e9d7 1308 	ldrd	r1, r3, [r7, #32]
 80059b6:	4299      	cmp	r1, r3
 80059b8:	61bc      	str	r4, [r7, #24]
 80059ba:	eba4 0006 	sub.w	r0, r4, r6
 80059be:	da67      	bge.n	8005a90 <d_demangle_callback.constprop.0+0x28c>
 80059c0:	f8d7 c01c 	ldr.w	ip, [r7, #28]
 80059c4:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
 80059c8:	eb0c 038e 	add.w	r3, ip, lr, lsl #2
 80059cc:	3101      	adds	r1, #1
 80059ce:	2800      	cmp	r0, #0
 80059d0:	e9c3 bb01 	strd	fp, fp, [r3, #4]
 80059d4:	6239      	str	r1, [r7, #32]
 80059d6:	dd5b      	ble.n	8005a90 <d_demangle_callback.constprop.0+0x28c>
 80059d8:	e9c3 bb01 	strd	fp, fp, [r3, #4]
 80059dc:	f80c b02e 	strb.w	fp, [ip, lr, lsl #2]
 80059e0:	e9c3 6003 	strd	r6, r0, [r3, #12]
 80059e4:	214f      	movs	r1, #79	; 0x4f
 80059e6:	f107 000c 	add.w	r0, r7, #12
 80059ea:	f7fa fbf1 	bl	80001d0 <d_make_comp>
 80059ee:	7823      	ldrb	r3, [r4, #0]
 80059f0:	2b2e      	cmp	r3, #46	; 0x2e
 80059f2:	4602      	mov	r2, r0
 80059f4:	f040 80c1 	bne.w	8005b7a <d_demangle_callback.constprop.0+0x376>
 80059f8:	4626      	mov	r6, r4
 80059fa:	7873      	ldrb	r3, [r6, #1]
 80059fc:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8005a00:	2919      	cmp	r1, #25
 8005a02:	d8b9      	bhi.n	8005978 <d_demangle_callback.constprop.0+0x174>
 8005a04:	1cb3      	adds	r3, r6, #2
 8005a06:	461c      	mov	r4, r3
 8005a08:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005a0c:	f1a1 0061 	sub.w	r0, r1, #97	; 0x61
 8005a10:	2819      	cmp	r0, #25
 8005a12:	d9f8      	bls.n	8005a06 <d_demangle_callback.constprop.0+0x202>
 8005a14:	295f      	cmp	r1, #95	; 0x5f
 8005a16:	d0f6      	beq.n	8005a06 <d_demangle_callback.constprop.0+0x202>
 8005a18:	e7b6      	b.n	8005988 <d_demangle_callback.constprop.0+0x184>
 8005a1a:	2600      	movs	r6, #0
 8005a1c:	e760      	b.n	80058e0 <d_demangle_callback.constprop.0+0xdc>
 8005a1e:	7b6b      	ldrb	r3, [r5, #13]
 8005a20:	f105 020d 	add.w	r2, r5, #13
 8005a24:	2b47      	cmp	r3, #71	; 0x47
 8005a26:	61ba      	str	r2, [r7, #24]
 8005a28:	f107 000c 	add.w	r0, r7, #12
 8005a2c:	d001      	beq.n	8005a32 <d_demangle_callback.constprop.0+0x22e>
 8005a2e:	2b54      	cmp	r3, #84	; 0x54
 8005a30:	d11d      	bne.n	8005a6e <d_demangle_callback.constprop.0+0x26a>
 8005a32:	f7fc fbf1 	bl	8002218 <d_special_name>
 8005a36:	69bc      	ldr	r4, [r7, #24]
 8005a38:	4606      	mov	r6, r0
 8005a3a:	e751      	b.n	80058e0 <d_demangle_callback.constprop.0+0xdc>
 8005a3c:	7a2b      	ldrb	r3, [r5, #8]
 8005a3e:	2b2e      	cmp	r3, #46	; 0x2e
 8005a40:	d004      	beq.n	8005a4c <d_demangle_callback.constprop.0+0x248>
 8005a42:	2b5f      	cmp	r3, #95	; 0x5f
 8005a44:	d002      	beq.n	8005a4c <d_demangle_callback.constprop.0+0x248>
 8005a46:	2b24      	cmp	r3, #36	; 0x24
 8005a48:	f47f aef1 	bne.w	800582e <d_demangle_callback.constprop.0+0x2a>
 8005a4c:	7a6b      	ldrb	r3, [r5, #9]
 8005a4e:	2b44      	cmp	r3, #68	; 0x44
 8005a50:	d002      	beq.n	8005a58 <d_demangle_callback.constprop.0+0x254>
 8005a52:	2b49      	cmp	r3, #73	; 0x49
 8005a54:	f47f aeeb 	bne.w	800582e <d_demangle_callback.constprop.0+0x2a>
 8005a58:	7aaa      	ldrb	r2, [r5, #10]
 8005a5a:	2a5f      	cmp	r2, #95	; 0x5f
 8005a5c:	f47f aee7 	bne.w	800582e <d_demangle_callback.constprop.0+0x2a>
 8005a60:	2b49      	cmp	r3, #73	; 0x49
 8005a62:	bf0c      	ite	eq
 8005a64:	f04f 0902 	moveq.w	r9, #2
 8005a68:	f04f 0903 	movne.w	r9, #3
 8005a6c:	e6e1      	b.n	8005832 <d_demangle_callback.constprop.0+0x2e>
 8005a6e:	f7fc ff5b 	bl	8002928 <d_encoding.part.0>
 8005a72:	69bc      	ldr	r4, [r7, #24]
 8005a74:	4606      	mov	r6, r0
 8005a76:	e733      	b.n	80058e0 <d_demangle_callback.constprop.0+0xdc>
 8005a78:	f107 000c 	add.w	r0, r7, #12
 8005a7c:	f7fc fbcc 	bl	8002218 <d_special_name>
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	07db      	lsls	r3, r3, #31
 8005a84:	4606      	mov	r6, r0
 8005a86:	f53f af69 	bmi.w	800595c <d_demangle_callback.constprop.0+0x158>
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	e736      	b.n	80058fe <d_demangle_callback.constprop.0+0xfa>
 8005a90:	2300      	movs	r3, #0
 8005a92:	e7a7      	b.n	80059e4 <d_demangle_callback.constprop.0+0x1e0>
 8005a94:	2000      	movs	r0, #0
 8005a96:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 8005a9a:	46c5      	mov	sp, r8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	ecbd 8b02 	vpop	{d8}
 8005aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa6:	7843      	ldrb	r3, [r0, #1]
 8005aa8:	2b5a      	cmp	r3, #90	; 0x5a
 8005aaa:	f47f aeb8 	bne.w	800581e <d_demangle_callback.constprop.0+0x1a>
 8005aae:	f04f 0901 	mov.w	r9, #1
 8005ab2:	e6be      	b.n	8005832 <d_demangle_callback.constprop.0+0x2e>
 8005ab4:	4608      	mov	r0, r1
 8005ab6:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 8005aba:	46bd      	mov	sp, r7
 8005abc:	ecbd 8b02 	vpop	{d8}
 8005ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac4:	08023e20 	.word	0x08023e20
 8005ac8:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
 8005ad2:	4631      	mov	r1, r6
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
 8005ada:	4620      	mov	r0, r4
 8005adc:	e9c4 3344 	strd	r3, r3, [r4, #272]	; 0x110
 8005ae0:	e9c4 3349 	strd	r3, r3, [r4, #292]	; 0x124
 8005ae4:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
 8005ae8:	e9c4 334d 	strd	r3, r3, [r4, #308]	; 0x134
 8005aec:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
 8005af0:	607b      	str	r3, [r7, #4]
 8005af2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005af6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005afa:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8005afe:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
 8005b02:	f7fa fc55 	bl	80003b0 <d_count_templates_scopes>
 8005b06:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005b10:	da01      	bge.n	8005b16 <d_demangle_callback.constprop.0+0x312>
 8005b12:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 8005b16:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 8005b1a:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8005b1e:	2901      	cmp	r1, #1
 8005b20:	fb01 f303 	mul.w	r3, r1, r3
 8005b24:	4632      	mov	r2, r6
 8005b26:	bfb8      	it	lt
 8005b28:	2101      	movlt	r1, #1
 8005b2a:	466e      	mov	r6, sp
 8005b2c:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	468d      	mov	sp, r1
 8005b34:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
 8005b38:	4668      	mov	r0, sp
 8005b3a:	bfb8      	it	lt
 8005b3c:	2301      	movlt	r3, #1
 8005b3e:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
 8005b42:	469d      	mov	sp, r3
 8005b44:	2500      	movs	r5, #0
 8005b46:	f8c4 1130 	str.w	r1, [r4, #304]	; 0x130
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	2111      	movs	r1, #17
 8005b4e:	f8c4 d13c 	str.w	sp, [r4, #316]	; 0x13c
 8005b52:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 8005b56:	f7fe ffdf 	bl	8004b18 <d_print_comp>
 8005b5a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005b5e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005b62:	5465      	strb	r5, [r4, r1]
 8005b64:	4620      	mov	r0, r4
 8005b66:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005b6a:	46b5      	mov	sp, r6
 8005b6c:	4798      	blx	r3
 8005b6e:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
 8005b72:	fab0 f080 	clz	r0, r0
 8005b76:	0940      	lsrs	r0, r0, #5
 8005b78:	e78d      	b.n	8005a96 <d_demangle_callback.constprop.0+0x292>
 8005b7a:	4606      	mov	r6, r0
 8005b7c:	e6bf      	b.n	80058fe <d_demangle_callback.constprop.0+0xfa>
 8005b7e:	4616      	mov	r6, r2
 8005b80:	e783      	b.n	8005a8a <d_demangle_callback.constprop.0+0x286>
 8005b82:	bf00      	nop

08005b84 <d_print_subexpr>:
 8005b84:	b570      	push	{r4, r5, r6, lr}
 8005b86:	7813      	ldrb	r3, [r2, #0]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	4615      	mov	r5, r2
 8005b8e:	4604      	mov	r4, r0
 8005b90:	d903      	bls.n	8005b9a <d_print_subexpr+0x16>
 8005b92:	2b31      	cmp	r3, #49	; 0x31
 8005b94:	d001      	beq.n	8005b9a <d_print_subexpr+0x16>
 8005b96:	2b06      	cmp	r3, #6
 8005b98:	d138      	bne.n	8005c0c <d_print_subexpr+0x88>
 8005b9a:	2601      	movs	r6, #1
 8005b9c:	686b      	ldr	r3, [r5, #4]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	dc22      	bgt.n	8005be8 <d_print_subexpr+0x64>
 8005ba2:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
 8005ba6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005baa:	dc1d      	bgt.n	8005be8 <d_print_subexpr+0x64>
 8005bac:	3301      	adds	r3, #1
 8005bae:	3201      	adds	r2, #1
 8005bb0:	606b      	str	r3, [r5, #4]
 8005bb2:	2111      	movs	r1, #17
 8005bb4:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8005bb8:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
 8005bbc:	f8c4 d12c 	str.w	sp, [r4, #300]	; 0x12c
 8005bc0:	462a      	mov	r2, r5
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	9301      	str	r3, [sp, #4]
 8005bc6:	9500      	str	r5, [sp, #0]
 8005bc8:	f7fc ff2a 	bl	8002a20 <d_print_comp_inner>
 8005bcc:	686a      	ldr	r2, [r5, #4]
 8005bce:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8005bd2:	9901      	ldr	r1, [sp, #4]
 8005bd4:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 8005bd8:	3a01      	subs	r2, #1
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	606a      	str	r2, [r5, #4]
 8005bde:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 8005be2:	b136      	cbz	r6, 8005bf2 <d_print_subexpr+0x6e>
 8005be4:	b002      	add	sp, #8
 8005be6:	bd70      	pop	{r4, r5, r6, pc}
 8005be8:	2301      	movs	r3, #1
 8005bea:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8005bee:	2e00      	cmp	r6, #0
 8005bf0:	d1f8      	bne.n	8005be4 <d_print_subexpr+0x60>
 8005bf2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005bf6:	29ff      	cmp	r1, #255	; 0xff
 8005bf8:	d015      	beq.n	8005c26 <d_print_subexpr+0xa2>
 8005bfa:	1c4a      	adds	r2, r1, #1
 8005bfc:	2329      	movs	r3, #41	; 0x29
 8005bfe:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005c02:	5463      	strb	r3, [r4, r1]
 8005c04:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005c08:	b002      	add	sp, #8
 8005c0a:	bd70      	pop	{r4, r5, r6, pc}
 8005c0c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005c10:	29ff      	cmp	r1, #255	; 0xff
 8005c12:	d016      	beq.n	8005c42 <d_print_subexpr+0xbe>
 8005c14:	1c4a      	adds	r2, r1, #1
 8005c16:	2328      	movs	r3, #40	; 0x28
 8005c18:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005c1c:	2600      	movs	r6, #0
 8005c1e:	5463      	strb	r3, [r4, r1]
 8005c20:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005c24:	e7ba      	b.n	8005b9c <d_print_subexpr+0x18>
 8005c26:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8005c2a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005c2e:	4620      	mov	r0, r4
 8005c30:	4798      	blx	r3
 8005c32:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005c36:	2201      	movs	r2, #1
 8005c38:	4413      	add	r3, r2
 8005c3a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005c3e:	4631      	mov	r1, r6
 8005c40:	e7dc      	b.n	8005bfc <d_print_subexpr+0x78>
 8005c42:	2600      	movs	r6, #0
 8005c44:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
 8005c48:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8005c4c:	4798      	blx	r3
 8005c4e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005c52:	2201      	movs	r2, #1
 8005c54:	4413      	add	r3, r2
 8005c56:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005c5a:	4631      	mov	r1, r6
 8005c5c:	e7db      	b.n	8005c16 <d_print_subexpr+0x92>
 8005c5e:	bf00      	nop

08005c60 <d_maybe_print_fold_expression>:
 8005c60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c64:	68d3      	ldr	r3, [r2, #12]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	7819      	ldrb	r1, [r3, #0]
 8005c6c:	2966      	cmp	r1, #102	; 0x66
 8005c6e:	d178      	bne.n	8005d62 <d_maybe_print_fold_expression+0x102>
 8005c70:	6912      	ldr	r2, [r2, #16]
 8005c72:	f8d0 7124 	ldr.w	r7, [r0, #292]	; 0x124
 8005c76:	e9d2 8a03 	ldrd	r8, sl, [r2, #12]
 8005c7a:	f89a 2000 	ldrb.w	r2, [sl]
 8005c7e:	2a3c      	cmp	r2, #60	; 0x3c
 8005c80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c84:	bf08      	it	eq
 8005c86:	e9da a903 	ldrdeq	sl, r9, [sl, #12]
 8005c8a:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
 8005c8e:	785b      	ldrb	r3, [r3, #1]
 8005c90:	bf18      	it	ne
 8005c92:	f04f 0900 	movne.w	r9, #0
 8005c96:	2b6c      	cmp	r3, #108	; 0x6c
 8005c98:	4604      	mov	r4, r0
 8005c9a:	f000 80a2 	beq.w	8005de2 <d_maybe_print_fold_expression+0x182>
 8005c9e:	d863      	bhi.n	8005d68 <d_maybe_print_fold_expression+0x108>
 8005ca0:	2b4c      	cmp	r3, #76	; 0x4c
 8005ca2:	d001      	beq.n	8005ca8 <d_maybe_print_fold_expression+0x48>
 8005ca4:	2b52      	cmp	r3, #82	; 0x52
 8005ca6:	d157      	bne.n	8005d58 <d_maybe_print_fold_expression+0xf8>
 8005ca8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005cac:	29ff      	cmp	r1, #255	; 0xff
 8005cae:	f000 80eb 	beq.w	8005e88 <d_maybe_print_fold_expression+0x228>
 8005cb2:	1c4b      	adds	r3, r1, #1
 8005cb4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005cb8:	2328      	movs	r3, #40	; 0x28
 8005cba:	5463      	strb	r3, [r4, r1]
 8005cbc:	4652      	mov	r2, sl
 8005cbe:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005cc2:	2111      	movs	r1, #17
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	4e78      	ldr	r6, [pc, #480]	; (8005ea8 <d_maybe_print_fold_expression+0x248>)
 8005cc8:	f7ff ff5c 	bl	8005b84 <d_print_subexpr>
 8005ccc:	2111      	movs	r1, #17
 8005cce:	4642      	mov	r2, r8
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	f7ff fd5b 	bl	800578c <d_print_expr_op>
 8005cd6:	f106 0b02 	add.w	fp, r6, #2
 8005cda:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005cde:	252e      	movs	r5, #46	; 0x2e
 8005ce0:	f04f 0a00 	mov.w	sl, #0
 8005ce4:	e00b      	b.n	8005cfe <d_maybe_print_fold_expression+0x9e>
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	455e      	cmp	r6, fp
 8005cea:	f101 0101 	add.w	r1, r1, #1
 8005cee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005cf2:	54e5      	strb	r5, [r4, r3]
 8005cf4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8005cf8:	d019      	beq.n	8005d2e <d_maybe_print_fold_expression+0xce>
 8005cfa:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8005cfe:	29ff      	cmp	r1, #255	; 0xff
 8005d00:	d1f1      	bne.n	8005ce6 <d_maybe_print_fold_expression+0x86>
 8005d02:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005d06:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005d0a:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8005d0e:	4620      	mov	r0, r4
 8005d10:	4798      	blx	r3
 8005d12:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005d16:	3301      	adds	r3, #1
 8005d18:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	2101      	movs	r1, #1
 8005d20:	455e      	cmp	r6, fp
 8005d22:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005d26:	54e5      	strb	r5, [r4, r3]
 8005d28:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8005d2c:	d1e5      	bne.n	8005cfa <d_maybe_print_fold_expression+0x9a>
 8005d2e:	4642      	mov	r2, r8
 8005d30:	2111      	movs	r1, #17
 8005d32:	4620      	mov	r0, r4
 8005d34:	f7ff fd2a 	bl	800578c <d_print_expr_op>
 8005d38:	464a      	mov	r2, r9
 8005d3a:	2111      	movs	r1, #17
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	f7ff ff21 	bl	8005b84 <d_print_subexpr>
 8005d42:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005d46:	29ff      	cmp	r1, #255	; 0xff
 8005d48:	d07f      	beq.n	8005e4a <d_maybe_print_fold_expression+0x1ea>
 8005d4a:	1c4a      	adds	r2, r1, #1
 8005d4c:	2329      	movs	r3, #41	; 0x29
 8005d4e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005d52:	5463      	strb	r3, [r4, r1]
 8005d54:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005d58:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
 8005d5c:	2001      	movs	r0, #1
 8005d5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d62:	2000      	movs	r0, #0
 8005d64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d68:	2b72      	cmp	r3, #114	; 0x72
 8005d6a:	d1f5      	bne.n	8005d58 <d_maybe_print_fold_expression+0xf8>
 8005d6c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005d70:	29ff      	cmp	r1, #255	; 0xff
 8005d72:	d07b      	beq.n	8005e6c <d_maybe_print_fold_expression+0x20c>
 8005d74:	1c4b      	adds	r3, r1, #1
 8005d76:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005d7a:	2328      	movs	r3, #40	; 0x28
 8005d7c:	5463      	strb	r3, [r4, r1]
 8005d7e:	4652      	mov	r2, sl
 8005d80:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005d84:	2111      	movs	r1, #17
 8005d86:	4620      	mov	r0, r4
 8005d88:	4e48      	ldr	r6, [pc, #288]	; (8005eac <d_maybe_print_fold_expression+0x24c>)
 8005d8a:	f7ff fefb 	bl	8005b84 <d_print_subexpr>
 8005d8e:	4642      	mov	r2, r8
 8005d90:	2111      	movs	r1, #17
 8005d92:	4620      	mov	r0, r4
 8005d94:	f7ff fcfa 	bl	800578c <d_print_expr_op>
 8005d98:	f106 0903 	add.w	r9, r6, #3
 8005d9c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005da0:	252e      	movs	r5, #46	; 0x2e
 8005da2:	f04f 0800 	mov.w	r8, #0
 8005da6:	e00a      	b.n	8005dbe <d_maybe_print_fold_expression+0x15e>
 8005da8:	460b      	mov	r3, r1
 8005daa:	3101      	adds	r1, #1
 8005dac:	454e      	cmp	r6, r9
 8005dae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005db2:	54e5      	strb	r5, [r4, r3]
 8005db4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8005db8:	d0ce      	beq.n	8005d58 <d_maybe_print_fold_expression+0xf8>
 8005dba:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8005dbe:	29ff      	cmp	r1, #255	; 0xff
 8005dc0:	d1f2      	bne.n	8005da8 <d_maybe_print_fold_expression+0x148>
 8005dc2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005dc6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005dca:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005dce:	4620      	mov	r0, r4
 8005dd0:	4798      	blx	r3
 8005dd2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005ddc:	2101      	movs	r1, #1
 8005dde:	2300      	movs	r3, #0
 8005de0:	e7e4      	b.n	8005dac <d_maybe_print_fold_expression+0x14c>
 8005de2:	4d33      	ldr	r5, [pc, #204]	; (8005eb0 <d_maybe_print_fold_expression+0x250>)
 8005de4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005de8:	2628      	movs	r6, #40	; 0x28
 8005dea:	f105 0b03 	add.w	fp, r5, #3
 8005dee:	f04f 0900 	mov.w	r9, #0
 8005df2:	e00b      	b.n	8005e0c <d_maybe_print_fold_expression+0x1ac>
 8005df4:	460b      	mov	r3, r1
 8005df6:	45ab      	cmp	fp, r5
 8005df8:	f101 0101 	add.w	r1, r1, #1
 8005dfc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005e00:	54e6      	strb	r6, [r4, r3]
 8005e02:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005e06:	d019      	beq.n	8005e3c <d_maybe_print_fold_expression+0x1dc>
 8005e08:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005e0c:	29ff      	cmp	r1, #255	; 0xff
 8005e0e:	d1f1      	bne.n	8005df4 <d_maybe_print_fold_expression+0x194>
 8005e10:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e14:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e18:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	4798      	blx	r3
 8005e20:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005e24:	3301      	adds	r3, #1
 8005e26:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	45ab      	cmp	fp, r5
 8005e30:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005e34:	54e6      	strb	r6, [r4, r3]
 8005e36:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005e3a:	d1e5      	bne.n	8005e08 <d_maybe_print_fold_expression+0x1a8>
 8005e3c:	4642      	mov	r2, r8
 8005e3e:	2111      	movs	r1, #17
 8005e40:	4620      	mov	r0, r4
 8005e42:	f7ff fca3 	bl	800578c <d_print_expr_op>
 8005e46:	4652      	mov	r2, sl
 8005e48:	e777      	b.n	8005d3a <d_maybe_print_fold_expression+0xda>
 8005e4a:	2500      	movs	r5, #0
 8005e4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e50:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e54:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005e58:	4620      	mov	r0, r4
 8005e5a:	4798      	blx	r3
 8005e5c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005e60:	2201      	movs	r2, #1
 8005e62:	4413      	add	r3, r2
 8005e64:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005e68:	4629      	mov	r1, r5
 8005e6a:	e76f      	b.n	8005d4c <d_maybe_print_fold_expression+0xec>
 8005e6c:	2500      	movs	r5, #0
 8005e6e:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
 8005e72:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005e76:	4798      	blx	r3
 8005e78:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005e82:	4629      	mov	r1, r5
 8005e84:	2301      	movs	r3, #1
 8005e86:	e776      	b.n	8005d76 <d_maybe_print_fold_expression+0x116>
 8005e88:	2500      	movs	r5, #0
 8005e8a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 8005e8e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005e92:	4620      	mov	r0, r4
 8005e94:	4798      	blx	r3
 8005e96:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005ea0:	4629      	mov	r1, r5
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e706      	b.n	8005cb4 <d_maybe_print_fold_expression+0x54>
 8005ea6:	bf00      	nop
 8005ea8:	0802409c 	.word	0x0802409c
 8005eac:	08024198 	.word	0x08024198
 8005eb0:	08024190 	.word	0x08024190

08005eb4 <d_maybe_print_designated_init>:
 8005eb4:	7813      	ldrb	r3, [r2, #0]
 8005eb6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8005eba:	2b38      	cmp	r3, #56	; 0x38
 8005ebc:	d001      	beq.n	8005ec2 <d_maybe_print_designated_init+0xe>
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	4770      	bx	lr
 8005ec2:	68d3      	ldr	r3, [r2, #12]
 8005ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	681f      	ldr	r7, [r3, #0]
 8005ecc:	783b      	ldrb	r3, [r7, #0]
 8005ece:	2b64      	cmp	r3, #100	; 0x64
 8005ed0:	d002      	beq.n	8005ed8 <d_maybe_print_designated_init+0x24>
 8005ed2:	2000      	movs	r0, #0
 8005ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed8:	787b      	ldrb	r3, [r7, #1]
 8005eda:	2b69      	cmp	r3, #105	; 0x69
 8005edc:	4604      	mov	r4, r0
 8005ede:	d011      	beq.n	8005f04 <d_maybe_print_designated_init+0x50>
 8005ee0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005ee4:	2b58      	cmp	r3, #88	; 0x58
 8005ee6:	d1f4      	bne.n	8005ed2 <d_maybe_print_designated_init+0x1e>
 8005ee8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005eec:	6913      	ldr	r3, [r2, #16]
 8005eee:	29ff      	cmp	r1, #255	; 0xff
 8005ef0:	e9d3 5603 	ldrd	r5, r6, [r3, #12]
 8005ef4:	f000 808e 	beq.w	8006014 <d_maybe_print_designated_init+0x160>
 8005ef8:	1c4b      	adds	r3, r1, #1
 8005efa:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005efe:	235b      	movs	r3, #91	; 0x5b
 8005f00:	5463      	strb	r3, [r4, r1]
 8005f02:	e00c      	b.n	8005f1e <d_maybe_print_designated_init+0x6a>
 8005f04:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005f08:	6913      	ldr	r3, [r2, #16]
 8005f0a:	29ff      	cmp	r1, #255	; 0xff
 8005f0c:	e9d3 5603 	ldrd	r5, r6, [r3, #12]
 8005f10:	f000 80b1 	beq.w	8006076 <d_maybe_print_designated_init+0x1c2>
 8005f14:	1c4b      	adds	r3, r1, #1
 8005f16:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005f1a:	232e      	movs	r3, #46	; 0x2e
 8005f1c:	5463      	strb	r3, [r4, r1]
 8005f1e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005f22:	462a      	mov	r2, r5
 8005f24:	2111      	movs	r1, #17
 8005f26:	4620      	mov	r0, r4
 8005f28:	f7fe fdf6 	bl	8004b18 <d_print_comp>
 8005f2c:	787b      	ldrb	r3, [r7, #1]
 8005f2e:	2b58      	cmp	r3, #88	; 0x58
 8005f30:	d03a      	beq.n	8005fa8 <d_maybe_print_designated_init+0xf4>
 8005f32:	2b69      	cmp	r3, #105	; 0x69
 8005f34:	d00b      	beq.n	8005f4e <d_maybe_print_designated_init+0x9a>
 8005f36:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005f3a:	29ff      	cmp	r1, #255	; 0xff
 8005f3c:	f000 808a 	beq.w	8006054 <d_maybe_print_designated_init+0x1a0>
 8005f40:	1c4a      	adds	r2, r1, #1
 8005f42:	235d      	movs	r3, #93	; 0x5d
 8005f44:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005f48:	5463      	strb	r3, [r4, r1]
 8005f4a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005f4e:	7833      	ldrb	r3, [r6, #0]
 8005f50:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8005f54:	2b38      	cmp	r3, #56	; 0x38
 8005f56:	d012      	beq.n	8005f7e <d_maybe_print_designated_init+0xca>
 8005f58:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005f5c:	29ff      	cmp	r1, #255	; 0xff
 8005f5e:	d068      	beq.n	8006032 <d_maybe_print_designated_init+0x17e>
 8005f60:	1c4a      	adds	r2, r1, #1
 8005f62:	233d      	movs	r3, #61	; 0x3d
 8005f64:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005f68:	4620      	mov	r0, r4
 8005f6a:	5463      	strb	r3, [r4, r1]
 8005f6c:	4632      	mov	r2, r6
 8005f6e:	2111      	movs	r1, #17
 8005f70:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005f74:	f7ff fe06 	bl	8005b84 <d_print_subexpr>
 8005f78:	2001      	movs	r0, #1
 8005f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f7e:	68f3      	ldr	r3, [r6, #12]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	781a      	ldrb	r2, [r3, #0]
 8005f86:	2a64      	cmp	r2, #100	; 0x64
 8005f88:	d1e6      	bne.n	8005f58 <d_maybe_print_designated_init+0xa4>
 8005f8a:	785b      	ldrb	r3, [r3, #1]
 8005f8c:	2b69      	cmp	r3, #105	; 0x69
 8005f8e:	d003      	beq.n	8005f98 <d_maybe_print_designated_init+0xe4>
 8005f90:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005f94:	2b58      	cmp	r3, #88	; 0x58
 8005f96:	d1df      	bne.n	8005f58 <d_maybe_print_designated_init+0xa4>
 8005f98:	4620      	mov	r0, r4
 8005f9a:	4632      	mov	r2, r6
 8005f9c:	2111      	movs	r1, #17
 8005f9e:	f7fe fdbb 	bl	8004b18 <d_print_comp>
 8005fa2:	2001      	movs	r0, #1
 8005fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fa8:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8006094 <d_maybe_print_designated_init+0x1e0>
 8005fac:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005fb0:	f108 0a04 	add.w	sl, r8, #4
 8005fb4:	2520      	movs	r5, #32
 8005fb6:	f04f 0900 	mov.w	r9, #0
 8005fba:	e00b      	b.n	8005fd4 <d_maybe_print_designated_init+0x120>
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	45c2      	cmp	sl, r8
 8005fc0:	f101 0101 	add.w	r1, r1, #1
 8005fc4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005fc8:	54e5      	strb	r5, [r4, r3]
 8005fca:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8005fce:	d019      	beq.n	8006004 <d_maybe_print_designated_init+0x150>
 8005fd0:	f818 5f01 	ldrb.w	r5, [r8, #1]!
 8005fd4:	29ff      	cmp	r1, #255	; 0xff
 8005fd6:	d1f1      	bne.n	8005fbc <d_maybe_print_designated_init+0x108>
 8005fd8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005fdc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005fe0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	4798      	blx	r3
 8005fe8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005fec:	3301      	adds	r3, #1
 8005fee:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	45c2      	cmp	sl, r8
 8005ff8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005ffc:	54e5      	strb	r5, [r4, r3]
 8005ffe:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8006002:	d1e5      	bne.n	8005fd0 <d_maybe_print_designated_init+0x11c>
 8006004:	68f2      	ldr	r2, [r6, #12]
 8006006:	2111      	movs	r1, #17
 8006008:	4620      	mov	r0, r4
 800600a:	f7fe fd85 	bl	8004b18 <d_print_comp>
 800600e:	6936      	ldr	r6, [r6, #16]
 8006010:	787b      	ldrb	r3, [r7, #1]
 8006012:	e78e      	b.n	8005f32 <d_maybe_print_designated_init+0x7e>
 8006014:	f04f 0800 	mov.w	r8, #0
 8006018:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800601c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006020:	4798      	blx	r3
 8006022:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8006026:	3301      	adds	r3, #1
 8006028:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800602c:	4641      	mov	r1, r8
 800602e:	2301      	movs	r3, #1
 8006030:	e763      	b.n	8005efa <d_maybe_print_designated_init+0x46>
 8006032:	2500      	movs	r5, #0
 8006034:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006038:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800603c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006040:	4620      	mov	r0, r4
 8006042:	4798      	blx	r3
 8006044:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8006048:	2201      	movs	r2, #1
 800604a:	4413      	add	r3, r2
 800604c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8006050:	4629      	mov	r1, r5
 8006052:	e786      	b.n	8005f62 <d_maybe_print_designated_init+0xae>
 8006054:	2500      	movs	r5, #0
 8006056:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800605a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800605e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006062:	4620      	mov	r0, r4
 8006064:	4798      	blx	r3
 8006066:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800606a:	2201      	movs	r2, #1
 800606c:	4413      	add	r3, r2
 800606e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8006072:	4629      	mov	r1, r5
 8006074:	e765      	b.n	8005f42 <d_maybe_print_designated_init+0x8e>
 8006076:	f04f 0800 	mov.w	r8, #0
 800607a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
 800607e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006082:	4798      	blx	r3
 8006084:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8006088:	3301      	adds	r3, #1
 800608a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800608e:	4641      	mov	r1, r8
 8006090:	2301      	movs	r3, #1
 8006092:	e740      	b.n	8005f16 <d_maybe_print_designated_init+0x62>
 8006094:	080241a0 	.word	0x080241a0

08006098 <__cxa_demangle>:
 8006098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800609c:	461e      	mov	r6, r3
 800609e:	b084      	sub	sp, #16
 80060a0:	2800      	cmp	r0, #0
 80060a2:	d040      	beq.n	8006126 <__cxa_demangle+0x8e>
 80060a4:	460c      	mov	r4, r1
 80060a6:	4615      	mov	r5, r2
 80060a8:	b109      	cbz	r1, 80060ae <__cxa_demangle+0x16>
 80060aa:	2a00      	cmp	r2, #0
 80060ac:	d03b      	beq.n	8006126 <__cxa_demangle+0x8e>
 80060ae:	2300      	movs	r3, #0
 80060b0:	4929      	ldr	r1, [pc, #164]	; (8006158 <__cxa_demangle+0xc0>)
 80060b2:	466a      	mov	r2, sp
 80060b4:	e9cd 3300 	strd	r3, r3, [sp]
 80060b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060bc:	f7ff fba2 	bl	8005804 <d_demangle_callback.constprop.0>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d039      	beq.n	8006138 <__cxa_demangle+0xa0>
 80060c4:	9b03      	ldr	r3, [sp, #12]
 80060c6:	9f00      	ldr	r7, [sp, #0]
 80060c8:	b9d3      	cbnz	r3, 8006100 <__cxa_demangle+0x68>
 80060ca:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80060ce:	2f00      	cmp	r7, #0
 80060d0:	d03c      	beq.n	800614c <__cxa_demangle+0xb4>
 80060d2:	b32c      	cbz	r4, 8006120 <__cxa_demangle+0x88>
 80060d4:	4638      	mov	r0, r7
 80060d6:	f000 f8b3 	bl	8006240 <strlen>
 80060da:	682b      	ldr	r3, [r5, #0]
 80060dc:	4298      	cmp	r0, r3
 80060de:	d219      	bcs.n	8006114 <__cxa_demangle+0x7c>
 80060e0:	4639      	mov	r1, r7
 80060e2:	1c42      	adds	r2, r0, #1
 80060e4:	4620      	mov	r0, r4
 80060e6:	f015 fdd2 	bl	801bc8e <memcpy>
 80060ea:	4638      	mov	r0, r7
 80060ec:	f013 fd68 	bl	8019bc0 <free>
 80060f0:	4627      	mov	r7, r4
 80060f2:	b10e      	cbz	r6, 80060f8 <__cxa_demangle+0x60>
 80060f4:	2300      	movs	r3, #0
 80060f6:	6033      	str	r3, [r6, #0]
 80060f8:	4638      	mov	r0, r7
 80060fa:	b004      	add	sp, #16
 80060fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006100:	f04f 0801 	mov.w	r8, #1
 8006104:	2f00      	cmp	r7, #0
 8006106:	d1e4      	bne.n	80060d2 <__cxa_demangle+0x3a>
 8006108:	b18e      	cbz	r6, 800612e <__cxa_demangle+0x96>
 800610a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800610e:	6033      	str	r3, [r6, #0]
 8006110:	2700      	movs	r7, #0
 8006112:	e7f1      	b.n	80060f8 <__cxa_demangle+0x60>
 8006114:	4620      	mov	r0, r4
 8006116:	f013 fd53 	bl	8019bc0 <free>
 800611a:	f8c5 8000 	str.w	r8, [r5]
 800611e:	e7e8      	b.n	80060f2 <__cxa_demangle+0x5a>
 8006120:	2d00      	cmp	r5, #0
 8006122:	d1fa      	bne.n	800611a <__cxa_demangle+0x82>
 8006124:	e7e5      	b.n	80060f2 <__cxa_demangle+0x5a>
 8006126:	b116      	cbz	r6, 800612e <__cxa_demangle+0x96>
 8006128:	f06f 0302 	mvn.w	r3, #2
 800612c:	6033      	str	r3, [r6, #0]
 800612e:	2700      	movs	r7, #0
 8006130:	4638      	mov	r0, r7
 8006132:	b004      	add	sp, #16
 8006134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006138:	9800      	ldr	r0, [sp, #0]
 800613a:	f013 fd41 	bl	8019bc0 <free>
 800613e:	2e00      	cmp	r6, #0
 8006140:	d0f5      	beq.n	800612e <__cxa_demangle+0x96>
 8006142:	f06f 0301 	mvn.w	r3, #1
 8006146:	6033      	str	r3, [r6, #0]
 8006148:	2700      	movs	r7, #0
 800614a:	e7d5      	b.n	80060f8 <__cxa_demangle+0x60>
 800614c:	2e00      	cmp	r6, #0
 800614e:	d0ee      	beq.n	800612e <__cxa_demangle+0x96>
 8006150:	f1b8 0f01 	cmp.w	r8, #1
 8006154:	d0d9      	beq.n	800610a <__cxa_demangle+0x72>
 8006156:	e7f4      	b.n	8006142 <__cxa_demangle+0xaa>
 8006158:	08000505 	.word	0x08000505

0800615c <__gcclibcxx_demangle_callback>:
 800615c:	b160      	cbz	r0, 8006178 <__gcclibcxx_demangle_callback+0x1c>
 800615e:	b508      	push	{r3, lr}
 8006160:	b139      	cbz	r1, 8006172 <__gcclibcxx_demangle_callback+0x16>
 8006162:	f7ff fb4f 	bl	8005804 <d_demangle_callback.constprop.0>
 8006166:	2800      	cmp	r0, #0
 8006168:	bf14      	ite	ne
 800616a:	2000      	movne	r0, #0
 800616c:	f06f 0001 	mvneq.w	r0, #1
 8006170:	bd08      	pop	{r3, pc}
 8006172:	f06f 0002 	mvn.w	r0, #2
 8006176:	bd08      	pop	{r3, pc}
 8006178:	f06f 0002 	mvn.w	r0, #2
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop

08006180 <strcmp>:
 8006180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006188:	2a01      	cmp	r2, #1
 800618a:	bf28      	it	cs
 800618c:	429a      	cmpcs	r2, r3
 800618e:	d0f7      	beq.n	8006180 <strcmp>
 8006190:	1ad0      	subs	r0, r2, r3
 8006192:	4770      	bx	lr
	...

080061a0 <memchr>:
 80061a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80061a4:	2a10      	cmp	r2, #16
 80061a6:	db2b      	blt.n	8006200 <memchr+0x60>
 80061a8:	f010 0f07 	tst.w	r0, #7
 80061ac:	d008      	beq.n	80061c0 <memchr+0x20>
 80061ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80061b2:	3a01      	subs	r2, #1
 80061b4:	428b      	cmp	r3, r1
 80061b6:	d02d      	beq.n	8006214 <memchr+0x74>
 80061b8:	f010 0f07 	tst.w	r0, #7
 80061bc:	b342      	cbz	r2, 8006210 <memchr+0x70>
 80061be:	d1f6      	bne.n	80061ae <memchr+0xe>
 80061c0:	b4f0      	push	{r4, r5, r6, r7}
 80061c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80061c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80061ca:	f022 0407 	bic.w	r4, r2, #7
 80061ce:	f07f 0700 	mvns.w	r7, #0
 80061d2:	2300      	movs	r3, #0
 80061d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80061d8:	3c08      	subs	r4, #8
 80061da:	ea85 0501 	eor.w	r5, r5, r1
 80061de:	ea86 0601 	eor.w	r6, r6, r1
 80061e2:	fa85 f547 	uadd8	r5, r5, r7
 80061e6:	faa3 f587 	sel	r5, r3, r7
 80061ea:	fa86 f647 	uadd8	r6, r6, r7
 80061ee:	faa5 f687 	sel	r6, r5, r7
 80061f2:	b98e      	cbnz	r6, 8006218 <memchr+0x78>
 80061f4:	d1ee      	bne.n	80061d4 <memchr+0x34>
 80061f6:	bcf0      	pop	{r4, r5, r6, r7}
 80061f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80061fc:	f002 0207 	and.w	r2, r2, #7
 8006200:	b132      	cbz	r2, 8006210 <memchr+0x70>
 8006202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006206:	3a01      	subs	r2, #1
 8006208:	ea83 0301 	eor.w	r3, r3, r1
 800620c:	b113      	cbz	r3, 8006214 <memchr+0x74>
 800620e:	d1f8      	bne.n	8006202 <memchr+0x62>
 8006210:	2000      	movs	r0, #0
 8006212:	4770      	bx	lr
 8006214:	3801      	subs	r0, #1
 8006216:	4770      	bx	lr
 8006218:	2d00      	cmp	r5, #0
 800621a:	bf06      	itte	eq
 800621c:	4635      	moveq	r5, r6
 800621e:	3803      	subeq	r0, #3
 8006220:	3807      	subne	r0, #7
 8006222:	f015 0f01 	tst.w	r5, #1
 8006226:	d107      	bne.n	8006238 <memchr+0x98>
 8006228:	3001      	adds	r0, #1
 800622a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800622e:	bf02      	ittt	eq
 8006230:	3001      	addeq	r0, #1
 8006232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8006236:	3001      	addeq	r0, #1
 8006238:	bcf0      	pop	{r4, r5, r6, r7}
 800623a:	3801      	subs	r0, #1
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop

08006240 <strlen>:
 8006240:	4603      	mov	r3, r0
 8006242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006246:	2a00      	cmp	r2, #0
 8006248:	d1fb      	bne.n	8006242 <strlen+0x2>
 800624a:	1a18      	subs	r0, r3, r0
 800624c:	3801      	subs	r0, #1
 800624e:	4770      	bx	lr

08006250 <__aeabi_drsub>:
 8006250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006254:	e002      	b.n	800625c <__adddf3>
 8006256:	bf00      	nop

08006258 <__aeabi_dsub>:
 8006258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800625c <__adddf3>:
 800625c:	b530      	push	{r4, r5, lr}
 800625e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006266:	ea94 0f05 	teq	r4, r5
 800626a:	bf08      	it	eq
 800626c:	ea90 0f02 	teqeq	r0, r2
 8006270:	bf1f      	itttt	ne
 8006272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800627a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800627e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006282:	f000 80e2 	beq.w	800644a <__adddf3+0x1ee>
 8006286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800628a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800628e:	bfb8      	it	lt
 8006290:	426d      	neglt	r5, r5
 8006292:	dd0c      	ble.n	80062ae <__adddf3+0x52>
 8006294:	442c      	add	r4, r5
 8006296:	ea80 0202 	eor.w	r2, r0, r2
 800629a:	ea81 0303 	eor.w	r3, r1, r3
 800629e:	ea82 0000 	eor.w	r0, r2, r0
 80062a2:	ea83 0101 	eor.w	r1, r3, r1
 80062a6:	ea80 0202 	eor.w	r2, r0, r2
 80062aa:	ea81 0303 	eor.w	r3, r1, r3
 80062ae:	2d36      	cmp	r5, #54	; 0x36
 80062b0:	bf88      	it	hi
 80062b2:	bd30      	pophi	{r4, r5, pc}
 80062b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80062b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80062bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80062c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80062c4:	d002      	beq.n	80062cc <__adddf3+0x70>
 80062c6:	4240      	negs	r0, r0
 80062c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80062cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80062d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80062d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80062d8:	d002      	beq.n	80062e0 <__adddf3+0x84>
 80062da:	4252      	negs	r2, r2
 80062dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80062e0:	ea94 0f05 	teq	r4, r5
 80062e4:	f000 80a7 	beq.w	8006436 <__adddf3+0x1da>
 80062e8:	f1a4 0401 	sub.w	r4, r4, #1
 80062ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80062f0:	db0d      	blt.n	800630e <__adddf3+0xb2>
 80062f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80062f6:	fa22 f205 	lsr.w	r2, r2, r5
 80062fa:	1880      	adds	r0, r0, r2
 80062fc:	f141 0100 	adc.w	r1, r1, #0
 8006300:	fa03 f20e 	lsl.w	r2, r3, lr
 8006304:	1880      	adds	r0, r0, r2
 8006306:	fa43 f305 	asr.w	r3, r3, r5
 800630a:	4159      	adcs	r1, r3
 800630c:	e00e      	b.n	800632c <__adddf3+0xd0>
 800630e:	f1a5 0520 	sub.w	r5, r5, #32
 8006312:	f10e 0e20 	add.w	lr, lr, #32
 8006316:	2a01      	cmp	r2, #1
 8006318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800631c:	bf28      	it	cs
 800631e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006322:	fa43 f305 	asr.w	r3, r3, r5
 8006326:	18c0      	adds	r0, r0, r3
 8006328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800632c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006330:	d507      	bpl.n	8006342 <__adddf3+0xe6>
 8006332:	f04f 0e00 	mov.w	lr, #0
 8006336:	f1dc 0c00 	rsbs	ip, ip, #0
 800633a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800633e:	eb6e 0101 	sbc.w	r1, lr, r1
 8006342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006346:	d31b      	bcc.n	8006380 <__adddf3+0x124>
 8006348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800634c:	d30c      	bcc.n	8006368 <__adddf3+0x10c>
 800634e:	0849      	lsrs	r1, r1, #1
 8006350:	ea5f 0030 	movs.w	r0, r0, rrx
 8006354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006358:	f104 0401 	add.w	r4, r4, #1
 800635c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006364:	f080 809a 	bcs.w	800649c <__adddf3+0x240>
 8006368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800636c:	bf08      	it	eq
 800636e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006372:	f150 0000 	adcs.w	r0, r0, #0
 8006376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800637a:	ea41 0105 	orr.w	r1, r1, r5
 800637e:	bd30      	pop	{r4, r5, pc}
 8006380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006384:	4140      	adcs	r0, r0
 8006386:	eb41 0101 	adc.w	r1, r1, r1
 800638a:	3c01      	subs	r4, #1
 800638c:	bf28      	it	cs
 800638e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8006392:	d2e9      	bcs.n	8006368 <__adddf3+0x10c>
 8006394:	f091 0f00 	teq	r1, #0
 8006398:	bf04      	itt	eq
 800639a:	4601      	moveq	r1, r0
 800639c:	2000      	moveq	r0, #0
 800639e:	fab1 f381 	clz	r3, r1
 80063a2:	bf08      	it	eq
 80063a4:	3320      	addeq	r3, #32
 80063a6:	f1a3 030b 	sub.w	r3, r3, #11
 80063aa:	f1b3 0220 	subs.w	r2, r3, #32
 80063ae:	da0c      	bge.n	80063ca <__adddf3+0x16e>
 80063b0:	320c      	adds	r2, #12
 80063b2:	dd08      	ble.n	80063c6 <__adddf3+0x16a>
 80063b4:	f102 0c14 	add.w	ip, r2, #20
 80063b8:	f1c2 020c 	rsb	r2, r2, #12
 80063bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80063c0:	fa21 f102 	lsr.w	r1, r1, r2
 80063c4:	e00c      	b.n	80063e0 <__adddf3+0x184>
 80063c6:	f102 0214 	add.w	r2, r2, #20
 80063ca:	bfd8      	it	le
 80063cc:	f1c2 0c20 	rsble	ip, r2, #32
 80063d0:	fa01 f102 	lsl.w	r1, r1, r2
 80063d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80063d8:	bfdc      	itt	le
 80063da:	ea41 010c 	orrle.w	r1, r1, ip
 80063de:	4090      	lslle	r0, r2
 80063e0:	1ae4      	subs	r4, r4, r3
 80063e2:	bfa2      	ittt	ge
 80063e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80063e8:	4329      	orrge	r1, r5
 80063ea:	bd30      	popge	{r4, r5, pc}
 80063ec:	ea6f 0404 	mvn.w	r4, r4
 80063f0:	3c1f      	subs	r4, #31
 80063f2:	da1c      	bge.n	800642e <__adddf3+0x1d2>
 80063f4:	340c      	adds	r4, #12
 80063f6:	dc0e      	bgt.n	8006416 <__adddf3+0x1ba>
 80063f8:	f104 0414 	add.w	r4, r4, #20
 80063fc:	f1c4 0220 	rsb	r2, r4, #32
 8006400:	fa20 f004 	lsr.w	r0, r0, r4
 8006404:	fa01 f302 	lsl.w	r3, r1, r2
 8006408:	ea40 0003 	orr.w	r0, r0, r3
 800640c:	fa21 f304 	lsr.w	r3, r1, r4
 8006410:	ea45 0103 	orr.w	r1, r5, r3
 8006414:	bd30      	pop	{r4, r5, pc}
 8006416:	f1c4 040c 	rsb	r4, r4, #12
 800641a:	f1c4 0220 	rsb	r2, r4, #32
 800641e:	fa20 f002 	lsr.w	r0, r0, r2
 8006422:	fa01 f304 	lsl.w	r3, r1, r4
 8006426:	ea40 0003 	orr.w	r0, r0, r3
 800642a:	4629      	mov	r1, r5
 800642c:	bd30      	pop	{r4, r5, pc}
 800642e:	fa21 f004 	lsr.w	r0, r1, r4
 8006432:	4629      	mov	r1, r5
 8006434:	bd30      	pop	{r4, r5, pc}
 8006436:	f094 0f00 	teq	r4, #0
 800643a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800643e:	bf06      	itte	eq
 8006440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006444:	3401      	addeq	r4, #1
 8006446:	3d01      	subne	r5, #1
 8006448:	e74e      	b.n	80062e8 <__adddf3+0x8c>
 800644a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800644e:	bf18      	it	ne
 8006450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006454:	d029      	beq.n	80064aa <__adddf3+0x24e>
 8006456:	ea94 0f05 	teq	r4, r5
 800645a:	bf08      	it	eq
 800645c:	ea90 0f02 	teqeq	r0, r2
 8006460:	d005      	beq.n	800646e <__adddf3+0x212>
 8006462:	ea54 0c00 	orrs.w	ip, r4, r0
 8006466:	bf04      	itt	eq
 8006468:	4619      	moveq	r1, r3
 800646a:	4610      	moveq	r0, r2
 800646c:	bd30      	pop	{r4, r5, pc}
 800646e:	ea91 0f03 	teq	r1, r3
 8006472:	bf1e      	ittt	ne
 8006474:	2100      	movne	r1, #0
 8006476:	2000      	movne	r0, #0
 8006478:	bd30      	popne	{r4, r5, pc}
 800647a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800647e:	d105      	bne.n	800648c <__adddf3+0x230>
 8006480:	0040      	lsls	r0, r0, #1
 8006482:	4149      	adcs	r1, r1
 8006484:	bf28      	it	cs
 8006486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800648a:	bd30      	pop	{r4, r5, pc}
 800648c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006490:	bf3c      	itt	cc
 8006492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006496:	bd30      	popcc	{r4, r5, pc}
 8006498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800649c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80064a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80064a4:	f04f 0000 	mov.w	r0, #0
 80064a8:	bd30      	pop	{r4, r5, pc}
 80064aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80064ae:	bf1a      	itte	ne
 80064b0:	4619      	movne	r1, r3
 80064b2:	4610      	movne	r0, r2
 80064b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80064b8:	bf1c      	itt	ne
 80064ba:	460b      	movne	r3, r1
 80064bc:	4602      	movne	r2, r0
 80064be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80064c2:	bf06      	itte	eq
 80064c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80064c8:	ea91 0f03 	teqeq	r1, r3
 80064cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80064d0:	bd30      	pop	{r4, r5, pc}
 80064d2:	bf00      	nop

080064d4 <__aeabi_ui2d>:
 80064d4:	f090 0f00 	teq	r0, #0
 80064d8:	bf04      	itt	eq
 80064da:	2100      	moveq	r1, #0
 80064dc:	4770      	bxeq	lr
 80064de:	b530      	push	{r4, r5, lr}
 80064e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80064e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80064e8:	f04f 0500 	mov.w	r5, #0
 80064ec:	f04f 0100 	mov.w	r1, #0
 80064f0:	e750      	b.n	8006394 <__adddf3+0x138>
 80064f2:	bf00      	nop

080064f4 <__aeabi_i2d>:
 80064f4:	f090 0f00 	teq	r0, #0
 80064f8:	bf04      	itt	eq
 80064fa:	2100      	moveq	r1, #0
 80064fc:	4770      	bxeq	lr
 80064fe:	b530      	push	{r4, r5, lr}
 8006500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800650c:	bf48      	it	mi
 800650e:	4240      	negmi	r0, r0
 8006510:	f04f 0100 	mov.w	r1, #0
 8006514:	e73e      	b.n	8006394 <__adddf3+0x138>
 8006516:	bf00      	nop

08006518 <__aeabi_f2d>:
 8006518:	0042      	lsls	r2, r0, #1
 800651a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800651e:	ea4f 0131 	mov.w	r1, r1, rrx
 8006522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006526:	bf1f      	itttt	ne
 8006528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800652c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006534:	4770      	bxne	lr
 8006536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800653a:	bf08      	it	eq
 800653c:	4770      	bxeq	lr
 800653e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8006542:	bf04      	itt	eq
 8006544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8006548:	4770      	bxeq	lr
 800654a:	b530      	push	{r4, r5, lr}
 800654c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006558:	e71c      	b.n	8006394 <__adddf3+0x138>
 800655a:	bf00      	nop

0800655c <__aeabi_ul2d>:
 800655c:	ea50 0201 	orrs.w	r2, r0, r1
 8006560:	bf08      	it	eq
 8006562:	4770      	bxeq	lr
 8006564:	b530      	push	{r4, r5, lr}
 8006566:	f04f 0500 	mov.w	r5, #0
 800656a:	e00a      	b.n	8006582 <__aeabi_l2d+0x16>

0800656c <__aeabi_l2d>:
 800656c:	ea50 0201 	orrs.w	r2, r0, r1
 8006570:	bf08      	it	eq
 8006572:	4770      	bxeq	lr
 8006574:	b530      	push	{r4, r5, lr}
 8006576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800657a:	d502      	bpl.n	8006582 <__aeabi_l2d+0x16>
 800657c:	4240      	negs	r0, r0
 800657e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800658a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800658e:	f43f aed8 	beq.w	8006342 <__adddf3+0xe6>
 8006592:	f04f 0203 	mov.w	r2, #3
 8006596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800659a:	bf18      	it	ne
 800659c:	3203      	addne	r2, #3
 800659e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80065a2:	bf18      	it	ne
 80065a4:	3203      	addne	r2, #3
 80065a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80065aa:	f1c2 0320 	rsb	r3, r2, #32
 80065ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80065b2:	fa20 f002 	lsr.w	r0, r0, r2
 80065b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80065ba:	ea40 000e 	orr.w	r0, r0, lr
 80065be:	fa21 f102 	lsr.w	r1, r1, r2
 80065c2:	4414      	add	r4, r2
 80065c4:	e6bd      	b.n	8006342 <__adddf3+0xe6>
 80065c6:	bf00      	nop

080065c8 <__aeabi_dmul>:
 80065c8:	b570      	push	{r4, r5, r6, lr}
 80065ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80065ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80065d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80065d6:	bf1d      	ittte	ne
 80065d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80065dc:	ea94 0f0c 	teqne	r4, ip
 80065e0:	ea95 0f0c 	teqne	r5, ip
 80065e4:	f000 f8de 	bleq	80067a4 <__aeabi_dmul+0x1dc>
 80065e8:	442c      	add	r4, r5
 80065ea:	ea81 0603 	eor.w	r6, r1, r3
 80065ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80065f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80065f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80065fa:	bf18      	it	ne
 80065fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006608:	d038      	beq.n	800667c <__aeabi_dmul+0xb4>
 800660a:	fba0 ce02 	umull	ip, lr, r0, r2
 800660e:	f04f 0500 	mov.w	r5, #0
 8006612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8006616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800661a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800661e:	f04f 0600 	mov.w	r6, #0
 8006622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8006626:	f09c 0f00 	teq	ip, #0
 800662a:	bf18      	it	ne
 800662c:	f04e 0e01 	orrne.w	lr, lr, #1
 8006630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8006634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800663c:	d204      	bcs.n	8006648 <__aeabi_dmul+0x80>
 800663e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8006642:	416d      	adcs	r5, r5
 8006644:	eb46 0606 	adc.w	r6, r6, r6
 8006648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800664c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800665c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006660:	bf88      	it	hi
 8006662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006666:	d81e      	bhi.n	80066a6 <__aeabi_dmul+0xde>
 8006668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800666c:	bf08      	it	eq
 800666e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8006672:	f150 0000 	adcs.w	r0, r0, #0
 8006676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800667a:	bd70      	pop	{r4, r5, r6, pc}
 800667c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8006680:	ea46 0101 	orr.w	r1, r6, r1
 8006684:	ea40 0002 	orr.w	r0, r0, r2
 8006688:	ea81 0103 	eor.w	r1, r1, r3
 800668c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8006690:	bfc2      	ittt	gt
 8006692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800669a:	bd70      	popgt	{r4, r5, r6, pc}
 800669c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80066a0:	f04f 0e00 	mov.w	lr, #0
 80066a4:	3c01      	subs	r4, #1
 80066a6:	f300 80ab 	bgt.w	8006800 <__aeabi_dmul+0x238>
 80066aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80066ae:	bfde      	ittt	le
 80066b0:	2000      	movle	r0, #0
 80066b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80066b6:	bd70      	pople	{r4, r5, r6, pc}
 80066b8:	f1c4 0400 	rsb	r4, r4, #0
 80066bc:	3c20      	subs	r4, #32
 80066be:	da35      	bge.n	800672c <__aeabi_dmul+0x164>
 80066c0:	340c      	adds	r4, #12
 80066c2:	dc1b      	bgt.n	80066fc <__aeabi_dmul+0x134>
 80066c4:	f104 0414 	add.w	r4, r4, #20
 80066c8:	f1c4 0520 	rsb	r5, r4, #32
 80066cc:	fa00 f305 	lsl.w	r3, r0, r5
 80066d0:	fa20 f004 	lsr.w	r0, r0, r4
 80066d4:	fa01 f205 	lsl.w	r2, r1, r5
 80066d8:	ea40 0002 	orr.w	r0, r0, r2
 80066dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80066e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80066e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80066e8:	fa21 f604 	lsr.w	r6, r1, r4
 80066ec:	eb42 0106 	adc.w	r1, r2, r6
 80066f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80066f4:	bf08      	it	eq
 80066f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80066fa:	bd70      	pop	{r4, r5, r6, pc}
 80066fc:	f1c4 040c 	rsb	r4, r4, #12
 8006700:	f1c4 0520 	rsb	r5, r4, #32
 8006704:	fa00 f304 	lsl.w	r3, r0, r4
 8006708:	fa20 f005 	lsr.w	r0, r0, r5
 800670c:	fa01 f204 	lsl.w	r2, r1, r4
 8006710:	ea40 0002 	orr.w	r0, r0, r2
 8006714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800671c:	f141 0100 	adc.w	r1, r1, #0
 8006720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006724:	bf08      	it	eq
 8006726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800672a:	bd70      	pop	{r4, r5, r6, pc}
 800672c:	f1c4 0520 	rsb	r5, r4, #32
 8006730:	fa00 f205 	lsl.w	r2, r0, r5
 8006734:	ea4e 0e02 	orr.w	lr, lr, r2
 8006738:	fa20 f304 	lsr.w	r3, r0, r4
 800673c:	fa01 f205 	lsl.w	r2, r1, r5
 8006740:	ea43 0302 	orr.w	r3, r3, r2
 8006744:	fa21 f004 	lsr.w	r0, r1, r4
 8006748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800674c:	fa21 f204 	lsr.w	r2, r1, r4
 8006750:	ea20 0002 	bic.w	r0, r0, r2
 8006754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800675c:	bf08      	it	eq
 800675e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006762:	bd70      	pop	{r4, r5, r6, pc}
 8006764:	f094 0f00 	teq	r4, #0
 8006768:	d10f      	bne.n	800678a <__aeabi_dmul+0x1c2>
 800676a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800676e:	0040      	lsls	r0, r0, #1
 8006770:	eb41 0101 	adc.w	r1, r1, r1
 8006774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006778:	bf08      	it	eq
 800677a:	3c01      	subeq	r4, #1
 800677c:	d0f7      	beq.n	800676e <__aeabi_dmul+0x1a6>
 800677e:	ea41 0106 	orr.w	r1, r1, r6
 8006782:	f095 0f00 	teq	r5, #0
 8006786:	bf18      	it	ne
 8006788:	4770      	bxne	lr
 800678a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800678e:	0052      	lsls	r2, r2, #1
 8006790:	eb43 0303 	adc.w	r3, r3, r3
 8006794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006798:	bf08      	it	eq
 800679a:	3d01      	subeq	r5, #1
 800679c:	d0f7      	beq.n	800678e <__aeabi_dmul+0x1c6>
 800679e:	ea43 0306 	orr.w	r3, r3, r6
 80067a2:	4770      	bx	lr
 80067a4:	ea94 0f0c 	teq	r4, ip
 80067a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80067ac:	bf18      	it	ne
 80067ae:	ea95 0f0c 	teqne	r5, ip
 80067b2:	d00c      	beq.n	80067ce <__aeabi_dmul+0x206>
 80067b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80067b8:	bf18      	it	ne
 80067ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80067be:	d1d1      	bne.n	8006764 <__aeabi_dmul+0x19c>
 80067c0:	ea81 0103 	eor.w	r1, r1, r3
 80067c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80067c8:	f04f 0000 	mov.w	r0, #0
 80067cc:	bd70      	pop	{r4, r5, r6, pc}
 80067ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80067d2:	bf06      	itte	eq
 80067d4:	4610      	moveq	r0, r2
 80067d6:	4619      	moveq	r1, r3
 80067d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80067dc:	d019      	beq.n	8006812 <__aeabi_dmul+0x24a>
 80067de:	ea94 0f0c 	teq	r4, ip
 80067e2:	d102      	bne.n	80067ea <__aeabi_dmul+0x222>
 80067e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80067e8:	d113      	bne.n	8006812 <__aeabi_dmul+0x24a>
 80067ea:	ea95 0f0c 	teq	r5, ip
 80067ee:	d105      	bne.n	80067fc <__aeabi_dmul+0x234>
 80067f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80067f4:	bf1c      	itt	ne
 80067f6:	4610      	movne	r0, r2
 80067f8:	4619      	movne	r1, r3
 80067fa:	d10a      	bne.n	8006812 <__aeabi_dmul+0x24a>
 80067fc:	ea81 0103 	eor.w	r1, r1, r3
 8006800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800680c:	f04f 0000 	mov.w	r0, #0
 8006810:	bd70      	pop	{r4, r5, r6, pc}
 8006812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800681a:	bd70      	pop	{r4, r5, r6, pc}

0800681c <__aeabi_ddiv>:
 800681c:	b570      	push	{r4, r5, r6, lr}
 800681e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800682a:	bf1d      	ittte	ne
 800682c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006830:	ea94 0f0c 	teqne	r4, ip
 8006834:	ea95 0f0c 	teqne	r5, ip
 8006838:	f000 f8a7 	bleq	800698a <__aeabi_ddiv+0x16e>
 800683c:	eba4 0405 	sub.w	r4, r4, r5
 8006840:	ea81 0e03 	eor.w	lr, r1, r3
 8006844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800684c:	f000 8088 	beq.w	8006960 <__aeabi_ddiv+0x144>
 8006850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800685c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8006864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800686c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8006870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8006874:	429d      	cmp	r5, r3
 8006876:	bf08      	it	eq
 8006878:	4296      	cmpeq	r6, r2
 800687a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800687e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8006882:	d202      	bcs.n	800688a <__aeabi_ddiv+0x6e>
 8006884:	085b      	lsrs	r3, r3, #1
 8006886:	ea4f 0232 	mov.w	r2, r2, rrx
 800688a:	1ab6      	subs	r6, r6, r2
 800688c:	eb65 0503 	sbc.w	r5, r5, r3
 8006890:	085b      	lsrs	r3, r3, #1
 8006892:	ea4f 0232 	mov.w	r2, r2, rrx
 8006896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800689a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800689e:	ebb6 0e02 	subs.w	lr, r6, r2
 80068a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80068a6:	bf22      	ittt	cs
 80068a8:	1ab6      	subcs	r6, r6, r2
 80068aa:	4675      	movcs	r5, lr
 80068ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80068b0:	085b      	lsrs	r3, r3, #1
 80068b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80068b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80068ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80068be:	bf22      	ittt	cs
 80068c0:	1ab6      	subcs	r6, r6, r2
 80068c2:	4675      	movcs	r5, lr
 80068c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80068c8:	085b      	lsrs	r3, r3, #1
 80068ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80068ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80068d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80068d6:	bf22      	ittt	cs
 80068d8:	1ab6      	subcs	r6, r6, r2
 80068da:	4675      	movcs	r5, lr
 80068dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80068e0:	085b      	lsrs	r3, r3, #1
 80068e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80068e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80068ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80068ee:	bf22      	ittt	cs
 80068f0:	1ab6      	subcs	r6, r6, r2
 80068f2:	4675      	movcs	r5, lr
 80068f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80068f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80068fc:	d018      	beq.n	8006930 <__aeabi_ddiv+0x114>
 80068fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800690a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800690e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800691a:	d1c0      	bne.n	800689e <__aeabi_ddiv+0x82>
 800691c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006920:	d10b      	bne.n	800693a <__aeabi_ddiv+0x11e>
 8006922:	ea41 0100 	orr.w	r1, r1, r0
 8006926:	f04f 0000 	mov.w	r0, #0
 800692a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800692e:	e7b6      	b.n	800689e <__aeabi_ddiv+0x82>
 8006930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006934:	bf04      	itt	eq
 8006936:	4301      	orreq	r1, r0
 8006938:	2000      	moveq	r0, #0
 800693a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800693e:	bf88      	it	hi
 8006940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006944:	f63f aeaf 	bhi.w	80066a6 <__aeabi_dmul+0xde>
 8006948:	ebb5 0c03 	subs.w	ip, r5, r3
 800694c:	bf04      	itt	eq
 800694e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8006952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006956:	f150 0000 	adcs.w	r0, r0, #0
 800695a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800695e:	bd70      	pop	{r4, r5, r6, pc}
 8006960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8006964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800696c:	bfc2      	ittt	gt
 800696e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006976:	bd70      	popgt	{r4, r5, r6, pc}
 8006978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800697c:	f04f 0e00 	mov.w	lr, #0
 8006980:	3c01      	subs	r4, #1
 8006982:	e690      	b.n	80066a6 <__aeabi_dmul+0xde>
 8006984:	ea45 0e06 	orr.w	lr, r5, r6
 8006988:	e68d      	b.n	80066a6 <__aeabi_dmul+0xde>
 800698a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800698e:	ea94 0f0c 	teq	r4, ip
 8006992:	bf08      	it	eq
 8006994:	ea95 0f0c 	teqeq	r5, ip
 8006998:	f43f af3b 	beq.w	8006812 <__aeabi_dmul+0x24a>
 800699c:	ea94 0f0c 	teq	r4, ip
 80069a0:	d10a      	bne.n	80069b8 <__aeabi_ddiv+0x19c>
 80069a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80069a6:	f47f af34 	bne.w	8006812 <__aeabi_dmul+0x24a>
 80069aa:	ea95 0f0c 	teq	r5, ip
 80069ae:	f47f af25 	bne.w	80067fc <__aeabi_dmul+0x234>
 80069b2:	4610      	mov	r0, r2
 80069b4:	4619      	mov	r1, r3
 80069b6:	e72c      	b.n	8006812 <__aeabi_dmul+0x24a>
 80069b8:	ea95 0f0c 	teq	r5, ip
 80069bc:	d106      	bne.n	80069cc <__aeabi_ddiv+0x1b0>
 80069be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80069c2:	f43f aefd 	beq.w	80067c0 <__aeabi_dmul+0x1f8>
 80069c6:	4610      	mov	r0, r2
 80069c8:	4619      	mov	r1, r3
 80069ca:	e722      	b.n	8006812 <__aeabi_dmul+0x24a>
 80069cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80069d0:	bf18      	it	ne
 80069d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80069d6:	f47f aec5 	bne.w	8006764 <__aeabi_dmul+0x19c>
 80069da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80069de:	f47f af0d 	bne.w	80067fc <__aeabi_dmul+0x234>
 80069e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80069e6:	f47f aeeb 	bne.w	80067c0 <__aeabi_dmul+0x1f8>
 80069ea:	e712      	b.n	8006812 <__aeabi_dmul+0x24a>

080069ec <__gedf2>:
 80069ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80069f0:	e006      	b.n	8006a00 <__cmpdf2+0x4>
 80069f2:	bf00      	nop

080069f4 <__ledf2>:
 80069f4:	f04f 0c01 	mov.w	ip, #1
 80069f8:	e002      	b.n	8006a00 <__cmpdf2+0x4>
 80069fa:	bf00      	nop

080069fc <__cmpdf2>:
 80069fc:	f04f 0c01 	mov.w	ip, #1
 8006a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006a10:	bf18      	it	ne
 8006a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8006a16:	d01b      	beq.n	8006a50 <__cmpdf2+0x54>
 8006a18:	b001      	add	sp, #4
 8006a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8006a1e:	bf0c      	ite	eq
 8006a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8006a24:	ea91 0f03 	teqne	r1, r3
 8006a28:	bf02      	ittt	eq
 8006a2a:	ea90 0f02 	teqeq	r0, r2
 8006a2e:	2000      	moveq	r0, #0
 8006a30:	4770      	bxeq	lr
 8006a32:	f110 0f00 	cmn.w	r0, #0
 8006a36:	ea91 0f03 	teq	r1, r3
 8006a3a:	bf58      	it	pl
 8006a3c:	4299      	cmppl	r1, r3
 8006a3e:	bf08      	it	eq
 8006a40:	4290      	cmpeq	r0, r2
 8006a42:	bf2c      	ite	cs
 8006a44:	17d8      	asrcs	r0, r3, #31
 8006a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8006a4a:	f040 0001 	orr.w	r0, r0, #1
 8006a4e:	4770      	bx	lr
 8006a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006a58:	d102      	bne.n	8006a60 <__cmpdf2+0x64>
 8006a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006a5e:	d107      	bne.n	8006a70 <__cmpdf2+0x74>
 8006a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006a68:	d1d6      	bne.n	8006a18 <__cmpdf2+0x1c>
 8006a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006a6e:	d0d3      	beq.n	8006a18 <__cmpdf2+0x1c>
 8006a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop

08006a78 <__aeabi_cdrcmple>:
 8006a78:	4684      	mov	ip, r0
 8006a7a:	4610      	mov	r0, r2
 8006a7c:	4662      	mov	r2, ip
 8006a7e:	468c      	mov	ip, r1
 8006a80:	4619      	mov	r1, r3
 8006a82:	4663      	mov	r3, ip
 8006a84:	e000      	b.n	8006a88 <__aeabi_cdcmpeq>
 8006a86:	bf00      	nop

08006a88 <__aeabi_cdcmpeq>:
 8006a88:	b501      	push	{r0, lr}
 8006a8a:	f7ff ffb7 	bl	80069fc <__cmpdf2>
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	bf48      	it	mi
 8006a92:	f110 0f00 	cmnmi.w	r0, #0
 8006a96:	bd01      	pop	{r0, pc}

08006a98 <__aeabi_dcmpeq>:
 8006a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006a9c:	f7ff fff4 	bl	8006a88 <__aeabi_cdcmpeq>
 8006aa0:	bf0c      	ite	eq
 8006aa2:	2001      	moveq	r0, #1
 8006aa4:	2000      	movne	r0, #0
 8006aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8006aaa:	bf00      	nop

08006aac <__aeabi_dcmplt>:
 8006aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006ab0:	f7ff ffea 	bl	8006a88 <__aeabi_cdcmpeq>
 8006ab4:	bf34      	ite	cc
 8006ab6:	2001      	movcc	r0, #1
 8006ab8:	2000      	movcs	r0, #0
 8006aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8006abe:	bf00      	nop

08006ac0 <__aeabi_dcmple>:
 8006ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006ac4:	f7ff ffe0 	bl	8006a88 <__aeabi_cdcmpeq>
 8006ac8:	bf94      	ite	ls
 8006aca:	2001      	movls	r0, #1
 8006acc:	2000      	movhi	r0, #0
 8006ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8006ad2:	bf00      	nop

08006ad4 <__aeabi_dcmpge>:
 8006ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006ad8:	f7ff ffce 	bl	8006a78 <__aeabi_cdrcmple>
 8006adc:	bf94      	ite	ls
 8006ade:	2001      	movls	r0, #1
 8006ae0:	2000      	movhi	r0, #0
 8006ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8006ae6:	bf00      	nop

08006ae8 <__aeabi_dcmpgt>:
 8006ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006aec:	f7ff ffc4 	bl	8006a78 <__aeabi_cdrcmple>
 8006af0:	bf34      	ite	cc
 8006af2:	2001      	movcc	r0, #1
 8006af4:	2000      	movcs	r0, #0
 8006af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8006afa:	bf00      	nop

08006afc <__aeabi_dcmpun>:
 8006afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006b04:	d102      	bne.n	8006b0c <__aeabi_dcmpun+0x10>
 8006b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006b0a:	d10a      	bne.n	8006b22 <__aeabi_dcmpun+0x26>
 8006b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006b14:	d102      	bne.n	8006b1c <__aeabi_dcmpun+0x20>
 8006b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006b1a:	d102      	bne.n	8006b22 <__aeabi_dcmpun+0x26>
 8006b1c:	f04f 0000 	mov.w	r0, #0
 8006b20:	4770      	bx	lr
 8006b22:	f04f 0001 	mov.w	r0, #1
 8006b26:	4770      	bx	lr

08006b28 <__aeabi_d2iz>:
 8006b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006b30:	d215      	bcs.n	8006b5e <__aeabi_d2iz+0x36>
 8006b32:	d511      	bpl.n	8006b58 <__aeabi_d2iz+0x30>
 8006b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006b3c:	d912      	bls.n	8006b64 <__aeabi_d2iz+0x3c>
 8006b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8006b52:	bf18      	it	ne
 8006b54:	4240      	negne	r0, r0
 8006b56:	4770      	bx	lr
 8006b58:	f04f 0000 	mov.w	r0, #0
 8006b5c:	4770      	bx	lr
 8006b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006b62:	d105      	bne.n	8006b70 <__aeabi_d2iz+0x48>
 8006b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8006b68:	bf08      	it	eq
 8006b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8006b6e:	4770      	bx	lr
 8006b70:	f04f 0000 	mov.w	r0, #0
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop

08006b78 <__aeabi_d2uiz>:
 8006b78:	004a      	lsls	r2, r1, #1
 8006b7a:	d211      	bcs.n	8006ba0 <__aeabi_d2uiz+0x28>
 8006b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006b80:	d211      	bcs.n	8006ba6 <__aeabi_d2uiz+0x2e>
 8006b82:	d50d      	bpl.n	8006ba0 <__aeabi_d2uiz+0x28>
 8006b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006b8c:	d40e      	bmi.n	8006bac <__aeabi_d2uiz+0x34>
 8006b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8006b9e:	4770      	bx	lr
 8006ba0:	f04f 0000 	mov.w	r0, #0
 8006ba4:	4770      	bx	lr
 8006ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006baa:	d102      	bne.n	8006bb2 <__aeabi_d2uiz+0x3a>
 8006bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bb0:	4770      	bx	lr
 8006bb2:	f04f 0000 	mov.w	r0, #0
 8006bb6:	4770      	bx	lr

08006bb8 <__aeabi_uldivmod>:
 8006bb8:	b953      	cbnz	r3, 8006bd0 <__aeabi_uldivmod+0x18>
 8006bba:	b94a      	cbnz	r2, 8006bd0 <__aeabi_uldivmod+0x18>
 8006bbc:	2900      	cmp	r1, #0
 8006bbe:	bf08      	it	eq
 8006bc0:	2800      	cmpeq	r0, #0
 8006bc2:	bf1c      	itt	ne
 8006bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8006bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8006bcc:	f001 b914 	b.w	8007df8 <__aeabi_idiv0>
 8006bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8006bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8006bd8:	f000 f83c 	bl	8006c54 <__udivmoddi4>
 8006bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006be4:	b004      	add	sp, #16
 8006be6:	4770      	bx	lr

08006be8 <__aeabi_d2lz>:
 8006be8:	b538      	push	{r3, r4, r5, lr}
 8006bea:	2200      	movs	r2, #0
 8006bec:	2300      	movs	r3, #0
 8006bee:	4604      	mov	r4, r0
 8006bf0:	460d      	mov	r5, r1
 8006bf2:	f7ff ff5b 	bl	8006aac <__aeabi_dcmplt>
 8006bf6:	b928      	cbnz	r0, 8006c04 <__aeabi_d2lz+0x1c>
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	4629      	mov	r1, r5
 8006bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c00:	f000 b80a 	b.w	8006c18 <__aeabi_d2ulz>
 8006c04:	4620      	mov	r0, r4
 8006c06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8006c0a:	f000 f805 	bl	8006c18 <__aeabi_d2ulz>
 8006c0e:	4240      	negs	r0, r0
 8006c10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006c14:	bd38      	pop	{r3, r4, r5, pc}
 8006c16:	bf00      	nop

08006c18 <__aeabi_d2ulz>:
 8006c18:	b5d0      	push	{r4, r6, r7, lr}
 8006c1a:	4b0c      	ldr	r3, [pc, #48]	; (8006c4c <__aeabi_d2ulz+0x34>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	4606      	mov	r6, r0
 8006c20:	460f      	mov	r7, r1
 8006c22:	f7ff fcd1 	bl	80065c8 <__aeabi_dmul>
 8006c26:	f7ff ffa7 	bl	8006b78 <__aeabi_d2uiz>
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	f7ff fc52 	bl	80064d4 <__aeabi_ui2d>
 8006c30:	4b07      	ldr	r3, [pc, #28]	; (8006c50 <__aeabi_d2ulz+0x38>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	f7ff fcc8 	bl	80065c8 <__aeabi_dmul>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	4630      	mov	r0, r6
 8006c3e:	4639      	mov	r1, r7
 8006c40:	f7ff fb0a 	bl	8006258 <__aeabi_dsub>
 8006c44:	f7ff ff98 	bl	8006b78 <__aeabi_d2uiz>
 8006c48:	4621      	mov	r1, r4
 8006c4a:	bdd0      	pop	{r4, r6, r7, pc}
 8006c4c:	3df00000 	.word	0x3df00000
 8006c50:	41f00000 	.word	0x41f00000

08006c54 <__udivmoddi4>:
 8006c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c58:	9e08      	ldr	r6, [sp, #32]
 8006c5a:	460d      	mov	r5, r1
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	460f      	mov	r7, r1
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d14a      	bne.n	8006cfa <__udivmoddi4+0xa6>
 8006c64:	428a      	cmp	r2, r1
 8006c66:	4694      	mov	ip, r2
 8006c68:	d965      	bls.n	8006d36 <__udivmoddi4+0xe2>
 8006c6a:	fab2 f382 	clz	r3, r2
 8006c6e:	b143      	cbz	r3, 8006c82 <__udivmoddi4+0x2e>
 8006c70:	fa02 fc03 	lsl.w	ip, r2, r3
 8006c74:	f1c3 0220 	rsb	r2, r3, #32
 8006c78:	409f      	lsls	r7, r3
 8006c7a:	fa20 f202 	lsr.w	r2, r0, r2
 8006c7e:	4317      	orrs	r7, r2
 8006c80:	409c      	lsls	r4, r3
 8006c82:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8006c86:	fa1f f58c 	uxth.w	r5, ip
 8006c8a:	fbb7 f1fe 	udiv	r1, r7, lr
 8006c8e:	0c22      	lsrs	r2, r4, #16
 8006c90:	fb0e 7711 	mls	r7, lr, r1, r7
 8006c94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8006c98:	fb01 f005 	mul.w	r0, r1, r5
 8006c9c:	4290      	cmp	r0, r2
 8006c9e:	d90a      	bls.n	8006cb6 <__udivmoddi4+0x62>
 8006ca0:	eb1c 0202 	adds.w	r2, ip, r2
 8006ca4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8006ca8:	f080 811c 	bcs.w	8006ee4 <__udivmoddi4+0x290>
 8006cac:	4290      	cmp	r0, r2
 8006cae:	f240 8119 	bls.w	8006ee4 <__udivmoddi4+0x290>
 8006cb2:	3902      	subs	r1, #2
 8006cb4:	4462      	add	r2, ip
 8006cb6:	1a12      	subs	r2, r2, r0
 8006cb8:	b2a4      	uxth	r4, r4
 8006cba:	fbb2 f0fe 	udiv	r0, r2, lr
 8006cbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8006cc2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006cc6:	fb00 f505 	mul.w	r5, r0, r5
 8006cca:	42a5      	cmp	r5, r4
 8006ccc:	d90a      	bls.n	8006ce4 <__udivmoddi4+0x90>
 8006cce:	eb1c 0404 	adds.w	r4, ip, r4
 8006cd2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8006cd6:	f080 8107 	bcs.w	8006ee8 <__udivmoddi4+0x294>
 8006cda:	42a5      	cmp	r5, r4
 8006cdc:	f240 8104 	bls.w	8006ee8 <__udivmoddi4+0x294>
 8006ce0:	4464      	add	r4, ip
 8006ce2:	3802      	subs	r0, #2
 8006ce4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8006ce8:	1b64      	subs	r4, r4, r5
 8006cea:	2100      	movs	r1, #0
 8006cec:	b11e      	cbz	r6, 8006cf6 <__udivmoddi4+0xa2>
 8006cee:	40dc      	lsrs	r4, r3
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	e9c6 4300 	strd	r4, r3, [r6]
 8006cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cfa:	428b      	cmp	r3, r1
 8006cfc:	d908      	bls.n	8006d10 <__udivmoddi4+0xbc>
 8006cfe:	2e00      	cmp	r6, #0
 8006d00:	f000 80ed 	beq.w	8006ede <__udivmoddi4+0x28a>
 8006d04:	2100      	movs	r1, #0
 8006d06:	e9c6 0500 	strd	r0, r5, [r6]
 8006d0a:	4608      	mov	r0, r1
 8006d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d10:	fab3 f183 	clz	r1, r3
 8006d14:	2900      	cmp	r1, #0
 8006d16:	d149      	bne.n	8006dac <__udivmoddi4+0x158>
 8006d18:	42ab      	cmp	r3, r5
 8006d1a:	d302      	bcc.n	8006d22 <__udivmoddi4+0xce>
 8006d1c:	4282      	cmp	r2, r0
 8006d1e:	f200 80f8 	bhi.w	8006f12 <__udivmoddi4+0x2be>
 8006d22:	1a84      	subs	r4, r0, r2
 8006d24:	eb65 0203 	sbc.w	r2, r5, r3
 8006d28:	2001      	movs	r0, #1
 8006d2a:	4617      	mov	r7, r2
 8006d2c:	2e00      	cmp	r6, #0
 8006d2e:	d0e2      	beq.n	8006cf6 <__udivmoddi4+0xa2>
 8006d30:	e9c6 4700 	strd	r4, r7, [r6]
 8006d34:	e7df      	b.n	8006cf6 <__udivmoddi4+0xa2>
 8006d36:	b902      	cbnz	r2, 8006d3a <__udivmoddi4+0xe6>
 8006d38:	deff      	udf	#255	; 0xff
 8006d3a:	fab2 f382 	clz	r3, r2
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f040 8090 	bne.w	8006e64 <__udivmoddi4+0x210>
 8006d44:	1a8a      	subs	r2, r1, r2
 8006d46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006d4a:	fa1f fe8c 	uxth.w	lr, ip
 8006d4e:	2101      	movs	r1, #1
 8006d50:	fbb2 f5f7 	udiv	r5, r2, r7
 8006d54:	fb07 2015 	mls	r0, r7, r5, r2
 8006d58:	0c22      	lsrs	r2, r4, #16
 8006d5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006d5e:	fb0e f005 	mul.w	r0, lr, r5
 8006d62:	4290      	cmp	r0, r2
 8006d64:	d908      	bls.n	8006d78 <__udivmoddi4+0x124>
 8006d66:	eb1c 0202 	adds.w	r2, ip, r2
 8006d6a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8006d6e:	d202      	bcs.n	8006d76 <__udivmoddi4+0x122>
 8006d70:	4290      	cmp	r0, r2
 8006d72:	f200 80cb 	bhi.w	8006f0c <__udivmoddi4+0x2b8>
 8006d76:	4645      	mov	r5, r8
 8006d78:	1a12      	subs	r2, r2, r0
 8006d7a:	b2a4      	uxth	r4, r4
 8006d7c:	fbb2 f0f7 	udiv	r0, r2, r7
 8006d80:	fb07 2210 	mls	r2, r7, r0, r2
 8006d84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006d88:	fb0e fe00 	mul.w	lr, lr, r0
 8006d8c:	45a6      	cmp	lr, r4
 8006d8e:	d908      	bls.n	8006da2 <__udivmoddi4+0x14e>
 8006d90:	eb1c 0404 	adds.w	r4, ip, r4
 8006d94:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8006d98:	d202      	bcs.n	8006da0 <__udivmoddi4+0x14c>
 8006d9a:	45a6      	cmp	lr, r4
 8006d9c:	f200 80bb 	bhi.w	8006f16 <__udivmoddi4+0x2c2>
 8006da0:	4610      	mov	r0, r2
 8006da2:	eba4 040e 	sub.w	r4, r4, lr
 8006da6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8006daa:	e79f      	b.n	8006cec <__udivmoddi4+0x98>
 8006dac:	f1c1 0720 	rsb	r7, r1, #32
 8006db0:	408b      	lsls	r3, r1
 8006db2:	fa22 fc07 	lsr.w	ip, r2, r7
 8006db6:	ea4c 0c03 	orr.w	ip, ip, r3
 8006dba:	fa05 f401 	lsl.w	r4, r5, r1
 8006dbe:	fa20 f307 	lsr.w	r3, r0, r7
 8006dc2:	40fd      	lsrs	r5, r7
 8006dc4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8006dc8:	4323      	orrs	r3, r4
 8006dca:	fbb5 f8f9 	udiv	r8, r5, r9
 8006dce:	fa1f fe8c 	uxth.w	lr, ip
 8006dd2:	fb09 5518 	mls	r5, r9, r8, r5
 8006dd6:	0c1c      	lsrs	r4, r3, #16
 8006dd8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8006ddc:	fb08 f50e 	mul.w	r5, r8, lr
 8006de0:	42a5      	cmp	r5, r4
 8006de2:	fa02 f201 	lsl.w	r2, r2, r1
 8006de6:	fa00 f001 	lsl.w	r0, r0, r1
 8006dea:	d90b      	bls.n	8006e04 <__udivmoddi4+0x1b0>
 8006dec:	eb1c 0404 	adds.w	r4, ip, r4
 8006df0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8006df4:	f080 8088 	bcs.w	8006f08 <__udivmoddi4+0x2b4>
 8006df8:	42a5      	cmp	r5, r4
 8006dfa:	f240 8085 	bls.w	8006f08 <__udivmoddi4+0x2b4>
 8006dfe:	f1a8 0802 	sub.w	r8, r8, #2
 8006e02:	4464      	add	r4, ip
 8006e04:	1b64      	subs	r4, r4, r5
 8006e06:	b29d      	uxth	r5, r3
 8006e08:	fbb4 f3f9 	udiv	r3, r4, r9
 8006e0c:	fb09 4413 	mls	r4, r9, r3, r4
 8006e10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8006e14:	fb03 fe0e 	mul.w	lr, r3, lr
 8006e18:	45a6      	cmp	lr, r4
 8006e1a:	d908      	bls.n	8006e2e <__udivmoddi4+0x1da>
 8006e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8006e20:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8006e24:	d26c      	bcs.n	8006f00 <__udivmoddi4+0x2ac>
 8006e26:	45a6      	cmp	lr, r4
 8006e28:	d96a      	bls.n	8006f00 <__udivmoddi4+0x2ac>
 8006e2a:	3b02      	subs	r3, #2
 8006e2c:	4464      	add	r4, ip
 8006e2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8006e32:	fba3 9502 	umull	r9, r5, r3, r2
 8006e36:	eba4 040e 	sub.w	r4, r4, lr
 8006e3a:	42ac      	cmp	r4, r5
 8006e3c:	46c8      	mov	r8, r9
 8006e3e:	46ae      	mov	lr, r5
 8006e40:	d356      	bcc.n	8006ef0 <__udivmoddi4+0x29c>
 8006e42:	d053      	beq.n	8006eec <__udivmoddi4+0x298>
 8006e44:	b156      	cbz	r6, 8006e5c <__udivmoddi4+0x208>
 8006e46:	ebb0 0208 	subs.w	r2, r0, r8
 8006e4a:	eb64 040e 	sbc.w	r4, r4, lr
 8006e4e:	fa04 f707 	lsl.w	r7, r4, r7
 8006e52:	40ca      	lsrs	r2, r1
 8006e54:	40cc      	lsrs	r4, r1
 8006e56:	4317      	orrs	r7, r2
 8006e58:	e9c6 7400 	strd	r7, r4, [r6]
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	2100      	movs	r1, #0
 8006e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e64:	f1c3 0120 	rsb	r1, r3, #32
 8006e68:	fa02 fc03 	lsl.w	ip, r2, r3
 8006e6c:	fa20 f201 	lsr.w	r2, r0, r1
 8006e70:	fa25 f101 	lsr.w	r1, r5, r1
 8006e74:	409d      	lsls	r5, r3
 8006e76:	432a      	orrs	r2, r5
 8006e78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006e7c:	fa1f fe8c 	uxth.w	lr, ip
 8006e80:	fbb1 f0f7 	udiv	r0, r1, r7
 8006e84:	fb07 1510 	mls	r5, r7, r0, r1
 8006e88:	0c11      	lsrs	r1, r2, #16
 8006e8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8006e8e:	fb00 f50e 	mul.w	r5, r0, lr
 8006e92:	428d      	cmp	r5, r1
 8006e94:	fa04 f403 	lsl.w	r4, r4, r3
 8006e98:	d908      	bls.n	8006eac <__udivmoddi4+0x258>
 8006e9a:	eb1c 0101 	adds.w	r1, ip, r1
 8006e9e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8006ea2:	d22f      	bcs.n	8006f04 <__udivmoddi4+0x2b0>
 8006ea4:	428d      	cmp	r5, r1
 8006ea6:	d92d      	bls.n	8006f04 <__udivmoddi4+0x2b0>
 8006ea8:	3802      	subs	r0, #2
 8006eaa:	4461      	add	r1, ip
 8006eac:	1b49      	subs	r1, r1, r5
 8006eae:	b292      	uxth	r2, r2
 8006eb0:	fbb1 f5f7 	udiv	r5, r1, r7
 8006eb4:	fb07 1115 	mls	r1, r7, r5, r1
 8006eb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006ebc:	fb05 f10e 	mul.w	r1, r5, lr
 8006ec0:	4291      	cmp	r1, r2
 8006ec2:	d908      	bls.n	8006ed6 <__udivmoddi4+0x282>
 8006ec4:	eb1c 0202 	adds.w	r2, ip, r2
 8006ec8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8006ecc:	d216      	bcs.n	8006efc <__udivmoddi4+0x2a8>
 8006ece:	4291      	cmp	r1, r2
 8006ed0:	d914      	bls.n	8006efc <__udivmoddi4+0x2a8>
 8006ed2:	3d02      	subs	r5, #2
 8006ed4:	4462      	add	r2, ip
 8006ed6:	1a52      	subs	r2, r2, r1
 8006ed8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8006edc:	e738      	b.n	8006d50 <__udivmoddi4+0xfc>
 8006ede:	4631      	mov	r1, r6
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	e708      	b.n	8006cf6 <__udivmoddi4+0xa2>
 8006ee4:	4639      	mov	r1, r7
 8006ee6:	e6e6      	b.n	8006cb6 <__udivmoddi4+0x62>
 8006ee8:	4610      	mov	r0, r2
 8006eea:	e6fb      	b.n	8006ce4 <__udivmoddi4+0x90>
 8006eec:	4548      	cmp	r0, r9
 8006eee:	d2a9      	bcs.n	8006e44 <__udivmoddi4+0x1f0>
 8006ef0:	ebb9 0802 	subs.w	r8, r9, r2
 8006ef4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	e7a3      	b.n	8006e44 <__udivmoddi4+0x1f0>
 8006efc:	4645      	mov	r5, r8
 8006efe:	e7ea      	b.n	8006ed6 <__udivmoddi4+0x282>
 8006f00:	462b      	mov	r3, r5
 8006f02:	e794      	b.n	8006e2e <__udivmoddi4+0x1da>
 8006f04:	4640      	mov	r0, r8
 8006f06:	e7d1      	b.n	8006eac <__udivmoddi4+0x258>
 8006f08:	46d0      	mov	r8, sl
 8006f0a:	e77b      	b.n	8006e04 <__udivmoddi4+0x1b0>
 8006f0c:	3d02      	subs	r5, #2
 8006f0e:	4462      	add	r2, ip
 8006f10:	e732      	b.n	8006d78 <__udivmoddi4+0x124>
 8006f12:	4608      	mov	r0, r1
 8006f14:	e70a      	b.n	8006d2c <__udivmoddi4+0xd8>
 8006f16:	4464      	add	r4, ip
 8006f18:	3802      	subs	r0, #2
 8006f1a:	e742      	b.n	8006da2 <__udivmoddi4+0x14e>

08006f1c <selfrel_offset31>:
 8006f1c:	6803      	ldr	r3, [r0, #0]
 8006f1e:	005a      	lsls	r2, r3, #1
 8006f20:	bf4c      	ite	mi
 8006f22:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006f26:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8006f2a:	4418      	add	r0, r3
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop

08006f30 <search_EIT_table>:
 8006f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f34:	b329      	cbz	r1, 8006f82 <search_EIT_table+0x52>
 8006f36:	1e4f      	subs	r7, r1, #1
 8006f38:	4604      	mov	r4, r0
 8006f3a:	4615      	mov	r5, r2
 8006f3c:	463e      	mov	r6, r7
 8006f3e:	f04f 0800 	mov.w	r8, #0
 8006f42:	eb08 0106 	add.w	r1, r8, r6
 8006f46:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8006f4a:	1049      	asrs	r1, r1, #1
 8006f4c:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8006f50:	4648      	mov	r0, r9
 8006f52:	f7ff ffe3 	bl	8006f1c <selfrel_offset31>
 8006f56:	4603      	mov	r3, r0
 8006f58:	00c8      	lsls	r0, r1, #3
 8006f5a:	3008      	adds	r0, #8
 8006f5c:	428f      	cmp	r7, r1
 8006f5e:	4420      	add	r0, r4
 8006f60:	d009      	beq.n	8006f76 <search_EIT_table+0x46>
 8006f62:	42ab      	cmp	r3, r5
 8006f64:	d809      	bhi.n	8006f7a <search_EIT_table+0x4a>
 8006f66:	f7ff ffd9 	bl	8006f1c <selfrel_offset31>
 8006f6a:	3801      	subs	r0, #1
 8006f6c:	42a8      	cmp	r0, r5
 8006f6e:	d20a      	bcs.n	8006f86 <search_EIT_table+0x56>
 8006f70:	f101 0801 	add.w	r8, r1, #1
 8006f74:	e7e5      	b.n	8006f42 <search_EIT_table+0x12>
 8006f76:	42ab      	cmp	r3, r5
 8006f78:	d905      	bls.n	8006f86 <search_EIT_table+0x56>
 8006f7a:	4588      	cmp	r8, r1
 8006f7c:	d001      	beq.n	8006f82 <search_EIT_table+0x52>
 8006f7e:	1e4e      	subs	r6, r1, #1
 8006f80:	e7df      	b.n	8006f42 <search_EIT_table+0x12>
 8006f82:	f04f 0900 	mov.w	r9, #0
 8006f86:	4648      	mov	r0, r9
 8006f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006f8c <__gnu_unwind_get_pr_addr>:
 8006f8c:	2801      	cmp	r0, #1
 8006f8e:	d007      	beq.n	8006fa0 <__gnu_unwind_get_pr_addr+0x14>
 8006f90:	2802      	cmp	r0, #2
 8006f92:	d007      	beq.n	8006fa4 <__gnu_unwind_get_pr_addr+0x18>
 8006f94:	4b04      	ldr	r3, [pc, #16]	; (8006fa8 <__gnu_unwind_get_pr_addr+0x1c>)
 8006f96:	2800      	cmp	r0, #0
 8006f98:	bf0c      	ite	eq
 8006f9a:	4618      	moveq	r0, r3
 8006f9c:	2000      	movne	r0, #0
 8006f9e:	4770      	bx	lr
 8006fa0:	4802      	ldr	r0, [pc, #8]	; (8006fac <__gnu_unwind_get_pr_addr+0x20>)
 8006fa2:	4770      	bx	lr
 8006fa4:	4802      	ldr	r0, [pc, #8]	; (8006fb0 <__gnu_unwind_get_pr_addr+0x24>)
 8006fa6:	4770      	bx	lr
 8006fa8:	08007661 	.word	0x08007661
 8006fac:	08007665 	.word	0x08007665
 8006fb0:	08007669 	.word	0x08007669

08006fb4 <get_eit_entry>:
 8006fb4:	b530      	push	{r4, r5, lr}
 8006fb6:	4b22      	ldr	r3, [pc, #136]	; (8007040 <get_eit_entry+0x8c>)
 8006fb8:	b083      	sub	sp, #12
 8006fba:	4604      	mov	r4, r0
 8006fbc:	1e8d      	subs	r5, r1, #2
 8006fbe:	b343      	cbz	r3, 8007012 <get_eit_entry+0x5e>
 8006fc0:	a901      	add	r1, sp, #4
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	f3af 8000 	nop.w
 8006fc8:	b1f0      	cbz	r0, 8007008 <get_eit_entry+0x54>
 8006fca:	9901      	ldr	r1, [sp, #4]
 8006fcc:	462a      	mov	r2, r5
 8006fce:	f7ff ffaf 	bl	8006f30 <search_EIT_table>
 8006fd2:	4601      	mov	r1, r0
 8006fd4:	b1c0      	cbz	r0, 8007008 <get_eit_entry+0x54>
 8006fd6:	f7ff ffa1 	bl	8006f1c <selfrel_offset31>
 8006fda:	684b      	ldr	r3, [r1, #4]
 8006fdc:	64a0      	str	r0, [r4, #72]	; 0x48
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d02b      	beq.n	800703a <get_eit_entry+0x86>
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f101 0004 	add.w	r0, r1, #4
 8006fe8:	db25      	blt.n	8007036 <get_eit_entry+0x82>
 8006fea:	f7ff ff97 	bl	8006f1c <selfrel_offset31>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	6523      	str	r3, [r4, #80]	; 0x50
 8006ff2:	6803      	ldr	r3, [r0, #0]
 8006ff4:	64e0      	str	r0, [r4, #76]	; 0x4c
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	db12      	blt.n	8007020 <get_eit_entry+0x6c>
 8006ffa:	f7ff ff8f 	bl	8006f1c <selfrel_offset31>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2000      	movs	r0, #0
 8007002:	6123      	str	r3, [r4, #16]
 8007004:	b003      	add	sp, #12
 8007006:	bd30      	pop	{r4, r5, pc}
 8007008:	2300      	movs	r3, #0
 800700a:	2009      	movs	r0, #9
 800700c:	6123      	str	r3, [r4, #16]
 800700e:	b003      	add	sp, #12
 8007010:	bd30      	pop	{r4, r5, pc}
 8007012:	4b0c      	ldr	r3, [pc, #48]	; (8007044 <get_eit_entry+0x90>)
 8007014:	490c      	ldr	r1, [pc, #48]	; (8007048 <get_eit_entry+0x94>)
 8007016:	1ac9      	subs	r1, r1, r3
 8007018:	10c9      	asrs	r1, r1, #3
 800701a:	4618      	mov	r0, r3
 800701c:	9101      	str	r1, [sp, #4]
 800701e:	e7d5      	b.n	8006fcc <get_eit_entry+0x18>
 8007020:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8007024:	f7ff ffb2 	bl	8006f8c <__gnu_unwind_get_pr_addr>
 8007028:	1e03      	subs	r3, r0, #0
 800702a:	bf0c      	ite	eq
 800702c:	2009      	moveq	r0, #9
 800702e:	2000      	movne	r0, #0
 8007030:	6123      	str	r3, [r4, #16]
 8007032:	b003      	add	sp, #12
 8007034:	bd30      	pop	{r4, r5, pc}
 8007036:	2301      	movs	r3, #1
 8007038:	e7da      	b.n	8006ff0 <get_eit_entry+0x3c>
 800703a:	2300      	movs	r3, #0
 800703c:	2005      	movs	r0, #5
 800703e:	e7e0      	b.n	8007002 <get_eit_entry+0x4e>
 8007040:	00000000 	.word	0x00000000
 8007044:	08025254 	.word	0x08025254
 8007048:	080258b4 	.word	0x080258b4

0800704c <restore_non_core_regs>:
 800704c:	6803      	ldr	r3, [r0, #0]
 800704e:	07da      	lsls	r2, r3, #31
 8007050:	b510      	push	{r4, lr}
 8007052:	4604      	mov	r4, r0
 8007054:	d406      	bmi.n	8007064 <restore_non_core_regs+0x18>
 8007056:	079b      	lsls	r3, r3, #30
 8007058:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800705c:	d509      	bpl.n	8007072 <restore_non_core_regs+0x26>
 800705e:	f000 fc71 	bl	8007944 <__gnu_Unwind_Restore_VFP_D>
 8007062:	6823      	ldr	r3, [r4, #0]
 8007064:	0759      	lsls	r1, r3, #29
 8007066:	d509      	bpl.n	800707c <restore_non_core_regs+0x30>
 8007068:	071a      	lsls	r2, r3, #28
 800706a:	d50e      	bpl.n	800708a <restore_non_core_regs+0x3e>
 800706c:	06db      	lsls	r3, r3, #27
 800706e:	d513      	bpl.n	8007098 <restore_non_core_regs+0x4c>
 8007070:	bd10      	pop	{r4, pc}
 8007072:	f000 fc5f 	bl	8007934 <__gnu_Unwind_Restore_VFP>
 8007076:	6823      	ldr	r3, [r4, #0]
 8007078:	0759      	lsls	r1, r3, #29
 800707a:	d4f5      	bmi.n	8007068 <restore_non_core_regs+0x1c>
 800707c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007080:	f000 fc68 	bl	8007954 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	071a      	lsls	r2, r3, #28
 8007088:	d4f0      	bmi.n	800706c <restore_non_core_regs+0x20>
 800708a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800708e:	f000 fc69 	bl	8007964 <__gnu_Unwind_Restore_WMMXD>
 8007092:	6823      	ldr	r3, [r4, #0]
 8007094:	06db      	lsls	r3, r3, #27
 8007096:	d4eb      	bmi.n	8007070 <restore_non_core_regs+0x24>
 8007098:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800709c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070a0:	f000 bca4 	b.w	80079ec <__gnu_Unwind_Restore_WMMXC>

080070a4 <__gnu_unwind_24bit.constprop.0>:
 80070a4:	2009      	movs	r0, #9
 80070a6:	4770      	bx	lr

080070a8 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 80070a8:	4603      	mov	r3, r0
 80070aa:	6800      	ldr	r0, [r0, #0]
 80070ac:	b100      	cbz	r0, 80070b0 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 80070ae:	4418      	add	r0, r3
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop

080070b4 <_Unwind_DebugHook>:
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop

080070b8 <unwind_phase2>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	4604      	mov	r4, r0
 80070bc:	460e      	mov	r6, r1
 80070be:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80070c0:	4620      	mov	r0, r4
 80070c2:	f7ff ff77 	bl	8006fb4 <get_eit_entry>
 80070c6:	4605      	mov	r5, r0
 80070c8:	b988      	cbnz	r0, 80070ee <unwind_phase2+0x36>
 80070ca:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80070cc:	6162      	str	r2, [r4, #20]
 80070ce:	6923      	ldr	r3, [r4, #16]
 80070d0:	4632      	mov	r2, r6
 80070d2:	4621      	mov	r1, r4
 80070d4:	2001      	movs	r0, #1
 80070d6:	4798      	blx	r3
 80070d8:	2808      	cmp	r0, #8
 80070da:	d0f0      	beq.n	80070be <unwind_phase2+0x6>
 80070dc:	2807      	cmp	r0, #7
 80070de:	d106      	bne.n	80070ee <unwind_phase2+0x36>
 80070e0:	4628      	mov	r0, r5
 80070e2:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80070e4:	f7ff ffe6 	bl	80070b4 <_Unwind_DebugHook>
 80070e8:	1d30      	adds	r0, r6, #4
 80070ea:	f000 fc17 	bl	800791c <__restore_core_regs>
 80070ee:	f012 fd51 	bl	8019b94 <abort>
 80070f2:	bf00      	nop

080070f4 <unwind_phase2_forced>:
 80070f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070f8:	1d0d      	adds	r5, r1, #4
 80070fa:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80070fe:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8007102:	4607      	mov	r7, r0
 8007104:	4614      	mov	r4, r2
 8007106:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007108:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 800710c:	f10d 0c0c 	add.w	ip, sp, #12
 8007110:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007116:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800711a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800711c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007120:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007124:	ae02      	add	r6, sp, #8
 8007126:	f04f 0e00 	mov.w	lr, #0
 800712a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800712e:	f8c6 e000 	str.w	lr, [r6]
 8007132:	e020      	b.n	8007176 <unwind_phase2_forced+0x82>
 8007134:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8007136:	617b      	str	r3, [r7, #20]
 8007138:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800713c:	4631      	mov	r1, r6
 800713e:	a87a      	add	r0, sp, #488	; 0x1e8
 8007140:	f014 fda5 	bl	801bc8e <memcpy>
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	aa7a      	add	r2, sp, #488	; 0x1e8
 8007148:	4639      	mov	r1, r7
 800714a:	4650      	mov	r0, sl
 800714c:	4798      	blx	r3
 800714e:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8007150:	6473      	str	r3, [r6, #68]	; 0x44
 8007152:	4621      	mov	r1, r4
 8007154:	e9cd 6900 	strd	r6, r9, [sp]
 8007158:	4605      	mov	r5, r0
 800715a:	463b      	mov	r3, r7
 800715c:	463a      	mov	r2, r7
 800715e:	2001      	movs	r0, #1
 8007160:	47c0      	blx	r8
 8007162:	4604      	mov	r4, r0
 8007164:	b9e0      	cbnz	r0, 80071a0 <unwind_phase2_forced+0xac>
 8007166:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800716a:	a97a      	add	r1, sp, #488	; 0x1e8
 800716c:	4630      	mov	r0, r6
 800716e:	f014 fd8e 	bl	801bc8e <memcpy>
 8007172:	2d08      	cmp	r5, #8
 8007174:	d11a      	bne.n	80071ac <unwind_phase2_forced+0xb8>
 8007176:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8007178:	4638      	mov	r0, r7
 800717a:	f7ff ff1b 	bl	8006fb4 <get_eit_entry>
 800717e:	3409      	adds	r4, #9
 8007180:	fa5f fa84 	uxtb.w	sl, r4
 8007184:	4605      	mov	r5, r0
 8007186:	2800      	cmp	r0, #0
 8007188:	d0d4      	beq.n	8007134 <unwind_phase2_forced+0x40>
 800718a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800718c:	6473      	str	r3, [r6, #68]	; 0x44
 800718e:	463a      	mov	r2, r7
 8007190:	e9cd 6900 	strd	r6, r9, [sp]
 8007194:	463b      	mov	r3, r7
 8007196:	f04a 0110 	orr.w	r1, sl, #16
 800719a:	2001      	movs	r0, #1
 800719c:	47c0      	blx	r8
 800719e:	b100      	cbz	r0, 80071a2 <unwind_phase2_forced+0xae>
 80071a0:	2509      	movs	r5, #9
 80071a2:	4628      	mov	r0, r5
 80071a4:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80071a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ac:	2d07      	cmp	r5, #7
 80071ae:	d1f7      	bne.n	80071a0 <unwind_phase2_forced+0xac>
 80071b0:	4620      	mov	r0, r4
 80071b2:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80071b4:	f7ff ff7e 	bl	80070b4 <_Unwind_DebugHook>
 80071b8:	a803      	add	r0, sp, #12
 80071ba:	f000 fbaf 	bl	800791c <__restore_core_regs>
 80071be:	bf00      	nop

080071c0 <_Unwind_GetCFA>:
 80071c0:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80071c2:	4770      	bx	lr

080071c4 <__gnu_Unwind_RaiseException>:
 80071c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071c6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80071c8:	640b      	str	r3, [r1, #64]	; 0x40
 80071ca:	f101 0c04 	add.w	ip, r1, #4
 80071ce:	460e      	mov	r6, r1
 80071d0:	4605      	mov	r5, r0
 80071d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80071d6:	b0f9      	sub	sp, #484	; 0x1e4
 80071d8:	ac01      	add	r4, sp, #4
 80071da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80071e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80071e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071e8:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80071ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80071f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80071f4:	9700      	str	r7, [sp, #0]
 80071f6:	e006      	b.n	8007206 <__gnu_Unwind_RaiseException+0x42>
 80071f8:	692b      	ldr	r3, [r5, #16]
 80071fa:	466a      	mov	r2, sp
 80071fc:	4629      	mov	r1, r5
 80071fe:	4798      	blx	r3
 8007200:	2808      	cmp	r0, #8
 8007202:	4604      	mov	r4, r0
 8007204:	d108      	bne.n	8007218 <__gnu_Unwind_RaiseException+0x54>
 8007206:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007208:	4628      	mov	r0, r5
 800720a:	f7ff fed3 	bl	8006fb4 <get_eit_entry>
 800720e:	2800      	cmp	r0, #0
 8007210:	d0f2      	beq.n	80071f8 <__gnu_Unwind_RaiseException+0x34>
 8007212:	2009      	movs	r0, #9
 8007214:	b079      	add	sp, #484	; 0x1e4
 8007216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007218:	4668      	mov	r0, sp
 800721a:	f7ff ff17 	bl	800704c <restore_non_core_regs>
 800721e:	2c06      	cmp	r4, #6
 8007220:	d1f7      	bne.n	8007212 <__gnu_Unwind_RaiseException+0x4e>
 8007222:	4631      	mov	r1, r6
 8007224:	4628      	mov	r0, r5
 8007226:	f7ff ff47 	bl	80070b8 <unwind_phase2>
 800722a:	bf00      	nop

0800722c <__gnu_Unwind_ForcedUnwind>:
 800722c:	60c1      	str	r1, [r0, #12]
 800722e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007230:	6182      	str	r2, [r0, #24]
 8007232:	6419      	str	r1, [r3, #64]	; 0x40
 8007234:	2200      	movs	r2, #0
 8007236:	4619      	mov	r1, r3
 8007238:	e75c      	b.n	80070f4 <unwind_phase2_forced>
 800723a:	bf00      	nop

0800723c <__gnu_Unwind_Resume>:
 800723c:	b570      	push	{r4, r5, r6, lr}
 800723e:	68c6      	ldr	r6, [r0, #12]
 8007240:	6943      	ldr	r3, [r0, #20]
 8007242:	640b      	str	r3, [r1, #64]	; 0x40
 8007244:	b9ae      	cbnz	r6, 8007272 <__gnu_Unwind_Resume+0x36>
 8007246:	6903      	ldr	r3, [r0, #16]
 8007248:	460a      	mov	r2, r1
 800724a:	4604      	mov	r4, r0
 800724c:	460d      	mov	r5, r1
 800724e:	4601      	mov	r1, r0
 8007250:	2002      	movs	r0, #2
 8007252:	4798      	blx	r3
 8007254:	2807      	cmp	r0, #7
 8007256:	d005      	beq.n	8007264 <__gnu_Unwind_Resume+0x28>
 8007258:	2808      	cmp	r0, #8
 800725a:	d10f      	bne.n	800727c <__gnu_Unwind_Resume+0x40>
 800725c:	4629      	mov	r1, r5
 800725e:	4620      	mov	r0, r4
 8007260:	f7ff ff2a 	bl	80070b8 <unwind_phase2>
 8007264:	4630      	mov	r0, r6
 8007266:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007268:	f7ff ff24 	bl	80070b4 <_Unwind_DebugHook>
 800726c:	1d28      	adds	r0, r5, #4
 800726e:	f000 fb55 	bl	800791c <__restore_core_regs>
 8007272:	2201      	movs	r2, #1
 8007274:	f7ff ff3e 	bl	80070f4 <unwind_phase2_forced>
 8007278:	f012 fc8c 	bl	8019b94 <abort>
 800727c:	f012 fc8a 	bl	8019b94 <abort>

08007280 <__gnu_Unwind_Resume_or_Rethrow>:
 8007280:	68c2      	ldr	r2, [r0, #12]
 8007282:	b11a      	cbz	r2, 800728c <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8007284:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8007286:	640a      	str	r2, [r1, #64]	; 0x40
 8007288:	2200      	movs	r2, #0
 800728a:	e733      	b.n	80070f4 <unwind_phase2_forced>
 800728c:	e79a      	b.n	80071c4 <__gnu_Unwind_RaiseException>
 800728e:	bf00      	nop

08007290 <_Unwind_Complete>:
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop

08007294 <_Unwind_DeleteException>:
 8007294:	6883      	ldr	r3, [r0, #8]
 8007296:	4601      	mov	r1, r0
 8007298:	b10b      	cbz	r3, 800729e <_Unwind_DeleteException+0xa>
 800729a:	2001      	movs	r0, #1
 800729c:	4718      	bx	r3
 800729e:	4770      	bx	lr

080072a0 <_Unwind_VRS_Get>:
 80072a0:	2901      	cmp	r1, #1
 80072a2:	d012      	beq.n	80072ca <_Unwind_VRS_Get+0x2a>
 80072a4:	d809      	bhi.n	80072ba <_Unwind_VRS_Get+0x1a>
 80072a6:	b973      	cbnz	r3, 80072c6 <_Unwind_VRS_Get+0x26>
 80072a8:	2a0f      	cmp	r2, #15
 80072aa:	d80c      	bhi.n	80072c6 <_Unwind_VRS_Get+0x26>
 80072ac:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80072b0:	4618      	mov	r0, r3
 80072b2:	6853      	ldr	r3, [r2, #4]
 80072b4:	9a00      	ldr	r2, [sp, #0]
 80072b6:	6013      	str	r3, [r2, #0]
 80072b8:	4770      	bx	lr
 80072ba:	3903      	subs	r1, #3
 80072bc:	2901      	cmp	r1, #1
 80072be:	bf94      	ite	ls
 80072c0:	2001      	movls	r0, #1
 80072c2:	2002      	movhi	r0, #2
 80072c4:	4770      	bx	lr
 80072c6:	2002      	movs	r0, #2
 80072c8:	4770      	bx	lr
 80072ca:	4608      	mov	r0, r1
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop

080072d0 <_Unwind_GetGR>:
 80072d0:	b500      	push	{lr}
 80072d2:	b085      	sub	sp, #20
 80072d4:	460a      	mov	r2, r1
 80072d6:	2300      	movs	r3, #0
 80072d8:	a903      	add	r1, sp, #12
 80072da:	9100      	str	r1, [sp, #0]
 80072dc:	4619      	mov	r1, r3
 80072de:	f7ff ffdf 	bl	80072a0 <_Unwind_VRS_Get>
 80072e2:	9803      	ldr	r0, [sp, #12]
 80072e4:	b005      	add	sp, #20
 80072e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80072ea:	bf00      	nop

080072ec <_Unwind_VRS_Set>:
 80072ec:	2901      	cmp	r1, #1
 80072ee:	d012      	beq.n	8007316 <_Unwind_VRS_Set+0x2a>
 80072f0:	d809      	bhi.n	8007306 <_Unwind_VRS_Set+0x1a>
 80072f2:	b973      	cbnz	r3, 8007312 <_Unwind_VRS_Set+0x26>
 80072f4:	2a0f      	cmp	r2, #15
 80072f6:	d80c      	bhi.n	8007312 <_Unwind_VRS_Set+0x26>
 80072f8:	9900      	ldr	r1, [sp, #0]
 80072fa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80072fe:	6809      	ldr	r1, [r1, #0]
 8007300:	6051      	str	r1, [r2, #4]
 8007302:	4618      	mov	r0, r3
 8007304:	4770      	bx	lr
 8007306:	3903      	subs	r1, #3
 8007308:	2901      	cmp	r1, #1
 800730a:	bf94      	ite	ls
 800730c:	2001      	movls	r0, #1
 800730e:	2002      	movhi	r0, #2
 8007310:	4770      	bx	lr
 8007312:	2002      	movs	r0, #2
 8007314:	4770      	bx	lr
 8007316:	4608      	mov	r0, r1
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop

0800731c <_Unwind_SetGR>:
 800731c:	b510      	push	{r4, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	2300      	movs	r3, #0
 8007322:	ac03      	add	r4, sp, #12
 8007324:	9203      	str	r2, [sp, #12]
 8007326:	9400      	str	r4, [sp, #0]
 8007328:	460a      	mov	r2, r1
 800732a:	4619      	mov	r1, r3
 800732c:	f7ff ffde 	bl	80072ec <_Unwind_VRS_Set>
 8007330:	b004      	add	sp, #16
 8007332:	bd10      	pop	{r4, pc}

08007334 <__gnu_Unwind_Backtrace>:
 8007334:	b570      	push	{r4, r5, r6, lr}
 8007336:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8007338:	6413      	str	r3, [r2, #64]	; 0x40
 800733a:	f102 0c04 	add.w	ip, r2, #4
 800733e:	4605      	mov	r5, r0
 8007340:	460c      	mov	r4, r1
 8007342:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007346:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800734a:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 800734e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8007352:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007356:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800735a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800735e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8007362:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8007366:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800736a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800736e:	9616      	str	r6, [sp, #88]	; 0x58
 8007370:	e010      	b.n	8007394 <__gnu_Unwind_Backtrace+0x60>
 8007372:	f7ff ffd3 	bl	800731c <_Unwind_SetGR>
 8007376:	4621      	mov	r1, r4
 8007378:	a816      	add	r0, sp, #88	; 0x58
 800737a:	47a8      	blx	r5
 800737c:	4603      	mov	r3, r0
 800737e:	aa16      	add	r2, sp, #88	; 0x58
 8007380:	4669      	mov	r1, sp
 8007382:	2008      	movs	r0, #8
 8007384:	b983      	cbnz	r3, 80073a8 <__gnu_Unwind_Backtrace+0x74>
 8007386:	9b04      	ldr	r3, [sp, #16]
 8007388:	4798      	blx	r3
 800738a:	2805      	cmp	r0, #5
 800738c:	4606      	mov	r6, r0
 800738e:	d00c      	beq.n	80073aa <__gnu_Unwind_Backtrace+0x76>
 8007390:	2809      	cmp	r0, #9
 8007392:	d009      	beq.n	80073a8 <__gnu_Unwind_Backtrace+0x74>
 8007394:	9926      	ldr	r1, [sp, #152]	; 0x98
 8007396:	4668      	mov	r0, sp
 8007398:	f7ff fe0c 	bl	8006fb4 <get_eit_entry>
 800739c:	4603      	mov	r3, r0
 800739e:	466a      	mov	r2, sp
 80073a0:	210c      	movs	r1, #12
 80073a2:	a816      	add	r0, sp, #88	; 0x58
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d0e4      	beq.n	8007372 <__gnu_Unwind_Backtrace+0x3e>
 80073a8:	2609      	movs	r6, #9
 80073aa:	a816      	add	r0, sp, #88	; 0x58
 80073ac:	f7ff fe4e 	bl	800704c <restore_non_core_regs>
 80073b0:	4630      	mov	r0, r6
 80073b2:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 80073b6:	bd70      	pop	{r4, r5, r6, pc}

080073b8 <__gnu_unwind_pr_common>:
 80073b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073bc:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 80073be:	b089      	sub	sp, #36	; 0x24
 80073c0:	461e      	mov	r6, r3
 80073c2:	f854 3b04 	ldr.w	r3, [r4], #4
 80073c6:	9406      	str	r4, [sp, #24]
 80073c8:	460d      	mov	r5, r1
 80073ca:	4617      	mov	r7, r2
 80073cc:	f000 0803 	and.w	r8, r0, #3
 80073d0:	2e00      	cmp	r6, #0
 80073d2:	d079      	beq.n	80074c8 <__gnu_unwind_pr_common+0x110>
 80073d4:	0c1a      	lsrs	r2, r3, #16
 80073d6:	f88d 201d 	strb.w	r2, [sp, #29]
 80073da:	041b      	lsls	r3, r3, #16
 80073dc:	b2d2      	uxtb	r2, r2
 80073de:	9305      	str	r3, [sp, #20]
 80073e0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80073e4:	2302      	movs	r3, #2
 80073e6:	f88d 301c 	strb.w	r3, [sp, #28]
 80073ea:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80073ec:	f1b8 0f02 	cmp.w	r8, #2
 80073f0:	bf08      	it	eq
 80073f2:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80073f4:	f013 0301 	ands.w	r3, r3, #1
 80073f8:	d00c      	beq.n	8007414 <__gnu_unwind_pr_common+0x5c>
 80073fa:	a905      	add	r1, sp, #20
 80073fc:	4638      	mov	r0, r7
 80073fe:	f000 fb8f 	bl	8007b20 <__gnu_unwind_execute>
 8007402:	b918      	cbnz	r0, 800740c <__gnu_unwind_pr_common+0x54>
 8007404:	2008      	movs	r0, #8
 8007406:	b009      	add	sp, #36	; 0x24
 8007408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800740c:	2009      	movs	r0, #9
 800740e:	b009      	add	sp, #36	; 0x24
 8007410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007414:	f8d4 a000 	ldr.w	sl, [r4]
 8007418:	f1ba 0f00 	cmp.w	sl, #0
 800741c:	d0ed      	beq.n	80073fa <__gnu_unwind_pr_common+0x42>
 800741e:	9301      	str	r3, [sp, #4]
 8007420:	f000 0308 	and.w	r3, r0, #8
 8007424:	9302      	str	r3, [sp, #8]
 8007426:	2e02      	cmp	r6, #2
 8007428:	d04a      	beq.n	80074c0 <__gnu_unwind_pr_common+0x108>
 800742a:	f8b4 a000 	ldrh.w	sl, [r4]
 800742e:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8007432:	3404      	adds	r4, #4
 8007434:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8007436:	f029 0b01 	bic.w	fp, r9, #1
 800743a:	210f      	movs	r1, #15
 800743c:	4638      	mov	r0, r7
 800743e:	449b      	add	fp, r3
 8007440:	f7ff ff46 	bl	80072d0 <_Unwind_GetGR>
 8007444:	4583      	cmp	fp, r0
 8007446:	d839      	bhi.n	80074bc <__gnu_unwind_pr_common+0x104>
 8007448:	f02a 0201 	bic.w	r2, sl, #1
 800744c:	445a      	add	r2, fp
 800744e:	4282      	cmp	r2, r0
 8007450:	bf94      	ite	ls
 8007452:	2200      	movls	r2, #0
 8007454:	2201      	movhi	r2, #1
 8007456:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	f00a 0a01 	and.w	sl, sl, #1
 8007462:	ea43 030a 	orr.w	r3, r3, sl
 8007466:	2b01      	cmp	r3, #1
 8007468:	d04b      	beq.n	8007502 <__gnu_unwind_pr_common+0x14a>
 800746a:	2b02      	cmp	r3, #2
 800746c:	d032      	beq.n	80074d4 <__gnu_unwind_pr_common+0x11c>
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1cc      	bne.n	800740c <__gnu_unwind_pr_common+0x54>
 8007472:	f1b8 0f00 	cmp.w	r8, #0
 8007476:	d002      	beq.n	800747e <__gnu_unwind_pr_common+0xc6>
 8007478:	2a00      	cmp	r2, #0
 800747a:	f040 80cd 	bne.w	8007618 <__gnu_unwind_pr_common+0x260>
 800747e:	3404      	adds	r4, #4
 8007480:	f8d4 a000 	ldr.w	sl, [r4]
 8007484:	f1ba 0f00 	cmp.w	sl, #0
 8007488:	d1cd      	bne.n	8007426 <__gnu_unwind_pr_common+0x6e>
 800748a:	a905      	add	r1, sp, #20
 800748c:	4638      	mov	r0, r7
 800748e:	f000 fb47 	bl	8007b20 <__gnu_unwind_execute>
 8007492:	2800      	cmp	r0, #0
 8007494:	d1ba      	bne.n	800740c <__gnu_unwind_pr_common+0x54>
 8007496:	9b01      	ldr	r3, [sp, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d0b3      	beq.n	8007404 <__gnu_unwind_pr_common+0x4c>
 800749c:	210f      	movs	r1, #15
 800749e:	4638      	mov	r0, r7
 80074a0:	f7ff ff16 	bl	80072d0 <_Unwind_GetGR>
 80074a4:	210e      	movs	r1, #14
 80074a6:	4602      	mov	r2, r0
 80074a8:	4638      	mov	r0, r7
 80074aa:	f7ff ff37 	bl	800731c <_Unwind_SetGR>
 80074ae:	4638      	mov	r0, r7
 80074b0:	4a6a      	ldr	r2, [pc, #424]	; (800765c <__gnu_unwind_pr_common+0x2a4>)
 80074b2:	210f      	movs	r1, #15
 80074b4:	f7ff ff32 	bl	800731c <_Unwind_SetGR>
 80074b8:	2007      	movs	r0, #7
 80074ba:	e7a8      	b.n	800740e <__gnu_unwind_pr_common+0x56>
 80074bc:	2200      	movs	r2, #0
 80074be:	e7ca      	b.n	8007456 <__gnu_unwind_pr_common+0x9e>
 80074c0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80074c4:	3408      	adds	r4, #8
 80074c6:	e7b5      	b.n	8007434 <__gnu_unwind_pr_common+0x7c>
 80074c8:	021b      	lsls	r3, r3, #8
 80074ca:	9305      	str	r3, [sp, #20]
 80074cc:	f88d 601d 	strb.w	r6, [sp, #29]
 80074d0:	2303      	movs	r3, #3
 80074d2:	e788      	b.n	80073e6 <__gnu_unwind_pr_common+0x2e>
 80074d4:	f8d4 9000 	ldr.w	r9, [r4]
 80074d8:	f029 4b00 	bic.w	fp, r9, #2147483648	; 0x80000000
 80074dc:	f1b8 0f00 	cmp.w	r8, #0
 80074e0:	d146      	bne.n	8007570 <__gnu_unwind_pr_common+0x1b8>
 80074e2:	b12a      	cbz	r2, 80074f0 <__gnu_unwind_pr_common+0x138>
 80074e4:	9b02      	ldr	r3, [sp, #8]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d05b      	beq.n	80075a2 <__gnu_unwind_pr_common+0x1ea>
 80074ea:	f1bb 0f00 	cmp.w	fp, #0
 80074ee:	d073      	beq.n	80075d8 <__gnu_unwind_pr_common+0x220>
 80074f0:	f1b9 0f00 	cmp.w	r9, #0
 80074f4:	da00      	bge.n	80074f8 <__gnu_unwind_pr_common+0x140>
 80074f6:	3404      	adds	r4, #4
 80074f8:	f10b 0b01 	add.w	fp, fp, #1
 80074fc:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8007500:	e7be      	b.n	8007480 <__gnu_unwind_pr_common+0xc8>
 8007502:	f1b8 0f00 	cmp.w	r8, #0
 8007506:	d119      	bne.n	800753c <__gnu_unwind_pr_common+0x184>
 8007508:	b1b2      	cbz	r2, 8007538 <__gnu_unwind_pr_common+0x180>
 800750a:	6861      	ldr	r1, [r4, #4]
 800750c:	6822      	ldr	r2, [r4, #0]
 800750e:	1c88      	adds	r0, r1, #2
 8007510:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8007514:	f43f af7a 	beq.w	800740c <__gnu_unwind_pr_common+0x54>
 8007518:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800751c:	3101      	adds	r1, #1
 800751e:	9304      	str	r3, [sp, #16]
 8007520:	f000 808e 	beq.w	8007640 <__gnu_unwind_pr_common+0x288>
 8007524:	1d20      	adds	r0, r4, #4
 8007526:	f7ff fdbf 	bl	80070a8 <_Unwind_decode_typeinfo_ptr.constprop.0>
 800752a:	ab04      	add	r3, sp, #16
 800752c:	4601      	mov	r1, r0
 800752e:	4628      	mov	r0, r5
 8007530:	f011 f9e4 	bl	80188fc <__cxa_type_match>
 8007534:	2800      	cmp	r0, #0
 8007536:	d159      	bne.n	80075ec <__gnu_unwind_pr_common+0x234>
 8007538:	3408      	adds	r4, #8
 800753a:	e7a1      	b.n	8007480 <__gnu_unwind_pr_common+0xc8>
 800753c:	210d      	movs	r1, #13
 800753e:	4638      	mov	r0, r7
 8007540:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8007544:	f7ff fec4 	bl	80072d0 <_Unwind_GetGR>
 8007548:	4581      	cmp	r9, r0
 800754a:	d1f5      	bne.n	8007538 <__gnu_unwind_pr_common+0x180>
 800754c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800754e:	429c      	cmp	r4, r3
 8007550:	d1f2      	bne.n	8007538 <__gnu_unwind_pr_common+0x180>
 8007552:	4620      	mov	r0, r4
 8007554:	f7ff fce2 	bl	8006f1c <selfrel_offset31>
 8007558:	210f      	movs	r1, #15
 800755a:	4602      	mov	r2, r0
 800755c:	4638      	mov	r0, r7
 800755e:	f7ff fedd 	bl	800731c <_Unwind_SetGR>
 8007562:	4638      	mov	r0, r7
 8007564:	462a      	mov	r2, r5
 8007566:	2100      	movs	r1, #0
 8007568:	f7ff fed8 	bl	800731c <_Unwind_SetGR>
 800756c:	2007      	movs	r0, #7
 800756e:	e74e      	b.n	800740e <__gnu_unwind_pr_common+0x56>
 8007570:	210d      	movs	r1, #13
 8007572:	4638      	mov	r0, r7
 8007574:	f8d5 a020 	ldr.w	sl, [r5, #32]
 8007578:	f7ff feaa 	bl	80072d0 <_Unwind_GetGR>
 800757c:	4582      	cmp	sl, r0
 800757e:	d1b7      	bne.n	80074f0 <__gnu_unwind_pr_common+0x138>
 8007580:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007582:	429c      	cmp	r4, r3
 8007584:	d1b4      	bne.n	80074f0 <__gnu_unwind_pr_common+0x138>
 8007586:	2304      	movs	r3, #4
 8007588:	2200      	movs	r2, #0
 800758a:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 800758e:	18e3      	adds	r3, r4, r3
 8007590:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8007594:	636b      	str	r3, [r5, #52]	; 0x34
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	db59      	blt.n	8007650 <__gnu_unwind_pr_common+0x298>
 800759c:	2301      	movs	r3, #1
 800759e:	9301      	str	r3, [sp, #4]
 80075a0:	e7aa      	b.n	80074f8 <__gnu_unwind_pr_common+0x140>
 80075a2:	4699      	mov	r9, r3
 80075a4:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80075a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80075ac:	f104 0a04 	add.w	sl, r4, #4
 80075b0:	46b0      	mov	r8, r6
 80075b2:	461e      	mov	r6, r3
 80075b4:	e00e      	b.n	80075d4 <__gnu_unwind_pr_common+0x21c>
 80075b6:	4650      	mov	r0, sl
 80075b8:	9604      	str	r6, [sp, #16]
 80075ba:	f7ff fd75 	bl	80070a8 <_Unwind_decode_typeinfo_ptr.constprop.0>
 80075be:	2200      	movs	r2, #0
 80075c0:	4601      	mov	r1, r0
 80075c2:	ab04      	add	r3, sp, #16
 80075c4:	4628      	mov	r0, r5
 80075c6:	f109 0901 	add.w	r9, r9, #1
 80075ca:	f10a 0a04 	add.w	sl, sl, #4
 80075ce:	f011 f995 	bl	80188fc <__cxa_type_match>
 80075d2:	b9d8      	cbnz	r0, 800760c <__gnu_unwind_pr_common+0x254>
 80075d4:	45d9      	cmp	r9, fp
 80075d6:	d1ee      	bne.n	80075b6 <__gnu_unwind_pr_common+0x1fe>
 80075d8:	210d      	movs	r1, #13
 80075da:	4638      	mov	r0, r7
 80075dc:	f7ff fe78 	bl	80072d0 <_Unwind_GetGR>
 80075e0:	9b04      	ldr	r3, [sp, #16]
 80075e2:	6228      	str	r0, [r5, #32]
 80075e4:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 80075e8:	2006      	movs	r0, #6
 80075ea:	e710      	b.n	800740e <__gnu_unwind_pr_common+0x56>
 80075ec:	4681      	mov	r9, r0
 80075ee:	210d      	movs	r1, #13
 80075f0:	4638      	mov	r0, r7
 80075f2:	f7ff fe6d 	bl	80072d0 <_Unwind_GetGR>
 80075f6:	f1b9 0f02 	cmp.w	r9, #2
 80075fa:	bf04      	itt	eq
 80075fc:	462b      	moveq	r3, r5
 80075fe:	9a04      	ldreq	r2, [sp, #16]
 8007600:	6228      	str	r0, [r5, #32]
 8007602:	bf14      	ite	ne
 8007604:	9b04      	ldrne	r3, [sp, #16]
 8007606:	f843 2f2c 	streq.w	r2, [r3, #44]!
 800760a:	e7eb      	b.n	80075e4 <__gnu_unwind_pr_common+0x22c>
 800760c:	4646      	mov	r6, r8
 800760e:	f8d4 9000 	ldr.w	r9, [r4]
 8007612:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007616:	e76b      	b.n	80074f0 <__gnu_unwind_pr_common+0x138>
 8007618:	4620      	mov	r0, r4
 800761a:	f7ff fc7f 	bl	8006f1c <selfrel_offset31>
 800761e:	3404      	adds	r4, #4
 8007620:	4602      	mov	r2, r0
 8007622:	63ac      	str	r4, [r5, #56]	; 0x38
 8007624:	4628      	mov	r0, r5
 8007626:	4614      	mov	r4, r2
 8007628:	f011 f9c0 	bl	80189ac <__cxa_begin_cleanup>
 800762c:	2800      	cmp	r0, #0
 800762e:	f43f aeed 	beq.w	800740c <__gnu_unwind_pr_common+0x54>
 8007632:	4638      	mov	r0, r7
 8007634:	4622      	mov	r2, r4
 8007636:	210f      	movs	r1, #15
 8007638:	f7ff fe70 	bl	800731c <_Unwind_SetGR>
 800763c:	2007      	movs	r0, #7
 800763e:	e6e6      	b.n	800740e <__gnu_unwind_pr_common+0x56>
 8007640:	210d      	movs	r1, #13
 8007642:	4638      	mov	r0, r7
 8007644:	9301      	str	r3, [sp, #4]
 8007646:	f7ff fe43 	bl	80072d0 <_Unwind_GetGR>
 800764a:	9b01      	ldr	r3, [sp, #4]
 800764c:	6228      	str	r0, [r5, #32]
 800764e:	e7c9      	b.n	80075e4 <__gnu_unwind_pr_common+0x22c>
 8007650:	f10b 0001 	add.w	r0, fp, #1
 8007654:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007658:	e77c      	b.n	8007554 <__gnu_unwind_pr_common+0x19c>
 800765a:	bf00      	nop
 800765c:	080198e9 	.word	0x080198e9

08007660 <__aeabi_unwind_cpp_pr0>:
 8007660:	2300      	movs	r3, #0
 8007662:	e6a9      	b.n	80073b8 <__gnu_unwind_pr_common>

08007664 <__aeabi_unwind_cpp_pr1>:
 8007664:	2301      	movs	r3, #1
 8007666:	e6a7      	b.n	80073b8 <__gnu_unwind_pr_common>

08007668 <__aeabi_unwind_cpp_pr2>:
 8007668:	2302      	movs	r3, #2
 800766a:	e6a5      	b.n	80073b8 <__gnu_unwind_pr_common>

0800766c <_Unwind_VRS_Pop>:
 800766c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007670:	4606      	mov	r6, r0
 8007672:	b0c3      	sub	sp, #268	; 0x10c
 8007674:	4691      	mov	r9, r2
 8007676:	461c      	mov	r4, r3
 8007678:	2904      	cmp	r1, #4
 800767a:	f200 809b 	bhi.w	80077b4 <_Unwind_VRS_Pop+0x148>
 800767e:	e8df f001 	tbb	[pc, r1]
 8007682:	567b      	.short	0x567b
 8007684:	2e99      	.short	0x2e99
 8007686:	03          	.byte	0x03
 8007687:	00          	.byte	0x00
 8007688:	2c00      	cmp	r4, #0
 800768a:	f040 8093 	bne.w	80077b4 <_Unwind_VRS_Pop+0x148>
 800768e:	2a10      	cmp	r2, #16
 8007690:	f200 8090 	bhi.w	80077b4 <_Unwind_VRS_Pop+0x148>
 8007694:	6803      	ldr	r3, [r0, #0]
 8007696:	06dc      	lsls	r4, r3, #27
 8007698:	f100 80f3 	bmi.w	8007882 <_Unwind_VRS_Pop+0x216>
 800769c:	af20      	add	r7, sp, #128	; 0x80
 800769e:	4638      	mov	r0, r7
 80076a0:	f000 f9ae 	bl	8007a00 <__gnu_Unwind_Save_WMMXC>
 80076a4:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 80076a6:	4639      	mov	r1, r7
 80076a8:	2300      	movs	r3, #0
 80076aa:	f04f 0c01 	mov.w	ip, #1
 80076ae:	fa0c f203 	lsl.w	r2, ip, r3
 80076b2:	ea12 0f09 	tst.w	r2, r9
 80076b6:	4620      	mov	r0, r4
 80076b8:	f103 0301 	add.w	r3, r3, #1
 80076bc:	d003      	beq.n	80076c6 <_Unwind_VRS_Pop+0x5a>
 80076be:	f850 2b04 	ldr.w	r2, [r0], #4
 80076c2:	600a      	str	r2, [r1, #0]
 80076c4:	4604      	mov	r4, r0
 80076c6:	2b04      	cmp	r3, #4
 80076c8:	f101 0104 	add.w	r1, r1, #4
 80076cc:	d1ef      	bne.n	80076ae <_Unwind_VRS_Pop+0x42>
 80076ce:	4638      	mov	r0, r7
 80076d0:	63b4      	str	r4, [r6, #56]	; 0x38
 80076d2:	f000 f98b 	bl	80079ec <__gnu_Unwind_Restore_WMMXC>
 80076d6:	2000      	movs	r0, #0
 80076d8:	b043      	add	sp, #268	; 0x10c
 80076da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076de:	2c03      	cmp	r4, #3
 80076e0:	d168      	bne.n	80077b4 <_Unwind_VRS_Pop+0x148>
 80076e2:	b294      	uxth	r4, r2
 80076e4:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 80076e8:	2b10      	cmp	r3, #16
 80076ea:	ea4f 4912 	mov.w	r9, r2, lsr #16
 80076ee:	d861      	bhi.n	80077b4 <_Unwind_VRS_Pop+0x148>
 80076f0:	6803      	ldr	r3, [r0, #0]
 80076f2:	071d      	lsls	r5, r3, #28
 80076f4:	f100 80cd 	bmi.w	8007892 <_Unwind_VRS_Pop+0x226>
 80076f8:	af20      	add	r7, sp, #128	; 0x80
 80076fa:	4638      	mov	r0, r7
 80076fc:	f000 f954 	bl	80079a8 <__gnu_Unwind_Save_WMMXD>
 8007700:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8007702:	eb07 01c9 	add.w	r1, r7, r9, lsl #3
 8007706:	b154      	cbz	r4, 800771e <_Unwind_VRS_Pop+0xb2>
 8007708:	460b      	mov	r3, r1
 800770a:	1ad0      	subs	r0, r2, r3
 800770c:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8007710:	00e4      	lsls	r4, r4, #3
 8007712:	581d      	ldr	r5, [r3, r0]
 8007714:	f843 5b04 	str.w	r5, [r3], #4
 8007718:	428b      	cmp	r3, r1
 800771a:	d1fa      	bne.n	8007712 <_Unwind_VRS_Pop+0xa6>
 800771c:	4422      	add	r2, r4
 800771e:	4638      	mov	r0, r7
 8007720:	63b2      	str	r2, [r6, #56]	; 0x38
 8007722:	f000 f91f 	bl	8007964 <__gnu_Unwind_Restore_WMMXD>
 8007726:	2000      	movs	r0, #0
 8007728:	b043      	add	sp, #268	; 0x10c
 800772a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800772e:	2c01      	cmp	r4, #1
 8007730:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8007734:	fa1f f982 	uxth.w	r9, r2
 8007738:	d038      	beq.n	80077ac <_Unwind_VRS_Pop+0x140>
 800773a:	2c05      	cmp	r4, #5
 800773c:	d13a      	bne.n	80077b4 <_Unwind_VRS_Pop+0x148>
 800773e:	eb08 0309 	add.w	r3, r8, r9
 8007742:	2b20      	cmp	r3, #32
 8007744:	d836      	bhi.n	80077b4 <_Unwind_VRS_Pop+0x148>
 8007746:	f1b8 0f0f 	cmp.w	r8, #15
 800774a:	d976      	bls.n	800783a <_Unwind_VRS_Pop+0x1ce>
 800774c:	f1b9 0f00 	cmp.w	r9, #0
 8007750:	f040 8083 	bne.w	800785a <_Unwind_VRS_Pop+0x1ee>
 8007754:	2b0f      	cmp	r3, #15
 8007756:	d80b      	bhi.n	8007770 <_Unwind_VRS_Pop+0x104>
 8007758:	6833      	ldr	r3, [r6, #0]
 800775a:	07d8      	lsls	r0, r3, #31
 800775c:	d508      	bpl.n	8007770 <_Unwind_VRS_Pop+0x104>
 800775e:	4630      	mov	r0, r6
 8007760:	f023 0301 	bic.w	r3, r3, #1
 8007764:	f043 0302 	orr.w	r3, r3, #2
 8007768:	f840 3b48 	str.w	r3, [r0], #72
 800776c:	f000 f8ee 	bl	800794c <__gnu_Unwind_Save_VFP_D>
 8007770:	2000      	movs	r0, #0
 8007772:	b043      	add	sp, #268	; 0x10c
 8007774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007778:	b9e4      	cbnz	r4, 80077b4 <_Unwind_VRS_Pop+0x148>
 800777a:	6b87      	ldr	r7, [r0, #56]	; 0x38
 800777c:	4623      	mov	r3, r4
 800777e:	fa1f fc82 	uxth.w	ip, r2
 8007782:	2001      	movs	r0, #1
 8007784:	1d34      	adds	r4, r6, #4
 8007786:	fa00 f203 	lsl.w	r2, r0, r3
 800778a:	ea12 0f0c 	tst.w	r2, ip
 800778e:	4639      	mov	r1, r7
 8007790:	d004      	beq.n	800779c <_Unwind_VRS_Pop+0x130>
 8007792:	f851 2b04 	ldr.w	r2, [r1], #4
 8007796:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 800779a:	460f      	mov	r7, r1
 800779c:	3301      	adds	r3, #1
 800779e:	2b10      	cmp	r3, #16
 80077a0:	d1f1      	bne.n	8007786 <_Unwind_VRS_Pop+0x11a>
 80077a2:	f419 5000 	ands.w	r0, r9, #8192	; 0x2000
 80077a6:	d1e3      	bne.n	8007770 <_Unwind_VRS_Pop+0x104>
 80077a8:	63b7      	str	r7, [r6, #56]	; 0x38
 80077aa:	e004      	b.n	80077b6 <_Unwind_VRS_Pop+0x14a>
 80077ac:	eb08 0309 	add.w	r3, r8, r9
 80077b0:	2b10      	cmp	r3, #16
 80077b2:	d903      	bls.n	80077bc <_Unwind_VRS_Pop+0x150>
 80077b4:	2002      	movs	r0, #2
 80077b6:	b043      	add	sp, #268	; 0x10c
 80077b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077bc:	f1b8 0f0f 	cmp.w	r8, #15
 80077c0:	d8f8      	bhi.n	80077b4 <_Unwind_VRS_Pop+0x148>
 80077c2:	6833      	ldr	r3, [r6, #0]
 80077c4:	07da      	lsls	r2, r3, #31
 80077c6:	d506      	bpl.n	80077d6 <_Unwind_VRS_Pop+0x16a>
 80077c8:	4630      	mov	r0, r6
 80077ca:	f023 0303 	bic.w	r3, r3, #3
 80077ce:	f840 3b48 	str.w	r3, [r0], #72
 80077d2:	f000 f8b3 	bl	800793c <__gnu_Unwind_Save_VFP>
 80077d6:	af20      	add	r7, sp, #128	; 0x80
 80077d8:	4638      	mov	r0, r7
 80077da:	464d      	mov	r5, r9
 80077dc:	f000 f8ae 	bl	800793c <__gnu_Unwind_Save_VFP>
 80077e0:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80077e2:	2d00      	cmp	r5, #0
 80077e4:	d05e      	beq.n	80078a4 <_Unwind_VRS_Pop+0x238>
 80077e6:	f04f 0900 	mov.w	r9, #0
 80077ea:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 80077ee:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
 80077f2:	3904      	subs	r1, #4
 80077f4:	f852 0b04 	ldr.w	r0, [r2], #4
 80077f8:	f841 0f04 	str.w	r0, [r1, #4]!
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d1f9      	bne.n	80077f4 <_Unwind_VRS_Pop+0x188>
 8007800:	f1b9 0f00 	cmp.w	r9, #0
 8007804:	d054      	beq.n	80078b0 <_Unwind_VRS_Pop+0x244>
 8007806:	466f      	mov	r7, sp
 8007808:	4641      	mov	r1, r8
 800780a:	2910      	cmp	r1, #16
 800780c:	bf38      	it	cc
 800780e:	2110      	movcc	r1, #16
 8007810:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8007814:	3984      	subs	r1, #132	; 0x84
 8007816:	eb03 02c9 	add.w	r2, r3, r9, lsl #3
 800781a:	f853 5b04 	ldr.w	r5, [r3], #4
 800781e:	f841 5f04 	str.w	r5, [r1, #4]!
 8007822:	429a      	cmp	r2, r3
 8007824:	d1f9      	bne.n	800781a <_Unwind_VRS_Pop+0x1ae>
 8007826:	2c01      	cmp	r4, #1
 8007828:	d03b      	beq.n	80078a2 <_Unwind_VRS_Pop+0x236>
 800782a:	f1b8 0f0f 	cmp.w	r8, #15
 800782e:	63b2      	str	r2, [r6, #56]	; 0x38
 8007830:	d958      	bls.n	80078e4 <_Unwind_VRS_Pop+0x278>
 8007832:	4638      	mov	r0, r7
 8007834:	f000 f88e 	bl	8007954 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8007838:	e79a      	b.n	8007770 <_Unwind_VRS_Pop+0x104>
 800783a:	2b10      	cmp	r3, #16
 800783c:	d954      	bls.n	80078e8 <_Unwind_VRS_Pop+0x27c>
 800783e:	6832      	ldr	r2, [r6, #0]
 8007840:	07d7      	lsls	r7, r2, #31
 8007842:	f1a3 0910 	sub.w	r9, r3, #16
 8007846:	d509      	bpl.n	800785c <_Unwind_VRS_Pop+0x1f0>
 8007848:	f022 0301 	bic.w	r3, r2, #1
 800784c:	4630      	mov	r0, r6
 800784e:	f043 0302 	orr.w	r3, r3, #2
 8007852:	f840 3b48 	str.w	r3, [r0], #72
 8007856:	f000 f879 	bl	800794c <__gnu_Unwind_Save_VFP_D>
 800785a:	6832      	ldr	r2, [r6, #0]
 800785c:	0753      	lsls	r3, r2, #29
 800785e:	d439      	bmi.n	80078d4 <_Unwind_VRS_Pop+0x268>
 8007860:	f1b8 0f0f 	cmp.w	r8, #15
 8007864:	d802      	bhi.n	800786c <_Unwind_VRS_Pop+0x200>
 8007866:	a820      	add	r0, sp, #128	; 0x80
 8007868:	f000 f870 	bl	800794c <__gnu_Unwind_Save_VFP_D>
 800786c:	466f      	mov	r7, sp
 800786e:	4638      	mov	r0, r7
 8007870:	f1c8 0510 	rsb	r5, r8, #16
 8007874:	f000 f872 	bl	800795c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8007878:	2d00      	cmp	r5, #0
 800787a:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800787c:	dd28      	ble.n	80078d0 <_Unwind_VRS_Pop+0x264>
 800787e:	af20      	add	r7, sp, #128	; 0x80
 8007880:	e7b3      	b.n	80077ea <_Unwind_VRS_Pop+0x17e>
 8007882:	f023 0310 	bic.w	r3, r3, #16
 8007886:	6003      	str	r3, [r0, #0]
 8007888:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 800788c:	f000 f8b8 	bl	8007a00 <__gnu_Unwind_Save_WMMXC>
 8007890:	e704      	b.n	800769c <_Unwind_VRS_Pop+0x30>
 8007892:	f023 0308 	bic.w	r3, r3, #8
 8007896:	6003      	str	r3, [r0, #0]
 8007898:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 800789c:	f000 f884 	bl	80079a8 <__gnu_Unwind_Save_WMMXD>
 80078a0:	e72a      	b.n	80076f8 <_Unwind_VRS_Pop+0x8c>
 80078a2:	af20      	add	r7, sp, #128	; 0x80
 80078a4:	3204      	adds	r2, #4
 80078a6:	63b2      	str	r2, [r6, #56]	; 0x38
 80078a8:	4638      	mov	r0, r7
 80078aa:	f000 f843 	bl	8007934 <__gnu_Unwind_Restore_VFP>
 80078ae:	e75f      	b.n	8007770 <_Unwind_VRS_Pop+0x104>
 80078b0:	2c01      	cmp	r4, #1
 80078b2:	d0f7      	beq.n	80078a4 <_Unwind_VRS_Pop+0x238>
 80078b4:	f1b8 0f0f 	cmp.w	r8, #15
 80078b8:	63b2      	str	r2, [r6, #56]	; 0x38
 80078ba:	f63f af59 	bhi.w	8007770 <_Unwind_VRS_Pop+0x104>
 80078be:	4638      	mov	r0, r7
 80078c0:	f000 f840 	bl	8007944 <__gnu_Unwind_Restore_VFP_D>
 80078c4:	f1b9 0f00 	cmp.w	r9, #0
 80078c8:	f43f af52 	beq.w	8007770 <_Unwind_VRS_Pop+0x104>
 80078cc:	466f      	mov	r7, sp
 80078ce:	e7b0      	b.n	8007832 <_Unwind_VRS_Pop+0x1c6>
 80078d0:	4613      	mov	r3, r2
 80078d2:	e799      	b.n	8007808 <_Unwind_VRS_Pop+0x19c>
 80078d4:	4630      	mov	r0, r6
 80078d6:	f022 0204 	bic.w	r2, r2, #4
 80078da:	f840 2bd0 	str.w	r2, [r0], #208
 80078de:	f000 f83d 	bl	800795c <__gnu_Unwind_Save_VFP_D_16_to_31>
 80078e2:	e7bd      	b.n	8007860 <_Unwind_VRS_Pop+0x1f4>
 80078e4:	af20      	add	r7, sp, #128	; 0x80
 80078e6:	e7ea      	b.n	80078be <_Unwind_VRS_Pop+0x252>
 80078e8:	6833      	ldr	r3, [r6, #0]
 80078ea:	07d9      	lsls	r1, r3, #31
 80078ec:	d508      	bpl.n	8007900 <_Unwind_VRS_Pop+0x294>
 80078ee:	f023 0301 	bic.w	r3, r3, #1
 80078f2:	4630      	mov	r0, r6
 80078f4:	f043 0302 	orr.w	r3, r3, #2
 80078f8:	f840 3b48 	str.w	r3, [r0], #72
 80078fc:	f000 f826 	bl	800794c <__gnu_Unwind_Save_VFP_D>
 8007900:	af20      	add	r7, sp, #128	; 0x80
 8007902:	4638      	mov	r0, r7
 8007904:	464d      	mov	r5, r9
 8007906:	f000 f821 	bl	800794c <__gnu_Unwind_Save_VFP_D>
 800790a:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800790c:	2d00      	cmp	r5, #0
 800790e:	f47f af6a 	bne.w	80077e6 <_Unwind_VRS_Pop+0x17a>
 8007912:	4638      	mov	r0, r7
 8007914:	f000 f816 	bl	8007944 <__gnu_Unwind_Restore_VFP_D>
 8007918:	e72a      	b.n	8007770 <_Unwind_VRS_Pop+0x104>
 800791a:	bf00      	nop

0800791c <__restore_core_regs>:
 800791c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8007920:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8007924:	469c      	mov	ip, r3
 8007926:	46a6      	mov	lr, r4
 8007928:	f84c 5d04 	str.w	r5, [ip, #-4]!
 800792c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8007930:	46e5      	mov	sp, ip
 8007932:	bd00      	pop	{pc}

08007934 <__gnu_Unwind_Restore_VFP>:
 8007934:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop

0800793c <__gnu_Unwind_Save_VFP>:
 800793c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop

08007944 <__gnu_Unwind_Restore_VFP_D>:
 8007944:	ec90 0b20 	vldmia	r0, {d0-d15}
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop

0800794c <__gnu_Unwind_Save_VFP_D>:
 800794c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop

08007954 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8007954:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop

0800795c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 800795c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop

08007964 <__gnu_Unwind_Restore_WMMXD>:
 8007964:	ecf0 0102 	ldfe	f0, [r0], #8
 8007968:	ecf0 1102 	ldfe	f1, [r0], #8
 800796c:	ecf0 2102 	ldfe	f2, [r0], #8
 8007970:	ecf0 3102 	ldfe	f3, [r0], #8
 8007974:	ecf0 4102 	ldfe	f4, [r0], #8
 8007978:	ecf0 5102 	ldfe	f5, [r0], #8
 800797c:	ecf0 6102 	ldfe	f6, [r0], #8
 8007980:	ecf0 7102 	ldfe	f7, [r0], #8
 8007984:	ecf0 8102 	ldfp	f0, [r0], #8
 8007988:	ecf0 9102 	ldfp	f1, [r0], #8
 800798c:	ecf0 a102 	ldfp	f2, [r0], #8
 8007990:	ecf0 b102 	ldfp	f3, [r0], #8
 8007994:	ecf0 c102 	ldfp	f4, [r0], #8
 8007998:	ecf0 d102 	ldfp	f5, [r0], #8
 800799c:	ecf0 e102 	ldfp	f6, [r0], #8
 80079a0:	ecf0 f102 	ldfp	f7, [r0], #8
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop

080079a8 <__gnu_Unwind_Save_WMMXD>:
 80079a8:	ece0 0102 	stfe	f0, [r0], #8
 80079ac:	ece0 1102 	stfe	f1, [r0], #8
 80079b0:	ece0 2102 	stfe	f2, [r0], #8
 80079b4:	ece0 3102 	stfe	f3, [r0], #8
 80079b8:	ece0 4102 	stfe	f4, [r0], #8
 80079bc:	ece0 5102 	stfe	f5, [r0], #8
 80079c0:	ece0 6102 	stfe	f6, [r0], #8
 80079c4:	ece0 7102 	stfe	f7, [r0], #8
 80079c8:	ece0 8102 	stfp	f0, [r0], #8
 80079cc:	ece0 9102 	stfp	f1, [r0], #8
 80079d0:	ece0 a102 	stfp	f2, [r0], #8
 80079d4:	ece0 b102 	stfp	f3, [r0], #8
 80079d8:	ece0 c102 	stfp	f4, [r0], #8
 80079dc:	ece0 d102 	stfp	f5, [r0], #8
 80079e0:	ece0 e102 	stfp	f6, [r0], #8
 80079e4:	ece0 f102 	stfp	f7, [r0], #8
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop

080079ec <__gnu_Unwind_Restore_WMMXC>:
 80079ec:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 80079f0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 80079f4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 80079f8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop

08007a00 <__gnu_Unwind_Save_WMMXC>:
 8007a00:	fca0 8101 	stc2	1, cr8, [r0], #4
 8007a04:	fca0 9101 	stc2	1, cr9, [r0], #4
 8007a08:	fca0 a101 	stc2	1, cr10, [r0], #4
 8007a0c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop

08007a14 <_Unwind_RaiseException>:
 8007a14:	46ec      	mov	ip, sp
 8007a16:	b500      	push	{lr}
 8007a18:	e92d 5000 	stmdb	sp!, {ip, lr}
 8007a1c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007a20:	f04f 0300 	mov.w	r3, #0
 8007a24:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007a28:	a901      	add	r1, sp, #4
 8007a2a:	f7ff fbcb 	bl	80071c4 <__gnu_Unwind_RaiseException>
 8007a2e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8007a32:	b012      	add	sp, #72	; 0x48
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop

08007a38 <_Unwind_Resume>:
 8007a38:	46ec      	mov	ip, sp
 8007a3a:	b500      	push	{lr}
 8007a3c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8007a40:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007a44:	f04f 0300 	mov.w	r3, #0
 8007a48:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007a4c:	a901      	add	r1, sp, #4
 8007a4e:	f7ff fbf5 	bl	800723c <__gnu_Unwind_Resume>
 8007a52:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8007a56:	b012      	add	sp, #72	; 0x48
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop

08007a5c <_Unwind_Resume_or_Rethrow>:
 8007a5c:	46ec      	mov	ip, sp
 8007a5e:	b500      	push	{lr}
 8007a60:	e92d 5000 	stmdb	sp!, {ip, lr}
 8007a64:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007a68:	f04f 0300 	mov.w	r3, #0
 8007a6c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007a70:	a901      	add	r1, sp, #4
 8007a72:	f7ff fc05 	bl	8007280 <__gnu_Unwind_Resume_or_Rethrow>
 8007a76:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8007a7a:	b012      	add	sp, #72	; 0x48
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop

08007a80 <_Unwind_ForcedUnwind>:
 8007a80:	46ec      	mov	ip, sp
 8007a82:	b500      	push	{lr}
 8007a84:	e92d 5000 	stmdb	sp!, {ip, lr}
 8007a88:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007a8c:	f04f 0300 	mov.w	r3, #0
 8007a90:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007a94:	ab01      	add	r3, sp, #4
 8007a96:	f7ff fbc9 	bl	800722c <__gnu_Unwind_ForcedUnwind>
 8007a9a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8007a9e:	b012      	add	sp, #72	; 0x48
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop

08007aa4 <_Unwind_Backtrace>:
 8007aa4:	46ec      	mov	ip, sp
 8007aa6:	b500      	push	{lr}
 8007aa8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8007aac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007ab0:	f04f 0300 	mov.w	r3, #0
 8007ab4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007ab8:	aa01      	add	r2, sp, #4
 8007aba:	f7ff fc3b 	bl	8007334 <__gnu_Unwind_Backtrace>
 8007abe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8007ac2:	b012      	add	sp, #72	; 0x48
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop

08007ac8 <next_unwind_byte>:
 8007ac8:	7a02      	ldrb	r2, [r0, #8]
 8007aca:	4603      	mov	r3, r0
 8007acc:	b97a      	cbnz	r2, 8007aee <next_unwind_byte+0x26>
 8007ace:	7a42      	ldrb	r2, [r0, #9]
 8007ad0:	b1a2      	cbz	r2, 8007afc <next_unwind_byte+0x34>
 8007ad2:	6841      	ldr	r1, [r0, #4]
 8007ad4:	3a01      	subs	r2, #1
 8007ad6:	b410      	push	{r4}
 8007ad8:	7242      	strb	r2, [r0, #9]
 8007ada:	6808      	ldr	r0, [r1, #0]
 8007adc:	2203      	movs	r2, #3
 8007ade:	1d0c      	adds	r4, r1, #4
 8007ae0:	721a      	strb	r2, [r3, #8]
 8007ae2:	0202      	lsls	r2, r0, #8
 8007ae4:	605c      	str	r4, [r3, #4]
 8007ae6:	0e00      	lsrs	r0, r0, #24
 8007ae8:	bc10      	pop	{r4}
 8007aea:	601a      	str	r2, [r3, #0]
 8007aec:	4770      	bx	lr
 8007aee:	6800      	ldr	r0, [r0, #0]
 8007af0:	3a01      	subs	r2, #1
 8007af2:	721a      	strb	r2, [r3, #8]
 8007af4:	0202      	lsls	r2, r0, #8
 8007af6:	601a      	str	r2, [r3, #0]
 8007af8:	0e00      	lsrs	r0, r0, #24
 8007afa:	4770      	bx	lr
 8007afc:	20b0      	movs	r0, #176	; 0xb0
 8007afe:	4770      	bx	lr

08007b00 <_Unwind_GetGR.constprop.0>:
 8007b00:	b500      	push	{lr}
 8007b02:	b085      	sub	sp, #20
 8007b04:	2300      	movs	r3, #0
 8007b06:	aa03      	add	r2, sp, #12
 8007b08:	9200      	str	r2, [sp, #0]
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	220c      	movs	r2, #12
 8007b0e:	f7ff fbc7 	bl	80072a0 <_Unwind_VRS_Get>
 8007b12:	9803      	ldr	r0, [sp, #12]
 8007b14:	b005      	add	sp, #20
 8007b16:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b1a:	bf00      	nop

08007b1c <unwind_UCB_from_context>:
 8007b1c:	e7f0      	b.n	8007b00 <_Unwind_GetGR.constprop.0>
 8007b1e:	bf00      	nop

08007b20 <__gnu_unwind_execute>:
 8007b20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b24:	b085      	sub	sp, #20
 8007b26:	4607      	mov	r7, r0
 8007b28:	460e      	mov	r6, r1
 8007b2a:	f04f 0800 	mov.w	r8, #0
 8007b2e:	ad03      	add	r5, sp, #12
 8007b30:	4630      	mov	r0, r6
 8007b32:	f7ff ffc9 	bl	8007ac8 <next_unwind_byte>
 8007b36:	28b0      	cmp	r0, #176	; 0xb0
 8007b38:	4604      	mov	r4, r0
 8007b3a:	f000 80cb 	beq.w	8007cd4 <__gnu_unwind_execute+0x1b4>
 8007b3e:	0603      	lsls	r3, r0, #24
 8007b40:	d540      	bpl.n	8007bc4 <__gnu_unwind_execute+0xa4>
 8007b42:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8007b46:	2b80      	cmp	r3, #128	; 0x80
 8007b48:	d056      	beq.n	8007bf8 <__gnu_unwind_execute+0xd8>
 8007b4a:	2bb0      	cmp	r3, #176	; 0xb0
 8007b4c:	d07d      	beq.n	8007c4a <__gnu_unwind_execute+0x12a>
 8007b4e:	d81c      	bhi.n	8007b8a <__gnu_unwind_execute+0x6a>
 8007b50:	2b90      	cmp	r3, #144	; 0x90
 8007b52:	f000 8093 	beq.w	8007c7c <__gnu_unwind_execute+0x15c>
 8007b56:	2ba0      	cmp	r3, #160	; 0xa0
 8007b58:	d113      	bne.n	8007b82 <__gnu_unwind_execute+0x62>
 8007b5a:	43c3      	mvns	r3, r0
 8007b5c:	f003 0307 	and.w	r3, r3, #7
 8007b60:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8007b64:	411a      	asrs	r2, r3
 8007b66:	0701      	lsls	r1, r0, #28
 8007b68:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8007b6c:	f04f 0300 	mov.w	r3, #0
 8007b70:	bf48      	it	mi
 8007b72:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8007b76:	4619      	mov	r1, r3
 8007b78:	4638      	mov	r0, r7
 8007b7a:	f7ff fd77 	bl	800766c <_Unwind_VRS_Pop>
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	d0d6      	beq.n	8007b30 <__gnu_unwind_execute+0x10>
 8007b82:	2009      	movs	r0, #9
 8007b84:	b005      	add	sp, #20
 8007b86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b8a:	2bc0      	cmp	r3, #192	; 0xc0
 8007b8c:	d14b      	bne.n	8007c26 <__gnu_unwind_execute+0x106>
 8007b8e:	28c6      	cmp	r0, #198	; 0xc6
 8007b90:	f000 8089 	beq.w	8007ca6 <__gnu_unwind_execute+0x186>
 8007b94:	28c7      	cmp	r0, #199	; 0xc7
 8007b96:	f000 80a2 	beq.w	8007cde <__gnu_unwind_execute+0x1be>
 8007b9a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8007b9e:	2bc0      	cmp	r3, #192	; 0xc0
 8007ba0:	f000 80bc 	beq.w	8007d1c <__gnu_unwind_execute+0x1fc>
 8007ba4:	28c8      	cmp	r0, #200	; 0xc8
 8007ba6:	f000 80bf 	beq.w	8007d28 <__gnu_unwind_execute+0x208>
 8007baa:	28c9      	cmp	r0, #201	; 0xc9
 8007bac:	d1e9      	bne.n	8007b82 <__gnu_unwind_execute+0x62>
 8007bae:	4630      	mov	r0, r6
 8007bb0:	f7ff ff8a 	bl	8007ac8 <next_unwind_byte>
 8007bb4:	0302      	lsls	r2, r0, #12
 8007bb6:	f000 000f 	and.w	r0, r0, #15
 8007bba:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8007bbe:	3001      	adds	r0, #1
 8007bc0:	4302      	orrs	r2, r0
 8007bc2:	e039      	b.n	8007c38 <__gnu_unwind_execute+0x118>
 8007bc4:	0083      	lsls	r3, r0, #2
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	f103 0904 	add.w	r9, r3, #4
 8007bcc:	2300      	movs	r3, #0
 8007bce:	4619      	mov	r1, r3
 8007bd0:	9500      	str	r5, [sp, #0]
 8007bd2:	220d      	movs	r2, #13
 8007bd4:	4638      	mov	r0, r7
 8007bd6:	f7ff fb63 	bl	80072a0 <_Unwind_VRS_Get>
 8007bda:	9b03      	ldr	r3, [sp, #12]
 8007bdc:	0660      	lsls	r0, r4, #25
 8007bde:	bf4c      	ite	mi
 8007be0:	eba3 0309 	submi.w	r3, r3, r9
 8007be4:	444b      	addpl	r3, r9
 8007be6:	9303      	str	r3, [sp, #12]
 8007be8:	2300      	movs	r3, #0
 8007bea:	9500      	str	r5, [sp, #0]
 8007bec:	220d      	movs	r2, #13
 8007bee:	4619      	mov	r1, r3
 8007bf0:	4638      	mov	r0, r7
 8007bf2:	f7ff fb7b 	bl	80072ec <_Unwind_VRS_Set>
 8007bf6:	e79b      	b.n	8007b30 <__gnu_unwind_execute+0x10>
 8007bf8:	0204      	lsls	r4, r0, #8
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	f7ff ff64 	bl	8007ac8 <next_unwind_byte>
 8007c00:	4320      	orrs	r0, r4
 8007c02:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007c06:	d0bc      	beq.n	8007b82 <__gnu_unwind_execute+0x62>
 8007c08:	0104      	lsls	r4, r0, #4
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	b2a2      	uxth	r2, r4
 8007c0e:	4619      	mov	r1, r3
 8007c10:	4638      	mov	r0, r7
 8007c12:	f7ff fd2b 	bl	800766c <_Unwind_VRS_Pop>
 8007c16:	2800      	cmp	r0, #0
 8007c18:	d1b3      	bne.n	8007b82 <__gnu_unwind_execute+0x62>
 8007c1a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8007c1e:	bf18      	it	ne
 8007c20:	f04f 0801 	movne.w	r8, #1
 8007c24:	e784      	b.n	8007b30 <__gnu_unwind_execute+0x10>
 8007c26:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8007c2a:	2bd0      	cmp	r3, #208	; 0xd0
 8007c2c:	d1a9      	bne.n	8007b82 <__gnu_unwind_execute+0x62>
 8007c2e:	f000 0207 	and.w	r2, r0, #7
 8007c32:	3201      	adds	r2, #1
 8007c34:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007c38:	2305      	movs	r3, #5
 8007c3a:	2101      	movs	r1, #1
 8007c3c:	4638      	mov	r0, r7
 8007c3e:	f7ff fd15 	bl	800766c <_Unwind_VRS_Pop>
 8007c42:	2800      	cmp	r0, #0
 8007c44:	f43f af74 	beq.w	8007b30 <__gnu_unwind_execute+0x10>
 8007c48:	e79b      	b.n	8007b82 <__gnu_unwind_execute+0x62>
 8007c4a:	28b1      	cmp	r0, #177	; 0xb1
 8007c4c:	d037      	beq.n	8007cbe <__gnu_unwind_execute+0x19e>
 8007c4e:	28b2      	cmp	r0, #178	; 0xb2
 8007c50:	f000 8087 	beq.w	8007d62 <__gnu_unwind_execute+0x242>
 8007c54:	28b3      	cmp	r0, #179	; 0xb3
 8007c56:	d056      	beq.n	8007d06 <__gnu_unwind_execute+0x1e6>
 8007c58:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8007c5c:	2bb4      	cmp	r3, #180	; 0xb4
 8007c5e:	d090      	beq.n	8007b82 <__gnu_unwind_execute+0x62>
 8007c60:	f000 0207 	and.w	r2, r0, #7
 8007c64:	3201      	adds	r2, #1
 8007c66:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	4638      	mov	r0, r7
 8007c70:	f7ff fcfc 	bl	800766c <_Unwind_VRS_Pop>
 8007c74:	2800      	cmp	r0, #0
 8007c76:	f43f af5b 	beq.w	8007b30 <__gnu_unwind_execute+0x10>
 8007c7a:	e782      	b.n	8007b82 <__gnu_unwind_execute+0x62>
 8007c7c:	f000 030d 	and.w	r3, r0, #13
 8007c80:	2b0d      	cmp	r3, #13
 8007c82:	f43f af7e 	beq.w	8007b82 <__gnu_unwind_execute+0x62>
 8007c86:	2300      	movs	r3, #0
 8007c88:	f000 020f 	and.w	r2, r0, #15
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	9500      	str	r5, [sp, #0]
 8007c90:	4638      	mov	r0, r7
 8007c92:	f7ff fb05 	bl	80072a0 <_Unwind_VRS_Get>
 8007c96:	2300      	movs	r3, #0
 8007c98:	9500      	str	r5, [sp, #0]
 8007c9a:	220d      	movs	r2, #13
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	4638      	mov	r0, r7
 8007ca0:	f7ff fb24 	bl	80072ec <_Unwind_VRS_Set>
 8007ca4:	e744      	b.n	8007b30 <__gnu_unwind_execute+0x10>
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	f7ff ff0e 	bl	8007ac8 <next_unwind_byte>
 8007cac:	0302      	lsls	r2, r0, #12
 8007cae:	f000 000f 	and.w	r0, r0, #15
 8007cb2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8007cb6:	3001      	adds	r0, #1
 8007cb8:	4302      	orrs	r2, r0
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e7d6      	b.n	8007c6c <__gnu_unwind_execute+0x14c>
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f7ff ff02 	bl	8007ac8 <next_unwind_byte>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	f43f af5b 	beq.w	8007b82 <__gnu_unwind_execute+0x62>
 8007ccc:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8007cd0:	d0cc      	beq.n	8007c6c <__gnu_unwind_execute+0x14c>
 8007cd2:	e756      	b.n	8007b82 <__gnu_unwind_execute+0x62>
 8007cd4:	f1b8 0f00 	cmp.w	r8, #0
 8007cd8:	d032      	beq.n	8007d40 <__gnu_unwind_execute+0x220>
 8007cda:	2000      	movs	r0, #0
 8007cdc:	e752      	b.n	8007b84 <__gnu_unwind_execute+0x64>
 8007cde:	4630      	mov	r0, r6
 8007ce0:	f7ff fef2 	bl	8007ac8 <next_unwind_byte>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	f43f af4b 	beq.w	8007b82 <__gnu_unwind_execute+0x62>
 8007cec:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 8007cf0:	f47f af47 	bne.w	8007b82 <__gnu_unwind_execute+0x62>
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	2104      	movs	r1, #4
 8007cf8:	4638      	mov	r0, r7
 8007cfa:	f7ff fcb7 	bl	800766c <_Unwind_VRS_Pop>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	f43f af16 	beq.w	8007b30 <__gnu_unwind_execute+0x10>
 8007d04:	e73d      	b.n	8007b82 <__gnu_unwind_execute+0x62>
 8007d06:	4630      	mov	r0, r6
 8007d08:	f7ff fede 	bl	8007ac8 <next_unwind_byte>
 8007d0c:	0302      	lsls	r2, r0, #12
 8007d0e:	f000 000f 	and.w	r0, r0, #15
 8007d12:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8007d16:	3001      	adds	r0, #1
 8007d18:	4302      	orrs	r2, r0
 8007d1a:	e7a6      	b.n	8007c6a <__gnu_unwind_execute+0x14a>
 8007d1c:	f000 020f 	and.w	r2, r0, #15
 8007d20:	3201      	adds	r2, #1
 8007d22:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8007d26:	e7c8      	b.n	8007cba <__gnu_unwind_execute+0x19a>
 8007d28:	4630      	mov	r0, r6
 8007d2a:	f7ff fecd 	bl	8007ac8 <next_unwind_byte>
 8007d2e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8007d32:	f000 030f 	and.w	r3, r0, #15
 8007d36:	3210      	adds	r2, #16
 8007d38:	3301      	adds	r3, #1
 8007d3a:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8007d3e:	e77b      	b.n	8007c38 <__gnu_unwind_execute+0x118>
 8007d40:	ac03      	add	r4, sp, #12
 8007d42:	4643      	mov	r3, r8
 8007d44:	220e      	movs	r2, #14
 8007d46:	4641      	mov	r1, r8
 8007d48:	9400      	str	r4, [sp, #0]
 8007d4a:	4638      	mov	r0, r7
 8007d4c:	f7ff faa8 	bl	80072a0 <_Unwind_VRS_Get>
 8007d50:	9400      	str	r4, [sp, #0]
 8007d52:	4643      	mov	r3, r8
 8007d54:	220f      	movs	r2, #15
 8007d56:	4641      	mov	r1, r8
 8007d58:	4638      	mov	r0, r7
 8007d5a:	f7ff fac7 	bl	80072ec <_Unwind_VRS_Set>
 8007d5e:	4640      	mov	r0, r8
 8007d60:	e710      	b.n	8007b84 <__gnu_unwind_execute+0x64>
 8007d62:	2300      	movs	r3, #0
 8007d64:	220d      	movs	r2, #13
 8007d66:	4619      	mov	r1, r3
 8007d68:	9500      	str	r5, [sp, #0]
 8007d6a:	4638      	mov	r0, r7
 8007d6c:	f7ff fa98 	bl	80072a0 <_Unwind_VRS_Get>
 8007d70:	4630      	mov	r0, r6
 8007d72:	f7ff fea9 	bl	8007ac8 <next_unwind_byte>
 8007d76:	0602      	lsls	r2, r0, #24
 8007d78:	9c03      	ldr	r4, [sp, #12]
 8007d7a:	f04f 0902 	mov.w	r9, #2
 8007d7e:	d50c      	bpl.n	8007d9a <__gnu_unwind_execute+0x27a>
 8007d80:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8007d84:	fa00 f009 	lsl.w	r0, r0, r9
 8007d88:	4404      	add	r4, r0
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	9403      	str	r4, [sp, #12]
 8007d8e:	f7ff fe9b 	bl	8007ac8 <next_unwind_byte>
 8007d92:	0603      	lsls	r3, r0, #24
 8007d94:	f109 0907 	add.w	r9, r9, #7
 8007d98:	d4f2      	bmi.n	8007d80 <__gnu_unwind_execute+0x260>
 8007d9a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 8007d9e:	fa03 f309 	lsl.w	r3, r3, r9
 8007da2:	f504 7401 	add.w	r4, r4, #516	; 0x204
 8007da6:	4423      	add	r3, r4
 8007da8:	e71d      	b.n	8007be6 <__gnu_unwind_execute+0xc6>
 8007daa:	bf00      	nop

08007dac <__gnu_unwind_frame>:
 8007dac:	b510      	push	{r4, lr}
 8007dae:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8007db0:	6853      	ldr	r3, [r2, #4]
 8007db2:	b084      	sub	sp, #16
 8007db4:	f04f 0c03 	mov.w	ip, #3
 8007db8:	3208      	adds	r2, #8
 8007dba:	021c      	lsls	r4, r3, #8
 8007dbc:	4608      	mov	r0, r1
 8007dbe:	0e1b      	lsrs	r3, r3, #24
 8007dc0:	a901      	add	r1, sp, #4
 8007dc2:	9401      	str	r4, [sp, #4]
 8007dc4:	9202      	str	r2, [sp, #8]
 8007dc6:	f88d c00c 	strb.w	ip, [sp, #12]
 8007dca:	f88d 300d 	strb.w	r3, [sp, #13]
 8007dce:	f7ff fea7 	bl	8007b20 <__gnu_unwind_execute>
 8007dd2:	b004      	add	sp, #16
 8007dd4:	bd10      	pop	{r4, pc}
 8007dd6:	bf00      	nop

08007dd8 <_Unwind_GetRegionStart>:
 8007dd8:	b508      	push	{r3, lr}
 8007dda:	f7ff fe9f 	bl	8007b1c <unwind_UCB_from_context>
 8007dde:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8007de0:	bd08      	pop	{r3, pc}
 8007de2:	bf00      	nop

08007de4 <_Unwind_GetLanguageSpecificData>:
 8007de4:	b508      	push	{r3, lr}
 8007de6:	f7ff fe99 	bl	8007b1c <unwind_UCB_from_context>
 8007dea:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8007dec:	79c3      	ldrb	r3, [r0, #7]
 8007dee:	3302      	adds	r3, #2
 8007df0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007df4:	bd08      	pop	{r3, pc}
 8007df6:	bf00      	nop

08007df8 <__aeabi_idiv0>:
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop

08007dfc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4618      	mov	r0, r3
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8007e2a:	b480      	push	{r7}
 8007e2c:	b083      	sub	sp, #12
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4618      	mov	r0, r3
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d005      	beq.n	8007e5c <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	6879      	ldr	r1, [r7, #4]
 8007e58:	2203      	movs	r2, #3
 8007e5a:	4798      	blx	r3
    }
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <_ZN12SDCardStatusC1Eyyy>:
		uint64_t totalMBytes = 0;
		uint64_t freeMBytes = 0;
		uint64_t usedMBytes = 0;

	public:
		SDCardStatus(uint64_t totalMBytes, uint64_t freeMBytes, uint64_t usedMBytes)
 8007e66:	b480      	push	{r7}
 8007e68:	b085      	sub	sp, #20
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	60f8      	str	r0, [r7, #12]
 8007e6e:	e9c7 2300 	strd	r2, r3, [r7]
		{
 8007e72:	68f9      	ldr	r1, [r7, #12]
 8007e74:	f04f 0200 	mov.w	r2, #0
 8007e78:	f04f 0300 	mov.w	r3, #0
 8007e7c:	e9c1 2300 	strd	r2, r3, [r1]
 8007e80:	68f9      	ldr	r1, [r7, #12]
 8007e82:	f04f 0200 	mov.w	r2, #0
 8007e86:	f04f 0300 	mov.w	r3, #0
 8007e8a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8007e8e:	68f9      	ldr	r1, [r7, #12]
 8007e90:	f04f 0200 	mov.w	r2, #0
 8007e94:	f04f 0300 	mov.w	r3, #0
 8007e98:	e9c1 2304 	strd	r2, r3, [r1, #16]
			this->totalMBytes = totalMBytes;
 8007e9c:	68f9      	ldr	r1, [r7, #12]
 8007e9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ea2:	e9c1 2300 	strd	r2, r3, [r1]
			this->freeMBytes = freeMBytes;
 8007ea6:	68f9      	ldr	r1, [r7, #12]
 8007ea8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007eac:	e9c1 2302 	strd	r2, r3, [r1, #8]
			this->usedMBytes = usedMBytes;
 8007eb0:	68f9      	ldr	r1, [r7, #12]
 8007eb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007eb6:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3714      	adds	r7, #20
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <_ZN7UiEvent9matchNameE11UiEventName>:
class UiEvent
{
	protected:
		UiEventName name;
	public:
		bool matchName(UiEventName name)
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70fb      	strb	r3, [r7, #3]
		{
			return this->name == name;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	78fa      	ldrb	r2, [r7, #3]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	bf0c      	ite	eq
 8007ede:	2301      	moveq	r3, #1
 8007ee0:	2300      	movne	r3, #0
 8007ee2:	b2db      	uxtb	r3, r3
		}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <_ZN27SyncGpsRecordStartedUiEventC1EPKc>:
class SyncGpsRecordStartedUiEvent: public UiEvent
{
	private:
		char recordName[MAX_GPS_RECORD_NAME_LEN+1];
	public:
		SyncGpsRecordStartedUiEvent(const char *recordName)
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
		{
			this->name = UiEventName::SyncGpsRecordStartedUiEventName;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	701a      	strb	r2, [r3, #0]

			if (strlen(recordName) > MAX_GPS_RECORD_NAME_LEN)
 8007f00:	6838      	ldr	r0, [r7, #0]
 8007f02:	f7fe f99d 	bl	8006240 <strlen>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b14      	cmp	r3, #20
 8007f0a:	d90a      	bls.n	8007f22 <_ZN27SyncGpsRecordStartedUiEventC1EPKc+0x32>
			{
				throw "too long recordName";
 8007f0c:	2004      	movs	r0, #4
 8007f0e:	f010 fcb3 	bl	8018878 <__cxa_allocate_exception>
 8007f12:	4603      	mov	r3, r0
 8007f14:	4a08      	ldr	r2, [pc, #32]	; (8007f38 <_ZN27SyncGpsRecordStartedUiEventC1EPKc+0x48>)
 8007f16:	601a      	str	r2, [r3, #0]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	4908      	ldr	r1, [pc, #32]	; (8007f3c <_ZN27SyncGpsRecordStartedUiEventC1EPKc+0x4c>)
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f011 f9e3 	bl	80192e8 <__cxa_throw>
			}

			strcpy(this->recordName, recordName);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	3301      	adds	r3, #1
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f013 fea8 	bl	801bc7e <strcpy>
		}
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4618      	mov	r0, r3
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	0801e328 	.word	0x0801e328
 8007f3c:	08023b60 	.word	0x08023b60

08007f40 <_ZN35SyncGpsRecordProgressChangedUiEventC1Eh>:
class SyncGpsRecordProgressChangedUiEvent: public UiEvent
{
	private:
		uint8_t progress;
	public:
		SyncGpsRecordProgressChangedUiEvent(uint8_t progress)
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	460b      	mov	r3, r1
 8007f4a:	70fb      	strb	r3, [r7, #3]
		{
			this->name = UiEventName::SyncGpsRecordProgressChangedUiEventName;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	701a      	strb	r2, [r3, #0]
			this->progress = progress;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	78fa      	ldrb	r2, [r7, #3]
 8007f56:	705a      	strb	r2, [r3, #1]
		}
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
	...

08007f68 <_ZN7GpsDataC1Ev>:
	NO_DATA,
	INVALID_DATA,
	VALID_DATA,
};

struct GpsData {
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	601a      	str	r2, [r3, #0]
 8007f76:	3304      	adds	r3, #4
 8007f78:	2200      	movs	r2, #0
 8007f7a:	601a      	str	r2, [r3, #0]
 8007f7c:	711a      	strb	r2, [r3, #4]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a13      	ldr	r2, [pc, #76]	; (8007fd0 <_ZN7GpsDataC1Ev+0x68>)
 8007f82:	7812      	ldrb	r2, [r2, #0]
 8007f84:	725a      	strb	r2, [r3, #9]
 8007f86:	330a      	adds	r3, #10
 8007f88:	2200      	movs	r2, #0
 8007f8a:	601a      	str	r2, [r3, #0]
 8007f8c:	605a      	str	r2, [r3, #4]
 8007f8e:	811a      	strh	r2, [r3, #8]
 8007f90:	6879      	ldr	r1, [r7, #4]
 8007f92:	f04f 0200 	mov.w	r2, #0
 8007f96:	4b0f      	ldr	r3, [pc, #60]	; (8007fd4 <_ZN7GpsDataC1Ev+0x6c>)
 8007f98:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 2020 	strb.w	r2, [r3, #32]
 8007fa4:	6879      	ldr	r1, [r7, #4]
 8007fa6:	f04f 0200 	mov.w	r2, #0
 8007faa:	4b0a      	ldr	r3, [pc, #40]	; (8007fd4 <_ZN7GpsDataC1Ev+0x6c>)
 8007fac:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	370c      	adds	r7, #12
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	0801e33c 	.word	0x0801e33c
 8007fd4:	408f4000 	.word	0x408f4000

08007fd8 <_ZN21GpsDataChangedUiEventC1ER7GpsData>:
class GpsDataChangedUiEvent: public UiEvent
{
	private:
		GpsData gpsData;
	public:
		GpsDataChangedUiEvent(GpsData &gpsData)
 8007fd8:	b5b0      	push	{r4, r5, r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
		{
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	3308      	adds	r3, #8
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7ff ffbe 	bl	8007f68 <_ZN7GpsDataC1Ev>
			this->name = UiEventName::GpsDataChangedUiEventName;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2202      	movs	r2, #2
 8007ff0:	701a      	strb	r2, [r3, #0]
			this->gpsData = gpsData;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	683a      	ldr	r2, [r7, #0]
 8007ff6:	f103 0408 	add.w	r4, r3, #8
 8007ffa:	4615      	mov	r5, r2
 8007ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008008:	e895 0003 	ldmia.w	r5, {r0, r1}
 800800c:	e884 0003 	stmia.w	r4, {r0, r1}
		}
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4618      	mov	r0, r3
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bdb0      	pop	{r4, r5, r7, pc}

0800801a <_ZN19SDCardStatusUiEventC1ER12SDCardStatus>:
class SDCardStatusUiEvent: public UiEvent
{
	private:
		SDCardStatus* sdCardStatus;
	public:
		SDCardStatusUiEvent(SDCardStatus &sdCardStatus)
 800801a:	b480      	push	{r7}
 800801c:	b083      	sub	sp, #12
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	6039      	str	r1, [r7, #0]
		{
			this->name = UiEventName::SDCardStatusUiEventName;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2209      	movs	r2, #9
 8008028:	701a      	strb	r2, [r3, #0]
			this->sdCardStatus = &sdCardStatus;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	605a      	str	r2, [r3, #4]
		}
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4618      	mov	r0, r3
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <_ZN17UiEventDispatcher8dispatchER7UiEvent>:
				throw "reached maxListenersNum";
			}

			listeners[listenersNum++] = listener;
		}
		void dispatch(UiEvent &uiEvent)
 800803e:	b580      	push	{r7, lr}
 8008040:	b084      	sub	sp, #16
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	6039      	str	r1, [r7, #0]
		{
			for (uint8_t i=0; i<listenersNum; i++)
 8008048:	2300      	movs	r3, #0
 800804a:	73fb      	strb	r3, [r7, #15]
 800804c:	e010      	b.n	8008070 <_ZN17UiEventDispatcher8dispatchER7UiEvent+0x32>
			{
				listeners[i]->onUiEvent(uiEvent);
 800804e:	7bfb      	ldrb	r3, [r7, #15]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	6858      	ldr	r0, [r3, #4]
 8008058:	7bfb      	ldrb	r3, [r7, #15]
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4413      	add	r3, r2
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	4798      	blx	r3
			for (uint8_t i=0; i<listenersNum; i++)
 800806a:	7bfb      	ldrb	r3, [r7, #15]
 800806c:	3301      	adds	r3, #1
 800806e:	73fb      	strb	r3, [r7, #15]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	7bfa      	ldrb	r2, [r7, #15]
 8008076:	429a      	cmp	r2, r3
 8008078:	d3e9      	bcc.n	800804e <_ZN17UiEventDispatcher8dispatchER7UiEvent+0x10>
			}
		}
 800807a:	bf00      	nop
 800807c:	bf00      	nop
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <_ZN21GpsDataChangeListenerC1Ev>:
		void parseLongitude(char* nmeaSentenceSection);
		void parseLongitudeEorW(char* nmeaSentenceSection);
		void parsePositionStatus(char* nmeaSentenceSection);
};

class GpsDataChangeListener
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	4a04      	ldr	r2, [pc, #16]	; (80080a0 <_ZN21GpsDataChangeListenerC1Ev+0x1c>)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	601a      	str	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4618      	mov	r0, r3
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	0801fb84 	.word	0x0801fb84

080080a4 <_ZN24CircularBufferSubscriberC1Ev>:
#ifndef __CIRCULAR_BUFFER_CLASS_H
#define __CIRCULAR_BUFFER_CLASS_H

#include "main.h"

class CircularBufferSubscriber
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	4a04      	ldr	r2, [pc, #16]	; (80080c0 <_ZN24CircularBufferSubscriberC1Ev+0x1c>)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	601a      	str	r2, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4618      	mov	r0, r3
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	0801fb78 	.word	0x0801fb78

080080c4 <_ZN16UiEventsListenerC1Ev>:
class UiEventsListener
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	4a04      	ldr	r2, [pc, #16]	; (80080e0 <_ZN16UiEventsListenerC1Ev+0x1c>)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	601a      	str	r2, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4618      	mov	r0, r3
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr
 80080e0:	0801fb6c 	.word	0x0801fb6c

080080e4 <_ZN6ConfigC1Ev>:
#ifndef __CONFIG_CLASS_H
#define __CONFIG_CLASS_H

#include "main.h"

class Config
 80080e4:	b4b0      	push	{r4, r5, r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a08      	ldr	r2, [pc, #32]	; (8008110 <_ZN6ConfigC1Ev+0x2c>)
 80080f0:	461d      	mov	r5, r3
 80080f2:	4614      	mov	r4, r2
 80080f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080f6:	6028      	str	r0, [r5, #0]
 80080f8:	6069      	str	r1, [r5, #4]
 80080fa:	60aa      	str	r2, [r5, #8]
 80080fc:	60eb      	str	r3, [r5, #12]
 80080fe:	7823      	ldrb	r3, [r4, #0]
 8008100:	742b      	strb	r3, [r5, #16]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4618      	mov	r0, r3
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	bcb0      	pop	{r4, r5, r7}
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	0801e348 	.word	0x0801e348

08008114 <_ZN3AppC1EP20__UART_HandleTypeDefP17UiEventDispatcher>:
#include "gps_record_synchronizer.class.h"
#include "ui.events.h"
#include "ui.sync_gps.screen.class.h"
#include "ui.menu.screen.class.h"

App::App(UART_HandleTypeDef* huartWifi, UiEventDispatcher *uiEventDispatcher)
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	4618      	mov	r0, r3
 8008124:	f7ff ffae 	bl	8008084 <_ZN21GpsDataChangeListenerC1Ev>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	3304      	adds	r3, #4
 800812c:	4618      	mov	r0, r3
 800812e:	f7ff ffb9 	bl	80080a4 <_ZN24CircularBufferSubscriberC1Ev>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	3308      	adds	r3, #8
 8008136:	4618      	mov	r0, r3
 8008138:	f7ff ffc4 	bl	80080c4 <_ZN16UiEventsListenerC1Ev>
 800813c:	4a10      	ldr	r2, [pc, #64]	; (8008180 <_ZN3AppC1EP20__UART_HandleTypeDefP17UiEventDispatcher+0x6c>)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	601a      	str	r2, [r3, #0]
 8008142:	4a10      	ldr	r2, [pc, #64]	; (8008184 <_ZN3AppC1EP20__UART_HandleTypeDefP17UiEventDispatcher+0x70>)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	605a      	str	r2, [r3, #4]
 8008148:	4a0f      	ldr	r2, [pc, #60]	; (8008188 <_ZN3AppC1EP20__UART_HandleTypeDefP17UiEventDispatcher+0x74>)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	609a      	str	r2, [r3, #8]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	60da      	str	r2, [r3, #12]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	741a      	strb	r2, [r3, #16]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	619a      	str	r2, [r3, #24]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	331c      	adds	r3, #28
 8008164:	4618      	mov	r0, r3
 8008166:	f7ff ffbd 	bl	80080e4 <_ZN6ConfigC1Ev>
{
	this->huartWifi = huartWifi;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	615a      	str	r2, [r3, #20]
	this->uiEventDispatcher = uiEventDispatcher;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	4618      	mov	r0, r3
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	0801fb40 	.word	0x0801fb40
 8008184:	0801fb54 	.word	0x0801fb54
 8008188:	0801fb60 	.word	0x0801fb60

0800818c <_ZN3AppD1Ev>:
App::~App()
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	4a08      	ldr	r2, [pc, #32]	; (80081b8 <_ZN3AppD1Ev+0x2c>)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	4a08      	ldr	r2, [pc, #32]	; (80081bc <_ZN3AppD1Ev+0x30>)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	605a      	str	r2, [r3, #4]
 80081a0:	4a07      	ldr	r2, [pc, #28]	; (80081c0 <_ZN3AppD1Ev+0x34>)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	609a      	str	r2, [r3, #8]
{
	stop();
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f82c 	bl	8008204 <_ZN3App4stopEv>
}
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4618      	mov	r0, r3
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	0801fb40 	.word	0x0801fb40
 80081bc:	0801fb54 	.word	0x0801fb54
 80081c0:	0801fb60 	.word	0x0801fb60

080081c4 <_ZN3App5startEv>:
void App::start()
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
	logger->info("Starting GPS tracker");
 80081cc:	4b0b      	ldr	r3, [pc, #44]	; (80081fc <_ZN3App5startEv+0x38>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	490b      	ldr	r1, [pc, #44]	; (8008200 <_ZN3App5startEv+0x3c>)
 80081d2:	4618      	mov	r0, r3
 80081d4:	f003 f864 	bl	800b2a0 <_ZN6Logger4infoEPKc>

	mountFileSystem();
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f829 	bl	8008230 <_ZN3App15mountFileSystemEv>
	logger->openLogFile();
 80081de:	4b07      	ldr	r3, [pc, #28]	; (80081fc <_ZN3App5startEv+0x38>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f003 f80c 	bl	800b200 <_ZN6Logger11openLogFileEv>
	config.read();
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	331c      	adds	r3, #28
 80081ec:	4618      	mov	r0, r3
 80081ee:	f001 f957 	bl	80094a0 <_ZN6Config4readEv>
}
 80081f2:	bf00      	nop
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	2000033c 	.word	0x2000033c
 8008200:	0801e35c 	.word	0x0801e35c

08008204 <_ZN3App4stopEv>:
void App::stop()
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
	unmountFileSystem();
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f835 	bl	800827c <_ZN3App17unmountFileSystemEv>

	logger->info("Stopping GPS tracker");
 8008212:	4b05      	ldr	r3, [pc, #20]	; (8008228 <_ZN3App4stopEv+0x24>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4905      	ldr	r1, [pc, #20]	; (800822c <_ZN3App4stopEv+0x28>)
 8008218:	4618      	mov	r0, r3
 800821a:	f003 f841 	bl	800b2a0 <_ZN6Logger4infoEPKc>
}
 800821e:	bf00      	nop
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	2000033c 	.word	0x2000033c
 800822c:	0801e374 	.word	0x0801e374

08008230 <_ZN3App15mountFileSystemEv>:
void App::mountFileSystem()
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
	FRESULT res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8008238:	2200      	movs	r2, #0
 800823a:	490c      	ldr	r1, [pc, #48]	; (800826c <_ZN3App15mountFileSystemEv+0x3c>)
 800823c:	480c      	ldr	r0, [pc, #48]	; (8008270 <_ZN3App15mountFileSystemEv+0x40>)
 800823e:	f00e fceb 	bl	8016c18 <f_mount>
 8008242:	4603      	mov	r3, r0
 8008244:	73fb      	strb	r3, [r7, #15]
	if(res != FR_OK)
 8008246:	7bfb      	ldrb	r3, [r7, #15]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00a      	beq.n	8008262 <_ZN3App15mountFileSystemEv+0x32>
	{
		throw "Cannot mount storage file system";
 800824c:	2004      	movs	r0, #4
 800824e:	f010 fb13 	bl	8018878 <__cxa_allocate_exception>
 8008252:	4603      	mov	r3, r0
 8008254:	4a07      	ldr	r2, [pc, #28]	; (8008274 <_ZN3App15mountFileSystemEv+0x44>)
 8008256:	601a      	str	r2, [r3, #0]
 8008258:	2200      	movs	r2, #0
 800825a:	4907      	ldr	r1, [pc, #28]	; (8008278 <_ZN3App15mountFileSystemEv+0x48>)
 800825c:	4618      	mov	r0, r3
 800825e:	f011 f843 	bl	80192e8 <__cxa_throw>
	//TODO add option late
	//	if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
	//	{
	//		throw "Cannot make storage file system";
	//	}
}
 8008262:	bf00      	nop
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	200005f8 	.word	0x200005f8
 8008270:	200005fc 	.word	0x200005fc
 8008274:	0801e38c 	.word	0x0801e38c
 8008278:	08023b60 	.word	0x08023b60

0800827c <_ZN3App17unmountFileSystemEv>:
void App::unmountFileSystem()
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
	FRESULT res = f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8008284:	2200      	movs	r2, #0
 8008286:	2100      	movs	r1, #0
 8008288:	480b      	ldr	r0, [pc, #44]	; (80082b8 <_ZN3App17unmountFileSystemEv+0x3c>)
 800828a:	f00e fcc5 	bl	8016c18 <f_mount>
 800828e:	4603      	mov	r3, r0
 8008290:	73fb      	strb	r3, [r7, #15]
	if(res != FR_OK)
 8008292:	7bfb      	ldrb	r3, [r7, #15]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00a      	beq.n	80082ae <_ZN3App17unmountFileSystemEv+0x32>
	{
		throw "Cannot unmount storage file system";
 8008298:	2004      	movs	r0, #4
 800829a:	f010 faed 	bl	8018878 <__cxa_allocate_exception>
 800829e:	4603      	mov	r3, r0
 80082a0:	4a06      	ldr	r2, [pc, #24]	; (80082bc <_ZN3App17unmountFileSystemEv+0x40>)
 80082a2:	601a      	str	r2, [r3, #0]
 80082a4:	2200      	movs	r2, #0
 80082a6:	4906      	ldr	r1, [pc, #24]	; (80082c0 <_ZN3App17unmountFileSystemEv+0x44>)
 80082a8:	4618      	mov	r0, r3
 80082aa:	f011 f81d 	bl	80192e8 <__cxa_throw>
	}
}
 80082ae:	bf00      	nop
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	200005fc 	.word	0x200005fc
 80082bc:	0801e3b0 	.word	0x0801e3b0
 80082c0:	08023b60 	.word	0x08023b60

080082c4 <_ZN3App15onGpsDataChangeER7GpsData>:
void App::onGpsDataChange(GpsData &gpsData)
{
 80082c4:	b590      	push	{r4, r7, lr}
 80082c6:	b09b      	sub	sp, #108	; 0x6c
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
	if (!gpsDataRecordingStarted)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	7c1b      	ldrb	r3, [r3, #16]
 80082d2:	f083 0301 	eor.w	r3, r3, #1
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d001      	beq.n	80082e0 <_ZN3App15onGpsDataChangeER7GpsData+0x1c>
	{
		return;
 80082dc:	bf00      	nop

	gpsRecord->write(gpsData);

	GpsDataChangedUiEvent gpsDataChangedUiEvent(gpsData);
	this->uiEventDispatcher->dispatch(gpsDataChangedUiEvent);
}
 80082de:	e04f      	b.n	8008380 <_ZN3App15onGpsDataChangeER7GpsData+0xbc>
	if (gpsRecord == NULL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d12f      	bne.n	8008348 <_ZN3App15onGpsDataChangeER7GpsData+0x84>
		char time[7] = {gpsData.timeUtc[0], gpsData.timeUtc[1], gpsData.timeUtc[3], gpsData.timeUtc[4], gpsData.timeUtc[6], gpsData.timeUtc[7], '\0'};
 80082e8:	f107 030c 	add.w	r3, r7, #12
 80082ec:	2200      	movs	r2, #0
 80082ee:	601a      	str	r2, [r3, #0]
 80082f0:	f8c3 2003 	str.w	r2, [r3, #3]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	733b      	strb	r3, [r7, #12]
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	785b      	ldrb	r3, [r3, #1]
 80082fe:	737b      	strb	r3, [r7, #13]
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	78db      	ldrb	r3, [r3, #3]
 8008304:	73bb      	strb	r3, [r7, #14]
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	791b      	ldrb	r3, [r3, #4]
 800830a:	73fb      	strb	r3, [r7, #15]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	799b      	ldrb	r3, [r3, #6]
 8008310:	743b      	strb	r3, [r7, #16]
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	79db      	ldrb	r3, [r3, #7]
 8008316:	747b      	strb	r3, [r7, #17]
		sprintf(recordName, "%sT%s", gpsData.dateUtc, time);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	f103 0209 	add.w	r2, r3, #9
 800831e:	f107 030c 	add.w	r3, r7, #12
 8008322:	f107 0014 	add.w	r0, r7, #20
 8008326:	4918      	ldr	r1, [pc, #96]	; (8008388 <_ZN3App15onGpsDataChangeER7GpsData+0xc4>)
 8008328:	f013 fa84 	bl	801b834 <siprintf>
		gpsRecord = new GpsRecord(recordName);
 800832c:	f241 0068 	movw	r0, #4200	; 0x1068
 8008330:	f011 f846 	bl	80193c0 <_Znwj>
 8008334:	4603      	mov	r3, r0
 8008336:	461c      	mov	r4, r3
 8008338:	f107 0314 	add.w	r3, r7, #20
 800833c:	4619      	mov	r1, r3
 800833e:	4620      	mov	r0, r4
 8008340:	f001 fee8 	bl	800a114 <_ZN9GpsRecordC1EPKc>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	60dc      	str	r4, [r3, #12]
	gpsRecord->write(gpsData);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	6839      	ldr	r1, [r7, #0]
 800834e:	4618      	mov	r0, r3
 8008350:	f001 ff48 	bl	800a1e4 <_ZN9GpsRecord5writeER7GpsData>
	GpsDataChangedUiEvent gpsDataChangedUiEvent(gpsData);
 8008354:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	4618      	mov	r0, r3
 800835c:	f7ff fe3c 	bl	8007fd8 <_ZN21GpsDataChangedUiEventC1ER7GpsData>
	this->uiEventDispatcher->dispatch(gpsDataChangedUiEvent);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008364:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008368:	4611      	mov	r1, r2
 800836a:	4618      	mov	r0, r3
 800836c:	f7ff fe67 	bl	800803e <_ZN17UiEventDispatcher8dispatchER7UiEvent>
 8008370:	e006      	b.n	8008380 <_ZN3App15onGpsDataChangeER7GpsData+0xbc>
		gpsRecord = new GpsRecord(recordName);
 8008372:	f241 0168 	movw	r1, #4200	; 0x1068
 8008376:	4620      	mov	r0, r4
 8008378:	f010 fa0c 	bl	8018794 <_ZdlPvj>
 800837c:	f010 fab8 	bl	80188f0 <__cxa_end_cleanup>
}
 8008380:	376c      	adds	r7, #108	; 0x6c
 8008382:	46bd      	mov	sp, r7
 8008384:	bd90      	pop	{r4, r7, pc}
 8008386:	bf00      	nop
 8008388:	0801e3d4 	.word	0x0801e3d4

0800838c <_ZN3App25isGpsDataRecordingStartedEv>:
bool App::isGpsDataRecordingStarted()
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
	return gpsDataRecordingStarted;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	7c1b      	ldrb	r3, [r3, #16]
}
 8008398:	4618      	mov	r0, r3
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <_ZN3App21startGpsDataRecordingEv>:
void App::startGpsDataRecording()
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
	gpsDataRecordingStarted = true;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	741a      	strb	r2, [r3, #16]
}
 80083b2:	bf00      	nop
 80083b4:	370c      	adds	r7, #12
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <_ZN3App20stopGpsDataRecordingEv>:
void App::stopGpsDataRecording()
{
 80083be:	b590      	push	{r4, r7, lr}
 80083c0:	b083      	sub	sp, #12
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
	gpsDataRecordingStarted = false;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	741a      	strb	r2, [r3, #16]

	if (gpsRecord != NULL)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00b      	beq.n	80083ec <_ZN3App20stopGpsDataRecordingEv+0x2e>
	{
		delete gpsRecord;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	68dc      	ldr	r4, [r3, #12]
 80083d8:	2c00      	cmp	r4, #0
 80083da:	d007      	beq.n	80083ec <_ZN3App20stopGpsDataRecordingEv+0x2e>
 80083dc:	4620      	mov	r0, r4
 80083de:	f001 feeb 	bl	800a1b8 <_ZN9GpsRecordD1Ev>
 80083e2:	f241 0168 	movw	r1, #4200	; 0x1068
 80083e6:	4620      	mov	r0, r4
 80083e8:	f010 f9d4 	bl	8018794 <_ZdlPvj>
	}
}
 80083ec:	bf00      	nop
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd90      	pop	{r4, r7, pc}

080083f4 <_ZN4WifiC1Ev>:
		bool isComplete();
		bool isValid();
		void readChar(const char oneChar);
};

class Wifi
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4618      	mov	r0, r3
 8008410:	370c      	adds	r7, #12
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr
	...

0800841c <_ZZN3App14syncGpsRecordsEvENKUlPKcmmE_clES1_mm>:

		UiEventDispatcher *uiEventDispatcherClosureParam = uiEventDispatcher;

		GpsRecordSynchronizer gpsRecordSynchronizer(
			recordName,
			[&wifi, &uiEventDispatcherClosureParam](const char* packet, uint32_t totalBytes, uint32_t progressBytes){
 800841c:	b5b0      	push	{r4, r5, r7, lr}
 800841e:	b086      	sub	sp, #24
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
 8008428:	603b      	str	r3, [r7, #0]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
				//TODO maybe rename method
				wifi.sendPost(packet);
 800842e:	68b9      	ldr	r1, [r7, #8]
 8008430:	4618      	mov	r0, r3
 8008432:	f004 fb5d 	bl	800caf0 <_ZN4Wifi8sendPostEPKc>

				SyncGpsRecordProgressChangedUiEvent syncGpsRecordProgressChangedUiEvent((uint8_t)(100*(double)progressBytes/(double)totalBytes));
 8008436:	6838      	ldr	r0, [r7, #0]
 8008438:	f7fe f84c 	bl	80064d4 <__aeabi_ui2d>
 800843c:	f04f 0200 	mov.w	r2, #0
 8008440:	4b15      	ldr	r3, [pc, #84]	; (8008498 <_ZZN3App14syncGpsRecordsEvENKUlPKcmmE_clES1_mm+0x7c>)
 8008442:	f7fe f8c1 	bl	80065c8 <__aeabi_dmul>
 8008446:	4602      	mov	r2, r0
 8008448:	460b      	mov	r3, r1
 800844a:	4614      	mov	r4, r2
 800844c:	461d      	mov	r5, r3
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7fe f840 	bl	80064d4 <__aeabi_ui2d>
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	4620      	mov	r0, r4
 800845a:	4629      	mov	r1, r5
 800845c:	f7fe f9de 	bl	800681c <__aeabi_ddiv>
 8008460:	4602      	mov	r2, r0
 8008462:	460b      	mov	r3, r1
 8008464:	4610      	mov	r0, r2
 8008466:	4619      	mov	r1, r3
 8008468:	f7fe fb86 	bl	8006b78 <__aeabi_d2uiz>
 800846c:	4603      	mov	r3, r0
 800846e:	b2da      	uxtb	r2, r3
 8008470:	f107 0314 	add.w	r3, r7, #20
 8008474:	4611      	mov	r1, r2
 8008476:	4618      	mov	r0, r3
 8008478:	f7ff fd62 	bl	8007f40 <_ZN35SyncGpsRecordProgressChangedUiEventC1Eh>
			[&wifi, &uiEventDispatcherClosureParam](const char* packet, uint32_t totalBytes, uint32_t progressBytes){
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	685b      	ldr	r3, [r3, #4]
				uiEventDispatcherClosureParam->dispatch(syncGpsRecordProgressChangedUiEvent);
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f107 0214 	add.w	r2, r7, #20
 8008486:	4611      	mov	r1, r2
 8008488:	4618      	mov	r0, r3
 800848a:	f7ff fdd8 	bl	800803e <_ZN17UiEventDispatcher8dispatchER7UiEvent>
			}
 800848e:	bf00      	nop
 8008490:	3718      	adds	r7, #24
 8008492:	46bd      	mov	sp, r7
 8008494:	bdb0      	pop	{r4, r5, r7, pc}
 8008496:	bf00      	nop
 8008498:	40590000 	.word	0x40590000

0800849c <_ZNSt8functionIFvPKcmmEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7ff fcca 	bl	8007e40 <_ZNSt14_Function_baseD1Ev>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4618      	mov	r0, r3
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <_ZN3App14syncGpsRecordsEv>:
{
 80084b6:	b5b0      	push	{r4, r5, r7, lr}
 80084b8:	f5ad 5dbd 	sub.w	sp, sp, #6048	; 0x17a0
 80084bc:	b084      	sub	sp, #16
 80084be:	af00      	add	r7, sp, #0
 80084c0:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 80084c4:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 80084c8:	6018      	str	r0, [r3, #0]
	Wifi wifi;
 80084ca:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 80084ce:	f103 0310 	add.w	r3, r3, #16
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7ff ff8e 	bl	80083f4 <_ZN4WifiC1Ev>
	this->wifi = &wifi;
 80084d8:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 80084dc:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f507 52ac 	add.w	r2, r7, #5504	; 0x1580
 80084e6:	f102 0210 	add.w	r2, r2, #16
 80084ea:	619a      	str	r2, [r3, #24]
	wifi.init(huartWifi, config.getWifiSsid(), config.getWifiPassword());
 80084ec:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 80084f0:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	695c      	ldr	r4, [r3, #20]
 80084f8:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 80084fc:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	331c      	adds	r3, #28
 8008504:	4618      	mov	r0, r3
 8008506:	f000 ffb3 	bl	8009470 <_ZN6Config11getWifiSsidEv>
 800850a:	4605      	mov	r5, r0
 800850c:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 8008510:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	331c      	adds	r3, #28
 8008518:	4618      	mov	r0, r3
 800851a:	f000 ffb5 	bl	8009488 <_ZN6Config15getWifiPasswordEv>
 800851e:	4603      	mov	r3, r0
 8008520:	f507 50ac 	add.w	r0, r7, #5504	; 0x1580
 8008524:	f100 0010 	add.w	r0, r0, #16
 8008528:	462a      	mov	r2, r5
 800852a:	4621      	mov	r1, r4
 800852c:	f004 f9c0 	bl	800c8b0 <_ZN4Wifi4initEP20__UART_HandleTypeDefPKcS3_>
		if (!GpsRecord::findRecordToSync(recordName))
 8008530:	f507 53ab 	add.w	r3, r7, #5472	; 0x1560
 8008534:	f103 0318 	add.w	r3, r3, #24
 8008538:	4618      	mov	r0, r3
 800853a:	f001 ffa1 	bl	800a480 <_ZN9GpsRecord16findRecordToSyncEPc>
 800853e:	4603      	mov	r3, r0
 8008540:	f083 0301 	eor.w	r3, r3, #1
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	d007      	beq.n	800855a <_ZN3App14syncGpsRecordsEv+0xa4>
		);
		gpsRecordSynchronizer.syncRecord();
	}

	this->wifi = NULL;
 800854a:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800854e:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2200      	movs	r2, #0
 8008556:	619a      	str	r2, [r3, #24]
}
 8008558:	e073      	b.n	8008642 <_ZN3App14syncGpsRecordsEv+0x18c>
		SyncGpsRecordStartedUiEvent syncGpsRecordStartedUiEvent(recordName);
 800855a:	f507 52ab 	add.w	r2, r7, #5472	; 0x1560
 800855e:	f102 0218 	add.w	r2, r2, #24
 8008562:	f507 53ab 	add.w	r3, r7, #5472	; 0x1560
 8008566:	4611      	mov	r1, r2
 8008568:	4618      	mov	r0, r3
 800856a:	f7ff fcc1 	bl	8007ef0 <_ZN27SyncGpsRecordStartedUiEventC1EPKc>
		uiEventDispatcher->dispatch(syncGpsRecordStartedUiEvent);
 800856e:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 8008572:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800857a:	f507 52ab 	add.w	r2, r7, #5472	; 0x1560
 800857e:	4611      	mov	r1, r2
 8008580:	4618      	mov	r0, r3
 8008582:	f7ff fd5c 	bl	800803e <_ZN17UiEventDispatcher8dispatchER7UiEvent>
		UiEventDispatcher *uiEventDispatcherClosureParam = uiEventDispatcher;
 8008586:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800858a:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008592:	f507 53bd 	add.w	r3, r7, #6048	; 0x17a0
 8008596:	f103 0310 	add.w	r3, r3, #16
 800859a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800859e:	601a      	str	r2, [r3, #0]
		);
 80085a0:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 80085a4:	f103 0310 	add.w	r3, r3, #16
 80085a8:	f507 52bd 	add.w	r2, r7, #6048	; 0x17a0
 80085ac:	f102 0208 	add.w	r2, r2, #8
 80085b0:	6013      	str	r3, [r2, #0]
 80085b2:	f507 53aa 	add.w	r3, r7, #5440	; 0x1540
 80085b6:	f103 031c 	add.w	r3, r3, #28
 80085ba:	f507 52bd 	add.w	r2, r7, #6048	; 0x17a0
 80085be:	f102 020c 	add.w	r2, r2, #12
 80085c2:	6013      	str	r3, [r2, #0]
 80085c4:	f507 52bd 	add.w	r2, r7, #6048	; 0x17a0
 80085c8:	f102 0208 	add.w	r2, r2, #8
 80085cc:	f507 53bc 	add.w	r3, r7, #6016	; 0x1780
 80085d0:	f103 0318 	add.w	r3, r3, #24
 80085d4:	4611      	mov	r1, r2
 80085d6:	4618      	mov	r0, r3
 80085d8:	f000 f96e 	bl	80088b8 <_ZNSt8functionIFvPKcmmEEC1IZN3App14syncGpsRecordsEvEUlS1_mmE_vEEOT_>
 80085dc:	f507 52bc 	add.w	r2, r7, #6016	; 0x1780
 80085e0:	f102 0218 	add.w	r2, r2, #24
 80085e4:	f507 51ab 	add.w	r1, r7, #5472	; 0x1560
 80085e8:	f101 0118 	add.w	r1, r1, #24
 80085ec:	f107 0310 	add.w	r3, r7, #16
 80085f0:	3b04      	subs	r3, #4
 80085f2:	4618      	mov	r0, r3
 80085f4:	f001 ffe4 	bl	800a5c0 <_ZN21GpsRecordSynchronizerC1EPKcSt8functionIFvS1_mmEE>
 80085f8:	f507 53bc 	add.w	r3, r7, #6016	; 0x1780
 80085fc:	f103 0318 	add.w	r3, r3, #24
 8008600:	4618      	mov	r0, r3
 8008602:	f7ff ff4b 	bl	800849c <_ZNSt8functionIFvPKcmmEED1Ev>
		gpsRecordSynchronizer.syncRecord();
 8008606:	f107 0310 	add.w	r3, r7, #16
 800860a:	3b04      	subs	r3, #4
 800860c:	4618      	mov	r0, r3
 800860e:	f002 f86f 	bl	800a6f0 <_ZN21GpsRecordSynchronizer10syncRecordEv>
	}
 8008612:	f107 0310 	add.w	r3, r7, #16
 8008616:	3b04      	subs	r3, #4
 8008618:	4618      	mov	r0, r3
 800861a:	f002 f855 	bl	800a6c8 <_ZN21GpsRecordSynchronizerD1Ev>
 800861e:	e787      	b.n	8008530 <_ZN3App14syncGpsRecordsEv+0x7a>
 8008620:	f507 53bc 	add.w	r3, r7, #6016	; 0x1780
 8008624:	f103 0318 	add.w	r3, r3, #24
 8008628:	4618      	mov	r0, r3
 800862a:	f7ff ff37 	bl	800849c <_ZNSt8functionIFvPKcmmEED1Ev>
 800862e:	f010 f95f 	bl	80188f0 <__cxa_end_cleanup>
 8008632:	f107 0310 	add.w	r3, r7, #16
 8008636:	3b04      	subs	r3, #4
 8008638:	4618      	mov	r0, r3
 800863a:	f002 f845 	bl	800a6c8 <_ZN21GpsRecordSynchronizerD1Ev>
 800863e:	f010 f957 	bl	80188f0 <__cxa_end_cleanup>
}
 8008642:	f507 57bd 	add.w	r7, r7, #6048	; 0x17a0
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bdb0      	pop	{r4, r5, r7, pc}

0800864c <_ZN3App22onReceivedDataFromWifiEPKcj>:

void App::onReceivedDataFromWifi(const char* data, size_t size)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	607a      	str	r2, [r7, #4]
	if (wifi == NULL)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d007      	beq.n	8008670 <_ZN3App22onReceivedDataFromWifiEPKcj+0x24>
	{
		return;
	}

	wifi->onReceivedDataFromHuart(data, size);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	68b9      	ldr	r1, [r7, #8]
 8008668:	4618      	mov	r0, r3
 800866a:	f004 f8ab 	bl	800c7c4 <_ZN4Wifi23onReceivedDataFromHuartEPKcj>
 800866e:	e000      	b.n	8008672 <_ZN3App22onReceivedDataFromWifiEPKcj+0x26>
		return;
 8008670:	bf00      	nop
}
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <_ZN3App28onCircularBufferDataReceivedEPKcS1_t>:

void App::onCircularBufferDataReceived(const char *name, const char *data, uint16_t dataSize)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
 8008684:	807b      	strh	r3, [r7, #2]
	if (strcmp(name, "wifi") == 0)
 8008686:	4908      	ldr	r1, [pc, #32]	; (80086a8 <_ZN3App28onCircularBufferDataReceivedEPKcS1_t+0x30>)
 8008688:	68b8      	ldr	r0, [r7, #8]
 800868a:	f7fd fd79 	bl	8006180 <strcmp>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d105      	bne.n	80086a0 <_ZN3App28onCircularBufferDataReceivedEPKcS1_t+0x28>
	{
		onReceivedDataFromWifi(data, dataSize);
 8008694:	887b      	ldrh	r3, [r7, #2]
 8008696:	461a      	mov	r2, r3
 8008698:	6879      	ldr	r1, [r7, #4]
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f7ff ffd6 	bl	800864c <_ZN3App22onReceivedDataFromWifiEPKcj>
	}
}
 80086a0:	bf00      	nop
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	0801e3dc 	.word	0x0801e3dc

080086ac <_ZThn4_N3App28onCircularBufferDataReceivedEPKcS1_t>:
		bool isGpsDataRecordingStarted();
		void startGpsDataRecording();
		void stopGpsDataRecording();
		void syncGpsRecords();
		void onReceivedDataFromWifi(const char* data, size_t size);
		void onCircularBufferDataReceived(const char *name, const char *data, uint16_t dataSize);
 80086ac:	f1a0 0004 	sub.w	r0, r0, #4
 80086b0:	f7ff bfe2 	b.w	8008678 <_ZN3App28onCircularBufferDataReceivedEPKcS1_t>

080086b4 <_ZN3App15getSDCardStatusEv>:

SDCardStatus App::getSDCardStatus()
{
 80086b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086b8:	b09c      	sub	sp, #112	; 0x70
 80086ba:	af04      	add	r7, sp, #16
 80086bc:	6278      	str	r0, [r7, #36]	; 0x24
 80086be:	6239      	str	r1, [r7, #32]
	DWORD freeClusters;
	FATFS* fatFsPointer = &SDFatFS;
 80086c0:	4b4b      	ldr	r3, [pc, #300]	; (80087f0 <_ZN3App15getSDCardStatusEv+0x13c>)
 80086c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Get volume information and free clusters of drive 1 */
	FRESULT res = f_getfree((TCHAR const*)SDPath, &freeClusters, &fatFsPointer);
 80086c4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80086c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80086cc:	4619      	mov	r1, r3
 80086ce:	4849      	ldr	r0, [pc, #292]	; (80087f4 <_ZN3App15getSDCardStatusEv+0x140>)
 80086d0:	f00f fb49 	bl	8017d66 <f_getfree>
 80086d4:	4603      	mov	r3, r0
 80086d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if(res != FR_OK)
 80086da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00a      	beq.n	80086f8 <_ZN3App15getSDCardStatusEv+0x44>
	{
		throw "Cannot get information about storage usage";
 80086e2:	2004      	movs	r0, #4
 80086e4:	f010 f8c8 	bl	8018878 <__cxa_allocate_exception>
 80086e8:	4603      	mov	r3, r0
 80086ea:	4a43      	ldr	r2, [pc, #268]	; (80087f8 <_ZN3App15getSDCardStatusEv+0x144>)
 80086ec:	601a      	str	r2, [r3, #0]
 80086ee:	2200      	movs	r2, #0
 80086f0:	4942      	ldr	r1, [pc, #264]	; (80087fc <_ZN3App15getSDCardStatusEv+0x148>)
 80086f2:	4618      	mov	r0, r3
 80086f4:	f010 fdf8 	bl	80192e8 <__cxa_throw>
	}

	/* Get total sectors and free sectors */
	uint64_t totalSectors = (SDFatFS.n_fatent - 2) * SDFatFS.csize;
 80086f8:	4b3d      	ldr	r3, [pc, #244]	; (80087f0 <_ZN3App15getSDCardStatusEv+0x13c>)
 80086fa:	69db      	ldr	r3, [r3, #28]
 80086fc:	1e9a      	subs	r2, r3, #2
 80086fe:	4b3c      	ldr	r3, [pc, #240]	; (80087f0 <_ZN3App15getSDCardStatusEv+0x13c>)
 8008700:	895b      	ldrh	r3, [r3, #10]
 8008702:	fb02 f303 	mul.w	r3, r2, r3
 8008706:	2200      	movs	r2, #0
 8008708:	613b      	str	r3, [r7, #16]
 800870a:	617a      	str	r2, [r7, #20]
 800870c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008710:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t freeSectors = freeClusters * SDFatFS.csize;
 8008714:	4b36      	ldr	r3, [pc, #216]	; (80087f0 <_ZN3App15getSDCardStatusEv+0x13c>)
 8008716:	895b      	ldrh	r3, [r3, #10]
 8008718:	461a      	mov	r2, r3
 800871a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871c:	fb02 f303 	mul.w	r3, r2, r3
 8008720:	2200      	movs	r2, #0
 8008722:	60bb      	str	r3, [r7, #8]
 8008724:	60fa      	str	r2, [r7, #12]
 8008726:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800872a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint64_t totalMBytes = totalSectors * SDFatFS.ssize/(1024*1024);
 800872e:	4b30      	ldr	r3, [pc, #192]	; (80087f0 <_ZN3App15getSDCardStatusEv+0x13c>)
 8008730:	899b      	ldrh	r3, [r3, #12]
 8008732:	b29b      	uxth	r3, r3
 8008734:	2200      	movs	r2, #0
 8008736:	61bb      	str	r3, [r7, #24]
 8008738:	61fa      	str	r2, [r7, #28]
 800873a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800873c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008740:	460a      	mov	r2, r1
 8008742:	fb02 f203 	mul.w	r2, r2, r3
 8008746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008748:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800874c:	4601      	mov	r1, r0
 800874e:	fb01 f303 	mul.w	r3, r1, r3
 8008752:	4413      	add	r3, r2
 8008754:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008756:	69b9      	ldr	r1, [r7, #24]
 8008758:	fba2 8901 	umull	r8, r9, r2, r1
 800875c:	444b      	add	r3, r9
 800875e:	4699      	mov	r9, r3
 8008760:	f04f 0200 	mov.w	r2, #0
 8008764:	f04f 0300 	mov.w	r3, #0
 8008768:	ea4f 5218 	mov.w	r2, r8, lsr #20
 800876c:	ea42 3209 	orr.w	r2, r2, r9, lsl #12
 8008770:	ea4f 5319 	mov.w	r3, r9, lsr #20
 8008774:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	uint64_t freeMBytes = freeSectors * SDFatFS.ssize/(1024*1024);
 8008778:	4b1d      	ldr	r3, [pc, #116]	; (80087f0 <_ZN3App15getSDCardStatusEv+0x13c>)
 800877a:	899b      	ldrh	r3, [r3, #12]
 800877c:	b29b      	uxth	r3, r3
 800877e:	2200      	movs	r2, #0
 8008780:	469a      	mov	sl, r3
 8008782:	4693      	mov	fp, r2
 8008784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008786:	fb0b f203 	mul.w	r2, fp, r3
 800878a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800878c:	fb0a f303 	mul.w	r3, sl, r3
 8008790:	4413      	add	r3, r2
 8008792:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008794:	fba2 450a 	umull	r4, r5, r2, sl
 8008798:	442b      	add	r3, r5
 800879a:	461d      	mov	r5, r3
 800879c:	f04f 0200 	mov.w	r2, #0
 80087a0:	f04f 0300 	mov.w	r3, #0
 80087a4:	0d22      	lsrs	r2, r4, #20
 80087a6:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 80087aa:	0d2b      	lsrs	r3, r5, #20
 80087ac:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	uint64_t usedMBytes = totalMBytes - freeMBytes;
 80087b0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80087b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80087b8:	1a84      	subs	r4, r0, r2
 80087ba:	603c      	str	r4, [r7, #0]
 80087bc:	eb61 0303 	sbc.w	r3, r1, r3
 80087c0:	607b      	str	r3, [r7, #4]
 80087c2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80087c6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	SDCardStatus sdCardStatus(totalMBytes, freeMBytes, usedMBytes);
 80087ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80087ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087d2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80087d6:	e9cd 2300 	strd	r2, r3, [sp]
 80087da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80087de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087e0:	f7ff fb41 	bl	8007e66 <_ZN12SDCardStatusC1Eyyy>

	return sdCardStatus;
 80087e4:	bf00      	nop
}
 80087e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087e8:	3760      	adds	r7, #96	; 0x60
 80087ea:	46bd      	mov	sp, r7
 80087ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087f0:	200005fc 	.word	0x200005fc
 80087f4:	200005f8 	.word	0x200005f8
 80087f8:	0801e3e4 	.word	0x0801e3e4
 80087fc:	08023b60 	.word	0x08023b60

08008800 <_ZN3App9onUiEventER7UiEvent>:

void App::onUiEvent(UiEvent &event)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b08a      	sub	sp, #40	; 0x28
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]

	if (event.matchName(UiEventName::StartSyncGpsRecordsUiEventName))
 800880a:	2107      	movs	r1, #7
 800880c:	6838      	ldr	r0, [r7, #0]
 800880e:	f7ff fb5b 	bl	8007ec8 <_ZN7UiEvent9matchNameE11UiEventName>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d002      	beq.n	800881e <_ZN3App9onUiEventER7UiEvent+0x1e>
	{
		syncGpsRecords();
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7ff fe4c 	bl	80084b6 <_ZN3App14syncGpsRecordsEv>
	}

	if (event.matchName(UiEventName::StopGpsDataRecordingUiEventName))
 800881e:	2105      	movs	r1, #5
 8008820:	6838      	ldr	r0, [r7, #0]
 8008822:	f7ff fb51 	bl	8007ec8 <_ZN7UiEvent9matchNameE11UiEventName>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d002      	beq.n	8008832 <_ZN3App9onUiEventER7UiEvent+0x32>
	{
		stopGpsDataRecording();
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7ff fdc6 	bl	80083be <_ZN3App20stopGpsDataRecordingEv>
	}

	if (event.matchName(UiEventName::StartGpsDataRecordingUiEventName))
 8008832:	2106      	movs	r1, #6
 8008834:	6838      	ldr	r0, [r7, #0]
 8008836:	f7ff fb47 	bl	8007ec8 <_ZN7UiEvent9matchNameE11UiEventName>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d002      	beq.n	8008846 <_ZN3App9onUiEventER7UiEvent+0x46>
	{
		startGpsDataRecording();
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7ff fdaf 	bl	80083a4 <_ZN3App21startGpsDataRecordingEv>
	}

	if (event.matchName(UiEventName::RefreshSDCardStatusUiEventName))
 8008846:	2108      	movs	r1, #8
 8008848:	6838      	ldr	r0, [r7, #0]
 800884a:	f7ff fb3d 	bl	8007ec8 <_ZN7UiEvent9matchNameE11UiEventName>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d015      	beq.n	8008880 <_ZN3App9onUiEventER7UiEvent+0x80>
	{
		SDCardStatus sdCardStatus = getSDCardStatus();
 8008854:	f107 0310 	add.w	r3, r7, #16
 8008858:	6879      	ldr	r1, [r7, #4]
 800885a:	4618      	mov	r0, r3
 800885c:	f7ff ff2a 	bl	80086b4 <_ZN3App15getSDCardStatusEv>
		SDCardStatusUiEvent sdCardStatusUiEvent(sdCardStatus);
 8008860:	f107 0210 	add.w	r2, r7, #16
 8008864:	f107 0308 	add.w	r3, r7, #8
 8008868:	4611      	mov	r1, r2
 800886a:	4618      	mov	r0, r3
 800886c:	f7ff fbd5 	bl	800801a <_ZN19SDCardStatusUiEventC1ER12SDCardStatus>
		uiEventDispatcher->dispatch(sdCardStatusUiEvent);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008874:	f107 0208 	add.w	r2, r7, #8
 8008878:	4611      	mov	r1, r2
 800887a:	4618      	mov	r0, r3
 800887c:	f7ff fbdf 	bl	800803e <_ZN17UiEventDispatcher8dispatchER7UiEvent>
	}
}
 8008880:	bf00      	nop
 8008882:	3728      	adds	r7, #40	; 0x28
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <_ZThn8_N3App9onUiEventER7UiEvent>:
		void onUiEvent(UiEvent &event);
 8008888:	f1a0 0008 	sub.w	r0, r0, #8
 800888c:	f7ff bfb8 	b.w	8008800 <_ZN3App9onUiEventER7UiEvent>

08008890 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	461a      	mov	r2, r3
 800889c:	2300      	movs	r3, #0
 800889e:	6013      	str	r3, [r2, #0]
 80088a0:	6053      	str	r3, [r2, #4]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	609a      	str	r2, [r3, #8]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4618      	mov	r0, r3
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
	...

080088b8 <_ZNSt8functionIFvPKcmmEEC1IZN3App14syncGpsRecordsEvEUlS1_mmE_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 80088b8:	b590      	push	{r4, r7, lr}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	461a      	mov	r2, r3
 80088c6:	2300      	movs	r3, #0
 80088c8:	6013      	str	r3, [r2, #0]
 80088ca:	6053      	str	r3, [r2, #4]
 80088cc:	6093      	str	r3, [r2, #8]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7ff ffdd 	bl	8008890 <_ZNSt14_Function_baseC1Ev>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 80088dc:	6838      	ldr	r0, [r7, #0]
 80088de:	f000 f81b 	bl	8008918 <_ZNSt14_Function_base13_Base_managerIZN3App14syncGpsRecordsEvEUlPKcmmE_E21_M_not_empty_functionIS4_EEbRKT_>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00e      	beq.n	8008906 <_ZNSt8functionIFvPKcmmEEC1IZN3App14syncGpsRecordsEvEUlS1_mmE_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 80088e8:	687c      	ldr	r4, [r7, #4]
 80088ea:	6838      	ldr	r0, [r7, #0]
 80088ec:	f000 f81f 	bl	800892e <_ZSt7forwardIZN3App14syncGpsRecordsEvEUlPKcmmE_EOT_RNSt16remove_referenceIS4_E4typeE>
 80088f0:	4603      	mov	r3, r0
 80088f2:	4619      	mov	r1, r3
 80088f4:	4620      	mov	r0, r4
 80088f6:	f000 f825 	bl	8008944 <_ZNSt14_Function_base13_Base_managerIZN3App14syncGpsRecordsEvEUlPKcmmE_E15_M_init_functorIS4_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a04      	ldr	r2, [pc, #16]	; (8008910 <_ZNSt8functionIFvPKcmmEEC1IZN3App14syncGpsRecordsEvEUlS1_mmE_vEEOT_+0x58>)
 80088fe:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a04      	ldr	r2, [pc, #16]	; (8008914 <_ZNSt8functionIFvPKcmmEEC1IZN3App14syncGpsRecordsEvEUlS1_mmE_vEEOT_+0x5c>)
 8008904:	609a      	str	r2, [r3, #8]
	    }
	}
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4618      	mov	r0, r3
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	bd90      	pop	{r4, r7, pc}
 8008910:	08008969 	.word	0x08008969
 8008914:	080089a9 	.word	0x080089a9

08008918 <_ZNSt14_Function_base13_Base_managerIZN3App14syncGpsRecordsEvEUlPKcmmE_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
	  { return true; }
 8008920:	2301      	movs	r3, #1
 8008922:	4618      	mov	r0, r3
 8008924:	370c      	adds	r7, #12
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr

0800892e <_ZSt7forwardIZN3App14syncGpsRecordsEvEUlPKcmmE_EOT_RNSt16remove_referenceIS4_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800892e:	b480      	push	{r7}
 8008930:	b083      	sub	sp, #12
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4618      	mov	r0, r3
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <_ZNSt14_Function_base13_Base_managerIZN3App14syncGpsRecordsEvEUlPKcmmE_E15_M_init_functorIS4_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8008944:	b590      	push	{r4, r7, lr}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800894e:	6838      	ldr	r0, [r7, #0]
 8008950:	f7ff ffed 	bl	800892e <_ZSt7forwardIZN3App14syncGpsRecordsEvEUlPKcmmE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8008954:	4603      	mov	r3, r0
 8008956:	4622      	mov	r2, r4
 8008958:	4619      	mov	r1, r3
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 f843 	bl	80089e6 <_ZNSt14_Function_base13_Base_managerIZN3App14syncGpsRecordsEvEUlPKcmmE_E9_M_createIS4_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8008960:	bf00      	nop
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	bd90      	pop	{r4, r7, pc}

08008968 <_ZNSt17_Function_handlerIFvPKcmmEZN3App14syncGpsRecordsEvEUlS1_mmE_E9_M_invokeERKSt9_Any_dataOS1_OmSA_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8008968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f000 f851 	bl	8008a1e <_ZNSt14_Function_base13_Base_managerIZN3App14syncGpsRecordsEvEUlPKcmmE_E14_M_get_pointerERKSt9_Any_data>
 800897c:	4604      	mov	r4, r0
 800897e:	68b8      	ldr	r0, [r7, #8]
 8008980:	f000 f85e 	bl	8008a40 <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>
 8008984:	4605      	mov	r5, r0
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f865 	bl	8008a56 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800898c:	4606      	mov	r6, r0
 800898e:	6838      	ldr	r0, [r7, #0]
 8008990:	f000 f861 	bl	8008a56 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8008994:	4603      	mov	r3, r0
 8008996:	4632      	mov	r2, r6
 8008998:	4629      	mov	r1, r5
 800899a:	4620      	mov	r0, r4
 800899c:	f000 f866 	bl	8008a6c <_ZSt10__invoke_rIvRZN3App14syncGpsRecordsEvEUlPKcmmE_JS2_mmEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 80089a0:	bf00      	nop
      }
 80089a2:	3714      	adds	r7, #20
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089a8 <_ZNSt17_Function_handlerIFvPKcmmEZN3App14syncGpsRecordsEvEUlS1_mmE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80089a8:	b590      	push	{r4, r7, lr}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	4613      	mov	r3, r2
 80089b4:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80089b6:	79fb      	ldrb	r3, [r7, #7]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d109      	bne.n	80089d0 <_ZNSt17_Function_handlerIFvPKcmmEZN3App14syncGpsRecordsEvEUlS1_mmE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f000 f879 	bl	8008ab4 <_ZNSt9_Any_data9_M_accessIPZN3App14syncGpsRecordsEvEUlPKcmmE_EERT_v>
 80089c2:	4604      	mov	r4, r0
 80089c4:	68b8      	ldr	r0, [r7, #8]
 80089c6:	f000 f82a 	bl	8008a1e <_ZNSt14_Function_base13_Base_managerIZN3App14syncGpsRecordsEvEUlPKcmmE_E14_M_get_pointerERKSt9_Any_data>
 80089ca:	4603      	mov	r3, r0
 80089cc:	6023      	str	r3, [r4, #0]
	    break;
 80089ce:	e005      	b.n	80089dc <_ZNSt17_Function_handlerIFvPKcmmEZN3App14syncGpsRecordsEvEUlS1_mmE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80089d0:	79fb      	ldrb	r3, [r7, #7]
 80089d2:	461a      	mov	r2, r3
 80089d4:	68b9      	ldr	r1, [r7, #8]
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f000 f878 	bl	8008acc <_ZNSt14_Function_base13_Base_managerIZN3App14syncGpsRecordsEvEUlPKcmmE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 80089dc:	2300      	movs	r3, #0
      }
 80089de:	4618      	mov	r0, r3
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd90      	pop	{r4, r7, pc}

080089e6 <_ZNSt14_Function_base13_Base_managerIZN3App14syncGpsRecordsEvEUlPKcmmE_E9_M_createIS4_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 80089e6:	b590      	push	{r4, r7, lr}
 80089e8:	b085      	sub	sp, #20
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	60f8      	str	r0, [r7, #12]
 80089ee:	60b9      	str	r1, [r7, #8]
 80089f0:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80089f2:	68b8      	ldr	r0, [r7, #8]
 80089f4:	f7ff ff9b 	bl	800892e <_ZSt7forwardIZN3App14syncGpsRecordsEvEUlPKcmmE_EOT_RNSt16remove_referenceIS4_E4typeE>
 80089f8:	4604      	mov	r4, r0
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f7ff fa0a 	bl	8007e14 <_ZNSt9_Any_data9_M_accessEv>
 8008a00:	4603      	mov	r3, r0
 8008a02:	4619      	mov	r1, r3
 8008a04:	2008      	movs	r0, #8
 8008a06:	f7ff f9f9 	bl	8007dfc <_ZnwjPv>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	4622      	mov	r2, r4
 8008a0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008a12:	e883 0003 	stmia.w	r3, {r0, r1}
	  }
 8008a16:	bf00      	nop
 8008a18:	3714      	adds	r7, #20
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd90      	pop	{r4, r7, pc}

08008a1e <_ZNSt14_Function_base13_Base_managerIZN3App14syncGpsRecordsEvEUlPKcmmE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 f88a 	bl	8008b40 <_ZNKSt9_Any_data9_M_accessIZN3App14syncGpsRecordsEvEUlPKcmmE_EERKT_v>
 8008a2c:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f000 f892 	bl	8008b58 <_ZSt11__addressofIKZN3App14syncGpsRecordsEvEUlPKcmmE_EPT_RS5_>
 8008a34:	4603      	mov	r3, r0
 8008a36:	bf00      	nop
	}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	370c      	adds	r7, #12
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008a56:	b480      	push	{r7}
 8008a58:	b083      	sub	sp, #12
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4618      	mov	r0, r3
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <_ZSt10__invoke_rIvRZN3App14syncGpsRecordsEvEUlPKcmmE_JS2_mmEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8008a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a70:	b086      	sub	sp, #24
 8008a72:	af02      	add	r7, sp, #8
 8008a74:	60f8      	str	r0, [r7, #12]
 8008a76:	60b9      	str	r1, [r7, #8]
 8008a78:	607a      	str	r2, [r7, #4]
 8008a7a:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f000 f876 	bl	8008b6e <_ZSt7forwardIRZN3App14syncGpsRecordsEvEUlPKcmmE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8008a82:	4604      	mov	r4, r0
 8008a84:	68b8      	ldr	r0, [r7, #8]
 8008a86:	f7ff ffdb 	bl	8008a40 <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>
 8008a8a:	4605      	mov	r5, r0
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f7ff ffe2 	bl	8008a56 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8008a92:	4606      	mov	r6, r0
 8008a94:	6838      	ldr	r0, [r7, #0]
 8008a96:	f7ff ffde 	bl	8008a56 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	9300      	str	r3, [sp, #0]
 8008a9e:	4633      	mov	r3, r6
 8008aa0:	462a      	mov	r2, r5
 8008aa2:	4621      	mov	r1, r4
 8008aa4:	4640      	mov	r0, r8
 8008aa6:	f000 f86d 	bl	8008b84 <_ZSt13__invoke_implIvRZN3App14syncGpsRecordsEvEUlPKcmmE_JS2_mmEET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8008aaa:	bf00      	nop
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008ab4 <_ZNSt9_Any_data9_M_accessIPZN3App14syncGpsRecordsEvEUlPKcmmE_EERT_v>:
      _M_access()
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7ff f9a9 	bl	8007e14 <_ZNSt9_Any_data9_M_accessEv>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <_ZNSt14_Function_base13_Base_managerIZN3App14syncGpsRecordsEvEUlPKcmmE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8008acc:	b590      	push	{r4, r7, lr}
 8008ace:	b085      	sub	sp, #20
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	2b03      	cmp	r3, #3
 8008ade:	d82a      	bhi.n	8008b36 <_ZNSt14_Function_base13_Base_managerIZN3App14syncGpsRecordsEvEUlPKcmmE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6a>
 8008ae0:	a201      	add	r2, pc, #4	; (adr r2, 8008ae8 <_ZNSt14_Function_base13_Base_managerIZN3App14syncGpsRecordsEvEUlPKcmmE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x1c>)
 8008ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae6:	bf00      	nop
 8008ae8:	08008af9 	.word	0x08008af9
 8008aec:	08008b07 	.word	0x08008b07
 8008af0:	08008b1b 	.word	0x08008b1b
 8008af4:	08008b2d 	.word	0x08008b2d
	      __dest._M_access<const type_info*>() = nullptr;
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f000 f866 	bl	8008bca <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2200      	movs	r2, #0
 8008b02:	601a      	str	r2, [r3, #0]
	      break;
 8008b04:	e017      	b.n	8008b36 <_ZNSt14_Function_base13_Base_managerIZN3App14syncGpsRecordsEvEUlPKcmmE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f7ff ffd4 	bl	8008ab4 <_ZNSt9_Any_data9_M_accessIPZN3App14syncGpsRecordsEvEUlPKcmmE_EERT_v>
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	68b8      	ldr	r0, [r7, #8]
 8008b10:	f7ff ff85 	bl	8008a1e <_ZNSt14_Function_base13_Base_managerIZN3App14syncGpsRecordsEvEUlPKcmmE_E14_M_get_pointerERKSt9_Any_data>
 8008b14:	4603      	mov	r3, r0
 8008b16:	6023      	str	r3, [r4, #0]
	      break;
 8008b18:	e00d      	b.n	8008b36 <_ZNSt14_Function_base13_Base_managerIZN3App14syncGpsRecordsEvEUlPKcmmE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8008b1a:	68b8      	ldr	r0, [r7, #8]
 8008b1c:	f7ff ff7f 	bl	8008a1e <_ZNSt14_Function_base13_Base_managerIZN3App14syncGpsRecordsEvEUlPKcmmE_E14_M_get_pointerERKSt9_Any_data>
 8008b20:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8008b22:	4619      	mov	r1, r3
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f000 f85c 	bl	8008be2 <_ZNSt14_Function_base13_Base_managerIZN3App14syncGpsRecordsEvEUlPKcmmE_E15_M_init_functorIRKS4_EEvRSt9_Any_dataOT_>
	      break;
 8008b2a:	e004      	b.n	8008b36 <_ZNSt14_Function_base13_Base_managerIZN3App14syncGpsRecordsEvEUlPKcmmE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f000 f869 	bl	8008c06 <_ZNSt14_Function_base13_Base_managerIZN3App14syncGpsRecordsEvEUlPKcmmE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8008b34:	bf00      	nop
	  return false;
 8008b36:	2300      	movs	r3, #0
	}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3714      	adds	r7, #20
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd90      	pop	{r4, r7, pc}

08008b40 <_ZNKSt9_Any_data9_M_accessIZN3App14syncGpsRecordsEvEUlPKcmmE_EERKT_v>:
      _M_access() const
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7ff f96e 	bl	8007e2a <_ZNKSt9_Any_data9_M_accessEv>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	4618      	mov	r0, r3
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <_ZSt11__addressofIKZN3App14syncGpsRecordsEvEUlPKcmmE_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4618      	mov	r0, r3
 8008b64:	370c      	adds	r7, #12
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr

08008b6e <_ZSt7forwardIRZN3App14syncGpsRecordsEvEUlPKcmmE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008b6e:	b480      	push	{r7}
 8008b70:	b083      	sub	sp, #12
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <_ZSt13__invoke_implIvRZN3App14syncGpsRecordsEvEUlPKcmmE_JS2_mmEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8008b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	7338      	strb	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
 8008b90:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008b92:	68b8      	ldr	r0, [r7, #8]
 8008b94:	f7ff ffeb 	bl	8008b6e <_ZSt7forwardIRZN3App14syncGpsRecordsEvEUlPKcmmE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8008b98:	4606      	mov	r6, r0
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7ff ff50 	bl	8008a40 <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	681c      	ldr	r4, [r3, #0]
 8008ba4:	6838      	ldr	r0, [r7, #0]
 8008ba6:	f7ff ff56 	bl	8008a56 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8008baa:	4603      	mov	r3, r0
 8008bac:	681d      	ldr	r5, [r3, #0]
 8008bae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bb0:	f7ff ff51 	bl	8008a56 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	462a      	mov	r2, r5
 8008bba:	4621      	mov	r1, r4
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	f7ff fc2d 	bl	800841c <_ZZN3App14syncGpsRecordsEvENKUlPKcmmE_clES1_mm>
 8008bc2:	bf00      	nop
 8008bc4:	3714      	adds	r7, #20
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008bca <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b082      	sub	sp, #8
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7ff f91e 	bl	8007e14 <_ZNSt9_Any_data9_M_accessEv>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <_ZNSt14_Function_base13_Base_managerIZN3App14syncGpsRecordsEvEUlPKcmmE_E15_M_init_functorIRKS4_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8008be2:	b590      	push	{r4, r7, lr}
 8008be4:	b083      	sub	sp, #12
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8008bec:	6838      	ldr	r0, [r7, #0]
 8008bee:	f000 f816 	bl	8008c1e <_ZSt7forwardIRKZN3App14syncGpsRecordsEvEUlPKcmmE_EOT_RNSt16remove_referenceIS6_E4typeE>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	4622      	mov	r2, r4
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f81b 	bl	8008c34 <_ZNSt14_Function_base13_Base_managerIZN3App14syncGpsRecordsEvEUlPKcmmE_E9_M_createIRKS4_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8008bfe:	bf00      	nop
 8008c00:	370c      	adds	r7, #12
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd90      	pop	{r4, r7, pc}

08008c06 <_ZNSt14_Function_base13_Base_managerIZN3App14syncGpsRecordsEvEUlPKcmmE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b082      	sub	sp, #8
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f82b 	bl	8008c6c <_ZNSt9_Any_data9_M_accessIZN3App14syncGpsRecordsEvEUlPKcmmE_EERT_v>
	}
 8008c16:	bf00      	nop
 8008c18:	3708      	adds	r7, #8
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <_ZSt7forwardIRKZN3App14syncGpsRecordsEvEUlPKcmmE_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008c1e:	b480      	push	{r7}
 8008c20:	b083      	sub	sp, #12
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <_ZNSt14_Function_base13_Base_managerIZN3App14syncGpsRecordsEvEUlPKcmmE_E9_M_createIRKS4_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8008c34:	b590      	push	{r4, r7, lr}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8008c40:	68b8      	ldr	r0, [r7, #8]
 8008c42:	f7ff ffec 	bl	8008c1e <_ZSt7forwardIRKZN3App14syncGpsRecordsEvEUlPKcmmE_EOT_RNSt16remove_referenceIS6_E4typeE>
 8008c46:	4604      	mov	r4, r0
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f7ff f8e3 	bl	8007e14 <_ZNSt9_Any_data9_M_accessEv>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	4619      	mov	r1, r3
 8008c52:	2008      	movs	r0, #8
 8008c54:	f7ff f8d2 	bl	8007dfc <_ZnwjPv>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	4622      	mov	r2, r4
 8008c5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008c60:	e883 0003 	stmia.w	r3, {r0, r1}
	  }
 8008c64:	bf00      	nop
 8008c66:	3714      	adds	r7, #20
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd90      	pop	{r4, r7, pc}

08008c6c <_ZNSt9_Any_data9_M_accessIZN3App14syncGpsRecordsEvEUlPKcmmE_EERT_v>:
      _M_access()
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f7ff f8cd 	bl	8007e14 <_ZNSt9_Any_data9_M_accessEv>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3708      	adds	r7, #8
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <_ZN22GpsStatusUpdateUiEventC1E9GpsStatus>:
		GpsStatusUpdateUiEvent(GpsStatus gpsStatus)
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	70fb      	strb	r3, [r7, #3]
			this->name = UiEventName::GpsStatusUpdateUiEventName;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2203      	movs	r2, #3
 8008c94:	701a      	strb	r2, [r3, #0]
			this->gpsStatus = gpsStatus;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	78fa      	ldrb	r2, [r7, #3]
 8008c9a:	705a      	strb	r2, [r3, #1]
		}
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
	...

08008cac <_ZN17UiEventDispatcher9subscribeEP16UiEventsListener>:
		void subscribe(UiEventsListener* listener)
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
			if (listenersNum == maxListenersNum)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	2b05      	cmp	r3, #5
 8008cbc:	d10a      	bne.n	8008cd4 <_ZN17UiEventDispatcher9subscribeEP16UiEventsListener+0x28>
				throw "reached maxListenersNum";
 8008cbe:	2004      	movs	r0, #4
 8008cc0:	f00f fdda 	bl	8018878 <__cxa_allocate_exception>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	4a0b      	ldr	r2, [pc, #44]	; (8008cf4 <_ZN17UiEventDispatcher9subscribeEP16UiEventsListener+0x48>)
 8008cc8:	601a      	str	r2, [r3, #0]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	490a      	ldr	r1, [pc, #40]	; (8008cf8 <_ZN17UiEventDispatcher9subscribeEP16UiEventsListener+0x4c>)
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f010 fb0a 	bl	80192e8 <__cxa_throw>
			listeners[listenersNum++] = listener;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	1c5a      	adds	r2, r3, #1
 8008cda:	b2d1      	uxtb	r1, r2
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	7011      	strb	r1, [r2, #0]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	4413      	add	r3, r2
 8008ce6:	683a      	ldr	r2, [r7, #0]
 8008ce8:	605a      	str	r2, [r3, #4]
		}
 8008cea:	bf00      	nop
 8008cec:	3708      	adds	r7, #8
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	0801e410 	.word	0x0801e410
 8008cf8:	08023b60 	.word	0x08023b60

08008cfc <_ZN17UiEventDispatcherC1Ev>:
class UiEventDispatcher
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	701a      	strb	r2, [r3, #0]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <_ZN9GpsParserC1Ev>:
{
	public:
		virtual void onGpsDataChange(GpsData &gpsData) = 0;
};

class GpsParser
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4618      	mov	r0, r3
 8008d44:	370c      	adds	r7, #12
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
	...

08008d50 <applicationMain>:

Logger *logger;

//TODO add log and debug console
void applicationMain(UART_HandleTypeDef* huartGps, UART_HandleTypeDef* huartWifi, DMA_HandleTypeDef* hdmaUsartRxWifi, UART_HandleTypeDef* huartDebugConsole)
{
 8008d50:	b5b0      	push	{r4, r5, r7, lr}
 8008d52:	f5ad 5d91 	sub.w	sp, sp, #4640	; 0x1220
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8008d5e:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 8008d62:	6020      	str	r0, [r4, #0]
 8008d64:	f507 700a 	add.w	r0, r7, #552	; 0x228
 8008d68:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 8008d6c:	6001      	str	r1, [r0, #0]
 8008d6e:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008d72:	f5a1 7109 	sub.w	r1, r1, #548	; 0x224
 8008d76:	600a      	str	r2, [r1, #0]
 8008d78:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8008d7c:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 8008d80:	6013      	str	r3, [r2, #0]
	Logger loggerInstance(huartDebugConsole);
 8008d82:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008d86:	f5a3 720a 	sub.w	r2, r3, #552	; 0x228
 8008d8a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8008d8e:	3b0c      	subs	r3, #12
 8008d90:	6811      	ldr	r1, [r2, #0]
 8008d92:	4618      	mov	r0, r3
 8008d94:	f002 f9de 	bl	800b154 <_ZN6LoggerC1EP20__UART_HandleTypeDef>
	logger = &loggerInstance;
 8008d98:	4ad1      	ldr	r2, [pc, #836]	; (80090e0 <applicationMain+0x390>)
 8008d9a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8008d9e:	3b0c      	subs	r3, #12
 8008da0:	6013      	str	r3, [r2, #0]

	huartWifiGLobal = huartWifi;
 8008da2:	4ad0      	ldr	r2, [pc, #832]	; (80090e4 <applicationMain+0x394>)
 8008da4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008da8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	6013      	str	r3, [r2, #0]
	hdmaUsartRxWifiGlobal = hdmaUsartRxWifi;
 8008db0:	4acd      	ldr	r2, [pc, #820]	; (80090e8 <applicationMain+0x398>)
 8008db2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008db6:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	6013      	str	r3, [r2, #0]

	UiEventDispatcher uiEventDispatcher;
 8008dbe:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8008dc2:	3b04      	subs	r3, #4
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7ff ff99 	bl	8008cfc <_ZN17UiEventDispatcherC1Ev>
	App app(huartWifi, &uiEventDispatcher);
 8008dca:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8008dce:	3a04      	subs	r2, #4
 8008dd0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008dd4:	f5a3 7108 	sub.w	r1, r3, #544	; 0x220
 8008dd8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8008ddc:	3b14      	subs	r3, #20
 8008dde:	6809      	ldr	r1, [r1, #0]
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7ff f997 	bl	8008114 <_ZN3AppC1EP20__UART_HandleTypeDefP17UiEventDispatcher>
	UI ui(&uiEventDispatcher);
 8008de6:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8008dea:	3a04      	subs	r2, #4
 8008dec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008df0:	3b14      	subs	r3, #20
 8008df2:	4611      	mov	r1, r2
 8008df4:	4618      	mov	r0, r3
 8008df6:	f002 fb39 	bl	800b46c <_ZN2UIC1EP17UiEventDispatcher>


	uiEventDispatcher.subscribe(&app);
 8008dfa:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8008dfe:	3b14      	subs	r3, #20
 8008e00:	f103 0208 	add.w	r2, r3, #8
 8008e04:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8008e08:	3b04      	subs	r3, #4
 8008e0a:	4611      	mov	r1, r2
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7ff ff4d 	bl	8008cac <_ZN17UiEventDispatcher9subscribeEP16UiEventsListener>
	uiEventDispatcher.subscribe(&ui);
 8008e12:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8008e16:	3a14      	subs	r2, #20
 8008e18:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8008e1c:	3b04      	subs	r3, #4
 8008e1e:	4611      	mov	r1, r2
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7ff ff43 	bl	8008cac <_ZN17UiEventDispatcher9subscribeEP16UiEventsListener>

	wifiCircularBuffer.subscribe(&app);
 8008e26:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8008e2a:	3b14      	subs	r3, #20
 8008e2c:	3304      	adds	r3, #4
 8008e2e:	4619      	mov	r1, r3
 8008e30:	48ae      	ldr	r0, [pc, #696]	; (80090ec <applicationMain+0x39c>)
 8008e32:	f000 fa15 	bl	8009260 <_ZN14CircularBuffer9subscribeEP24CircularBufferSubscriber>

	try {
		GpsParser gpsParser;
 8008e36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e3a:	3b14      	subs	r3, #20
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7ff ff6b 	bl	8008d18 <_ZN9GpsParserC1Ev>
		gpsParser.addGpsDataChangeListener(&app);
 8008e42:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8008e46:	3a14      	subs	r2, #20
 8008e48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e4c:	3b14      	subs	r3, #20
 8008e4e:	4611      	mov	r1, r2
 8008e50:	4618      	mov	r0, r3
 8008e52:	f000 ff5b 	bl	8009d0c <_ZN9GpsParser24addGpsDataChangeListenerEP21GpsDataChangeListener>

		app.start();
 8008e56:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8008e5a:	3b14      	subs	r3, #20
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7ff f9b1 	bl	80081c4 <_ZN3App5startEv>
		ui.start();
 8008e62:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008e66:	3b14      	subs	r3, #20
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f002 fbf5 	bl	800b658 <_ZN2UI5startEv>

		if (HAL_UARTEx_ReceiveToIdle_DMA(huartWifiGLobal, (uint8_t*)wifiCircularBuffer.getBuffer(), wifiCircularBuffer.getBufferSize()) != HAL_OK)
 8008e6e:	4b9d      	ldr	r3, [pc, #628]	; (80090e4 <applicationMain+0x394>)
 8008e70:	681c      	ldr	r4, [r3, #0]
 8008e72:	489e      	ldr	r0, [pc, #632]	; (80090ec <applicationMain+0x39c>)
 8008e74:	f000 f9dc 	bl	8009230 <_ZN14CircularBuffer9getBufferEv>
 8008e78:	4605      	mov	r5, r0
 8008e7a:	489c      	ldr	r0, [pc, #624]	; (80090ec <applicationMain+0x39c>)
 8008e7c:	f000 f9e4 	bl	8009248 <_ZN14CircularBuffer13getBufferSizeEv>
 8008e80:	4603      	mov	r3, r0
 8008e82:	461a      	mov	r2, r3
 8008e84:	4629      	mov	r1, r5
 8008e86:	4620      	mov	r0, r4
 8008e88:	f008 fdd6 	bl	8011a38 <HAL_UARTEx_ReceiveToIdle_DMA>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	bf14      	ite	ne
 8008e92:	2301      	movne	r3, #1
 8008e94:	2300      	moveq	r3, #0
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00a      	beq.n	8008eb2 <applicationMain+0x162>
		{
			throw "cannot start WIFI DMA";
 8008e9c:	2004      	movs	r0, #4
 8008e9e:	f00f fceb 	bl	8018878 <__cxa_allocate_exception>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	4a92      	ldr	r2, [pc, #584]	; (80090f0 <applicationMain+0x3a0>)
 8008ea6:	601a      	str	r2, [r3, #0]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	4992      	ldr	r1, [pc, #584]	; (80090f4 <applicationMain+0x3a4>)
 8008eac:	4618      	mov	r0, r3
 8008eae:	f010 fa1b 	bl	80192e8 <__cxa_throw>
		}

		bool btnMovePressedPrev = false;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8008eb8:	f102 0207 	add.w	r2, r2, #7
 8008ebc:	7013      	strb	r3, [r2, #0]
		bool btnSelectPressedPrev = false;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8008ec4:	f102 0206 	add.w	r2, r2, #6
 8008ec8:	7013      	strb	r3, [r2, #0]
		for(uint8_t mainCounter = 0; ; mainCounter++)
 8008eca:	2300      	movs	r3, #0
 8008ecc:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8008ed0:	f102 0205 	add.w	r2, r2, #5
 8008ed4:	7013      	strb	r3, [r2, #0]
		{
			//TODO add interruption
			bool btnMovePressed = HAL_GPIO_ReadPin(BTN_MOVE_GPIO_Port, BTN_MOVE_Pin) == 1;
 8008ed6:	2104      	movs	r1, #4
 8008ed8:	4887      	ldr	r0, [pc, #540]	; (80090f8 <applicationMain+0x3a8>)
 8008eda:	f005 fdb5 	bl	800ea48 <HAL_GPIO_ReadPin>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	bf0c      	ite	eq
 8008ee4:	2301      	moveq	r3, #1
 8008ee6:	2300      	movne	r3, #0
 8008ee8:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8008eec:	f102 0204 	add.w	r2, r2, #4
 8008ef0:	7013      	strb	r3, [r2, #0]
			if (btnMovePressedPrev != btnMovePressed)
 8008ef2:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8008ef6:	f103 0307 	add.w	r3, r3, #7
 8008efa:	781a      	ldrb	r2, [r3, #0]
 8008efc:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8008f00:	f103 0304 	add.w	r3, r3, #4
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d016      	beq.n	8008f38 <applicationMain+0x1e8>
			{
				btnMovePressedPrev = btnMovePressed;
 8008f0a:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8008f0e:	f103 0304 	add.w	r3, r3, #4
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8008f18:	f102 0207 	add.w	r2, r2, #7
 8008f1c:	7013      	strb	r3, [r2, #0]

				if (btnMovePressed)
 8008f1e:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8008f22:	f103 0304 	add.w	r3, r3, #4
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d005      	beq.n	8008f38 <applicationMain+0x1e8>
				{
					ui.moveButtonPressed();
 8008f2c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008f30:	3b14      	subs	r3, #20
 8008f32:	4618      	mov	r0, r3
 8008f34:	f002 fb7e 	bl	800b634 <_ZN2UI17moveButtonPressedEv>
				}
			}

			bool btnSelectPressed = HAL_GPIO_ReadPin(BTN_SELECT_GPIO_Port, BTN_SELECT_Pin) == 1;
 8008f38:	2108      	movs	r1, #8
 8008f3a:	486f      	ldr	r0, [pc, #444]	; (80090f8 <applicationMain+0x3a8>)
 8008f3c:	f005 fd84 	bl	800ea48 <HAL_GPIO_ReadPin>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	bf0c      	ite	eq
 8008f46:	2301      	moveq	r3, #1
 8008f48:	2300      	movne	r3, #0
 8008f4a:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8008f4e:	f102 0203 	add.w	r2, r2, #3
 8008f52:	7013      	strb	r3, [r2, #0]
			if (btnSelectPressedPrev != btnSelectPressed)
 8008f54:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8008f58:	f103 0306 	add.w	r3, r3, #6
 8008f5c:	781a      	ldrb	r2, [r3, #0]
 8008f5e:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8008f62:	f103 0303 	add.w	r3, r3, #3
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d016      	beq.n	8008f9a <applicationMain+0x24a>
			{
				btnSelectPressedPrev = btnSelectPressed;
 8008f6c:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8008f70:	f103 0303 	add.w	r3, r3, #3
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8008f7a:	f102 0206 	add.w	r2, r2, #6
 8008f7e:	7013      	strb	r3, [r2, #0]

				if (btnSelectPressed)
 8008f80:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8008f84:	f103 0303 	add.w	r3, r3, #3
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d005      	beq.n	8008f9a <applicationMain+0x24a>
				{
					ui.selectButtonPressed();
 8008f8e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008f92:	3b14      	subs	r3, #20
 8008f94:	4618      	mov	r0, r3
 8008f96:	f002 fb3d 	bl	800b614 <_ZN2UI19selectButtonPressedEv>
				}
			}

			//TODO DMA or interruption
			if (app.isGpsDataRecordingStarted())
 8008f9a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8008f9e:	3b14      	subs	r3, #20
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7ff f9f3 	bl	800838c <_ZN3App25isGpsDataRecordingStartedEv>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d02f      	beq.n	800900c <applicationMain+0x2bc>
			{
				memset(GPS_BUFFER, 0, GPS_BUFFER_SIZE);
 8008fac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	4852      	ldr	r0, [pc, #328]	; (80090fc <applicationMain+0x3ac>)
 8008fb4:	f012 fd46 	bl	801ba44 <memset>
				HAL_UART_Receive(huartGps, (uint8_t *) GPS_BUFFER, GPS_BUFFER_SIZE-1, 100);
 8008fb8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008fbc:	f5a3 7007 	sub.w	r0, r3, #540	; 0x21c
 8008fc0:	2364      	movs	r3, #100	; 0x64
 8008fc2:	22ff      	movs	r2, #255	; 0xff
 8008fc4:	494d      	ldr	r1, [pc, #308]	; (80090fc <applicationMain+0x3ac>)
 8008fc6:	6800      	ldr	r0, [r0, #0]
 8008fc8:	f008 fc9f 	bl	801190a <HAL_UART_Receive>
				gpsParser.addData(GPS_BUFFER);
 8008fcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008fd0:	3b14      	subs	r3, #20
 8008fd2:	494a      	ldr	r1, [pc, #296]	; (80090fc <applicationMain+0x3ac>)
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f000 fec5 	bl	8009d64 <_ZN9GpsParser7addDataEPKc>

				GpsStatusUpdateUiEvent gpsStatusUpdateUiEvent(gpsParser.getGpsStatus());
 8008fda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008fde:	3b14      	subs	r3, #20
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 fe77 	bl	8009cd4 <_ZN9GpsParser12getGpsStatusEv>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	461a      	mov	r2, r3
 8008fea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8008fee:	3b18      	subs	r3, #24
 8008ff0:	4611      	mov	r1, r2
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7ff fe46 	bl	8008c84 <_ZN22GpsStatusUpdateUiEventC1E9GpsStatus>
				uiEventDispatcher.dispatch(gpsStatusUpdateUiEvent);
 8008ff8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8008ffc:	3a18      	subs	r2, #24
 8008ffe:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8009002:	3b04      	subs	r3, #4
 8009004:	4611      	mov	r1, r2
 8009006:	4618      	mov	r0, r3
 8009008:	f7ff f819 	bl	800803e <_ZN17UiEventDispatcher8dispatchER7UiEvent>
		for(uint8_t mainCounter = 0; ; mainCounter++)
 800900c:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8009010:	f103 0305 	add.w	r3, r3, #5
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	3301      	adds	r3, #1
 8009018:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 800901c:	f102 0205 	add.w	r2, r2, #5
 8009020:	7013      	strb	r3, [r2, #0]
			}
		}
 8009022:	e758      	b.n	8008ed6 <applicationMain+0x186>
	}
	catch (...)
	{
		ui.printError("Unknown error");
	}
}
 8009024:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009028:	3b14      	subs	r3, #20
 800902a:	4618      	mov	r0, r3
 800902c:	f002 fa8a 	bl	800b544 <_ZN2UID1Ev>
 8009030:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009034:	3b14      	subs	r3, #20
 8009036:	4618      	mov	r0, r3
 8009038:	f7ff f8a8 	bl	800818c <_ZN3AppD1Ev>
 800903c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8009040:	3b0c      	subs	r3, #12
 8009042:	4618      	mov	r0, r3
 8009044:	f002 f8ac 	bl	800b1a0 <_ZN6LoggerD1Ev>
 8009048:	e045      	b.n	80090d6 <applicationMain+0x386>
	catch (const char* error)
 800904a:	4602      	mov	r2, r0
 800904c:	460b      	mov	r3, r1
 800904e:	2b01      	cmp	r3, #1
 8009050:	d117      	bne.n	8009082 <applicationMain+0x332>
 8009052:	4613      	mov	r3, r2
 8009054:	4618      	mov	r0, r3
 8009056:	f00f fd13 	bl	8018a80 <__cxa_begin_catch>
 800905a:	4603      	mov	r3, r0
 800905c:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8009060:	f102 021c 	add.w	r2, r2, #28
 8009064:	6013      	str	r3, [r2, #0]
		ui.printError(error);
 8009066:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800906a:	3b14      	subs	r3, #20
 800906c:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8009070:	f102 021c 	add.w	r2, r2, #28
 8009074:	6811      	ldr	r1, [r2, #0]
 8009076:	4618      	mov	r0, r3
 8009078:	f002 fb24 	bl	800b6c4 <_ZN2UI10printErrorEPKc>
	}
 800907c:	f00f fd3e 	bl	8018afc <__cxa_end_catch>
 8009080:	e7d0      	b.n	8009024 <applicationMain+0x2d4>
	catch (...)
 8009082:	4613      	mov	r3, r2
 8009084:	4618      	mov	r0, r3
 8009086:	f00f fcfb 	bl	8018a80 <__cxa_begin_catch>
		ui.printError("Unknown error");
 800908a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800908e:	3b14      	subs	r3, #20
 8009090:	491b      	ldr	r1, [pc, #108]	; (8009100 <applicationMain+0x3b0>)
 8009092:	4618      	mov	r0, r3
 8009094:	f002 fb16 	bl	800b6c4 <_ZN2UI10printErrorEPKc>
	}
 8009098:	f00f fd30 	bl	8018afc <__cxa_end_catch>
 800909c:	e7c2      	b.n	8009024 <applicationMain+0x2d4>
	}
 800909e:	f00f fd2d 	bl	8018afc <__cxa_end_catch>
 80090a2:	e002      	b.n	80090aa <applicationMain+0x35a>
	}
 80090a4:	f00f fd2a 	bl	8018afc <__cxa_end_catch>
 80090a8:	e7ff      	b.n	80090aa <applicationMain+0x35a>
}
 80090aa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80090ae:	3b14      	subs	r3, #20
 80090b0:	4618      	mov	r0, r3
 80090b2:	f002 fa47 	bl	800b544 <_ZN2UID1Ev>
 80090b6:	e7ff      	b.n	80090b8 <applicationMain+0x368>
 80090b8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80090bc:	3b14      	subs	r3, #20
 80090be:	4618      	mov	r0, r3
 80090c0:	f7ff f864 	bl	800818c <_ZN3AppD1Ev>
 80090c4:	e7ff      	b.n	80090c6 <applicationMain+0x376>
 80090c6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80090ca:	3b0c      	subs	r3, #12
 80090cc:	4618      	mov	r0, r3
 80090ce:	f002 f867 	bl	800b1a0 <_ZN6LoggerD1Ev>
 80090d2:	f00f fc0d 	bl	80188f0 <__cxa_end_cleanup>
 80090d6:	f507 5791 	add.w	r7, r7, #4640	; 0x1220
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bdb0      	pop	{r4, r5, r7, pc}
 80090e0:	2000033c 	.word	0x2000033c
 80090e4:	20000318 	.word	0x20000318
 80090e8:	2000031c 	.word	0x2000031c
 80090ec:	20000320 	.word	0x20000320
 80090f0:	0801e428 	.word	0x0801e428
 80090f4:	08023b60 	.word	0x08023b60
 80090f8:	40021000 	.word	0x40021000
 80090fc:	20000218 	.word	0x20000218
 8009100:	0801e440 	.word	0x0801e440

08009104 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size){
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	460b      	mov	r3, r1
 800910e:	807b      	strh	r3, [r7, #2]
	if(huart == huartWifiGLobal)
 8009110:	4b06      	ldr	r3, [pc, #24]	; (800912c <HAL_UARTEx_RxEventCallback+0x28>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	429a      	cmp	r2, r3
 8009118:	d104      	bne.n	8009124 <HAL_UARTEx_RxEventCallback+0x20>
	{
		wifiCircularBuffer.onDataReceived(size);
 800911a:	887b      	ldrh	r3, [r7, #2]
 800911c:	4619      	mov	r1, r3
 800911e:	4804      	ldr	r0, [pc, #16]	; (8009130 <HAL_UARTEx_RxEventCallback+0x2c>)
 8009120:	f000 f8f1 	bl	8009306 <_ZN14CircularBuffer14onDataReceivedEt>
	}
}
 8009124:	bf00      	nop
 8009126:	3708      	adds	r7, #8
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	20000318 	.word	0x20000318
 8009130:	20000320 	.word	0x20000320

08009134 <_Z41__static_initialization_and_destruction_0ii>:

void applicationErrorHandler()
{

}
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d10a      	bne.n	800915a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800914a:	4293      	cmp	r3, r2
 800914c:	d105      	bne.n	800915a <_Z41__static_initialization_and_destruction_0ii+0x26>
CircularBuffer wifiCircularBuffer("wifi", 512);
 800914e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009152:	4909      	ldr	r1, [pc, #36]	; (8009178 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8009154:	4809      	ldr	r0, [pc, #36]	; (800917c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8009156:	f000 f823 	bl	80091a0 <_ZN14CircularBufferC1EPKct>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d107      	bne.n	8009170 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009166:	4293      	cmp	r3, r2
 8009168:	d102      	bne.n	8009170 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800916a:	4804      	ldr	r0, [pc, #16]	; (800917c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800916c:	f000 f852 	bl	8009214 <_ZN14CircularBufferD1Ev>
}
 8009170:	bf00      	nop
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	0801e450 	.word	0x0801e450
 800917c:	20000320 	.word	0x20000320

08009180 <_GLOBAL__sub_I_GPS_BUFFER>:
 8009180:	b580      	push	{r7, lr}
 8009182:	af00      	add	r7, sp, #0
 8009184:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009188:	2001      	movs	r0, #1
 800918a:	f7ff ffd3 	bl	8009134 <_Z41__static_initialization_and_destruction_0ii>
 800918e:	bd80      	pop	{r7, pc}

08009190 <_GLOBAL__sub_D_GPS_BUFFER>:
 8009190:	b580      	push	{r7, lr}
 8009192:	af00      	add	r7, sp, #0
 8009194:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009198:	2000      	movs	r0, #0
 800919a:	f7ff ffcb 	bl	8009134 <_Z41__static_initialization_and_destruction_0ii>
 800919e:	bd80      	pop	{r7, pc}

080091a0 <_ZN14CircularBufferC1EPKct>:
#include "circular_buffer.class.h"
#include <string.h>
#include <stdlib.h>

CircularBuffer::CircularBuffer(const char* name, uint16_t bufferSize)
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	4613      	mov	r3, r2
 80091ac:	80fb      	strh	r3, [r7, #6]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2200      	movs	r2, #0
 80091b2:	74da      	strb	r2, [r3, #19]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2200      	movs	r2, #0
 80091b8:	831a      	strh	r2, [r3, #24]
{
	if (strlen(name) > nameMaxLen)
 80091ba:	68b8      	ldr	r0, [r7, #8]
 80091bc:	f7fd f840 	bl	8006240 <strlen>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b0a      	cmp	r3, #10
 80091c4:	d90a      	bls.n	80091dc <_ZN14CircularBufferC1EPKct+0x3c>
	{
		throw "too long CircularBuffer name";
 80091c6:	2004      	movs	r0, #4
 80091c8:	f00f fb56 	bl	8018878 <__cxa_allocate_exception>
 80091cc:	4603      	mov	r3, r0
 80091ce:	4a0f      	ldr	r2, [pc, #60]	; (800920c <_ZN14CircularBufferC1EPKct+0x6c>)
 80091d0:	601a      	str	r2, [r3, #0]
 80091d2:	2200      	movs	r2, #0
 80091d4:	490e      	ldr	r1, [pc, #56]	; (8009210 <_ZN14CircularBufferC1EPKct+0x70>)
 80091d6:	4618      	mov	r0, r3
 80091d8:	f010 f886 	bl	80192e8 <__cxa_throw>
	}

	strcpy(this->name, name);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	3308      	adds	r3, #8
 80091e0:	68b9      	ldr	r1, [r7, #8]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f012 fd4b 	bl	801bc7e <strcpy>
	this->bufferSize = bufferSize;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	88fa      	ldrh	r2, [r7, #6]
 80091ec:	801a      	strh	r2, [r3, #0]
	buffer = (char*) malloc(this->bufferSize);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	881b      	ldrh	r3, [r3, #0]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f010 fcdc 	bl	8019bb0 <malloc>
 80091f8:	4603      	mov	r3, r0
 80091fa:	461a      	mov	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	605a      	str	r2, [r3, #4]
}
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	0801e458 	.word	0x0801e458
 8009210:	08023b60 	.word	0x08023b60

08009214 <_ZN14CircularBufferD1Ev>:

CircularBuffer::~CircularBuffer()
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
{
	free(buffer);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	4618      	mov	r0, r3
 8009222:	f010 fccd 	bl	8019bc0 <free>
}
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4618      	mov	r0, r3
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <_ZN14CircularBuffer9getBufferEv>:

char* CircularBuffer::getBuffer()
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
	return buffer;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	685b      	ldr	r3, [r3, #4]
}
 800923c:	4618      	mov	r0, r3
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <_ZN14CircularBuffer13getBufferSizeEv>:

uint16_t CircularBuffer::getBufferSize()
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
	return bufferSize;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	881b      	ldrh	r3, [r3, #0]
}
 8009254:	4618      	mov	r0, r3
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <_ZN14CircularBuffer9subscribeEP24CircularBufferSubscriber>:

void CircularBuffer::subscribe(CircularBufferSubscriber* subscriber)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
	if (subscribersNumber == subscribersMaxNumber)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	7cdb      	ldrb	r3, [r3, #19]
 800926e:	2b01      	cmp	r3, #1
 8009270:	d10a      	bne.n	8009288 <_ZN14CircularBuffer9subscribeEP24CircularBufferSubscriber+0x28>
	{
		throw "Reached subscribersMaxNumber";
 8009272:	2004      	movs	r0, #4
 8009274:	f00f fb00 	bl	8018878 <__cxa_allocate_exception>
 8009278:	4603      	mov	r3, r0
 800927a:	4a0b      	ldr	r2, [pc, #44]	; (80092a8 <_ZN14CircularBuffer9subscribeEP24CircularBufferSubscriber+0x48>)
 800927c:	601a      	str	r2, [r3, #0]
 800927e:	2200      	movs	r2, #0
 8009280:	490a      	ldr	r1, [pc, #40]	; (80092ac <_ZN14CircularBuffer9subscribeEP24CircularBufferSubscriber+0x4c>)
 8009282:	4618      	mov	r0, r3
 8009284:	f010 f830 	bl	80192e8 <__cxa_throw>
	}

	subscribers[subscribersNumber++] = subscriber;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	7cdb      	ldrb	r3, [r3, #19]
 800928c:	1c5a      	adds	r2, r3, #1
 800928e:	b2d1      	uxtb	r1, r2
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	74d1      	strb	r1, [r2, #19]
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	3304      	adds	r3, #4
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	4413      	add	r3, r2
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	605a      	str	r2, [r3, #4]
}
 80092a0:	bf00      	nop
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	0801e478 	.word	0x0801e478
 80092ac:	08023b60 	.word	0x08023b60

080092b0 <_ZN14CircularBuffer17notifySubscribersEPKct>:

void CircularBuffer::notifySubscribers(const char *data, uint16_t dataSize)
{
 80092b0:	b590      	push	{r4, r7, lr}
 80092b2:	b087      	sub	sp, #28
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	4613      	mov	r3, r2
 80092bc:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < subscribersNumber; i++)
 80092be:	2300      	movs	r3, #0
 80092c0:	75fb      	strb	r3, [r7, #23]
 80092c2:	e016      	b.n	80092f2 <_ZN14CircularBuffer17notifySubscribersEPKct+0x42>
	{
		subscribers[i]->onCircularBufferDataReceived(name, data, dataSize);
 80092c4:	7dfb      	ldrb	r3, [r7, #23]
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	3304      	adds	r3, #4
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	4413      	add	r3, r2
 80092ce:	6858      	ldr	r0, [r3, #4]
 80092d0:	7dfb      	ldrb	r3, [r7, #23]
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	3304      	adds	r3, #4
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	4413      	add	r3, r2
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681c      	ldr	r4, [r3, #0]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f103 0108 	add.w	r1, r3, #8
 80092e6:	88fb      	ldrh	r3, [r7, #6]
 80092e8:	68ba      	ldr	r2, [r7, #8]
 80092ea:	47a0      	blx	r4
	for (uint8_t i = 0; i < subscribersNumber; i++)
 80092ec:	7dfb      	ldrb	r3, [r7, #23]
 80092ee:	3301      	adds	r3, #1
 80092f0:	75fb      	strb	r3, [r7, #23]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	7cdb      	ldrb	r3, [r3, #19]
 80092f6:	7dfa      	ldrb	r2, [r7, #23]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d3e3      	bcc.n	80092c4 <_ZN14CircularBuffer17notifySubscribersEPKct+0x14>
	}
}
 80092fc:	bf00      	nop
 80092fe:	bf00      	nop
 8009300:	371c      	adds	r7, #28
 8009302:	46bd      	mov	sp, r7
 8009304:	bd90      	pop	{r4, r7, pc}

08009306 <_ZN14CircularBuffer14onDataReceivedEt>:

void CircularBuffer::onDataReceived(uint16_t size)
{
 8009306:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800930a:	b08d      	sub	sp, #52	; 0x34
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	460b      	mov	r3, r1
 8009312:	817b      	strh	r3, [r7, #10]
	//no data received since the last call
	if (prevSize == size)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	8b1b      	ldrh	r3, [r3, #24]
 8009318:	897a      	ldrh	r2, [r7, #10]
 800931a:	429a      	cmp	r2, r3
 800931c:	f000 80a3 	beq.w	8009466 <_ZN14CircularBuffer14onDataReceivedEt+0x160>
	{
		return;
	}

	if (size > prevSize)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	8b1b      	ldrh	r3, [r3, #24]
 8009324:	897a      	ldrh	r2, [r7, #10]
 8009326:	429a      	cmp	r2, r3
 8009328:	d944      	bls.n	80093b4 <_ZN14CircularBuffer14onDataReceivedEt+0xae>
		uint16_t dataSize = size - prevSize;
		char data[dataSize];
		memcpy(data, buffer+prevSize, dataSize);

		notifySubscribers(data, dataSize);
	}
 800932a:	466b      	mov	r3, sp
 800932c:	461c      	mov	r4, r3
		uint16_t dataSize = size - prevSize;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	8b1b      	ldrh	r3, [r3, #24]
 8009332:	897a      	ldrh	r2, [r7, #10]
 8009334:	1ad3      	subs	r3, r2, r3
 8009336:	83fb      	strh	r3, [r7, #30]
		char data[dataSize];
 8009338:	8bf9      	ldrh	r1, [r7, #30]
 800933a:	460b      	mov	r3, r1
 800933c:	3b01      	subs	r3, #1
 800933e:	61bb      	str	r3, [r7, #24]
 8009340:	b28b      	uxth	r3, r1
 8009342:	2200      	movs	r2, #0
 8009344:	603b      	str	r3, [r7, #0]
 8009346:	607a      	str	r2, [r7, #4]
 8009348:	f04f 0200 	mov.w	r2, #0
 800934c:	f04f 0300 	mov.w	r3, #0
 8009350:	e9d7 5600 	ldrd	r5, r6, [r7]
 8009354:	4630      	mov	r0, r6
 8009356:	00c3      	lsls	r3, r0, #3
 8009358:	4628      	mov	r0, r5
 800935a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800935e:	4628      	mov	r0, r5
 8009360:	00c2      	lsls	r2, r0, #3
 8009362:	b28b      	uxth	r3, r1
 8009364:	2200      	movs	r2, #0
 8009366:	469a      	mov	sl, r3
 8009368:	4693      	mov	fp, r2
 800936a:	f04f 0200 	mov.w	r2, #0
 800936e:	f04f 0300 	mov.w	r3, #0
 8009372:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009376:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800937a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800937e:	460b      	mov	r3, r1
 8009380:	3307      	adds	r3, #7
 8009382:	08db      	lsrs	r3, r3, #3
 8009384:	00db      	lsls	r3, r3, #3
 8009386:	ebad 0d03 	sub.w	sp, sp, r3
 800938a:	466b      	mov	r3, sp
 800938c:	3300      	adds	r3, #0
 800938e:	617b      	str	r3, [r7, #20]
		memcpy(data, buffer+prevSize, dataSize);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	8b12      	ldrh	r2, [r2, #24]
 8009398:	4413      	add	r3, r2
 800939a:	8bfa      	ldrh	r2, [r7, #30]
 800939c:	4619      	mov	r1, r3
 800939e:	6978      	ldr	r0, [r7, #20]
 80093a0:	f012 fc75 	bl	801bc8e <memcpy>
		notifySubscribers(data, dataSize);
 80093a4:	8bfb      	ldrh	r3, [r7, #30]
 80093a6:	461a      	mov	r2, r3
 80093a8:	6979      	ldr	r1, [r7, #20]
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f7ff ff80 	bl	80092b0 <_ZN14CircularBuffer17notifySubscribersEPKct>
 80093b0:	46a5      	mov	sp, r4
 80093b2:	e054      	b.n	800945e <_ZN14CircularBuffer14onDataReceivedEt+0x158>
		{
			memcpy(data+firstPartSize, buffer, secondPartSize);
		}

		notifySubscribers(data, dataSize);
	}
 80093b4:	466b      	mov	r3, sp
 80093b6:	461e      	mov	r6, r3
		uint16_t firstPartSize = bufferSize - prevSize;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	881a      	ldrh	r2, [r3, #0]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	8b1b      	ldrh	r3, [r3, #24]
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		uint16_t secondPartSize = size;
 80093c4:	897b      	ldrh	r3, [r7, #10]
 80093c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
		uint16_t dataSize = firstPartSize + secondPartSize;
 80093c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80093ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80093cc:	4413      	add	r3, r2
 80093ce:	857b      	strh	r3, [r7, #42]	; 0x2a
		char data[dataSize];
 80093d0:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80093d2:	460b      	mov	r3, r1
 80093d4:	3b01      	subs	r3, #1
 80093d6:	627b      	str	r3, [r7, #36]	; 0x24
 80093d8:	b28b      	uxth	r3, r1
 80093da:	2200      	movs	r2, #0
 80093dc:	4698      	mov	r8, r3
 80093de:	4691      	mov	r9, r2
 80093e0:	f04f 0200 	mov.w	r2, #0
 80093e4:	f04f 0300 	mov.w	r3, #0
 80093e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80093ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80093f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80093f4:	b28b      	uxth	r3, r1
 80093f6:	2200      	movs	r2, #0
 80093f8:	461c      	mov	r4, r3
 80093fa:	4615      	mov	r5, r2
 80093fc:	f04f 0200 	mov.w	r2, #0
 8009400:	f04f 0300 	mov.w	r3, #0
 8009404:	00eb      	lsls	r3, r5, #3
 8009406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800940a:	00e2      	lsls	r2, r4, #3
 800940c:	460b      	mov	r3, r1
 800940e:	3307      	adds	r3, #7
 8009410:	08db      	lsrs	r3, r3, #3
 8009412:	00db      	lsls	r3, r3, #3
 8009414:	ebad 0d03 	sub.w	sp, sp, r3
 8009418:	466b      	mov	r3, sp
 800941a:	3300      	adds	r3, #0
 800941c:	623b      	str	r3, [r7, #32]
		if (firstPartSize > 0)
 800941e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009420:	2b00      	cmp	r3, #0
 8009422:	d009      	beq.n	8009438 <_ZN14CircularBuffer14onDataReceivedEt+0x132>
			memcpy(data, buffer+prevSize, firstPartSize);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	8b12      	ldrh	r2, [r2, #24]
 800942c:	4413      	add	r3, r2
 800942e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009430:	4619      	mov	r1, r3
 8009432:	6a38      	ldr	r0, [r7, #32]
 8009434:	f012 fc2b 	bl	801bc8e <memcpy>
		if (secondPartSize > 0)
 8009438:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800943a:	2b00      	cmp	r3, #0
 800943c:	d008      	beq.n	8009450 <_ZN14CircularBuffer14onDataReceivedEt+0x14a>
			memcpy(data+firstPartSize, buffer, secondPartSize);
 800943e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009440:	6a3a      	ldr	r2, [r7, #32]
 8009442:	18d0      	adds	r0, r2, r3
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800944a:	4619      	mov	r1, r3
 800944c:	f012 fc1f 	bl	801bc8e <memcpy>
		notifySubscribers(data, dataSize);
 8009450:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009452:	461a      	mov	r2, r3
 8009454:	6a39      	ldr	r1, [r7, #32]
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f7ff ff2a 	bl	80092b0 <_ZN14CircularBuffer17notifySubscribersEPKct>
 800945c:	46b5      	mov	sp, r6

	prevSize = size;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	897a      	ldrh	r2, [r7, #10]
 8009462:	831a      	strh	r2, [r3, #24]
 8009464:	e000      	b.n	8009468 <_ZN14CircularBuffer14onDataReceivedEt+0x162>
		return;
 8009466:	bf00      	nop
}
 8009468:	3734      	adds	r7, #52	; 0x34
 800946a:	46bd      	mov	sp, r7
 800946c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009470 <_ZN6Config11getWifiSsidEv>:
#include "config.class.h"
#include "fatfs.h"
#include <string.h>

const char* Config::getWifiSsid()
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
	return wifiSsid;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	3311      	adds	r3, #17
}
 800947c:	4618      	mov	r0, r3
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <_ZN6Config15getWifiPasswordEv>:

const char* Config::getWifiPassword()
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
	return wifiPassword;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	3330      	adds	r3, #48	; 0x30
}
 8009494:	4618      	mov	r0, r3
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <_ZN6Config4readEv>:

void Config::read()
{
 80094a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a4:	f5ad 5d84 	sub.w	sp, sp, #4224	; 0x1080
 80094a8:	b085      	sub	sp, #20
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80094b0:	f843 0c74 	str.w	r0, [r3, #-116]
	res = f_close(&file);
	if(res != FR_OK)
	{
		throw "Cannot close config file";
	}
}
 80094b4:	466b      	mov	r3, sp
 80094b6:	461e      	mov	r6, r3
	initConfig();
 80094b8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80094bc:	f853 0c74 	ldr.w	r0, [r3, #-116]
 80094c0:	f000 fa6c 	bl	800999c <_ZN6Config10initConfigEv>
	FRESULT res = f_open(&file, fileName, FA_OPEN_EXISTING | FA_READ);
 80094c4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80094c8:	f853 1c74 	ldr.w	r1, [r3, #-116]
 80094cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80094d0:	3b08      	subs	r3, #8
 80094d2:	2201      	movs	r2, #1
 80094d4:	4618      	mov	r0, r3
 80094d6:	f00d fbe5 	bl	8016ca4 <f_open>
 80094da:	4603      	mov	r3, r0
 80094dc:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80094e0:	f102 020b 	add.w	r2, r2, #11
 80094e4:	7013      	strb	r3, [r2, #0]
	if(res != FR_OK)
 80094e6:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80094ea:	f103 030b 	add.w	r3, r3, #11
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00a      	beq.n	800950a <_ZN6Config4readEv+0x6a>
		throw "Cannot open config file";
 80094f4:	2004      	movs	r0, #4
 80094f6:	f00f f9bf 	bl	8018878 <__cxa_allocate_exception>
 80094fa:	4603      	mov	r3, r0
 80094fc:	4a93      	ldr	r2, [pc, #588]	; (800974c <_ZN6Config4readEv+0x2ac>)
 80094fe:	601a      	str	r2, [r3, #0]
 8009500:	2200      	movs	r2, #0
 8009502:	4993      	ldr	r1, [pc, #588]	; (8009750 <_ZN6Config4readEv+0x2b0>)
 8009504:	4618      	mov	r0, r3
 8009506:	f00f feef 	bl	80192e8 <__cxa_throw>
	UINT readBufferSize = 512;
 800950a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800950e:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8009512:	f102 0204 	add.w	r2, r2, #4
 8009516:	6013      	str	r3, [r2, #0]
	char readBuffer[readBufferSize];
 8009518:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800951c:	f103 0304 	add.w	r3, r3, #4
 8009520:	6819      	ldr	r1, [r3, #0]
 8009522:	460b      	mov	r3, r1
 8009524:	3b01      	subs	r3, #1
 8009526:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800952a:	6013      	str	r3, [r2, #0]
 800952c:	2300      	movs	r3, #0
 800952e:	460c      	mov	r4, r1
 8009530:	461d      	mov	r5, r3
 8009532:	f04f 0200 	mov.w	r2, #0
 8009536:	f04f 0300 	mov.w	r3, #0
 800953a:	00eb      	lsls	r3, r5, #3
 800953c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009540:	00e2      	lsls	r2, r4, #3
 8009542:	2300      	movs	r3, #0
 8009544:	4688      	mov	r8, r1
 8009546:	4699      	mov	r9, r3
 8009548:	f04f 0200 	mov.w	r2, #0
 800954c:	f04f 0300 	mov.w	r3, #0
 8009550:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009554:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009558:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800955c:	1dcb      	adds	r3, r1, #7
 800955e:	08db      	lsrs	r3, r3, #3
 8009560:	00db      	lsls	r3, r3, #3
 8009562:	ebad 0d03 	sub.w	sp, sp, r3
 8009566:	466b      	mov	r3, sp
 8009568:	3300      	adds	r3, #0
 800956a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800956e:	f102 021c 	add.w	r2, r2, #28
 8009572:	6013      	str	r3, [r2, #0]
	res = f_read(&file, readBuffer, readBufferSize, &readBufferUsedSize);
 8009574:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009578:	3b0c      	subs	r3, #12
 800957a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800957e:	3808      	subs	r0, #8
 8009580:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8009584:	f102 0204 	add.w	r2, r2, #4
 8009588:	6812      	ldr	r2, [r2, #0]
 800958a:	f507 5183 	add.w	r1, r7, #4192	; 0x1060
 800958e:	f101 011c 	add.w	r1, r1, #28
 8009592:	6809      	ldr	r1, [r1, #0]
 8009594:	f00d fd52 	bl	801703c <f_read>
 8009598:	4603      	mov	r3, r0
 800959a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800959e:	f102 020b 	add.w	r2, r2, #11
 80095a2:	7013      	strb	r3, [r2, #0]
	if(res != FR_OK)
 80095a4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80095a8:	f103 030b 	add.w	r3, r3, #11
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00a      	beq.n	80095c8 <_ZN6Config4readEv+0x128>
		throw "Cannot read config file";
 80095b2:	2004      	movs	r0, #4
 80095b4:	f00f f960 	bl	8018878 <__cxa_allocate_exception>
 80095b8:	4603      	mov	r3, r0
 80095ba:	4a66      	ldr	r2, [pc, #408]	; (8009754 <_ZN6Config4readEv+0x2b4>)
 80095bc:	601a      	str	r2, [r3, #0]
 80095be:	2200      	movs	r2, #0
 80095c0:	4963      	ldr	r1, [pc, #396]	; (8009750 <_ZN6Config4readEv+0x2b0>)
 80095c2:	4618      	mov	r0, r3
 80095c4:	f00f fe90 	bl	80192e8 <__cxa_throw>
	if (readBufferUsedSize == readBufferSize)
 80095c8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80095cc:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 80095d0:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 80095d4:	f102 0204 	add.w	r2, r2, #4
 80095d8:	6812      	ldr	r2, [r2, #0]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d10a      	bne.n	80095f4 <_ZN6Config4readEv+0x154>
		throw "too big config file";
 80095de:	2004      	movs	r0, #4
 80095e0:	f00f f94a 	bl	8018878 <__cxa_allocate_exception>
 80095e4:	4603      	mov	r3, r0
 80095e6:	4a5c      	ldr	r2, [pc, #368]	; (8009758 <_ZN6Config4readEv+0x2b8>)
 80095e8:	601a      	str	r2, [r3, #0]
 80095ea:	2200      	movs	r2, #0
 80095ec:	4958      	ldr	r1, [pc, #352]	; (8009750 <_ZN6Config4readEv+0x2b0>)
 80095ee:	4618      	mov	r0, r3
 80095f0:	f00f fe7a 	bl	80192e8 <__cxa_throw>
	readBuffer[readBufferUsedSize] = '\0';
 80095f4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80095f8:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 80095fc:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8009600:	f102 021c 	add.w	r2, r2, #28
 8009604:	6812      	ldr	r2, [r2, #0]
 8009606:	2100      	movs	r1, #0
 8009608:	54d1      	strb	r1, [r2, r3]
	const char* readCursor = readBuffer;
 800960a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800960e:	f103 031c 	add.w	r3, r3, #28
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8009618:	f102 020c 	add.w	r2, r2, #12
 800961c:	6013      	str	r3, [r2, #0]
	const char* lastNewLineChar = strrchr(readCursor, '\n');
 800961e:	210a      	movs	r1, #10
 8009620:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8009624:	f103 030c 	add.w	r3, r3, #12
 8009628:	6818      	ldr	r0, [r3, #0]
 800962a:	f012 fa45 	bl	801bab8 <strrchr>
 800962e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8009632:	f103 0318 	add.w	r3, r3, #24
 8009636:	6018      	str	r0, [r3, #0]
	if (lastNewLineChar == NULL)
 8009638:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800963c:	f103 0318 	add.w	r3, r3, #24
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d10a      	bne.n	800965c <_ZN6Config4readEv+0x1bc>
		throw "corrupted config";
 8009646:	2004      	movs	r0, #4
 8009648:	f00f f916 	bl	8018878 <__cxa_allocate_exception>
 800964c:	4603      	mov	r3, r0
 800964e:	4a43      	ldr	r2, [pc, #268]	; (800975c <_ZN6Config4readEv+0x2bc>)
 8009650:	601a      	str	r2, [r3, #0]
 8009652:	2200      	movs	r2, #0
 8009654:	493e      	ldr	r1, [pc, #248]	; (8009750 <_ZN6Config4readEv+0x2b0>)
 8009656:	4618      	mov	r0, r3
 8009658:	f00f fe46 	bl	80192e8 <__cxa_throw>
	}
 800965c:	466b      	mov	r3, sp
 800965e:	461c      	mov	r4, r3
		char* firstNewLineChar = strchr(readCursor, '\n');
 8009660:	210a      	movs	r1, #10
 8009662:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8009666:	f103 030c 	add.w	r3, r3, #12
 800966a:	6818      	ldr	r0, [r3, #0]
 800966c:	f012 f9f2 	bl	801ba54 <strchr>
 8009670:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8009674:	f103 0314 	add.w	r3, r3, #20
 8009678:	6018      	str	r0, [r3, #0]
		if (firstNewLineChar == NULL)
 800967a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800967e:	f103 0314 	add.w	r3, r3, #20
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d10a      	bne.n	800969e <_ZN6Config4readEv+0x1fe>
			throw "corrupted config";
 8009688:	2004      	movs	r0, #4
 800968a:	f00f f8f5 	bl	8018878 <__cxa_allocate_exception>
 800968e:	4603      	mov	r3, r0
 8009690:	4a32      	ldr	r2, [pc, #200]	; (800975c <_ZN6Config4readEv+0x2bc>)
 8009692:	601a      	str	r2, [r3, #0]
 8009694:	2200      	movs	r2, #0
 8009696:	492e      	ldr	r1, [pc, #184]	; (8009750 <_ZN6Config4readEv+0x2b0>)
 8009698:	4618      	mov	r0, r3
 800969a:	f00f fe25 	bl	80192e8 <__cxa_throw>
		char* firstDelimiterChar = strchr(readCursor, '=');
 800969e:	213d      	movs	r1, #61	; 0x3d
 80096a0:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80096a4:	f103 030c 	add.w	r3, r3, #12
 80096a8:	6818      	ldr	r0, [r3, #0]
 80096aa:	f012 f9d3 	bl	801ba54 <strchr>
 80096ae:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80096b2:	f103 0310 	add.w	r3, r3, #16
 80096b6:	6018      	str	r0, [r3, #0]
		if (firstDelimiterChar > firstNewLineChar)
 80096b8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80096bc:	f103 0310 	add.w	r3, r3, #16
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80096c6:	f103 0314 	add.w	r3, r3, #20
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d90a      	bls.n	80096e6 <_ZN6Config4readEv+0x246>
			throw "corrupted config";
 80096d0:	2004      	movs	r0, #4
 80096d2:	f00f f8d1 	bl	8018878 <__cxa_allocate_exception>
 80096d6:	4603      	mov	r3, r0
 80096d8:	4a20      	ldr	r2, [pc, #128]	; (800975c <_ZN6Config4readEv+0x2bc>)
 80096da:	601a      	str	r2, [r3, #0]
 80096dc:	2200      	movs	r2, #0
 80096de:	491c      	ldr	r1, [pc, #112]	; (8009750 <_ZN6Config4readEv+0x2b0>)
 80096e0:	4618      	mov	r0, r3
 80096e2:	f00f fe01 	bl	80192e8 <__cxa_throw>
		UINT nameLen = firstDelimiterChar - readCursor;
 80096e6:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80096ea:	f103 0310 	add.w	r3, r3, #16
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80096f4:	f103 030c 	add.w	r3, r3, #12
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	1ad3      	subs	r3, r2, r3
 80096fc:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8009700:	f102 020c 	add.w	r2, r2, #12
 8009704:	6013      	str	r3, [r2, #0]
		UINT valueLen = firstNewLineChar - firstDelimiterChar - 1;
 8009706:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800970a:	f103 0314 	add.w	r3, r3, #20
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8009714:	f103 0310 	add.w	r3, r3, #16
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	3b01      	subs	r3, #1
 800971e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8009722:	f102 0208 	add.w	r2, r2, #8
 8009726:	6013      	str	r3, [r2, #0]
		if (valueLen > maxValueLen)
 8009728:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800972c:	f103 0308 	add.w	r3, r3, #8
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2b1e      	cmp	r3, #30
 8009734:	d916      	bls.n	8009764 <_ZN6Config4readEv+0x2c4>
			throw "too long option value";
 8009736:	2004      	movs	r0, #4
 8009738:	f00f f89e 	bl	8018878 <__cxa_allocate_exception>
 800973c:	4603      	mov	r3, r0
 800973e:	4a08      	ldr	r2, [pc, #32]	; (8009760 <_ZN6Config4readEv+0x2c0>)
 8009740:	601a      	str	r2, [r3, #0]
 8009742:	2200      	movs	r2, #0
 8009744:	4902      	ldr	r1, [pc, #8]	; (8009750 <_ZN6Config4readEv+0x2b0>)
 8009746:	4618      	mov	r0, r3
 8009748:	f00f fdce 	bl	80192e8 <__cxa_throw>
 800974c:	0801e498 	.word	0x0801e498
 8009750:	08023b60 	.word	0x08023b60
 8009754:	0801e4b0 	.word	0x0801e4b0
 8009758:	0801e4c8 	.word	0x0801e4c8
 800975c:	0801e4dc 	.word	0x0801e4dc
 8009760:	0801e4f0 	.word	0x0801e4f0
		char name[nameLen+1];
 8009764:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8009768:	f103 030c 	add.w	r3, r3, #12
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	1c59      	adds	r1, r3, #1
 8009770:	460b      	mov	r3, r1
 8009772:	3b01      	subs	r3, #1
 8009774:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8009778:	f102 0204 	add.w	r2, r2, #4
 800977c:	6013      	str	r3, [r2, #0]
 800977e:	2300      	movs	r3, #0
 8009780:	468a      	mov	sl, r1
 8009782:	469b      	mov	fp, r3
 8009784:	f04f 0200 	mov.w	r2, #0
 8009788:	f04f 0300 	mov.w	r3, #0
 800978c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009790:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009794:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009798:	2300      	movs	r3, #0
 800979a:	6139      	str	r1, [r7, #16]
 800979c:	617b      	str	r3, [r7, #20]
 800979e:	f04f 0200 	mov.w	r2, #0
 80097a2:	f04f 0300 	mov.w	r3, #0
 80097a6:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80097aa:	4648      	mov	r0, r9
 80097ac:	00c3      	lsls	r3, r0, #3
 80097ae:	4640      	mov	r0, r8
 80097b0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80097b4:	4640      	mov	r0, r8
 80097b6:	00c2      	lsls	r2, r0, #3
 80097b8:	1dcb      	adds	r3, r1, #7
 80097ba:	08db      	lsrs	r3, r3, #3
 80097bc:	00db      	lsls	r3, r3, #3
 80097be:	ebad 0d03 	sub.w	sp, sp, r3
 80097c2:	466b      	mov	r3, sp
 80097c4:	3300      	adds	r3, #0
 80097c6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80097ca:	6013      	str	r3, [r2, #0]
		char value[valueLen+1];
 80097cc:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80097d0:	f103 0308 	add.w	r3, r3, #8
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	1c59      	adds	r1, r3, #1
 80097d8:	460b      	mov	r3, r1
 80097da:	3b01      	subs	r3, #1
 80097dc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80097e0:	f102 021c 	add.w	r2, r2, #28
 80097e4:	6013      	str	r3, [r2, #0]
 80097e6:	2300      	movs	r3, #0
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	60fb      	str	r3, [r7, #12]
 80097ec:	f04f 0200 	mov.w	r2, #0
 80097f0:	f04f 0300 	mov.w	r3, #0
 80097f4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80097f8:	4648      	mov	r0, r9
 80097fa:	00c3      	lsls	r3, r0, #3
 80097fc:	4640      	mov	r0, r8
 80097fe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8009802:	4640      	mov	r0, r8
 8009804:	00c2      	lsls	r2, r0, #3
 8009806:	2300      	movs	r3, #0
 8009808:	6039      	str	r1, [r7, #0]
 800980a:	607b      	str	r3, [r7, #4]
 800980c:	f04f 0200 	mov.w	r2, #0
 8009810:	f04f 0300 	mov.w	r3, #0
 8009814:	e9d7 8900 	ldrd	r8, r9, [r7]
 8009818:	4648      	mov	r0, r9
 800981a:	00c3      	lsls	r3, r0, #3
 800981c:	4640      	mov	r0, r8
 800981e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8009822:	4640      	mov	r0, r8
 8009824:	00c2      	lsls	r2, r0, #3
 8009826:	1dcb      	adds	r3, r1, #7
 8009828:	08db      	lsrs	r3, r3, #3
 800982a:	00db      	lsls	r3, r3, #3
 800982c:	ebad 0d03 	sub.w	sp, sp, r3
 8009830:	466b      	mov	r3, sp
 8009832:	3300      	adds	r3, #0
 8009834:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009838:	f102 0218 	add.w	r2, r2, #24
 800983c:	6013      	str	r3, [r2, #0]
		strncpy(name, readCursor, nameLen);
 800983e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8009842:	f103 030c 	add.w	r3, r3, #12
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800984c:	f103 030c 	add.w	r3, r3, #12
 8009850:	6819      	ldr	r1, [r3, #0]
 8009852:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8009856:	6818      	ldr	r0, [r3, #0]
 8009858:	f012 f91b 	bl	801ba92 <strncpy>
		name[nameLen] = '\0';
 800985c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8009866:	f103 030c 	add.w	r3, r3, #12
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4413      	add	r3, r2
 800986e:	2200      	movs	r2, #0
 8009870:	701a      	strb	r2, [r3, #0]
		strncpy(value, firstDelimiterChar+1, valueLen);
 8009872:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8009876:	f103 0310 	add.w	r3, r3, #16
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	3301      	adds	r3, #1
 800987e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8009882:	f102 0208 	add.w	r2, r2, #8
 8009886:	6812      	ldr	r2, [r2, #0]
 8009888:	4619      	mov	r1, r3
 800988a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800988e:	f103 0318 	add.w	r3, r3, #24
 8009892:	6818      	ldr	r0, [r3, #0]
 8009894:	f012 f8fd 	bl	801ba92 <strncpy>
		value[valueLen] = '\0';
 8009898:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800989c:	f103 0318 	add.w	r3, r3, #24
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80098a6:	f103 0308 	add.w	r3, r3, #8
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4413      	add	r3, r2
 80098ae:	2200      	movs	r2, #0
 80098b0:	701a      	strb	r2, [r3, #0]
		if (strcmp(name, "wifiSsid") == 0)
 80098b2:	4936      	ldr	r1, [pc, #216]	; (800998c <_ZN6Config4readEv+0x4ec>)
 80098b4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80098b8:	6818      	ldr	r0, [r3, #0]
 80098ba:	f7fc fc61 	bl	8006180 <strcmp>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d10c      	bne.n	80098de <_ZN6Config4readEv+0x43e>
			strcpy(wifiSsid, value);
 80098c4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80098c8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80098cc:	3311      	adds	r3, #17
 80098ce:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80098d2:	f102 0218 	add.w	r2, r2, #24
 80098d6:	6811      	ldr	r1, [r2, #0]
 80098d8:	4618      	mov	r0, r3
 80098da:	f012 f9d0 	bl	801bc7e <strcpy>
		if (strcmp(name, "wifiPassword") == 0)
 80098de:	492c      	ldr	r1, [pc, #176]	; (8009990 <_ZN6Config4readEv+0x4f0>)
 80098e0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80098e4:	6818      	ldr	r0, [r3, #0]
 80098e6:	f7fc fc4b 	bl	8006180 <strcmp>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10c      	bne.n	800990a <_ZN6Config4readEv+0x46a>
			strcpy(wifiPassword, value);
 80098f0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80098f4:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80098f8:	3330      	adds	r3, #48	; 0x30
 80098fa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80098fe:	f102 0218 	add.w	r2, r2, #24
 8009902:	6811      	ldr	r1, [r2, #0]
 8009904:	4618      	mov	r0, r3
 8009906:	f012 f9ba 	bl	801bc7e <strcpy>
		if (lastNewLineChar == firstNewLineChar)
 800990a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800990e:	f103 0318 	add.w	r3, r3, #24
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8009918:	f103 0314 	add.w	r3, r3, #20
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	429a      	cmp	r2, r3
 8009920:	d114      	bne.n	800994c <_ZN6Config4readEv+0x4ac>
			break;
 8009922:	46a5      	mov	sp, r4
	res = f_close(&file);
 8009924:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009928:	3b08      	subs	r3, #8
 800992a:	4618      	mov	r0, r3
 800992c:	f00d fef7 	bl	801771e <f_close>
 8009930:	4603      	mov	r3, r0
 8009932:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8009936:	f102 020b 	add.w	r2, r2, #11
 800993a:	7013      	strb	r3, [r2, #0]
	if(res != FR_OK)
 800993c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8009940:	f103 030b 	add.w	r3, r3, #11
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d10d      	bne.n	8009966 <_ZN6Config4readEv+0x4c6>
 800994a:	e017      	b.n	800997c <_ZN6Config4readEv+0x4dc>
		readCursor = firstNewLineChar+1;
 800994c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8009950:	f103 0314 	add.w	r3, r3, #20
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	3301      	adds	r3, #1
 8009958:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800995c:	f102 020c 	add.w	r2, r2, #12
 8009960:	6013      	str	r3, [r2, #0]
 8009962:	46a5      	mov	sp, r4
	}
 8009964:	e67a      	b.n	800965c <_ZN6Config4readEv+0x1bc>
		throw "Cannot close config file";
 8009966:	2004      	movs	r0, #4
 8009968:	f00e ff86 	bl	8018878 <__cxa_allocate_exception>
 800996c:	4603      	mov	r3, r0
 800996e:	4a09      	ldr	r2, [pc, #36]	; (8009994 <_ZN6Config4readEv+0x4f4>)
 8009970:	601a      	str	r2, [r3, #0]
 8009972:	2200      	movs	r2, #0
 8009974:	4908      	ldr	r1, [pc, #32]	; (8009998 <_ZN6Config4readEv+0x4f8>)
 8009976:	4618      	mov	r0, r3
 8009978:	f00f fcb6 	bl	80192e8 <__cxa_throw>
 800997c:	46b5      	mov	sp, r6
}
 800997e:	bf00      	nop
 8009980:	f507 5784 	add.w	r7, r7, #4224	; 0x1080
 8009984:	3714      	adds	r7, #20
 8009986:	46bd      	mov	sp, r7
 8009988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800998c:	0801e508 	.word	0x0801e508
 8009990:	0801e514 	.word	0x0801e514
 8009994:	0801e524 	.word	0x0801e524
 8009998:	08023b60 	.word	0x08023b60

0800999c <_ZN6Config10initConfigEv>:

void Config::initConfig()
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
	//	res = f_close(&file);
	//	if(res != FR_OK)
	//	{
	//		throw "Cannot close config file";
	//	}
}
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <_ZN7GpsData7isValidEv>:
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

bool GpsData::isValid()
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
	return strlen(timeUtc) > 0
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	781b      	ldrb	r3, [r3, #0]
		&& strlen(dateUtc) > 0
		&& latitude < initialCoordinatesValue
		&& latitudeNorS != '\0'
		&& longitude < initialCoordinatesValue
		&& longitudeEorW != '\0'
		&& positionStatus == positionStatusValid;
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d02b      	beq.n	8009a18 <_ZN7GpsData7isValidEv+0x68>
		&& strlen(dateUtc) > 0
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	3309      	adds	r3, #9
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d026      	beq.n	8009a18 <_ZN7GpsData7isValidEv+0x68>
		&& latitude < initialCoordinatesValue
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80099d0:	f04f 0200 	mov.w	r2, #0
 80099d4:	4b13      	ldr	r3, [pc, #76]	; (8009a24 <_ZN7GpsData7isValidEv+0x74>)
 80099d6:	f7fd f869 	bl	8006aac <__aeabi_dcmplt>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d01b      	beq.n	8009a18 <_ZN7GpsData7isValidEv+0x68>
		&& latitudeNorS != '\0'
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d016      	beq.n	8009a18 <_ZN7GpsData7isValidEv+0x68>
		&& longitude < initialCoordinatesValue
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80099f0:	f04f 0200 	mov.w	r2, #0
 80099f4:	4b0b      	ldr	r3, [pc, #44]	; (8009a24 <_ZN7GpsData7isValidEv+0x74>)
 80099f6:	f7fd f859 	bl	8006aac <__aeabi_dcmplt>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d00b      	beq.n	8009a18 <_ZN7GpsData7isValidEv+0x68>
		&& longitudeEorW != '\0'
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d006      	beq.n	8009a18 <_ZN7GpsData7isValidEv+0x68>
		&& positionStatus == positionStatusValid;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009a10:	2b41      	cmp	r3, #65	; 0x41
 8009a12:	d101      	bne.n	8009a18 <_ZN7GpsData7isValidEv+0x68>
 8009a14:	2301      	movs	r3, #1
 8009a16:	e000      	b.n	8009a1a <_ZN7GpsData7isValidEv+0x6a>
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	408f4000 	.word	0x408f4000

08009a28 <_ZN7GpsData12parseTimeUtcEPc>:
void GpsData::parseTimeUtc(char* nmeaSentenceSection)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
	if (strlen(nmeaSentenceSection) < 8)
 8009a32:	6838      	ldr	r0, [r7, #0]
 8009a34:	f7fc fc04 	bl	8006240 <strlen>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b07      	cmp	r3, #7
 8009a3c:	d921      	bls.n	8009a82 <_ZN7GpsData12parseTimeUtcEPc+0x5a>
	{
		return;
	}

	strncpy(timeUtc, nmeaSentenceSection, 2);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2202      	movs	r2, #2
 8009a42:	6839      	ldr	r1, [r7, #0]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f012 f824 	bl	801ba92 <strncpy>
	strncpy((timeUtc+2), ":", 1);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	3302      	adds	r3, #2
 8009a4e:	223a      	movs	r2, #58	; 0x3a
 8009a50:	701a      	strb	r2, [r3, #0]
	strncpy((timeUtc+3), nmeaSentenceSection+2, 2);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	1cd8      	adds	r0, r3, #3
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	3302      	adds	r3, #2
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	f012 f818 	bl	801ba92 <strncpy>
	strncpy((timeUtc+5), ":", 1);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	3305      	adds	r3, #5
 8009a66:	223a      	movs	r2, #58	; 0x3a
 8009a68:	701a      	strb	r2, [r3, #0]
	strncpy((timeUtc+6), nmeaSentenceSection+4, 2);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	1d98      	adds	r0, r3, #6
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	3304      	adds	r3, #4
 8009a72:	2202      	movs	r2, #2
 8009a74:	4619      	mov	r1, r3
 8009a76:	f012 f80c 	bl	801ba92 <strncpy>
	timeUtc[8] = '\0';
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	721a      	strb	r2, [r3, #8]
 8009a80:	e000      	b.n	8009a84 <_ZN7GpsData12parseTimeUtcEPc+0x5c>
		return;
 8009a82:	bf00      	nop
}
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
	...

08009a8c <_ZN7GpsData12parseDateUtcEPc>:
void GpsData::parseDateUtc(char* nmeaSentenceSection)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
	if (strlen(nmeaSentenceSection) != 6)
 8009a96:	6838      	ldr	r0, [r7, #0]
 8009a98:	f7fc fbd2 	bl	8006240 <strlen>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b06      	cmp	r3, #6
 8009aa0:	d12e      	bne.n	8009b00 <_ZN7GpsData12parseDateUtcEPc+0x74>
	{
		return;
	}

	strncpy(dateUtc, "20", 2);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	3309      	adds	r3, #9
 8009aa6:	4918      	ldr	r1, [pc, #96]	; (8009b08 <_ZN7GpsData12parseDateUtcEPc+0x7c>)
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	460b      	mov	r3, r1
 8009aac:	881b      	ldrh	r3, [r3, #0]
 8009aae:	8013      	strh	r3, [r2, #0]
	strncpy(dateUtc+2, nmeaSentenceSection+4, 2);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	3309      	adds	r3, #9
 8009ab4:	1c98      	adds	r0, r3, #2
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	3304      	adds	r3, #4
 8009aba:	2202      	movs	r2, #2
 8009abc:	4619      	mov	r1, r3
 8009abe:	f011 ffe8 	bl	801ba92 <strncpy>
	strncpy((dateUtc+4), "-", 1);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	3309      	adds	r3, #9
 8009ac6:	3304      	adds	r3, #4
 8009ac8:	222d      	movs	r2, #45	; 0x2d
 8009aca:	701a      	strb	r2, [r3, #0]
	strncpy((dateUtc+5), nmeaSentenceSection+2, 2);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	3309      	adds	r3, #9
 8009ad0:	1d58      	adds	r0, r3, #5
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	3302      	adds	r3, #2
 8009ad6:	2202      	movs	r2, #2
 8009ad8:	4619      	mov	r1, r3
 8009ada:	f011 ffda 	bl	801ba92 <strncpy>
	strncpy((dateUtc+7), "-", 1);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	3309      	adds	r3, #9
 8009ae2:	3307      	adds	r3, #7
 8009ae4:	222d      	movs	r2, #45	; 0x2d
 8009ae6:	701a      	strb	r2, [r3, #0]
	strncpy((dateUtc+8), nmeaSentenceSection, 2);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	3309      	adds	r3, #9
 8009aec:	3308      	adds	r3, #8
 8009aee:	2202      	movs	r2, #2
 8009af0:	6839      	ldr	r1, [r7, #0]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f011 ffcd 	bl	801ba92 <strncpy>
	dateUtc[10] = '\0';
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	74da      	strb	r2, [r3, #19]
 8009afe:	e000      	b.n	8009b02 <_ZN7GpsData12parseDateUtcEPc+0x76>
		return;
 8009b00:	bf00      	nop
}
 8009b02:	3708      	adds	r7, #8
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	0801e540 	.word	0x0801e540

08009b0c <_ZN7GpsData13parseLatitudeEPc>:
void GpsData::parseLatitude(char* nmeaSentenceSection)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b08e      	sub	sp, #56	; 0x38
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
	size_t nmeaSentenceSectionLen = strlen(nmeaSentenceSection);
 8009b16:	6838      	ldr	r0, [r7, #0]
 8009b18:	f7fc fb92 	bl	8006240 <strlen>
 8009b1c:	6378      	str	r0, [r7, #52]	; 0x34

	if (nmeaSentenceSectionLen <= 4 || nmeaSentenceSectionLen > latitudeAndLongitudeMaxSize)
 8009b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b20:	2b04      	cmp	r3, #4
 8009b22:	d93f      	bls.n	8009ba4 <_ZN7GpsData13parseLatitudeEPc+0x98>
 8009b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b26:	2b14      	cmp	r3, #20
 8009b28:	d83c      	bhi.n	8009ba4 <_ZN7GpsData13parseLatitudeEPc+0x98>
	{
		return;
	}

	char buffer[latitudeAndLongitudeMaxSize+1] = "";
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	60bb      	str	r3, [r7, #8]
 8009b2e:	f107 030c 	add.w	r3, r7, #12
 8009b32:	2200      	movs	r2, #0
 8009b34:	601a      	str	r2, [r3, #0]
 8009b36:	605a      	str	r2, [r3, #4]
 8009b38:	609a      	str	r2, [r3, #8]
 8009b3a:	60da      	str	r2, [r3, #12]
 8009b3c:	741a      	strb	r2, [r3, #16]
	strncpy(buffer, nmeaSentenceSection, 2);
 8009b3e:	f107 0308 	add.w	r3, r7, #8
 8009b42:	2202      	movs	r2, #2
 8009b44:	6839      	ldr	r1, [r7, #0]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f011 ffa3 	bl	801ba92 <strncpy>
	double degree = atof(buffer);
 8009b4c:	f107 0308 	add.w	r3, r7, #8
 8009b50:	4618      	mov	r0, r3
 8009b52:	f010 f826 	bl	8019ba2 <atof>
 8009b56:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28

	strncpy(buffer, nmeaSentenceSection+2, nmeaSentenceSectionLen-2);
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	1c99      	adds	r1, r3, #2
 8009b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b60:	1e9a      	subs	r2, r3, #2
 8009b62:	f107 0308 	add.w	r3, r7, #8
 8009b66:	4618      	mov	r0, r3
 8009b68:	f011 ff93 	bl	801ba92 <strncpy>
	double minutes = atof(buffer);
 8009b6c:	f107 0308 	add.w	r3, r7, #8
 8009b70:	4618      	mov	r0, r3
 8009b72:	f010 f816 	bl	8019ba2 <atof>
 8009b76:	ed87 0b08 	vstr	d0, [r7, #32]

	latitude = degree + minutes/60;
 8009b7a:	f04f 0200 	mov.w	r2, #0
 8009b7e:	4b0b      	ldr	r3, [pc, #44]	; (8009bac <_ZN7GpsData13parseLatitudeEPc+0xa0>)
 8009b80:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009b84:	f7fc fe4a 	bl	800681c <__aeabi_ddiv>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	4610      	mov	r0, r2
 8009b8e:	4619      	mov	r1, r3
 8009b90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b94:	f7fc fb62 	bl	800625c <__adddf3>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	6879      	ldr	r1, [r7, #4]
 8009b9e:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8009ba2:	e000      	b.n	8009ba6 <_ZN7GpsData13parseLatitudeEPc+0x9a>
		return;
 8009ba4:	bf00      	nop
}
 8009ba6:	3738      	adds	r7, #56	; 0x38
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	404e0000 	.word	0x404e0000

08009bb0 <_ZN7GpsData17parseLatitudeNorSEPc>:
void GpsData::parseLatitudeNorS(char* nmeaSentenceSection)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
	if (strlen(nmeaSentenceSection) != 1)
 8009bba:	6838      	ldr	r0, [r7, #0]
 8009bbc:	f7fc fb40 	bl	8006240 <strlen>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d105      	bne.n	8009bd2 <_ZN7GpsData17parseLatitudeNorSEPc+0x22>
	{
		return;
	}

	latitudeNorS = nmeaSentenceSection[0];
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	781a      	ldrb	r2, [r3, #0]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f883 2020 	strb.w	r2, [r3, #32]
 8009bd0:	e000      	b.n	8009bd4 <_ZN7GpsData17parseLatitudeNorSEPc+0x24>
		return;
 8009bd2:	bf00      	nop
}
 8009bd4:	3708      	adds	r7, #8
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
	...

08009bdc <_ZN7GpsData14parseLongitudeEPc>:
void GpsData::parseLongitude(char* nmeaSentenceSection)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b08e      	sub	sp, #56	; 0x38
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]
	size_t nmeaSentenceSectionLen = strlen(nmeaSentenceSection);
 8009be6:	6838      	ldr	r0, [r7, #0]
 8009be8:	f7fc fb2a 	bl	8006240 <strlen>
 8009bec:	6378      	str	r0, [r7, #52]	; 0x34

	if (nmeaSentenceSectionLen <= 5 || nmeaSentenceSectionLen > latitudeAndLongitudeMaxSize)
 8009bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bf0:	2b05      	cmp	r3, #5
 8009bf2:	d93f      	bls.n	8009c74 <_ZN7GpsData14parseLongitudeEPc+0x98>
 8009bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bf6:	2b14      	cmp	r3, #20
 8009bf8:	d83c      	bhi.n	8009c74 <_ZN7GpsData14parseLongitudeEPc+0x98>
	{
		return;
	}

	char buffer[GpsData::latitudeAndLongitudeMaxSize+1] = "";
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	60bb      	str	r3, [r7, #8]
 8009bfe:	f107 030c 	add.w	r3, r7, #12
 8009c02:	2200      	movs	r2, #0
 8009c04:	601a      	str	r2, [r3, #0]
 8009c06:	605a      	str	r2, [r3, #4]
 8009c08:	609a      	str	r2, [r3, #8]
 8009c0a:	60da      	str	r2, [r3, #12]
 8009c0c:	741a      	strb	r2, [r3, #16]
	strncpy(buffer, nmeaSentenceSection, 3);
 8009c0e:	f107 0308 	add.w	r3, r7, #8
 8009c12:	2203      	movs	r2, #3
 8009c14:	6839      	ldr	r1, [r7, #0]
 8009c16:	4618      	mov	r0, r3
 8009c18:	f011 ff3b 	bl	801ba92 <strncpy>
	double degree = atof(buffer);
 8009c1c:	f107 0308 	add.w	r3, r7, #8
 8009c20:	4618      	mov	r0, r3
 8009c22:	f00f ffbe 	bl	8019ba2 <atof>
 8009c26:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28

	strncpy(buffer, nmeaSentenceSection+3, nmeaSentenceSectionLen-2);
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	1cd9      	adds	r1, r3, #3
 8009c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c30:	1e9a      	subs	r2, r3, #2
 8009c32:	f107 0308 	add.w	r3, r7, #8
 8009c36:	4618      	mov	r0, r3
 8009c38:	f011 ff2b 	bl	801ba92 <strncpy>
	double minutes = atof(buffer);
 8009c3c:	f107 0308 	add.w	r3, r7, #8
 8009c40:	4618      	mov	r0, r3
 8009c42:	f00f ffae 	bl	8019ba2 <atof>
 8009c46:	ed87 0b08 	vstr	d0, [r7, #32]

	longitude = degree + minutes/60;
 8009c4a:	f04f 0200 	mov.w	r2, #0
 8009c4e:	4b0b      	ldr	r3, [pc, #44]	; (8009c7c <_ZN7GpsData14parseLongitudeEPc+0xa0>)
 8009c50:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009c54:	f7fc fde2 	bl	800681c <__aeabi_ddiv>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	4610      	mov	r0, r2
 8009c5e:	4619      	mov	r1, r3
 8009c60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c64:	f7fc fafa 	bl	800625c <__adddf3>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	6879      	ldr	r1, [r7, #4]
 8009c6e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8009c72:	e000      	b.n	8009c76 <_ZN7GpsData14parseLongitudeEPc+0x9a>
		return;
 8009c74:	bf00      	nop
}
 8009c76:	3738      	adds	r7, #56	; 0x38
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	404e0000 	.word	0x404e0000

08009c80 <_ZN7GpsData18parseLongitudeEorWEPc>:
void GpsData::parseLongitudeEorW(char* nmeaSentenceSection)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
	if (strlen(nmeaSentenceSection) != 1)
 8009c8a:	6838      	ldr	r0, [r7, #0]
 8009c8c:	f7fc fad8 	bl	8006240 <strlen>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d105      	bne.n	8009ca2 <_ZN7GpsData18parseLongitudeEorWEPc+0x22>
	{
		return;
	}

	longitudeEorW = nmeaSentenceSection[0];
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	781a      	ldrb	r2, [r3, #0]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8009ca0:	e000      	b.n	8009ca4 <_ZN7GpsData18parseLongitudeEorWEPc+0x24>
		return;
 8009ca2:	bf00      	nop
}
 8009ca4:	3708      	adds	r7, #8
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <_ZN7GpsData19parsePositionStatusEPc>:
void GpsData::parsePositionStatus(char* nmeaSentenceSection)
{
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b082      	sub	sp, #8
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
 8009cb2:	6039      	str	r1, [r7, #0]
	if (strlen(nmeaSentenceSection) != 1)
 8009cb4:	6838      	ldr	r0, [r7, #0]
 8009cb6:	f7fc fac3 	bl	8006240 <strlen>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d105      	bne.n	8009ccc <_ZN7GpsData19parsePositionStatusEPc+0x22>
	{
		return;
	}

	positionStatus = nmeaSentenceSection[0];
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	781a      	ldrb	r2, [r3, #0]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8009cca:	e000      	b.n	8009cce <_ZN7GpsData19parsePositionStatusEPc+0x24>
		return;
 8009ccc:	bf00      	nop
}
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <_ZN9GpsParser12getGpsStatusEv>:



GpsStatus GpsParser::getGpsStatus()
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
	if (isReceivingValidData)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d001      	beq.n	8009cea <_ZN9GpsParser12getGpsStatusEv+0x16>
	{
		return GpsStatus::VALID_DATA;
 8009ce6:	2302      	movs	r3, #2
 8009ce8:	e00a      	b.n	8009d00 <_ZN9GpsParser12getGpsStatusEv+0x2c>
	}

	if (!isReceivingData)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8009cf0:	f083 0301 	eor.w	r3, r3, #1
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d001      	beq.n	8009cfe <_ZN9GpsParser12getGpsStatusEv+0x2a>
	{
		return GpsStatus::NO_DATA;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	e000      	b.n	8009d00 <_ZN9GpsParser12getGpsStatusEv+0x2c>
	}

	return GpsStatus::INVALID_DATA;
 8009cfe:	2301      	movs	r3, #1
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	370c      	adds	r7, #12
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <_ZN9GpsParser24addGpsDataChangeListenerEP21GpsDataChangeListener>:
{
	return isReceivingData;
}

void GpsParser::addGpsDataChangeListener(GpsDataChangeListener* gpsDataChangeListener)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
	if (this->numberGpsDataChangeListeners == GpsParser::maxGpsDataChangeListeners) {
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8009d1c:	2b05      	cmp	r3, #5
 8009d1e:	d10a      	bne.n	8009d36 <_ZN9GpsParser24addGpsDataChangeListenerEP21GpsDataChangeListener+0x2a>
		throw "reached max number of gpsDataChangeListeners";
 8009d20:	2004      	movs	r0, #4
 8009d22:	f00e fda9 	bl	8018878 <__cxa_allocate_exception>
 8009d26:	4603      	mov	r3, r0
 8009d28:	4a0c      	ldr	r2, [pc, #48]	; (8009d5c <_ZN9GpsParser24addGpsDataChangeListenerEP21GpsDataChangeListener+0x50>)
 8009d2a:	601a      	str	r2, [r3, #0]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	490c      	ldr	r1, [pc, #48]	; (8009d60 <_ZN9GpsParser24addGpsDataChangeListenerEP21GpsDataChangeListener+0x54>)
 8009d30:	4618      	mov	r0, r3
 8009d32:	f00f fad9 	bl	80192e8 <__cxa_throw>
	}

	this->gpsDataChangeListeners[this->numberGpsDataChangeListeners++] = gpsDataChangeListener;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8009d3c:	1c5a      	adds	r2, r3, #1
 8009d3e:	b2d1      	uxtb	r1, r2
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	f882 1118 	strb.w	r1, [r2, #280]	; 0x118
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	3340      	adds	r3, #64	; 0x40
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4413      	add	r3, r2
 8009d4e:	683a      	ldr	r2, [r7, #0]
 8009d50:	605a      	str	r2, [r3, #4]
}
 8009d52:	bf00      	nop
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	0801e544 	.word	0x0801e544
 8009d60:	08023b60 	.word	0x08023b60

08009d64 <_ZN9GpsParser7addDataEPKc>:

void GpsParser::addData(const char* data)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
	for (size_t i = 0; i < strlen(data); i++)
 8009d6e:	2300      	movs	r3, #0
 8009d70:	60fb      	str	r3, [r7, #12]
 8009d72:	e041      	b.n	8009df8 <_ZN9GpsParser7addDataEPKc+0x94>
	{
		if (data[i] == '$') {
 8009d74:	683a      	ldr	r2, [r7, #0]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	4413      	add	r3, r2
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	2b24      	cmp	r3, #36	; 0x24
 8009d7e:	d112      	bne.n	8009da6 <_ZN9GpsParser7addDataEPKc+0x42>
			isReceivingData = true;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2201      	movs	r2, #1
 8009d84:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

			parseDataNmeaSentence(buffer);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 f843 	bl	8009e18 <_ZN9GpsParser21parseDataNmeaSentenceEPKc>

			bufferSize = 0;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
			memset(buffer, 0, maxBufferSize);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	22ff      	movs	r2, #255	; 0xff
 8009d9e:	2100      	movs	r1, #0
 8009da0:	4618      	mov	r0, r3
 8009da2:	f011 fe4f 	bl	801ba44 <memset>
		}

		buffer[bufferSize] = data[i];
 8009da6:	683a      	ldr	r2, [r7, #0]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	4413      	add	r3, r2
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	f892 20ff 	ldrb.w	r2, [r2, #255]	; 0xff
 8009db2:	7819      	ldrb	r1, [r3, #0]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	5499      	strb	r1, [r3, r2]
		++bufferSize;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	b2da      	uxtb	r2, r3
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff

		//buffer overflow should not happen. If will then clear buffer
		if (bufferSize >= maxBufferSize) {
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8009dce:	2bff      	cmp	r3, #255	; 0xff
 8009dd0:	d10f      	bne.n	8009df2 <_ZN9GpsParser7addDataEPKc+0x8e>
			bufferSize = 0;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
			memset(buffer, 0, maxBufferSize);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	22ff      	movs	r2, #255	; 0xff
 8009dde:	2100      	movs	r1, #0
 8009de0:	4618      	mov	r0, r3
 8009de2:	f011 fe2f 	bl	801ba44 <memset>

			logger->debug("Happened buffer overflow in GpsParser");
 8009de6:	4b0a      	ldr	r3, [pc, #40]	; (8009e10 <_ZN9GpsParser7addDataEPKc+0xac>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	490a      	ldr	r1, [pc, #40]	; (8009e14 <_ZN9GpsParser7addDataEPKc+0xb0>)
 8009dec:	4618      	mov	r0, r3
 8009dee:	f001 fa31 	bl	800b254 <_ZN6Logger5debugEPKc>
	for (size_t i = 0; i < strlen(data); i++)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	3301      	adds	r3, #1
 8009df6:	60fb      	str	r3, [r7, #12]
 8009df8:	6838      	ldr	r0, [r7, #0]
 8009dfa:	f7fc fa21 	bl	8006240 <strlen>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d3b6      	bcc.n	8009d74 <_ZN9GpsParser7addDataEPKc+0x10>
		}
	}
}
 8009e06:	bf00      	nop
 8009e08:	bf00      	nop
 8009e0a:	3710      	adds	r7, #16
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	2000033c 	.word	0x2000033c
 8009e14:	0801e574 	.word	0x0801e574

08009e18 <_ZN9GpsParser21parseDataNmeaSentenceEPKc>:


void GpsParser::parseDataNmeaSentence(const char* nmeaSentence)
{
 8009e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e1c:	b09a      	sub	sp, #104	; 0x68
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
 8009e22:	6039      	str	r1, [r7, #0]
	//TODO add valid sentences percent calculation and log it
	if (!nmeaSentenceChecksumCompare(buffer)) {
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4619      	mov	r1, r3
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 f929 	bl	800a080 <_ZN9GpsParser27nmeaSentenceChecksumCompareEPKc>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	f083 0301 	eor.w	r3, r3, #1
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d007      	beq.n	8009e4a <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0x32>
		logger->debug("NMEA sentence received with invalid checksum", buffer);
 8009e3a:	4b8b      	ldr	r3, [pc, #556]	; (800a068 <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0x250>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	498a      	ldr	r1, [pc, #552]	; (800a06c <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0x254>)
 8009e42:	4618      	mov	r0, r3
 8009e44:	f001 fa1a 	bl	800b27c <_ZN6Logger5debugEPKcS1_>
 8009e48:	e10a      	b.n	800a060 <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0x248>
		return;
	}

	logger->debug("NMEA sentence received", buffer);
 8009e4a:	4b87      	ldr	r3, [pc, #540]	; (800a068 <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0x250>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	4987      	ldr	r1, [pc, #540]	; (800a070 <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0x258>)
 8009e52:	4618      	mov	r0, r3
 8009e54:	f001 fa12 	bl	800b27c <_ZN6Logger5debugEPKcS1_>

	char nmeaSentenceName[7] = {0, 0, 0, 0, 0, 0, 0};
 8009e58:	4a86      	ldr	r2, [pc, #536]	; (800a074 <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0x25c>)
 8009e5a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009e5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e62:	6018      	str	r0, [r3, #0]
 8009e64:	3304      	adds	r3, #4
 8009e66:	8019      	strh	r1, [r3, #0]
 8009e68:	3302      	adds	r3, #2
 8009e6a:	0c0a      	lsrs	r2, r1, #16
 8009e6c:	701a      	strb	r2, [r3, #0]
	strncpy(nmeaSentenceName, nmeaSentence, 6);
 8009e6e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009e72:	2206      	movs	r2, #6
 8009e74:	6839      	ldr	r1, [r7, #0]
 8009e76:	4618      	mov	r0, r3
 8009e78:	f011 fe0b 	bl	801ba92 <strncpy>

	//https://docs.novatel.com/OEM7/Content/Logs/GPRMC.htm
	if (strcmp(nmeaSentenceName, "$GPRMC") == 0)
 8009e7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009e80:	497d      	ldr	r1, [pc, #500]	; (800a078 <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0x260>)
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fc f97c 	bl	8006180 <strcmp>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f040 80e8 	bne.w	800a060 <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0x248>
	{
		GpsData gpsData;
 8009e90:	4b7a      	ldr	r3, [pc, #488]	; (800a07c <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0x264>)
 8009e92:	f107 0408 	add.w	r4, r7, #8
 8009e96:	461d      	mov	r5, r3
 8009e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ea4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009ea8:	e884 0003 	stmia.w	r4, {r0, r1}
		const char* nmeaSentenceCursor = nmeaSentence;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	667b      	str	r3, [r7, #100]	; 0x64
		uint8_t nmeaSentenceSectionNumber = 0;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
				break;
			}

			nmeaSentenceSectionNumber++;
			nmeaSentenceCursor += nmeaSentenceSectionLen + 1;
		}
 8009eb6:	466b      	mov	r3, sp
 8009eb8:	461c      	mov	r4, r3
			char* delimiterPosition = strchr(nmeaSentenceCursor, ',');
 8009eba:	212c      	movs	r1, #44	; 0x2c
 8009ebc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009ebe:	f011 fdc9 	bl	801ba54 <strchr>
 8009ec2:	65b8      	str	r0, [r7, #88]	; 0x58
			const size_t nmeaSentenceSectionLen = delimiterPosition != NULL ? delimiterPosition - nmeaSentenceCursor : strlen(nmeaSentenceCursor);
 8009ec4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d003      	beq.n	8009ed2 <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0xba>
 8009eca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ece:	1ad3      	subs	r3, r2, r3
 8009ed0:	e003      	b.n	8009eda <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0xc2>
 8009ed2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009ed4:	f7fc f9b4 	bl	8006240 <strlen>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	657b      	str	r3, [r7, #84]	; 0x54
			char nmeaSentenceSection[nmeaSentenceSectionLen+1];
 8009edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ede:	3301      	adds	r3, #1
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	653b      	str	r3, [r7, #80]	; 0x50
 8009ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	2200      	movs	r2, #0
 8009eea:	4698      	mov	r8, r3
 8009eec:	4691      	mov	r9, r2
 8009eee:	f04f 0200 	mov.w	r2, #0
 8009ef2:	f04f 0300 	mov.w	r3, #0
 8009ef6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009efa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009efe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f04:	3301      	adds	r3, #1
 8009f06:	2200      	movs	r2, #0
 8009f08:	469a      	mov	sl, r3
 8009f0a:	4693      	mov	fp, r2
 8009f0c:	f04f 0200 	mov.w	r2, #0
 8009f10:	f04f 0300 	mov.w	r3, #0
 8009f14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009f18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009f1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f22:	3301      	adds	r3, #1
 8009f24:	3307      	adds	r3, #7
 8009f26:	08db      	lsrs	r3, r3, #3
 8009f28:	00db      	lsls	r3, r3, #3
 8009f2a:	ebad 0d03 	sub.w	sp, sp, r3
 8009f2e:	466b      	mov	r3, sp
 8009f30:	3300      	adds	r3, #0
 8009f32:	64fb      	str	r3, [r7, #76]	; 0x4c
			nmeaSentenceSection[nmeaSentenceSectionLen] = '\0';
 8009f34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f38:	4413      	add	r3, r2
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	701a      	strb	r2, [r3, #0]
			memcpy(nmeaSentenceSection, nmeaSentenceCursor, nmeaSentenceSectionLen);
 8009f3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f40:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009f42:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009f44:	f011 fea3 	bl	801bc8e <memcpy>
			switch(nmeaSentenceSectionNumber) {
 8009f48:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	2b08      	cmp	r3, #8
 8009f50:	d845      	bhi.n	8009fde <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0x1c6>
 8009f52:	a201      	add	r2, pc, #4	; (adr r2, 8009f58 <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0x140>)
 8009f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f58:	08009f7d 	.word	0x08009f7d
 8009f5c:	08009f8b 	.word	0x08009f8b
 8009f60:	08009f99 	.word	0x08009f99
 8009f64:	08009fa7 	.word	0x08009fa7
 8009f68:	08009fb5 	.word	0x08009fb5
 8009f6c:	08009fc3 	.word	0x08009fc3
 8009f70:	08009fdf 	.word	0x08009fdf
 8009f74:	08009fdf 	.word	0x08009fdf
 8009f78:	08009fd1 	.word	0x08009fd1
					gpsData.parseTimeUtc(nmeaSentenceSection);
 8009f7c:	f107 0308 	add.w	r3, r7, #8
 8009f80:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7ff fd50 	bl	8009a28 <_ZN7GpsData12parseTimeUtcEPc>
				break;
 8009f88:	e029      	b.n	8009fde <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0x1c6>
					gpsData.parsePositionStatus(nmeaSentenceSection);
 8009f8a:	f107 0308 	add.w	r3, r7, #8
 8009f8e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7ff fe8a 	bl	8009caa <_ZN7GpsData19parsePositionStatusEPc>
				break;
 8009f96:	e022      	b.n	8009fde <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0x1c6>
					gpsData.parseLatitude(nmeaSentenceSection);
 8009f98:	f107 0308 	add.w	r3, r7, #8
 8009f9c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7ff fdb4 	bl	8009b0c <_ZN7GpsData13parseLatitudeEPc>
				break;
 8009fa4:	e01b      	b.n	8009fde <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0x1c6>
					gpsData.parseLatitudeNorS(nmeaSentenceSection);
 8009fa6:	f107 0308 	add.w	r3, r7, #8
 8009faa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7ff fdff 	bl	8009bb0 <_ZN7GpsData17parseLatitudeNorSEPc>
				break;
 8009fb2:	e014      	b.n	8009fde <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0x1c6>
					gpsData.parseLongitude(nmeaSentenceSection);
 8009fb4:	f107 0308 	add.w	r3, r7, #8
 8009fb8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7ff fe0e 	bl	8009bdc <_ZN7GpsData14parseLongitudeEPc>
				break;
 8009fc0:	e00d      	b.n	8009fde <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0x1c6>
					gpsData.parseLongitudeEorW(nmeaSentenceSection);
 8009fc2:	f107 0308 	add.w	r3, r7, #8
 8009fc6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7ff fe59 	bl	8009c80 <_ZN7GpsData18parseLongitudeEorWEPc>
				break;
 8009fce:	e006      	b.n	8009fde <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0x1c6>
					gpsData.parseDateUtc(nmeaSentenceSection);
 8009fd0:	f107 0308 	add.w	r3, r7, #8
 8009fd4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7ff fd58 	bl	8009a8c <_ZN7GpsData12parseDateUtcEPc>
				break;
 8009fdc:	bf00      	nop
			if (delimiterPosition == NULL)
 8009fde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d109      	bne.n	8009ff8 <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0x1e0>
				break;
 8009fe4:	46a5      	mov	sp, r4

		if (gpsData.isValid()) {
 8009fe6:	f107 0308 	add.w	r3, r7, #8
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7ff fce0 	bl	80099b0 <_ZN7GpsData7isValidEv>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d10c      	bne.n	800a010 <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0x1f8>
 8009ff6:	e02f      	b.n	800a058 <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0x240>
			nmeaSentenceSectionNumber++;
 8009ff8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			nmeaSentenceCursor += nmeaSentenceSectionLen + 1;
 800a002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a004:	3301      	adds	r3, #1
 800a006:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a008:	4413      	add	r3, r2
 800a00a:	667b      	str	r3, [r7, #100]	; 0x64
 800a00c:	46a5      	mov	sp, r4
		}
 800a00e:	e752      	b.n	8009eb6 <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0x9e>
			isReceivingValidData = true;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101

			for (int i = 0; i < this->numberGpsDataChangeListeners; i++) {
 800a018:	2300      	movs	r3, #0
 800a01a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a01c:	e014      	b.n	800a048 <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0x230>
				this->gpsDataChangeListeners[i]->onGpsDataChange(gpsData);
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a022:	3340      	adds	r3, #64	; 0x40
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	4413      	add	r3, r2
 800a028:	6858      	ldr	r0, [r3, #4]
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a02e:	3340      	adds	r3, #64	; 0x40
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	4413      	add	r3, r2
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f107 0208 	add.w	r2, r7, #8
 800a03e:	4611      	mov	r1, r2
 800a040:	4798      	blx	r3
			for (int i = 0; i < this->numberGpsDataChangeListeners; i++) {
 800a042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a044:	3301      	adds	r3, #1
 800a046:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a04e:	461a      	mov	r2, r3
 800a050:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a052:	4293      	cmp	r3, r2
 800a054:	dbe3      	blt.n	800a01e <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0x206>
 800a056:	e003      	b.n	800a060 <_ZN9GpsParser21parseDataNmeaSentenceEPKc+0x248>
			}
		}
		else
		{
			isReceivingValidData = false;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
		}
	}
}
 800a060:	3768      	adds	r7, #104	; 0x68
 800a062:	46bd      	mov	sp, r7
 800a064:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a068:	2000033c 	.word	0x2000033c
 800a06c:	0801e59c 	.word	0x0801e59c
 800a070:	0801e5cc 	.word	0x0801e5cc
 800a074:	0801e5ec 	.word	0x0801e5ec
 800a078:	0801e5e4 	.word	0x0801e5e4
 800a07c:	0801e5f8 	.word	0x0801e5f8

0800a080 <_ZN9GpsParser27nmeaSentenceChecksumCompareEPKc>:

bool GpsParser::nmeaSentenceChecksumCompare(const char* nmeaSentence)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
	uint8_t nmeaSentenceLen = strlen(nmeaSentence);
 800a08a:	6838      	ldr	r0, [r7, #0]
 800a08c:	f7fc f8d8 	bl	8006240 <strlen>
 800a090:	4603      	mov	r3, r0
 800a092:	737b      	strb	r3, [r7, #13]
	uint8_t calculatedChecksum = 0;
 800a094:	2300      	movs	r3, #0
 800a096:	73fb      	strb	r3, [r7, #15]

	if (nmeaSentenceLen < 10)
 800a098:	7b7b      	ldrb	r3, [r7, #13]
 800a09a:	2b09      	cmp	r3, #9
 800a09c:	d801      	bhi.n	800a0a2 <_ZN9GpsParser27nmeaSentenceChecksumCompareEPKc+0x22>
	{
		return false;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	e034      	b.n	800a10c <_ZN9GpsParser27nmeaSentenceChecksumCompareEPKc+0x8c>
	}

	for(uint8_t i = 1; i < nmeaSentenceLen-5; ++i) //Loop from 1 to nmeaSentenceLen-5 because the checksum is calculated between $ and *
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	73bb      	strb	r3, [r7, #14]
 800a0a6:	e009      	b.n	800a0bc <_ZN9GpsParser27nmeaSentenceChecksumCompareEPKc+0x3c>
	{
		calculatedChecksum = calculatedChecksum^nmeaSentence[i];
 800a0a8:	7bbb      	ldrb	r3, [r7, #14]
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	781a      	ldrb	r2, [r3, #0]
 800a0b0:	7bfb      	ldrb	r3, [r7, #15]
 800a0b2:	4053      	eors	r3, r2
 800a0b4:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 1; i < nmeaSentenceLen-5; ++i) //Loop from 1 to nmeaSentenceLen-5 because the checksum is calculated between $ and *
 800a0b6:	7bbb      	ldrb	r3, [r7, #14]
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	73bb      	strb	r3, [r7, #14]
 800a0bc:	7bba      	ldrb	r2, [r7, #14]
 800a0be:	7b7b      	ldrb	r3, [r7, #13]
 800a0c0:	3b05      	subs	r3, #5
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	dbf0      	blt.n	800a0a8 <_ZN9GpsParser27nmeaSentenceChecksumCompareEPKc+0x28>
	}

	char receivedChecksumStr[3] = {nmeaSentence[nmeaSentenceLen-4], nmeaSentence[nmeaSentenceLen-3], '\0'};
 800a0c6:	f107 0308 	add.w	r3, r7, #8
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	460a      	mov	r2, r1
 800a0ce:	801a      	strh	r2, [r3, #0]
 800a0d0:	460a      	mov	r2, r1
 800a0d2:	709a      	strb	r2, [r3, #2]
 800a0d4:	7b7b      	ldrb	r3, [r7, #13]
 800a0d6:	3b04      	subs	r3, #4
 800a0d8:	683a      	ldr	r2, [r7, #0]
 800a0da:	4413      	add	r3, r2
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	723b      	strb	r3, [r7, #8]
 800a0e0:	7b7b      	ldrb	r3, [r7, #13]
 800a0e2:	3b03      	subs	r3, #3
 800a0e4:	683a      	ldr	r2, [r7, #0]
 800a0e6:	4413      	add	r3, r2
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	727b      	strb	r3, [r7, #9]
	uint8_t receivedChecksum = (uint8_t)strtol(receivedChecksumStr, NULL, 16);
 800a0ec:	f107 0308 	add.w	r3, r7, #8
 800a0f0:	2210      	movs	r2, #16
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f010 fce9 	bl	801aacc <strtol>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	733b      	strb	r3, [r7, #12]

	return calculatedChecksum == receivedChecksum;
 800a0fe:	7bfa      	ldrb	r2, [r7, #15]
 800a100:	7b3b      	ldrb	r3, [r7, #12]
 800a102:	429a      	cmp	r2, r3
 800a104:	bf0c      	ite	eq
 800a106:	2301      	moveq	r3, #1
 800a108:	2300      	movne	r3, #0
 800a10a:	b2db      	uxtb	r3, r3
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <_ZN9GpsRecordC1EPKc>:
#include "gps_record.h"
#include <string.h>
#include <stdio.h>
#include <functional>

GpsRecord::GpsRecord(const char* recordName)
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a124:	2200      	movs	r2, #0
 800a126:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a130:	2200      	movs	r2, #0
 800a132:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
{
	if (strlen(recordName) > MAX_GPS_RECORD_NAME_LEN)
 800a136:	6838      	ldr	r0, [r7, #0]
 800a138:	f7fc f882 	bl	8006240 <strlen>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b14      	cmp	r3, #20
 800a140:	d90a      	bls.n	800a158 <_ZN9GpsRecordC1EPKc+0x44>
	{
		throw "Too long recordName";
 800a142:	2004      	movs	r0, #4
 800a144:	f00e fb98 	bl	8018878 <__cxa_allocate_exception>
 800a148:	4603      	mov	r3, r0
 800a14a:	4a17      	ldr	r2, [pc, #92]	; (800a1a8 <_ZN9GpsRecordC1EPKc+0x94>)
 800a14c:	601a      	str	r2, [r3, #0]
 800a14e:	2200      	movs	r2, #0
 800a150:	4916      	ldr	r1, [pc, #88]	; (800a1ac <_ZN9GpsRecordC1EPKc+0x98>)
 800a152:	4618      	mov	r0, r3
 800a154:	f00f f8c8 	bl	80192e8 <__cxa_throw>
	}

	strcpy(this->recordName, recordName);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	331f      	adds	r3, #31
 800a15c:	6839      	ldr	r1, [r7, #0]
 800a15e:	4618      	mov	r0, r3
 800a160:	f011 fd8d 	bl	801bc7e <strcpy>
	sprintf(this->fileName, "rec.%s.csv", recordName);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	683a      	ldr	r2, [r7, #0]
 800a168:	4911      	ldr	r1, [pc, #68]	; (800a1b0 <_ZN9GpsRecordC1EPKc+0x9c>)
 800a16a:	4618      	mov	r0, r3
 800a16c:	f011 fb62 	bl	801b834 <siprintf>

	FRESULT res = f_open(&this->file, this->fileName, FA_OPEN_APPEND | FA_WRITE);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	3334      	adds	r3, #52	; 0x34
 800a174:	6879      	ldr	r1, [r7, #4]
 800a176:	2232      	movs	r2, #50	; 0x32
 800a178:	4618      	mov	r0, r3
 800a17a:	f00c fd93 	bl	8016ca4 <f_open>
 800a17e:	4603      	mov	r3, r0
 800a180:	73fb      	strb	r3, [r7, #15]
	if(res != FR_OK)
 800a182:	7bfb      	ldrb	r3, [r7, #15]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00a      	beq.n	800a19e <_ZN9GpsRecordC1EPKc+0x8a>
	{
		throw "Cannot open gps record file";
 800a188:	2004      	movs	r0, #4
 800a18a:	f00e fb75 	bl	8018878 <__cxa_allocate_exception>
 800a18e:	4603      	mov	r3, r0
 800a190:	4a08      	ldr	r2, [pc, #32]	; (800a1b4 <_ZN9GpsRecordC1EPKc+0xa0>)
 800a192:	601a      	str	r2, [r3, #0]
 800a194:	2200      	movs	r2, #0
 800a196:	4905      	ldr	r1, [pc, #20]	; (800a1ac <_ZN9GpsRecordC1EPKc+0x98>)
 800a198:	4618      	mov	r0, r3
 800a19a:	f00f f8a5 	bl	80192e8 <__cxa_throw>
	}
}
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3710      	adds	r7, #16
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	0801e630 	.word	0x0801e630
 800a1ac:	08023b60 	.word	0x08023b60
 800a1b0:	0801e644 	.word	0x0801e644
 800a1b4:	0801e650 	.word	0x0801e650

0800a1b8 <_ZN9GpsRecordD1Ev>:

GpsRecord::~GpsRecord()
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
{
	if (isRemoved)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1c6:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d103      	bne.n	800a1d6 <_ZN9GpsRecordD1Ev+0x1e>
	{
		return;
	}

	closeFile();
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 f934 	bl	800a43c <_ZN9GpsRecord9closeFileEv>
GpsRecord::~GpsRecord()
 800a1d4:	e000      	b.n	800a1d8 <_ZN9GpsRecordD1Ev+0x20>
}
 800a1d6:	bf00      	nop
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3708      	adds	r7, #8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
	...

0800a1e4 <_ZN9GpsRecord5writeER7GpsData>:

void GpsRecord::write(GpsData &gpsData)
{
 800a1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1e6:	b08f      	sub	sp, #60	; 0x3c
 800a1e8:	af08      	add	r7, sp, #32
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
	if (isRemoved)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1f4:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00a      	beq.n	800a212 <_ZN9GpsRecord5writeER7GpsData+0x2e>
	{
		throw "record is removed";
 800a1fc:	2004      	movs	r0, #4
 800a1fe:	f00e fb3b 	bl	8018878 <__cxa_allocate_exception>
 800a202:	4603      	mov	r3, r0
 800a204:	4a32      	ldr	r2, [pc, #200]	; (800a2d0 <_ZN9GpsRecord5writeER7GpsData+0xec>)
 800a206:	601a      	str	r2, [r3, #0]
 800a208:	2200      	movs	r2, #0
 800a20a:	4932      	ldr	r1, [pc, #200]	; (800a2d4 <_ZN9GpsRecord5writeER7GpsData+0xf0>)
 800a20c:	4618      	mov	r0, r3
 800a20e:	f00f f86b 	bl	80192e8 <__cxa_throw>
	}

	uint32_t bytesWritten = f_printf(
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f103 0534 	add.w	r5, r3, #52	; 0x34
		&file,
		"%s,%s,%f,%c,%f,%c\n",
		gpsData.dateUtc,
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	f103 0609 	add.w	r6, r3, #9
		gpsData.timeUtc,
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	607b      	str	r3, [r7, #4]
	uint32_t bytesWritten = f_printf(
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
		gpsData.latitude,
		gpsData.latitudeNorS,
 800a228:	68b9      	ldr	r1, [r7, #8]
 800a22a:	f891 1020 	ldrb.w	r1, [r1, #32]
	uint32_t bytesWritten = f_printf(
 800a22e:	6039      	str	r1, [r7, #0]
 800a230:	68b9      	ldr	r1, [r7, #8]
 800a232:	e9d1 010a 	ldrd	r0, r1, [r1, #40]	; 0x28
		gpsData.longitude,
		gpsData.longitudeEorW
 800a236:	68bc      	ldr	r4, [r7, #8]
 800a238:	f894 4030 	ldrb.w	r4, [r4, #48]	; 0x30
	uint32_t bytesWritten = f_printf(
 800a23c:	9406      	str	r4, [sp, #24]
 800a23e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a242:	6839      	ldr	r1, [r7, #0]
 800a244:	9102      	str	r1, [sp, #8]
 800a246:	e9cd 2300 	strd	r2, r3, [sp]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4632      	mov	r2, r6
 800a24e:	4922      	ldr	r1, [pc, #136]	; (800a2d8 <_ZN9GpsRecord5writeER7GpsData+0xf4>)
 800a250:	4628      	mov	r0, r5
 800a252:	f00d ff5f 	bl	8018114 <f_printf>
 800a256:	4603      	mov	r3, r0
	);
 800a258:	617b      	str	r3, [r7, #20]
	if(bytesWritten < 0)
	{
		throw "Cannot write data to gps record file";
	}

	if(++writeGpsDataCounter % 10 == 0)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a260:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800a264:	3301      	adds	r3, #1
 800a266:	b2da      	uxtb	r2, r3
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a26e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a278:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 800a27c:	4b17      	ldr	r3, [pc, #92]	; (800a2dc <_ZN9GpsRecord5writeER7GpsData+0xf8>)
 800a27e:	fba3 1302 	umull	r1, r3, r3, r2
 800a282:	08d9      	lsrs	r1, r3, #3
 800a284:	460b      	mov	r3, r1
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	440b      	add	r3, r1
 800a28a:	005b      	lsls	r3, r3, #1
 800a28c:	1ad3      	subs	r3, r2, r3
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	2b00      	cmp	r3, #0
 800a292:	bf0c      	ite	eq
 800a294:	2301      	moveq	r3, #1
 800a296:	2300      	movne	r3, #0
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d014      	beq.n	800a2c8 <_ZN9GpsRecord5writeER7GpsData+0xe4>
	{
		FRESULT res = f_sync(&file);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	3334      	adds	r3, #52	; 0x34
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f00d f9bd 	bl	8017622 <f_sync>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	74fb      	strb	r3, [r7, #19]
		if(res != FR_OK)
 800a2ac:	7cfb      	ldrb	r3, [r7, #19]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00a      	beq.n	800a2c8 <_ZN9GpsRecord5writeER7GpsData+0xe4>
		{
			throw "Cannot sync gps record file";
 800a2b2:	2004      	movs	r0, #4
 800a2b4:	f00e fae0 	bl	8018878 <__cxa_allocate_exception>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	4a09      	ldr	r2, [pc, #36]	; (800a2e0 <_ZN9GpsRecord5writeER7GpsData+0xfc>)
 800a2bc:	601a      	str	r2, [r3, #0]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	4904      	ldr	r1, [pc, #16]	; (800a2d4 <_ZN9GpsRecord5writeER7GpsData+0xf0>)
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f00f f810 	bl	80192e8 <__cxa_throw>
		}
	}
}
 800a2c8:	bf00      	nop
 800a2ca:	371c      	adds	r7, #28
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2d0:	0801e66c 	.word	0x0801e66c
 800a2d4:	08023b60 	.word	0x08023b60
 800a2d8:	0801e680 	.word	0x0801e680
 800a2dc:	cccccccd 	.word	0xcccccccd
 800a2e0:	0801e694 	.word	0x0801e694

0800a2e4 <_ZN9GpsRecord4readEPcmm>:

uint32_t GpsRecord::read(char *data, uint32_t dataSize, uint32_t offset)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b086      	sub	sp, #24
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	607a      	str	r2, [r7, #4]
 800a2f0:	603b      	str	r3, [r7, #0]
	if (isRemoved)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2f8:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d00a      	beq.n	800a316 <_ZN9GpsRecord4readEPcmm+0x32>
	{
		throw "record is removed";
 800a300:	2004      	movs	r0, #4
 800a302:	f00e fab9 	bl	8018878 <__cxa_allocate_exception>
 800a306:	4603      	mov	r3, r0
 800a308:	4a1d      	ldr	r2, [pc, #116]	; (800a380 <_ZN9GpsRecord4readEPcmm+0x9c>)
 800a30a:	601a      	str	r2, [r3, #0]
 800a30c:	2200      	movs	r2, #0
 800a30e:	491d      	ldr	r1, [pc, #116]	; (800a384 <_ZN9GpsRecord4readEPcmm+0xa0>)
 800a310:	4618      	mov	r0, r3
 800a312:	f00e ffe9 	bl	80192e8 <__cxa_throw>
	}

	FRESULT res = f_lseek(&file, offset);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	3334      	adds	r3, #52	; 0x34
 800a31a:	6839      	ldr	r1, [r7, #0]
 800a31c:	4618      	mov	r0, r3
 800a31e:	f00d fa28 	bl	8017772 <f_lseek>
 800a322:	4603      	mov	r3, r0
 800a324:	75fb      	strb	r3, [r7, #23]
	if(res != FR_OK)
 800a326:	7dfb      	ldrb	r3, [r7, #23]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d00a      	beq.n	800a342 <_ZN9GpsRecord4readEPcmm+0x5e>
	{
		throw "Cannot move gps record file read/write pointer";
 800a32c:	2004      	movs	r0, #4
 800a32e:	f00e faa3 	bl	8018878 <__cxa_allocate_exception>
 800a332:	4603      	mov	r3, r0
 800a334:	4a14      	ldr	r2, [pc, #80]	; (800a388 <_ZN9GpsRecord4readEPcmm+0xa4>)
 800a336:	601a      	str	r2, [r3, #0]
 800a338:	2200      	movs	r2, #0
 800a33a:	4912      	ldr	r1, [pc, #72]	; (800a384 <_ZN9GpsRecord4readEPcmm+0xa0>)
 800a33c:	4618      	mov	r0, r3
 800a33e:	f00e ffd3 	bl	80192e8 <__cxa_throw>
	}

	uint32_t readDataSize;
	res = f_read(&file, data, dataSize, (UINT*) &readDataSize);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800a348:	f107 0310 	add.w	r3, r7, #16
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	68b9      	ldr	r1, [r7, #8]
 800a350:	f00c fe74 	bl	801703c <f_read>
 800a354:	4603      	mov	r3, r0
 800a356:	75fb      	strb	r3, [r7, #23]
	if(res != FR_OK)
 800a358:	7dfb      	ldrb	r3, [r7, #23]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d00a      	beq.n	800a374 <_ZN9GpsRecord4readEPcmm+0x90>
	{
		throw "Cannot read gps record file";
 800a35e:	2004      	movs	r0, #4
 800a360:	f00e fa8a 	bl	8018878 <__cxa_allocate_exception>
 800a364:	4603      	mov	r3, r0
 800a366:	4a09      	ldr	r2, [pc, #36]	; (800a38c <_ZN9GpsRecord4readEPcmm+0xa8>)
 800a368:	601a      	str	r2, [r3, #0]
 800a36a:	2200      	movs	r2, #0
 800a36c:	4905      	ldr	r1, [pc, #20]	; (800a384 <_ZN9GpsRecord4readEPcmm+0xa0>)
 800a36e:	4618      	mov	r0, r3
 800a370:	f00e ffba 	bl	80192e8 <__cxa_throw>
	}

	return readDataSize;
 800a374:	693b      	ldr	r3, [r7, #16]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3718      	adds	r7, #24
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	0801e66c 	.word	0x0801e66c
 800a384:	08023b60 	.word	0x08023b60
 800a388:	0801e6b0 	.word	0x0801e6b0
 800a38c:	0801e6e0 	.word	0x0801e6e0

0800a390 <_ZN9GpsRecord6removeEv>:

void GpsRecord::remove()
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b08c      	sub	sp, #48	; 0x30
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
	if (isRemoved)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a39e:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00a      	beq.n	800a3bc <_ZN9GpsRecord6removeEv+0x2c>
	{
		throw "record is removed";
 800a3a6:	2004      	movs	r0, #4
 800a3a8:	f00e fa66 	bl	8018878 <__cxa_allocate_exception>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	4a19      	ldr	r2, [pc, #100]	; (800a414 <_ZN9GpsRecord6removeEv+0x84>)
 800a3b0:	601a      	str	r2, [r3, #0]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	4918      	ldr	r1, [pc, #96]	; (800a418 <_ZN9GpsRecord6removeEv+0x88>)
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f00e ff96 	bl	80192e8 <__cxa_throw>
	}

	closeFile();
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 f83d 	bl	800a43c <_ZN9GpsRecord9closeFileEv>

	char filenameToDelete[MAX_FILE_NAME_LEN+5];
	sprintf(filenameToDelete, "/%s", fileName);
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	f107 030c 	add.w	r3, r7, #12
 800a3c8:	4914      	ldr	r1, [pc, #80]	; (800a41c <_ZN9GpsRecord6removeEv+0x8c>)
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f011 fa32 	bl	801b834 <siprintf>

	FRESULT res = f_unlink(filenameToDelete);
 800a3d0:	f107 030c 	add.w	r3, r7, #12
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f00d fd7b 	bl	8017ed0 <f_unlink>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(res != FR_OK)
 800a3e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00a      	beq.n	800a3fe <_ZN9GpsRecord6removeEv+0x6e>
	{
		throw "Cannot delete record file";
 800a3e8:	2004      	movs	r0, #4
 800a3ea:	f00e fa45 	bl	8018878 <__cxa_allocate_exception>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	4a0b      	ldr	r2, [pc, #44]	; (800a420 <_ZN9GpsRecord6removeEv+0x90>)
 800a3f2:	601a      	str	r2, [r3, #0]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	4908      	ldr	r1, [pc, #32]	; (800a418 <_ZN9GpsRecord6removeEv+0x88>)
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f00e ff75 	bl	80192e8 <__cxa_throw>
	}

	isRemoved = true;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a404:	2201      	movs	r2, #1
 800a406:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 800a40a:	bf00      	nop
 800a40c:	3730      	adds	r7, #48	; 0x30
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	0801e66c 	.word	0x0801e66c
 800a418:	08023b60 	.word	0x08023b60
 800a41c:	0801e6fc 	.word	0x0801e6fc
 800a420:	0801e700 	.word	0x0801e700

0800a424 <_ZN9GpsRecord4sizeEv>:

uint32_t GpsRecord::size()
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
	return f_size(&file);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a430:	4618      	mov	r0, r3
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <_ZN9GpsRecord9closeFileEv>:

void GpsRecord::closeFile()
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
	FRESULT res = f_close(&file);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	3334      	adds	r3, #52	; 0x34
 800a448:	4618      	mov	r0, r3
 800a44a:	f00d f968 	bl	801771e <f_close>
 800a44e:	4603      	mov	r3, r0
 800a450:	73fb      	strb	r3, [r7, #15]
	if(res != FR_OK)
 800a452:	7bfb      	ldrb	r3, [r7, #15]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d00a      	beq.n	800a46e <_ZN9GpsRecord9closeFileEv+0x32>
	{
		throw "Cannot close gps record file";
 800a458:	2004      	movs	r0, #4
 800a45a:	f00e fa0d 	bl	8018878 <__cxa_allocate_exception>
 800a45e:	4603      	mov	r3, r0
 800a460:	4a05      	ldr	r2, [pc, #20]	; (800a478 <_ZN9GpsRecord9closeFileEv+0x3c>)
 800a462:	601a      	str	r2, [r3, #0]
 800a464:	2200      	movs	r2, #0
 800a466:	4905      	ldr	r1, [pc, #20]	; (800a47c <_ZN9GpsRecord9closeFileEv+0x40>)
 800a468:	4618      	mov	r0, r3
 800a46a:	f00e ff3d 	bl	80192e8 <__cxa_throw>
	}
}
 800a46e:	bf00      	nop
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	0801e71c 	.word	0x0801e71c
 800a47c:	08023b60 	.word	0x08023b60

0800a480 <_ZN9GpsRecord16findRecordToSyncEPc>:


//find the first record
bool GpsRecord::findRecordToSync(char* recordName)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b090      	sub	sp, #64	; 0x40
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dir;
	static FILINFO fileinfo;
	bool result = false;
 800a488:	2300      	movs	r3, #0
 800a48a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	res = f_opendir(&dir, "/"); /* Open the directory */
 800a48e:	f107 0308 	add.w	r3, r7, #8
 800a492:	493e      	ldr	r1, [pc, #248]	; (800a58c <_ZN9GpsRecord16findRecordToSyncEPc+0x10c>)
 800a494:	4618      	mov	r0, r3
 800a496:	f00d fb90 	bl	8017bba <f_opendir>
 800a49a:	4603      	mov	r3, r0
 800a49c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (res != FR_OK) {
 800a4a0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d002      	beq.n	800a4ae <_ZN9GpsRecord16findRecordToSyncEPc+0x2e>
		return result;
 800a4a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a4ac:	e069      	b.n	800a582 <_ZN9GpsRecord16findRecordToSyncEPc+0x102>
	}

	for (;;) {
		res = f_readdir(&dir, &fileinfo); /* Read a directory item */
 800a4ae:	f107 0308 	add.w	r3, r7, #8
 800a4b2:	4937      	ldr	r1, [pc, #220]	; (800a590 <_ZN9GpsRecord16findRecordToSyncEPc+0x110>)
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f00d fc19 	bl	8017cec <f_readdir>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		if (res != FR_OK || fileinfo.fname[0] == 0) /* Break on error or end of dir */
 800a4c0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d155      	bne.n	800a574 <_ZN9GpsRecord16findRecordToSyncEPc+0xf4>
 800a4c8:	4b31      	ldr	r3, [pc, #196]	; (800a590 <_ZN9GpsRecord16findRecordToSyncEPc+0x110>)
 800a4ca:	7d9b      	ldrb	r3, [r3, #22]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d051      	beq.n	800a574 <_ZN9GpsRecord16findRecordToSyncEPc+0xf4>
		{
			break;
		}

		if (!(fileinfo.fattrib & AM_DIR)) /* It is file */
 800a4d0:	4b2f      	ldr	r3, [pc, #188]	; (800a590 <_ZN9GpsRecord16findRecordToSyncEPc+0x110>)
 800a4d2:	7a1b      	ldrb	r3, [r3, #8]
 800a4d4:	f003 0310 	and.w	r3, r3, #16
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d1e8      	bne.n	800a4ae <_ZN9GpsRecord16findRecordToSyncEPc+0x2e>
		{
			uint8_t fileNameLength = strlen(fileinfo.fname);
 800a4dc:	482d      	ldr	r0, [pc, #180]	; (800a594 <_ZN9GpsRecord16findRecordToSyncEPc+0x114>)
 800a4de:	f7fb feaf 	bl	8006240 <strlen>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			if (
 800a4e8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a4ec:	2b08      	cmp	r3, #8
 800a4ee:	d9de      	bls.n	800a4ae <_ZN9GpsRecord16findRecordToSyncEPc+0x2e>
				fileNameLength > 8
				&& fileinfo.fname[0] == 'r' && fileinfo.fname[1] == 'e' && fileinfo.fname[2] == 'c' && fileinfo.fname[3] == '.'
 800a4f0:	4b27      	ldr	r3, [pc, #156]	; (800a590 <_ZN9GpsRecord16findRecordToSyncEPc+0x110>)
 800a4f2:	7d9b      	ldrb	r3, [r3, #22]
 800a4f4:	2b72      	cmp	r3, #114	; 0x72
 800a4f6:	d1da      	bne.n	800a4ae <_ZN9GpsRecord16findRecordToSyncEPc+0x2e>
 800a4f8:	4b25      	ldr	r3, [pc, #148]	; (800a590 <_ZN9GpsRecord16findRecordToSyncEPc+0x110>)
 800a4fa:	7ddb      	ldrb	r3, [r3, #23]
 800a4fc:	2b65      	cmp	r3, #101	; 0x65
 800a4fe:	d1d6      	bne.n	800a4ae <_ZN9GpsRecord16findRecordToSyncEPc+0x2e>
 800a500:	4b23      	ldr	r3, [pc, #140]	; (800a590 <_ZN9GpsRecord16findRecordToSyncEPc+0x110>)
 800a502:	7e1b      	ldrb	r3, [r3, #24]
 800a504:	2b63      	cmp	r3, #99	; 0x63
 800a506:	d1d2      	bne.n	800a4ae <_ZN9GpsRecord16findRecordToSyncEPc+0x2e>
 800a508:	4b21      	ldr	r3, [pc, #132]	; (800a590 <_ZN9GpsRecord16findRecordToSyncEPc+0x110>)
 800a50a:	7e5b      	ldrb	r3, [r3, #25]
 800a50c:	2b2e      	cmp	r3, #46	; 0x2e
 800a50e:	d1ce      	bne.n	800a4ae <_ZN9GpsRecord16findRecordToSyncEPc+0x2e>
				&& fileinfo.fname[fileNameLength-4] == '.' && fileinfo.fname[fileNameLength-3] == 'c' && fileinfo.fname[fileNameLength-2] == 's' && fileinfo.fname[fileNameLength-1] == 'v'
 800a510:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a514:	3b04      	subs	r3, #4
 800a516:	4a1e      	ldr	r2, [pc, #120]	; (800a590 <_ZN9GpsRecord16findRecordToSyncEPc+0x110>)
 800a518:	4413      	add	r3, r2
 800a51a:	7d9b      	ldrb	r3, [r3, #22]
 800a51c:	2b2e      	cmp	r3, #46	; 0x2e
 800a51e:	d1c6      	bne.n	800a4ae <_ZN9GpsRecord16findRecordToSyncEPc+0x2e>
 800a520:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a524:	3b03      	subs	r3, #3
 800a526:	4a1a      	ldr	r2, [pc, #104]	; (800a590 <_ZN9GpsRecord16findRecordToSyncEPc+0x110>)
 800a528:	4413      	add	r3, r2
 800a52a:	7d9b      	ldrb	r3, [r3, #22]
 800a52c:	2b63      	cmp	r3, #99	; 0x63
 800a52e:	d1be      	bne.n	800a4ae <_ZN9GpsRecord16findRecordToSyncEPc+0x2e>
 800a530:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a534:	3b02      	subs	r3, #2
 800a536:	4a16      	ldr	r2, [pc, #88]	; (800a590 <_ZN9GpsRecord16findRecordToSyncEPc+0x110>)
 800a538:	4413      	add	r3, r2
 800a53a:	7d9b      	ldrb	r3, [r3, #22]
 800a53c:	2b73      	cmp	r3, #115	; 0x73
 800a53e:	d1b6      	bne.n	800a4ae <_ZN9GpsRecord16findRecordToSyncEPc+0x2e>
 800a540:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a544:	3b01      	subs	r3, #1
 800a546:	4a12      	ldr	r2, [pc, #72]	; (800a590 <_ZN9GpsRecord16findRecordToSyncEPc+0x110>)
 800a548:	4413      	add	r3, r2
 800a54a:	7d9b      	ldrb	r3, [r3, #22]
 800a54c:	2b76      	cmp	r3, #118	; 0x76
 800a54e:	d1ae      	bne.n	800a4ae <_ZN9GpsRecord16findRecordToSyncEPc+0x2e>
			)
			{
				strncpy(recordName, (fileinfo.fname)+4, fileNameLength - 8);
 800a550:	4911      	ldr	r1, [pc, #68]	; (800a598 <_ZN9GpsRecord16findRecordToSyncEPc+0x118>)
 800a552:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a556:	3b08      	subs	r3, #8
 800a558:	461a      	mov	r2, r3
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f011 fa99 	bl	801ba92 <strncpy>
				recordName[fileNameLength - 8] = '\0';
 800a560:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a564:	3b08      	subs	r3, #8
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	4413      	add	r3, r2
 800a56a:	2200      	movs	r2, #0
 800a56c:	701a      	strb	r2, [r3, #0]
				result = true;
 800a56e:	2301      	movs	r3, #1
 800a570:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				break;
			}
		}
	}
	f_closedir(&dir);
 800a574:	f107 0308 	add.w	r3, r7, #8
 800a578:	4618      	mov	r0, r3
 800a57a:	f00d fb91 	bl	8017ca0 <f_closedir>

	return result;
 800a57e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a582:	4618      	mov	r0, r3
 800a584:	3740      	adds	r7, #64	; 0x40
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	0801e73c 	.word	0x0801e73c
 800a590:	20000340 	.word	0x20000340
 800a594:	20000356 	.word	0x20000356
 800a598:	2000035a 	.word	0x2000035a

0800a59c <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	689b      	ldr	r3, [r3, #8]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	bf0c      	ite	eq
 800a5ac:	2301      	moveq	r3, #1
 800a5ae:	2300      	movne	r3, #0
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	370c      	adds	r7, #12
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr
	...

0800a5c0 <_ZN21GpsRecordSynchronizerC1EPKcSt8functionIFvS1_mmEE>:
#include "logger.h"
#include "gps_record.h"
#include <string.h>
#include <stdio.h>

GpsRecordSynchronizer::GpsRecordSynchronizer(
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b086      	sub	sp, #24
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	607a      	str	r2, [r7, #4]
	const char* recordName,
	std::function<void(const char* packet, uint32_t totalBytes, uint32_t progressBytes)> sendPacketToRemoteFunc
)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	6653      	str	r3, [r2, #100]	; 0x64
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5de:	461a      	mov	r2, r3
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	6693      	str	r3, [r2, #104]	; 0x68
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 800a602:	331c      	adds	r3, #28
 800a604:	4618      	mov	r0, r3
 800a606:	f000 fc5d 	bl	800aec4 <_ZNSt8functionIFvPKcmmEEC1Ev>
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a610:	2200      	movs	r2, #0
 800a612:	f883 254c 	strb.w	r2, [r3, #1356]	; 0x54c
{
	if (strlen(recordName) > MAX_GPS_RECORD_NAME_LEN)
 800a616:	68b8      	ldr	r0, [r7, #8]
 800a618:	f7fb fe12 	bl	8006240 <strlen>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b14      	cmp	r3, #20
 800a620:	d90a      	bls.n	800a638 <_ZN21GpsRecordSynchronizerC1EPKcSt8functionIFvS1_mmEE+0x78>
	{
		throw "too long gps record name";
 800a622:	2004      	movs	r0, #4
 800a624:	f00e f928 	bl	8018878 <__cxa_allocate_exception>
 800a628:	4603      	mov	r3, r0
 800a62a:	4a23      	ldr	r2, [pc, #140]	; (800a6b8 <_ZN21GpsRecordSynchronizerC1EPKcSt8functionIFvS1_mmEE+0xf8>)
 800a62c:	601a      	str	r2, [r3, #0]
 800a62e:	2200      	movs	r2, #0
 800a630:	4922      	ldr	r1, [pc, #136]	; (800a6bc <_ZN21GpsRecordSynchronizerC1EPKcSt8functionIFvS1_mmEE+0xfc>)
 800a632:	4618      	mov	r0, r3
 800a634:	f00e fe58 	bl	80192e8 <__cxa_throw>
	}

	strcpy(this->recordName, recordName);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	68b9      	ldr	r1, [r7, #8]
 800a63c:	4618      	mov	r0, r3
 800a63e:	f011 fb1e 	bl	801bc7e <strcpy>
	this->sendPacketToRemoteFunc = sendPacketToRemoteFunc;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 800a648:	331c      	adds	r3, #28
 800a64a:	6879      	ldr	r1, [r7, #4]
 800a64c:	4618      	mov	r0, r3
 800a64e:	f000 fc4f 	bl	800aef0 <_ZNSt8functionIFvPKcmmEEaSERKS3_>

	sprintf(recordSyncLogFileName, "rec.%s.sync", recordName);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	3315      	adds	r3, #21
 800a656:	68ba      	ldr	r2, [r7, #8]
 800a658:	4919      	ldr	r1, [pc, #100]	; (800a6c0 <_ZN21GpsRecordSynchronizerC1EPKcSt8functionIFvS1_mmEE+0x100>)
 800a65a:	4618      	mov	r0, r3
 800a65c:	f011 f8ea 	bl	801b834 <siprintf>

	FRESULT res = f_open(&recordSyncLogFile, recordSyncLogFileName, FA_OPEN_APPEND | FA_WRITE | FA_READ);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	3315      	adds	r3, #21
 800a66a:	2233      	movs	r2, #51	; 0x33
 800a66c:	4619      	mov	r1, r3
 800a66e:	f00c fb19 	bl	8016ca4 <f_open>
 800a672:	4603      	mov	r3, r0
 800a674:	75fb      	strb	r3, [r7, #23]
	if(res != FR_OK)
 800a676:	7dfb      	ldrb	r3, [r7, #23]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d00a      	beq.n	800a692 <_ZN21GpsRecordSynchronizerC1EPKcSt8functionIFvS1_mmEE+0xd2>
	{
		throw "Cannot open record sync log file for synchronization";
 800a67c:	2004      	movs	r0, #4
 800a67e:	f00e f8fb 	bl	8018878 <__cxa_allocate_exception>
 800a682:	4603      	mov	r3, r0
 800a684:	4a0f      	ldr	r2, [pc, #60]	; (800a6c4 <_ZN21GpsRecordSynchronizerC1EPKcSt8functionIFvS1_mmEE+0x104>)
 800a686:	601a      	str	r2, [r3, #0]
 800a688:	2200      	movs	r2, #0
 800a68a:	490c      	ldr	r1, [pc, #48]	; (800a6bc <_ZN21GpsRecordSynchronizerC1EPKcSt8functionIFvS1_mmEE+0xfc>)
 800a68c:	4618      	mov	r0, r3
 800a68e:	f00e fe2b 	bl	80192e8 <__cxa_throw>
	}

	readSyncProgressFromSyncLog();
 800a692:	68f8      	ldr	r0, [r7, #12]
 800a694:	f000 fa18 	bl	800aac8 <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv>
}
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	e008      	b.n	800a6ae <_ZN21GpsRecordSynchronizerC1EPKcSt8functionIFvS1_mmEE+0xee>
)
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 800a6a2:	331c      	adds	r3, #28
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7fd fef9 	bl	800849c <_ZNSt8functionIFvPKcmmEED1Ev>
 800a6aa:	f00e f921 	bl	80188f0 <__cxa_end_cleanup>
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3718      	adds	r7, #24
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	0801e740 	.word	0x0801e740
 800a6bc:	08023b60 	.word	0x08023b60
 800a6c0:	0801e75c 	.word	0x0801e75c
 800a6c4:	0801e768 	.word	0x0801e768

0800a6c8 <_ZN21GpsRecordSynchronizerD1Ev>:

GpsRecordSynchronizer::~GpsRecordSynchronizer()
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
{
	closeFile();
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 f9c9 	bl	800aa68 <_ZN21GpsRecordSynchronizer9closeFileEv>
GpsRecordSynchronizer::~GpsRecordSynchronizer()
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 800a6dc:	331c      	adds	r3, #28
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7fd fedc 	bl	800849c <_ZNSt8functionIFvPKcmmEED1Ev>
}
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3708      	adds	r7, #8
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
	...

0800a6f0 <_ZN21GpsRecordSynchronizer10syncRecordEv>:

void GpsRecordSynchronizer::syncRecord()
{
 800a6f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6f4:	f5ad 5d85 	sub.w	sp, sp, #4256	; 0x10a0
 800a6f8:	b085      	sub	sp, #20
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800a700:	f843 0cac 	str.w	r0, [r3, #-172]
	GpsRecord gpsRecord(recordName);
 800a704:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800a708:	f853 2cac 	ldr.w	r2, [r3, #-172]
 800a70c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a710:	4611      	mov	r1, r2
 800a712:	4618      	mov	r0, r3
 800a714:	f7ff fcfe 	bl	800a114 <_ZN9GpsRecordC1EPKc>

	syncTotalBytes = gpsRecord.size();
 800a718:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7ff fe81 	bl	800a424 <_ZN9GpsRecord4sizeEv>
 800a722:	4602      	mov	r2, r0
 800a724:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800a728:	f853 3cac 	ldr.w	r3, [r3, #-172]
 800a72c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a730:	665a      	str	r2, [r3, #100]	; 0x64
				sendRecordPackage(syncBuffer);
			}

			break;
		}
	}
 800a732:	466b      	mov	r3, sp
 800a734:	461e      	mov	r6, r3
		UINT readBufferSize = 1024;
 800a736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a73a:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800a73e:	f102 0208 	add.w	r2, r2, #8
 800a742:	6013      	str	r3, [r2, #0]
		char readBuffer[readBufferSize];
 800a744:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800a748:	f103 0308 	add.w	r3, r3, #8
 800a74c:	6819      	ldr	r1, [r3, #0]
 800a74e:	460b      	mov	r3, r1
 800a750:	3b01      	subs	r3, #1
 800a752:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800a756:	f102 0204 	add.w	r2, r2, #4
 800a75a:	6013      	str	r3, [r2, #0]
 800a75c:	2300      	movs	r3, #0
 800a75e:	460c      	mov	r4, r1
 800a760:	461d      	mov	r5, r3
 800a762:	f04f 0200 	mov.w	r2, #0
 800a766:	f04f 0300 	mov.w	r3, #0
 800a76a:	00eb      	lsls	r3, r5, #3
 800a76c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a770:	00e2      	lsls	r2, r4, #3
 800a772:	2300      	movs	r3, #0
 800a774:	4688      	mov	r8, r1
 800a776:	4699      	mov	r9, r3
 800a778:	f04f 0200 	mov.w	r2, #0
 800a77c:	f04f 0300 	mov.w	r3, #0
 800a780:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a784:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a788:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a78c:	1dcb      	adds	r3, r1, #7
 800a78e:	08db      	lsrs	r3, r3, #3
 800a790:	00db      	lsls	r3, r3, #3
 800a792:	ebad 0d03 	sub.w	sp, sp, r3
 800a796:	466b      	mov	r3, sp
 800a798:	3300      	adds	r3, #0
 800a79a:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800a79e:	6013      	str	r3, [r2, #0]
		UINT readBufferUsedSize = gpsRecord.read(readBuffer, readBufferSize, syncProgressBytes);
 800a7a0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800a7a4:	f853 3cac 	ldr.w	r3, [r3, #-172]
 800a7a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7ae:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800a7b2:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800a7b6:	f102 0208 	add.w	r2, r2, #8
 800a7ba:	6812      	ldr	r2, [r2, #0]
 800a7bc:	f507 5185 	add.w	r1, r7, #4256	; 0x10a0
 800a7c0:	6809      	ldr	r1, [r1, #0]
 800a7c2:	f7ff fd8f 	bl	800a2e4 <_ZN9GpsRecord4readEPcmm>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800a7cc:	f102 021c 	add.w	r2, r2, #28
 800a7d0:	6013      	str	r3, [r2, #0]
		if (readBufferUsedSize == 0)
 800a7d2:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800a7d6:	f103 031c 	add.w	r3, r3, #28
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	f000 80ec 	beq.w	800a9ba <_ZN21GpsRecordSynchronizer10syncRecordEv+0x2ca>
		for (UINT i=0; i<readBufferUsedSize; i++)
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800a7e8:	f102 020c 	add.w	r2, r2, #12
 800a7ec:	6013      	str	r3, [r2, #0]
 800a7ee:	e086      	b.n	800a8fe <_ZN21GpsRecordSynchronizer10syncRecordEv+0x20e>
			syncBuffer[syncBufferUsedSize] = readBuffer[i];
 800a7f0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800a7f4:	f853 3cac 	ldr.w	r3, [r3, #-172]
 800a7f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7fc:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800a800:	4619      	mov	r1, r3
 800a802:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800a80c:	f103 030c 	add.w	r3, r3, #12
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4413      	add	r3, r2
 800a814:	781a      	ldrb	r2, [r3, #0]
 800a816:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800a81a:	f853 3cac 	ldr.w	r3, [r3, #-172]
 800a81e:	440b      	add	r3, r1
 800a820:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800a824:	3310      	adds	r3, #16
 800a826:	701a      	strb	r2, [r3, #0]
			syncBufferUsedSize++;
 800a828:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800a82c:	f853 3cac 	ldr.w	r3, [r3, #-172]
 800a830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a834:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800a838:	3301      	adds	r3, #1
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800a840:	f853 3cac 	ldr.w	r3, [r3, #-172]
 800a844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a848:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
			syncBuffer[syncBufferUsedSize] = '\0'; //to have valid null terminated string
 800a84c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800a850:	f853 3cac 	ldr.w	r3, [r3, #-172]
 800a854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a858:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800a85c:	461a      	mov	r2, r3
 800a85e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800a862:	f853 3cac 	ldr.w	r3, [r3, #-172]
 800a866:	4413      	add	r3, r2
 800a868:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800a86c:	3310      	adds	r3, #16
 800a86e:	2200      	movs	r2, #0
 800a870:	701a      	strb	r2, [r3, #0]
			if (syncBufferUsedSize >= syncBufferFlushThreshold && readBuffer[i] == '\n')
 800a872:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800a876:	f853 3cac 	ldr.w	r3, [r3, #-172]
 800a87a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a87e:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800a882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a886:	d319      	bcc.n	800a8bc <_ZN21GpsRecordSynchronizer10syncRecordEv+0x1cc>
 800a888:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800a892:	f103 030c 	add.w	r3, r3, #12
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4413      	add	r3, r2
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	2b0a      	cmp	r3, #10
 800a89e:	d10d      	bne.n	800a8bc <_ZN21GpsRecordSynchronizer10syncRecordEv+0x1cc>
				sendRecordPackage(syncBuffer);
 800a8a0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800a8a4:	f853 3cac 	ldr.w	r3, [r3, #-172]
 800a8a8:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800a8ac:	3310      	adds	r3, #16
 800a8ae:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	f852 0cac 	ldr.w	r0, [r2, #-172]
 800a8b8:	f000 fa24 	bl	800ad04 <_ZN21GpsRecordSynchronizer17sendRecordPackageEPKc>
			if (syncBufferUsedSize >= syncBufferSize)
 800a8bc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800a8c0:	f853 3cac 	ldr.w	r3, [r3, #-172]
 800a8c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8c8:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800a8cc:	f5b3 6f99 	cmp.w	r3, #1224	; 0x4c8
 800a8d0:	d30a      	bcc.n	800a8e8 <_ZN21GpsRecordSynchronizer10syncRecordEv+0x1f8>
				throw "GpsRecordSynchronizer: syncBuffer overflow";
 800a8d2:	2004      	movs	r0, #4
 800a8d4:	f00d ffd0 	bl	8018878 <__cxa_allocate_exception>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	4a5e      	ldr	r2, [pc, #376]	; (800aa54 <_ZN21GpsRecordSynchronizer10syncRecordEv+0x364>)
 800a8dc:	601a      	str	r2, [r3, #0]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	495d      	ldr	r1, [pc, #372]	; (800aa58 <_ZN21GpsRecordSynchronizer10syncRecordEv+0x368>)
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f00e fd00 	bl	80192e8 <__cxa_throw>
		for (UINT i=0; i<readBufferUsedSize; i++)
 800a8e8:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800a8ec:	f103 030c 	add.w	r3, r3, #12
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800a8f8:	f102 020c 	add.w	r2, r2, #12
 800a8fc:	6013      	str	r3, [r2, #0]
 800a8fe:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800a902:	f103 030c 	add.w	r3, r3, #12
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800a90c:	f103 031c 	add.w	r3, r3, #28
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	429a      	cmp	r2, r3
 800a914:	f4ff af6c 	bcc.w	800a7f0 <_ZN21GpsRecordSynchronizer10syncRecordEv+0x100>
		if (readBufferUsedSize < readBufferSize)
 800a918:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800a91c:	f103 031c 	add.w	r3, r3, #28
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800a926:	f103 0308 	add.w	r3, r3, #8
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d241      	bcs.n	800a9b4 <_ZN21GpsRecordSynchronizer10syncRecordEv+0x2c4>
			if (syncBufferUsedSize > 0 && syncBuffer[syncBufferUsedSize-1] != '\n')
 800a930:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800a934:	f853 3cac 	ldr.w	r3, [r3, #-172]
 800a938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a93c:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800a940:	2b00      	cmp	r3, #0
 800a942:	d01e      	beq.n	800a982 <_ZN21GpsRecordSynchronizer10syncRecordEv+0x292>
 800a944:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800a948:	f853 3cac 	ldr.w	r3, [r3, #-172]
 800a94c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a950:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800a954:	3b01      	subs	r3, #1
 800a956:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800a95a:	f852 2cac 	ldr.w	r2, [r2, #-172]
 800a95e:	4413      	add	r3, r2
 800a960:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800a964:	3310      	adds	r3, #16
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	2b0a      	cmp	r3, #10
 800a96a:	d00a      	beq.n	800a982 <_ZN21GpsRecordSynchronizer10syncRecordEv+0x292>
				throw "End of record file but sync buffer not complete";
 800a96c:	2004      	movs	r0, #4
 800a96e:	f00d ff83 	bl	8018878 <__cxa_allocate_exception>
 800a972:	4603      	mov	r3, r0
 800a974:	4a39      	ldr	r2, [pc, #228]	; (800aa5c <_ZN21GpsRecordSynchronizer10syncRecordEv+0x36c>)
 800a976:	601a      	str	r2, [r3, #0]
 800a978:	2200      	movs	r2, #0
 800a97a:	4937      	ldr	r1, [pc, #220]	; (800aa58 <_ZN21GpsRecordSynchronizer10syncRecordEv+0x368>)
 800a97c:	4618      	mov	r0, r3
 800a97e:	f00e fcb3 	bl	80192e8 <__cxa_throw>
			if (syncBufferUsedSize > 0)
 800a982:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800a986:	f853 3cac 	ldr.w	r3, [r3, #-172]
 800a98a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a98e:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800a992:	2b00      	cmp	r3, #0
 800a994:	d010      	beq.n	800a9b8 <_ZN21GpsRecordSynchronizer10syncRecordEv+0x2c8>
				sendRecordPackage(syncBuffer);
 800a996:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800a99a:	f853 3cac 	ldr.w	r3, [r3, #-172]
 800a99e:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800a9a2:	3310      	adds	r3, #16
 800a9a4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	f852 0cac 	ldr.w	r0, [r2, #-172]
 800a9ae:	f000 f9a9 	bl	800ad04 <_ZN21GpsRecordSynchronizer17sendRecordPackageEPKc>
			break;
 800a9b2:	e001      	b.n	800a9b8 <_ZN21GpsRecordSynchronizer10syncRecordEv+0x2c8>
 800a9b4:	46b5      	mov	sp, r6
	}
 800a9b6:	e6bc      	b.n	800a732 <_ZN21GpsRecordSynchronizer10syncRecordEv+0x42>
			break;
 800a9b8:	bf00      	nop
			break;
 800a9ba:	46b5      	mov	sp, r6

	gpsRecord.remove();
 800a9bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7ff fce5 	bl	800a390 <_ZN9GpsRecord6removeEv>

	closeFile();
 800a9c6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800a9ca:	f853 0cac 	ldr.w	r0, [r3, #-172]
 800a9ce:	f000 f84b 	bl	800aa68 <_ZN21GpsRecordSynchronizer9closeFileEv>

	char filenameToDelete[MAX_FILE_NAME_LEN+5];
	sprintf(filenameToDelete, "/%s", recordSyncLogFileName);
 800a9d2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800a9d6:	f853 3cac 	ldr.w	r3, [r3, #-172]
 800a9da:	f103 0215 	add.w	r2, r3, #21
 800a9de:	f107 0310 	add.w	r3, r7, #16
 800a9e2:	3b04      	subs	r3, #4
 800a9e4:	491e      	ldr	r1, [pc, #120]	; (800aa60 <_ZN21GpsRecordSynchronizer10syncRecordEv+0x370>)
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f010 ff24 	bl	801b834 <siprintf>
	FRESULT res = f_unlink(filenameToDelete);
 800a9ec:	f107 0310 	add.w	r3, r7, #16
 800a9f0:	3b04      	subs	r3, #4
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f00d fa6c 	bl	8017ed0 <f_unlink>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800a9fe:	f102 021b 	add.w	r2, r2, #27
 800aa02:	7013      	strb	r3, [r2, #0]
	if(res != FR_OK)
 800aa04:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800aa08:	f103 031b 	add.w	r3, r3, #27
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00a      	beq.n	800aa28 <_ZN21GpsRecordSynchronizer10syncRecordEv+0x338>
	{
		throw "Cannot delete record sync log file";
 800aa12:	2004      	movs	r0, #4
 800aa14:	f00d ff30 	bl	8018878 <__cxa_allocate_exception>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	4a12      	ldr	r2, [pc, #72]	; (800aa64 <_ZN21GpsRecordSynchronizer10syncRecordEv+0x374>)
 800aa1c:	601a      	str	r2, [r3, #0]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	490d      	ldr	r1, [pc, #52]	; (800aa58 <_ZN21GpsRecordSynchronizer10syncRecordEv+0x368>)
 800aa22:	4618      	mov	r0, r3
 800aa24:	f00e fc60 	bl	80192e8 <__cxa_throw>
	}
}
 800aa28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7ff fbc3 	bl	800a1b8 <_ZN9GpsRecordD1Ev>
 800aa32:	e008      	b.n	800aa46 <_ZN21GpsRecordSynchronizer10syncRecordEv+0x356>
 800aa34:	46b5      	mov	sp, r6
 800aa36:	e7ff      	b.n	800aa38 <_ZN21GpsRecordSynchronizer10syncRecordEv+0x348>
 800aa38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7ff fbbb 	bl	800a1b8 <_ZN9GpsRecordD1Ev>
 800aa42:	f00d ff55 	bl	80188f0 <__cxa_end_cleanup>
 800aa46:	f507 5785 	add.w	r7, r7, #4256	; 0x10a0
 800aa4a:	3714      	adds	r7, #20
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa52:	bf00      	nop
 800aa54:	0801e7a0 	.word	0x0801e7a0
 800aa58:	08023b60 	.word	0x08023b60
 800aa5c:	0801e7cc 	.word	0x0801e7cc
 800aa60:	0801e7fc 	.word	0x0801e7fc
 800aa64:	0801e800 	.word	0x0801e800

0800aa68 <_ZN21GpsRecordSynchronizer9closeFileEv>:

void GpsRecordSynchronizer::closeFile()
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
	if (isFileClosed)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa76:	f893 354c 	ldrb.w	r3, [r3, #1356]	; 0x54c
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d11b      	bne.n	800aab6 <_ZN21GpsRecordSynchronizer9closeFileEv+0x4e>
	{
		return;
	}

	FRESULT res = f_close(&recordSyncLogFile);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	3334      	adds	r3, #52	; 0x34
 800aa82:	4618      	mov	r0, r3
 800aa84:	f00c fe4b 	bl	801771e <f_close>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	73fb      	strb	r3, [r7, #15]
	if(res != FR_OK)
 800aa8c:	7bfb      	ldrb	r3, [r7, #15]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d00a      	beq.n	800aaa8 <_ZN21GpsRecordSynchronizer9closeFileEv+0x40>
	{
		throw "Cannot close recordSyncLogFile";
 800aa92:	2004      	movs	r0, #4
 800aa94:	f00d fef0 	bl	8018878 <__cxa_allocate_exception>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	4a09      	ldr	r2, [pc, #36]	; (800aac0 <_ZN21GpsRecordSynchronizer9closeFileEv+0x58>)
 800aa9c:	601a      	str	r2, [r3, #0]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	4908      	ldr	r1, [pc, #32]	; (800aac4 <_ZN21GpsRecordSynchronizer9closeFileEv+0x5c>)
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f00e fc20 	bl	80192e8 <__cxa_throw>
	}
	isFileClosed = true;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaae:	2201      	movs	r2, #1
 800aab0:	f883 254c 	strb.w	r2, [r3, #1356]	; 0x54c
 800aab4:	e000      	b.n	800aab8 <_ZN21GpsRecordSynchronizer9closeFileEv+0x50>
		return;
 800aab6:	bf00      	nop
}
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	0801e824 	.word	0x0801e824
 800aac4:	08023b60 	.word	0x08023b60

0800aac8 <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv>:

void GpsRecordSynchronizer::readSyncProgressFromSyncLog()
{
 800aac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aacc:	b097      	sub	sp, #92	; 0x5c
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
	res = f_lseek(&recordSyncLogFile, recordSyncLogFileSize);
	if(res != FR_OK)
	{
		throw "Cannot move recordSyncLogFile read/write pointer";
	}
}
 800aad2:	466b      	mov	r3, sp
 800aad4:	461e      	mov	r6, r3
	FSIZE_t recordSyncLogFileSize = f_size(&recordSyncLogFile);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aada:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (recordSyncLogFileSize == 0)
 800aadc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d101      	bne.n	800aae6 <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv+0x1e>
		return;
 800aae2:	46b5      	mov	sp, r6
 800aae4:	e0ff      	b.n	800ace6 <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv+0x21e>
	UINT recordSyncLogFileReadBufferSize = 30;
 800aae6:	231e      	movs	r3, #30
 800aae8:	64bb      	str	r3, [r7, #72]	; 0x48
	char recordSyncLogFileReadBuffer[recordSyncLogFileReadBufferSize+1];
 800aaea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aaec:	1c59      	adds	r1, r3, #1
 800aaee:	460b      	mov	r3, r1
 800aaf0:	3b01      	subs	r3, #1
 800aaf2:	647b      	str	r3, [r7, #68]	; 0x44
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	4688      	mov	r8, r1
 800aaf8:	4699      	mov	r9, r3
 800aafa:	f04f 0200 	mov.w	r2, #0
 800aafe:	f04f 0300 	mov.w	r3, #0
 800ab02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ab06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ab0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ab0e:	2300      	movs	r3, #0
 800ab10:	460c      	mov	r4, r1
 800ab12:	461d      	mov	r5, r3
 800ab14:	f04f 0200 	mov.w	r2, #0
 800ab18:	f04f 0300 	mov.w	r3, #0
 800ab1c:	00eb      	lsls	r3, r5, #3
 800ab1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ab22:	00e2      	lsls	r2, r4, #3
 800ab24:	1dcb      	adds	r3, r1, #7
 800ab26:	08db      	lsrs	r3, r3, #3
 800ab28:	00db      	lsls	r3, r3, #3
 800ab2a:	ebad 0d03 	sub.w	sp, sp, r3
 800ab2e:	466b      	mov	r3, sp
 800ab30:	3300      	adds	r3, #0
 800ab32:	643b      	str	r3, [r7, #64]	; 0x40
	FSIZE_t recordSyncLogFileReadPointer = 0;
 800ab34:	2300      	movs	r3, #0
 800ab36:	657b      	str	r3, [r7, #84]	; 0x54
	if (recordSyncLogFileSize > recordSyncLogFileReadBufferSize)
 800ab38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d903      	bls.n	800ab48 <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv+0x80>
		recordSyncLogFileReadPointer = recordSyncLogFileSize - recordSyncLogFileReadBufferSize;
 800ab40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab44:	1ad3      	subs	r3, r2, r3
 800ab46:	657b      	str	r3, [r7, #84]	; 0x54
	FRESULT res = f_lseek(&recordSyncLogFile, recordSyncLogFileReadPointer);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	3334      	adds	r3, #52	; 0x34
 800ab4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f00c fe0f 	bl	8017772 <f_lseek>
 800ab54:	4603      	mov	r3, r0
 800ab56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(res != FR_OK)
 800ab5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d00a      	beq.n	800ab78 <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv+0xb0>
		throw "Cannot move file read/write pointer";
 800ab62:	2004      	movs	r0, #4
 800ab64:	f00d fe88 	bl	8018878 <__cxa_allocate_exception>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	4a61      	ldr	r2, [pc, #388]	; (800acf0 <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv+0x228>)
 800ab6c:	601a      	str	r2, [r3, #0]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	4960      	ldr	r1, [pc, #384]	; (800acf4 <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv+0x22c>)
 800ab72:	4618      	mov	r0, r3
 800ab74:	f00e fbb8 	bl	80192e8 <__cxa_throw>
	res = f_read(&recordSyncLogFile, recordSyncLogFileReadBuffer, recordSyncLogFileReadBufferSize, &recordSyncLogFileReadBufferActualSize);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800ab7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab86:	f00c fa59 	bl	801703c <f_read>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(res != FR_OK)
 800ab90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d00a      	beq.n	800abae <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv+0xe6>
		throw "Cannot read recordSyncLogFile";
 800ab98:	2004      	movs	r0, #4
 800ab9a:	f00d fe6d 	bl	8018878 <__cxa_allocate_exception>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	4a55      	ldr	r2, [pc, #340]	; (800acf8 <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv+0x230>)
 800aba2:	601a      	str	r2, [r3, #0]
 800aba4:	2200      	movs	r2, #0
 800aba6:	4953      	ldr	r1, [pc, #332]	; (800acf4 <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv+0x22c>)
 800aba8:	4618      	mov	r0, r3
 800abaa:	f00e fb9d 	bl	80192e8 <__cxa_throw>
	recordSyncLogFileReadBuffer[recordSyncLogFileReadBufferActualSize] = '\0';
 800abae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abb2:	2100      	movs	r1, #0
 800abb4:	54d1      	strb	r1, [r2, r3]
	char* logLineStart = recordSyncLogFileReadBuffer;
 800abb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abb8:	653b      	str	r3, [r7, #80]	; 0x50
	const char* lastNewLineChar = strrchr(recordSyncLogFileReadBuffer, '\n');
 800abba:	210a      	movs	r1, #10
 800abbc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800abbe:	f010 ff7b 	bl	801bab8 <strrchr>
 800abc2:	63b8      	str	r0, [r7, #56]	; 0x38
	if (lastNewLineChar == NULL)
 800abc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d10a      	bne.n	800abe0 <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv+0x118>
		throw "Corrupted recordSyncLogFile";
 800abca:	2004      	movs	r0, #4
 800abcc:	f00d fe54 	bl	8018878 <__cxa_allocate_exception>
 800abd0:	4603      	mov	r3, r0
 800abd2:	4a4a      	ldr	r2, [pc, #296]	; (800acfc <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv+0x234>)
 800abd4:	601a      	str	r2, [r3, #0]
 800abd6:	2200      	movs	r2, #0
 800abd8:	4946      	ldr	r1, [pc, #280]	; (800acf4 <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv+0x22c>)
 800abda:	4618      	mov	r0, r3
 800abdc:	f00e fb84 	bl	80192e8 <__cxa_throw>
		char* firstNewLineChar = strchr(logLineStart, '\n');
 800abe0:	210a      	movs	r1, #10
 800abe2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800abe4:	f010 ff36 	bl	801ba54 <strchr>
 800abe8:	6378      	str	r0, [r7, #52]	; 0x34
		if (firstNewLineChar == NULL)
 800abea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abec:	2b00      	cmp	r3, #0
 800abee:	d10a      	bne.n	800ac06 <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv+0x13e>
			throw "Corrupted recordSyncLogFile";
 800abf0:	2004      	movs	r0, #4
 800abf2:	f00d fe41 	bl	8018878 <__cxa_allocate_exception>
 800abf6:	4603      	mov	r3, r0
 800abf8:	4a40      	ldr	r2, [pc, #256]	; (800acfc <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv+0x234>)
 800abfa:	601a      	str	r2, [r3, #0]
 800abfc:	2200      	movs	r2, #0
 800abfe:	493d      	ldr	r1, [pc, #244]	; (800acf4 <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv+0x22c>)
 800ac00:	4618      	mov	r0, r3
 800ac02:	f00e fb71 	bl	80192e8 <__cxa_throw>
		if (lastNewLineChar == firstNewLineChar)
 800ac06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d011      	beq.n	800ac32 <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv+0x16a>
		logLineStart = firstNewLineChar+1;
 800ac0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac10:	3301      	adds	r3, #1
 800ac12:	653b      	str	r3, [r7, #80]	; 0x50
		if (logLineStart > lastNewLineChar)
 800ac14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ac16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d9e1      	bls.n	800abe0 <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv+0x118>
			throw "Corrupted recordSyncLogFile";
 800ac1c:	2004      	movs	r0, #4
 800ac1e:	f00d fe2b 	bl	8018878 <__cxa_allocate_exception>
 800ac22:	4603      	mov	r3, r0
 800ac24:	4a35      	ldr	r2, [pc, #212]	; (800acfc <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv+0x234>)
 800ac26:	601a      	str	r2, [r3, #0]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	4932      	ldr	r1, [pc, #200]	; (800acf4 <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv+0x22c>)
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f00e fb5b 	bl	80192e8 <__cxa_throw>
			break;
 800ac32:	bf00      	nop
	char* comma1 = strrchr(logLineStart, ',');
 800ac34:	212c      	movs	r1, #44	; 0x2c
 800ac36:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ac38:	f010 ff3e 	bl	801bab8 <strrchr>
 800ac3c:	6338      	str	r0, [r7, #48]	; 0x30
	if (comma1 == NULL)
 800ac3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d10a      	bne.n	800ac5a <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv+0x192>
		throw "Corrupted recordSyncLogFile";
 800ac44:	2004      	movs	r0, #4
 800ac46:	f00d fe17 	bl	8018878 <__cxa_allocate_exception>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	4a2b      	ldr	r2, [pc, #172]	; (800acfc <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv+0x234>)
 800ac4e:	601a      	str	r2, [r3, #0]
 800ac50:	2200      	movs	r2, #0
 800ac52:	4928      	ldr	r1, [pc, #160]	; (800acf4 <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv+0x22c>)
 800ac54:	4618      	mov	r0, r3
 800ac56:	f00e fb47 	bl	80192e8 <__cxa_throw>
	strncpy(storedSyncProgressPackets, logLineStart, comma1-logLineStart);
 800ac5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac5e:	1ad3      	subs	r3, r2, r3
 800ac60:	461a      	mov	r2, r3
 800ac62:	f107 0308 	add.w	r3, r7, #8
 800ac66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f010 ff12 	bl	801ba92 <strncpy>
	strncpy(storedSyncProgressBytes, comma1+1, lastNewLineChar-comma1-1);
 800ac6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac70:	1c59      	adds	r1, r3, #1
 800ac72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac76:	1ad3      	subs	r3, r2, r3
 800ac78:	3b01      	subs	r3, #1
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	f107 0314 	add.w	r3, r7, #20
 800ac80:	4618      	mov	r0, r3
 800ac82:	f010 ff06 	bl	801ba92 <strncpy>
	syncProgressBytes = atoi(storedSyncProgressBytes);
 800ac86:	f107 0314 	add.w	r3, r7, #20
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f00e ff8c 	bl	8019ba8 <atoi>
 800ac90:	4603      	mov	r3, r0
 800ac92:	461a      	mov	r2, r3
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac9a:	669a      	str	r2, [r3, #104]	; 0x68
	syncProgressPackets = atoi(storedSyncProgressPackets);
 800ac9c:	f107 0308 	add.w	r3, r7, #8
 800aca0:	4618      	mov	r0, r3
 800aca2:	f00e ff81 	bl	8019ba8 <atoi>
 800aca6:	4603      	mov	r3, r0
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acb0:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	res = f_lseek(&recordSyncLogFile, recordSyncLogFileSize);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	3334      	adds	r3, #52	; 0x34
 800acb8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800acba:	4618      	mov	r0, r3
 800acbc:	f00c fd59 	bl	8017772 <f_lseek>
 800acc0:	4603      	mov	r3, r0
 800acc2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(res != FR_OK)
 800acc6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00a      	beq.n	800ace4 <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv+0x21c>
		throw "Cannot move recordSyncLogFile read/write pointer";
 800acce:	2004      	movs	r0, #4
 800acd0:	f00d fdd2 	bl	8018878 <__cxa_allocate_exception>
 800acd4:	4603      	mov	r3, r0
 800acd6:	4a0a      	ldr	r2, [pc, #40]	; (800ad00 <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv+0x238>)
 800acd8:	601a      	str	r2, [r3, #0]
 800acda:	2200      	movs	r2, #0
 800acdc:	4905      	ldr	r1, [pc, #20]	; (800acf4 <_ZN21GpsRecordSynchronizer27readSyncProgressFromSyncLogEv+0x22c>)
 800acde:	4618      	mov	r0, r3
 800ace0:	f00e fb02 	bl	80192e8 <__cxa_throw>
 800ace4:	46b5      	mov	sp, r6
}
 800ace6:	375c      	adds	r7, #92	; 0x5c
 800ace8:	46bd      	mov	sp, r7
 800acea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acee:	bf00      	nop
 800acf0:	0801e844 	.word	0x0801e844
 800acf4:	08023b60 	.word	0x08023b60
 800acf8:	0801e868 	.word	0x0801e868
 800acfc:	0801e888 	.word	0x0801e888
 800ad00:	0801e8a4 	.word	0x0801e8a4

0800ad04 <_ZN21GpsRecordSynchronizer17sendRecordPackageEPKc>:

void GpsRecordSynchronizer::sendRecordPackage(const char* syncBuffer)
{
 800ad04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad08:	b088      	sub	sp, #32
 800ad0a:	af04      	add	r7, sp, #16
 800ad0c:	6078      	str	r0, [r7, #4]
 800ad0e:	6039      	str	r1, [r7, #0]
	sprintf(syncPacket, "%s,%d,%ld,%ld\n%s", recordName, syncProgressPackets, syncProgressBytes, syncTotalBytes, syncBuffer);

	sendPacketToRemoteFunc(syncPacket, syncTotalBytes, syncProgressBytes);

	saveSyncProgress();
}
 800ad10:	466b      	mov	r3, sp
 800ad12:	469a      	mov	sl, r3
	syncProgressPackets++;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad1a:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800ad1e:	3301      	adds	r3, #1
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad28:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	syncProgressBytes += strlen(syncBuffer);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad32:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 800ad34:	6838      	ldr	r0, [r7, #0]
 800ad36:	f7fb fa83 	bl	8006240 <strlen>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	4433      	add	r3, r6
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ad44:	6693      	str	r3, [r2, #104]	; 0x68
	syncBufferUsedSize = 0;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	char syncPacket[strlen(syncBuffer)+100];
 800ad52:	6838      	ldr	r0, [r7, #0]
 800ad54:	f7fb fa74 	bl	8006240 <strlen>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	f103 0164 	add.w	r1, r3, #100	; 0x64
 800ad5e:	460b      	mov	r3, r1
 800ad60:	3b01      	subs	r3, #1
 800ad62:	60fb      	str	r3, [r7, #12]
 800ad64:	2300      	movs	r3, #0
 800ad66:	4688      	mov	r8, r1
 800ad68:	4699      	mov	r9, r3
 800ad6a:	f04f 0200 	mov.w	r2, #0
 800ad6e:	f04f 0300 	mov.w	r3, #0
 800ad72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ad76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ad7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ad7e:	2300      	movs	r3, #0
 800ad80:	460c      	mov	r4, r1
 800ad82:	461d      	mov	r5, r3
 800ad84:	f04f 0200 	mov.w	r2, #0
 800ad88:	f04f 0300 	mov.w	r3, #0
 800ad8c:	00eb      	lsls	r3, r5, #3
 800ad8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ad92:	00e2      	lsls	r2, r4, #3
 800ad94:	1dcb      	adds	r3, r1, #7
 800ad96:	08db      	lsrs	r3, r3, #3
 800ad98:	00db      	lsls	r3, r3, #3
 800ad9a:	ebad 0d03 	sub.w	sp, sp, r3
 800ad9e:	ab04      	add	r3, sp, #16
 800ada0:	3300      	adds	r3, #0
 800ada2:	60bb      	str	r3, [r7, #8]
	sprintf(syncPacket, "%s,%d,%ld,%ld\n%s", recordName, syncProgressPackets, syncProgressBytes, syncTotalBytes, syncBuffer);
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adac:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800adb0:	461c      	mov	r4, r3
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800adc0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800adc2:	6839      	ldr	r1, [r7, #0]
 800adc4:	9102      	str	r1, [sp, #8]
 800adc6:	9201      	str	r2, [sp, #4]
 800adc8:	9300      	str	r3, [sp, #0]
 800adca:	4623      	mov	r3, r4
 800adcc:	4602      	mov	r2, r0
 800adce:	490e      	ldr	r1, [pc, #56]	; (800ae08 <_ZN21GpsRecordSynchronizer17sendRecordPackageEPKc+0x104>)
 800add0:	68b8      	ldr	r0, [r7, #8]
 800add2:	f010 fd2f 	bl	801b834 <siprintf>
	sendPacketToRemoteFunc(syncPacket, syncTotalBytes, syncProgressBytes);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f503 50a9 	add.w	r0, r3, #5408	; 0x1520
 800addc:	301c      	adds	r0, #28
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ade4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adee:	68b9      	ldr	r1, [r7, #8]
 800adf0:	f000 f899 	bl	800af26 <_ZNKSt8functionIFvPKcmmEEclES1_mm>
	saveSyncProgress();
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 f809 	bl	800ae0c <_ZN21GpsRecordSynchronizer16saveSyncProgressEv>
 800adfa:	46d5      	mov	sp, sl
}
 800adfc:	bf00      	nop
 800adfe:	3710      	adds	r7, #16
 800ae00:	46bd      	mov	sp, r7
 800ae02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae06:	bf00      	nop
 800ae08:	0801e8d8 	.word	0x0801e8d8

0800ae0c <_ZN21GpsRecordSynchronizer16saveSyncProgressEv>:

void GpsRecordSynchronizer::saveSyncProgress()
{
 800ae0c:	b590      	push	{r4, r7, lr}
 800ae0e:	b093      	sub	sp, #76	; 0x4c
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
	uint32_t bytesWritten;
	char syncLogRecord[50];
	sprintf(syncLogRecord, "%d,%ld\n", syncProgressPackets, syncProgressBytes);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae1a:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800ae1e:	461a      	mov	r2, r3
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae28:	f107 000c 	add.w	r0, r7, #12
 800ae2c:	4921      	ldr	r1, [pc, #132]	; (800aeb4 <_ZN21GpsRecordSynchronizer16saveSyncProgressEv+0xa8>)
 800ae2e:	f010 fd01 	bl	801b834 <siprintf>

	FRESULT res = f_write(&recordSyncLogFile, syncLogRecord, strlen(syncLogRecord), (UINT *)&bytesWritten);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f103 0434 	add.w	r4, r3, #52	; 0x34
 800ae38:	f107 030c 	add.w	r3, r7, #12
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7fb f9ff 	bl	8006240 <strlen>
 800ae42:	4602      	mov	r2, r0
 800ae44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ae48:	f107 010c 	add.w	r1, r7, #12
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	f00c fa54 	bl	80172fa <f_write>
 800ae52:	4603      	mov	r3, r0
 800ae54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if((bytesWritten == 0) || (res != FR_OK))
 800ae58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d003      	beq.n	800ae66 <_ZN21GpsRecordSynchronizer16saveSyncProgressEv+0x5a>
 800ae5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d00a      	beq.n	800ae7c <_ZN21GpsRecordSynchronizer16saveSyncProgressEv+0x70>
	{
		throw "Cannot write to recordSyncLogFile";
 800ae66:	2004      	movs	r0, #4
 800ae68:	f00d fd06 	bl	8018878 <__cxa_allocate_exception>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	4a12      	ldr	r2, [pc, #72]	; (800aeb8 <_ZN21GpsRecordSynchronizer16saveSyncProgressEv+0xac>)
 800ae70:	601a      	str	r2, [r3, #0]
 800ae72:	2200      	movs	r2, #0
 800ae74:	4911      	ldr	r1, [pc, #68]	; (800aebc <_ZN21GpsRecordSynchronizer16saveSyncProgressEv+0xb0>)
 800ae76:	4618      	mov	r0, r3
 800ae78:	f00e fa36 	bl	80192e8 <__cxa_throw>
	}

	res = f_sync(&recordSyncLogFile);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	3334      	adds	r3, #52	; 0x34
 800ae80:	4618      	mov	r0, r3
 800ae82:	f00c fbce 	bl	8017622 <f_sync>
 800ae86:	4603      	mov	r3, r0
 800ae88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if(res != FR_OK)
 800ae8c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00a      	beq.n	800aeaa <_ZN21GpsRecordSynchronizer16saveSyncProgressEv+0x9e>
	{
		throw "Cannot sync recordSyncLogFile";
 800ae94:	2004      	movs	r0, #4
 800ae96:	f00d fcef 	bl	8018878 <__cxa_allocate_exception>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	4a08      	ldr	r2, [pc, #32]	; (800aec0 <_ZN21GpsRecordSynchronizer16saveSyncProgressEv+0xb4>)
 800ae9e:	601a      	str	r2, [r3, #0]
 800aea0:	2200      	movs	r2, #0
 800aea2:	4906      	ldr	r1, [pc, #24]	; (800aebc <_ZN21GpsRecordSynchronizer16saveSyncProgressEv+0xb0>)
 800aea4:	4618      	mov	r0, r3
 800aea6:	f00e fa1f 	bl	80192e8 <__cxa_throw>
	}
}
 800aeaa:	bf00      	nop
 800aeac:	374c      	adds	r7, #76	; 0x4c
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd90      	pop	{r4, r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	0801e8ec 	.word	0x0801e8ec
 800aeb8:	0801e8f4 	.word	0x0801e8f4
 800aebc:	08023b60 	.word	0x08023b60
 800aec0:	0801e918 	.word	0x0801e918

0800aec4 <_ZNSt8functionIFvPKcmmEEC1Ev>:
      function() noexcept
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	461a      	mov	r2, r3
 800aed0:	2300      	movs	r3, #0
 800aed2:	6013      	str	r3, [r2, #0]
 800aed4:	6053      	str	r3, [r2, #4]
 800aed6:	6093      	str	r3, [r2, #8]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7fd fcd8 	bl	8008890 <_ZNSt14_Function_baseC1Ev>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	60da      	str	r2, [r3, #12]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4618      	mov	r0, r3
 800aeea:	3708      	adds	r7, #8
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <_ZNSt8functionIFvPKcmmEEaSERKS3_>:
       *
       *  If @a __x targets a function pointer or a reference to a function
       *  object, then this operation will not throw an %exception.
       */
      function&
      operator=(const function& __x)
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b086      	sub	sp, #24
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
      {
	function(__x).swap(*this);
 800aefa:	f107 0308 	add.w	r3, r7, #8
 800aefe:	6839      	ldr	r1, [r7, #0]
 800af00:	4618      	mov	r0, r3
 800af02:	f000 f83d 	bl	800af80 <_ZNSt8functionIFvPKcmmEEC1ERKS3_>
 800af06:	f107 0308 	add.w	r3, r7, #8
 800af0a:	6879      	ldr	r1, [r7, #4]
 800af0c:	4618      	mov	r0, r3
 800af0e:	f000 f869 	bl	800afe4 <_ZNSt8functionIFvPKcmmEE4swapERS3_>
 800af12:	f107 0308 	add.w	r3, r7, #8
 800af16:	4618      	mov	r0, r3
 800af18:	f7fd fac0 	bl	800849c <_ZNSt8functionIFvPKcmmEED1Ev>
	return *this;
 800af1c:	687b      	ldr	r3, [r7, #4]
      }
 800af1e:	4618      	mov	r0, r3
 800af20:	3718      	adds	r7, #24
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <_ZNKSt8functionIFvPKcmmEEclES1_mm>:
       *
       *  The function call operator invokes the target function object
       *  stored by @c this.
       */
      _Res
      operator()(_ArgTypes... __args) const
 800af26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	60b9      	str	r1, [r7, #8]
 800af32:	607a      	str	r2, [r7, #4]
 800af34:	603b      	str	r3, [r7, #0]
      {
	if (_M_empty())
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	4618      	mov	r0, r3
 800af3a:	f7ff fb2f 	bl	800a59c <_ZNKSt14_Function_base8_M_emptyEv>
 800af3e:	4603      	mov	r3, r0
 800af40:	2b00      	cmp	r3, #0
 800af42:	d001      	beq.n	800af48 <_ZNKSt8functionIFvPKcmmEEclES1_mm+0x22>
	  __throw_bad_function_call();
 800af44:	f00e fbf6 	bl	8019734 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	68dc      	ldr	r4, [r3, #12]
 800af4c:	68fd      	ldr	r5, [r7, #12]
 800af4e:	f107 0308 	add.w	r3, r7, #8
 800af52:	4618      	mov	r0, r3
 800af54:	f7fd fd74 	bl	8008a40 <_ZSt7forwardIPKcEOT_RNSt16remove_referenceIS2_E4typeE>
 800af58:	4606      	mov	r6, r0
 800af5a:	1d3b      	adds	r3, r7, #4
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7fd fd7a 	bl	8008a56 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800af62:	4680      	mov	r8, r0
 800af64:	463b      	mov	r3, r7
 800af66:	4618      	mov	r0, r3
 800af68:	f7fd fd75 	bl	8008a56 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 800af6c:	4603      	mov	r3, r0
 800af6e:	4642      	mov	r2, r8
 800af70:	4631      	mov	r1, r6
 800af72:	4628      	mov	r0, r5
 800af74:	47a0      	blx	r4
 800af76:	bf00      	nop
      }
 800af78:	3710      	adds	r7, #16
 800af7a:	46bd      	mov	sp, r7
 800af7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800af80 <_ZNSt8functionIFvPKcmmEEC1ERKS3_>:
      function(const function& __x)
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	461a      	mov	r2, r3
 800af8e:	2300      	movs	r3, #0
 800af90:	6013      	str	r3, [r2, #0]
 800af92:	6053      	str	r3, [r2, #4]
 800af94:	6093      	str	r3, [r2, #8]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	4618      	mov	r0, r3
 800af9a:	f7fd fc79 	bl	8008890 <_ZNSt14_Function_baseC1Ev>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 800afa4:	6838      	ldr	r0, [r7, #0]
 800afa6:	f000 f83e 	bl	800b026 <_ZNKSt8functionIFvPKcmmEEcvbEv>
 800afaa:	4603      	mov	r3, r0
 800afac:	2b00      	cmp	r3, #0
 800afae:	d00d      	beq.n	800afcc <_ZNSt8functionIFvPKcmmEEC1ERKS3_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	6839      	ldr	r1, [r7, #0]
 800afb8:	2202      	movs	r2, #2
 800afba:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	68da      	ldr	r2, [r3, #12]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	689a      	ldr	r2, [r3, #8]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	609a      	str	r2, [r3, #8]
      }
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	e005      	b.n	800afdc <_ZNSt8functionIFvPKcmmEEC1ERKS3_+0x5c>
      : _Function_base()
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7fc ff34 	bl	8007e40 <_ZNSt14_Function_baseD1Ev>
 800afd8:	f00d fc8a 	bl	80188f0 <__cxa_end_cleanup>
      }
 800afdc:	4618      	mov	r0, r3
 800afde:	3708      	adds	r7, #8
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <_ZNSt8functionIFvPKcmmEE4swapERS3_>:
      void swap(function& __x) noexcept
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	683a      	ldr	r2, [r7, #0]
 800aff2:	4611      	mov	r1, r2
 800aff4:	4618      	mov	r0, r3
 800aff6:	f000 f831 	bl	800b05c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f103 0208 	add.w	r2, r3, #8
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	3308      	adds	r3, #8
 800b004:	4619      	mov	r1, r3
 800b006:	4610      	mov	r0, r2
 800b008:	f000 f85a 	bl	800b0c0 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f103 020c 	add.w	r2, r3, #12
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	330c      	adds	r3, #12
 800b016:	4619      	mov	r1, r3
 800b018:	4610      	mov	r0, r2
 800b01a:	f000 f87b 	bl	800b114 <_ZSt4swapIPFvRKSt9_Any_dataOPKcOmS6_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>
      }
 800b01e:	bf00      	nop
 800b020:	3708      	adds	r7, #8
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}

0800b026 <_ZNKSt8functionIFvPKcmmEEcvbEv>:
      explicit operator bool() const noexcept
 800b026:	b580      	push	{r7, lr}
 800b028:	b082      	sub	sp, #8
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	4618      	mov	r0, r3
 800b032:	f7ff fab3 	bl	800a59c <_ZNKSt14_Function_base8_M_emptyEv>
 800b036:	4603      	mov	r3, r0
 800b038:	f083 0301 	eor.w	r3, r3, #1
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	4618      	mov	r0, r3
 800b040:	3708      	adds	r7, #8
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800b046:	b480      	push	{r7}
 800b048:	b083      	sub	sp, #12
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	4618      	mov	r0, r3
 800b052:	370c      	adds	r7, #12
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr

0800b05c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f7ff ffed 	bl	800b046 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800b06c:	4602      	mov	r2, r0
 800b06e:	f107 0308 	add.w	r3, r7, #8
 800b072:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b076:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800b07a:	6838      	ldr	r0, [r7, #0]
 800b07c:	f7ff ffe3 	bl	800b046 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800b080:	4602      	mov	r2, r0
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b088:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800b08c:	f107 0308 	add.w	r3, r7, #8
 800b090:	4618      	mov	r0, r3
 800b092:	f7ff ffd8 	bl	800b046 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800b096:	4602      	mov	r2, r0
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b09e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800b0a2:	bf00      	nop
 800b0a4:	3710      	adds	r7, #16
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800b0aa:	b480      	push	{r7}
 800b0ac:	b083      	sub	sp, #12
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f7ff ffed 	bl	800b0aa <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800b0d6:	6838      	ldr	r0, [r7, #0]
 800b0d8:	f7ff ffe7 	bl	800b0aa <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800b0e4:	f107 030c 	add.w	r3, r7, #12
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f7ff ffde 	bl	800b0aa <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	601a      	str	r2, [r3, #0]
    }
 800b0f6:	bf00      	nop
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <_ZSt4moveIRPFvRKSt9_Any_dataOPKcOmS6_EEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800b0fe:	b480      	push	{r7}
 800b100:	b083      	sub	sp, #12
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	4618      	mov	r0, r3
 800b10a:	370c      	adds	r7, #12
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <_ZSt4swapIPFvRKSt9_Any_dataOPKcOmS6_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISD_ESt18is_move_assignableISD_EEE5valueEvE4typeERSD_SN_>:
    swap(_Tp& __a, _Tp& __b)
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f7ff ffed 	bl	800b0fe <_ZSt4moveIRPFvRKSt9_Any_dataOPKcOmS6_EEONSt16remove_referenceIT_E4typeEOSB_>
 800b124:	4603      	mov	r3, r0
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800b12a:	6838      	ldr	r0, [r7, #0]
 800b12c:	f7ff ffe7 	bl	800b0fe <_ZSt4moveIRPFvRKSt9_Any_dataOPKcOmS6_EEONSt16remove_referenceIT_E4typeEOSB_>
 800b130:	4603      	mov	r3, r0
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800b138:	f107 030c 	add.w	r3, r7, #12
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7ff ffde 	bl	800b0fe <_ZSt4moveIRPFvRKSt9_Any_dataOPKcOmS6_EEONSt16remove_referenceIT_E4typeEOSB_>
 800b142:	4603      	mov	r3, r0
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	601a      	str	r2, [r3, #0]
    }
 800b14a:	bf00      	nop
 800b14c:	3710      	adds	r7, #16
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
	...

0800b154 <_ZN6LoggerC1EP20__UART_HandleTypeDef>:
#include <string.h>
#include <stdio.h>
#include "fatfs.h"
#include "main.h"

Logger::Logger(UART_HandleTypeDef* huartDebugConsole)
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	4a0e      	ldr	r2, [pc, #56]	; (800b19c <_ZN6LoggerC1EP20__UART_HandleTypeDef+0x48>)
 800b162:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b166:	e883 0003 	stmia.w	r3, {r0, r1}
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b170:	2200      	movs	r2, #0
 800b172:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b17c:	2200      	movs	r2, #0
 800b17e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
{
	this->huartDebugConsole = huartDebugConsole;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b188:	461a      	mov	r2, r3
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4618      	mov	r0, r3
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr
 800b19c:	0801e938 	.word	0x0801e938

0800b1a0 <_ZN6LoggerD1Ev>:

Logger::~Logger()
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b084      	sub	sp, #16
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
{
	if (!isLogFileOpened)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b1b2:	f083 0301 	eor.w	r3, r3, #1
 800b1b6:	b2db      	uxtb	r3, r3
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d114      	bne.n	800b1e6 <_ZN6LoggerD1Ev+0x46>
	{
		return;
	}

	FRESULT res = f_close(&logFile);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	3308      	adds	r3, #8
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f00c faac 	bl	801771e <f_close>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	73fb      	strb	r3, [r7, #15]
	if(res != FR_OK)
 800b1ca:	7bfb      	ldrb	r3, [r7, #15]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d00c      	beq.n	800b1ea <_ZN6LoggerD1Ev+0x4a>
	{
		throw "Cannot close storage log file";
 800b1d0:	2004      	movs	r0, #4
 800b1d2:	f00d fb51 	bl	8018878 <__cxa_allocate_exception>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	4a07      	ldr	r2, [pc, #28]	; (800b1f8 <_ZN6LoggerD1Ev+0x58>)
 800b1da:	601a      	str	r2, [r3, #0]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	4907      	ldr	r1, [pc, #28]	; (800b1fc <_ZN6LoggerD1Ev+0x5c>)
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f00e f881 	bl	80192e8 <__cxa_throw>
	}
}
 800b1e6:	bf00      	nop
 800b1e8:	e000      	b.n	800b1ec <_ZN6LoggerD1Ev+0x4c>
Logger::~Logger()
 800b1ea:	bf00      	nop
}
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3710      	adds	r7, #16
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	0801e940 	.word	0x0801e940
 800b1fc:	08023b60 	.word	0x08023b60

0800b200 <_ZN6Logger11openLogFileEv>:

void Logger::openLogFile()
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
	FRESULT res = f_open(&logFile, logFileName, FA_OPEN_APPEND | FA_WRITE);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	3308      	adds	r3, #8
 800b20c:	6879      	ldr	r1, [r7, #4]
 800b20e:	2232      	movs	r2, #50	; 0x32
 800b210:	4618      	mov	r0, r3
 800b212:	f00b fd47 	bl	8016ca4 <f_open>
 800b216:	4603      	mov	r3, r0
 800b218:	73fb      	strb	r3, [r7, #15]
	if(res != FR_OK)
 800b21a:	7bfb      	ldrb	r3, [r7, #15]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d00a      	beq.n	800b236 <_ZN6Logger11openLogFileEv+0x36>
	{
		throw "Cannot open storage log file";
 800b220:	2004      	movs	r0, #4
 800b222:	f00d fb29 	bl	8018878 <__cxa_allocate_exception>
 800b226:	4603      	mov	r3, r0
 800b228:	4a08      	ldr	r2, [pc, #32]	; (800b24c <_ZN6Logger11openLogFileEv+0x4c>)
 800b22a:	601a      	str	r2, [r3, #0]
 800b22c:	2200      	movs	r2, #0
 800b22e:	4908      	ldr	r1, [pc, #32]	; (800b250 <_ZN6Logger11openLogFileEv+0x50>)
 800b230:	4618      	mov	r0, r3
 800b232:	f00e f859 	bl	80192e8 <__cxa_throw>
	}
	isLogFileOpened = true;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b23c:	2201      	movs	r2, #1
 800b23e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 800b242:	bf00      	nop
 800b244:	3710      	adds	r7, #16
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	0801e960 	.word	0x0801e960
 800b250:	08023b60 	.word	0x08023b60

0800b254 <_ZN6Logger5debugEPKc>:
{
	write("ERROR", message, context);
}

void Logger::debug(const char* message)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
	write("DEBUG", message, "");
 800b25e:	4b05      	ldr	r3, [pc, #20]	; (800b274 <_ZN6Logger5debugEPKc+0x20>)
 800b260:	683a      	ldr	r2, [r7, #0]
 800b262:	4905      	ldr	r1, [pc, #20]	; (800b278 <_ZN6Logger5debugEPKc+0x24>)
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 f82f 	bl	800b2c8 <_ZN6Logger5writeEPKcS1_S1_>
}
 800b26a:	bf00      	nop
 800b26c:	3708      	adds	r7, #8
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	0801e980 	.word	0x0801e980
 800b278:	0801e98c 	.word	0x0801e98c

0800b27c <_ZN6Logger5debugEPKcS1_>:

void Logger::debug(const char* message, const char* context)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	607a      	str	r2, [r7, #4]
	write("DEBUG", message, context);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	68ba      	ldr	r2, [r7, #8]
 800b28c:	4903      	ldr	r1, [pc, #12]	; (800b29c <_ZN6Logger5debugEPKcS1_+0x20>)
 800b28e:	68f8      	ldr	r0, [r7, #12]
 800b290:	f000 f81a 	bl	800b2c8 <_ZN6Logger5writeEPKcS1_S1_>
}
 800b294:	bf00      	nop
 800b296:	3710      	adds	r7, #16
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}
 800b29c:	0801e98c 	.word	0x0801e98c

0800b2a0 <_ZN6Logger4infoEPKc>:

void Logger::info(const char* message)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	6039      	str	r1, [r7, #0]
	write("INFO", message, "");
 800b2aa:	4b05      	ldr	r3, [pc, #20]	; (800b2c0 <_ZN6Logger4infoEPKc+0x20>)
 800b2ac:	683a      	ldr	r2, [r7, #0]
 800b2ae:	4905      	ldr	r1, [pc, #20]	; (800b2c4 <_ZN6Logger4infoEPKc+0x24>)
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f000 f809 	bl	800b2c8 <_ZN6Logger5writeEPKcS1_S1_>
}
 800b2b6:	bf00      	nop
 800b2b8:	3708      	adds	r7, #8
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	0801e980 	.word	0x0801e980
 800b2c4:	0801e994 	.word	0x0801e994

0800b2c8 <_ZN6Logger5writeEPKcS1_S1_>:
{
	write("INFO", message, context);
}

void Logger::write(const char* level, const char* message, const char* context)
{
 800b2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2cc:	b08c      	sub	sp, #48	; 0x30
 800b2ce:	af02      	add	r7, sp, #8
 800b2d0:	60f8      	str	r0, [r7, #12]
 800b2d2:	60b9      	str	r1, [r7, #8]
 800b2d4:	607a      	str	r2, [r7, #4]
 800b2d6:	603b      	str	r3, [r7, #0]
		if(res != FR_OK)
		{
			throw "Cannot sync log file to SD Card";
		}
	}
}
 800b2d8:	466b      	mov	r3, sp
 800b2da:	469a      	mov	sl, r3
	uint16_t debugConsoleMessageLen = strlen(level) + strlen(message) + strlen(context) + 8;
 800b2dc:	68b8      	ldr	r0, [r7, #8]
 800b2de:	f7fa ffaf 	bl	8006240 <strlen>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	b29e      	uxth	r6, r3
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f7fa ffaa 	bl	8006240 <strlen>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	4433      	add	r3, r6
 800b2f2:	b29e      	uxth	r6, r3
 800b2f4:	6838      	ldr	r0, [r7, #0]
 800b2f6:	f7fa ffa3 	bl	8006240 <strlen>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	4433      	add	r3, r6
 800b300:	b29b      	uxth	r3, r3
 800b302:	3308      	adds	r3, #8
 800b304:	84fb      	strh	r3, [r7, #38]	; 0x26
	char debugConsoleMessage[debugConsoleMessageLen+1];
 800b306:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b308:	1c59      	adds	r1, r3, #1
 800b30a:	1e4b      	subs	r3, r1, #1
 800b30c:	623b      	str	r3, [r7, #32]
 800b30e:	460a      	mov	r2, r1
 800b310:	2300      	movs	r3, #0
 800b312:	4690      	mov	r8, r2
 800b314:	4699      	mov	r9, r3
 800b316:	f04f 0200 	mov.w	r2, #0
 800b31a:	f04f 0300 	mov.w	r3, #0
 800b31e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b322:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b326:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b32a:	460a      	mov	r2, r1
 800b32c:	2300      	movs	r3, #0
 800b32e:	4614      	mov	r4, r2
 800b330:	461d      	mov	r5, r3
 800b332:	f04f 0200 	mov.w	r2, #0
 800b336:	f04f 0300 	mov.w	r3, #0
 800b33a:	00eb      	lsls	r3, r5, #3
 800b33c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b340:	00e2      	lsls	r2, r4, #3
 800b342:	460b      	mov	r3, r1
 800b344:	3307      	adds	r3, #7
 800b346:	08db      	lsrs	r3, r3, #3
 800b348:	00db      	lsls	r3, r3, #3
 800b34a:	ebad 0d03 	sub.w	sp, sp, r3
 800b34e:	ab02      	add	r3, sp, #8
 800b350:	3300      	adds	r3, #0
 800b352:	61fb      	str	r3, [r7, #28]
	sprintf(debugConsoleMessage, "%s - %s - %s\r\n", level, message, context);
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	9300      	str	r3, [sp, #0]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	68ba      	ldr	r2, [r7, #8]
 800b35c:	4937      	ldr	r1, [pc, #220]	; (800b43c <_ZN6Logger5writeEPKcS1_S1_+0x174>)
 800b35e:	69f8      	ldr	r0, [r7, #28]
 800b360:	f010 fa68 	bl	801b834 <siprintf>
	HAL_UART_Transmit(huartDebugConsole, (uint8_t *) debugConsoleMessage, debugConsoleMessageLen, 100);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b36a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b36c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b36e:	2364      	movs	r3, #100	; 0x64
 800b370:	69f9      	ldr	r1, [r7, #28]
 800b372:	f006 fa3f 	bl	80117f4 <HAL_UART_Transmit>
	if (!isLogFileOpened)
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b37c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b380:	f083 0301 	eor.w	r3, r3, #1
 800b384:	b2db      	uxtb	r3, r3
 800b386:	2b00      	cmp	r3, #0
 800b388:	d001      	beq.n	800b38e <_ZN6Logger5writeEPKcS1_S1_+0xc6>
		return;
 800b38a:	46d5      	mov	sp, sl
 800b38c:	e051      	b.n	800b432 <_ZN6Logger5writeEPKcS1_S1_+0x16a>
	int bytesWritten = f_printf(&logFile, "%s - %s - %s\n", level, message, context);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f103 0008 	add.w	r0, r3, #8
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	68ba      	ldr	r2, [r7, #8]
 800b39c:	4928      	ldr	r1, [pc, #160]	; (800b440 <_ZN6Logger5writeEPKcS1_S1_+0x178>)
 800b39e:	f00c feb9 	bl	8018114 <f_printf>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	61bb      	str	r3, [r7, #24]
	if(bytesWritten <= 0)
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	dc0a      	bgt.n	800b3c2 <_ZN6Logger5writeEPKcS1_S1_+0xfa>
		throw "Cannot write log to storage";
 800b3ac:	2004      	movs	r0, #4
 800b3ae:	f00d fa63 	bl	8018878 <__cxa_allocate_exception>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	4a23      	ldr	r2, [pc, #140]	; (800b444 <_ZN6Logger5writeEPKcS1_S1_+0x17c>)
 800b3b6:	601a      	str	r2, [r3, #0]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	4923      	ldr	r1, [pc, #140]	; (800b448 <_ZN6Logger5writeEPKcS1_S1_+0x180>)
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f00d ff93 	bl	80192e8 <__cxa_throw>
	if(++writeLogCounter % 10 == 0)
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	b2da      	uxtb	r2, r3
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3e0:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800b3e4:	4b19      	ldr	r3, [pc, #100]	; (800b44c <_ZN6Logger5writeEPKcS1_S1_+0x184>)
 800b3e6:	fba3 1302 	umull	r1, r3, r3, r2
 800b3ea:	08d9      	lsrs	r1, r3, #3
 800b3ec:	460b      	mov	r3, r1
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	440b      	add	r3, r1
 800b3f2:	005b      	lsls	r3, r3, #1
 800b3f4:	1ad3      	subs	r3, r2, r3
 800b3f6:	b2db      	uxtb	r3, r3
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	bf0c      	ite	eq
 800b3fc:	2301      	moveq	r3, #1
 800b3fe:	2300      	movne	r3, #0
 800b400:	b2db      	uxtb	r3, r3
 800b402:	2b00      	cmp	r3, #0
 800b404:	d014      	beq.n	800b430 <_ZN6Logger5writeEPKcS1_S1_+0x168>
		FRESULT res = f_sync(&logFile);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	3308      	adds	r3, #8
 800b40a:	4618      	mov	r0, r3
 800b40c:	f00c f909 	bl	8017622 <f_sync>
 800b410:	4603      	mov	r3, r0
 800b412:	75fb      	strb	r3, [r7, #23]
		if(res != FR_OK)
 800b414:	7dfb      	ldrb	r3, [r7, #23]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00a      	beq.n	800b430 <_ZN6Logger5writeEPKcS1_S1_+0x168>
			throw "Cannot sync log file to SD Card";
 800b41a:	2004      	movs	r0, #4
 800b41c:	f00d fa2c 	bl	8018878 <__cxa_allocate_exception>
 800b420:	4603      	mov	r3, r0
 800b422:	4a0b      	ldr	r2, [pc, #44]	; (800b450 <_ZN6Logger5writeEPKcS1_S1_+0x188>)
 800b424:	601a      	str	r2, [r3, #0]
 800b426:	2200      	movs	r2, #0
 800b428:	4907      	ldr	r1, [pc, #28]	; (800b448 <_ZN6Logger5writeEPKcS1_S1_+0x180>)
 800b42a:	4618      	mov	r0, r3
 800b42c:	f00d ff5c 	bl	80192e8 <__cxa_throw>
 800b430:	46d5      	mov	sp, sl
}
 800b432:	3728      	adds	r7, #40	; 0x28
 800b434:	46bd      	mov	sp, r7
 800b436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b43a:	bf00      	nop
 800b43c:	0801e99c 	.word	0x0801e99c
 800b440:	0801e9ac 	.word	0x0801e9ac
 800b444:	0801e9bc 	.word	0x0801e9bc
 800b448:	08023b60 	.word	0x08023b60
 800b44c:	cccccccd 	.word	0xcccccccd
 800b450:	0801e9d8 	.word	0x0801e9d8

0800b454 <_ZN17ShowScreenUiEvent13getScreenNameEv>:
		const char *getScreenName()
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
			return screenName;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	3301      	adds	r3, #1
		}
 800b460:	4618      	mov	r0, r3
 800b462:	370c      	adds	r7, #12
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr

0800b46c <_ZN2UIC1EP17UiEventDispatcher>:
#include "ui.info.screen.class.h"
#include "ui.sync_gps.screen.class.h"
#include "ui.sync_gps_finish.screen.class.h"
#include "ui.record_gps.screen.class.h"

UI::UI(UiEventDispatcher *uiEventDispatcher)
 800b46c:	b590      	push	{r4, r7, lr}
 800b46e:	b083      	sub	sp, #12
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	4618      	mov	r0, r3
 800b47a:	f7fc fe23 	bl	80080c4 <_ZN16UiEventsListenerC1Ev>
 800b47e:	4a30      	ldr	r2, [pc, #192]	; (800b540 <_ZN2UIC1EP17UiEventDispatcher+0xd4>)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	601a      	str	r2, [r3, #0]
{
	this->uiEventDispatcher = uiEventDispatcher;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	683a      	ldr	r2, [r7, #0]
 800b488:	61da      	str	r2, [r3, #28]

	screens[0] = new UiMenuScreen(uiEventDispatcher);
 800b48a:	2058      	movs	r0, #88	; 0x58
 800b48c:	f00d ff98 	bl	80193c0 <_Znwj>
 800b490:	4603      	mov	r3, r0
 800b492:	461c      	mov	r4, r3
 800b494:	6839      	ldr	r1, [r7, #0]
 800b496:	4620      	mov	r0, r4
 800b498:	f000 fb9a 	bl	800bbd0 <_ZN12UiMenuScreenC1EP17UiEventDispatcher>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	605c      	str	r4, [r3, #4]
	screens[1] = new UiInfoScreen(uiEventDispatcher);
 800b4a0:	2008      	movs	r0, #8
 800b4a2:	f00d ff8d 	bl	80193c0 <_Znwj>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	461c      	mov	r4, r3
 800b4aa:	6839      	ldr	r1, [r7, #0]
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f000 fa87 	bl	800b9c0 <_ZN12UiInfoScreenC1EP17UiEventDispatcher>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	609c      	str	r4, [r3, #8]
	screens[2] = new UiSyncGpsScreen(uiEventDispatcher);
 800b4b6:	2008      	movs	r0, #8
 800b4b8:	f00d ff82 	bl	80193c0 <_Znwj>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	461c      	mov	r4, r3
 800b4c0:	6839      	ldr	r1, [r7, #0]
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	f000 fec6 	bl	800c254 <_ZN15UiSyncGpsScreenC1EP17UiEventDispatcher>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	60dc      	str	r4, [r3, #12]
	screens[3] = new UiSyncGpsFinishScreen(uiEventDispatcher);
 800b4cc:	2008      	movs	r0, #8
 800b4ce:	f00d ff77 	bl	80193c0 <_Znwj>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	461c      	mov	r4, r3
 800b4d6:	6839      	ldr	r1, [r7, #0]
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f000 ff93 	bl	800c404 <_ZN21UiSyncGpsFinishScreenC1EP17UiEventDispatcher>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	611c      	str	r4, [r3, #16]
	screens[4] = new UiRecordGpsScreen(uiEventDispatcher);
 800b4e2:	200c      	movs	r0, #12
 800b4e4:	f00d ff6c 	bl	80193c0 <_Znwj>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	461c      	mov	r4, r3
 800b4ec:	6839      	ldr	r1, [r7, #0]
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	f000 fcc8 	bl	800be84 <_ZN17UiRecordGpsScreenC1EP17UiEventDispatcher>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	615c      	str	r4, [r3, #20]
}
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	e01d      	b.n	800b538 <_ZN2UIC1EP17UiEventDispatcher+0xcc>
	screens[0] = new UiMenuScreen(uiEventDispatcher);
 800b4fc:	2158      	movs	r1, #88	; 0x58
 800b4fe:	4620      	mov	r0, r4
 800b500:	f00d f948 	bl	8018794 <_ZdlPvj>
 800b504:	f00d f9f4 	bl	80188f0 <__cxa_end_cleanup>
	screens[1] = new UiInfoScreen(uiEventDispatcher);
 800b508:	2108      	movs	r1, #8
 800b50a:	4620      	mov	r0, r4
 800b50c:	f00d f942 	bl	8018794 <_ZdlPvj>
 800b510:	f00d f9ee 	bl	80188f0 <__cxa_end_cleanup>
	screens[2] = new UiSyncGpsScreen(uiEventDispatcher);
 800b514:	2108      	movs	r1, #8
 800b516:	4620      	mov	r0, r4
 800b518:	f00d f93c 	bl	8018794 <_ZdlPvj>
 800b51c:	f00d f9e8 	bl	80188f0 <__cxa_end_cleanup>
	screens[3] = new UiSyncGpsFinishScreen(uiEventDispatcher);
 800b520:	2108      	movs	r1, #8
 800b522:	4620      	mov	r0, r4
 800b524:	f00d f936 	bl	8018794 <_ZdlPvj>
 800b528:	f00d f9e2 	bl	80188f0 <__cxa_end_cleanup>
	screens[4] = new UiRecordGpsScreen(uiEventDispatcher);
 800b52c:	210c      	movs	r1, #12
 800b52e:	4620      	mov	r0, r4
 800b530:	f00d f930 	bl	8018794 <_ZdlPvj>
 800b534:	f00d f9dc 	bl	80188f0 <__cxa_end_cleanup>
}
 800b538:	4618      	mov	r0, r3
 800b53a:	370c      	adds	r7, #12
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd90      	pop	{r4, r7, pc}
 800b540:	0801fb90 	.word	0x0801fb90

0800b544 <_ZN2UID1Ev>:

UI::~UI()
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	4a0d      	ldr	r2, [pc, #52]	; (800b584 <_ZN2UID1Ev+0x40>)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	601a      	str	r2, [r3, #0]
{
	for (uint8_t i=0; i<screensNumber; i++)
 800b552:	2300      	movs	r3, #0
 800b554:	73fb      	strb	r3, [r7, #15]
 800b556:	e00d      	b.n	800b574 <_ZN2UID1Ev+0x30>
	{
		delete screens[i];
 800b558:	7bfb      	ldrb	r3, [r7, #15]
 800b55a:	687a      	ldr	r2, [r7, #4]
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	4413      	add	r3, r2
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d003      	beq.n	800b56e <_ZN2UID1Ev+0x2a>
 800b566:	2104      	movs	r1, #4
 800b568:	4618      	mov	r0, r3
 800b56a:	f00d f913 	bl	8018794 <_ZdlPvj>
	for (uint8_t i=0; i<screensNumber; i++)
 800b56e:	7bfb      	ldrb	r3, [r7, #15]
 800b570:	3301      	adds	r3, #1
 800b572:	73fb      	strb	r3, [r7, #15]
 800b574:	7bfb      	ldrb	r3, [r7, #15]
 800b576:	2b04      	cmp	r3, #4
 800b578:	d9ee      	bls.n	800b558 <_ZN2UID1Ev+0x14>
	}
}
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	4618      	mov	r0, r3
 800b57e:	3710      	adds	r7, #16
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}
 800b584:	0801fb90 	.word	0x0801fb90

0800b588 <_ZN2UI4showEPKc>:

void UI::show(const char *screenName)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < screensNumber; i++) {
 800b592:	2300      	movs	r3, #0
 800b594:	73fb      	strb	r3, [r7, #15]
 800b596:	e028      	b.n	800b5ea <_ZN2UI4showEPKc+0x62>
		if(screens[i]->matchName(screenName))
 800b598:	7bfb      	ldrb	r3, [r7, #15]
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	4413      	add	r3, r2
 800b5a0:	6858      	ldr	r0, [r3, #4]
 800b5a2:	7bfb      	ldrb	r3, [r7, #15]
 800b5a4:	687a      	ldr	r2, [r7, #4]
 800b5a6:	009b      	lsls	r3, r3, #2
 800b5a8:	4413      	add	r3, r2
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	330c      	adds	r3, #12
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	6839      	ldr	r1, [r7, #0]
 800b5b4:	4798      	blx	r3
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d013      	beq.n	800b5e4 <_ZN2UI4showEPKc+0x5c>
		{
			clear();
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 f875 	bl	800b6ac <_ZN2UI5clearEv>
			currentScreen = screens[i];
 800b5c2:	7bfb      	ldrb	r3, [r7, #15]
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	4413      	add	r3, r2
 800b5ca:	685a      	ldr	r2, [r3, #4]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	619a      	str	r2, [r3, #24]
			currentScreen->show();
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	699a      	ldr	r2, [r3, #24]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	699b      	ldr	r3, [r3, #24]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	3308      	adds	r3, #8
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4610      	mov	r0, r2
 800b5e0:	4798      	blx	r3

			return;
 800b5e2:	e010      	b.n	800b606 <_ZN2UI4showEPKc+0x7e>
	for (uint8_t i = 0; i < screensNumber; i++) {
 800b5e4:	7bfb      	ldrb	r3, [r7, #15]
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	73fb      	strb	r3, [r7, #15]
 800b5ea:	7bfb      	ldrb	r3, [r7, #15]
 800b5ec:	2b04      	cmp	r3, #4
 800b5ee:	d9d3      	bls.n	800b598 <_ZN2UI4showEPKc+0x10>
		}
	}

	throw "Screen not found";
 800b5f0:	2004      	movs	r0, #4
 800b5f2:	f00d f941 	bl	8018878 <__cxa_allocate_exception>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	4a04      	ldr	r2, [pc, #16]	; (800b60c <_ZN2UI4showEPKc+0x84>)
 800b5fa:	601a      	str	r2, [r3, #0]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	4904      	ldr	r1, [pc, #16]	; (800b610 <_ZN2UI4showEPKc+0x88>)
 800b600:	4618      	mov	r0, r3
 800b602:	f00d fe71 	bl	80192e8 <__cxa_throw>
}
 800b606:	3710      	adds	r7, #16
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	0801e9f8 	.word	0x0801e9f8
 800b610:	08023b60 	.word	0x08023b60

0800b614 <_ZN2UI19selectButtonPressedEv>:

void UI::selectButtonPressed()
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
	currentScreen->selectButtonPressed();
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	699a      	ldr	r2, [r3, #24]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	699b      	ldr	r3, [r3, #24]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4610      	mov	r0, r2
 800b62a:	4798      	blx	r3
}
 800b62c:	bf00      	nop
 800b62e:	3708      	adds	r7, #8
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <_ZN2UI17moveButtonPressedEv>:

void UI::moveButtonPressed()
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
	currentScreen->moveButtonPressed();
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	699a      	ldr	r2, [r3, #24]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	699b      	ldr	r3, [r3, #24]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	3304      	adds	r3, #4
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4610      	mov	r0, r2
 800b64c:	4798      	blx	r3
}
 800b64e:	bf00      	nop
 800b650:	3708      	adds	r7, #8
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
	...

0800b658 <_ZN2UI5startEv>:

void UI::start()
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
	DEV_Module_Init();
 800b660:	f008 fa22 	bl	8013aa8 <_Z15DEV_Module_Initv>
	LCD_2IN_SetBackLight(100);
 800b664:	2064      	movs	r0, #100	; 0x64
 800b666:	f008 febb 	bl	80143e0 <_Z20LCD_2IN_SetBackLightt>
	LCD_2IN_Init();
 800b66a:	f008 fd01 	bl	8014070 <_Z12LCD_2IN_Initv>
	LCD_2IN_Clear(BLACK);
 800b66e:	2000      	movs	r0, #0
 800b670:	f008 fe6e 	bl	8014350 <_Z13LCD_2IN_Cleart>

	Paint_NewImage(LCD_2IN_WIDTH,LCD_2IN_HEIGHT, ROTATE_90, WHITE);
 800b674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b678:	225a      	movs	r2, #90	; 0x5a
 800b67a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b67e:	20f0      	movs	r0, #240	; 0xf0
 800b680:	f008 fa2e 	bl	8013ae0 <_Z14Paint_NewImagetttt>

	Paint_SetClearFuntion(LCD_2IN_Clear);
 800b684:	4806      	ldr	r0, [pc, #24]	; (800b6a0 <_ZN2UI5startEv+0x48>)
 800b686:	f008 fa77 	bl	8013b78 <_Z21Paint_SetClearFuntionPFvtE>
	Paint_SetDisplayFuntion(LCD_2IN_DrawPaint);
 800b68a:	4806      	ldr	r0, [pc, #24]	; (800b6a4 <_ZN2UI5startEv+0x4c>)
 800b68c:	f008 fa84 	bl	8013b98 <_Z23Paint_SetDisplayFuntionPFvtttE>

	show(UiMenuScreen::name);
 800b690:	4905      	ldr	r1, [pc, #20]	; (800b6a8 <_ZN2UI5startEv+0x50>)
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f7ff ff78 	bl	800b588 <_ZN2UI4showEPKc>
}
 800b698:	bf00      	nop
 800b69a:	3708      	adds	r7, #8
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}
 800b6a0:	08014351 	.word	0x08014351
 800b6a4:	080143b1 	.word	0x080143b1
 800b6a8:	0801ea0c 	.word	0x0801ea0c

0800b6ac <_ZN2UI5clearEv>:

void UI::clear()
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
	Paint_Clear(BLACK);
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	f008 fb39 	bl	8013d2c <_Z11Paint_Cleart>
}
 800b6ba:	bf00      	nop
 800b6bc:	3708      	adds	r7, #8
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
	...

0800b6c4 <_ZN2UI10printErrorEPKc>:

void UI::printError(const char* error)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af02      	add	r7, sp, #8
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
	Paint_DrawString_EN(5, 210, error, &Font12, RED, WHITE);
 800b6ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b6d2:	9301      	str	r3, [sp, #4]
 800b6d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800b6d8:	9300      	str	r3, [sp, #0]
 800b6da:	4b05      	ldr	r3, [pc, #20]	; (800b6f0 <_ZN2UI10printErrorEPKc+0x2c>)
 800b6dc:	683a      	ldr	r2, [r7, #0]
 800b6de:	21d2      	movs	r1, #210	; 0xd2
 800b6e0:	2005      	movs	r0, #5
 800b6e2:	f008 fbe1 	bl	8013ea8 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>
}
 800b6e6:	bf00      	nop
 800b6e8:	3708      	adds	r7, #8
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	2000000c 	.word	0x2000000c

0800b6f4 <_ZN2UI9onUiEventER7UiEvent>:

void UI::onUiEvent(UiEvent &event)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
	if (event.matchName(UiEventName::ShowScreenUiEventName))
 800b6fe:	2104      	movs	r1, #4
 800b700:	6838      	ldr	r0, [r7, #0]
 800b702:	f7fc fbe1 	bl	8007ec8 <_ZN7UiEvent9matchNameE11UiEventName>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d009      	beq.n	800b720 <_ZN2UI9onUiEventER7UiEvent+0x2c>
	{
		ShowScreenUiEvent *showScreenUiEvent = (ShowScreenUiEvent*) &event;
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	60fb      	str	r3, [r7, #12]
		show(showScreenUiEvent->getScreenName());
 800b710:	68f8      	ldr	r0, [r7, #12]
 800b712:	f7ff fe9f 	bl	800b454 <_ZN17ShowScreenUiEvent13getScreenNameEv>
 800b716:	4603      	mov	r3, r0
 800b718:	4619      	mov	r1, r3
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f7ff ff34 	bl	800b588 <_ZN2UI4showEPKc>
	}

	currentScreen->onUiEvent(event);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	699a      	ldr	r2, [r3, #24]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	699b      	ldr	r3, [r3, #24]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	3310      	adds	r3, #16
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	6839      	ldr	r1, [r7, #0]
 800b730:	4610      	mov	r0, r2
 800b732:	4798      	blx	r3
}
 800b734:	bf00      	nop
 800b736:	3710      	adds	r7, #16
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <_ZN12SDCardStatus14getTotalMBytesEv>:

		uint32_t getTotalMBytes()
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
		{
			return totalMBytes;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74a:	4613      	mov	r3, r2
		}
 800b74c:	4618      	mov	r0, r3
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <_ZN12SDCardStatus13getFreeMBytesEv>:

		uint32_t getFreeMBytes()
 800b758:	b480      	push	{r7}
 800b75a:	b083      	sub	sp, #12
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
		{
			return freeMBytes;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b766:	4613      	mov	r3, r2
		}
 800b768:	4618      	mov	r0, r3
 800b76a:	370c      	adds	r7, #12
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <_ZN12SDCardStatus13getUsedMBytesEv>:

		uint32_t getUsedMBytes()
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
		{
			return usedMBytes;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b782:	4613      	mov	r3, r2
		}
 800b784:	4618      	mov	r0, r3
 800b786:	370c      	adds	r7, #12
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr

0800b790 <_ZN12SDCardStatus14getTotalGBytesEv>:

		uint32_t getTotalGBytes()
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
		{
			return totalMBytes/1024;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b79e:	f04f 0200 	mov.w	r2, #0
 800b7a2:	f04f 0300 	mov.w	r3, #0
 800b7a6:	0a82      	lsrs	r2, r0, #10
 800b7a8:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800b7ac:	0a8b      	lsrs	r3, r1, #10
 800b7ae:	4613      	mov	r3, r2
		}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <_ZN12SDCardStatus13getFreeGBytesEv>:

		uint32_t getFreeGBytes()
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
		{
			return freeMBytes/1024;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b7ca:	f04f 0200 	mov.w	r2, #0
 800b7ce:	f04f 0300 	mov.w	r3, #0
 800b7d2:	0a82      	lsrs	r2, r0, #10
 800b7d4:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800b7d8:	0a8b      	lsrs	r3, r1, #10
 800b7da:	4613      	mov	r3, r2
		}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	370c      	adds	r7, #12
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <_ZN12SDCardStatus13getUsedGBytesEv>:

		uint32_t getUsedGBytes()
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
		{
			return usedMBytes/1024;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b7f6:	f04f 0200 	mov.w	r2, #0
 800b7fa:	f04f 0300 	mov.w	r3, #0
 800b7fe:	0a82      	lsrs	r2, r0, #10
 800b800:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800b804:	0a8b      	lsrs	r3, r1, #10
 800b806:	4613      	mov	r3, r2
		}
 800b808:	4618      	mov	r0, r3
 800b80a:	370c      	adds	r7, #12
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr

0800b814 <_ZN12SDCardStatus8getTotalEPc>:

		void getTotal(char* total)
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
		{
			if (this->getTotalGBytes() > 0) {
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f7ff ffb6 	bl	800b790 <_ZN12SDCardStatus14getTotalGBytesEv>
 800b824:	4603      	mov	r3, r0
 800b826:	2b00      	cmp	r3, #0
 800b828:	bf14      	ite	ne
 800b82a:	2301      	movne	r3, #1
 800b82c:	2300      	moveq	r3, #0
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	2b00      	cmp	r3, #0
 800b832:	d009      	beq.n	800b848 <_ZN12SDCardStatus8getTotalEPc+0x34>
				sprintf(total, "%ld%s", this->getTotalGBytes(), "G");
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f7ff ffab 	bl	800b790 <_ZN12SDCardStatus14getTotalGBytesEv>
 800b83a:	4602      	mov	r2, r0
 800b83c:	4b08      	ldr	r3, [pc, #32]	; (800b860 <_ZN12SDCardStatus8getTotalEPc+0x4c>)
 800b83e:	4909      	ldr	r1, [pc, #36]	; (800b864 <_ZN12SDCardStatus8getTotalEPc+0x50>)
 800b840:	6838      	ldr	r0, [r7, #0]
 800b842:	f00f fff7 	bl	801b834 <siprintf>
				return;
 800b846:	e008      	b.n	800b85a <_ZN12SDCardStatus8getTotalEPc+0x46>
			}

			sprintf(total, "%ld%s", this->getTotalMBytes(), "M");
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f7ff ff77 	bl	800b73c <_ZN12SDCardStatus14getTotalMBytesEv>
 800b84e:	4602      	mov	r2, r0
 800b850:	4b05      	ldr	r3, [pc, #20]	; (800b868 <_ZN12SDCardStatus8getTotalEPc+0x54>)
 800b852:	4904      	ldr	r1, [pc, #16]	; (800b864 <_ZN12SDCardStatus8getTotalEPc+0x50>)
 800b854:	6838      	ldr	r0, [r7, #0]
 800b856:	f00f ffed 	bl	801b834 <siprintf>
		}
 800b85a:	3708      	adds	r7, #8
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	0801ea1c 	.word	0x0801ea1c
 800b864:	0801ea20 	.word	0x0801ea20
 800b868:	0801ea28 	.word	0x0801ea28

0800b86c <_ZN12SDCardStatus7getFreeEPc>:

		void getFree(char* free)
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	6039      	str	r1, [r7, #0]
		{
			if (this->getFreeGBytes() > 0) {
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f7ff ffa0 	bl	800b7bc <_ZN12SDCardStatus13getFreeGBytesEv>
 800b87c:	4603      	mov	r3, r0
 800b87e:	2b00      	cmp	r3, #0
 800b880:	bf14      	ite	ne
 800b882:	2301      	movne	r3, #1
 800b884:	2300      	moveq	r3, #0
 800b886:	b2db      	uxtb	r3, r3
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d009      	beq.n	800b8a0 <_ZN12SDCardStatus7getFreeEPc+0x34>
				sprintf(free, "%ld%s", this->getFreeGBytes(), "G");
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f7ff ff95 	bl	800b7bc <_ZN12SDCardStatus13getFreeGBytesEv>
 800b892:	4602      	mov	r2, r0
 800b894:	4b08      	ldr	r3, [pc, #32]	; (800b8b8 <_ZN12SDCardStatus7getFreeEPc+0x4c>)
 800b896:	4909      	ldr	r1, [pc, #36]	; (800b8bc <_ZN12SDCardStatus7getFreeEPc+0x50>)
 800b898:	6838      	ldr	r0, [r7, #0]
 800b89a:	f00f ffcb 	bl	801b834 <siprintf>
				return;
 800b89e:	e008      	b.n	800b8b2 <_ZN12SDCardStatus7getFreeEPc+0x46>
			}

			sprintf(free, "%ld%s", this->getFreeMBytes(), "M");
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f7ff ff59 	bl	800b758 <_ZN12SDCardStatus13getFreeMBytesEv>
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	4b05      	ldr	r3, [pc, #20]	; (800b8c0 <_ZN12SDCardStatus7getFreeEPc+0x54>)
 800b8aa:	4904      	ldr	r1, [pc, #16]	; (800b8bc <_ZN12SDCardStatus7getFreeEPc+0x50>)
 800b8ac:	6838      	ldr	r0, [r7, #0]
 800b8ae:	f00f ffc1 	bl	801b834 <siprintf>
		}
 800b8b2:	3708      	adds	r7, #8
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}
 800b8b8:	0801ea1c 	.word	0x0801ea1c
 800b8bc:	0801ea20 	.word	0x0801ea20
 800b8c0:	0801ea28 	.word	0x0801ea28

0800b8c4 <_ZN12SDCardStatus7getUsedEPc>:

		void getUsed(char* used)
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
		{
			if (this->getUsedGBytes() > 0) {
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f7ff ff8a 	bl	800b7e8 <_ZN12SDCardStatus13getUsedGBytesEv>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	bf14      	ite	ne
 800b8da:	2301      	movne	r3, #1
 800b8dc:	2300      	moveq	r3, #0
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d009      	beq.n	800b8f8 <_ZN12SDCardStatus7getUsedEPc+0x34>
				sprintf(used, "%ld%s", this->getUsedGBytes(), "G");
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f7ff ff7f 	bl	800b7e8 <_ZN12SDCardStatus13getUsedGBytesEv>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	4b08      	ldr	r3, [pc, #32]	; (800b910 <_ZN12SDCardStatus7getUsedEPc+0x4c>)
 800b8ee:	4909      	ldr	r1, [pc, #36]	; (800b914 <_ZN12SDCardStatus7getUsedEPc+0x50>)
 800b8f0:	6838      	ldr	r0, [r7, #0]
 800b8f2:	f00f ff9f 	bl	801b834 <siprintf>
				return;
 800b8f6:	e008      	b.n	800b90a <_ZN12SDCardStatus7getUsedEPc+0x46>
			}

			sprintf(used, "%ld%s", this->getUsedMBytes(), "M");
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f7ff ff3b 	bl	800b774 <_ZN12SDCardStatus13getUsedMBytesEv>
 800b8fe:	4602      	mov	r2, r0
 800b900:	4b05      	ldr	r3, [pc, #20]	; (800b918 <_ZN12SDCardStatus7getUsedEPc+0x54>)
 800b902:	4904      	ldr	r1, [pc, #16]	; (800b914 <_ZN12SDCardStatus7getUsedEPc+0x50>)
 800b904:	6838      	ldr	r0, [r7, #0]
 800b906:	f00f ff95 	bl	801b834 <siprintf>
		}
 800b90a:	3708      	adds	r7, #8
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}
 800b910:	0801ea1c 	.word	0x0801ea1c
 800b914:	0801ea20 	.word	0x0801ea20
 800b918:	0801ea28 	.word	0x0801ea28

0800b91c <_ZN17ShowScreenUiEventC1EPKc>:
		ShowScreenUiEvent(const char *screenName)
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b082      	sub	sp, #8
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
			this->name = UiEventName::ShowScreenUiEventName;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2204      	movs	r2, #4
 800b92a:	701a      	strb	r2, [r3, #0]
			if (strlen(screenName) > screenNameMaxLen)
 800b92c:	6838      	ldr	r0, [r7, #0]
 800b92e:	f7fa fc87 	bl	8006240 <strlen>
 800b932:	4603      	mov	r3, r0
 800b934:	2b1e      	cmp	r3, #30
 800b936:	d90a      	bls.n	800b94e <_ZN17ShowScreenUiEventC1EPKc+0x32>
				throw "too long screenName";
 800b938:	2004      	movs	r0, #4
 800b93a:	f00c ff9d 	bl	8018878 <__cxa_allocate_exception>
 800b93e:	4603      	mov	r3, r0
 800b940:	4a08      	ldr	r2, [pc, #32]	; (800b964 <_ZN17ShowScreenUiEventC1EPKc+0x48>)
 800b942:	601a      	str	r2, [r3, #0]
 800b944:	2200      	movs	r2, #0
 800b946:	4908      	ldr	r1, [pc, #32]	; (800b968 <_ZN17ShowScreenUiEventC1EPKc+0x4c>)
 800b948:	4618      	mov	r0, r3
 800b94a:	f00d fccd 	bl	80192e8 <__cxa_throw>
			strcpy(this->screenName, screenName);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	3301      	adds	r3, #1
 800b952:	6839      	ldr	r1, [r7, #0]
 800b954:	4618      	mov	r0, r3
 800b956:	f010 f992 	bl	801bc7e <strcpy>
		}
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4618      	mov	r0, r3
 800b95e:	3708      	adds	r7, #8
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}
 800b964:	0801ea2c 	.word	0x0801ea2c
 800b968:	08023b60 	.word	0x08023b60

0800b96c <_ZN26RefreshSDCardStatusUiEventC1Ev>:
		RefreshSDCardStatusUiEvent()
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
			this->name = UiEventName::RefreshSDCardStatusUiEventName;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2208      	movs	r2, #8
 800b978:	701a      	strb	r2, [r3, #0]
		}
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	4618      	mov	r0, r3
 800b97e:	370c      	adds	r7, #12
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <_ZN19SDCardStatusUiEvent15getSDCardStatusEv>:
		SDCardStatus* getSDCardStatus()
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
		{
			return sdCardStatus;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	685b      	ldr	r3, [r3, #4]
		}
 800b994:	4618      	mov	r0, r3
 800b996:	370c      	adds	r7, #12
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <_ZN8UiScreenC1Ev>:
#ifndef __UI_SCREEN_CLASS_H
#define __UI_SCREEN_CLASS_H

#include "ui.events.h"

class UiScreen
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	4a04      	ldr	r2, [pc, #16]	; (800b9bc <_ZN8UiScreenC1Ev+0x1c>)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	601a      	str	r2, [r3, #0]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	370c      	adds	r7, #12
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr
 800b9bc:	0801fbb8 	.word	0x0801fbb8

0800b9c0 <_ZN12UiInfoScreenC1EP17UiEventDispatcher>:
#include "ui.info.screen.class.h"

UiInfoScreen::UiInfoScreen(UiEventDispatcher *uiEventDispatcher)
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7ff ffe7 	bl	800b9a0 <_ZN8UiScreenC1Ev>
 800b9d2:	4a05      	ldr	r2, [pc, #20]	; (800b9e8 <_ZN12UiInfoScreenC1EP17UiEventDispatcher+0x28>)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	601a      	str	r2, [r3, #0]
{
	this->uiEventDispatcher = uiEventDispatcher;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	683a      	ldr	r2, [r7, #0]
 800b9dc:	605a      	str	r2, [r3, #4]
}
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3708      	adds	r7, #8
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	0801fb9c 	.word	0x0801fb9c

0800b9ec <_ZN12UiInfoScreen9matchNameEPKc>:

bool UiInfoScreen::matchName(const char *nameToMatch)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
	return strcmp(UiInfoScreen::name, nameToMatch) == 0;
 800b9f6:	6839      	ldr	r1, [r7, #0]
 800b9f8:	4806      	ldr	r0, [pc, #24]	; (800ba14 <_ZN12UiInfoScreen9matchNameEPKc+0x28>)
 800b9fa:	f7fa fbc1 	bl	8006180 <strcmp>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	bf0c      	ite	eq
 800ba04:	2301      	moveq	r3, #1
 800ba06:	2300      	movne	r3, #0
 800ba08:	b2db      	uxtb	r3, r3
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3708      	adds	r7, #8
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	0801ea40 	.word	0x0801ea40

0800ba18 <_ZN12UiInfoScreen4showEv>:

void UiInfoScreen::show()
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b086      	sub	sp, #24
 800ba1c:	af02      	add	r7, sp, #8
 800ba1e:	6078      	str	r0, [r7, #4]
	Paint_DrawString_EN (5, 10, "GPS tracker v0.01", &Font20, BLACK, YELLOW);
 800ba20:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800ba24:	9301      	str	r3, [sp, #4]
 800ba26:	2300      	movs	r3, #0
 800ba28:	9300      	str	r3, [sp, #0]
 800ba2a:	4b16      	ldr	r3, [pc, #88]	; (800ba84 <_ZN12UiInfoScreen4showEv+0x6c>)
 800ba2c:	4a16      	ldr	r2, [pc, #88]	; (800ba88 <_ZN12UiInfoScreen4showEv+0x70>)
 800ba2e:	210a      	movs	r1, #10
 800ba30:	2005      	movs	r0, #5
 800ba32:	f008 fa39 	bl	8013ea8 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>
	Paint_DrawString_EN (5, 30, "SD Card", &Font20, BLACK, YELLOW);
 800ba36:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800ba3a:	9301      	str	r3, [sp, #4]
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	9300      	str	r3, [sp, #0]
 800ba40:	4b10      	ldr	r3, [pc, #64]	; (800ba84 <_ZN12UiInfoScreen4showEv+0x6c>)
 800ba42:	4a12      	ldr	r2, [pc, #72]	; (800ba8c <_ZN12UiInfoScreen4showEv+0x74>)
 800ba44:	211e      	movs	r1, #30
 800ba46:	2005      	movs	r0, #5
 800ba48:	f008 fa2e 	bl	8013ea8 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>

	Paint_DrawString_EN (5, 210, "MENU", &Font24, BLACK, YELLOW);
 800ba4c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800ba50:	9301      	str	r3, [sp, #4]
 800ba52:	2300      	movs	r3, #0
 800ba54:	9300      	str	r3, [sp, #0]
 800ba56:	4b0e      	ldr	r3, [pc, #56]	; (800ba90 <_ZN12UiInfoScreen4showEv+0x78>)
 800ba58:	4a0e      	ldr	r2, [pc, #56]	; (800ba94 <_ZN12UiInfoScreen4showEv+0x7c>)
 800ba5a:	21d2      	movs	r1, #210	; 0xd2
 800ba5c:	2005      	movs	r0, #5
 800ba5e:	f008 fa23 	bl	8013ea8 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>

	RefreshSDCardStatusUiEvent refreshSDCardStatusUiEvent;
 800ba62:	f107 030c 	add.w	r3, r7, #12
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7ff ff80 	bl	800b96c <_ZN26RefreshSDCardStatusUiEventC1Ev>
	uiEventDispatcher->dispatch(refreshSDCardStatusUiEvent);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	f107 020c 	add.w	r2, r7, #12
 800ba74:	4611      	mov	r1, r2
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7fc fae1 	bl	800803e <_ZN17UiEventDispatcher8dispatchER7UiEvent>
}
 800ba7c:	bf00      	nop
 800ba7e:	3710      	adds	r7, #16
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	2000001c 	.word	0x2000001c
 800ba88:	0801ea50 	.word	0x0801ea50
 800ba8c:	0801ea64 	.word	0x0801ea64
 800ba90:	20000024 	.word	0x20000024
 800ba94:	0801ea6c 	.word	0x0801ea6c

0800ba98 <_ZN12UiInfoScreen9onUiEventER7UiEvent>:

void UiInfoScreen::onUiEvent(UiEvent &event)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	6039      	str	r1, [r7, #0]
	if (event.matchName(UiEventName::SDCardStatusUiEventName))
 800baa2:	2109      	movs	r1, #9
 800baa4:	6838      	ldr	r0, [r7, #0]
 800baa6:	f7fc fa0f 	bl	8007ec8 <_ZN7UiEvent9matchNameE11UiEventName>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d009      	beq.n	800bac4 <_ZN12UiInfoScreen9onUiEventER7UiEvent+0x2c>
	{
		SDCardStatusUiEvent *sdCardStatusUiEvent = (SDCardStatusUiEvent*) &event;
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	60fb      	str	r3, [r7, #12]
		refreshSDCardStatus(sdCardStatusUiEvent->getSDCardStatus());
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f7ff ff67 	bl	800b988 <_ZN19SDCardStatusUiEvent15getSDCardStatusEv>
 800baba:	4603      	mov	r3, r0
 800babc:	4619      	mov	r1, r3
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 f804 	bl	800bacc <_ZN12UiInfoScreen19refreshSDCardStatusEP12SDCardStatus>
	}
}
 800bac4:	bf00      	nop
 800bac6:	3710      	adds	r7, #16
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <_ZN12UiInfoScreen19refreshSDCardStatusEP12SDCardStatus>:

void UiInfoScreen::refreshSDCardStatus(SDCardStatus* sdCardStatus)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b094      	sub	sp, #80	; 0x50
 800bad0:	af02      	add	r7, sp, #8
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
	char outputBuffer[40];
	char size[20];

	sdCardStatus->getTotal(size);
 800bad6:	f107 030c 	add.w	r3, r7, #12
 800bada:	4619      	mov	r1, r3
 800badc:	6838      	ldr	r0, [r7, #0]
 800bade:	f7ff fe99 	bl	800b814 <_ZN12SDCardStatus8getTotalEPc>
	sprintf(outputBuffer, "Total: %s", size);
 800bae2:	f107 020c 	add.w	r2, r7, #12
 800bae6:	f107 0320 	add.w	r3, r7, #32
 800baea:	4924      	ldr	r1, [pc, #144]	; (800bb7c <_ZN12UiInfoScreen19refreshSDCardStatusEP12SDCardStatus+0xb0>)
 800baec:	4618      	mov	r0, r3
 800baee:	f00f fea1 	bl	801b834 <siprintf>
	Paint_DrawString_EN (30, 50, outputBuffer, &Font20, BLACK, YELLOW);
 800baf2:	f107 0220 	add.w	r2, r7, #32
 800baf6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800bafa:	9301      	str	r3, [sp, #4]
 800bafc:	2300      	movs	r3, #0
 800bafe:	9300      	str	r3, [sp, #0]
 800bb00:	4b1f      	ldr	r3, [pc, #124]	; (800bb80 <_ZN12UiInfoScreen19refreshSDCardStatusEP12SDCardStatus+0xb4>)
 800bb02:	2132      	movs	r1, #50	; 0x32
 800bb04:	201e      	movs	r0, #30
 800bb06:	f008 f9cf 	bl	8013ea8 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>

	sdCardStatus->getUsed(size);
 800bb0a:	f107 030c 	add.w	r3, r7, #12
 800bb0e:	4619      	mov	r1, r3
 800bb10:	6838      	ldr	r0, [r7, #0]
 800bb12:	f7ff fed7 	bl	800b8c4 <_ZN12SDCardStatus7getUsedEPc>
	sprintf(outputBuffer, "Used: %s", size);
 800bb16:	f107 020c 	add.w	r2, r7, #12
 800bb1a:	f107 0320 	add.w	r3, r7, #32
 800bb1e:	4919      	ldr	r1, [pc, #100]	; (800bb84 <_ZN12UiInfoScreen19refreshSDCardStatusEP12SDCardStatus+0xb8>)
 800bb20:	4618      	mov	r0, r3
 800bb22:	f00f fe87 	bl	801b834 <siprintf>
	Paint_DrawString_EN (30, 70, outputBuffer, &Font20, BLACK, YELLOW);
 800bb26:	f107 0220 	add.w	r2, r7, #32
 800bb2a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800bb2e:	9301      	str	r3, [sp, #4]
 800bb30:	2300      	movs	r3, #0
 800bb32:	9300      	str	r3, [sp, #0]
 800bb34:	4b12      	ldr	r3, [pc, #72]	; (800bb80 <_ZN12UiInfoScreen19refreshSDCardStatusEP12SDCardStatus+0xb4>)
 800bb36:	2146      	movs	r1, #70	; 0x46
 800bb38:	201e      	movs	r0, #30
 800bb3a:	f008 f9b5 	bl	8013ea8 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>

	sdCardStatus->getFree(size);
 800bb3e:	f107 030c 	add.w	r3, r7, #12
 800bb42:	4619      	mov	r1, r3
 800bb44:	6838      	ldr	r0, [r7, #0]
 800bb46:	f7ff fe91 	bl	800b86c <_ZN12SDCardStatus7getFreeEPc>
	sprintf(outputBuffer, "Free: %s", size);
 800bb4a:	f107 020c 	add.w	r2, r7, #12
 800bb4e:	f107 0320 	add.w	r3, r7, #32
 800bb52:	490d      	ldr	r1, [pc, #52]	; (800bb88 <_ZN12UiInfoScreen19refreshSDCardStatusEP12SDCardStatus+0xbc>)
 800bb54:	4618      	mov	r0, r3
 800bb56:	f00f fe6d 	bl	801b834 <siprintf>
	Paint_DrawString_EN (30, 90, outputBuffer, &Font20, BLACK, YELLOW);
 800bb5a:	f107 0220 	add.w	r2, r7, #32
 800bb5e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800bb62:	9301      	str	r3, [sp, #4]
 800bb64:	2300      	movs	r3, #0
 800bb66:	9300      	str	r3, [sp, #0]
 800bb68:	4b05      	ldr	r3, [pc, #20]	; (800bb80 <_ZN12UiInfoScreen19refreshSDCardStatusEP12SDCardStatus+0xb4>)
 800bb6a:	215a      	movs	r1, #90	; 0x5a
 800bb6c:	201e      	movs	r0, #30
 800bb6e:	f008 f99b 	bl	8013ea8 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>
}
 800bb72:	bf00      	nop
 800bb74:	3748      	adds	r7, #72	; 0x48
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	0801ea74 	.word	0x0801ea74
 800bb80:	2000001c 	.word	0x2000001c
 800bb84:	0801ea80 	.word	0x0801ea80
 800bb88:	0801ea8c 	.word	0x0801ea8c

0800bb8c <_ZN12UiInfoScreen19selectButtonPressedEv>:

void UiInfoScreen::selectButtonPressed()
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b083      	sub	sp, #12
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]

}
 800bb94:	bf00      	nop
 800bb96:	370c      	adds	r7, #12
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr

0800bba0 <_ZN12UiInfoScreen17moveButtonPressedEv>:

void UiInfoScreen::moveButtonPressed()
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b08a      	sub	sp, #40	; 0x28
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
	ShowScreenUiEvent showScreenUiEvent(UiMenuScreen::name);
 800bba8:	f107 0308 	add.w	r3, r7, #8
 800bbac:	4907      	ldr	r1, [pc, #28]	; (800bbcc <_ZN12UiInfoScreen17moveButtonPressedEv+0x2c>)
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7ff feb4 	bl	800b91c <_ZN17ShowScreenUiEventC1EPKc>
	uiEventDispatcher->dispatch(showScreenUiEvent);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	f107 0208 	add.w	r2, r7, #8
 800bbbc:	4611      	mov	r1, r2
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7fc fa3d 	bl	800803e <_ZN17UiEventDispatcher8dispatchER7UiEvent>
}
 800bbc4:	bf00      	nop
 800bbc6:	3728      	adds	r7, #40	; 0x28
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	0801ea98 	.word	0x0801ea98

0800bbd0 <_ZN12UiMenuScreenC1EP17UiEventDispatcher>:
#include "ui.menu.screen.class.h"
#include "ui.info.screen.class.h"
#include "ui.sync_gps.screen.class.h"
#include "ui.record_gps.screen.class.h"

UiMenuScreen::UiMenuScreen(UiEventDispatcher *uiEventDispatcher)
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	6039      	str	r1, [r7, #0]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f7ff fedf 	bl	800b9a0 <_ZN8UiScreenC1Ev>
 800bbe2:	4a11      	ldr	r2, [pc, #68]	; (800bc28 <_ZN12UiMenuScreenC1EP17UiEventDispatcher+0x58>)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	601a      	str	r2, [r3, #0]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	711a      	strb	r2, [r3, #4]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	715a      	strb	r2, [r3, #5]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2202      	movs	r2, #2
 800bbf8:	719a      	strb	r2, [r3, #6]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2203      	movs	r2, #3
 800bbfe:	71da      	strb	r2, [r3, #7]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	4a0a      	ldr	r2, [pc, #40]	; (800bc2c <_ZN12UiMenuScreenC1EP17UiEventDispatcher+0x5c>)
 800bc04:	3308      	adds	r3, #8
 800bc06:	4611      	mov	r1, r2
 800bc08:	2248      	movs	r2, #72	; 0x48
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f010 f83f 	bl	801bc8e <memcpy>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
{
	this->uiEventDispatcher = uiEventDispatcher;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	683a      	ldr	r2, [r7, #0]
 800bc1c:	655a      	str	r2, [r3, #84]	; 0x54
}
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	4618      	mov	r0, r3
 800bc22:	3708      	adds	r7, #8
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	0801fbd4 	.word	0x0801fbd4
 800bc2c:	0801eabc 	.word	0x0801eabc

0800bc30 <_ZN12UiMenuScreen9matchNameEPKc>:

bool UiMenuScreen::matchName(const char *nameToMatch)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
	return strcmp(UiMenuScreen::name, nameToMatch) == 0;
 800bc3a:	6839      	ldr	r1, [r7, #0]
 800bc3c:	4806      	ldr	r0, [pc, #24]	; (800bc58 <_ZN12UiMenuScreen9matchNameEPKc+0x28>)
 800bc3e:	f7fa fa9f 	bl	8006180 <strcmp>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	bf0c      	ite	eq
 800bc48:	2301      	moveq	r3, #1
 800bc4a:	2300      	movne	r3, #0
 800bc4c:	b2db      	uxtb	r3, r3
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3708      	adds	r7, #8
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	0801eb04 	.word	0x0801eb04

0800bc5c <_ZN12UiMenuScreen19selectButtonPressedEv>:

void UiMenuScreen::selectButtonPressed()
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b08a      	sub	sp, #40	; 0x28
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
	if (activeMenuItemNumber == MENU_ITEM_RECORD_GPS)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	791b      	ldrb	r3, [r3, #4]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d10d      	bne.n	800bc8e <_ZN12UiMenuScreen19selectButtonPressedEv+0x32>
	{
		ShowScreenUiEvent showScreenUiEvent(UiRecordGpsScreen::name);
 800bc72:	f107 0308 	add.w	r3, r7, #8
 800bc76:	491d      	ldr	r1, [pc, #116]	; (800bcec <_ZN12UiMenuScreen19selectButtonPressedEv+0x90>)
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f7ff fe4f 	bl	800b91c <_ZN17ShowScreenUiEventC1EPKc>
		uiEventDispatcher->dispatch(showScreenUiEvent);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc82:	f107 0208 	add.w	r2, r7, #8
 800bc86:	4611      	mov	r1, r2
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7fc f9d8 	bl	800803e <_ZN17UiEventDispatcher8dispatchER7UiEvent>
	}

	if (activeMenuItemNumber == MENU_ITEM_SYNC_GPS)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	795b      	ldrb	r3, [r3, #5]
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d10d      	bne.n	800bcb8 <_ZN12UiMenuScreen19selectButtonPressedEv+0x5c>
	{
		ShowScreenUiEvent showScreenUiEvent(UiSyncGpsScreen::name);
 800bc9c:	f107 0308 	add.w	r3, r7, #8
 800bca0:	4913      	ldr	r1, [pc, #76]	; (800bcf0 <_ZN12UiMenuScreen19selectButtonPressedEv+0x94>)
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7ff fe3a 	bl	800b91c <_ZN17ShowScreenUiEventC1EPKc>
		uiEventDispatcher->dispatch(showScreenUiEvent);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcac:	f107 0208 	add.w	r2, r7, #8
 800bcb0:	4611      	mov	r1, r2
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f7fc f9c3 	bl	800803e <_ZN17UiEventDispatcher8dispatchER7UiEvent>
	}

	if (activeMenuItemNumber == MENU_ITEM_INFO)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	79db      	ldrb	r3, [r3, #7]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d10d      	bne.n	800bce2 <_ZN12UiMenuScreen19selectButtonPressedEv+0x86>
	{
		ShowScreenUiEvent showScreenUiEvent(UiInfoScreen::name);
 800bcc6:	f107 0308 	add.w	r3, r7, #8
 800bcca:	490a      	ldr	r1, [pc, #40]	; (800bcf4 <_ZN12UiMenuScreen19selectButtonPressedEv+0x98>)
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7ff fe25 	bl	800b91c <_ZN17ShowScreenUiEventC1EPKc>
		uiEventDispatcher->dispatch(showScreenUiEvent);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcd6:	f107 0208 	add.w	r2, r7, #8
 800bcda:	4611      	mov	r1, r2
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f7fc f9ae 	bl	800803e <_ZN17UiEventDispatcher8dispatchER7UiEvent>
	}
}
 800bce2:	bf00      	nop
 800bce4:	3728      	adds	r7, #40	; 0x28
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	0801eb14 	.word	0x0801eb14
 800bcf0:	0801eb28 	.word	0x0801eb28
 800bcf4:	0801eb38 	.word	0x0801eb38

0800bcf8 <_ZN12UiMenuScreen17moveButtonPressedEv>:

void UiMenuScreen::moveButtonPressed()
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
	uint8_t activeMenuItemNumberPrev = activeMenuItemNumber;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bd06:	73fb      	strb	r3, [r7, #15]

	++activeMenuItemNumber;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bd0e:	3301      	adds	r3, #1
 800bd10:	b2da      	uxtb	r2, r3
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	if (activeMenuItemNumber >= menuItemsNumber)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bd1e:	2b03      	cmp	r3, #3
 800bd20:	d903      	bls.n	800bd2a <_ZN12UiMenuScreen17moveButtonPressedEv+0x32>
	{
		activeMenuItemNumber = 0;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}

	showMenuItem(activeMenuItemNumberPrev);
 800bd2a:	7bfb      	ldrb	r3, [r7, #15]
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 f82e 	bl	800bd90 <_ZN12UiMenuScreen12showMenuItemEh>
	showMenuItem(activeMenuItemNumber);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f000 f827 	bl	800bd90 <_ZN12UiMenuScreen12showMenuItemEh>
}
 800bd42:	bf00      	nop
 800bd44:	3710      	adds	r7, #16
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}

0800bd4a <_ZN12UiMenuScreen9onUiEventER7UiEvent>:

void UiMenuScreen::onUiEvent(UiEvent &event)
{
 800bd4a:	b480      	push	{r7}
 800bd4c:	b083      	sub	sp, #12
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
 800bd52:	6039      	str	r1, [r7, #0]

}
 800bd54:	bf00      	nop
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <_ZN12UiMenuScreen4showEv>:

void UiMenuScreen::show()
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < menuItemsNumber; i++) {
 800bd68:	2300      	movs	r3, #0
 800bd6a:	73fb      	strb	r3, [r7, #15]
 800bd6c:	e007      	b.n	800bd7e <_ZN12UiMenuScreen4showEv+0x1e>
		showMenuItem(i);
 800bd6e:	7bfb      	ldrb	r3, [r7, #15]
 800bd70:	4619      	mov	r1, r3
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 f80c 	bl	800bd90 <_ZN12UiMenuScreen12showMenuItemEh>
	for (uint8_t i = 0; i < menuItemsNumber; i++) {
 800bd78:	7bfb      	ldrb	r3, [r7, #15]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	73fb      	strb	r3, [r7, #15]
 800bd7e:	7bfb      	ldrb	r3, [r7, #15]
 800bd80:	2b03      	cmp	r3, #3
 800bd82:	d9f4      	bls.n	800bd6e <_ZN12UiMenuScreen4showEv+0xe>
	}
}
 800bd84:	bf00      	nop
 800bd86:	bf00      	nop
 800bd88:	3710      	adds	r7, #16
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
	...

0800bd90 <_ZN12UiMenuScreen12showMenuItemEh>:

void UiMenuScreen::showMenuItem(uint8_t menuItemNumber)
{
 800bd90:	b590      	push	{r4, r7, lr}
 800bd92:	b087      	sub	sp, #28
 800bd94:	af02      	add	r7, sp, #8
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	460b      	mov	r3, r1
 800bd9a:	70fb      	strb	r3, [r7, #3]
	uint8_t y = (menuItemNumber+1)*34;
 800bd9c:	78fb      	ldrb	r3, [r7, #3]
 800bd9e:	3301      	adds	r3, #1
 800bda0:	b2db      	uxtb	r3, r3
 800bda2:	461a      	mov	r2, r3
 800bda4:	0112      	lsls	r2, r2, #4
 800bda6:	4413      	add	r3, r2
 800bda8:	005b      	lsls	r3, r3, #1
 800bdaa:	73fb      	strb	r3, [r7, #15]
	uint8_t x = (320 - strlen(menuItems[menuItemNumber])*17)/2;
 800bdac:	78fa      	ldrb	r2, [r7, #3]
 800bdae:	4613      	mov	r3, r2
 800bdb0:	00db      	lsls	r3, r3, #3
 800bdb2:	4413      	add	r3, r2
 800bdb4:	005b      	lsls	r3, r3, #1
 800bdb6:	3308      	adds	r3, #8
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	4413      	add	r3, r2
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7fa fa3f 	bl	8006240 <strlen>
 800bdc2:	4602      	mov	r2, r0
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	011b      	lsls	r3, r3, #4
 800bdc8:	4413      	add	r3, r2
 800bdca:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800bdce:	085b      	lsrs	r3, r3, #1
 800bdd0:	73bb      	strb	r3, [r7, #14]
	Paint_DrawString_EN (x, y, menuItems[menuItemNumber], &Font24, BLACK, menuItemNumber == activeMenuItemNumber ? GREEN : WHITE);
 800bdd2:	7bbb      	ldrb	r3, [r7, #14]
 800bdd4:	b298      	uxth	r0, r3
 800bdd6:	7bfb      	ldrb	r3, [r7, #15]
 800bdd8:	b299      	uxth	r1, r3
 800bdda:	78fa      	ldrb	r2, [r7, #3]
 800bddc:	4613      	mov	r3, r2
 800bdde:	00db      	lsls	r3, r3, #3
 800bde0:	4413      	add	r3, r2
 800bde2:	005b      	lsls	r3, r3, #1
 800bde4:	3308      	adds	r3, #8
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	18d4      	adds	r4, r2, r3
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bdf0:	78fa      	ldrb	r2, [r7, #3]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d102      	bne.n	800bdfc <_ZN12UiMenuScreen12showMenuItemEh+0x6c>
 800bdf6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800bdfa:	e001      	b.n	800be00 <_ZN12UiMenuScreen12showMenuItemEh+0x70>
 800bdfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be00:	9301      	str	r3, [sp, #4]
 800be02:	2300      	movs	r3, #0
 800be04:	9300      	str	r3, [sp, #0]
 800be06:	4b04      	ldr	r3, [pc, #16]	; (800be18 <_ZN12UiMenuScreen12showMenuItemEh+0x88>)
 800be08:	4622      	mov	r2, r4
 800be0a:	f008 f84d 	bl	8013ea8 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>
}
 800be0e:	bf00      	nop
 800be10:	3714      	adds	r7, #20
 800be12:	46bd      	mov	sp, r7
 800be14:	bd90      	pop	{r4, r7, pc}
 800be16:	bf00      	nop
 800be18:	20000024 	.word	0x20000024

0800be1c <_ZN21GpsDataChangedUiEvent10getGpsDataEv>:
		GpsData& getGpsData()
 800be1c:	b480      	push	{r7}
 800be1e:	b083      	sub	sp, #12
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
			return gpsData;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	3308      	adds	r3, #8
		}
 800be28:	4618      	mov	r0, r3
 800be2a:	370c      	adds	r7, #12
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <_ZN22GpsStatusUpdateUiEvent12getGpsStatusEv>:
		GpsStatus getGpsStatus()
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
			return gpsStatus;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	785b      	ldrb	r3, [r3, #1]
		}
 800be40:	4618      	mov	r0, r3
 800be42:	370c      	adds	r7, #12
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr

0800be4c <_ZN27StopGpsDataRecordingUiEventC1Ev>:
		StopGpsDataRecordingUiEvent()
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
			this->name = UiEventName::StopGpsDataRecordingUiEventName;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2205      	movs	r2, #5
 800be58:	701a      	strb	r2, [r3, #0]
		}
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	4618      	mov	r0, r3
 800be5e:	370c      	adds	r7, #12
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <_ZN28StartGpsDataRecordingUiEventC1Ev>:
		StartGpsDataRecordingUiEvent()
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
			this->name = UiEventName::StartGpsDataRecordingUiEventName;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2206      	movs	r2, #6
 800be74:	701a      	strb	r2, [r3, #0]
		}
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	4618      	mov	r0, r3
 800be7a:	370c      	adds	r7, #12
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr

0800be84 <_ZN17UiRecordGpsScreenC1EP17UiEventDispatcher>:
#include "ui.record_gps.screen.class.h"
#include "ui.menu.screen.class.h"

UiRecordGpsScreen::UiRecordGpsScreen(UiEventDispatcher *uiEventDispatcher)
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	6039      	str	r1, [r7, #0]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	4618      	mov	r0, r3
 800be92:	f7ff fd85 	bl	800b9a0 <_ZN8UiScreenC1Ev>
 800be96:	4a08      	ldr	r2, [pc, #32]	; (800beb8 <_ZN17UiRecordGpsScreenC1EP17UiEventDispatcher+0x34>)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	601a      	str	r2, [r3, #0]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2200      	movs	r2, #0
 800bea0:	721a      	strb	r2, [r3, #8]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2200      	movs	r2, #0
 800bea6:	725a      	strb	r2, [r3, #9]
{
	this->uiEventDispatcher = uiEventDispatcher;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	683a      	ldr	r2, [r7, #0]
 800beac:	605a      	str	r2, [r3, #4]
}
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	4618      	mov	r0, r3
 800beb2:	3708      	adds	r7, #8
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}
 800beb8:	0801fbf0 	.word	0x0801fbf0

0800bebc <_ZN17UiRecordGpsScreen9matchNameEPKc>:

bool UiRecordGpsScreen::matchName(const char *nameToMatch)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
	return strcmp(UiRecordGpsScreen::name, nameToMatch) == 0;
 800bec6:	6839      	ldr	r1, [r7, #0]
 800bec8:	4806      	ldr	r0, [pc, #24]	; (800bee4 <_ZN17UiRecordGpsScreen9matchNameEPKc+0x28>)
 800beca:	f7fa f959 	bl	8006180 <strcmp>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	bf0c      	ite	eq
 800bed4:	2301      	moveq	r3, #1
 800bed6:	2300      	movne	r3, #0
 800bed8:	b2db      	uxtb	r3, r3
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3708      	adds	r7, #8
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	0801eb5c 	.word	0x0801eb5c

0800bee8 <_ZN17UiRecordGpsScreen19selectButtonPressedEv>:

void UiRecordGpsScreen::selectButtonPressed()
{
 800bee8:	b480      	push	{r7}
 800beea:	b083      	sub	sp, #12
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]

}
 800bef0:	bf00      	nop
 800bef2:	370c      	adds	r7, #12
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr

0800befc <_ZN17UiRecordGpsScreen17moveButtonPressedEv>:

void UiRecordGpsScreen::moveButtonPressed()
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b08c      	sub	sp, #48	; 0x30
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
	if (++exitScreenPushButtonCounter < 3) {
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	7a1b      	ldrb	r3, [r3, #8]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	b2da      	uxtb	r2, r3
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	721a      	strb	r2, [r3, #8]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	7a1b      	ldrb	r3, [r3, #8]
 800bf14:	2b02      	cmp	r3, #2
 800bf16:	bf94      	ite	ls
 800bf18:	2301      	movls	r3, #1
 800bf1a:	2300      	movhi	r3, #0
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d003      	beq.n	800bf2a <_ZN17UiRecordGpsScreen17moveButtonPressedEv+0x2e>
		refreshGpsRecordingScreenStopButton();
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 f868 	bl	800bff8 <_ZN17UiRecordGpsScreen35refreshGpsRecordingScreenStopButtonEv>
 800bf28:	e01d      	b.n	800bf66 <_ZN17UiRecordGpsScreen17moveButtonPressedEv+0x6a>
		return;
	}

	exitScreenPushButtonCounter = 0;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	721a      	strb	r2, [r3, #8]

	StopGpsDataRecordingUiEvent stopGpsDataRecordingUiEvent;
 800bf30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7ff ff89 	bl	800be4c <_ZN27StopGpsDataRecordingUiEventC1Ev>
	uiEventDispatcher->dispatch(stopGpsDataRecordingUiEvent);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800bf42:	4611      	mov	r1, r2
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7fc f87a 	bl	800803e <_ZN17UiEventDispatcher8dispatchER7UiEvent>

	ShowScreenUiEvent showScreenUiEvent(UiMenuScreen::name);
 800bf4a:	f107 030c 	add.w	r3, r7, #12
 800bf4e:	4907      	ldr	r1, [pc, #28]	; (800bf6c <_ZN17UiRecordGpsScreen17moveButtonPressedEv+0x70>)
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7ff fce3 	bl	800b91c <_ZN17ShowScreenUiEventC1EPKc>
	uiEventDispatcher->dispatch(showScreenUiEvent);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	685b      	ldr	r3, [r3, #4]
 800bf5a:	f107 020c 	add.w	r2, r7, #12
 800bf5e:	4611      	mov	r1, r2
 800bf60:	4618      	mov	r0, r3
 800bf62:	f7fc f86c 	bl	800803e <_ZN17UiEventDispatcher8dispatchER7UiEvent>
}
 800bf66:	3730      	adds	r7, #48	; 0x30
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	0801eb70 	.word	0x0801eb70

0800bf70 <_ZN17UiRecordGpsScreen4showEv>:

void UiRecordGpsScreen::show()
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
	refreshGpsRecordingScreenStopButton();
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 f83d 	bl	800bff8 <_ZN17UiRecordGpsScreen35refreshGpsRecordingScreenStopButtonEv>

	StartGpsDataRecordingUiEvent startGpsDataRecordingUiEvent;
 800bf7e:	f107 030c 	add.w	r3, r7, #12
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7ff ff70 	bl	800be68 <_ZN28StartGpsDataRecordingUiEventC1Ev>
	uiEventDispatcher->dispatch(startGpsDataRecordingUiEvent);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	f107 020c 	add.w	r2, r7, #12
 800bf90:	4611      	mov	r1, r2
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7fc f853 	bl	800803e <_ZN17UiEventDispatcher8dispatchER7UiEvent>
}
 800bf98:	bf00      	nop
 800bf9a:	3710      	adds	r7, #16
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <_ZN17UiRecordGpsScreen9onUiEventER7UiEvent>:

void UiRecordGpsScreen::onUiEvent(UiEvent &event)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
 800bfa8:	6039      	str	r1, [r7, #0]
	if (event.matchName(UiEventName::GpsDataChangedUiEventName))
 800bfaa:	2102      	movs	r1, #2
 800bfac:	6838      	ldr	r0, [r7, #0]
 800bfae:	f7fb ff8b 	bl	8007ec8 <_ZN7UiEvent9matchNameE11UiEventName>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d009      	beq.n	800bfcc <_ZN17UiRecordGpsScreen9onUiEventER7UiEvent+0x2c>
	{
		GpsDataChangedUiEvent *gpsDataChangedUiEvent = (GpsDataChangedUiEvent*) &event;
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	60fb      	str	r3, [r7, #12]
		refreshGpsData(gpsDataChangedUiEvent->getGpsData());
 800bfbc:	68f8      	ldr	r0, [r7, #12]
 800bfbe:	f7ff ff2d 	bl	800be1c <_ZN21GpsDataChangedUiEvent10getGpsDataEv>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 f8b6 	bl	800c138 <_ZN17UiRecordGpsScreen14refreshGpsDataER7GpsData>
	}

	if (event.matchName(UiEventName::GpsStatusUpdateUiEventName))
 800bfcc:	2103      	movs	r1, #3
 800bfce:	6838      	ldr	r0, [r7, #0]
 800bfd0:	f7fb ff7a 	bl	8007ec8 <_ZN7UiEvent9matchNameE11UiEventName>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d009      	beq.n	800bfee <_ZN17UiRecordGpsScreen9onUiEventER7UiEvent+0x4e>
	{
		GpsStatusUpdateUiEvent *gpsStatusUpdateUiEvent = (GpsStatusUpdateUiEvent*) &event;
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	60bb      	str	r3, [r7, #8]
		refreshGpsStatus(gpsStatusUpdateUiEvent->getGpsStatus());
 800bfde:	68b8      	ldr	r0, [r7, #8]
 800bfe0:	f7ff ff28 	bl	800be34 <_ZN22GpsStatusUpdateUiEvent12getGpsStatusEv>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f000 f849 	bl	800c080 <_ZN17UiRecordGpsScreen16refreshGpsStatusE9GpsStatus>
	}
}
 800bfee:	bf00      	nop
 800bff0:	3710      	adds	r7, #16
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
	...

0800bff8 <_ZN17UiRecordGpsScreen35refreshGpsRecordingScreenStopButtonEv>:




void UiRecordGpsScreen::refreshGpsRecordingScreenStopButton()
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b086      	sub	sp, #24
 800bffc:	af02      	add	r7, sp, #8
 800bffe:	6078      	str	r0, [r7, #4]
	char stopLabel[7] = "STOP";
 800c000:	4a1b      	ldr	r2, [pc, #108]	; (800c070 <_ZN17UiRecordGpsScreen35refreshGpsRecordingScreenStopButtonEv+0x78>)
 800c002:	f107 0308 	add.w	r3, r7, #8
 800c006:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c00a:	6018      	str	r0, [r3, #0]
 800c00c:	3304      	adds	r3, #4
 800c00e:	7019      	strb	r1, [r3, #0]
 800c010:	f107 030d 	add.w	r3, r7, #13
 800c014:	2200      	movs	r2, #0
 800c016:	801a      	strh	r2, [r3, #0]
	if (exitScreenPushButtonCounter == 1) {
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	7a1b      	ldrb	r3, [r3, #8]
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d107      	bne.n	800c030 <_ZN17UiRecordGpsScreen35refreshGpsRecordingScreenStopButtonEv+0x38>
		strcpy(stopLabel, "STOP?");
 800c020:	f107 0308 	add.w	r3, r7, #8
 800c024:	4a13      	ldr	r2, [pc, #76]	; (800c074 <_ZN17UiRecordGpsScreen35refreshGpsRecordingScreenStopButtonEv+0x7c>)
 800c026:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c02a:	6018      	str	r0, [r3, #0]
 800c02c:	3304      	adds	r3, #4
 800c02e:	8019      	strh	r1, [r3, #0]
	}
	if (exitScreenPushButtonCounter == 2) {
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	7a1b      	ldrb	r3, [r3, #8]
 800c034:	2b02      	cmp	r3, #2
 800c036:	d10a      	bne.n	800c04e <_ZN17UiRecordGpsScreen35refreshGpsRecordingScreenStopButtonEv+0x56>
		strcpy(stopLabel, "STOP??");
 800c038:	4a0f      	ldr	r2, [pc, #60]	; (800c078 <_ZN17UiRecordGpsScreen35refreshGpsRecordingScreenStopButtonEv+0x80>)
 800c03a:	f107 0308 	add.w	r3, r7, #8
 800c03e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c042:	6018      	str	r0, [r3, #0]
 800c044:	3304      	adds	r3, #4
 800c046:	8019      	strh	r1, [r3, #0]
 800c048:	3302      	adds	r3, #2
 800c04a:	0c0a      	lsrs	r2, r1, #16
 800c04c:	701a      	strb	r2, [r3, #0]
	}
	Paint_DrawString_EN (5, 210, stopLabel, &Font24, BLACK, YELLOW);
 800c04e:	f107 0208 	add.w	r2, r7, #8
 800c052:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800c056:	9301      	str	r3, [sp, #4]
 800c058:	2300      	movs	r3, #0
 800c05a:	9300      	str	r3, [sp, #0]
 800c05c:	4b07      	ldr	r3, [pc, #28]	; (800c07c <_ZN17UiRecordGpsScreen35refreshGpsRecordingScreenStopButtonEv+0x84>)
 800c05e:	21d2      	movs	r1, #210	; 0xd2
 800c060:	2005      	movs	r0, #5
 800c062:	f007 ff21 	bl	8013ea8 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>
}
 800c066:	bf00      	nop
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	0801eb90 	.word	0x0801eb90
 800c074:	0801eb80 	.word	0x0801eb80
 800c078:	0801eb88 	.word	0x0801eb88
 800c07c:	20000024 	.word	0x20000024

0800c080 <_ZN17UiRecordGpsScreen16refreshGpsStatusE9GpsStatus>:

void UiRecordGpsScreen::refreshGpsStatus(GpsStatus gpsStatus)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af02      	add	r7, sp, #8
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	460b      	mov	r3, r1
 800c08a:	70fb      	strb	r3, [r7, #3]
	static GpsStatus prevGpsStatus = GpsStatus::NO_DATA;

	if (gpsStatus == GpsStatus::VALID_DATA && prevGpsStatus == gpsStatus)
 800c08c:	78fb      	ldrb	r3, [r7, #3]
 800c08e:	2b02      	cmp	r3, #2
 800c090:	d104      	bne.n	800c09c <_ZN17UiRecordGpsScreen16refreshGpsStatusE9GpsStatus+0x1c>
 800c092:	4b26      	ldr	r3, [pc, #152]	; (800c12c <_ZN17UiRecordGpsScreen16refreshGpsStatusE9GpsStatus+0xac>)
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	78fa      	ldrb	r2, [r7, #3]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d042      	beq.n	800c122 <_ZN17UiRecordGpsScreen16refreshGpsStatusE9GpsStatus+0xa2>
	{
		return;
	}

	if (gpsStatus == GpsStatus::VALID_DATA)
 800c09c:	78fb      	ldrb	r3, [r7, #3]
 800c09e:	2b02      	cmp	r3, #2
 800c0a0:	d10c      	bne.n	800c0bc <_ZN17UiRecordGpsScreen16refreshGpsStatusE9GpsStatus+0x3c>
	{
    	Paint_DrawString_EN (260, 0, "GPS", &Font24, BLACK, GREEN);
 800c0a2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800c0a6:	9301      	str	r3, [sp, #4]
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	9300      	str	r3, [sp, #0]
 800c0ac:	4b20      	ldr	r3, [pc, #128]	; (800c130 <_ZN17UiRecordGpsScreen16refreshGpsStatusE9GpsStatus+0xb0>)
 800c0ae:	4a21      	ldr	r2, [pc, #132]	; (800c134 <_ZN17UiRecordGpsScreen16refreshGpsStatusE9GpsStatus+0xb4>)
 800c0b0:	2100      	movs	r1, #0
 800c0b2:	f44f 7082 	mov.w	r0, #260	; 0x104
 800c0b6:	f007 fef7 	bl	8013ea8 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>
		return;
 800c0ba:	e033      	b.n	800c124 <_ZN17UiRecordGpsScreen16refreshGpsStatusE9GpsStatus+0xa4>
	}

	if (++searchGpsProgressCounter % 2 != 0)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	7a5b      	ldrb	r3, [r3, #9]
 800c0c0:	3301      	adds	r3, #1
 800c0c2:	b2da      	uxtb	r2, r3
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	725a      	strb	r2, [r3, #9]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	7a5b      	ldrb	r3, [r3, #9]
 800c0cc:	f003 0301 	and.w	r3, r3, #1
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	bf14      	ite	ne
 800c0d4:	2301      	movne	r3, #1
 800c0d6:	2300      	moveq	r3, #0
 800c0d8:	b2db      	uxtb	r3, r3
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d012      	beq.n	800c104 <_ZN17UiRecordGpsScreen16refreshGpsStatusE9GpsStatus+0x84>
	{
		Paint_DrawString_EN (260, 0, "GPS", &Font24, BLACK, gpsStatus == GpsStatus::INVALID_DATA ? CYAN : RED);
 800c0de:	78fb      	ldrb	r3, [r7, #3]
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d102      	bne.n	800c0ea <_ZN17UiRecordGpsScreen16refreshGpsStatusE9GpsStatus+0x6a>
 800c0e4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800c0e8:	e001      	b.n	800c0ee <_ZN17UiRecordGpsScreen16refreshGpsStatusE9GpsStatus+0x6e>
 800c0ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800c0ee:	9301      	str	r3, [sp, #4]
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	9300      	str	r3, [sp, #0]
 800c0f4:	4b0e      	ldr	r3, [pc, #56]	; (800c130 <_ZN17UiRecordGpsScreen16refreshGpsStatusE9GpsStatus+0xb0>)
 800c0f6:	4a0f      	ldr	r2, [pc, #60]	; (800c134 <_ZN17UiRecordGpsScreen16refreshGpsStatusE9GpsStatus+0xb4>)
 800c0f8:	2100      	movs	r1, #0
 800c0fa:	f44f 7082 	mov.w	r0, #260	; 0x104
 800c0fe:	f007 fed3 	bl	8013ea8 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>
 800c102:	e00a      	b.n	800c11a <_ZN17UiRecordGpsScreen16refreshGpsStatusE9GpsStatus+0x9a>
	}
	else
	{
		Paint_DrawString_EN (260, 0, "GPS", &Font24, BLACK, BLACK);
 800c104:	2300      	movs	r3, #0
 800c106:	9301      	str	r3, [sp, #4]
 800c108:	2300      	movs	r3, #0
 800c10a:	9300      	str	r3, [sp, #0]
 800c10c:	4b08      	ldr	r3, [pc, #32]	; (800c130 <_ZN17UiRecordGpsScreen16refreshGpsStatusE9GpsStatus+0xb0>)
 800c10e:	4a09      	ldr	r2, [pc, #36]	; (800c134 <_ZN17UiRecordGpsScreen16refreshGpsStatusE9GpsStatus+0xb4>)
 800c110:	2100      	movs	r1, #0
 800c112:	f44f 7082 	mov.w	r0, #260	; 0x104
 800c116:	f007 fec7 	bl	8013ea8 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>
	}

	prevGpsStatus = gpsStatus;
 800c11a:	4a04      	ldr	r2, [pc, #16]	; (800c12c <_ZN17UiRecordGpsScreen16refreshGpsStatusE9GpsStatus+0xac>)
 800c11c:	78fb      	ldrb	r3, [r7, #3]
 800c11e:	7013      	strb	r3, [r2, #0]
 800c120:	e000      	b.n	800c124 <_ZN17UiRecordGpsScreen16refreshGpsStatusE9GpsStatus+0xa4>
		return;
 800c122:	bf00      	nop
}
 800c124:	3708      	adds	r7, #8
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	2000038c 	.word	0x2000038c
 800c130:	20000024 	.word	0x20000024
 800c134:	0801eb98 	.word	0x0801eb98

0800c138 <_ZN17UiRecordGpsScreen14refreshGpsDataER7GpsData>:

void UiRecordGpsScreen::refreshGpsData(GpsData &gpsData)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b092      	sub	sp, #72	; 0x48
 800c13c:	af02      	add	r7, sp, #8
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	6039      	str	r1, [r7, #0]
	char outputBuffer[50];

	Paint_DrawString_EN (5, 54, gpsData.dateUtc, &Font20, BLACK, YELLOW);
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	f103 0209 	add.w	r2, r3, #9
 800c148:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800c14c:	9301      	str	r3, [sp, #4]
 800c14e:	2300      	movs	r3, #0
 800c150:	9300      	str	r3, [sp, #0]
 800c152:	4b29      	ldr	r3, [pc, #164]	; (800c1f8 <_ZN17UiRecordGpsScreen14refreshGpsDataER7GpsData+0xc0>)
 800c154:	2136      	movs	r1, #54	; 0x36
 800c156:	2005      	movs	r0, #5
 800c158:	f007 fea6 	bl	8013ea8 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>
	Paint_DrawString_EN (155, 54, gpsData.timeUtc, &Font20, BLACK, YELLOW);
 800c15c:	683a      	ldr	r2, [r7, #0]
 800c15e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800c162:	9301      	str	r3, [sp, #4]
 800c164:	2300      	movs	r3, #0
 800c166:	9300      	str	r3, [sp, #0]
 800c168:	4b23      	ldr	r3, [pc, #140]	; (800c1f8 <_ZN17UiRecordGpsScreen14refreshGpsDataER7GpsData+0xc0>)
 800c16a:	2136      	movs	r1, #54	; 0x36
 800c16c:	209b      	movs	r0, #155	; 0x9b
 800c16e:	f007 fe9b 	bl	8013ea8 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>

	Paint_DrawString_EN (5, 78, "long:", &Font20, BLACK, YELLOW);
 800c172:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800c176:	9301      	str	r3, [sp, #4]
 800c178:	2300      	movs	r3, #0
 800c17a:	9300      	str	r3, [sp, #0]
 800c17c:	4b1e      	ldr	r3, [pc, #120]	; (800c1f8 <_ZN17UiRecordGpsScreen14refreshGpsDataER7GpsData+0xc0>)
 800c17e:	4a1f      	ldr	r2, [pc, #124]	; (800c1fc <_ZN17UiRecordGpsScreen14refreshGpsDataER7GpsData+0xc4>)
 800c180:	214e      	movs	r1, #78	; 0x4e
 800c182:	2005      	movs	r0, #5
 800c184:	f007 fe90 	bl	8013ea8 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>
	Paint_DrawString_EN (5, 102, "lat:", &Font20, BLACK, YELLOW);
 800c188:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800c18c:	9301      	str	r3, [sp, #4]
 800c18e:	2300      	movs	r3, #0
 800c190:	9300      	str	r3, [sp, #0]
 800c192:	4b19      	ldr	r3, [pc, #100]	; (800c1f8 <_ZN17UiRecordGpsScreen14refreshGpsDataER7GpsData+0xc0>)
 800c194:	4a1a      	ldr	r2, [pc, #104]	; (800c200 <_ZN17UiRecordGpsScreen14refreshGpsDataER7GpsData+0xc8>)
 800c196:	2166      	movs	r1, #102	; 0x66
 800c198:	2005      	movs	r0, #5
 800c19a:	f007 fe85 	bl	8013ea8 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>

	sprintf(outputBuffer, "%f    ", gpsData.longitude);
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800c1a4:	f107 000c 	add.w	r0, r7, #12
 800c1a8:	4916      	ldr	r1, [pc, #88]	; (800c204 <_ZN17UiRecordGpsScreen14refreshGpsDataER7GpsData+0xcc>)
 800c1aa:	f00f fb43 	bl	801b834 <siprintf>
	Paint_DrawString_EN (80, 78, outputBuffer, &Font20, BLACK, YELLOW);
 800c1ae:	f107 020c 	add.w	r2, r7, #12
 800c1b2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800c1b6:	9301      	str	r3, [sp, #4]
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	9300      	str	r3, [sp, #0]
 800c1bc:	4b0e      	ldr	r3, [pc, #56]	; (800c1f8 <_ZN17UiRecordGpsScreen14refreshGpsDataER7GpsData+0xc0>)
 800c1be:	214e      	movs	r1, #78	; 0x4e
 800c1c0:	2050      	movs	r0, #80	; 0x50
 800c1c2:	f007 fe71 	bl	8013ea8 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>

	sprintf(outputBuffer, "%f    ", gpsData.latitude);
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800c1cc:	f107 000c 	add.w	r0, r7, #12
 800c1d0:	490c      	ldr	r1, [pc, #48]	; (800c204 <_ZN17UiRecordGpsScreen14refreshGpsDataER7GpsData+0xcc>)
 800c1d2:	f00f fb2f 	bl	801b834 <siprintf>
	Paint_DrawString_EN (80, 102, outputBuffer, &Font20, BLACK, YELLOW);
 800c1d6:	f107 020c 	add.w	r2, r7, #12
 800c1da:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800c1de:	9301      	str	r3, [sp, #4]
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	9300      	str	r3, [sp, #0]
 800c1e4:	4b04      	ldr	r3, [pc, #16]	; (800c1f8 <_ZN17UiRecordGpsScreen14refreshGpsDataER7GpsData+0xc0>)
 800c1e6:	2166      	movs	r1, #102	; 0x66
 800c1e8:	2050      	movs	r0, #80	; 0x50
 800c1ea:	f007 fe5d 	bl	8013ea8 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>
}
 800c1ee:	bf00      	nop
 800c1f0:	3740      	adds	r7, #64	; 0x40
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	2000001c 	.word	0x2000001c
 800c1fc:	0801eb9c 	.word	0x0801eb9c
 800c200:	0801eba4 	.word	0x0801eba4
 800c204:	0801ebac 	.word	0x0801ebac

0800c208 <_ZN27SyncGpsRecordStartedUiEvent13getRecordNameEv>:
		const char *getRecordName()
 800c208:	b480      	push	{r7}
 800c20a:	b083      	sub	sp, #12
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
			return recordName;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	3301      	adds	r3, #1
		}
 800c214:	4618      	mov	r0, r3
 800c216:	370c      	adds	r7, #12
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr

0800c220 <_ZN35SyncGpsRecordProgressChangedUiEvent11getProgressEv>:
		uint8_t getProgress()
 800c220:	b480      	push	{r7}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
			return progress;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	785b      	ldrb	r3, [r3, #1]
		}
 800c22c:	4618      	mov	r0, r3
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <_ZN26StartSyncGpsRecordsUiEventC1Ev>:
		StartSyncGpsRecordsUiEvent()
 800c238:	b480      	push	{r7}
 800c23a:	b083      	sub	sp, #12
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
			this->name = UiEventName::StartSyncGpsRecordsUiEventName;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2207      	movs	r2, #7
 800c244:	701a      	strb	r2, [r3, #0]
		}
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	4618      	mov	r0, r3
 800c24a:	370c      	adds	r7, #12
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr

0800c254 <_ZN15UiSyncGpsScreenC1EP17UiEventDispatcher>:
#include "ui.sync_gps.screen.class.h"
#include "ui.sync_gps_finish.screen.class.h"

UiSyncGpsScreen::UiSyncGpsScreen(UiEventDispatcher *uiEventDispatcher)
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	6039      	str	r1, [r7, #0]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	4618      	mov	r0, r3
 800c262:	f7ff fb9d 	bl	800b9a0 <_ZN8UiScreenC1Ev>
 800c266:	4a05      	ldr	r2, [pc, #20]	; (800c27c <_ZN15UiSyncGpsScreenC1EP17UiEventDispatcher+0x28>)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	601a      	str	r2, [r3, #0]
{
	this->uiEventDispatcher = uiEventDispatcher;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	683a      	ldr	r2, [r7, #0]
 800c270:	605a      	str	r2, [r3, #4]
}
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	4618      	mov	r0, r3
 800c276:	3708      	adds	r7, #8
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	0801fc0c 	.word	0x0801fc0c

0800c280 <_ZN15UiSyncGpsScreen9matchNameEPKc>:

bool UiSyncGpsScreen::matchName(const char *nameToMatch)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
	return strcmp(UiSyncGpsScreen::name, nameToMatch) == 0;
 800c28a:	6839      	ldr	r1, [r7, #0]
 800c28c:	4806      	ldr	r0, [pc, #24]	; (800c2a8 <_ZN15UiSyncGpsScreen9matchNameEPKc+0x28>)
 800c28e:	f7f9 ff77 	bl	8006180 <strcmp>
 800c292:	4603      	mov	r3, r0
 800c294:	2b00      	cmp	r3, #0
 800c296:	bf0c      	ite	eq
 800c298:	2301      	moveq	r3, #1
 800c29a:	2300      	movne	r3, #0
 800c29c:	b2db      	uxtb	r3, r3
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3708      	adds	r7, #8
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	0801ebc8 	.word	0x0801ebc8

0800c2ac <_ZN15UiSyncGpsScreen19selectButtonPressedEv>:

void UiSyncGpsScreen::selectButtonPressed()
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b083      	sub	sp, #12
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]

}
 800c2b4:	bf00      	nop
 800c2b6:	370c      	adds	r7, #12
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr

0800c2c0 <_ZN15UiSyncGpsScreen17moveButtonPressedEv>:

void UiSyncGpsScreen::moveButtonPressed()
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b083      	sub	sp, #12
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
}
 800c2c8:	bf00      	nop
 800c2ca:	370c      	adds	r7, #12
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr

0800c2d4 <_ZN15UiSyncGpsScreen4showEv>:

void UiSyncGpsScreen::show()
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b08e      	sub	sp, #56	; 0x38
 800c2d8:	af02      	add	r7, sp, #8
 800c2da:	6078      	str	r0, [r7, #4]
	Paint_DrawString_EN (60, 34, "Syncing record", &Font20, BLACK, YELLOW);
 800c2dc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800c2e0:	9301      	str	r3, [sp, #4]
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	9300      	str	r3, [sp, #0]
 800c2e6:	4b12      	ldr	r3, [pc, #72]	; (800c330 <_ZN15UiSyncGpsScreen4showEv+0x5c>)
 800c2e8:	4a12      	ldr	r2, [pc, #72]	; (800c334 <_ZN15UiSyncGpsScreen4showEv+0x60>)
 800c2ea:	2122      	movs	r1, #34	; 0x22
 800c2ec:	203c      	movs	r0, #60	; 0x3c
 800c2ee:	f007 fddb 	bl	8013ea8 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>

	StartSyncGpsRecordsUiEvent startSyncGpsRecords;
 800c2f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7ff ff9e 	bl	800c238 <_ZN26StartSyncGpsRecordsUiEventC1Ev>
	uiEventDispatcher->dispatch(startSyncGpsRecords);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800c304:	4611      	mov	r1, r2
 800c306:	4618      	mov	r0, r3
 800c308:	f7fb fe99 	bl	800803e <_ZN17UiEventDispatcher8dispatchER7UiEvent>

	ShowScreenUiEvent showScreenUiEvent(UiSyncGpsFinishScreen::name);
 800c30c:	f107 030c 	add.w	r3, r7, #12
 800c310:	4909      	ldr	r1, [pc, #36]	; (800c338 <_ZN15UiSyncGpsScreen4showEv+0x64>)
 800c312:	4618      	mov	r0, r3
 800c314:	f7ff fb02 	bl	800b91c <_ZN17ShowScreenUiEventC1EPKc>
	uiEventDispatcher->dispatch(showScreenUiEvent);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	f107 020c 	add.w	r2, r7, #12
 800c320:	4611      	mov	r1, r2
 800c322:	4618      	mov	r0, r3
 800c324:	f7fb fe8b 	bl	800803e <_ZN17UiEventDispatcher8dispatchER7UiEvent>
}
 800c328:	bf00      	nop
 800c32a:	3730      	adds	r7, #48	; 0x30
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}
 800c330:	2000001c 	.word	0x2000001c
 800c334:	0801ebd8 	.word	0x0801ebd8
 800c338:	0801ebe8 	.word	0x0801ebe8

0800c33c <_ZN15UiSyncGpsScreen9onUiEventER7UiEvent>:

void UiSyncGpsScreen::onUiEvent(UiEvent &event)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
	if (event.matchName(UiEventName::SyncGpsRecordStartedUiEventName))
 800c346:	2100      	movs	r1, #0
 800c348:	6838      	ldr	r0, [r7, #0]
 800c34a:	f7fb fdbd 	bl	8007ec8 <_ZN7UiEvent9matchNameE11UiEventName>
 800c34e:	4603      	mov	r3, r0
 800c350:	2b00      	cmp	r3, #0
 800c352:	d009      	beq.n	800c368 <_ZN15UiSyncGpsScreen9onUiEventER7UiEvent+0x2c>
	{
		SyncGpsRecordStartedUiEvent *syncGpsRecordStartedUiEvent = (SyncGpsRecordStartedUiEvent*) &event;
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	60fb      	str	r3, [r7, #12]
		refreshRecordName(syncGpsRecordStartedUiEvent->getRecordName());
 800c358:	68f8      	ldr	r0, [r7, #12]
 800c35a:	f7ff ff55 	bl	800c208 <_ZN27SyncGpsRecordStartedUiEvent13getRecordNameEv>
 800c35e:	4603      	mov	r3, r0
 800c360:	4619      	mov	r1, r3
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f000 f816 	bl	800c394 <_ZN15UiSyncGpsScreen17refreshRecordNameEPKc>
	}

	if (event.matchName(UiEventName::SyncGpsRecordProgressChangedUiEventName))
 800c368:	2101      	movs	r1, #1
 800c36a:	6838      	ldr	r0, [r7, #0]
 800c36c:	f7fb fdac 	bl	8007ec8 <_ZN7UiEvent9matchNameE11UiEventName>
 800c370:	4603      	mov	r3, r0
 800c372:	2b00      	cmp	r3, #0
 800c374:	d009      	beq.n	800c38a <_ZN15UiSyncGpsScreen9onUiEventER7UiEvent+0x4e>
	{
		SyncGpsRecordProgressChangedUiEvent *syncGpsRecordProgressChangedUiEvent = (SyncGpsRecordProgressChangedUiEvent*) &event;
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	60bb      	str	r3, [r7, #8]
		syncGpsRecordsScreenRefreshProgress(syncGpsRecordProgressChangedUiEvent->getProgress());
 800c37a:	68b8      	ldr	r0, [r7, #8]
 800c37c:	f7ff ff50 	bl	800c220 <_ZN35SyncGpsRecordProgressChangedUiEvent11getProgressEv>
 800c380:	4603      	mov	r3, r0
 800c382:	4619      	mov	r1, r3
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f000 f81b 	bl	800c3c0 <_ZN15UiSyncGpsScreen35syncGpsRecordsScreenRefreshProgressEh>
	}
}
 800c38a:	bf00      	nop
 800c38c:	3710      	adds	r7, #16
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}
	...

0800c394 <_ZN15UiSyncGpsScreen17refreshRecordNameEPKc>:

void UiSyncGpsScreen::refreshRecordName(const char* recordName)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b084      	sub	sp, #16
 800c398:	af02      	add	r7, sp, #8
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]
	Paint_DrawString_EN (40, 68, recordName, &Font20, BLACK, YELLOW);
 800c39e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800c3a2:	9301      	str	r3, [sp, #4]
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	9300      	str	r3, [sp, #0]
 800c3a8:	4b04      	ldr	r3, [pc, #16]	; (800c3bc <_ZN15UiSyncGpsScreen17refreshRecordNameEPKc+0x28>)
 800c3aa:	683a      	ldr	r2, [r7, #0]
 800c3ac:	2144      	movs	r1, #68	; 0x44
 800c3ae:	2028      	movs	r0, #40	; 0x28
 800c3b0:	f007 fd7a 	bl	8013ea8 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>
}
 800c3b4:	bf00      	nop
 800c3b6:	3708      	adds	r7, #8
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	2000001c 	.word	0x2000001c

0800c3c0 <_ZN15UiSyncGpsScreen35syncGpsRecordsScreenRefreshProgressEh>:

void UiSyncGpsScreen::syncGpsRecordsScreenRefreshProgress(uint8_t progress)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b092      	sub	sp, #72	; 0x48
 800c3c4:	af02      	add	r7, sp, #8
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	460b      	mov	r3, r1
 800c3ca:	70fb      	strb	r3, [r7, #3]
	char outputBuffer[50];
	sprintf(outputBuffer, "%d%%   ", progress);
 800c3cc:	78fa      	ldrb	r2, [r7, #3]
 800c3ce:	f107 030c 	add.w	r3, r7, #12
 800c3d2:	490a      	ldr	r1, [pc, #40]	; (800c3fc <_ZN15UiSyncGpsScreen35syncGpsRecordsScreenRefreshProgressEh+0x3c>)
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f00f fa2d 	bl	801b834 <siprintf>

	Paint_DrawString_EN (140, 116, outputBuffer, &Font24, BLACK, YELLOW);
 800c3da:	f107 020c 	add.w	r2, r7, #12
 800c3de:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800c3e2:	9301      	str	r3, [sp, #4]
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	9300      	str	r3, [sp, #0]
 800c3e8:	4b05      	ldr	r3, [pc, #20]	; (800c400 <_ZN15UiSyncGpsScreen35syncGpsRecordsScreenRefreshProgressEh+0x40>)
 800c3ea:	2174      	movs	r1, #116	; 0x74
 800c3ec:	208c      	movs	r0, #140	; 0x8c
 800c3ee:	f007 fd5b 	bl	8013ea8 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>
}
 800c3f2:	bf00      	nop
 800c3f4:	3740      	adds	r7, #64	; 0x40
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
 800c3fa:	bf00      	nop
 800c3fc:	0801ec00 	.word	0x0801ec00
 800c400:	20000024 	.word	0x20000024

0800c404 <_ZN21UiSyncGpsFinishScreenC1EP17UiEventDispatcher>:
#include "ui.sync_gps_finish.screen.class.h"

UiSyncGpsFinishScreen::UiSyncGpsFinishScreen(UiEventDispatcher *uiEventDispatcher)
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	6039      	str	r1, [r7, #0]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	4618      	mov	r0, r3
 800c412:	f7ff fac5 	bl	800b9a0 <_ZN8UiScreenC1Ev>
 800c416:	4a05      	ldr	r2, [pc, #20]	; (800c42c <_ZN21UiSyncGpsFinishScreenC1EP17UiEventDispatcher+0x28>)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	601a      	str	r2, [r3, #0]
{
	this->uiEventDispatcher = uiEventDispatcher;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	683a      	ldr	r2, [r7, #0]
 800c420:	605a      	str	r2, [r3, #4]
}
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	4618      	mov	r0, r3
 800c426:	3708      	adds	r7, #8
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}
 800c42c:	0801fc28 	.word	0x0801fc28

0800c430 <_ZN21UiSyncGpsFinishScreen9matchNameEPKc>:

bool UiSyncGpsFinishScreen::matchName(const char *nameToMatch)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
	return strcmp(UiSyncGpsFinishScreen::name, nameToMatch) == 0;
 800c43a:	6839      	ldr	r1, [r7, #0]
 800c43c:	4806      	ldr	r0, [pc, #24]	; (800c458 <_ZN21UiSyncGpsFinishScreen9matchNameEPKc+0x28>)
 800c43e:	f7f9 fe9f 	bl	8006180 <strcmp>
 800c442:	4603      	mov	r3, r0
 800c444:	2b00      	cmp	r3, #0
 800c446:	bf0c      	ite	eq
 800c448:	2301      	moveq	r3, #1
 800c44a:	2300      	movne	r3, #0
 800c44c:	b2db      	uxtb	r3, r3
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3708      	adds	r7, #8
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	0801ec1c 	.word	0x0801ec1c

0800c45c <_ZN21UiSyncGpsFinishScreen4showEv>:

void UiSyncGpsFinishScreen::show()
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b084      	sub	sp, #16
 800c460:	af02      	add	r7, sp, #8
 800c462:	6078      	str	r0, [r7, #4]
		Paint_DrawString_EN ((320-4*17)/2, 68, "DONE", &Font24, BLACK, YELLOW);
 800c464:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800c468:	9301      	str	r3, [sp, #4]
 800c46a:	2300      	movs	r3, #0
 800c46c:	9300      	str	r3, [sp, #0]
 800c46e:	4b10      	ldr	r3, [pc, #64]	; (800c4b0 <_ZN21UiSyncGpsFinishScreen4showEv+0x54>)
 800c470:	4a10      	ldr	r2, [pc, #64]	; (800c4b4 <_ZN21UiSyncGpsFinishScreen4showEv+0x58>)
 800c472:	2144      	movs	r1, #68	; 0x44
 800c474:	207e      	movs	r0, #126	; 0x7e
 800c476:	f007 fd17 	bl	8013ea8 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>
		Paint_DrawString_EN ((320-18*11)/2, 116, "no records to sync", &Font16, BLACK, YELLOW);
 800c47a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800c47e:	9301      	str	r3, [sp, #4]
 800c480:	2300      	movs	r3, #0
 800c482:	9300      	str	r3, [sp, #0]
 800c484:	4b0c      	ldr	r3, [pc, #48]	; (800c4b8 <_ZN21UiSyncGpsFinishScreen4showEv+0x5c>)
 800c486:	4a0d      	ldr	r2, [pc, #52]	; (800c4bc <_ZN21UiSyncGpsFinishScreen4showEv+0x60>)
 800c488:	2174      	movs	r1, #116	; 0x74
 800c48a:	203d      	movs	r0, #61	; 0x3d
 800c48c:	f007 fd0c 	bl	8013ea8 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>

		Paint_DrawString_EN (5, 210, "MENU", &Font24, BLACK, YELLOW);
 800c490:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800c494:	9301      	str	r3, [sp, #4]
 800c496:	2300      	movs	r3, #0
 800c498:	9300      	str	r3, [sp, #0]
 800c49a:	4b05      	ldr	r3, [pc, #20]	; (800c4b0 <_ZN21UiSyncGpsFinishScreen4showEv+0x54>)
 800c49c:	4a08      	ldr	r2, [pc, #32]	; (800c4c0 <_ZN21UiSyncGpsFinishScreen4showEv+0x64>)
 800c49e:	21d2      	movs	r1, #210	; 0xd2
 800c4a0:	2005      	movs	r0, #5
 800c4a2:	f007 fd01 	bl	8013ea8 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>
}
 800c4a6:	bf00      	nop
 800c4a8:	3708      	adds	r7, #8
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	20000024 	.word	0x20000024
 800c4b4:	0801ec34 	.word	0x0801ec34
 800c4b8:	20000014 	.word	0x20000014
 800c4bc:	0801ec3c 	.word	0x0801ec3c
 800c4c0:	0801ec50 	.word	0x0801ec50

0800c4c4 <_ZN21UiSyncGpsFinishScreen9onUiEventER7UiEvent>:

void UiSyncGpsFinishScreen::onUiEvent(UiEvent &event)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b083      	sub	sp, #12
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]

}
 800c4ce:	bf00      	nop
 800c4d0:	370c      	adds	r7, #12
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d8:	4770      	bx	lr

0800c4da <_ZN21UiSyncGpsFinishScreen19selectButtonPressedEv>:

void UiSyncGpsFinishScreen::selectButtonPressed()
{
 800c4da:	b480      	push	{r7}
 800c4dc:	b083      	sub	sp, #12
 800c4de:	af00      	add	r7, sp, #0
 800c4e0:	6078      	str	r0, [r7, #4]

}
 800c4e2:	bf00      	nop
 800c4e4:	370c      	adds	r7, #12
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr
	...

0800c4f0 <_ZN21UiSyncGpsFinishScreen17moveButtonPressedEv>:

void UiSyncGpsFinishScreen::moveButtonPressed()
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b08a      	sub	sp, #40	; 0x28
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
	ShowScreenUiEvent showScreenUiEvent(UiMenuScreen::name);
 800c4f8:	f107 0308 	add.w	r3, r7, #8
 800c4fc:	4907      	ldr	r1, [pc, #28]	; (800c51c <_ZN21UiSyncGpsFinishScreen17moveButtonPressedEv+0x2c>)
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7ff fa0c 	bl	800b91c <_ZN17ShowScreenUiEventC1EPKc>
	uiEventDispatcher->dispatch(showScreenUiEvent);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	f107 0208 	add.w	r2, r7, #8
 800c50c:	4611      	mov	r1, r2
 800c50e:	4618      	mov	r0, r3
 800c510:	f7fb fd95 	bl	800803e <_ZN17UiEventDispatcher8dispatchER7UiEvent>
}
 800c514:	bf00      	nop
 800c516:	3728      	adds	r7, #40	; 0x28
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	0801ec58 	.word	0x0801ec58

0800c520 <_ZN15ResponserWaiterC1EPKc>:
	private:
		constexpr static uint16_t waitForStrMaxSize = 128;
		char waitForStr[waitForStrMaxSize+1];
		uint8_t waitForStrCursor = 0;
	public:
		ResponserWaiter(const char* waitForStr)
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
		{
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2200      	movs	r2, #0
 800c52e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
			if (strlen(waitForStr) > waitForStrMaxSize)
 800c532:	6838      	ldr	r0, [r7, #0]
 800c534:	f7f9 fe84 	bl	8006240 <strlen>
 800c538:	4603      	mov	r3, r0
 800c53a:	2b80      	cmp	r3, #128	; 0x80
 800c53c:	d90a      	bls.n	800c554 <_ZN15ResponserWaiterC1EPKc+0x34>
			{
				throw "too long string";
 800c53e:	2004      	movs	r0, #4
 800c540:	f00c f99a 	bl	8018878 <__cxa_allocate_exception>
 800c544:	4603      	mov	r3, r0
 800c546:	4a08      	ldr	r2, [pc, #32]	; (800c568 <_ZN15ResponserWaiterC1EPKc+0x48>)
 800c548:	601a      	str	r2, [r3, #0]
 800c54a:	2200      	movs	r2, #0
 800c54c:	4907      	ldr	r1, [pc, #28]	; (800c56c <_ZN15ResponserWaiterC1EPKc+0x4c>)
 800c54e:	4618      	mov	r0, r3
 800c550:	f00c feca 	bl	80192e8 <__cxa_throw>
			}

			strcpy(this->waitForStr, waitForStr);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6839      	ldr	r1, [r7, #0]
 800c558:	4618      	mov	r0, r3
 800c55a:	f00f fb90 	bl	801bc7e <strcpy>
		}
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	4618      	mov	r0, r3
 800c562:	3708      	adds	r7, #8
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}
 800c568:	0801ec68 	.word	0x0801ec68
 800c56c:	08023b60 	.word	0x08023b60

0800c570 <_ZN15ResponserWaiter7addCharEc>:
		bool addChar(const char oneChar)
 800c570:	b480      	push	{r7}
 800c572:	b083      	sub	sp, #12
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	460b      	mov	r3, r1
 800c57a:	70fb      	strb	r3, [r7, #3]
		{
			if (waitForStr[waitForStrCursor] == oneChar)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c582:	461a      	mov	r2, r3
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	5c9b      	ldrb	r3, [r3, r2]
 800c588:	78fa      	ldrb	r2, [r7, #3]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d111      	bne.n	800c5b2 <_ZN15ResponserWaiter7addCharEc+0x42>
			{
				waitForStrCursor++;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c594:	3301      	adds	r3, #1
 800c596:	b2da      	uxtb	r2, r3
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
				if (waitForStr[waitForStrCursor] == '\0')
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	5c9b      	ldrb	r3, [r3, r2]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d105      	bne.n	800c5ba <_ZN15ResponserWaiter7addCharEc+0x4a>
				{
					return true;
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	e004      	b.n	800c5bc <_ZN15ResponserWaiter7addCharEc+0x4c>
				}
			}
			else
			{
				waitForStrCursor = 0;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
			}

			return false;
 800c5ba:	2300      	movs	r3, #0
		}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	370c      	adds	r7, #12
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr

0800c5c8 <_ZN12HttpResponseD1Ev>:
};

//==================

HttpResponse::~ HttpResponse()
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
{
	if (responseSize > 0)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	891b      	ldrh	r3, [r3, #8]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d004      	beq.n	800c5e2 <_ZN12HttpResponseD1Ev+0x1a>
	{
		free(response);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	695b      	ldr	r3, [r3, #20]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f00d faef 	bl	8019bc0 <free>
	}
}
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3708      	adds	r7, #8
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <_ZN12HttpResponse17getResponseStatusEv>:

int HttpResponse::getResponseStatus()
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b084      	sub	sp, #16
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
	if (!isValid())
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 f837 	bl	800c668 <_ZN12HttpResponse7isValidEv>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	f083 0301 	eor.w	r3, r3, #1
 800c600:	b2db      	uxtb	r3, r3
 800c602:	2b00      	cmp	r3, #0
 800c604:	d00a      	beq.n	800c61c <_ZN12HttpResponse17getResponseStatusEv+0x30>
	{
		throw "invalid response";
 800c606:	2004      	movs	r0, #4
 800c608:	f00c f936 	bl	8018878 <__cxa_allocate_exception>
 800c60c:	4603      	mov	r3, r0
 800c60e:	4a0e      	ldr	r2, [pc, #56]	; (800c648 <_ZN12HttpResponse17getResponseStatusEv+0x5c>)
 800c610:	601a      	str	r2, [r3, #0]
 800c612:	2200      	movs	r2, #0
 800c614:	490d      	ldr	r1, [pc, #52]	; (800c64c <_ZN12HttpResponse17getResponseStatusEv+0x60>)
 800c616:	4618      	mov	r0, r3
 800c618:	f00c fe66 	bl	80192e8 <__cxa_throw>
	}

	char statusStr[4] = "";
 800c61c:	2300      	movs	r3, #0
 800c61e:	60fb      	str	r3, [r7, #12]
	strncpy(statusStr, response+9, 3);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	695b      	ldr	r3, [r3, #20]
 800c624:	f103 0109 	add.w	r1, r3, #9
 800c628:	f107 030c 	add.w	r3, r7, #12
 800c62c:	2203      	movs	r2, #3
 800c62e:	4618      	mov	r0, r3
 800c630:	f00f fa2f 	bl	801ba92 <strncpy>

	//TODO test with invalid string
	return atoi(statusStr);
 800c634:	f107 030c 	add.w	r3, r7, #12
 800c638:	4618      	mov	r0, r3
 800c63a:	f00d fab5 	bl	8019ba8 <atoi>
 800c63e:	4603      	mov	r3, r0
}
 800c640:	4618      	mov	r0, r3
 800c642:	3710      	adds	r7, #16
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}
 800c648:	0801ec78 	.word	0x0801ec78
 800c64c:	08023b60 	.word	0x08023b60

0800c650 <_ZN12HttpResponse10isCompleteEv>:

bool HttpResponse::isComplete()
{
 800c650:	b480      	push	{r7}
 800c652:	b083      	sub	sp, #12
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
	return responseCompleted;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	7e9b      	ldrb	r3, [r3, #26]
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	370c      	adds	r7, #12
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr

0800c668 <_ZN12HttpResponse7isValidEv>:

bool HttpResponse::isValid()
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
	if (!isComplete())
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f7ff ffed 	bl	800c650 <_ZN12HttpResponse10isCompleteEv>
 800c676:	4603      	mov	r3, r0
 800c678:	f083 0301 	eor.w	r3, r3, #1
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d001      	beq.n	800c686 <_ZN12HttpResponse7isValidEv+0x1e>
	{
		return false;
 800c682:	2300      	movs	r3, #0
 800c684:	e006      	b.n	800c694 <_ZN12HttpResponse7isValidEv+0x2c>
	}

	if (responseSize < 20)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	891b      	ldrh	r3, [r3, #8]
 800c68a:	2b13      	cmp	r3, #19
 800c68c:	d801      	bhi.n	800c692 <_ZN12HttpResponse7isValidEv+0x2a>
	{
		return false;
 800c68e:	2300      	movs	r3, #0
 800c690:	e000      	b.n	800c694 <_ZN12HttpResponse7isValidEv+0x2c>
	}

	return true;
 800c692:	2301      	movs	r3, #1
}
 800c694:	4618      	mov	r0, r3
 800c696:	3708      	adds	r7, #8
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <_ZN12HttpResponse8readCharEc>:

void HttpResponse::readChar(const char oneChar)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	460b      	mov	r3, r1
 800c6a6:	70fb      	strb	r3, [r7, #3]
	if (!ipdTokenFound)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	79db      	ldrb	r3, [r3, #7]
 800c6ac:	f083 0301 	eor.w	r3, r3, #1
 800c6b0:	b2db      	uxtb	r3, r3
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d01c      	beq.n	800c6f0 <_ZN12HttpResponse8readCharEc+0x54>
	{
		if (ipdToken[ipdTokenSearchCursor] == oneChar)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	799b      	ldrb	r3, [r3, #6]
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	5c9b      	ldrb	r3, [r3, r2]
 800c6c0:	78fa      	ldrb	r2, [r7, #3]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d110      	bne.n	800c6e8 <_ZN12HttpResponse8readCharEc+0x4c>
		{
			ipdTokenSearchCursor++;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	799b      	ldrb	r3, [r3, #6]
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	b2da      	uxtb	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	719a      	strb	r2, [r3, #6]
			if (ipdToken[ipdTokenSearchCursor] == '\0')
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	799b      	ldrb	r3, [r3, #6]
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	5c9b      	ldrb	r3, [r3, r2]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d16c      	bne.n	800c7ba <_ZN12HttpResponse8readCharEc+0x11e>
			{
				ipdTokenFound = true;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	71da      	strb	r2, [r3, #7]
		{
			responseCompleted = true;
			response[responseSize] = '\0';
		}
	}
}
 800c6e6:	e068      	b.n	800c7ba <_ZN12HttpResponse8readCharEc+0x11e>
			ipdTokenSearchCursor = 0;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	719a      	strb	r2, [r3, #6]
}
 800c6ee:	e064      	b.n	800c7ba <_ZN12HttpResponse8readCharEc+0x11e>
	else if (ipdTokenFound && !responseSizeFound)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	79db      	ldrb	r3, [r3, #7]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d033      	beq.n	800c760 <_ZN12HttpResponse8readCharEc+0xc4>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	7c5b      	ldrb	r3, [r3, #17]
 800c6fc:	f083 0301 	eor.w	r3, r3, #1
 800c700:	b2db      	uxtb	r3, r3
 800c702:	2b00      	cmp	r3, #0
 800c704:	d02c      	beq.n	800c760 <_ZN12HttpResponse8readCharEc+0xc4>
		if (':' == oneChar)
 800c706:	78fb      	ldrb	r3, [r7, #3]
 800c708:	2b3a      	cmp	r3, #58	; 0x3a
 800c70a:	d11d      	bne.n	800c748 <_ZN12HttpResponse8readCharEc+0xac>
			responseSizeFound = true;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2201      	movs	r2, #1
 800c710:	745a      	strb	r2, [r3, #17]
			responseSizeToken[responseSizeTokenCursor] = '\0';
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	7c1b      	ldrb	r3, [r3, #16]
 800c716:	461a      	mov	r2, r3
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	4413      	add	r3, r2
 800c71c:	2200      	movs	r2, #0
 800c71e:	729a      	strb	r2, [r3, #10]
			responseSize = atoi(responseSizeToken);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	330a      	adds	r3, #10
 800c724:	4618      	mov	r0, r3
 800c726:	f00d fa3f 	bl	8019ba8 <atoi>
 800c72a:	4603      	mov	r3, r0
 800c72c:	b29a      	uxth	r2, r3
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	811a      	strh	r2, [r3, #8]
			response = (char*) malloc(responseSize+1);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	891b      	ldrh	r3, [r3, #8]
 800c736:	3301      	adds	r3, #1
 800c738:	4618      	mov	r0, r3
 800c73a:	f00d fa39 	bl	8019bb0 <malloc>
 800c73e:	4603      	mov	r3, r0
 800c740:	461a      	mov	r2, r3
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	615a      	str	r2, [r3, #20]
		if (':' == oneChar)
 800c746:	e038      	b.n	800c7ba <_ZN12HttpResponse8readCharEc+0x11e>
			responseSizeToken[responseSizeTokenCursor++] =  oneChar;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	7c1b      	ldrb	r3, [r3, #16]
 800c74c:	1c5a      	adds	r2, r3, #1
 800c74e:	b2d1      	uxtb	r1, r2
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	7411      	strb	r1, [r2, #16]
 800c754:	461a      	mov	r2, r3
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	4413      	add	r3, r2
 800c75a:	78fa      	ldrb	r2, [r7, #3]
 800c75c:	729a      	strb	r2, [r3, #10]
		if (':' == oneChar)
 800c75e:	e02c      	b.n	800c7ba <_ZN12HttpResponse8readCharEc+0x11e>
	else if (ipdTokenFound && responseSizeFound && !responseCompleted)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	79db      	ldrb	r3, [r3, #7]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d028      	beq.n	800c7ba <_ZN12HttpResponse8readCharEc+0x11e>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	7c5b      	ldrb	r3, [r3, #17]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d024      	beq.n	800c7ba <_ZN12HttpResponse8readCharEc+0x11e>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	7e9b      	ldrb	r3, [r3, #26]
 800c774:	f083 0301 	eor.w	r3, r3, #1
 800c778:	b2db      	uxtb	r3, r3
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d01d      	beq.n	800c7ba <_ZN12HttpResponse8readCharEc+0x11e>
		response[responseWriteCursor++] = oneChar;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	695a      	ldr	r2, [r3, #20]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	8b1b      	ldrh	r3, [r3, #24]
 800c786:	1c59      	adds	r1, r3, #1
 800c788:	b288      	uxth	r0, r1
 800c78a:	6879      	ldr	r1, [r7, #4]
 800c78c:	8308      	strh	r0, [r1, #24]
 800c78e:	4413      	add	r3, r2
 800c790:	78fa      	ldrb	r2, [r7, #3]
 800c792:	701a      	strb	r2, [r3, #0]
		if (responseWriteCursor == responseSize -1)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	8b1b      	ldrh	r3, [r3, #24]
 800c798:	461a      	mov	r2, r3
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	891b      	ldrh	r3, [r3, #8]
 800c79e:	3b01      	subs	r3, #1
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d10a      	bne.n	800c7ba <_ZN12HttpResponse8readCharEc+0x11e>
			responseCompleted = true;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	769a      	strb	r2, [r3, #26]
			response[responseSize] = '\0';
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	695b      	ldr	r3, [r3, #20]
 800c7ae:	687a      	ldr	r2, [r7, #4]
 800c7b0:	8912      	ldrh	r2, [r2, #8]
 800c7b2:	4413      	add	r3, r2
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	701a      	strb	r2, [r3, #0]
}
 800c7b8:	e7ff      	b.n	800c7ba <_ZN12HttpResponse8readCharEc+0x11e>
 800c7ba:	bf00      	nop
 800c7bc:	3708      	adds	r7, #8
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
	...

0800c7c4 <_ZN4Wifi23onReceivedDataFromHuartEPKcj>:

//==================

void Wifi::onReceivedDataFromHuart(const char* data, size_t size)
{
 800c7c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c7c8:	b089      	sub	sp, #36	; 0x24
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	60f8      	str	r0, [r7, #12]
 800c7ce:	60b9      	str	r1, [r7, #8]
 800c7d0:	607a      	str	r2, [r7, #4]
		if (head == circleBufferSize)
		{
			head = 0;
		}
	}
}
 800c7d2:	466b      	mov	r3, sp
 800c7d4:	461e      	mov	r6, r3
	char receivedDataString[size+1];
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	1c59      	adds	r1, r3, #1
 800c7da:	460b      	mov	r3, r1
 800c7dc:	3b01      	subs	r3, #1
 800c7de:	61bb      	str	r3, [r7, #24]
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	4688      	mov	r8, r1
 800c7e4:	4699      	mov	r9, r3
 800c7e6:	f04f 0200 	mov.w	r2, #0
 800c7ea:	f04f 0300 	mov.w	r3, #0
 800c7ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c7f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c7f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	460c      	mov	r4, r1
 800c7fe:	461d      	mov	r5, r3
 800c800:	f04f 0200 	mov.w	r2, #0
 800c804:	f04f 0300 	mov.w	r3, #0
 800c808:	00eb      	lsls	r3, r5, #3
 800c80a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c80e:	00e2      	lsls	r2, r4, #3
 800c810:	1dcb      	adds	r3, r1, #7
 800c812:	08db      	lsrs	r3, r3, #3
 800c814:	00db      	lsls	r3, r3, #3
 800c816:	ebad 0d03 	sub.w	sp, sp, r3
 800c81a:	466b      	mov	r3, sp
 800c81c:	3300      	adds	r3, #0
 800c81e:	617b      	str	r3, [r7, #20]
	strncpy(receivedDataString, data, size);
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	68b9      	ldr	r1, [r7, #8]
 800c824:	6978      	ldr	r0, [r7, #20]
 800c826:	f00f f934 	bl	801ba92 <strncpy>
	receivedDataString[size] = '\0';
 800c82a:	697a      	ldr	r2, [r7, #20]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	4413      	add	r3, r2
 800c830:	2200      	movs	r2, #0
 800c832:	701a      	strb	r2, [r3, #0]
	logger->debug("Received from WIFI module", receivedDataString);
 800c834:	4b1c      	ldr	r3, [pc, #112]	; (800c8a8 <_ZN4Wifi23onReceivedDataFromHuartEPKcj+0xe4>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	697a      	ldr	r2, [r7, #20]
 800c83a:	491c      	ldr	r1, [pc, #112]	; (800c8ac <_ZN4Wifi23onReceivedDataFromHuartEPKcj+0xe8>)
 800c83c:	4618      	mov	r0, r3
 800c83e:	f7fe fd1d 	bl	800b27c <_ZN6Logger5debugEPKcS1_>
	for (size_t i=0; i<size; i++)
 800c842:	2300      	movs	r3, #0
 800c844:	61fb      	str	r3, [r7, #28]
 800c846:	e025      	b.n	800c894 <_ZN4Wifi23onReceivedDataFromHuartEPKcj+0xd0>
		circleBuffer[head] = data[i];
 800c848:	68ba      	ldr	r2, [r7, #8]
 800c84a:	69fb      	ldr	r3, [r7, #28]
 800c84c:	4413      	add	r3, r2
 800c84e:	68fa      	ldr	r2, [r7, #12]
 800c850:	f8b2 2202 	ldrh.w	r2, [r2, #514]	; 0x202
 800c854:	b292      	uxth	r2, r2
 800c856:	7819      	ldrb	r1, [r3, #0]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	5499      	strb	r1, [r3, r2]
		head++;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800c862:	b29b      	uxth	r3, r3
 800c864:	3301      	adds	r3, #1
 800c866:	b29a      	uxth	r2, r3
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
		if (head == circleBufferSize)
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800c874:	b29b      	uxth	r3, r3
 800c876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c87a:	bf0c      	ite	eq
 800c87c:	2301      	moveq	r3, #1
 800c87e:	2300      	movne	r3, #0
 800c880:	b2db      	uxtb	r3, r3
 800c882:	2b00      	cmp	r3, #0
 800c884:	d003      	beq.n	800c88e <_ZN4Wifi23onReceivedDataFromHuartEPKcj+0xca>
			head = 0;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	2200      	movs	r2, #0
 800c88a:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
	for (size_t i=0; i<size; i++)
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	3301      	adds	r3, #1
 800c892:	61fb      	str	r3, [r7, #28]
 800c894:	69fa      	ldr	r2, [r7, #28]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	429a      	cmp	r2, r3
 800c89a:	d3d5      	bcc.n	800c848 <_ZN4Wifi23onReceivedDataFromHuartEPKcj+0x84>
 800c89c:	46b5      	mov	sp, r6
}
 800c89e:	bf00      	nop
 800c8a0:	3724      	adds	r7, #36	; 0x24
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8a8:	2000033c 	.word	0x2000033c
 800c8ac:	0801ec8c 	.word	0x0801ec8c

0800c8b0 <_ZN4Wifi4initEP20__UART_HandleTypeDefPKcS3_>:
	head = 0;
	tail = 0;
}

void Wifi::init (UART_HandleTypeDef* huart, const char *ssid, const char *password)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b098      	sub	sp, #96	; 0x60
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	607a      	str	r2, [r7, #4]
 800c8bc:	603b      	str	r3, [r7, #0]
	this->huart = huart;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	68ba      	ldr	r2, [r7, #8]
 800c8c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
//	{
//		throw "cannot execute AT+RST";
//	}

	/********* AT **********/
	writeToUart("AT\r\n");
 800c8c6:	4938      	ldr	r1, [pc, #224]	; (800c9a8 <_ZN4Wifi4initEP20__UART_HandleTypeDefPKcS3_+0xf8>)
 800c8c8:	68f8      	ldr	r0, [r7, #12]
 800c8ca:	f000 fb5f 	bl	800cf8c <_ZN4Wifi11writeToUartEPKc>
	if(!waitFor("OK\r\n"))
 800c8ce:	4937      	ldr	r1, [pc, #220]	; (800c9ac <_ZN4Wifi4initEP20__UART_HandleTypeDefPKcS3_+0xfc>)
 800c8d0:	68f8      	ldr	r0, [r7, #12]
 800c8d2:	f000 f87d 	bl	800c9d0 <_ZN4Wifi7waitForEPKc>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	f083 0301 	eor.w	r3, r3, #1
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d00a      	beq.n	800c8f8 <_ZN4Wifi4initEP20__UART_HandleTypeDefPKcS3_+0x48>
	{
		throw "cannot execute AT";
 800c8e2:	2004      	movs	r0, #4
 800c8e4:	f00b ffc8 	bl	8018878 <__cxa_allocate_exception>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	4a31      	ldr	r2, [pc, #196]	; (800c9b0 <_ZN4Wifi4initEP20__UART_HandleTypeDefPKcS3_+0x100>)
 800c8ec:	601a      	str	r2, [r3, #0]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	4930      	ldr	r1, [pc, #192]	; (800c9b4 <_ZN4Wifi4initEP20__UART_HandleTypeDefPKcS3_+0x104>)
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f00c fcf8 	bl	80192e8 <__cxa_throw>
	}

	/********* AT+CWMODE=1 **********/
	writeToUart("AT+CWMODE=1\r\n");
 800c8f8:	492f      	ldr	r1, [pc, #188]	; (800c9b8 <_ZN4Wifi4initEP20__UART_HandleTypeDefPKcS3_+0x108>)
 800c8fa:	68f8      	ldr	r0, [r7, #12]
 800c8fc:	f000 fb46 	bl	800cf8c <_ZN4Wifi11writeToUartEPKc>
	if(!waitFor("OK\r\n"))
 800c900:	492a      	ldr	r1, [pc, #168]	; (800c9ac <_ZN4Wifi4initEP20__UART_HandleTypeDefPKcS3_+0xfc>)
 800c902:	68f8      	ldr	r0, [r7, #12]
 800c904:	f000 f864 	bl	800c9d0 <_ZN4Wifi7waitForEPKc>
 800c908:	4603      	mov	r3, r0
 800c90a:	f083 0301 	eor.w	r3, r3, #1
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	2b00      	cmp	r3, #0
 800c912:	d00a      	beq.n	800c92a <_ZN4Wifi4initEP20__UART_HandleTypeDefPKcS3_+0x7a>
	{
		throw "cannot execute AT+CWMODE=1";
 800c914:	2004      	movs	r0, #4
 800c916:	f00b ffaf 	bl	8018878 <__cxa_allocate_exception>
 800c91a:	4603      	mov	r3, r0
 800c91c:	4a27      	ldr	r2, [pc, #156]	; (800c9bc <_ZN4Wifi4initEP20__UART_HandleTypeDefPKcS3_+0x10c>)
 800c91e:	601a      	str	r2, [r3, #0]
 800c920:	2200      	movs	r2, #0
 800c922:	4924      	ldr	r1, [pc, #144]	; (800c9b4 <_ZN4Wifi4initEP20__UART_HandleTypeDefPKcS3_+0x104>)
 800c924:	4618      	mov	r0, r3
 800c926:	f00c fcdf 	bl	80192e8 <__cxa_throw>
	}


	/********* AT+CWJAP="SSID","PASSWD" **********/
	char joinApCommand[80];
	sprintf(joinApCommand, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 800c92a:	f107 0010 	add.w	r0, r7, #16
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	4923      	ldr	r1, [pc, #140]	; (800c9c0 <_ZN4Wifi4initEP20__UART_HandleTypeDefPKcS3_+0x110>)
 800c934:	f00e ff7e 	bl	801b834 <siprintf>
	writeToUart(joinApCommand);
 800c938:	f107 0310 	add.w	r3, r7, #16
 800c93c:	4619      	mov	r1, r3
 800c93e:	68f8      	ldr	r0, [r7, #12]
 800c940:	f000 fb24 	bl	800cf8c <_ZN4Wifi11writeToUartEPKc>
	if(!waitFor("OK\r\n")) //TODO there can be more text
 800c944:	4919      	ldr	r1, [pc, #100]	; (800c9ac <_ZN4Wifi4initEP20__UART_HandleTypeDefPKcS3_+0xfc>)
 800c946:	68f8      	ldr	r0, [r7, #12]
 800c948:	f000 f842 	bl	800c9d0 <_ZN4Wifi7waitForEPKc>
 800c94c:	4603      	mov	r3, r0
 800c94e:	f083 0301 	eor.w	r3, r3, #1
 800c952:	b2db      	uxtb	r3, r3
 800c954:	2b00      	cmp	r3, #0
 800c956:	d00a      	beq.n	800c96e <_ZN4Wifi4initEP20__UART_HandleTypeDefPKcS3_+0xbe>
	{
		throw "cannot execute AT+CWJAP";
 800c958:	2004      	movs	r0, #4
 800c95a:	f00b ff8d 	bl	8018878 <__cxa_allocate_exception>
 800c95e:	4603      	mov	r3, r0
 800c960:	4a18      	ldr	r2, [pc, #96]	; (800c9c4 <_ZN4Wifi4initEP20__UART_HandleTypeDefPKcS3_+0x114>)
 800c962:	601a      	str	r2, [r3, #0]
 800c964:	2200      	movs	r2, #0
 800c966:	4913      	ldr	r1, [pc, #76]	; (800c9b4 <_ZN4Wifi4initEP20__UART_HandleTypeDefPKcS3_+0x104>)
 800c968:	4618      	mov	r0, r3
 800c96a:	f00c fcbd 	bl	80192e8 <__cxa_throw>
	}

	/********* AT+CIPMUX=0 **********/
	writeToUart("AT+CIPMUX=0\r\n");
 800c96e:	4916      	ldr	r1, [pc, #88]	; (800c9c8 <_ZN4Wifi4initEP20__UART_HandleTypeDefPKcS3_+0x118>)
 800c970:	68f8      	ldr	r0, [r7, #12]
 800c972:	f000 fb0b 	bl	800cf8c <_ZN4Wifi11writeToUartEPKc>
	if(!waitFor("OK\r\n"))
 800c976:	490d      	ldr	r1, [pc, #52]	; (800c9ac <_ZN4Wifi4initEP20__UART_HandleTypeDefPKcS3_+0xfc>)
 800c978:	68f8      	ldr	r0, [r7, #12]
 800c97a:	f000 f829 	bl	800c9d0 <_ZN4Wifi7waitForEPKc>
 800c97e:	4603      	mov	r3, r0
 800c980:	f083 0301 	eor.w	r3, r3, #1
 800c984:	b2db      	uxtb	r3, r3
 800c986:	2b00      	cmp	r3, #0
 800c988:	d00a      	beq.n	800c9a0 <_ZN4Wifi4initEP20__UART_HandleTypeDefPKcS3_+0xf0>
	{
		throw "cannot execute AT+CIPMUX=0";
 800c98a:	2004      	movs	r0, #4
 800c98c:	f00b ff74 	bl	8018878 <__cxa_allocate_exception>
 800c990:	4603      	mov	r3, r0
 800c992:	4a0e      	ldr	r2, [pc, #56]	; (800c9cc <_ZN4Wifi4initEP20__UART_HandleTypeDefPKcS3_+0x11c>)
 800c994:	601a      	str	r2, [r3, #0]
 800c996:	2200      	movs	r2, #0
 800c998:	4906      	ldr	r1, [pc, #24]	; (800c9b4 <_ZN4Wifi4initEP20__UART_HandleTypeDefPKcS3_+0x104>)
 800c99a:	4618      	mov	r0, r3
 800c99c:	f00c fca4 	bl	80192e8 <__cxa_throw>
	}
}
 800c9a0:	bf00      	nop
 800c9a2:	3760      	adds	r7, #96	; 0x60
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	0801eca8 	.word	0x0801eca8
 800c9ac:	0801ecb0 	.word	0x0801ecb0
 800c9b0:	0801ecb8 	.word	0x0801ecb8
 800c9b4:	08023b60 	.word	0x08023b60
 800c9b8:	0801eccc 	.word	0x0801eccc
 800c9bc:	0801ecdc 	.word	0x0801ecdc
 800c9c0:	0801ecf8 	.word	0x0801ecf8
 800c9c4:	0801ed10 	.word	0x0801ed10
 800c9c8:	0801ed28 	.word	0x0801ed28
 800c9cc:	0801ed38 	.word	0x0801ed38

0800c9d0 <_ZN4Wifi7waitForEPKc>:

//TODO add timeout as parameter
//currently max delay is 10 seconds
bool Wifi::waitFor(const char* expectedData)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b0a4      	sub	sp, #144	; 0x90
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
 800c9d8:	6039      	str	r1, [r7, #0]
	ResponserWaiter responserWaiter(expectedData);
 800c9da:	f107 0308 	add.w	r3, r7, #8
 800c9de:	6839      	ldr	r1, [r7, #0]
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7ff fd9d 	bl	800c520 <_ZN15ResponserWaiterC1EPKc>

	for (int i = 0; i < 5000; i++)
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c9ec:	e04b      	b.n	800ca86 <_ZN4Wifi7waitForEPKc+0xb6>
	{
		if (tail == head)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800c9f4:	b29a      	uxth	r2, r3
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	bf0c      	ite	eq
 800ca02:	2301      	moveq	r3, #1
 800ca04:	2300      	movne	r3, #0
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d008      	beq.n	800ca1e <_ZN4Wifi7waitForEPKc+0x4e>
		{
			i++;
 800ca0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ca10:	3301      	adds	r3, #1
 800ca12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			HAL_Delay(10);
 800ca16:	200a      	movs	r0, #10
 800ca18:	f001 f942 	bl	800dca0 <HAL_Delay>
 800ca1c:	e02e      	b.n	800ca7c <_ZN4Wifi7waitForEPKc+0xac>
		}
		else
		{
			char symbol = circleBuffer[tail];
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800ca24:	b29b      	uxth	r3, r3
 800ca26:	461a      	mov	r2, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	5c9b      	ldrb	r3, [r3, r2]
 800ca2c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			++tail;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	3301      	adds	r3, #1
 800ca3a:	b29a      	uxth	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
			if (tail == circleBufferSize)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800ca48:	b29b      	uxth	r3, r3
 800ca4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca4e:	bf0c      	ite	eq
 800ca50:	2301      	moveq	r3, #1
 800ca52:	2300      	movne	r3, #0
 800ca54:	b2db      	uxtb	r3, r3
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d003      	beq.n	800ca62 <_ZN4Wifi7waitForEPKc+0x92>
			{
				tail = 0;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
			}

			if (responserWaiter.addChar(symbol))
 800ca62:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 800ca66:	f107 0308 	add.w	r3, r7, #8
 800ca6a:	4611      	mov	r1, r2
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f7ff fd7f 	bl	800c570 <_ZN15ResponserWaiter7addCharEc>
 800ca72:	4603      	mov	r3, r0
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d001      	beq.n	800ca7c <_ZN4Wifi7waitForEPKc+0xac>
			{
				return true;
 800ca78:	2301      	movs	r3, #1
 800ca7a:	e00b      	b.n	800ca94 <_ZN4Wifi7waitForEPKc+0xc4>
	for (int i = 0; i < 5000; i++)
 800ca7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ca80:	3301      	adds	r3, #1
 800ca82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ca86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ca8a:	f241 3287 	movw	r2, #4999	; 0x1387
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	ddad      	ble.n	800c9ee <_ZN4Wifi7waitForEPKc+0x1e>
			}
		}
	}

	return false;
 800ca92:	2300      	movs	r3, #0
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3790      	adds	r7, #144	; 0x90
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <_ZN12HttpResponseC1Ev>:
class HttpResponse
 800ca9c:	b480      	push	{r7}
 800ca9e:	b083      	sub	sp, #12
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	4a11      	ldr	r2, [pc, #68]	; (800caec <_ZN12HttpResponseC1Ev+0x50>)
 800caa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800caac:	6018      	str	r0, [r3, #0]
 800caae:	3304      	adds	r3, #4
 800cab0:	8019      	strh	r1, [r3, #0]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2200      	movs	r2, #0
 800cab6:	719a      	strb	r2, [r3, #6]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2200      	movs	r2, #0
 800cabc:	71da      	strb	r2, [r3, #7]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2200      	movs	r2, #0
 800cac2:	811a      	strh	r2, [r3, #8]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2200      	movs	r2, #0
 800cac8:	741a      	strb	r2, [r3, #16]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2200      	movs	r2, #0
 800cace:	745a      	strb	r2, [r3, #17]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2200      	movs	r2, #0
 800cad4:	831a      	strh	r2, [r3, #24]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2200      	movs	r2, #0
 800cada:	769a      	strb	r2, [r3, #26]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	4618      	mov	r0, r3
 800cae0:	370c      	adds	r7, #12
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop
 800caec:	0801ed54 	.word	0x0801ed54

0800caf0 <_ZN4Wifi8sendPostEPKc>:

//currently max delay is 10 seconds
bool Wifi::sendPost(const char* data)
{
 800caf0:	b5b0      	push	{r4, r5, r7, lr}
 800caf2:	b0ec      	sub	sp, #432	; 0x1b0
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800cafa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800cafe:	6018      	str	r0, [r3, #0]
 800cb00:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800cb04:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800cb08:	6019      	str	r1, [r3, #0]
	writeToUart("AT+CIPSTART=\"TCP\",\"18.173.206.151\",80\r\n");
 800cb0a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800cb0e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800cb12:	49d0      	ldr	r1, [pc, #832]	; (800ce54 <_ZN4Wifi8sendPostEPKc+0x364>)
 800cb14:	6818      	ldr	r0, [r3, #0]
 800cb16:	f000 fa39 	bl	800cf8c <_ZN4Wifi11writeToUartEPKc>
	if(!waitFor("OK\r\n"))
 800cb1a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800cb1e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800cb22:	49cd      	ldr	r1, [pc, #820]	; (800ce58 <_ZN4Wifi8sendPostEPKc+0x368>)
 800cb24:	6818      	ldr	r0, [r3, #0]
 800cb26:	f7ff ff53 	bl	800c9d0 <_ZN4Wifi7waitForEPKc>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	f083 0301 	eor.w	r3, r3, #1
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d00a      	beq.n	800cb4c <_ZN4Wifi8sendPostEPKc+0x5c>
	{
		throw "cannot execute AT+CIPSTART";
 800cb36:	2004      	movs	r0, #4
 800cb38:	f00b fe9e 	bl	8018878 <__cxa_allocate_exception>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	4ac7      	ldr	r2, [pc, #796]	; (800ce5c <_ZN4Wifi8sendPostEPKc+0x36c>)
 800cb40:	601a      	str	r2, [r3, #0]
 800cb42:	2200      	movs	r2, #0
 800cb44:	49c6      	ldr	r1, [pc, #792]	; (800ce60 <_ZN4Wifi8sendPostEPKc+0x370>)
 800cb46:	4618      	mov	r0, r3
 800cb48:	f00c fbce 	bl	80192e8 <__cxa_throw>
	}

	uint16_t dataSize = strlen(data);
 800cb4c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800cb50:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800cb54:	6818      	ldr	r0, [r3, #0]
 800cb56:	f7f9 fb73 	bl	8006240 <strlen>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
	char method[64] = "POST /prod/export-chunk HTTP/1.1\r\n";
 800cb60:	4bc0      	ldr	r3, [pc, #768]	; (800ce64 <_ZN4Wifi8sendPostEPKc+0x374>)
 800cb62:	f507 74b6 	add.w	r4, r7, #364	; 0x16c
 800cb66:	461d      	mov	r5, r3
 800cb68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb70:	682b      	ldr	r3, [r5, #0]
 800cb72:	461a      	mov	r2, r3
 800cb74:	8022      	strh	r2, [r4, #0]
 800cb76:	3402      	adds	r4, #2
 800cb78:	0c1b      	lsrs	r3, r3, #16
 800cb7a:	7023      	strb	r3, [r4, #0]
 800cb7c:	f207 138f 	addw	r3, r7, #399	; 0x18f
 800cb80:	221d      	movs	r2, #29
 800cb82:	2100      	movs	r1, #0
 800cb84:	4618      	mov	r0, r3
 800cb86:	f00e ff5d 	bl	801ba44 <memset>
	char hostHeader[64] = "Host: d1fur4uvofyjrb.cloudfront.net\r\n";
 800cb8a:	4bb7      	ldr	r3, [pc, #732]	; (800ce68 <_ZN4Wifi8sendPostEPKc+0x378>)
 800cb8c:	f507 7496 	add.w	r4, r7, #300	; 0x12c
 800cb90:	461d      	mov	r5, r3
 800cb92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb9a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cb9e:	6020      	str	r0, [r4, #0]
 800cba0:	3404      	adds	r4, #4
 800cba2:	8021      	strh	r1, [r4, #0]
 800cba4:	f507 73a9 	add.w	r3, r7, #338	; 0x152
 800cba8:	2200      	movs	r2, #0
 800cbaa:	601a      	str	r2, [r3, #0]
 800cbac:	605a      	str	r2, [r3, #4]
 800cbae:	609a      	str	r2, [r3, #8]
 800cbb0:	60da      	str	r2, [r3, #12]
 800cbb2:	611a      	str	r2, [r3, #16]
 800cbb4:	615a      	str	r2, [r3, #20]
 800cbb6:	831a      	strh	r2, [r3, #24]
	char contentTypeHeader[64] = "Content-Type: text/csv\r\n";
 800cbb8:	4bac      	ldr	r3, [pc, #688]	; (800ce6c <_ZN4Wifi8sendPostEPKc+0x37c>)
 800cbba:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 800cbbe:	461d      	mov	r5, r3
 800cbc0:	6828      	ldr	r0, [r5, #0]
 800cbc2:	6869      	ldr	r1, [r5, #4]
 800cbc4:	68aa      	ldr	r2, [r5, #8]
 800cbc6:	68eb      	ldr	r3, [r5, #12]
 800cbc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cbca:	6928      	ldr	r0, [r5, #16]
 800cbcc:	6969      	ldr	r1, [r5, #20]
 800cbce:	c403      	stmia	r4!, {r0, r1}
 800cbd0:	7e2b      	ldrb	r3, [r5, #24]
 800cbd2:	7023      	strb	r3, [r4, #0]
 800cbd4:	f207 1305 	addw	r3, r7, #261	; 0x105
 800cbd8:	2227      	movs	r2, #39	; 0x27
 800cbda:	2100      	movs	r1, #0
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f00e ff31 	bl	801ba44 <memset>
	char authorizationHeader[128] = "Authorization: Z3BzVHJhY2tlclN5bmM6a2tra2FhYWRkZGtmZHNqa2FoZmdqaEpIR0dISEpKSEhKSEdHSDc2NDczOGtKVUlm\r\n";
 800cbe2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800cbe6:	f5a3 74a2 	sub.w	r4, r3, #324	; 0x144
 800cbea:	4ba1      	ldr	r3, [pc, #644]	; (800ce70 <_ZN4Wifi8sendPostEPKc+0x380>)
 800cbec:	4620      	mov	r0, r4
 800cbee:	4619      	mov	r1, r3
 800cbf0:	2366      	movs	r3, #102	; 0x66
 800cbf2:	461a      	mov	r2, r3
 800cbf4:	f00f f84b 	bl	801bc8e <memcpy>
 800cbf8:	f104 0366 	add.w	r3, r4, #102	; 0x66
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	601a      	str	r2, [r3, #0]
 800cc00:	605a      	str	r2, [r3, #4]
 800cc02:	609a      	str	r2, [r3, #8]
 800cc04:	60da      	str	r2, [r3, #12]
 800cc06:	611a      	str	r2, [r3, #16]
 800cc08:	615a      	str	r2, [r3, #20]
 800cc0a:	831a      	strh	r2, [r3, #24]
	char contentLengthHeader[30];
	sprintf(contentLengthHeader, "Content-Length: %d\r\n", dataSize);
 800cc0c:	f8b7 21ae 	ldrh.w	r2, [r7, #430]	; 0x1ae
 800cc10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800cc14:	4997      	ldr	r1, [pc, #604]	; (800ce74 <_ZN4Wifi8sendPostEPKc+0x384>)
 800cc16:	4618      	mov	r0, r3
 800cc18:	f00e fe0c 	bl	801b834 <siprintf>
	char headersTermination[3] = "\r\n";
 800cc1c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800cc20:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800cc24:	4a94      	ldr	r2, [pc, #592]	; (800ce78 <_ZN4Wifi8sendPostEPKc+0x388>)
 800cc26:	6812      	ldr	r2, [r2, #0]
 800cc28:	4611      	mov	r1, r2
 800cc2a:	8019      	strh	r1, [r3, #0]
 800cc2c:	3302      	adds	r3, #2
 800cc2e:	0c12      	lsrs	r2, r2, #16
 800cc30:	701a      	strb	r2, [r3, #0]
	uint16_t requestSize = strlen(method) + strlen(hostHeader) + strlen(contentTypeHeader)
 800cc32:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7f9 fb02 	bl	8006240 <strlen>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	b29c      	uxth	r4, r3
 800cc40:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800cc44:	4618      	mov	r0, r3
 800cc46:	f7f9 fafb 	bl	8006240 <strlen>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	4423      	add	r3, r4
 800cc50:	b29c      	uxth	r4, r3
 800cc52:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7f9 faf2 	bl	8006240 <strlen>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	4423      	add	r3, r4
 800cc62:	b29c      	uxth	r4, r3
			+ strlen(authorizationHeader) + strlen(contentLengthHeader) + strlen(headersTermination)
 800cc64:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f7f9 fae9 	bl	8006240 <strlen>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	b29b      	uxth	r3, r3
 800cc72:	4423      	add	r3, r4
 800cc74:	b29c      	uxth	r4, r3
 800cc76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f7f9 fae0 	bl	8006240 <strlen>
 800cc80:	4603      	mov	r3, r0
 800cc82:	b29b      	uxth	r3, r3
 800cc84:	4423      	add	r3, r4
 800cc86:	b29c      	uxth	r4, r3
 800cc88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7f9 fad7 	bl	8006240 <strlen>
 800cc92:	4603      	mov	r3, r0
 800cc94:	b29b      	uxth	r3, r3
 800cc96:	4423      	add	r3, r4
 800cc98:	b29a      	uxth	r2, r3
	uint16_t requestSize = strlen(method) + strlen(hostHeader) + strlen(contentTypeHeader)
 800cc9a:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 800cc9e:	4413      	add	r3, r2
 800cca0:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac
			+ dataSize;

	char command[32];
	sprintf(command, "AT+CIPSEND=%d\r\n", requestSize);
 800cca4:	f8b7 21ac 	ldrh.w	r2, [r7, #428]	; 0x1ac
 800cca8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ccac:	4973      	ldr	r1, [pc, #460]	; (800ce7c <_ZN4Wifi8sendPostEPKc+0x38c>)
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f00e fdc0 	bl	801b834 <siprintf>

	writeToUart(command);
 800ccb4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ccb8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800ccbc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800ccc0:	4611      	mov	r1, r2
 800ccc2:	6818      	ldr	r0, [r3, #0]
 800ccc4:	f000 f962 	bl	800cf8c <_ZN4Wifi11writeToUartEPKc>

	if(!waitFor("OK\r\n"))
 800ccc8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800cccc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800ccd0:	4961      	ldr	r1, [pc, #388]	; (800ce58 <_ZN4Wifi8sendPostEPKc+0x368>)
 800ccd2:	6818      	ldr	r0, [r3, #0]
 800ccd4:	f7ff fe7c 	bl	800c9d0 <_ZN4Wifi7waitForEPKc>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	f083 0301 	eor.w	r3, r3, #1
 800ccde:	b2db      	uxtb	r3, r3
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d00a      	beq.n	800ccfa <_ZN4Wifi8sendPostEPKc+0x20a>
	{
		throw "cannot execute AT+CIPSEND";
 800cce4:	2004      	movs	r0, #4
 800cce6:	f00b fdc7 	bl	8018878 <__cxa_allocate_exception>
 800ccea:	4603      	mov	r3, r0
 800ccec:	4a64      	ldr	r2, [pc, #400]	; (800ce80 <_ZN4Wifi8sendPostEPKc+0x390>)
 800ccee:	601a      	str	r2, [r3, #0]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	495b      	ldr	r1, [pc, #364]	; (800ce60 <_ZN4Wifi8sendPostEPKc+0x370>)
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f00c faf7 	bl	80192e8 <__cxa_throw>
	}

	writeToUart(method);
 800ccfa:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 800ccfe:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800cd02:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800cd06:	4611      	mov	r1, r2
 800cd08:	6818      	ldr	r0, [r3, #0]
 800cd0a:	f000 f93f 	bl	800cf8c <_ZN4Wifi11writeToUartEPKc>
	writeToUart(hostHeader);
 800cd0e:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 800cd12:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800cd16:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800cd1a:	4611      	mov	r1, r2
 800cd1c:	6818      	ldr	r0, [r3, #0]
 800cd1e:	f000 f935 	bl	800cf8c <_ZN4Wifi11writeToUartEPKc>
	writeToUart(contentTypeHeader);
 800cd22:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 800cd26:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800cd2a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800cd2e:	4611      	mov	r1, r2
 800cd30:	6818      	ldr	r0, [r3, #0]
 800cd32:	f000 f92b 	bl	800cf8c <_ZN4Wifi11writeToUartEPKc>
	writeToUart(authorizationHeader);
 800cd36:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800cd3a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800cd3e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800cd42:	4611      	mov	r1, r2
 800cd44:	6818      	ldr	r0, [r3, #0]
 800cd46:	f000 f921 	bl	800cf8c <_ZN4Wifi11writeToUartEPKc>
	writeToUart(contentLengthHeader);
 800cd4a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800cd4e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800cd52:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800cd56:	4611      	mov	r1, r2
 800cd58:	6818      	ldr	r0, [r3, #0]
 800cd5a:	f000 f917 	bl	800cf8c <_ZN4Wifi11writeToUartEPKc>
	writeToUart(headersTermination);
 800cd5e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cd62:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800cd66:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800cd6a:	4611      	mov	r1, r2
 800cd6c:	6818      	ldr	r0, [r3, #0]
 800cd6e:	f000 f90d 	bl	800cf8c <_ZN4Wifi11writeToUartEPKc>
	writeToUart(data);
 800cd72:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800cd76:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 800cd7a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800cd7e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800cd82:	6811      	ldr	r1, [r2, #0]
 800cd84:	6818      	ldr	r0, [r3, #0]
 800cd86:	f000 f901 	bl	800cf8c <_ZN4Wifi11writeToUartEPKc>

	HttpResponse httpResponse;
 800cd8a:	f107 030c 	add.w	r3, r7, #12
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7ff fe84 	bl	800ca9c <_ZN12HttpResponseC1Ev>
	readHttpResponse(httpResponse);
 800cd94:	f107 020c 	add.w	r2, r7, #12
 800cd98:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800cd9c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800cda0:	4611      	mov	r1, r2
 800cda2:	6818      	ldr	r0, [r3, #0]
 800cda4:	f000 f882 	bl	800ceac <_ZN4Wifi16readHttpResponseER12HttpResponse>

	writeToUart("AT+CIPCLOSE\r\n");
 800cda8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800cdac:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800cdb0:	4934      	ldr	r1, [pc, #208]	; (800ce84 <_ZN4Wifi8sendPostEPKc+0x394>)
 800cdb2:	6818      	ldr	r0, [r3, #0]
 800cdb4:	f000 f8ea 	bl	800cf8c <_ZN4Wifi11writeToUartEPKc>
	if(!waitFor("OK\r\n"))
 800cdb8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800cdbc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800cdc0:	4925      	ldr	r1, [pc, #148]	; (800ce58 <_ZN4Wifi8sendPostEPKc+0x368>)
 800cdc2:	6818      	ldr	r0, [r3, #0]
 800cdc4:	f7ff fe04 	bl	800c9d0 <_ZN4Wifi7waitForEPKc>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	f083 0301 	eor.w	r3, r3, #1
 800cdce:	b2db      	uxtb	r3, r3
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d00a      	beq.n	800cdea <_ZN4Wifi8sendPostEPKc+0x2fa>
	{
		throw "cannot execute AT+CIPCLOSE";
 800cdd4:	2004      	movs	r0, #4
 800cdd6:	f00b fd4f 	bl	8018878 <__cxa_allocate_exception>
 800cdda:	4603      	mov	r3, r0
 800cddc:	4a2a      	ldr	r2, [pc, #168]	; (800ce88 <_ZN4Wifi8sendPostEPKc+0x398>)
 800cdde:	601a      	str	r2, [r3, #0]
 800cde0:	2200      	movs	r2, #0
 800cde2:	491f      	ldr	r1, [pc, #124]	; (800ce60 <_ZN4Wifi8sendPostEPKc+0x370>)
 800cde4:	4618      	mov	r0, r3
 800cde6:	f00c fa7f 	bl	80192e8 <__cxa_throw>
	}

	if (!httpResponse.isValid())
 800cdea:	f107 030c 	add.w	r3, r7, #12
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7ff fc3a 	bl	800c668 <_ZN12HttpResponse7isValidEv>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	f083 0301 	eor.w	r3, r3, #1
 800cdfa:	b2db      	uxtb	r3, r3
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d00a      	beq.n	800ce16 <_ZN4Wifi8sendPostEPKc+0x326>
	{
		throw "http response incomplete";
 800ce00:	2004      	movs	r0, #4
 800ce02:	f00b fd39 	bl	8018878 <__cxa_allocate_exception>
 800ce06:	4603      	mov	r3, r0
 800ce08:	4a20      	ldr	r2, [pc, #128]	; (800ce8c <_ZN4Wifi8sendPostEPKc+0x39c>)
 800ce0a:	601a      	str	r2, [r3, #0]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	4914      	ldr	r1, [pc, #80]	; (800ce60 <_ZN4Wifi8sendPostEPKc+0x370>)
 800ce10:	4618      	mov	r0, r3
 800ce12:	f00c fa69 	bl	80192e8 <__cxa_throw>
	}

	if (httpResponse.getResponseStatus() != 200)
 800ce16:	f107 030c 	add.w	r3, r7, #12
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7ff fbe6 	bl	800c5ec <_ZN12HttpResponse17getResponseStatusEv>
 800ce20:	4603      	mov	r3, r0
 800ce22:	2bc8      	cmp	r3, #200	; 0xc8
 800ce24:	bf14      	ite	ne
 800ce26:	2301      	movne	r3, #1
 800ce28:	2300      	moveq	r3, #0
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d00a      	beq.n	800ce46 <_ZN4Wifi8sendPostEPKc+0x356>
	{
		throw "http error response received";
 800ce30:	2004      	movs	r0, #4
 800ce32:	f00b fd21 	bl	8018878 <__cxa_allocate_exception>
 800ce36:	4603      	mov	r3, r0
 800ce38:	4a15      	ldr	r2, [pc, #84]	; (800ce90 <_ZN4Wifi8sendPostEPKc+0x3a0>)
 800ce3a:	601a      	str	r2, [r3, #0]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	4908      	ldr	r1, [pc, #32]	; (800ce60 <_ZN4Wifi8sendPostEPKc+0x370>)
 800ce40:	4618      	mov	r0, r3
 800ce42:	f00c fa51 	bl	80192e8 <__cxa_throw>
	}
}
 800ce46:	f107 030c 	add.w	r3, r7, #12
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f7ff fbbc 	bl	800c5c8 <_ZN12HttpResponseD1Ev>
 800ce50:	e027      	b.n	800cea2 <_ZN4Wifi8sendPostEPKc+0x3b2>
 800ce52:	bf00      	nop
 800ce54:	0801ed5c 	.word	0x0801ed5c
 800ce58:	0801ecb0 	.word	0x0801ecb0
 800ce5c:	0801ed84 	.word	0x0801ed84
 800ce60:	08023b60 	.word	0x08023b60
 800ce64:	0801ee4c 	.word	0x0801ee4c
 800ce68:	0801ee8c 	.word	0x0801ee8c
 800ce6c:	0801eecc 	.word	0x0801eecc
 800ce70:	0801eee8 	.word	0x0801eee8
 800ce74:	0801eda0 	.word	0x0801eda0
 800ce78:	0801ef68 	.word	0x0801ef68
 800ce7c:	0801edb8 	.word	0x0801edb8
 800ce80:	0801edc8 	.word	0x0801edc8
 800ce84:	0801ede4 	.word	0x0801ede4
 800ce88:	0801edf4 	.word	0x0801edf4
 800ce8c:	0801ee10 	.word	0x0801ee10
 800ce90:	0801ee2c 	.word	0x0801ee2c
 800ce94:	f107 030c 	add.w	r3, r7, #12
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7ff fb95 	bl	800c5c8 <_ZN12HttpResponseD1Ev>
 800ce9e:	f00b fd27 	bl	80188f0 <__cxa_end_cleanup>
 800cea2:	4618      	mov	r0, r3
 800cea4:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bdb0      	pop	{r4, r5, r7, pc}

0800ceac <_ZN4Wifi16readHttpResponseER12HttpResponse>:

//TODO add timeout as parameter
//currently max delay is 10 seconds
//TODO check TIMER for HAL_Delay whether it is in milliseconds
void Wifi::readHttpResponse(HttpResponse &httpResponse)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b084      	sub	sp, #16
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 5000; i++)
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	60fb      	str	r3, [r7, #12]
 800ceba:	e044      	b.n	800cf46 <_ZN4Wifi16readHttpResponseER12HttpResponse+0x9a>
	{
		if (tail == head)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800cec2:	b29a      	uxth	r2, r3
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800ceca:	b29b      	uxth	r3, r3
 800cecc:	429a      	cmp	r2, r3
 800cece:	bf0c      	ite	eq
 800ced0:	2301      	moveq	r3, #1
 800ced2:	2300      	movne	r3, #0
 800ced4:	b2db      	uxtb	r3, r3
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d006      	beq.n	800cee8 <_ZN4Wifi16readHttpResponseER12HttpResponse+0x3c>
		{
			i++;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	3301      	adds	r3, #1
 800cede:	60fb      	str	r3, [r7, #12]
			HAL_Delay(10);
 800cee0:	200a      	movs	r0, #10
 800cee2:	f000 fedd 	bl	800dca0 <HAL_Delay>
 800cee6:	e02b      	b.n	800cf40 <_ZN4Wifi16readHttpResponseER12HttpResponse+0x94>
		}
		else
		{
			char symbol = circleBuffer[tail];
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	461a      	mov	r2, r3
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	5c9b      	ldrb	r3, [r3, r2]
 800cef6:	72fb      	strb	r3, [r7, #11]
			++tail;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	3301      	adds	r3, #1
 800cf02:	b29a      	uxth	r2, r3
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
			if (tail == circleBufferSize)
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800cf10:	b29b      	uxth	r3, r3
 800cf12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf16:	bf0c      	ite	eq
 800cf18:	2301      	moveq	r3, #1
 800cf1a:	2300      	movne	r3, #0
 800cf1c:	b2db      	uxtb	r3, r3
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d003      	beq.n	800cf2a <_ZN4Wifi16readHttpResponseER12HttpResponse+0x7e>
			{
				tail = 0;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2200      	movs	r2, #0
 800cf26:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
			}

			httpResponse.readChar(symbol);
 800cf2a:	7afb      	ldrb	r3, [r7, #11]
 800cf2c:	4619      	mov	r1, r3
 800cf2e:	6838      	ldr	r0, [r7, #0]
 800cf30:	f7ff fbb4 	bl	800c69c <_ZN12HttpResponse8readCharEc>

			if (httpResponse.isComplete())
 800cf34:	6838      	ldr	r0, [r7, #0]
 800cf36:	f7ff fb8b 	bl	800c650 <_ZN12HttpResponse10isCompleteEv>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d108      	bne.n	800cf52 <_ZN4Wifi16readHttpResponseER12HttpResponse+0xa6>
	for (int i = 0; i < 5000; i++)
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	3301      	adds	r3, #1
 800cf44:	60fb      	str	r3, [r7, #12]
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	f241 3287 	movw	r2, #4999	; 0x1387
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	ddb5      	ble.n	800cebc <_ZN4Wifi16readHttpResponseER12HttpResponse+0x10>
 800cf50:	e000      	b.n	800cf54 <_ZN4Wifi16readHttpResponseER12HttpResponse+0xa8>
			{
				break;
 800cf52:	bf00      	nop
			}
		}
	}

	if (!httpResponse.isComplete())
 800cf54:	6838      	ldr	r0, [r7, #0]
 800cf56:	f7ff fb7b 	bl	800c650 <_ZN12HttpResponse10isCompleteEv>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	f083 0301 	eor.w	r3, r3, #1
 800cf60:	b2db      	uxtb	r3, r3
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d00a      	beq.n	800cf7c <_ZN4Wifi16readHttpResponseER12HttpResponse+0xd0>
	{
		throw "Http response is not received";
 800cf66:	2004      	movs	r0, #4
 800cf68:	f00b fc86 	bl	8018878 <__cxa_allocate_exception>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	4a05      	ldr	r2, [pc, #20]	; (800cf84 <_ZN4Wifi16readHttpResponseER12HttpResponse+0xd8>)
 800cf70:	601a      	str	r2, [r3, #0]
 800cf72:	2200      	movs	r2, #0
 800cf74:	4904      	ldr	r1, [pc, #16]	; (800cf88 <_ZN4Wifi16readHttpResponseER12HttpResponse+0xdc>)
 800cf76:	4618      	mov	r0, r3
 800cf78:	f00c f9b6 	bl	80192e8 <__cxa_throw>
	}
}
 800cf7c:	bf00      	nop
 800cf7e:	3710      	adds	r7, #16
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}
 800cf84:	0801ef6c 	.word	0x0801ef6c
 800cf88:	08023b60 	.word	0x08023b60

0800cf8c <_ZN4Wifi11writeToUartEPKc>:

void Wifi::writeToUart(const char* data)
{
 800cf8c:	b590      	push	{r4, r7, lr}
 800cf8e:	b085      	sub	sp, #20
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	6039      	str	r1, [r7, #0]
	logger->debug("Sent to WIFI module", data);
 800cf96:	4b14      	ldr	r3, [pc, #80]	; (800cfe8 <_ZN4Wifi11writeToUartEPKc+0x5c>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	683a      	ldr	r2, [r7, #0]
 800cf9c:	4913      	ldr	r1, [pc, #76]	; (800cfec <_ZN4Wifi11writeToUartEPKc+0x60>)
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f7fe f96c 	bl	800b27c <_ZN6Logger5debugEPKcS1_>

	HAL_StatusTypeDef res = HAL_UART_Transmit(huart, (uint8_t*) data, strlen(data), 500);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 800cfaa:	6838      	ldr	r0, [r7, #0]
 800cfac:	f7f9 f948 	bl	8006240 <strlen>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	b29a      	uxth	r2, r3
 800cfb4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800cfb8:	6839      	ldr	r1, [r7, #0]
 800cfba:	4620      	mov	r0, r4
 800cfbc:	f004 fc1a 	bl	80117f4 <HAL_UART_Transmit>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	73fb      	strb	r3, [r7, #15]

	if (res != HAL_OK)
 800cfc4:	7bfb      	ldrb	r3, [r7, #15]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d00a      	beq.n	800cfe0 <_ZN4Wifi11writeToUartEPKc+0x54>
	{
		throw "cannot send data to WIFI module";
 800cfca:	2004      	movs	r0, #4
 800cfcc:	f00b fc54 	bl	8018878 <__cxa_allocate_exception>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	4a07      	ldr	r2, [pc, #28]	; (800cff0 <_ZN4Wifi11writeToUartEPKc+0x64>)
 800cfd4:	601a      	str	r2, [r3, #0]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	4906      	ldr	r1, [pc, #24]	; (800cff4 <_ZN4Wifi11writeToUartEPKc+0x68>)
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f00c f984 	bl	80192e8 <__cxa_throw>
	}
}
 800cfe0:	bf00      	nop
 800cfe2:	3714      	adds	r7, #20
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd90      	pop	{r4, r7, pc}
 800cfe8:	2000033c 	.word	0x2000033c
 800cfec:	0801ef8c 	.word	0x0801ef8c
 800cff0:	0801efa0 	.word	0x0801efa0
 800cff4:	08023b60 	.word	0x08023b60

0800cff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800cffc:	f000 fdde 	bl	800dbbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d000:	f000 f822 	bl	800d048 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d004:	f000 f9d8 	bl	800d3b8 <MX_GPIO_Init>
  MX_DMA_Init();
 800d008:	f000 f9b6 	bl	800d378 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800d00c:	f000 f936 	bl	800d27c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800d010:	f000 f8a4 	bl	800d15c <MX_SPI1_Init>
  MX_TIM3_Init();
 800d014:	f000 f8d8 	bl	800d1c8 <MX_TIM3_Init>
  MX_SDIO_SD_Init();
 800d018:	f000 f880 	bl	800d11c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800d01c:	f006 fb82 	bl	8013724 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 800d020:	f000 f956 	bl	800d2d0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800d024:	f000 f97e 	bl	800d324 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  applicationMain(&huart1, &huart2, &hdma_usart2_rx, &huart3);
 800d028:	4b03      	ldr	r3, [pc, #12]	; (800d038 <main+0x40>)
 800d02a:	4a04      	ldr	r2, [pc, #16]	; (800d03c <main+0x44>)
 800d02c:	4904      	ldr	r1, [pc, #16]	; (800d040 <main+0x48>)
 800d02e:	4805      	ldr	r0, [pc, #20]	; (800d044 <main+0x4c>)
 800d030:	f7fb fe8e 	bl	8008d50 <applicationMain>


  while (1)
 800d034:	e7fe      	b.n	800d034 <main+0x3c>
 800d036:	bf00      	nop
 800d038:	20000544 	.word	0x20000544
 800d03c:	2000058c 	.word	0x2000058c
 800d040:	200004fc 	.word	0x200004fc
 800d044:	200004b4 	.word	0x200004b4

0800d048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b094      	sub	sp, #80	; 0x50
 800d04c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d04e:	f107 0320 	add.w	r3, r7, #32
 800d052:	2230      	movs	r2, #48	; 0x30
 800d054:	2100      	movs	r1, #0
 800d056:	4618      	mov	r0, r3
 800d058:	f00e fcf4 	bl	801ba44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d05c:	f107 030c 	add.w	r3, r7, #12
 800d060:	2200      	movs	r2, #0
 800d062:	601a      	str	r2, [r3, #0]
 800d064:	605a      	str	r2, [r3, #4]
 800d066:	609a      	str	r2, [r3, #8]
 800d068:	60da      	str	r2, [r3, #12]
 800d06a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800d06c:	2300      	movs	r3, #0
 800d06e:	60bb      	str	r3, [r7, #8]
 800d070:	4b28      	ldr	r3, [pc, #160]	; (800d114 <SystemClock_Config+0xcc>)
 800d072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d074:	4a27      	ldr	r2, [pc, #156]	; (800d114 <SystemClock_Config+0xcc>)
 800d076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d07a:	6413      	str	r3, [r2, #64]	; 0x40
 800d07c:	4b25      	ldr	r3, [pc, #148]	; (800d114 <SystemClock_Config+0xcc>)
 800d07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d084:	60bb      	str	r3, [r7, #8]
 800d086:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d088:	2300      	movs	r3, #0
 800d08a:	607b      	str	r3, [r7, #4]
 800d08c:	4b22      	ldr	r3, [pc, #136]	; (800d118 <SystemClock_Config+0xd0>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a21      	ldr	r2, [pc, #132]	; (800d118 <SystemClock_Config+0xd0>)
 800d092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d096:	6013      	str	r3, [r2, #0]
 800d098:	4b1f      	ldr	r3, [pc, #124]	; (800d118 <SystemClock_Config+0xd0>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0a0:	607b      	str	r3, [r7, #4]
 800d0a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d0a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d0ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d0ae:	2302      	movs	r3, #2
 800d0b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d0b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800d0b8:	2304      	movs	r3, #4
 800d0ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800d0bc:	23a8      	movs	r3, #168	; 0xa8
 800d0be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d0c0:	2302      	movs	r3, #2
 800d0c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800d0c4:	2307      	movs	r3, #7
 800d0c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d0c8:	f107 0320 	add.w	r3, r7, #32
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f001 fced 	bl	800eaac <HAL_RCC_OscConfig>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d001      	beq.n	800d0dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 800d0d8:	f000 f9f6 	bl	800d4c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d0dc:	230f      	movs	r3, #15
 800d0de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d0e0:	2302      	movs	r3, #2
 800d0e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800d0e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d0ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d0ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d0f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800d0f4:	f107 030c 	add.w	r3, r7, #12
 800d0f8:	2105      	movs	r1, #5
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f001 ff4e 	bl	800ef9c <HAL_RCC_ClockConfig>
 800d100:	4603      	mov	r3, r0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d001      	beq.n	800d10a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800d106:	f000 f9df 	bl	800d4c8 <Error_Handler>
  }
}
 800d10a:	bf00      	nop
 800d10c:	3750      	adds	r7, #80	; 0x50
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
 800d112:	bf00      	nop
 800d114:	40023800 	.word	0x40023800
 800d118:	40007000 	.word	0x40007000

0800d11c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800d11c:	b480      	push	{r7}
 800d11e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800d120:	4b0c      	ldr	r3, [pc, #48]	; (800d154 <MX_SDIO_SD_Init+0x38>)
 800d122:	4a0d      	ldr	r2, [pc, #52]	; (800d158 <MX_SDIO_SD_Init+0x3c>)
 800d124:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800d126:	4b0b      	ldr	r3, [pc, #44]	; (800d154 <MX_SDIO_SD_Init+0x38>)
 800d128:	2200      	movs	r2, #0
 800d12a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800d12c:	4b09      	ldr	r3, [pc, #36]	; (800d154 <MX_SDIO_SD_Init+0x38>)
 800d12e:	2200      	movs	r2, #0
 800d130:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800d132:	4b08      	ldr	r3, [pc, #32]	; (800d154 <MX_SDIO_SD_Init+0x38>)
 800d134:	2200      	movs	r2, #0
 800d136:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800d138:	4b06      	ldr	r3, [pc, #24]	; (800d154 <MX_SDIO_SD_Init+0x38>)
 800d13a:	2200      	movs	r2, #0
 800d13c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800d13e:	4b05      	ldr	r3, [pc, #20]	; (800d154 <MX_SDIO_SD_Init+0x38>)
 800d140:	2200      	movs	r2, #0
 800d142:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800d144:	4b03      	ldr	r3, [pc, #12]	; (800d154 <MX_SDIO_SD_Init+0x38>)
 800d146:	2200      	movs	r2, #0
 800d148:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800d14a:	bf00      	nop
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr
 800d154:	20000390 	.word	0x20000390
 800d158:	40012c00 	.word	0x40012c00

0800d15c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800d160:	4b17      	ldr	r3, [pc, #92]	; (800d1c0 <MX_SPI1_Init+0x64>)
 800d162:	4a18      	ldr	r2, [pc, #96]	; (800d1c4 <MX_SPI1_Init+0x68>)
 800d164:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800d166:	4b16      	ldr	r3, [pc, #88]	; (800d1c0 <MX_SPI1_Init+0x64>)
 800d168:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d16c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800d16e:	4b14      	ldr	r3, [pc, #80]	; (800d1c0 <MX_SPI1_Init+0x64>)
 800d170:	2200      	movs	r2, #0
 800d172:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800d174:	4b12      	ldr	r3, [pc, #72]	; (800d1c0 <MX_SPI1_Init+0x64>)
 800d176:	2200      	movs	r2, #0
 800d178:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d17a:	4b11      	ldr	r3, [pc, #68]	; (800d1c0 <MX_SPI1_Init+0x64>)
 800d17c:	2200      	movs	r2, #0
 800d17e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d180:	4b0f      	ldr	r3, [pc, #60]	; (800d1c0 <MX_SPI1_Init+0x64>)
 800d182:	2200      	movs	r2, #0
 800d184:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800d186:	4b0e      	ldr	r3, [pc, #56]	; (800d1c0 <MX_SPI1_Init+0x64>)
 800d188:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d18c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d18e:	4b0c      	ldr	r3, [pc, #48]	; (800d1c0 <MX_SPI1_Init+0x64>)
 800d190:	2200      	movs	r2, #0
 800d192:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d194:	4b0a      	ldr	r3, [pc, #40]	; (800d1c0 <MX_SPI1_Init+0x64>)
 800d196:	2200      	movs	r2, #0
 800d198:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800d19a:	4b09      	ldr	r3, [pc, #36]	; (800d1c0 <MX_SPI1_Init+0x64>)
 800d19c:	2200      	movs	r2, #0
 800d19e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d1a0:	4b07      	ldr	r3, [pc, #28]	; (800d1c0 <MX_SPI1_Init+0x64>)
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800d1a6:	4b06      	ldr	r3, [pc, #24]	; (800d1c0 <MX_SPI1_Init+0x64>)
 800d1a8:	220a      	movs	r2, #10
 800d1aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800d1ac:	4804      	ldr	r0, [pc, #16]	; (800d1c0 <MX_SPI1_Init+0x64>)
 800d1ae:	f003 fb51 	bl	8010854 <HAL_SPI_Init>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d001      	beq.n	800d1bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800d1b8:	f000 f986 	bl	800d4c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800d1bc:	bf00      	nop
 800d1be:	bd80      	pop	{r7, pc}
 800d1c0:	20000414 	.word	0x20000414
 800d1c4:	40013000 	.word	0x40013000

0800d1c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b08a      	sub	sp, #40	; 0x28
 800d1cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d1ce:	f107 0320 	add.w	r3, r7, #32
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	601a      	str	r2, [r3, #0]
 800d1d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d1d8:	1d3b      	adds	r3, r7, #4
 800d1da:	2200      	movs	r2, #0
 800d1dc:	601a      	str	r2, [r3, #0]
 800d1de:	605a      	str	r2, [r3, #4]
 800d1e0:	609a      	str	r2, [r3, #8]
 800d1e2:	60da      	str	r2, [r3, #12]
 800d1e4:	611a      	str	r2, [r3, #16]
 800d1e6:	615a      	str	r2, [r3, #20]
 800d1e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800d1ea:	4b22      	ldr	r3, [pc, #136]	; (800d274 <MX_TIM3_Init+0xac>)
 800d1ec:	4a22      	ldr	r2, [pc, #136]	; (800d278 <MX_TIM3_Init+0xb0>)
 800d1ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800d1f0:	4b20      	ldr	r3, [pc, #128]	; (800d274 <MX_TIM3_Init+0xac>)
 800d1f2:	2253      	movs	r2, #83	; 0x53
 800d1f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d1f6:	4b1f      	ldr	r3, [pc, #124]	; (800d274 <MX_TIM3_Init+0xac>)
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800d1fc:	4b1d      	ldr	r3, [pc, #116]	; (800d274 <MX_TIM3_Init+0xac>)
 800d1fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d202:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d204:	4b1b      	ldr	r3, [pc, #108]	; (800d274 <MX_TIM3_Init+0xac>)
 800d206:	2200      	movs	r2, #0
 800d208:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d20a:	4b1a      	ldr	r3, [pc, #104]	; (800d274 <MX_TIM3_Init+0xac>)
 800d20c:	2200      	movs	r2, #0
 800d20e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800d210:	4818      	ldr	r0, [pc, #96]	; (800d274 <MX_TIM3_Init+0xac>)
 800d212:	f003 fdc7 	bl	8010da4 <HAL_TIM_PWM_Init>
 800d216:	4603      	mov	r3, r0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d001      	beq.n	800d220 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800d21c:	f000 f954 	bl	800d4c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d220:	2300      	movs	r3, #0
 800d222:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d224:	2300      	movs	r3, #0
 800d226:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d228:	f107 0320 	add.w	r3, r7, #32
 800d22c:	4619      	mov	r1, r3
 800d22e:	4811      	ldr	r0, [pc, #68]	; (800d274 <MX_TIM3_Init+0xac>)
 800d230:	f004 fa14 	bl	801165c <HAL_TIMEx_MasterConfigSynchronization>
 800d234:	4603      	mov	r3, r0
 800d236:	2b00      	cmp	r3, #0
 800d238:	d001      	beq.n	800d23e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800d23a:	f000 f945 	bl	800d4c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d23e:	2360      	movs	r3, #96	; 0x60
 800d240:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800d242:	2300      	movs	r3, #0
 800d244:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d246:	2300      	movs	r3, #0
 800d248:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d24a:	2300      	movs	r3, #0
 800d24c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800d24e:	1d3b      	adds	r3, r7, #4
 800d250:	2204      	movs	r2, #4
 800d252:	4619      	mov	r1, r3
 800d254:	4807      	ldr	r0, [pc, #28]	; (800d274 <MX_TIM3_Init+0xac>)
 800d256:	f003 febd 	bl	8010fd4 <HAL_TIM_PWM_ConfigChannel>
 800d25a:	4603      	mov	r3, r0
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d001      	beq.n	800d264 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800d260:	f000 f932 	bl	800d4c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800d264:	4803      	ldr	r0, [pc, #12]	; (800d274 <MX_TIM3_Init+0xac>)
 800d266:	f000 fa37 	bl	800d6d8 <HAL_TIM_MspPostInit>

}
 800d26a:	bf00      	nop
 800d26c:	3728      	adds	r7, #40	; 0x28
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
 800d272:	bf00      	nop
 800d274:	2000046c 	.word	0x2000046c
 800d278:	40000400 	.word	0x40000400

0800d27c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800d280:	4b11      	ldr	r3, [pc, #68]	; (800d2c8 <MX_USART1_UART_Init+0x4c>)
 800d282:	4a12      	ldr	r2, [pc, #72]	; (800d2cc <MX_USART1_UART_Init+0x50>)
 800d284:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800d286:	4b10      	ldr	r3, [pc, #64]	; (800d2c8 <MX_USART1_UART_Init+0x4c>)
 800d288:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800d28c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d28e:	4b0e      	ldr	r3, [pc, #56]	; (800d2c8 <MX_USART1_UART_Init+0x4c>)
 800d290:	2200      	movs	r2, #0
 800d292:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d294:	4b0c      	ldr	r3, [pc, #48]	; (800d2c8 <MX_USART1_UART_Init+0x4c>)
 800d296:	2200      	movs	r2, #0
 800d298:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d29a:	4b0b      	ldr	r3, [pc, #44]	; (800d2c8 <MX_USART1_UART_Init+0x4c>)
 800d29c:	2200      	movs	r2, #0
 800d29e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d2a0:	4b09      	ldr	r3, [pc, #36]	; (800d2c8 <MX_USART1_UART_Init+0x4c>)
 800d2a2:	220c      	movs	r2, #12
 800d2a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d2a6:	4b08      	ldr	r3, [pc, #32]	; (800d2c8 <MX_USART1_UART_Init+0x4c>)
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d2ac:	4b06      	ldr	r3, [pc, #24]	; (800d2c8 <MX_USART1_UART_Init+0x4c>)
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d2b2:	4805      	ldr	r0, [pc, #20]	; (800d2c8 <MX_USART1_UART_Init+0x4c>)
 800d2b4:	f004 fa4e 	bl	8011754 <HAL_UART_Init>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d001      	beq.n	800d2c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800d2be:	f000 f903 	bl	800d4c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800d2c2:	bf00      	nop
 800d2c4:	bd80      	pop	{r7, pc}
 800d2c6:	bf00      	nop
 800d2c8:	200004b4 	.word	0x200004b4
 800d2cc:	40011000 	.word	0x40011000

0800d2d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800d2d4:	4b11      	ldr	r3, [pc, #68]	; (800d31c <MX_USART2_UART_Init+0x4c>)
 800d2d6:	4a12      	ldr	r2, [pc, #72]	; (800d320 <MX_USART2_UART_Init+0x50>)
 800d2d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800d2da:	4b10      	ldr	r3, [pc, #64]	; (800d31c <MX_USART2_UART_Init+0x4c>)
 800d2dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d2e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d2e2:	4b0e      	ldr	r3, [pc, #56]	; (800d31c <MX_USART2_UART_Init+0x4c>)
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d2e8:	4b0c      	ldr	r3, [pc, #48]	; (800d31c <MX_USART2_UART_Init+0x4c>)
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d2ee:	4b0b      	ldr	r3, [pc, #44]	; (800d31c <MX_USART2_UART_Init+0x4c>)
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d2f4:	4b09      	ldr	r3, [pc, #36]	; (800d31c <MX_USART2_UART_Init+0x4c>)
 800d2f6:	220c      	movs	r2, #12
 800d2f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d2fa:	4b08      	ldr	r3, [pc, #32]	; (800d31c <MX_USART2_UART_Init+0x4c>)
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d300:	4b06      	ldr	r3, [pc, #24]	; (800d31c <MX_USART2_UART_Init+0x4c>)
 800d302:	2200      	movs	r2, #0
 800d304:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800d306:	4805      	ldr	r0, [pc, #20]	; (800d31c <MX_USART2_UART_Init+0x4c>)
 800d308:	f004 fa24 	bl	8011754 <HAL_UART_Init>
 800d30c:	4603      	mov	r3, r0
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d001      	beq.n	800d316 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800d312:	f000 f8d9 	bl	800d4c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800d316:	bf00      	nop
 800d318:	bd80      	pop	{r7, pc}
 800d31a:	bf00      	nop
 800d31c:	200004fc 	.word	0x200004fc
 800d320:	40004400 	.word	0x40004400

0800d324 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800d328:	4b11      	ldr	r3, [pc, #68]	; (800d370 <MX_USART3_UART_Init+0x4c>)
 800d32a:	4a12      	ldr	r2, [pc, #72]	; (800d374 <MX_USART3_UART_Init+0x50>)
 800d32c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800d32e:	4b10      	ldr	r3, [pc, #64]	; (800d370 <MX_USART3_UART_Init+0x4c>)
 800d330:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800d334:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d336:	4b0e      	ldr	r3, [pc, #56]	; (800d370 <MX_USART3_UART_Init+0x4c>)
 800d338:	2200      	movs	r2, #0
 800d33a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d33c:	4b0c      	ldr	r3, [pc, #48]	; (800d370 <MX_USART3_UART_Init+0x4c>)
 800d33e:	2200      	movs	r2, #0
 800d340:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d342:	4b0b      	ldr	r3, [pc, #44]	; (800d370 <MX_USART3_UART_Init+0x4c>)
 800d344:	2200      	movs	r2, #0
 800d346:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d348:	4b09      	ldr	r3, [pc, #36]	; (800d370 <MX_USART3_UART_Init+0x4c>)
 800d34a:	220c      	movs	r2, #12
 800d34c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d34e:	4b08      	ldr	r3, [pc, #32]	; (800d370 <MX_USART3_UART_Init+0x4c>)
 800d350:	2200      	movs	r2, #0
 800d352:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d354:	4b06      	ldr	r3, [pc, #24]	; (800d370 <MX_USART3_UART_Init+0x4c>)
 800d356:	2200      	movs	r2, #0
 800d358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800d35a:	4805      	ldr	r0, [pc, #20]	; (800d370 <MX_USART3_UART_Init+0x4c>)
 800d35c:	f004 f9fa 	bl	8011754 <HAL_UART_Init>
 800d360:	4603      	mov	r3, r0
 800d362:	2b00      	cmp	r3, #0
 800d364:	d001      	beq.n	800d36a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800d366:	f000 f8af 	bl	800d4c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800d36a:	bf00      	nop
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	20000544 	.word	0x20000544
 800d374:	40004800 	.word	0x40004800

0800d378 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800d37e:	2300      	movs	r3, #0
 800d380:	607b      	str	r3, [r7, #4]
 800d382:	4b0c      	ldr	r3, [pc, #48]	; (800d3b4 <MX_DMA_Init+0x3c>)
 800d384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d386:	4a0b      	ldr	r2, [pc, #44]	; (800d3b4 <MX_DMA_Init+0x3c>)
 800d388:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d38c:	6313      	str	r3, [r2, #48]	; 0x30
 800d38e:	4b09      	ldr	r3, [pc, #36]	; (800d3b4 <MX_DMA_Init+0x3c>)
 800d390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d396:	607b      	str	r3, [r7, #4]
 800d398:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800d39a:	2200      	movs	r2, #0
 800d39c:	2100      	movs	r1, #0
 800d39e:	2010      	movs	r0, #16
 800d3a0:	f000 fd7d 	bl	800de9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800d3a4:	2010      	movs	r0, #16
 800d3a6:	f000 fd96 	bl	800ded6 <HAL_NVIC_EnableIRQ>

}
 800d3aa:	bf00      	nop
 800d3ac:	3708      	adds	r7, #8
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
 800d3b2:	bf00      	nop
 800d3b4:	40023800 	.word	0x40023800

0800d3b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b08c      	sub	sp, #48	; 0x30
 800d3bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d3be:	f107 031c 	add.w	r3, r7, #28
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	601a      	str	r2, [r3, #0]
 800d3c6:	605a      	str	r2, [r3, #4]
 800d3c8:	609a      	str	r2, [r3, #8]
 800d3ca:	60da      	str	r2, [r3, #12]
 800d3cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	61bb      	str	r3, [r7, #24]
 800d3d2:	4b3a      	ldr	r3, [pc, #232]	; (800d4bc <MX_GPIO_Init+0x104>)
 800d3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3d6:	4a39      	ldr	r2, [pc, #228]	; (800d4bc <MX_GPIO_Init+0x104>)
 800d3d8:	f043 0310 	orr.w	r3, r3, #16
 800d3dc:	6313      	str	r3, [r2, #48]	; 0x30
 800d3de:	4b37      	ldr	r3, [pc, #220]	; (800d4bc <MX_GPIO_Init+0x104>)
 800d3e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3e2:	f003 0310 	and.w	r3, r3, #16
 800d3e6:	61bb      	str	r3, [r7, #24]
 800d3e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	617b      	str	r3, [r7, #20]
 800d3ee:	4b33      	ldr	r3, [pc, #204]	; (800d4bc <MX_GPIO_Init+0x104>)
 800d3f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3f2:	4a32      	ldr	r2, [pc, #200]	; (800d4bc <MX_GPIO_Init+0x104>)
 800d3f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3f8:	6313      	str	r3, [r2, #48]	; 0x30
 800d3fa:	4b30      	ldr	r3, [pc, #192]	; (800d4bc <MX_GPIO_Init+0x104>)
 800d3fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d402:	617b      	str	r3, [r7, #20]
 800d404:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d406:	2300      	movs	r3, #0
 800d408:	613b      	str	r3, [r7, #16]
 800d40a:	4b2c      	ldr	r3, [pc, #176]	; (800d4bc <MX_GPIO_Init+0x104>)
 800d40c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d40e:	4a2b      	ldr	r2, [pc, #172]	; (800d4bc <MX_GPIO_Init+0x104>)
 800d410:	f043 0301 	orr.w	r3, r3, #1
 800d414:	6313      	str	r3, [r2, #48]	; 0x30
 800d416:	4b29      	ldr	r3, [pc, #164]	; (800d4bc <MX_GPIO_Init+0x104>)
 800d418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d41a:	f003 0301 	and.w	r3, r3, #1
 800d41e:	613b      	str	r3, [r7, #16]
 800d420:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d422:	2300      	movs	r3, #0
 800d424:	60fb      	str	r3, [r7, #12]
 800d426:	4b25      	ldr	r3, [pc, #148]	; (800d4bc <MX_GPIO_Init+0x104>)
 800d428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d42a:	4a24      	ldr	r2, [pc, #144]	; (800d4bc <MX_GPIO_Init+0x104>)
 800d42c:	f043 0302 	orr.w	r3, r3, #2
 800d430:	6313      	str	r3, [r2, #48]	; 0x30
 800d432:	4b22      	ldr	r3, [pc, #136]	; (800d4bc <MX_GPIO_Init+0x104>)
 800d434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d436:	f003 0302 	and.w	r3, r3, #2
 800d43a:	60fb      	str	r3, [r7, #12]
 800d43c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d43e:	2300      	movs	r3, #0
 800d440:	60bb      	str	r3, [r7, #8]
 800d442:	4b1e      	ldr	r3, [pc, #120]	; (800d4bc <MX_GPIO_Init+0x104>)
 800d444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d446:	4a1d      	ldr	r2, [pc, #116]	; (800d4bc <MX_GPIO_Init+0x104>)
 800d448:	f043 0304 	orr.w	r3, r3, #4
 800d44c:	6313      	str	r3, [r2, #48]	; 0x30
 800d44e:	4b1b      	ldr	r3, [pc, #108]	; (800d4bc <MX_GPIO_Init+0x104>)
 800d450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d452:	f003 0304 	and.w	r3, r3, #4
 800d456:	60bb      	str	r3, [r7, #8]
 800d458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d45a:	2300      	movs	r3, #0
 800d45c:	607b      	str	r3, [r7, #4]
 800d45e:	4b17      	ldr	r3, [pc, #92]	; (800d4bc <MX_GPIO_Init+0x104>)
 800d460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d462:	4a16      	ldr	r2, [pc, #88]	; (800d4bc <MX_GPIO_Init+0x104>)
 800d464:	f043 0308 	orr.w	r3, r3, #8
 800d468:	6313      	str	r3, [r2, #48]	; 0x30
 800d46a:	4b14      	ldr	r3, [pc, #80]	; (800d4bc <MX_GPIO_Init+0x104>)
 800d46c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d46e:	f003 0308 	and.w	r3, r3, #8
 800d472:	607b      	str	r3, [r7, #4]
 800d474:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_SET);
 800d476:	2201      	movs	r2, #1
 800d478:	21e0      	movs	r1, #224	; 0xe0
 800d47a:	4811      	ldr	r0, [pc, #68]	; (800d4c0 <MX_GPIO_Init+0x108>)
 800d47c:	f001 fafc 	bl	800ea78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN_MOVE_Pin BTN_SELECT_Pin */
  GPIO_InitStruct.Pin = BTN_MOVE_Pin|BTN_SELECT_Pin;
 800d480:	230c      	movs	r3, #12
 800d482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d484:	2300      	movs	r3, #0
 800d486:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800d488:	2302      	movs	r3, #2
 800d48a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d48c:	f107 031c 	add.w	r3, r7, #28
 800d490:	4619      	mov	r1, r3
 800d492:	480c      	ldr	r0, [pc, #48]	; (800d4c4 <MX_GPIO_Init+0x10c>)
 800d494:	f001 f93c 	bl	800e710 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 800d498:	23e0      	movs	r3, #224	; 0xe0
 800d49a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d49c:	2301      	movs	r3, #1
 800d49e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d4a8:	f107 031c 	add.w	r3, r7, #28
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	4804      	ldr	r0, [pc, #16]	; (800d4c0 <MX_GPIO_Init+0x108>)
 800d4b0:	f001 f92e 	bl	800e710 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800d4b4:	bf00      	nop
 800d4b6:	3730      	adds	r7, #48	; 0x30
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}
 800d4bc:	40023800 	.word	0x40023800
 800d4c0:	40020400 	.word	0x40020400
 800d4c4:	40021000 	.word	0x40021000

0800d4c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d4cc:	b672      	cpsid	i
}
 800d4ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800d4d0:	e7fe      	b.n	800d4d0 <Error_Handler+0x8>
	...

0800d4d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b083      	sub	sp, #12
 800d4d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d4da:	2300      	movs	r3, #0
 800d4dc:	607b      	str	r3, [r7, #4]
 800d4de:	4b10      	ldr	r3, [pc, #64]	; (800d520 <HAL_MspInit+0x4c>)
 800d4e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4e2:	4a0f      	ldr	r2, [pc, #60]	; (800d520 <HAL_MspInit+0x4c>)
 800d4e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d4e8:	6453      	str	r3, [r2, #68]	; 0x44
 800d4ea:	4b0d      	ldr	r3, [pc, #52]	; (800d520 <HAL_MspInit+0x4c>)
 800d4ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d4f2:	607b      	str	r3, [r7, #4]
 800d4f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	603b      	str	r3, [r7, #0]
 800d4fa:	4b09      	ldr	r3, [pc, #36]	; (800d520 <HAL_MspInit+0x4c>)
 800d4fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4fe:	4a08      	ldr	r2, [pc, #32]	; (800d520 <HAL_MspInit+0x4c>)
 800d500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d504:	6413      	str	r3, [r2, #64]	; 0x40
 800d506:	4b06      	ldr	r3, [pc, #24]	; (800d520 <HAL_MspInit+0x4c>)
 800d508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d50a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d50e:	603b      	str	r3, [r7, #0]
 800d510:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d512:	bf00      	nop
 800d514:	370c      	adds	r7, #12
 800d516:	46bd      	mov	sp, r7
 800d518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51c:	4770      	bx	lr
 800d51e:	bf00      	nop
 800d520:	40023800 	.word	0x40023800

0800d524 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b08a      	sub	sp, #40	; 0x28
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d52c:	f107 0314 	add.w	r3, r7, #20
 800d530:	2200      	movs	r2, #0
 800d532:	601a      	str	r2, [r3, #0]
 800d534:	605a      	str	r2, [r3, #4]
 800d536:	609a      	str	r2, [r3, #8]
 800d538:	60da      	str	r2, [r3, #12]
 800d53a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	4a2c      	ldr	r2, [pc, #176]	; (800d5f4 <HAL_SD_MspInit+0xd0>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d152      	bne.n	800d5ec <HAL_SD_MspInit+0xc8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800d546:	2300      	movs	r3, #0
 800d548:	613b      	str	r3, [r7, #16]
 800d54a:	4b2b      	ldr	r3, [pc, #172]	; (800d5f8 <HAL_SD_MspInit+0xd4>)
 800d54c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d54e:	4a2a      	ldr	r2, [pc, #168]	; (800d5f8 <HAL_SD_MspInit+0xd4>)
 800d550:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d554:	6453      	str	r3, [r2, #68]	; 0x44
 800d556:	4b28      	ldr	r3, [pc, #160]	; (800d5f8 <HAL_SD_MspInit+0xd4>)
 800d558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d55a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d55e:	613b      	str	r3, [r7, #16]
 800d560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d562:	2300      	movs	r3, #0
 800d564:	60fb      	str	r3, [r7, #12]
 800d566:	4b24      	ldr	r3, [pc, #144]	; (800d5f8 <HAL_SD_MspInit+0xd4>)
 800d568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d56a:	4a23      	ldr	r2, [pc, #140]	; (800d5f8 <HAL_SD_MspInit+0xd4>)
 800d56c:	f043 0304 	orr.w	r3, r3, #4
 800d570:	6313      	str	r3, [r2, #48]	; 0x30
 800d572:	4b21      	ldr	r3, [pc, #132]	; (800d5f8 <HAL_SD_MspInit+0xd4>)
 800d574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d576:	f003 0304 	and.w	r3, r3, #4
 800d57a:	60fb      	str	r3, [r7, #12]
 800d57c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800d57e:	2300      	movs	r3, #0
 800d580:	60bb      	str	r3, [r7, #8]
 800d582:	4b1d      	ldr	r3, [pc, #116]	; (800d5f8 <HAL_SD_MspInit+0xd4>)
 800d584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d586:	4a1c      	ldr	r2, [pc, #112]	; (800d5f8 <HAL_SD_MspInit+0xd4>)
 800d588:	f043 0308 	orr.w	r3, r3, #8
 800d58c:	6313      	str	r3, [r2, #48]	; 0x30
 800d58e:	4b1a      	ldr	r3, [pc, #104]	; (800d5f8 <HAL_SD_MspInit+0xd4>)
 800d590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d592:	f003 0308 	and.w	r3, r3, #8
 800d596:	60bb      	str	r3, [r7, #8]
 800d598:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800d59a:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800d59e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5a0:	2302      	movs	r3, #2
 800d5a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d5a8:	2303      	movs	r3, #3
 800d5aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800d5ac:	230c      	movs	r3, #12
 800d5ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d5b0:	f107 0314 	add.w	r3, r7, #20
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	4811      	ldr	r0, [pc, #68]	; (800d5fc <HAL_SD_MspInit+0xd8>)
 800d5b8:	f001 f8aa 	bl	800e710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800d5bc:	2304      	movs	r3, #4
 800d5be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5c0:	2302      	movs	r3, #2
 800d5c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d5c8:	2303      	movs	r3, #3
 800d5ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800d5cc:	230c      	movs	r3, #12
 800d5ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d5d0:	f107 0314 	add.w	r3, r7, #20
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	480a      	ldr	r0, [pc, #40]	; (800d600 <HAL_SD_MspInit+0xdc>)
 800d5d8:	f001 f89a 	bl	800e710 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 1, 0);
 800d5dc:	2200      	movs	r2, #0
 800d5de:	2101      	movs	r1, #1
 800d5e0:	2031      	movs	r0, #49	; 0x31
 800d5e2:	f000 fc5c 	bl	800de9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800d5e6:	2031      	movs	r0, #49	; 0x31
 800d5e8:	f000 fc75 	bl	800ded6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800d5ec:	bf00      	nop
 800d5ee:	3728      	adds	r7, #40	; 0x28
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}
 800d5f4:	40012c00 	.word	0x40012c00
 800d5f8:	40023800 	.word	0x40023800
 800d5fc:	40020800 	.word	0x40020800
 800d600:	40020c00 	.word	0x40020c00

0800d604 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b08a      	sub	sp, #40	; 0x28
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d60c:	f107 0314 	add.w	r3, r7, #20
 800d610:	2200      	movs	r2, #0
 800d612:	601a      	str	r2, [r3, #0]
 800d614:	605a      	str	r2, [r3, #4]
 800d616:	609a      	str	r2, [r3, #8]
 800d618:	60da      	str	r2, [r3, #12]
 800d61a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4a19      	ldr	r2, [pc, #100]	; (800d688 <HAL_SPI_MspInit+0x84>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d12b      	bne.n	800d67e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800d626:	2300      	movs	r3, #0
 800d628:	613b      	str	r3, [r7, #16]
 800d62a:	4b18      	ldr	r3, [pc, #96]	; (800d68c <HAL_SPI_MspInit+0x88>)
 800d62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d62e:	4a17      	ldr	r2, [pc, #92]	; (800d68c <HAL_SPI_MspInit+0x88>)
 800d630:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d634:	6453      	str	r3, [r2, #68]	; 0x44
 800d636:	4b15      	ldr	r3, [pc, #84]	; (800d68c <HAL_SPI_MspInit+0x88>)
 800d638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d63a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d63e:	613b      	str	r3, [r7, #16]
 800d640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d642:	2300      	movs	r3, #0
 800d644:	60fb      	str	r3, [r7, #12]
 800d646:	4b11      	ldr	r3, [pc, #68]	; (800d68c <HAL_SPI_MspInit+0x88>)
 800d648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d64a:	4a10      	ldr	r2, [pc, #64]	; (800d68c <HAL_SPI_MspInit+0x88>)
 800d64c:	f043 0301 	orr.w	r3, r3, #1
 800d650:	6313      	str	r3, [r2, #48]	; 0x30
 800d652:	4b0e      	ldr	r3, [pc, #56]	; (800d68c <HAL_SPI_MspInit+0x88>)
 800d654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d656:	f003 0301 	and.w	r3, r3, #1
 800d65a:	60fb      	str	r3, [r7, #12]
 800d65c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800d65e:	23e0      	movs	r3, #224	; 0xe0
 800d660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d662:	2302      	movs	r3, #2
 800d664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d666:	2300      	movs	r3, #0
 800d668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d66a:	2303      	movs	r3, #3
 800d66c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d66e:	2305      	movs	r3, #5
 800d670:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d672:	f107 0314 	add.w	r3, r7, #20
 800d676:	4619      	mov	r1, r3
 800d678:	4805      	ldr	r0, [pc, #20]	; (800d690 <HAL_SPI_MspInit+0x8c>)
 800d67a:	f001 f849 	bl	800e710 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800d67e:	bf00      	nop
 800d680:	3728      	adds	r7, #40	; 0x28
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
 800d686:	bf00      	nop
 800d688:	40013000 	.word	0x40013000
 800d68c:	40023800 	.word	0x40023800
 800d690:	40020000 	.word	0x40020000

0800d694 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800d694:	b480      	push	{r7}
 800d696:	b085      	sub	sp, #20
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4a0b      	ldr	r2, [pc, #44]	; (800d6d0 <HAL_TIM_PWM_MspInit+0x3c>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d10d      	bne.n	800d6c2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	60fb      	str	r3, [r7, #12]
 800d6aa:	4b0a      	ldr	r3, [pc, #40]	; (800d6d4 <HAL_TIM_PWM_MspInit+0x40>)
 800d6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ae:	4a09      	ldr	r2, [pc, #36]	; (800d6d4 <HAL_TIM_PWM_MspInit+0x40>)
 800d6b0:	f043 0302 	orr.w	r3, r3, #2
 800d6b4:	6413      	str	r3, [r2, #64]	; 0x40
 800d6b6:	4b07      	ldr	r3, [pc, #28]	; (800d6d4 <HAL_TIM_PWM_MspInit+0x40>)
 800d6b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ba:	f003 0302 	and.w	r3, r3, #2
 800d6be:	60fb      	str	r3, [r7, #12]
 800d6c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800d6c2:	bf00      	nop
 800d6c4:	3714      	adds	r7, #20
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6cc:	4770      	bx	lr
 800d6ce:	bf00      	nop
 800d6d0:	40000400 	.word	0x40000400
 800d6d4:	40023800 	.word	0x40023800

0800d6d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b088      	sub	sp, #32
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d6e0:	f107 030c 	add.w	r3, r7, #12
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	601a      	str	r2, [r3, #0]
 800d6e8:	605a      	str	r2, [r3, #4]
 800d6ea:	609a      	str	r2, [r3, #8]
 800d6ec:	60da      	str	r2, [r3, #12]
 800d6ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4a12      	ldr	r2, [pc, #72]	; (800d740 <HAL_TIM_MspPostInit+0x68>)
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d11d      	bne.n	800d736 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	60bb      	str	r3, [r7, #8]
 800d6fe:	4b11      	ldr	r3, [pc, #68]	; (800d744 <HAL_TIM_MspPostInit+0x6c>)
 800d700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d702:	4a10      	ldr	r2, [pc, #64]	; (800d744 <HAL_TIM_MspPostInit+0x6c>)
 800d704:	f043 0304 	orr.w	r3, r3, #4
 800d708:	6313      	str	r3, [r2, #48]	; 0x30
 800d70a:	4b0e      	ldr	r3, [pc, #56]	; (800d744 <HAL_TIM_MspPostInit+0x6c>)
 800d70c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d70e:	f003 0304 	and.w	r3, r3, #4
 800d712:	60bb      	str	r3, [r7, #8]
 800d714:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800d716:	2380      	movs	r3, #128	; 0x80
 800d718:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d71a:	2302      	movs	r3, #2
 800d71c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d71e:	2300      	movs	r3, #0
 800d720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d722:	2300      	movs	r3, #0
 800d724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800d726:	2302      	movs	r3, #2
 800d728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d72a:	f107 030c 	add.w	r3, r7, #12
 800d72e:	4619      	mov	r1, r3
 800d730:	4805      	ldr	r0, [pc, #20]	; (800d748 <HAL_TIM_MspPostInit+0x70>)
 800d732:	f000 ffed 	bl	800e710 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800d736:	bf00      	nop
 800d738:	3720      	adds	r7, #32
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	40000400 	.word	0x40000400
 800d744:	40023800 	.word	0x40023800
 800d748:	40020800 	.word	0x40020800

0800d74c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b08e      	sub	sp, #56	; 0x38
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d758:	2200      	movs	r2, #0
 800d75a:	601a      	str	r2, [r3, #0]
 800d75c:	605a      	str	r2, [r3, #4]
 800d75e:	609a      	str	r2, [r3, #8]
 800d760:	60da      	str	r2, [r3, #12]
 800d762:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4a67      	ldr	r2, [pc, #412]	; (800d908 <HAL_UART_MspInit+0x1bc>)
 800d76a:	4293      	cmp	r3, r2
 800d76c:	d12d      	bne.n	800d7ca <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800d76e:	2300      	movs	r3, #0
 800d770:	623b      	str	r3, [r7, #32]
 800d772:	4b66      	ldr	r3, [pc, #408]	; (800d90c <HAL_UART_MspInit+0x1c0>)
 800d774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d776:	4a65      	ldr	r2, [pc, #404]	; (800d90c <HAL_UART_MspInit+0x1c0>)
 800d778:	f043 0310 	orr.w	r3, r3, #16
 800d77c:	6453      	str	r3, [r2, #68]	; 0x44
 800d77e:	4b63      	ldr	r3, [pc, #396]	; (800d90c <HAL_UART_MspInit+0x1c0>)
 800d780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d782:	f003 0310 	and.w	r3, r3, #16
 800d786:	623b      	str	r3, [r7, #32]
 800d788:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d78a:	2300      	movs	r3, #0
 800d78c:	61fb      	str	r3, [r7, #28]
 800d78e:	4b5f      	ldr	r3, [pc, #380]	; (800d90c <HAL_UART_MspInit+0x1c0>)
 800d790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d792:	4a5e      	ldr	r2, [pc, #376]	; (800d90c <HAL_UART_MspInit+0x1c0>)
 800d794:	f043 0301 	orr.w	r3, r3, #1
 800d798:	6313      	str	r3, [r2, #48]	; 0x30
 800d79a:	4b5c      	ldr	r3, [pc, #368]	; (800d90c <HAL_UART_MspInit+0x1c0>)
 800d79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d79e:	f003 0301 	and.w	r3, r3, #1
 800d7a2:	61fb      	str	r3, [r7, #28]
 800d7a4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 800d7a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800d7aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d7ac:	2302      	movs	r3, #2
 800d7ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d7b4:	2303      	movs	r3, #3
 800d7b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800d7b8:	2307      	movs	r3, #7
 800d7ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d7bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	4853      	ldr	r0, [pc, #332]	; (800d910 <HAL_UART_MspInit+0x1c4>)
 800d7c4:	f000 ffa4 	bl	800e710 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800d7c8:	e09a      	b.n	800d900 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART2)
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	4a51      	ldr	r2, [pc, #324]	; (800d914 <HAL_UART_MspInit+0x1c8>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d163      	bne.n	800d89c <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART2_CLK_ENABLE();
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	61bb      	str	r3, [r7, #24]
 800d7d8:	4b4c      	ldr	r3, [pc, #304]	; (800d90c <HAL_UART_MspInit+0x1c0>)
 800d7da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7dc:	4a4b      	ldr	r2, [pc, #300]	; (800d90c <HAL_UART_MspInit+0x1c0>)
 800d7de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d7e2:	6413      	str	r3, [r2, #64]	; 0x40
 800d7e4:	4b49      	ldr	r3, [pc, #292]	; (800d90c <HAL_UART_MspInit+0x1c0>)
 800d7e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d7ec:	61bb      	str	r3, [r7, #24]
 800d7ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	617b      	str	r3, [r7, #20]
 800d7f4:	4b45      	ldr	r3, [pc, #276]	; (800d90c <HAL_UART_MspInit+0x1c0>)
 800d7f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7f8:	4a44      	ldr	r2, [pc, #272]	; (800d90c <HAL_UART_MspInit+0x1c0>)
 800d7fa:	f043 0301 	orr.w	r3, r3, #1
 800d7fe:	6313      	str	r3, [r2, #48]	; 0x30
 800d800:	4b42      	ldr	r3, [pc, #264]	; (800d90c <HAL_UART_MspInit+0x1c0>)
 800d802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d804:	f003 0301 	and.w	r3, r3, #1
 800d808:	617b      	str	r3, [r7, #20]
 800d80a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = WIFI_TX_Pin|WIFI_RX_Pin;
 800d80c:	230c      	movs	r3, #12
 800d80e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d810:	2302      	movs	r3, #2
 800d812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d814:	2300      	movs	r3, #0
 800d816:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d818:	2303      	movs	r3, #3
 800d81a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800d81c:	2307      	movs	r3, #7
 800d81e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d824:	4619      	mov	r1, r3
 800d826:	483a      	ldr	r0, [pc, #232]	; (800d910 <HAL_UART_MspInit+0x1c4>)
 800d828:	f000 ff72 	bl	800e710 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800d82c:	4b3a      	ldr	r3, [pc, #232]	; (800d918 <HAL_UART_MspInit+0x1cc>)
 800d82e:	4a3b      	ldr	r2, [pc, #236]	; (800d91c <HAL_UART_MspInit+0x1d0>)
 800d830:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800d832:	4b39      	ldr	r3, [pc, #228]	; (800d918 <HAL_UART_MspInit+0x1cc>)
 800d834:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d838:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d83a:	4b37      	ldr	r3, [pc, #220]	; (800d918 <HAL_UART_MspInit+0x1cc>)
 800d83c:	2200      	movs	r2, #0
 800d83e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d840:	4b35      	ldr	r3, [pc, #212]	; (800d918 <HAL_UART_MspInit+0x1cc>)
 800d842:	2200      	movs	r2, #0
 800d844:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800d846:	4b34      	ldr	r3, [pc, #208]	; (800d918 <HAL_UART_MspInit+0x1cc>)
 800d848:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d84c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d84e:	4b32      	ldr	r3, [pc, #200]	; (800d918 <HAL_UART_MspInit+0x1cc>)
 800d850:	2200      	movs	r2, #0
 800d852:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d854:	4b30      	ldr	r3, [pc, #192]	; (800d918 <HAL_UART_MspInit+0x1cc>)
 800d856:	2200      	movs	r2, #0
 800d858:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800d85a:	4b2f      	ldr	r3, [pc, #188]	; (800d918 <HAL_UART_MspInit+0x1cc>)
 800d85c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d860:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800d862:	4b2d      	ldr	r3, [pc, #180]	; (800d918 <HAL_UART_MspInit+0x1cc>)
 800d864:	2200      	movs	r2, #0
 800d866:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d868:	4b2b      	ldr	r3, [pc, #172]	; (800d918 <HAL_UART_MspInit+0x1cc>)
 800d86a:	2200      	movs	r2, #0
 800d86c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800d86e:	482a      	ldr	r0, [pc, #168]	; (800d918 <HAL_UART_MspInit+0x1cc>)
 800d870:	f000 fb4c 	bl	800df0c <HAL_DMA_Init>
 800d874:	4603      	mov	r3, r0
 800d876:	2b00      	cmp	r3, #0
 800d878:	d001      	beq.n	800d87e <HAL_UART_MspInit+0x132>
      Error_Handler();
 800d87a:	f7ff fe25 	bl	800d4c8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	4a25      	ldr	r2, [pc, #148]	; (800d918 <HAL_UART_MspInit+0x1cc>)
 800d882:	63da      	str	r2, [r3, #60]	; 0x3c
 800d884:	4a24      	ldr	r2, [pc, #144]	; (800d918 <HAL_UART_MspInit+0x1cc>)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800d88a:	2200      	movs	r2, #0
 800d88c:	2100      	movs	r1, #0
 800d88e:	2026      	movs	r0, #38	; 0x26
 800d890:	f000 fb05 	bl	800de9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d894:	2026      	movs	r0, #38	; 0x26
 800d896:	f000 fb1e 	bl	800ded6 <HAL_NVIC_EnableIRQ>
}
 800d89a:	e031      	b.n	800d900 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART3)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a1f      	ldr	r2, [pc, #124]	; (800d920 <HAL_UART_MspInit+0x1d4>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d12c      	bne.n	800d900 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	613b      	str	r3, [r7, #16]
 800d8aa:	4b18      	ldr	r3, [pc, #96]	; (800d90c <HAL_UART_MspInit+0x1c0>)
 800d8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ae:	4a17      	ldr	r2, [pc, #92]	; (800d90c <HAL_UART_MspInit+0x1c0>)
 800d8b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d8b4:	6413      	str	r3, [r2, #64]	; 0x40
 800d8b6:	4b15      	ldr	r3, [pc, #84]	; (800d90c <HAL_UART_MspInit+0x1c0>)
 800d8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d8be:	613b      	str	r3, [r7, #16]
 800d8c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	60fb      	str	r3, [r7, #12]
 800d8c6:	4b11      	ldr	r3, [pc, #68]	; (800d90c <HAL_UART_MspInit+0x1c0>)
 800d8c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8ca:	4a10      	ldr	r2, [pc, #64]	; (800d90c <HAL_UART_MspInit+0x1c0>)
 800d8cc:	f043 0302 	orr.w	r3, r3, #2
 800d8d0:	6313      	str	r3, [r2, #48]	; 0x30
 800d8d2:	4b0e      	ldr	r3, [pc, #56]	; (800d90c <HAL_UART_MspInit+0x1c0>)
 800d8d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8d6:	f003 0302 	and.w	r3, r3, #2
 800d8da:	60fb      	str	r3, [r7, #12]
 800d8dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DEBUG_CONSOLE_TX_Pin|DEBUG_CONSOLE_RX_Pin;
 800d8de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800d8e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8e4:	2302      	movs	r3, #2
 800d8e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d8ec:	2303      	movs	r3, #3
 800d8ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800d8f0:	2307      	movs	r3, #7
 800d8f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d8f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	480a      	ldr	r0, [pc, #40]	; (800d924 <HAL_UART_MspInit+0x1d8>)
 800d8fc:	f000 ff08 	bl	800e710 <HAL_GPIO_Init>
}
 800d900:	bf00      	nop
 800d902:	3738      	adds	r7, #56	; 0x38
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}
 800d908:	40011000 	.word	0x40011000
 800d90c:	40023800 	.word	0x40023800
 800d910:	40020000 	.word	0x40020000
 800d914:	40004400 	.word	0x40004400
 800d918:	2000058c 	.word	0x2000058c
 800d91c:	40026088 	.word	0x40026088
 800d920:	40004800 	.word	0x40004800
 800d924:	40020400 	.word	0x40020400

0800d928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d928:	b480      	push	{r7}
 800d92a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800d92c:	e7fe      	b.n	800d92c <NMI_Handler+0x4>

0800d92e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d92e:	b480      	push	{r7}
 800d930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d932:	e7fe      	b.n	800d932 <HardFault_Handler+0x4>

0800d934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d934:	b480      	push	{r7}
 800d936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d938:	e7fe      	b.n	800d938 <MemManage_Handler+0x4>

0800d93a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d93a:	b480      	push	{r7}
 800d93c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d93e:	e7fe      	b.n	800d93e <BusFault_Handler+0x4>

0800d940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d940:	b480      	push	{r7}
 800d942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d944:	e7fe      	b.n	800d944 <UsageFault_Handler+0x4>

0800d946 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d946:	b480      	push	{r7}
 800d948:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d94a:	bf00      	nop
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	4770      	bx	lr

0800d954 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d954:	b480      	push	{r7}
 800d956:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d958:	bf00      	nop
 800d95a:	46bd      	mov	sp, r7
 800d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d960:	4770      	bx	lr

0800d962 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d962:	b480      	push	{r7}
 800d964:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d966:	bf00      	nop
 800d968:	46bd      	mov	sp, r7
 800d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96e:	4770      	bx	lr

0800d970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d974:	f000 f974 	bl	800dc60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d978:	bf00      	nop
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800d980:	4802      	ldr	r0, [pc, #8]	; (800d98c <DMA1_Stream5_IRQHandler+0x10>)
 800d982:	f000 fc5b 	bl	800e23c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800d986:	bf00      	nop
 800d988:	bd80      	pop	{r7, pc}
 800d98a:	bf00      	nop
 800d98c:	2000058c 	.word	0x2000058c

0800d990 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800d994:	4802      	ldr	r0, [pc, #8]	; (800d9a0 <USART2_IRQHandler+0x10>)
 800d996:	f004 f8ad 	bl	8011af4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800d99a:	bf00      	nop
 800d99c:	bd80      	pop	{r7, pc}
 800d99e:	bf00      	nop
 800d9a0:	200004fc 	.word	0x200004fc

0800d9a4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800d9a8:	4802      	ldr	r0, [pc, #8]	; (800d9b4 <SDIO_IRQHandler+0x10>)
 800d9aa:	f002 f93b 	bl	800fc24 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800d9ae:	bf00      	nop
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	20000390 	.word	0x20000390

0800d9b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	af00      	add	r7, sp, #0
  return 1;
 800d9bc:	2301      	movs	r3, #1
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c6:	4770      	bx	lr

0800d9c8 <_kill>:

int _kill(int pid, int sig)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
 800d9d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800d9d2:	f00e f927 	bl	801bc24 <__errno>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	2216      	movs	r2, #22
 800d9da:	601a      	str	r2, [r3, #0]
  return -1;
 800d9dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3708      	adds	r7, #8
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}

0800d9e8 <_exit>:

void _exit (int status)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b082      	sub	sp, #8
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800d9f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f7ff ffe7 	bl	800d9c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800d9fa:	e7fe      	b.n	800d9fa <_exit+0x12>

0800d9fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b086      	sub	sp, #24
 800da00:	af00      	add	r7, sp, #0
 800da02:	60f8      	str	r0, [r7, #12]
 800da04:	60b9      	str	r1, [r7, #8]
 800da06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800da08:	2300      	movs	r3, #0
 800da0a:	617b      	str	r3, [r7, #20]
 800da0c:	e00a      	b.n	800da24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800da0e:	f3af 8000 	nop.w
 800da12:	4601      	mov	r1, r0
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	1c5a      	adds	r2, r3, #1
 800da18:	60ba      	str	r2, [r7, #8]
 800da1a:	b2ca      	uxtb	r2, r1
 800da1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	3301      	adds	r3, #1
 800da22:	617b      	str	r3, [r7, #20]
 800da24:	697a      	ldr	r2, [r7, #20]
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	429a      	cmp	r2, r3
 800da2a:	dbf0      	blt.n	800da0e <_read+0x12>
  }

  return len;
 800da2c:	687b      	ldr	r3, [r7, #4]
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3718      	adds	r7, #24
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}

0800da36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800da36:	b580      	push	{r7, lr}
 800da38:	b086      	sub	sp, #24
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	60f8      	str	r0, [r7, #12]
 800da3e:	60b9      	str	r1, [r7, #8]
 800da40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800da42:	2300      	movs	r3, #0
 800da44:	617b      	str	r3, [r7, #20]
 800da46:	e009      	b.n	800da5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	1c5a      	adds	r2, r3, #1
 800da4c:	60ba      	str	r2, [r7, #8]
 800da4e:	781b      	ldrb	r3, [r3, #0]
 800da50:	4618      	mov	r0, r3
 800da52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	3301      	adds	r3, #1
 800da5a:	617b      	str	r3, [r7, #20]
 800da5c:	697a      	ldr	r2, [r7, #20]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	429a      	cmp	r2, r3
 800da62:	dbf1      	blt.n	800da48 <_write+0x12>
  }
  return len;
 800da64:	687b      	ldr	r3, [r7, #4]
}
 800da66:	4618      	mov	r0, r3
 800da68:	3718      	adds	r7, #24
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}

0800da6e <_close>:

int _close(int file)
{
 800da6e:	b480      	push	{r7}
 800da70:	b083      	sub	sp, #12
 800da72:	af00      	add	r7, sp, #0
 800da74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800da76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	370c      	adds	r7, #12
 800da7e:	46bd      	mov	sp, r7
 800da80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da84:	4770      	bx	lr

0800da86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800da86:	b480      	push	{r7}
 800da88:	b083      	sub	sp, #12
 800da8a:	af00      	add	r7, sp, #0
 800da8c:	6078      	str	r0, [r7, #4]
 800da8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800da96:	605a      	str	r2, [r3, #4]
  return 0;
 800da98:	2300      	movs	r3, #0
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	370c      	adds	r7, #12
 800da9e:	46bd      	mov	sp, r7
 800daa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa4:	4770      	bx	lr

0800daa6 <_isatty>:

int _isatty(int file)
{
 800daa6:	b480      	push	{r7}
 800daa8:	b083      	sub	sp, #12
 800daaa:	af00      	add	r7, sp, #0
 800daac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800daae:	2301      	movs	r3, #1
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	370c      	adds	r7, #12
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr

0800dabc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b085      	sub	sp, #20
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	60f8      	str	r0, [r7, #12]
 800dac4:	60b9      	str	r1, [r7, #8]
 800dac6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800dac8:	2300      	movs	r3, #0
}
 800daca:	4618      	mov	r0, r3
 800dacc:	3714      	adds	r7, #20
 800dace:	46bd      	mov	sp, r7
 800dad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad4:	4770      	bx	lr
	...

0800dad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b086      	sub	sp, #24
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800dae0:	4a14      	ldr	r2, [pc, #80]	; (800db34 <_sbrk+0x5c>)
 800dae2:	4b15      	ldr	r3, [pc, #84]	; (800db38 <_sbrk+0x60>)
 800dae4:	1ad3      	subs	r3, r2, r3
 800dae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800daec:	4b13      	ldr	r3, [pc, #76]	; (800db3c <_sbrk+0x64>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d102      	bne.n	800dafa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800daf4:	4b11      	ldr	r3, [pc, #68]	; (800db3c <_sbrk+0x64>)
 800daf6:	4a12      	ldr	r2, [pc, #72]	; (800db40 <_sbrk+0x68>)
 800daf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800dafa:	4b10      	ldr	r3, [pc, #64]	; (800db3c <_sbrk+0x64>)
 800dafc:	681a      	ldr	r2, [r3, #0]
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	4413      	add	r3, r2
 800db02:	693a      	ldr	r2, [r7, #16]
 800db04:	429a      	cmp	r2, r3
 800db06:	d207      	bcs.n	800db18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800db08:	f00e f88c 	bl	801bc24 <__errno>
 800db0c:	4603      	mov	r3, r0
 800db0e:	220c      	movs	r2, #12
 800db10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800db12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db16:	e009      	b.n	800db2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800db18:	4b08      	ldr	r3, [pc, #32]	; (800db3c <_sbrk+0x64>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800db1e:	4b07      	ldr	r3, [pc, #28]	; (800db3c <_sbrk+0x64>)
 800db20:	681a      	ldr	r2, [r3, #0]
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	4413      	add	r3, r2
 800db26:	4a05      	ldr	r2, [pc, #20]	; (800db3c <_sbrk+0x64>)
 800db28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800db2a:	68fb      	ldr	r3, [r7, #12]
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3718      	adds	r7, #24
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}
 800db34:	20020000 	.word	0x20020000
 800db38:	00001200 	.word	0x00001200
 800db3c:	200005ec 	.word	0x200005ec
 800db40:	20001870 	.word	0x20001870

0800db44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800db44:	b480      	push	{r7}
 800db46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800db48:	4b06      	ldr	r3, [pc, #24]	; (800db64 <SystemInit+0x20>)
 800db4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db4e:	4a05      	ldr	r2, [pc, #20]	; (800db64 <SystemInit+0x20>)
 800db50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800db54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800db58:	bf00      	nop
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr
 800db62:	bf00      	nop
 800db64:	e000ed00 	.word	0xe000ed00

0800db68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800db68:	f8df d034 	ldr.w	sp, [pc, #52]	; 800dba0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800db6c:	f7ff ffea 	bl	800db44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800db70:	480c      	ldr	r0, [pc, #48]	; (800dba4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800db72:	490d      	ldr	r1, [pc, #52]	; (800dba8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800db74:	4a0d      	ldr	r2, [pc, #52]	; (800dbac <LoopFillZerobss+0x1a>)
  movs r3, #0
 800db76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800db78:	e002      	b.n	800db80 <LoopCopyDataInit>

0800db7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800db7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800db7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800db7e:	3304      	adds	r3, #4

0800db80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800db80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800db82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800db84:	d3f9      	bcc.n	800db7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800db86:	4a0a      	ldr	r2, [pc, #40]	; (800dbb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800db88:	4c0a      	ldr	r4, [pc, #40]	; (800dbb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800db8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800db8c:	e001      	b.n	800db92 <LoopFillZerobss>

0800db8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800db8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800db90:	3204      	adds	r2, #4

0800db92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800db92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800db94:	d3fb      	bcc.n	800db8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800db96:	f00e f84b 	bl	801bc30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800db9a:	f7ff fa2d 	bl	800cff8 <main>
  bx  lr    
 800db9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800dba0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800dba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800dba8:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 800dbac:	080258c8 	.word	0x080258c8
  ldr r2, =_sbss
 800dbb0:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 800dbb4:	20001870 	.word	0x20001870

0800dbb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800dbb8:	e7fe      	b.n	800dbb8 <ADC_IRQHandler>
	...

0800dbbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800dbc0:	4b0e      	ldr	r3, [pc, #56]	; (800dbfc <HAL_Init+0x40>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	4a0d      	ldr	r2, [pc, #52]	; (800dbfc <HAL_Init+0x40>)
 800dbc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dbca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800dbcc:	4b0b      	ldr	r3, [pc, #44]	; (800dbfc <HAL_Init+0x40>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	4a0a      	ldr	r2, [pc, #40]	; (800dbfc <HAL_Init+0x40>)
 800dbd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dbd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800dbd8:	4b08      	ldr	r3, [pc, #32]	; (800dbfc <HAL_Init+0x40>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4a07      	ldr	r2, [pc, #28]	; (800dbfc <HAL_Init+0x40>)
 800dbde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dbe2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800dbe4:	2003      	movs	r0, #3
 800dbe6:	f000 f94f 	bl	800de88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800dbea:	200f      	movs	r0, #15
 800dbec:	f000 f808 	bl	800dc00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800dbf0:	f7ff fc70 	bl	800d4d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800dbf4:	2300      	movs	r3, #0
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	40023c00 	.word	0x40023c00

0800dc00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b082      	sub	sp, #8
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800dc08:	4b12      	ldr	r3, [pc, #72]	; (800dc54 <HAL_InitTick+0x54>)
 800dc0a:	681a      	ldr	r2, [r3, #0]
 800dc0c:	4b12      	ldr	r3, [pc, #72]	; (800dc58 <HAL_InitTick+0x58>)
 800dc0e:	781b      	ldrb	r3, [r3, #0]
 800dc10:	4619      	mov	r1, r3
 800dc12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dc16:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f000 f967 	bl	800def2 <HAL_SYSTICK_Config>
 800dc24:	4603      	mov	r3, r0
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d001      	beq.n	800dc2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	e00e      	b.n	800dc4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2b0f      	cmp	r3, #15
 800dc32:	d80a      	bhi.n	800dc4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800dc34:	2200      	movs	r2, #0
 800dc36:	6879      	ldr	r1, [r7, #4]
 800dc38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc3c:	f000 f92f 	bl	800de9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800dc40:	4a06      	ldr	r2, [pc, #24]	; (800dc5c <HAL_InitTick+0x5c>)
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800dc46:	2300      	movs	r3, #0
 800dc48:	e000      	b.n	800dc4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800dc4a:	2301      	movs	r3, #1
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3708      	adds	r7, #8
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}
 800dc54:	20000000 	.word	0x20000000
 800dc58:	20000008 	.word	0x20000008
 800dc5c:	20000004 	.word	0x20000004

0800dc60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800dc60:	b480      	push	{r7}
 800dc62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800dc64:	4b06      	ldr	r3, [pc, #24]	; (800dc80 <HAL_IncTick+0x20>)
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	461a      	mov	r2, r3
 800dc6a:	4b06      	ldr	r3, [pc, #24]	; (800dc84 <HAL_IncTick+0x24>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	4413      	add	r3, r2
 800dc70:	4a04      	ldr	r2, [pc, #16]	; (800dc84 <HAL_IncTick+0x24>)
 800dc72:	6013      	str	r3, [r2, #0]
}
 800dc74:	bf00      	nop
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr
 800dc7e:	bf00      	nop
 800dc80:	20000008 	.word	0x20000008
 800dc84:	200005f0 	.word	0x200005f0

0800dc88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	af00      	add	r7, sp, #0
  return uwTick;
 800dc8c:	4b03      	ldr	r3, [pc, #12]	; (800dc9c <HAL_GetTick+0x14>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	46bd      	mov	sp, r7
 800dc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc98:	4770      	bx	lr
 800dc9a:	bf00      	nop
 800dc9c:	200005f0 	.word	0x200005f0

0800dca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b084      	sub	sp, #16
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800dca8:	f7ff ffee 	bl	800dc88 <HAL_GetTick>
 800dcac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dcb8:	d005      	beq.n	800dcc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800dcba:	4b0a      	ldr	r3, [pc, #40]	; (800dce4 <HAL_Delay+0x44>)
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	461a      	mov	r2, r3
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	4413      	add	r3, r2
 800dcc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800dcc6:	bf00      	nop
 800dcc8:	f7ff ffde 	bl	800dc88 <HAL_GetTick>
 800dccc:	4602      	mov	r2, r0
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	1ad3      	subs	r3, r2, r3
 800dcd2:	68fa      	ldr	r2, [r7, #12]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d8f7      	bhi.n	800dcc8 <HAL_Delay+0x28>
  {
  }
}
 800dcd8:	bf00      	nop
 800dcda:	bf00      	nop
 800dcdc:	3710      	adds	r7, #16
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	20000008 	.word	0x20000008

0800dce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800dce8:	b480      	push	{r7}
 800dcea:	b085      	sub	sp, #20
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f003 0307 	and.w	r3, r3, #7
 800dcf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800dcf8:	4b0c      	ldr	r3, [pc, #48]	; (800dd2c <__NVIC_SetPriorityGrouping+0x44>)
 800dcfa:	68db      	ldr	r3, [r3, #12]
 800dcfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800dcfe:	68ba      	ldr	r2, [r7, #8]
 800dd00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800dd04:	4013      	ands	r3, r2
 800dd06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800dd10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800dd14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dd18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800dd1a:	4a04      	ldr	r2, [pc, #16]	; (800dd2c <__NVIC_SetPriorityGrouping+0x44>)
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	60d3      	str	r3, [r2, #12]
}
 800dd20:	bf00      	nop
 800dd22:	3714      	adds	r7, #20
 800dd24:	46bd      	mov	sp, r7
 800dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2a:	4770      	bx	lr
 800dd2c:	e000ed00 	.word	0xe000ed00

0800dd30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800dd30:	b480      	push	{r7}
 800dd32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800dd34:	4b04      	ldr	r3, [pc, #16]	; (800dd48 <__NVIC_GetPriorityGrouping+0x18>)
 800dd36:	68db      	ldr	r3, [r3, #12]
 800dd38:	0a1b      	lsrs	r3, r3, #8
 800dd3a:	f003 0307 	and.w	r3, r3, #7
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	46bd      	mov	sp, r7
 800dd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd46:	4770      	bx	lr
 800dd48:	e000ed00 	.word	0xe000ed00

0800dd4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b083      	sub	sp, #12
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	4603      	mov	r3, r0
 800dd54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dd56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	db0b      	blt.n	800dd76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800dd5e:	79fb      	ldrb	r3, [r7, #7]
 800dd60:	f003 021f 	and.w	r2, r3, #31
 800dd64:	4907      	ldr	r1, [pc, #28]	; (800dd84 <__NVIC_EnableIRQ+0x38>)
 800dd66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd6a:	095b      	lsrs	r3, r3, #5
 800dd6c:	2001      	movs	r0, #1
 800dd6e:	fa00 f202 	lsl.w	r2, r0, r2
 800dd72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800dd76:	bf00      	nop
 800dd78:	370c      	adds	r7, #12
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd80:	4770      	bx	lr
 800dd82:	bf00      	nop
 800dd84:	e000e100 	.word	0xe000e100

0800dd88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b083      	sub	sp, #12
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	4603      	mov	r3, r0
 800dd90:	6039      	str	r1, [r7, #0]
 800dd92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dd94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	db0a      	blt.n	800ddb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	b2da      	uxtb	r2, r3
 800dda0:	490c      	ldr	r1, [pc, #48]	; (800ddd4 <__NVIC_SetPriority+0x4c>)
 800dda2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dda6:	0112      	lsls	r2, r2, #4
 800dda8:	b2d2      	uxtb	r2, r2
 800ddaa:	440b      	add	r3, r1
 800ddac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ddb0:	e00a      	b.n	800ddc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	b2da      	uxtb	r2, r3
 800ddb6:	4908      	ldr	r1, [pc, #32]	; (800ddd8 <__NVIC_SetPriority+0x50>)
 800ddb8:	79fb      	ldrb	r3, [r7, #7]
 800ddba:	f003 030f 	and.w	r3, r3, #15
 800ddbe:	3b04      	subs	r3, #4
 800ddc0:	0112      	lsls	r2, r2, #4
 800ddc2:	b2d2      	uxtb	r2, r2
 800ddc4:	440b      	add	r3, r1
 800ddc6:	761a      	strb	r2, [r3, #24]
}
 800ddc8:	bf00      	nop
 800ddca:	370c      	adds	r7, #12
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr
 800ddd4:	e000e100 	.word	0xe000e100
 800ddd8:	e000ed00 	.word	0xe000ed00

0800dddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800dddc:	b480      	push	{r7}
 800ddde:	b089      	sub	sp, #36	; 0x24
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	60f8      	str	r0, [r7, #12]
 800dde4:	60b9      	str	r1, [r7, #8]
 800dde6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	f003 0307 	and.w	r3, r3, #7
 800ddee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ddf0:	69fb      	ldr	r3, [r7, #28]
 800ddf2:	f1c3 0307 	rsb	r3, r3, #7
 800ddf6:	2b04      	cmp	r3, #4
 800ddf8:	bf28      	it	cs
 800ddfa:	2304      	movcs	r3, #4
 800ddfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ddfe:	69fb      	ldr	r3, [r7, #28]
 800de00:	3304      	adds	r3, #4
 800de02:	2b06      	cmp	r3, #6
 800de04:	d902      	bls.n	800de0c <NVIC_EncodePriority+0x30>
 800de06:	69fb      	ldr	r3, [r7, #28]
 800de08:	3b03      	subs	r3, #3
 800de0a:	e000      	b.n	800de0e <NVIC_EncodePriority+0x32>
 800de0c:	2300      	movs	r3, #0
 800de0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800de10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de14:	69bb      	ldr	r3, [r7, #24]
 800de16:	fa02 f303 	lsl.w	r3, r2, r3
 800de1a:	43da      	mvns	r2, r3
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	401a      	ands	r2, r3
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800de24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	fa01 f303 	lsl.w	r3, r1, r3
 800de2e:	43d9      	mvns	r1, r3
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800de34:	4313      	orrs	r3, r2
         );
}
 800de36:	4618      	mov	r0, r3
 800de38:	3724      	adds	r7, #36	; 0x24
 800de3a:	46bd      	mov	sp, r7
 800de3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de40:	4770      	bx	lr
	...

0800de44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	3b01      	subs	r3, #1
 800de50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800de54:	d301      	bcc.n	800de5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800de56:	2301      	movs	r3, #1
 800de58:	e00f      	b.n	800de7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800de5a:	4a0a      	ldr	r2, [pc, #40]	; (800de84 <SysTick_Config+0x40>)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	3b01      	subs	r3, #1
 800de60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800de62:	210f      	movs	r1, #15
 800de64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de68:	f7ff ff8e 	bl	800dd88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800de6c:	4b05      	ldr	r3, [pc, #20]	; (800de84 <SysTick_Config+0x40>)
 800de6e:	2200      	movs	r2, #0
 800de70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800de72:	4b04      	ldr	r3, [pc, #16]	; (800de84 <SysTick_Config+0x40>)
 800de74:	2207      	movs	r2, #7
 800de76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800de78:	2300      	movs	r3, #0
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3708      	adds	r7, #8
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
 800de82:	bf00      	nop
 800de84:	e000e010 	.word	0xe000e010

0800de88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f7ff ff29 	bl	800dce8 <__NVIC_SetPriorityGrouping>
}
 800de96:	bf00      	nop
 800de98:	3708      	adds	r7, #8
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}

0800de9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800de9e:	b580      	push	{r7, lr}
 800dea0:	b086      	sub	sp, #24
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	4603      	mov	r3, r0
 800dea6:	60b9      	str	r1, [r7, #8]
 800dea8:	607a      	str	r2, [r7, #4]
 800deaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800deac:	2300      	movs	r3, #0
 800deae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800deb0:	f7ff ff3e 	bl	800dd30 <__NVIC_GetPriorityGrouping>
 800deb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800deb6:	687a      	ldr	r2, [r7, #4]
 800deb8:	68b9      	ldr	r1, [r7, #8]
 800deba:	6978      	ldr	r0, [r7, #20]
 800debc:	f7ff ff8e 	bl	800dddc <NVIC_EncodePriority>
 800dec0:	4602      	mov	r2, r0
 800dec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dec6:	4611      	mov	r1, r2
 800dec8:	4618      	mov	r0, r3
 800deca:	f7ff ff5d 	bl	800dd88 <__NVIC_SetPriority>
}
 800dece:	bf00      	nop
 800ded0:	3718      	adds	r7, #24
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}

0800ded6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ded6:	b580      	push	{r7, lr}
 800ded8:	b082      	sub	sp, #8
 800deda:	af00      	add	r7, sp, #0
 800dedc:	4603      	mov	r3, r0
 800dede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800dee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7ff ff31 	bl	800dd4c <__NVIC_EnableIRQ>
}
 800deea:	bf00      	nop
 800deec:	3708      	adds	r7, #8
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}

0800def2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800def2:	b580      	push	{r7, lr}
 800def4:	b082      	sub	sp, #8
 800def6:	af00      	add	r7, sp, #0
 800def8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f7ff ffa2 	bl	800de44 <SysTick_Config>
 800df00:	4603      	mov	r3, r0
}
 800df02:	4618      	mov	r0, r3
 800df04:	3708      	adds	r7, #8
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
	...

0800df0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b086      	sub	sp, #24
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800df14:	2300      	movs	r3, #0
 800df16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800df18:	f7ff feb6 	bl	800dc88 <HAL_GetTick>
 800df1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d101      	bne.n	800df28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800df24:	2301      	movs	r3, #1
 800df26:	e099      	b.n	800e05c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2202      	movs	r2, #2
 800df2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2200      	movs	r2, #0
 800df34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	681a      	ldr	r2, [r3, #0]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	f022 0201 	bic.w	r2, r2, #1
 800df46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800df48:	e00f      	b.n	800df6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800df4a:	f7ff fe9d 	bl	800dc88 <HAL_GetTick>
 800df4e:	4602      	mov	r2, r0
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	1ad3      	subs	r3, r2, r3
 800df54:	2b05      	cmp	r3, #5
 800df56:	d908      	bls.n	800df6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2220      	movs	r2, #32
 800df5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2203      	movs	r2, #3
 800df62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800df66:	2303      	movs	r3, #3
 800df68:	e078      	b.n	800e05c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	f003 0301 	and.w	r3, r3, #1
 800df74:	2b00      	cmp	r3, #0
 800df76:	d1e8      	bne.n	800df4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800df80:	697a      	ldr	r2, [r7, #20]
 800df82:	4b38      	ldr	r3, [pc, #224]	; (800e064 <HAL_DMA_Init+0x158>)
 800df84:	4013      	ands	r3, r2
 800df86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	685a      	ldr	r2, [r3, #4]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	689b      	ldr	r3, [r3, #8]
 800df90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800df96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	691b      	ldr	r3, [r3, #16]
 800df9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800dfa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	699b      	ldr	r3, [r3, #24]
 800dfa8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800dfae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6a1b      	ldr	r3, [r3, #32]
 800dfb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800dfb6:	697a      	ldr	r2, [r7, #20]
 800dfb8:	4313      	orrs	r3, r2
 800dfba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfc0:	2b04      	cmp	r3, #4
 800dfc2:	d107      	bne.n	800dfd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfcc:	4313      	orrs	r3, r2
 800dfce:	697a      	ldr	r2, [r7, #20]
 800dfd0:	4313      	orrs	r3, r2
 800dfd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	697a      	ldr	r2, [r7, #20]
 800dfda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	695b      	ldr	r3, [r3, #20]
 800dfe2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800dfe4:	697b      	ldr	r3, [r7, #20]
 800dfe6:	f023 0307 	bic.w	r3, r3, #7
 800dfea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dff0:	697a      	ldr	r2, [r7, #20]
 800dff2:	4313      	orrs	r3, r2
 800dff4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dffa:	2b04      	cmp	r3, #4
 800dffc:	d117      	bne.n	800e02e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e002:	697a      	ldr	r2, [r7, #20]
 800e004:	4313      	orrs	r3, r2
 800e006:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d00e      	beq.n	800e02e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f000 fb01 	bl	800e618 <DMA_CheckFifoParam>
 800e016:	4603      	mov	r3, r0
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d008      	beq.n	800e02e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2240      	movs	r2, #64	; 0x40
 800e020:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2201      	movs	r2, #1
 800e026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800e02a:	2301      	movs	r3, #1
 800e02c:	e016      	b.n	800e05c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	697a      	ldr	r2, [r7, #20]
 800e034:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f000 fab8 	bl	800e5ac <DMA_CalcBaseAndBitshift>
 800e03c:	4603      	mov	r3, r0
 800e03e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e044:	223f      	movs	r2, #63	; 0x3f
 800e046:	409a      	lsls	r2, r3
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2200      	movs	r2, #0
 800e050:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2201      	movs	r2, #1
 800e056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800e05a:	2300      	movs	r3, #0
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3718      	adds	r7, #24
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}
 800e064:	f010803f 	.word	0xf010803f

0800e068 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b086      	sub	sp, #24
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	60f8      	str	r0, [r7, #12]
 800e070:	60b9      	str	r1, [r7, #8]
 800e072:	607a      	str	r2, [r7, #4]
 800e074:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e076:	2300      	movs	r3, #0
 800e078:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e07e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e086:	2b01      	cmp	r3, #1
 800e088:	d101      	bne.n	800e08e <HAL_DMA_Start_IT+0x26>
 800e08a:	2302      	movs	r3, #2
 800e08c:	e040      	b.n	800e110 <HAL_DMA_Start_IT+0xa8>
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	2201      	movs	r2, #1
 800e092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	2b01      	cmp	r3, #1
 800e0a0:	d12f      	bne.n	800e102 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2202      	movs	r2, #2
 800e0a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	68b9      	ldr	r1, [r7, #8]
 800e0b6:	68f8      	ldr	r0, [r7, #12]
 800e0b8:	f000 fa4a 	bl	800e550 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e0c0:	223f      	movs	r2, #63	; 0x3f
 800e0c2:	409a      	lsls	r2, r3
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	681a      	ldr	r2, [r3, #0]
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	f042 0216 	orr.w	r2, r2, #22
 800e0d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d007      	beq.n	800e0f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	f042 0208 	orr.w	r2, r2, #8
 800e0ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	681a      	ldr	r2, [r3, #0]
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f042 0201 	orr.w	r2, r2, #1
 800e0fe:	601a      	str	r2, [r3, #0]
 800e100:	e005      	b.n	800e10e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2200      	movs	r2, #0
 800e106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800e10a:	2302      	movs	r3, #2
 800e10c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800e10e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e110:	4618      	mov	r0, r3
 800e112:	3718      	adds	r7, #24
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}

0800e118 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b084      	sub	sp, #16
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e124:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800e126:	f7ff fdaf 	bl	800dc88 <HAL_GetTick>
 800e12a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e132:	b2db      	uxtb	r3, r3
 800e134:	2b02      	cmp	r3, #2
 800e136:	d008      	beq.n	800e14a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2280      	movs	r2, #128	; 0x80
 800e13c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2200      	movs	r2, #0
 800e142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800e146:	2301      	movs	r3, #1
 800e148:	e052      	b.n	800e1f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	681a      	ldr	r2, [r3, #0]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	f022 0216 	bic.w	r2, r2, #22
 800e158:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	695a      	ldr	r2, [r3, #20]
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e168:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d103      	bne.n	800e17a <HAL_DMA_Abort+0x62>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e176:	2b00      	cmp	r3, #0
 800e178:	d007      	beq.n	800e18a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	681a      	ldr	r2, [r3, #0]
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	f022 0208 	bic.w	r2, r2, #8
 800e188:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	681a      	ldr	r2, [r3, #0]
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f022 0201 	bic.w	r2, r2, #1
 800e198:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e19a:	e013      	b.n	800e1c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800e19c:	f7ff fd74 	bl	800dc88 <HAL_GetTick>
 800e1a0:	4602      	mov	r2, r0
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	1ad3      	subs	r3, r2, r3
 800e1a6:	2b05      	cmp	r3, #5
 800e1a8:	d90c      	bls.n	800e1c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2220      	movs	r2, #32
 800e1ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2203      	movs	r2, #3
 800e1b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800e1c0:	2303      	movs	r3, #3
 800e1c2:	e015      	b.n	800e1f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	f003 0301 	and.w	r3, r3, #1
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d1e4      	bne.n	800e19c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e1d6:	223f      	movs	r2, #63	; 0x3f
 800e1d8:	409a      	lsls	r2, r3
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800e1ee:	2300      	movs	r3, #0
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3710      	adds	r7, #16
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}

0800e1f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800e1f8:	b480      	push	{r7}
 800e1fa:	b083      	sub	sp, #12
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e206:	b2db      	uxtb	r3, r3
 800e208:	2b02      	cmp	r3, #2
 800e20a:	d004      	beq.n	800e216 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2280      	movs	r2, #128	; 0x80
 800e210:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800e212:	2301      	movs	r3, #1
 800e214:	e00c      	b.n	800e230 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2205      	movs	r2, #5
 800e21a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	681a      	ldr	r2, [r3, #0]
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	f022 0201 	bic.w	r2, r2, #1
 800e22c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800e22e:	2300      	movs	r3, #0
}
 800e230:	4618      	mov	r0, r3
 800e232:	370c      	adds	r7, #12
 800e234:	46bd      	mov	sp, r7
 800e236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23a:	4770      	bx	lr

0800e23c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b086      	sub	sp, #24
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800e244:	2300      	movs	r3, #0
 800e246:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800e248:	4b8e      	ldr	r3, [pc, #568]	; (800e484 <HAL_DMA_IRQHandler+0x248>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	4a8e      	ldr	r2, [pc, #568]	; (800e488 <HAL_DMA_IRQHandler+0x24c>)
 800e24e:	fba2 2303 	umull	r2, r3, r2, r3
 800e252:	0a9b      	lsrs	r3, r3, #10
 800e254:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e25a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e266:	2208      	movs	r2, #8
 800e268:	409a      	lsls	r2, r3
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	4013      	ands	r3, r2
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d01a      	beq.n	800e2a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f003 0304 	and.w	r3, r3, #4
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d013      	beq.n	800e2a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	681a      	ldr	r2, [r3, #0]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f022 0204 	bic.w	r2, r2, #4
 800e28e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e294:	2208      	movs	r2, #8
 800e296:	409a      	lsls	r2, r3
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2a0:	f043 0201 	orr.w	r2, r3, #1
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	409a      	lsls	r2, r3
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	4013      	ands	r3, r2
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d012      	beq.n	800e2de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	695b      	ldr	r3, [r3, #20]
 800e2be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d00b      	beq.n	800e2de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	409a      	lsls	r2, r3
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2d6:	f043 0202 	orr.w	r2, r3, #2
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2e2:	2204      	movs	r2, #4
 800e2e4:	409a      	lsls	r2, r3
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	4013      	ands	r3, r2
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d012      	beq.n	800e314 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	f003 0302 	and.w	r3, r3, #2
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d00b      	beq.n	800e314 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e300:	2204      	movs	r2, #4
 800e302:	409a      	lsls	r2, r3
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e30c:	f043 0204 	orr.w	r2, r3, #4
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e318:	2210      	movs	r2, #16
 800e31a:	409a      	lsls	r2, r3
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	4013      	ands	r3, r2
 800e320:	2b00      	cmp	r3, #0
 800e322:	d043      	beq.n	800e3ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	f003 0308 	and.w	r3, r3, #8
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d03c      	beq.n	800e3ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e336:	2210      	movs	r2, #16
 800e338:	409a      	lsls	r2, r3
 800e33a:	693b      	ldr	r3, [r7, #16]
 800e33c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d018      	beq.n	800e37e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e356:	2b00      	cmp	r3, #0
 800e358:	d108      	bne.n	800e36c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d024      	beq.n	800e3ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	4798      	blx	r3
 800e36a:	e01f      	b.n	800e3ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e370:	2b00      	cmp	r3, #0
 800e372:	d01b      	beq.n	800e3ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	4798      	blx	r3
 800e37c:	e016      	b.n	800e3ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d107      	bne.n	800e39c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	681a      	ldr	r2, [r3, #0]
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	f022 0208 	bic.w	r2, r2, #8
 800e39a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d003      	beq.n	800e3ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3b0:	2220      	movs	r2, #32
 800e3b2:	409a      	lsls	r2, r3
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	4013      	ands	r3, r2
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	f000 808f 	beq.w	800e4dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	f003 0310 	and.w	r3, r3, #16
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	f000 8087 	beq.w	800e4dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3d2:	2220      	movs	r2, #32
 800e3d4:	409a      	lsls	r2, r3
 800e3d6:	693b      	ldr	r3, [r7, #16]
 800e3d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	2b05      	cmp	r3, #5
 800e3e4:	d136      	bne.n	800e454 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	681a      	ldr	r2, [r3, #0]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	f022 0216 	bic.w	r2, r2, #22
 800e3f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	695a      	ldr	r2, [r3, #20]
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e404:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d103      	bne.n	800e416 <HAL_DMA_IRQHandler+0x1da>
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e412:	2b00      	cmp	r3, #0
 800e414:	d007      	beq.n	800e426 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	681a      	ldr	r2, [r3, #0]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f022 0208 	bic.w	r2, r2, #8
 800e424:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e42a:	223f      	movs	r2, #63	; 0x3f
 800e42c:	409a      	lsls	r2, r3
 800e42e:	693b      	ldr	r3, [r7, #16]
 800e430:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2201      	movs	r2, #1
 800e436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2200      	movs	r2, #0
 800e43e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e446:	2b00      	cmp	r3, #0
 800e448:	d07e      	beq.n	800e548 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	4798      	blx	r3
        }
        return;
 800e452:	e079      	b.n	800e548 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d01d      	beq.n	800e49e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d10d      	bne.n	800e48c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e474:	2b00      	cmp	r3, #0
 800e476:	d031      	beq.n	800e4dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	4798      	blx	r3
 800e480:	e02c      	b.n	800e4dc <HAL_DMA_IRQHandler+0x2a0>
 800e482:	bf00      	nop
 800e484:	20000000 	.word	0x20000000
 800e488:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e490:	2b00      	cmp	r3, #0
 800e492:	d023      	beq.n	800e4dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	4798      	blx	r3
 800e49c:	e01e      	b.n	800e4dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d10f      	bne.n	800e4cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	681a      	ldr	r2, [r3, #0]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	f022 0210 	bic.w	r2, r2, #16
 800e4ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2201      	movs	r2, #1
 800e4c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d003      	beq.n	800e4dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d032      	beq.n	800e54a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4e8:	f003 0301 	and.w	r3, r3, #1
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d022      	beq.n	800e536 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2205      	movs	r2, #5
 800e4f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	681a      	ldr	r2, [r3, #0]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f022 0201 	bic.w	r2, r2, #1
 800e506:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	3301      	adds	r3, #1
 800e50c:	60bb      	str	r3, [r7, #8]
 800e50e:	697a      	ldr	r2, [r7, #20]
 800e510:	429a      	cmp	r2, r3
 800e512:	d307      	bcc.n	800e524 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f003 0301 	and.w	r3, r3, #1
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d1f2      	bne.n	800e508 <HAL_DMA_IRQHandler+0x2cc>
 800e522:	e000      	b.n	800e526 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800e524:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2201      	movs	r2, #1
 800e52a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2200      	movs	r2, #0
 800e532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d005      	beq.n	800e54a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	4798      	blx	r3
 800e546:	e000      	b.n	800e54a <HAL_DMA_IRQHandler+0x30e>
        return;
 800e548:	bf00      	nop
    }
  }
}
 800e54a:	3718      	adds	r7, #24
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}

0800e550 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e550:	b480      	push	{r7}
 800e552:	b085      	sub	sp, #20
 800e554:	af00      	add	r7, sp, #0
 800e556:	60f8      	str	r0, [r7, #12]
 800e558:	60b9      	str	r1, [r7, #8]
 800e55a:	607a      	str	r2, [r7, #4]
 800e55c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	681a      	ldr	r2, [r3, #0]
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e56c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	683a      	ldr	r2, [r7, #0]
 800e574:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	689b      	ldr	r3, [r3, #8]
 800e57a:	2b40      	cmp	r3, #64	; 0x40
 800e57c:	d108      	bne.n	800e590 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	687a      	ldr	r2, [r7, #4]
 800e584:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	68ba      	ldr	r2, [r7, #8]
 800e58c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800e58e:	e007      	b.n	800e5a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	68ba      	ldr	r2, [r7, #8]
 800e596:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	687a      	ldr	r2, [r7, #4]
 800e59e:	60da      	str	r2, [r3, #12]
}
 800e5a0:	bf00      	nop
 800e5a2:	3714      	adds	r7, #20
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr

0800e5ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	b085      	sub	sp, #20
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	b2db      	uxtb	r3, r3
 800e5ba:	3b10      	subs	r3, #16
 800e5bc:	4a14      	ldr	r2, [pc, #80]	; (800e610 <DMA_CalcBaseAndBitshift+0x64>)
 800e5be:	fba2 2303 	umull	r2, r3, r2, r3
 800e5c2:	091b      	lsrs	r3, r3, #4
 800e5c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800e5c6:	4a13      	ldr	r2, [pc, #76]	; (800e614 <DMA_CalcBaseAndBitshift+0x68>)
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	4413      	add	r3, r2
 800e5cc:	781b      	ldrb	r3, [r3, #0]
 800e5ce:	461a      	mov	r2, r3
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	2b03      	cmp	r3, #3
 800e5d8:	d909      	bls.n	800e5ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800e5e2:	f023 0303 	bic.w	r3, r3, #3
 800e5e6:	1d1a      	adds	r2, r3, #4
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	659a      	str	r2, [r3, #88]	; 0x58
 800e5ec:	e007      	b.n	800e5fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800e5f6:	f023 0303 	bic.w	r3, r3, #3
 800e5fa:	687a      	ldr	r2, [r7, #4]
 800e5fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800e602:	4618      	mov	r0, r3
 800e604:	3714      	adds	r7, #20
 800e606:	46bd      	mov	sp, r7
 800e608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60c:	4770      	bx	lr
 800e60e:	bf00      	nop
 800e610:	aaaaaaab 	.word	0xaaaaaaab
 800e614:	0801fc54 	.word	0x0801fc54

0800e618 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800e618:	b480      	push	{r7}
 800e61a:	b085      	sub	sp, #20
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e620:	2300      	movs	r3, #0
 800e622:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e628:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	699b      	ldr	r3, [r3, #24]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d11f      	bne.n	800e672 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	2b03      	cmp	r3, #3
 800e636:	d856      	bhi.n	800e6e6 <DMA_CheckFifoParam+0xce>
 800e638:	a201      	add	r2, pc, #4	; (adr r2, 800e640 <DMA_CheckFifoParam+0x28>)
 800e63a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e63e:	bf00      	nop
 800e640:	0800e651 	.word	0x0800e651
 800e644:	0800e663 	.word	0x0800e663
 800e648:	0800e651 	.word	0x0800e651
 800e64c:	0800e6e7 	.word	0x0800e6e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d046      	beq.n	800e6ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800e65c:	2301      	movs	r3, #1
 800e65e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e660:	e043      	b.n	800e6ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e666:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800e66a:	d140      	bne.n	800e6ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800e66c:	2301      	movs	r3, #1
 800e66e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e670:	e03d      	b.n	800e6ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	699b      	ldr	r3, [r3, #24]
 800e676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e67a:	d121      	bne.n	800e6c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	2b03      	cmp	r3, #3
 800e680:	d837      	bhi.n	800e6f2 <DMA_CheckFifoParam+0xda>
 800e682:	a201      	add	r2, pc, #4	; (adr r2, 800e688 <DMA_CheckFifoParam+0x70>)
 800e684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e688:	0800e699 	.word	0x0800e699
 800e68c:	0800e69f 	.word	0x0800e69f
 800e690:	0800e699 	.word	0x0800e699
 800e694:	0800e6b1 	.word	0x0800e6b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800e698:	2301      	movs	r3, #1
 800e69a:	73fb      	strb	r3, [r7, #15]
      break;
 800e69c:	e030      	b.n	800e700 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d025      	beq.n	800e6f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e6ae:	e022      	b.n	800e6f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800e6b8:	d11f      	bne.n	800e6fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800e6ba:	2301      	movs	r3, #1
 800e6bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800e6be:	e01c      	b.n	800e6fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	2b02      	cmp	r3, #2
 800e6c4:	d903      	bls.n	800e6ce <DMA_CheckFifoParam+0xb6>
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	2b03      	cmp	r3, #3
 800e6ca:	d003      	beq.n	800e6d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800e6cc:	e018      	b.n	800e700 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	73fb      	strb	r3, [r7, #15]
      break;
 800e6d2:	e015      	b.n	800e700 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d00e      	beq.n	800e6fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	73fb      	strb	r3, [r7, #15]
      break;
 800e6e4:	e00b      	b.n	800e6fe <DMA_CheckFifoParam+0xe6>
      break;
 800e6e6:	bf00      	nop
 800e6e8:	e00a      	b.n	800e700 <DMA_CheckFifoParam+0xe8>
      break;
 800e6ea:	bf00      	nop
 800e6ec:	e008      	b.n	800e700 <DMA_CheckFifoParam+0xe8>
      break;
 800e6ee:	bf00      	nop
 800e6f0:	e006      	b.n	800e700 <DMA_CheckFifoParam+0xe8>
      break;
 800e6f2:	bf00      	nop
 800e6f4:	e004      	b.n	800e700 <DMA_CheckFifoParam+0xe8>
      break;
 800e6f6:	bf00      	nop
 800e6f8:	e002      	b.n	800e700 <DMA_CheckFifoParam+0xe8>
      break;   
 800e6fa:	bf00      	nop
 800e6fc:	e000      	b.n	800e700 <DMA_CheckFifoParam+0xe8>
      break;
 800e6fe:	bf00      	nop
    }
  } 
  
  return status; 
 800e700:	7bfb      	ldrb	r3, [r7, #15]
}
 800e702:	4618      	mov	r0, r3
 800e704:	3714      	adds	r7, #20
 800e706:	46bd      	mov	sp, r7
 800e708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70c:	4770      	bx	lr
 800e70e:	bf00      	nop

0800e710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e710:	b480      	push	{r7}
 800e712:	b089      	sub	sp, #36	; 0x24
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
 800e718:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800e71a:	2300      	movs	r3, #0
 800e71c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800e71e:	2300      	movs	r3, #0
 800e720:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800e722:	2300      	movs	r3, #0
 800e724:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e726:	2300      	movs	r3, #0
 800e728:	61fb      	str	r3, [r7, #28]
 800e72a:	e16b      	b.n	800ea04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800e72c:	2201      	movs	r2, #1
 800e72e:	69fb      	ldr	r3, [r7, #28]
 800e730:	fa02 f303 	lsl.w	r3, r2, r3
 800e734:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	697a      	ldr	r2, [r7, #20]
 800e73c:	4013      	ands	r3, r2
 800e73e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800e740:	693a      	ldr	r2, [r7, #16]
 800e742:	697b      	ldr	r3, [r7, #20]
 800e744:	429a      	cmp	r2, r3
 800e746:	f040 815a 	bne.w	800e9fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	685b      	ldr	r3, [r3, #4]
 800e74e:	f003 0303 	and.w	r3, r3, #3
 800e752:	2b01      	cmp	r3, #1
 800e754:	d005      	beq.n	800e762 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	685b      	ldr	r3, [r3, #4]
 800e75a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e75e:	2b02      	cmp	r3, #2
 800e760:	d130      	bne.n	800e7c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	689b      	ldr	r3, [r3, #8]
 800e766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800e768:	69fb      	ldr	r3, [r7, #28]
 800e76a:	005b      	lsls	r3, r3, #1
 800e76c:	2203      	movs	r2, #3
 800e76e:	fa02 f303 	lsl.w	r3, r2, r3
 800e772:	43db      	mvns	r3, r3
 800e774:	69ba      	ldr	r2, [r7, #24]
 800e776:	4013      	ands	r3, r2
 800e778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	68da      	ldr	r2, [r3, #12]
 800e77e:	69fb      	ldr	r3, [r7, #28]
 800e780:	005b      	lsls	r3, r3, #1
 800e782:	fa02 f303 	lsl.w	r3, r2, r3
 800e786:	69ba      	ldr	r2, [r7, #24]
 800e788:	4313      	orrs	r3, r2
 800e78a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	69ba      	ldr	r2, [r7, #24]
 800e790:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	685b      	ldr	r3, [r3, #4]
 800e796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800e798:	2201      	movs	r2, #1
 800e79a:	69fb      	ldr	r3, [r7, #28]
 800e79c:	fa02 f303 	lsl.w	r3, r2, r3
 800e7a0:	43db      	mvns	r3, r3
 800e7a2:	69ba      	ldr	r2, [r7, #24]
 800e7a4:	4013      	ands	r3, r2
 800e7a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	685b      	ldr	r3, [r3, #4]
 800e7ac:	091b      	lsrs	r3, r3, #4
 800e7ae:	f003 0201 	and.w	r2, r3, #1
 800e7b2:	69fb      	ldr	r3, [r7, #28]
 800e7b4:	fa02 f303 	lsl.w	r3, r2, r3
 800e7b8:	69ba      	ldr	r2, [r7, #24]
 800e7ba:	4313      	orrs	r3, r2
 800e7bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	69ba      	ldr	r2, [r7, #24]
 800e7c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	685b      	ldr	r3, [r3, #4]
 800e7c8:	f003 0303 	and.w	r3, r3, #3
 800e7cc:	2b03      	cmp	r3, #3
 800e7ce:	d017      	beq.n	800e800 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	68db      	ldr	r3, [r3, #12]
 800e7d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800e7d6:	69fb      	ldr	r3, [r7, #28]
 800e7d8:	005b      	lsls	r3, r3, #1
 800e7da:	2203      	movs	r2, #3
 800e7dc:	fa02 f303 	lsl.w	r3, r2, r3
 800e7e0:	43db      	mvns	r3, r3
 800e7e2:	69ba      	ldr	r2, [r7, #24]
 800e7e4:	4013      	ands	r3, r2
 800e7e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	689a      	ldr	r2, [r3, #8]
 800e7ec:	69fb      	ldr	r3, [r7, #28]
 800e7ee:	005b      	lsls	r3, r3, #1
 800e7f0:	fa02 f303 	lsl.w	r3, r2, r3
 800e7f4:	69ba      	ldr	r2, [r7, #24]
 800e7f6:	4313      	orrs	r3, r2
 800e7f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	69ba      	ldr	r2, [r7, #24]
 800e7fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	f003 0303 	and.w	r3, r3, #3
 800e808:	2b02      	cmp	r3, #2
 800e80a:	d123      	bne.n	800e854 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e80c:	69fb      	ldr	r3, [r7, #28]
 800e80e:	08da      	lsrs	r2, r3, #3
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	3208      	adds	r2, #8
 800e814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e818:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800e81a:	69fb      	ldr	r3, [r7, #28]
 800e81c:	f003 0307 	and.w	r3, r3, #7
 800e820:	009b      	lsls	r3, r3, #2
 800e822:	220f      	movs	r2, #15
 800e824:	fa02 f303 	lsl.w	r3, r2, r3
 800e828:	43db      	mvns	r3, r3
 800e82a:	69ba      	ldr	r2, [r7, #24]
 800e82c:	4013      	ands	r3, r2
 800e82e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	691a      	ldr	r2, [r3, #16]
 800e834:	69fb      	ldr	r3, [r7, #28]
 800e836:	f003 0307 	and.w	r3, r3, #7
 800e83a:	009b      	lsls	r3, r3, #2
 800e83c:	fa02 f303 	lsl.w	r3, r2, r3
 800e840:	69ba      	ldr	r2, [r7, #24]
 800e842:	4313      	orrs	r3, r2
 800e844:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e846:	69fb      	ldr	r3, [r7, #28]
 800e848:	08da      	lsrs	r2, r3, #3
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	3208      	adds	r2, #8
 800e84e:	69b9      	ldr	r1, [r7, #24]
 800e850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800e85a:	69fb      	ldr	r3, [r7, #28]
 800e85c:	005b      	lsls	r3, r3, #1
 800e85e:	2203      	movs	r2, #3
 800e860:	fa02 f303 	lsl.w	r3, r2, r3
 800e864:	43db      	mvns	r3, r3
 800e866:	69ba      	ldr	r2, [r7, #24]
 800e868:	4013      	ands	r3, r2
 800e86a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	685b      	ldr	r3, [r3, #4]
 800e870:	f003 0203 	and.w	r2, r3, #3
 800e874:	69fb      	ldr	r3, [r7, #28]
 800e876:	005b      	lsls	r3, r3, #1
 800e878:	fa02 f303 	lsl.w	r3, r2, r3
 800e87c:	69ba      	ldr	r2, [r7, #24]
 800e87e:	4313      	orrs	r3, r2
 800e880:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	69ba      	ldr	r2, [r7, #24]
 800e886:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	685b      	ldr	r3, [r3, #4]
 800e88c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e890:	2b00      	cmp	r3, #0
 800e892:	f000 80b4 	beq.w	800e9fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e896:	2300      	movs	r3, #0
 800e898:	60fb      	str	r3, [r7, #12]
 800e89a:	4b60      	ldr	r3, [pc, #384]	; (800ea1c <HAL_GPIO_Init+0x30c>)
 800e89c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e89e:	4a5f      	ldr	r2, [pc, #380]	; (800ea1c <HAL_GPIO_Init+0x30c>)
 800e8a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e8a4:	6453      	str	r3, [r2, #68]	; 0x44
 800e8a6:	4b5d      	ldr	r3, [pc, #372]	; (800ea1c <HAL_GPIO_Init+0x30c>)
 800e8a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e8ae:	60fb      	str	r3, [r7, #12]
 800e8b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e8b2:	4a5b      	ldr	r2, [pc, #364]	; (800ea20 <HAL_GPIO_Init+0x310>)
 800e8b4:	69fb      	ldr	r3, [r7, #28]
 800e8b6:	089b      	lsrs	r3, r3, #2
 800e8b8:	3302      	adds	r3, #2
 800e8ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800e8c0:	69fb      	ldr	r3, [r7, #28]
 800e8c2:	f003 0303 	and.w	r3, r3, #3
 800e8c6:	009b      	lsls	r3, r3, #2
 800e8c8:	220f      	movs	r2, #15
 800e8ca:	fa02 f303 	lsl.w	r3, r2, r3
 800e8ce:	43db      	mvns	r3, r3
 800e8d0:	69ba      	ldr	r2, [r7, #24]
 800e8d2:	4013      	ands	r3, r2
 800e8d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	4a52      	ldr	r2, [pc, #328]	; (800ea24 <HAL_GPIO_Init+0x314>)
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d02b      	beq.n	800e936 <HAL_GPIO_Init+0x226>
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	4a51      	ldr	r2, [pc, #324]	; (800ea28 <HAL_GPIO_Init+0x318>)
 800e8e2:	4293      	cmp	r3, r2
 800e8e4:	d025      	beq.n	800e932 <HAL_GPIO_Init+0x222>
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	4a50      	ldr	r2, [pc, #320]	; (800ea2c <HAL_GPIO_Init+0x31c>)
 800e8ea:	4293      	cmp	r3, r2
 800e8ec:	d01f      	beq.n	800e92e <HAL_GPIO_Init+0x21e>
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	4a4f      	ldr	r2, [pc, #316]	; (800ea30 <HAL_GPIO_Init+0x320>)
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d019      	beq.n	800e92a <HAL_GPIO_Init+0x21a>
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	4a4e      	ldr	r2, [pc, #312]	; (800ea34 <HAL_GPIO_Init+0x324>)
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	d013      	beq.n	800e926 <HAL_GPIO_Init+0x216>
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	4a4d      	ldr	r2, [pc, #308]	; (800ea38 <HAL_GPIO_Init+0x328>)
 800e902:	4293      	cmp	r3, r2
 800e904:	d00d      	beq.n	800e922 <HAL_GPIO_Init+0x212>
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	4a4c      	ldr	r2, [pc, #304]	; (800ea3c <HAL_GPIO_Init+0x32c>)
 800e90a:	4293      	cmp	r3, r2
 800e90c:	d007      	beq.n	800e91e <HAL_GPIO_Init+0x20e>
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	4a4b      	ldr	r2, [pc, #300]	; (800ea40 <HAL_GPIO_Init+0x330>)
 800e912:	4293      	cmp	r3, r2
 800e914:	d101      	bne.n	800e91a <HAL_GPIO_Init+0x20a>
 800e916:	2307      	movs	r3, #7
 800e918:	e00e      	b.n	800e938 <HAL_GPIO_Init+0x228>
 800e91a:	2308      	movs	r3, #8
 800e91c:	e00c      	b.n	800e938 <HAL_GPIO_Init+0x228>
 800e91e:	2306      	movs	r3, #6
 800e920:	e00a      	b.n	800e938 <HAL_GPIO_Init+0x228>
 800e922:	2305      	movs	r3, #5
 800e924:	e008      	b.n	800e938 <HAL_GPIO_Init+0x228>
 800e926:	2304      	movs	r3, #4
 800e928:	e006      	b.n	800e938 <HAL_GPIO_Init+0x228>
 800e92a:	2303      	movs	r3, #3
 800e92c:	e004      	b.n	800e938 <HAL_GPIO_Init+0x228>
 800e92e:	2302      	movs	r3, #2
 800e930:	e002      	b.n	800e938 <HAL_GPIO_Init+0x228>
 800e932:	2301      	movs	r3, #1
 800e934:	e000      	b.n	800e938 <HAL_GPIO_Init+0x228>
 800e936:	2300      	movs	r3, #0
 800e938:	69fa      	ldr	r2, [r7, #28]
 800e93a:	f002 0203 	and.w	r2, r2, #3
 800e93e:	0092      	lsls	r2, r2, #2
 800e940:	4093      	lsls	r3, r2
 800e942:	69ba      	ldr	r2, [r7, #24]
 800e944:	4313      	orrs	r3, r2
 800e946:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e948:	4935      	ldr	r1, [pc, #212]	; (800ea20 <HAL_GPIO_Init+0x310>)
 800e94a:	69fb      	ldr	r3, [r7, #28]
 800e94c:	089b      	lsrs	r3, r3, #2
 800e94e:	3302      	adds	r3, #2
 800e950:	69ba      	ldr	r2, [r7, #24]
 800e952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800e956:	4b3b      	ldr	r3, [pc, #236]	; (800ea44 <HAL_GPIO_Init+0x334>)
 800e958:	689b      	ldr	r3, [r3, #8]
 800e95a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	43db      	mvns	r3, r3
 800e960:	69ba      	ldr	r2, [r7, #24]
 800e962:	4013      	ands	r3, r2
 800e964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d003      	beq.n	800e97a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800e972:	69ba      	ldr	r2, [r7, #24]
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	4313      	orrs	r3, r2
 800e978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800e97a:	4a32      	ldr	r2, [pc, #200]	; (800ea44 <HAL_GPIO_Init+0x334>)
 800e97c:	69bb      	ldr	r3, [r7, #24]
 800e97e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800e980:	4b30      	ldr	r3, [pc, #192]	; (800ea44 <HAL_GPIO_Init+0x334>)
 800e982:	68db      	ldr	r3, [r3, #12]
 800e984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	43db      	mvns	r3, r3
 800e98a:	69ba      	ldr	r2, [r7, #24]
 800e98c:	4013      	ands	r3, r2
 800e98e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	685b      	ldr	r3, [r3, #4]
 800e994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d003      	beq.n	800e9a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800e99c:	69ba      	ldr	r2, [r7, #24]
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	4313      	orrs	r3, r2
 800e9a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800e9a4:	4a27      	ldr	r2, [pc, #156]	; (800ea44 <HAL_GPIO_Init+0x334>)
 800e9a6:	69bb      	ldr	r3, [r7, #24]
 800e9a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800e9aa:	4b26      	ldr	r3, [pc, #152]	; (800ea44 <HAL_GPIO_Init+0x334>)
 800e9ac:	685b      	ldr	r3, [r3, #4]
 800e9ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	43db      	mvns	r3, r3
 800e9b4:	69ba      	ldr	r2, [r7, #24]
 800e9b6:	4013      	ands	r3, r2
 800e9b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d003      	beq.n	800e9ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800e9c6:	69ba      	ldr	r2, [r7, #24]
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	4313      	orrs	r3, r2
 800e9cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800e9ce:	4a1d      	ldr	r2, [pc, #116]	; (800ea44 <HAL_GPIO_Init+0x334>)
 800e9d0:	69bb      	ldr	r3, [r7, #24]
 800e9d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800e9d4:	4b1b      	ldr	r3, [pc, #108]	; (800ea44 <HAL_GPIO_Init+0x334>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	43db      	mvns	r3, r3
 800e9de:	69ba      	ldr	r2, [r7, #24]
 800e9e0:	4013      	ands	r3, r2
 800e9e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	685b      	ldr	r3, [r3, #4]
 800e9e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d003      	beq.n	800e9f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800e9f0:	69ba      	ldr	r2, [r7, #24]
 800e9f2:	693b      	ldr	r3, [r7, #16]
 800e9f4:	4313      	orrs	r3, r2
 800e9f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800e9f8:	4a12      	ldr	r2, [pc, #72]	; (800ea44 <HAL_GPIO_Init+0x334>)
 800e9fa:	69bb      	ldr	r3, [r7, #24]
 800e9fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e9fe:	69fb      	ldr	r3, [r7, #28]
 800ea00:	3301      	adds	r3, #1
 800ea02:	61fb      	str	r3, [r7, #28]
 800ea04:	69fb      	ldr	r3, [r7, #28]
 800ea06:	2b0f      	cmp	r3, #15
 800ea08:	f67f ae90 	bls.w	800e72c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ea0c:	bf00      	nop
 800ea0e:	bf00      	nop
 800ea10:	3724      	adds	r7, #36	; 0x24
 800ea12:	46bd      	mov	sp, r7
 800ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea18:	4770      	bx	lr
 800ea1a:	bf00      	nop
 800ea1c:	40023800 	.word	0x40023800
 800ea20:	40013800 	.word	0x40013800
 800ea24:	40020000 	.word	0x40020000
 800ea28:	40020400 	.word	0x40020400
 800ea2c:	40020800 	.word	0x40020800
 800ea30:	40020c00 	.word	0x40020c00
 800ea34:	40021000 	.word	0x40021000
 800ea38:	40021400 	.word	0x40021400
 800ea3c:	40021800 	.word	0x40021800
 800ea40:	40021c00 	.word	0x40021c00
 800ea44:	40013c00 	.word	0x40013c00

0800ea48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ea48:	b480      	push	{r7}
 800ea4a:	b085      	sub	sp, #20
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
 800ea50:	460b      	mov	r3, r1
 800ea52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	691a      	ldr	r2, [r3, #16]
 800ea58:	887b      	ldrh	r3, [r7, #2]
 800ea5a:	4013      	ands	r3, r2
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d002      	beq.n	800ea66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ea60:	2301      	movs	r3, #1
 800ea62:	73fb      	strb	r3, [r7, #15]
 800ea64:	e001      	b.n	800ea6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ea66:	2300      	movs	r3, #0
 800ea68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ea6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3714      	adds	r7, #20
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr

0800ea78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ea78:	b480      	push	{r7}
 800ea7a:	b083      	sub	sp, #12
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	460b      	mov	r3, r1
 800ea82:	807b      	strh	r3, [r7, #2]
 800ea84:	4613      	mov	r3, r2
 800ea86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ea88:	787b      	ldrb	r3, [r7, #1]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d003      	beq.n	800ea96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ea8e:	887a      	ldrh	r2, [r7, #2]
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ea94:	e003      	b.n	800ea9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ea96:	887b      	ldrh	r3, [r7, #2]
 800ea98:	041a      	lsls	r2, r3, #16
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	619a      	str	r2, [r3, #24]
}
 800ea9e:	bf00      	nop
 800eaa0:	370c      	adds	r7, #12
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr
	...

0800eaac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b086      	sub	sp, #24
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d101      	bne.n	800eabe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800eaba:	2301      	movs	r3, #1
 800eabc:	e267      	b.n	800ef8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	f003 0301 	and.w	r3, r3, #1
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d075      	beq.n	800ebb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800eaca:	4b88      	ldr	r3, [pc, #544]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800eacc:	689b      	ldr	r3, [r3, #8]
 800eace:	f003 030c 	and.w	r3, r3, #12
 800ead2:	2b04      	cmp	r3, #4
 800ead4:	d00c      	beq.n	800eaf0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ead6:	4b85      	ldr	r3, [pc, #532]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800ead8:	689b      	ldr	r3, [r3, #8]
 800eada:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800eade:	2b08      	cmp	r3, #8
 800eae0:	d112      	bne.n	800eb08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800eae2:	4b82      	ldr	r3, [pc, #520]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eaea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eaee:	d10b      	bne.n	800eb08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800eaf0:	4b7e      	ldr	r3, [pc, #504]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d05b      	beq.n	800ebb4 <HAL_RCC_OscConfig+0x108>
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	685b      	ldr	r3, [r3, #4]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d157      	bne.n	800ebb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800eb04:	2301      	movs	r3, #1
 800eb06:	e242      	b.n	800ef8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb10:	d106      	bne.n	800eb20 <HAL_RCC_OscConfig+0x74>
 800eb12:	4b76      	ldr	r3, [pc, #472]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	4a75      	ldr	r2, [pc, #468]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800eb18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eb1c:	6013      	str	r3, [r2, #0]
 800eb1e:	e01d      	b.n	800eb5c <HAL_RCC_OscConfig+0xb0>
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	685b      	ldr	r3, [r3, #4]
 800eb24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800eb28:	d10c      	bne.n	800eb44 <HAL_RCC_OscConfig+0x98>
 800eb2a:	4b70      	ldr	r3, [pc, #448]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	4a6f      	ldr	r2, [pc, #444]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800eb30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800eb34:	6013      	str	r3, [r2, #0]
 800eb36:	4b6d      	ldr	r3, [pc, #436]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	4a6c      	ldr	r2, [pc, #432]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800eb3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eb40:	6013      	str	r3, [r2, #0]
 800eb42:	e00b      	b.n	800eb5c <HAL_RCC_OscConfig+0xb0>
 800eb44:	4b69      	ldr	r3, [pc, #420]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	4a68      	ldr	r2, [pc, #416]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800eb4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eb4e:	6013      	str	r3, [r2, #0]
 800eb50:	4b66      	ldr	r3, [pc, #408]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	4a65      	ldr	r2, [pc, #404]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800eb56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800eb5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	685b      	ldr	r3, [r3, #4]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d013      	beq.n	800eb8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eb64:	f7ff f890 	bl	800dc88 <HAL_GetTick>
 800eb68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eb6a:	e008      	b.n	800eb7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800eb6c:	f7ff f88c 	bl	800dc88 <HAL_GetTick>
 800eb70:	4602      	mov	r2, r0
 800eb72:	693b      	ldr	r3, [r7, #16]
 800eb74:	1ad3      	subs	r3, r2, r3
 800eb76:	2b64      	cmp	r3, #100	; 0x64
 800eb78:	d901      	bls.n	800eb7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800eb7a:	2303      	movs	r3, #3
 800eb7c:	e207      	b.n	800ef8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eb7e:	4b5b      	ldr	r3, [pc, #364]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d0f0      	beq.n	800eb6c <HAL_RCC_OscConfig+0xc0>
 800eb8a:	e014      	b.n	800ebb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eb8c:	f7ff f87c 	bl	800dc88 <HAL_GetTick>
 800eb90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800eb92:	e008      	b.n	800eba6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800eb94:	f7ff f878 	bl	800dc88 <HAL_GetTick>
 800eb98:	4602      	mov	r2, r0
 800eb9a:	693b      	ldr	r3, [r7, #16]
 800eb9c:	1ad3      	subs	r3, r2, r3
 800eb9e:	2b64      	cmp	r3, #100	; 0x64
 800eba0:	d901      	bls.n	800eba6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800eba2:	2303      	movs	r3, #3
 800eba4:	e1f3      	b.n	800ef8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800eba6:	4b51      	ldr	r3, [pc, #324]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d1f0      	bne.n	800eb94 <HAL_RCC_OscConfig+0xe8>
 800ebb2:	e000      	b.n	800ebb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ebb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	f003 0302 	and.w	r3, r3, #2
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d063      	beq.n	800ec8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ebc2:	4b4a      	ldr	r3, [pc, #296]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800ebc4:	689b      	ldr	r3, [r3, #8]
 800ebc6:	f003 030c 	and.w	r3, r3, #12
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d00b      	beq.n	800ebe6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ebce:	4b47      	ldr	r3, [pc, #284]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800ebd0:	689b      	ldr	r3, [r3, #8]
 800ebd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ebd6:	2b08      	cmp	r3, #8
 800ebd8:	d11c      	bne.n	800ec14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ebda:	4b44      	ldr	r3, [pc, #272]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800ebdc:	685b      	ldr	r3, [r3, #4]
 800ebde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d116      	bne.n	800ec14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ebe6:	4b41      	ldr	r3, [pc, #260]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f003 0302 	and.w	r3, r3, #2
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d005      	beq.n	800ebfe <HAL_RCC_OscConfig+0x152>
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	68db      	ldr	r3, [r3, #12]
 800ebf6:	2b01      	cmp	r3, #1
 800ebf8:	d001      	beq.n	800ebfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	e1c7      	b.n	800ef8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ebfe:	4b3b      	ldr	r3, [pc, #236]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	691b      	ldr	r3, [r3, #16]
 800ec0a:	00db      	lsls	r3, r3, #3
 800ec0c:	4937      	ldr	r1, [pc, #220]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800ec0e:	4313      	orrs	r3, r2
 800ec10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ec12:	e03a      	b.n	800ec8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	68db      	ldr	r3, [r3, #12]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d020      	beq.n	800ec5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ec1c:	4b34      	ldr	r3, [pc, #208]	; (800ecf0 <HAL_RCC_OscConfig+0x244>)
 800ec1e:	2201      	movs	r2, #1
 800ec20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec22:	f7ff f831 	bl	800dc88 <HAL_GetTick>
 800ec26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ec28:	e008      	b.n	800ec3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ec2a:	f7ff f82d 	bl	800dc88 <HAL_GetTick>
 800ec2e:	4602      	mov	r2, r0
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	1ad3      	subs	r3, r2, r3
 800ec34:	2b02      	cmp	r3, #2
 800ec36:	d901      	bls.n	800ec3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ec38:	2303      	movs	r3, #3
 800ec3a:	e1a8      	b.n	800ef8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ec3c:	4b2b      	ldr	r3, [pc, #172]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	f003 0302 	and.w	r3, r3, #2
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d0f0      	beq.n	800ec2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ec48:	4b28      	ldr	r3, [pc, #160]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	691b      	ldr	r3, [r3, #16]
 800ec54:	00db      	lsls	r3, r3, #3
 800ec56:	4925      	ldr	r1, [pc, #148]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800ec58:	4313      	orrs	r3, r2
 800ec5a:	600b      	str	r3, [r1, #0]
 800ec5c:	e015      	b.n	800ec8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ec5e:	4b24      	ldr	r3, [pc, #144]	; (800ecf0 <HAL_RCC_OscConfig+0x244>)
 800ec60:	2200      	movs	r2, #0
 800ec62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec64:	f7ff f810 	bl	800dc88 <HAL_GetTick>
 800ec68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ec6a:	e008      	b.n	800ec7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ec6c:	f7ff f80c 	bl	800dc88 <HAL_GetTick>
 800ec70:	4602      	mov	r2, r0
 800ec72:	693b      	ldr	r3, [r7, #16]
 800ec74:	1ad3      	subs	r3, r2, r3
 800ec76:	2b02      	cmp	r3, #2
 800ec78:	d901      	bls.n	800ec7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ec7a:	2303      	movs	r3, #3
 800ec7c:	e187      	b.n	800ef8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ec7e:	4b1b      	ldr	r3, [pc, #108]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	f003 0302 	and.w	r3, r3, #2
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d1f0      	bne.n	800ec6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	f003 0308 	and.w	r3, r3, #8
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d036      	beq.n	800ed04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	695b      	ldr	r3, [r3, #20]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d016      	beq.n	800eccc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ec9e:	4b15      	ldr	r3, [pc, #84]	; (800ecf4 <HAL_RCC_OscConfig+0x248>)
 800eca0:	2201      	movs	r2, #1
 800eca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eca4:	f7fe fff0 	bl	800dc88 <HAL_GetTick>
 800eca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ecaa:	e008      	b.n	800ecbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ecac:	f7fe ffec 	bl	800dc88 <HAL_GetTick>
 800ecb0:	4602      	mov	r2, r0
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	1ad3      	subs	r3, r2, r3
 800ecb6:	2b02      	cmp	r3, #2
 800ecb8:	d901      	bls.n	800ecbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ecba:	2303      	movs	r3, #3
 800ecbc:	e167      	b.n	800ef8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ecbe:	4b0b      	ldr	r3, [pc, #44]	; (800ecec <HAL_RCC_OscConfig+0x240>)
 800ecc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecc2:	f003 0302 	and.w	r3, r3, #2
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d0f0      	beq.n	800ecac <HAL_RCC_OscConfig+0x200>
 800ecca:	e01b      	b.n	800ed04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800eccc:	4b09      	ldr	r3, [pc, #36]	; (800ecf4 <HAL_RCC_OscConfig+0x248>)
 800ecce:	2200      	movs	r2, #0
 800ecd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ecd2:	f7fe ffd9 	bl	800dc88 <HAL_GetTick>
 800ecd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ecd8:	e00e      	b.n	800ecf8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ecda:	f7fe ffd5 	bl	800dc88 <HAL_GetTick>
 800ecde:	4602      	mov	r2, r0
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	1ad3      	subs	r3, r2, r3
 800ece4:	2b02      	cmp	r3, #2
 800ece6:	d907      	bls.n	800ecf8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ece8:	2303      	movs	r3, #3
 800ecea:	e150      	b.n	800ef8e <HAL_RCC_OscConfig+0x4e2>
 800ecec:	40023800 	.word	0x40023800
 800ecf0:	42470000 	.word	0x42470000
 800ecf4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ecf8:	4b88      	ldr	r3, [pc, #544]	; (800ef1c <HAL_RCC_OscConfig+0x470>)
 800ecfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecfc:	f003 0302 	and.w	r3, r3, #2
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d1ea      	bne.n	800ecda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	f003 0304 	and.w	r3, r3, #4
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	f000 8097 	beq.w	800ee40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ed12:	2300      	movs	r3, #0
 800ed14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ed16:	4b81      	ldr	r3, [pc, #516]	; (800ef1c <HAL_RCC_OscConfig+0x470>)
 800ed18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d10f      	bne.n	800ed42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ed22:	2300      	movs	r3, #0
 800ed24:	60bb      	str	r3, [r7, #8]
 800ed26:	4b7d      	ldr	r3, [pc, #500]	; (800ef1c <HAL_RCC_OscConfig+0x470>)
 800ed28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed2a:	4a7c      	ldr	r2, [pc, #496]	; (800ef1c <HAL_RCC_OscConfig+0x470>)
 800ed2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ed30:	6413      	str	r3, [r2, #64]	; 0x40
 800ed32:	4b7a      	ldr	r3, [pc, #488]	; (800ef1c <HAL_RCC_OscConfig+0x470>)
 800ed34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ed3a:	60bb      	str	r3, [r7, #8]
 800ed3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ed3e:	2301      	movs	r3, #1
 800ed40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ed42:	4b77      	ldr	r3, [pc, #476]	; (800ef20 <HAL_RCC_OscConfig+0x474>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d118      	bne.n	800ed80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ed4e:	4b74      	ldr	r3, [pc, #464]	; (800ef20 <HAL_RCC_OscConfig+0x474>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	4a73      	ldr	r2, [pc, #460]	; (800ef20 <HAL_RCC_OscConfig+0x474>)
 800ed54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ed58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ed5a:	f7fe ff95 	bl	800dc88 <HAL_GetTick>
 800ed5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ed60:	e008      	b.n	800ed74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ed62:	f7fe ff91 	bl	800dc88 <HAL_GetTick>
 800ed66:	4602      	mov	r2, r0
 800ed68:	693b      	ldr	r3, [r7, #16]
 800ed6a:	1ad3      	subs	r3, r2, r3
 800ed6c:	2b02      	cmp	r3, #2
 800ed6e:	d901      	bls.n	800ed74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ed70:	2303      	movs	r3, #3
 800ed72:	e10c      	b.n	800ef8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ed74:	4b6a      	ldr	r3, [pc, #424]	; (800ef20 <HAL_RCC_OscConfig+0x474>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d0f0      	beq.n	800ed62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	689b      	ldr	r3, [r3, #8]
 800ed84:	2b01      	cmp	r3, #1
 800ed86:	d106      	bne.n	800ed96 <HAL_RCC_OscConfig+0x2ea>
 800ed88:	4b64      	ldr	r3, [pc, #400]	; (800ef1c <HAL_RCC_OscConfig+0x470>)
 800ed8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed8c:	4a63      	ldr	r2, [pc, #396]	; (800ef1c <HAL_RCC_OscConfig+0x470>)
 800ed8e:	f043 0301 	orr.w	r3, r3, #1
 800ed92:	6713      	str	r3, [r2, #112]	; 0x70
 800ed94:	e01c      	b.n	800edd0 <HAL_RCC_OscConfig+0x324>
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	689b      	ldr	r3, [r3, #8]
 800ed9a:	2b05      	cmp	r3, #5
 800ed9c:	d10c      	bne.n	800edb8 <HAL_RCC_OscConfig+0x30c>
 800ed9e:	4b5f      	ldr	r3, [pc, #380]	; (800ef1c <HAL_RCC_OscConfig+0x470>)
 800eda0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eda2:	4a5e      	ldr	r2, [pc, #376]	; (800ef1c <HAL_RCC_OscConfig+0x470>)
 800eda4:	f043 0304 	orr.w	r3, r3, #4
 800eda8:	6713      	str	r3, [r2, #112]	; 0x70
 800edaa:	4b5c      	ldr	r3, [pc, #368]	; (800ef1c <HAL_RCC_OscConfig+0x470>)
 800edac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edae:	4a5b      	ldr	r2, [pc, #364]	; (800ef1c <HAL_RCC_OscConfig+0x470>)
 800edb0:	f043 0301 	orr.w	r3, r3, #1
 800edb4:	6713      	str	r3, [r2, #112]	; 0x70
 800edb6:	e00b      	b.n	800edd0 <HAL_RCC_OscConfig+0x324>
 800edb8:	4b58      	ldr	r3, [pc, #352]	; (800ef1c <HAL_RCC_OscConfig+0x470>)
 800edba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edbc:	4a57      	ldr	r2, [pc, #348]	; (800ef1c <HAL_RCC_OscConfig+0x470>)
 800edbe:	f023 0301 	bic.w	r3, r3, #1
 800edc2:	6713      	str	r3, [r2, #112]	; 0x70
 800edc4:	4b55      	ldr	r3, [pc, #340]	; (800ef1c <HAL_RCC_OscConfig+0x470>)
 800edc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edc8:	4a54      	ldr	r2, [pc, #336]	; (800ef1c <HAL_RCC_OscConfig+0x470>)
 800edca:	f023 0304 	bic.w	r3, r3, #4
 800edce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	689b      	ldr	r3, [r3, #8]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d015      	beq.n	800ee04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800edd8:	f7fe ff56 	bl	800dc88 <HAL_GetTick>
 800eddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800edde:	e00a      	b.n	800edf6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ede0:	f7fe ff52 	bl	800dc88 <HAL_GetTick>
 800ede4:	4602      	mov	r2, r0
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	1ad3      	subs	r3, r2, r3
 800edea:	f241 3288 	movw	r2, #5000	; 0x1388
 800edee:	4293      	cmp	r3, r2
 800edf0:	d901      	bls.n	800edf6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800edf2:	2303      	movs	r3, #3
 800edf4:	e0cb      	b.n	800ef8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800edf6:	4b49      	ldr	r3, [pc, #292]	; (800ef1c <HAL_RCC_OscConfig+0x470>)
 800edf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edfa:	f003 0302 	and.w	r3, r3, #2
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d0ee      	beq.n	800ede0 <HAL_RCC_OscConfig+0x334>
 800ee02:	e014      	b.n	800ee2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ee04:	f7fe ff40 	bl	800dc88 <HAL_GetTick>
 800ee08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ee0a:	e00a      	b.n	800ee22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ee0c:	f7fe ff3c 	bl	800dc88 <HAL_GetTick>
 800ee10:	4602      	mov	r2, r0
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	1ad3      	subs	r3, r2, r3
 800ee16:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee1a:	4293      	cmp	r3, r2
 800ee1c:	d901      	bls.n	800ee22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ee1e:	2303      	movs	r3, #3
 800ee20:	e0b5      	b.n	800ef8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ee22:	4b3e      	ldr	r3, [pc, #248]	; (800ef1c <HAL_RCC_OscConfig+0x470>)
 800ee24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee26:	f003 0302 	and.w	r3, r3, #2
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d1ee      	bne.n	800ee0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ee2e:	7dfb      	ldrb	r3, [r7, #23]
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d105      	bne.n	800ee40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ee34:	4b39      	ldr	r3, [pc, #228]	; (800ef1c <HAL_RCC_OscConfig+0x470>)
 800ee36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee38:	4a38      	ldr	r2, [pc, #224]	; (800ef1c <HAL_RCC_OscConfig+0x470>)
 800ee3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ee3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	699b      	ldr	r3, [r3, #24]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	f000 80a1 	beq.w	800ef8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ee4a:	4b34      	ldr	r3, [pc, #208]	; (800ef1c <HAL_RCC_OscConfig+0x470>)
 800ee4c:	689b      	ldr	r3, [r3, #8]
 800ee4e:	f003 030c 	and.w	r3, r3, #12
 800ee52:	2b08      	cmp	r3, #8
 800ee54:	d05c      	beq.n	800ef10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	699b      	ldr	r3, [r3, #24]
 800ee5a:	2b02      	cmp	r3, #2
 800ee5c:	d141      	bne.n	800eee2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ee5e:	4b31      	ldr	r3, [pc, #196]	; (800ef24 <HAL_RCC_OscConfig+0x478>)
 800ee60:	2200      	movs	r2, #0
 800ee62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee64:	f7fe ff10 	bl	800dc88 <HAL_GetTick>
 800ee68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ee6a:	e008      	b.n	800ee7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ee6c:	f7fe ff0c 	bl	800dc88 <HAL_GetTick>
 800ee70:	4602      	mov	r2, r0
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	1ad3      	subs	r3, r2, r3
 800ee76:	2b02      	cmp	r3, #2
 800ee78:	d901      	bls.n	800ee7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ee7a:	2303      	movs	r3, #3
 800ee7c:	e087      	b.n	800ef8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ee7e:	4b27      	ldr	r3, [pc, #156]	; (800ef1c <HAL_RCC_OscConfig+0x470>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d1f0      	bne.n	800ee6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	69da      	ldr	r2, [r3, #28]
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	6a1b      	ldr	r3, [r3, #32]
 800ee92:	431a      	orrs	r2, r3
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee98:	019b      	lsls	r3, r3, #6
 800ee9a:	431a      	orrs	r2, r3
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eea0:	085b      	lsrs	r3, r3, #1
 800eea2:	3b01      	subs	r3, #1
 800eea4:	041b      	lsls	r3, r3, #16
 800eea6:	431a      	orrs	r2, r3
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeac:	061b      	lsls	r3, r3, #24
 800eeae:	491b      	ldr	r1, [pc, #108]	; (800ef1c <HAL_RCC_OscConfig+0x470>)
 800eeb0:	4313      	orrs	r3, r2
 800eeb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800eeb4:	4b1b      	ldr	r3, [pc, #108]	; (800ef24 <HAL_RCC_OscConfig+0x478>)
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eeba:	f7fe fee5 	bl	800dc88 <HAL_GetTick>
 800eebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800eec0:	e008      	b.n	800eed4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800eec2:	f7fe fee1 	bl	800dc88 <HAL_GetTick>
 800eec6:	4602      	mov	r2, r0
 800eec8:	693b      	ldr	r3, [r7, #16]
 800eeca:	1ad3      	subs	r3, r2, r3
 800eecc:	2b02      	cmp	r3, #2
 800eece:	d901      	bls.n	800eed4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800eed0:	2303      	movs	r3, #3
 800eed2:	e05c      	b.n	800ef8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800eed4:	4b11      	ldr	r3, [pc, #68]	; (800ef1c <HAL_RCC_OscConfig+0x470>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d0f0      	beq.n	800eec2 <HAL_RCC_OscConfig+0x416>
 800eee0:	e054      	b.n	800ef8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800eee2:	4b10      	ldr	r3, [pc, #64]	; (800ef24 <HAL_RCC_OscConfig+0x478>)
 800eee4:	2200      	movs	r2, #0
 800eee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eee8:	f7fe fece 	bl	800dc88 <HAL_GetTick>
 800eeec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eeee:	e008      	b.n	800ef02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800eef0:	f7fe feca 	bl	800dc88 <HAL_GetTick>
 800eef4:	4602      	mov	r2, r0
 800eef6:	693b      	ldr	r3, [r7, #16]
 800eef8:	1ad3      	subs	r3, r2, r3
 800eefa:	2b02      	cmp	r3, #2
 800eefc:	d901      	bls.n	800ef02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800eefe:	2303      	movs	r3, #3
 800ef00:	e045      	b.n	800ef8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ef02:	4b06      	ldr	r3, [pc, #24]	; (800ef1c <HAL_RCC_OscConfig+0x470>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d1f0      	bne.n	800eef0 <HAL_RCC_OscConfig+0x444>
 800ef0e:	e03d      	b.n	800ef8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	699b      	ldr	r3, [r3, #24]
 800ef14:	2b01      	cmp	r3, #1
 800ef16:	d107      	bne.n	800ef28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ef18:	2301      	movs	r3, #1
 800ef1a:	e038      	b.n	800ef8e <HAL_RCC_OscConfig+0x4e2>
 800ef1c:	40023800 	.word	0x40023800
 800ef20:	40007000 	.word	0x40007000
 800ef24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ef28:	4b1b      	ldr	r3, [pc, #108]	; (800ef98 <HAL_RCC_OscConfig+0x4ec>)
 800ef2a:	685b      	ldr	r3, [r3, #4]
 800ef2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	699b      	ldr	r3, [r3, #24]
 800ef32:	2b01      	cmp	r3, #1
 800ef34:	d028      	beq.n	800ef88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ef40:	429a      	cmp	r2, r3
 800ef42:	d121      	bne.n	800ef88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d11a      	bne.n	800ef88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ef52:	68fa      	ldr	r2, [r7, #12]
 800ef54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ef58:	4013      	ands	r3, r2
 800ef5a:	687a      	ldr	r2, [r7, #4]
 800ef5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ef5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ef60:	4293      	cmp	r3, r2
 800ef62:	d111      	bne.n	800ef88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef6e:	085b      	lsrs	r3, r3, #1
 800ef70:	3b01      	subs	r3, #1
 800ef72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ef74:	429a      	cmp	r2, r3
 800ef76:	d107      	bne.n	800ef88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d001      	beq.n	800ef8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800ef88:	2301      	movs	r3, #1
 800ef8a:	e000      	b.n	800ef8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ef8c:	2300      	movs	r3, #0
}
 800ef8e:	4618      	mov	r0, r3
 800ef90:	3718      	adds	r7, #24
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}
 800ef96:	bf00      	nop
 800ef98:	40023800 	.word	0x40023800

0800ef9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b084      	sub	sp, #16
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d101      	bne.n	800efb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800efac:	2301      	movs	r3, #1
 800efae:	e0cc      	b.n	800f14a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800efb0:	4b68      	ldr	r3, [pc, #416]	; (800f154 <HAL_RCC_ClockConfig+0x1b8>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	f003 0307 	and.w	r3, r3, #7
 800efb8:	683a      	ldr	r2, [r7, #0]
 800efba:	429a      	cmp	r2, r3
 800efbc:	d90c      	bls.n	800efd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800efbe:	4b65      	ldr	r3, [pc, #404]	; (800f154 <HAL_RCC_ClockConfig+0x1b8>)
 800efc0:	683a      	ldr	r2, [r7, #0]
 800efc2:	b2d2      	uxtb	r2, r2
 800efc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800efc6:	4b63      	ldr	r3, [pc, #396]	; (800f154 <HAL_RCC_ClockConfig+0x1b8>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f003 0307 	and.w	r3, r3, #7
 800efce:	683a      	ldr	r2, [r7, #0]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d001      	beq.n	800efd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800efd4:	2301      	movs	r3, #1
 800efd6:	e0b8      	b.n	800f14a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	f003 0302 	and.w	r3, r3, #2
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d020      	beq.n	800f026 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	f003 0304 	and.w	r3, r3, #4
 800efec:	2b00      	cmp	r3, #0
 800efee:	d005      	beq.n	800effc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800eff0:	4b59      	ldr	r3, [pc, #356]	; (800f158 <HAL_RCC_ClockConfig+0x1bc>)
 800eff2:	689b      	ldr	r3, [r3, #8]
 800eff4:	4a58      	ldr	r2, [pc, #352]	; (800f158 <HAL_RCC_ClockConfig+0x1bc>)
 800eff6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800effa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	f003 0308 	and.w	r3, r3, #8
 800f004:	2b00      	cmp	r3, #0
 800f006:	d005      	beq.n	800f014 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f008:	4b53      	ldr	r3, [pc, #332]	; (800f158 <HAL_RCC_ClockConfig+0x1bc>)
 800f00a:	689b      	ldr	r3, [r3, #8]
 800f00c:	4a52      	ldr	r2, [pc, #328]	; (800f158 <HAL_RCC_ClockConfig+0x1bc>)
 800f00e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800f012:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f014:	4b50      	ldr	r3, [pc, #320]	; (800f158 <HAL_RCC_ClockConfig+0x1bc>)
 800f016:	689b      	ldr	r3, [r3, #8]
 800f018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	689b      	ldr	r3, [r3, #8]
 800f020:	494d      	ldr	r1, [pc, #308]	; (800f158 <HAL_RCC_ClockConfig+0x1bc>)
 800f022:	4313      	orrs	r3, r2
 800f024:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	f003 0301 	and.w	r3, r3, #1
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d044      	beq.n	800f0bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	685b      	ldr	r3, [r3, #4]
 800f036:	2b01      	cmp	r3, #1
 800f038:	d107      	bne.n	800f04a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f03a:	4b47      	ldr	r3, [pc, #284]	; (800f158 <HAL_RCC_ClockConfig+0x1bc>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f042:	2b00      	cmp	r3, #0
 800f044:	d119      	bne.n	800f07a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f046:	2301      	movs	r3, #1
 800f048:	e07f      	b.n	800f14a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	685b      	ldr	r3, [r3, #4]
 800f04e:	2b02      	cmp	r3, #2
 800f050:	d003      	beq.n	800f05a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f056:	2b03      	cmp	r3, #3
 800f058:	d107      	bne.n	800f06a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f05a:	4b3f      	ldr	r3, [pc, #252]	; (800f158 <HAL_RCC_ClockConfig+0x1bc>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f062:	2b00      	cmp	r3, #0
 800f064:	d109      	bne.n	800f07a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f066:	2301      	movs	r3, #1
 800f068:	e06f      	b.n	800f14a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f06a:	4b3b      	ldr	r3, [pc, #236]	; (800f158 <HAL_RCC_ClockConfig+0x1bc>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	f003 0302 	and.w	r3, r3, #2
 800f072:	2b00      	cmp	r3, #0
 800f074:	d101      	bne.n	800f07a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f076:	2301      	movs	r3, #1
 800f078:	e067      	b.n	800f14a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f07a:	4b37      	ldr	r3, [pc, #220]	; (800f158 <HAL_RCC_ClockConfig+0x1bc>)
 800f07c:	689b      	ldr	r3, [r3, #8]
 800f07e:	f023 0203 	bic.w	r2, r3, #3
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	685b      	ldr	r3, [r3, #4]
 800f086:	4934      	ldr	r1, [pc, #208]	; (800f158 <HAL_RCC_ClockConfig+0x1bc>)
 800f088:	4313      	orrs	r3, r2
 800f08a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f08c:	f7fe fdfc 	bl	800dc88 <HAL_GetTick>
 800f090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f092:	e00a      	b.n	800f0aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f094:	f7fe fdf8 	bl	800dc88 <HAL_GetTick>
 800f098:	4602      	mov	r2, r0
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	1ad3      	subs	r3, r2, r3
 800f09e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f0a2:	4293      	cmp	r3, r2
 800f0a4:	d901      	bls.n	800f0aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f0a6:	2303      	movs	r3, #3
 800f0a8:	e04f      	b.n	800f14a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f0aa:	4b2b      	ldr	r3, [pc, #172]	; (800f158 <HAL_RCC_ClockConfig+0x1bc>)
 800f0ac:	689b      	ldr	r3, [r3, #8]
 800f0ae:	f003 020c 	and.w	r2, r3, #12
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	685b      	ldr	r3, [r3, #4]
 800f0b6:	009b      	lsls	r3, r3, #2
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	d1eb      	bne.n	800f094 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f0bc:	4b25      	ldr	r3, [pc, #148]	; (800f154 <HAL_RCC_ClockConfig+0x1b8>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	f003 0307 	and.w	r3, r3, #7
 800f0c4:	683a      	ldr	r2, [r7, #0]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d20c      	bcs.n	800f0e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f0ca:	4b22      	ldr	r3, [pc, #136]	; (800f154 <HAL_RCC_ClockConfig+0x1b8>)
 800f0cc:	683a      	ldr	r2, [r7, #0]
 800f0ce:	b2d2      	uxtb	r2, r2
 800f0d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f0d2:	4b20      	ldr	r3, [pc, #128]	; (800f154 <HAL_RCC_ClockConfig+0x1b8>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	f003 0307 	and.w	r3, r3, #7
 800f0da:	683a      	ldr	r2, [r7, #0]
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	d001      	beq.n	800f0e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	e032      	b.n	800f14a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	f003 0304 	and.w	r3, r3, #4
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d008      	beq.n	800f102 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f0f0:	4b19      	ldr	r3, [pc, #100]	; (800f158 <HAL_RCC_ClockConfig+0x1bc>)
 800f0f2:	689b      	ldr	r3, [r3, #8]
 800f0f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	68db      	ldr	r3, [r3, #12]
 800f0fc:	4916      	ldr	r1, [pc, #88]	; (800f158 <HAL_RCC_ClockConfig+0x1bc>)
 800f0fe:	4313      	orrs	r3, r2
 800f100:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	f003 0308 	and.w	r3, r3, #8
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d009      	beq.n	800f122 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f10e:	4b12      	ldr	r3, [pc, #72]	; (800f158 <HAL_RCC_ClockConfig+0x1bc>)
 800f110:	689b      	ldr	r3, [r3, #8]
 800f112:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	691b      	ldr	r3, [r3, #16]
 800f11a:	00db      	lsls	r3, r3, #3
 800f11c:	490e      	ldr	r1, [pc, #56]	; (800f158 <HAL_RCC_ClockConfig+0x1bc>)
 800f11e:	4313      	orrs	r3, r2
 800f120:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f122:	f000 f821 	bl	800f168 <HAL_RCC_GetSysClockFreq>
 800f126:	4602      	mov	r2, r0
 800f128:	4b0b      	ldr	r3, [pc, #44]	; (800f158 <HAL_RCC_ClockConfig+0x1bc>)
 800f12a:	689b      	ldr	r3, [r3, #8]
 800f12c:	091b      	lsrs	r3, r3, #4
 800f12e:	f003 030f 	and.w	r3, r3, #15
 800f132:	490a      	ldr	r1, [pc, #40]	; (800f15c <HAL_RCC_ClockConfig+0x1c0>)
 800f134:	5ccb      	ldrb	r3, [r1, r3]
 800f136:	fa22 f303 	lsr.w	r3, r2, r3
 800f13a:	4a09      	ldr	r2, [pc, #36]	; (800f160 <HAL_RCC_ClockConfig+0x1c4>)
 800f13c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800f13e:	4b09      	ldr	r3, [pc, #36]	; (800f164 <HAL_RCC_ClockConfig+0x1c8>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	4618      	mov	r0, r3
 800f144:	f7fe fd5c 	bl	800dc00 <HAL_InitTick>

  return HAL_OK;
 800f148:	2300      	movs	r3, #0
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3710      	adds	r7, #16
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}
 800f152:	bf00      	nop
 800f154:	40023c00 	.word	0x40023c00
 800f158:	40023800 	.word	0x40023800
 800f15c:	0801fc3c 	.word	0x0801fc3c
 800f160:	20000000 	.word	0x20000000
 800f164:	20000004 	.word	0x20000004

0800f168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f16c:	b094      	sub	sp, #80	; 0x50
 800f16e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800f170:	2300      	movs	r3, #0
 800f172:	647b      	str	r3, [r7, #68]	; 0x44
 800f174:	2300      	movs	r3, #0
 800f176:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f178:	2300      	movs	r3, #0
 800f17a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800f17c:	2300      	movs	r3, #0
 800f17e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f180:	4b79      	ldr	r3, [pc, #484]	; (800f368 <HAL_RCC_GetSysClockFreq+0x200>)
 800f182:	689b      	ldr	r3, [r3, #8]
 800f184:	f003 030c 	and.w	r3, r3, #12
 800f188:	2b08      	cmp	r3, #8
 800f18a:	d00d      	beq.n	800f1a8 <HAL_RCC_GetSysClockFreq+0x40>
 800f18c:	2b08      	cmp	r3, #8
 800f18e:	f200 80e1 	bhi.w	800f354 <HAL_RCC_GetSysClockFreq+0x1ec>
 800f192:	2b00      	cmp	r3, #0
 800f194:	d002      	beq.n	800f19c <HAL_RCC_GetSysClockFreq+0x34>
 800f196:	2b04      	cmp	r3, #4
 800f198:	d003      	beq.n	800f1a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800f19a:	e0db      	b.n	800f354 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f19c:	4b73      	ldr	r3, [pc, #460]	; (800f36c <HAL_RCC_GetSysClockFreq+0x204>)
 800f19e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800f1a0:	e0db      	b.n	800f35a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f1a2:	4b73      	ldr	r3, [pc, #460]	; (800f370 <HAL_RCC_GetSysClockFreq+0x208>)
 800f1a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800f1a6:	e0d8      	b.n	800f35a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f1a8:	4b6f      	ldr	r3, [pc, #444]	; (800f368 <HAL_RCC_GetSysClockFreq+0x200>)
 800f1aa:	685b      	ldr	r3, [r3, #4]
 800f1ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f1b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f1b2:	4b6d      	ldr	r3, [pc, #436]	; (800f368 <HAL_RCC_GetSysClockFreq+0x200>)
 800f1b4:	685b      	ldr	r3, [r3, #4]
 800f1b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d063      	beq.n	800f286 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f1be:	4b6a      	ldr	r3, [pc, #424]	; (800f368 <HAL_RCC_GetSysClockFreq+0x200>)
 800f1c0:	685b      	ldr	r3, [r3, #4]
 800f1c2:	099b      	lsrs	r3, r3, #6
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800f1c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1d0:	633b      	str	r3, [r7, #48]	; 0x30
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	637b      	str	r3, [r7, #52]	; 0x34
 800f1d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800f1da:	4622      	mov	r2, r4
 800f1dc:	462b      	mov	r3, r5
 800f1de:	f04f 0000 	mov.w	r0, #0
 800f1e2:	f04f 0100 	mov.w	r1, #0
 800f1e6:	0159      	lsls	r1, r3, #5
 800f1e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f1ec:	0150      	lsls	r0, r2, #5
 800f1ee:	4602      	mov	r2, r0
 800f1f0:	460b      	mov	r3, r1
 800f1f2:	4621      	mov	r1, r4
 800f1f4:	1a51      	subs	r1, r2, r1
 800f1f6:	6139      	str	r1, [r7, #16]
 800f1f8:	4629      	mov	r1, r5
 800f1fa:	eb63 0301 	sbc.w	r3, r3, r1
 800f1fe:	617b      	str	r3, [r7, #20]
 800f200:	f04f 0200 	mov.w	r2, #0
 800f204:	f04f 0300 	mov.w	r3, #0
 800f208:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f20c:	4659      	mov	r1, fp
 800f20e:	018b      	lsls	r3, r1, #6
 800f210:	4651      	mov	r1, sl
 800f212:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800f216:	4651      	mov	r1, sl
 800f218:	018a      	lsls	r2, r1, #6
 800f21a:	4651      	mov	r1, sl
 800f21c:	ebb2 0801 	subs.w	r8, r2, r1
 800f220:	4659      	mov	r1, fp
 800f222:	eb63 0901 	sbc.w	r9, r3, r1
 800f226:	f04f 0200 	mov.w	r2, #0
 800f22a:	f04f 0300 	mov.w	r3, #0
 800f22e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f232:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f236:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f23a:	4690      	mov	r8, r2
 800f23c:	4699      	mov	r9, r3
 800f23e:	4623      	mov	r3, r4
 800f240:	eb18 0303 	adds.w	r3, r8, r3
 800f244:	60bb      	str	r3, [r7, #8]
 800f246:	462b      	mov	r3, r5
 800f248:	eb49 0303 	adc.w	r3, r9, r3
 800f24c:	60fb      	str	r3, [r7, #12]
 800f24e:	f04f 0200 	mov.w	r2, #0
 800f252:	f04f 0300 	mov.w	r3, #0
 800f256:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800f25a:	4629      	mov	r1, r5
 800f25c:	024b      	lsls	r3, r1, #9
 800f25e:	4621      	mov	r1, r4
 800f260:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800f264:	4621      	mov	r1, r4
 800f266:	024a      	lsls	r2, r1, #9
 800f268:	4610      	mov	r0, r2
 800f26a:	4619      	mov	r1, r3
 800f26c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f26e:	2200      	movs	r2, #0
 800f270:	62bb      	str	r3, [r7, #40]	; 0x28
 800f272:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f274:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f278:	f7f7 fc9e 	bl	8006bb8 <__aeabi_uldivmod>
 800f27c:	4602      	mov	r2, r0
 800f27e:	460b      	mov	r3, r1
 800f280:	4613      	mov	r3, r2
 800f282:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f284:	e058      	b.n	800f338 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f286:	4b38      	ldr	r3, [pc, #224]	; (800f368 <HAL_RCC_GetSysClockFreq+0x200>)
 800f288:	685b      	ldr	r3, [r3, #4]
 800f28a:	099b      	lsrs	r3, r3, #6
 800f28c:	2200      	movs	r2, #0
 800f28e:	4618      	mov	r0, r3
 800f290:	4611      	mov	r1, r2
 800f292:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800f296:	623b      	str	r3, [r7, #32]
 800f298:	2300      	movs	r3, #0
 800f29a:	627b      	str	r3, [r7, #36]	; 0x24
 800f29c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800f2a0:	4642      	mov	r2, r8
 800f2a2:	464b      	mov	r3, r9
 800f2a4:	f04f 0000 	mov.w	r0, #0
 800f2a8:	f04f 0100 	mov.w	r1, #0
 800f2ac:	0159      	lsls	r1, r3, #5
 800f2ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f2b2:	0150      	lsls	r0, r2, #5
 800f2b4:	4602      	mov	r2, r0
 800f2b6:	460b      	mov	r3, r1
 800f2b8:	4641      	mov	r1, r8
 800f2ba:	ebb2 0a01 	subs.w	sl, r2, r1
 800f2be:	4649      	mov	r1, r9
 800f2c0:	eb63 0b01 	sbc.w	fp, r3, r1
 800f2c4:	f04f 0200 	mov.w	r2, #0
 800f2c8:	f04f 0300 	mov.w	r3, #0
 800f2cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800f2d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800f2d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800f2d8:	ebb2 040a 	subs.w	r4, r2, sl
 800f2dc:	eb63 050b 	sbc.w	r5, r3, fp
 800f2e0:	f04f 0200 	mov.w	r2, #0
 800f2e4:	f04f 0300 	mov.w	r3, #0
 800f2e8:	00eb      	lsls	r3, r5, #3
 800f2ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f2ee:	00e2      	lsls	r2, r4, #3
 800f2f0:	4614      	mov	r4, r2
 800f2f2:	461d      	mov	r5, r3
 800f2f4:	4643      	mov	r3, r8
 800f2f6:	18e3      	adds	r3, r4, r3
 800f2f8:	603b      	str	r3, [r7, #0]
 800f2fa:	464b      	mov	r3, r9
 800f2fc:	eb45 0303 	adc.w	r3, r5, r3
 800f300:	607b      	str	r3, [r7, #4]
 800f302:	f04f 0200 	mov.w	r2, #0
 800f306:	f04f 0300 	mov.w	r3, #0
 800f30a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800f30e:	4629      	mov	r1, r5
 800f310:	028b      	lsls	r3, r1, #10
 800f312:	4621      	mov	r1, r4
 800f314:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f318:	4621      	mov	r1, r4
 800f31a:	028a      	lsls	r2, r1, #10
 800f31c:	4610      	mov	r0, r2
 800f31e:	4619      	mov	r1, r3
 800f320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f322:	2200      	movs	r2, #0
 800f324:	61bb      	str	r3, [r7, #24]
 800f326:	61fa      	str	r2, [r7, #28]
 800f328:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f32c:	f7f7 fc44 	bl	8006bb8 <__aeabi_uldivmod>
 800f330:	4602      	mov	r2, r0
 800f332:	460b      	mov	r3, r1
 800f334:	4613      	mov	r3, r2
 800f336:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800f338:	4b0b      	ldr	r3, [pc, #44]	; (800f368 <HAL_RCC_GetSysClockFreq+0x200>)
 800f33a:	685b      	ldr	r3, [r3, #4]
 800f33c:	0c1b      	lsrs	r3, r3, #16
 800f33e:	f003 0303 	and.w	r3, r3, #3
 800f342:	3301      	adds	r3, #1
 800f344:	005b      	lsls	r3, r3, #1
 800f346:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800f348:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f34a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f34c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f350:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800f352:	e002      	b.n	800f35a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f354:	4b05      	ldr	r3, [pc, #20]	; (800f36c <HAL_RCC_GetSysClockFreq+0x204>)
 800f356:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800f358:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f35a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800f35c:	4618      	mov	r0, r3
 800f35e:	3750      	adds	r7, #80	; 0x50
 800f360:	46bd      	mov	sp, r7
 800f362:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f366:	bf00      	nop
 800f368:	40023800 	.word	0x40023800
 800f36c:	00f42400 	.word	0x00f42400
 800f370:	007a1200 	.word	0x007a1200

0800f374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f374:	b480      	push	{r7}
 800f376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f378:	4b03      	ldr	r3, [pc, #12]	; (800f388 <HAL_RCC_GetHCLKFreq+0x14>)
 800f37a:	681b      	ldr	r3, [r3, #0]
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	46bd      	mov	sp, r7
 800f380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f384:	4770      	bx	lr
 800f386:	bf00      	nop
 800f388:	20000000 	.word	0x20000000

0800f38c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800f390:	f7ff fff0 	bl	800f374 <HAL_RCC_GetHCLKFreq>
 800f394:	4602      	mov	r2, r0
 800f396:	4b05      	ldr	r3, [pc, #20]	; (800f3ac <HAL_RCC_GetPCLK1Freq+0x20>)
 800f398:	689b      	ldr	r3, [r3, #8]
 800f39a:	0a9b      	lsrs	r3, r3, #10
 800f39c:	f003 0307 	and.w	r3, r3, #7
 800f3a0:	4903      	ldr	r1, [pc, #12]	; (800f3b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f3a2:	5ccb      	ldrb	r3, [r1, r3]
 800f3a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	bd80      	pop	{r7, pc}
 800f3ac:	40023800 	.word	0x40023800
 800f3b0:	0801fc4c 	.word	0x0801fc4c

0800f3b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800f3b8:	f7ff ffdc 	bl	800f374 <HAL_RCC_GetHCLKFreq>
 800f3bc:	4602      	mov	r2, r0
 800f3be:	4b05      	ldr	r3, [pc, #20]	; (800f3d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f3c0:	689b      	ldr	r3, [r3, #8]
 800f3c2:	0b5b      	lsrs	r3, r3, #13
 800f3c4:	f003 0307 	and.w	r3, r3, #7
 800f3c8:	4903      	ldr	r1, [pc, #12]	; (800f3d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f3ca:	5ccb      	ldrb	r3, [r1, r3]
 800f3cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	bd80      	pop	{r7, pc}
 800f3d4:	40023800 	.word	0x40023800
 800f3d8:	0801fc4c 	.word	0x0801fc4c

0800f3dc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b082      	sub	sp, #8
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d101      	bne.n	800f3ee <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	e022      	b.n	800f434 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f3f4:	b2db      	uxtb	r3, r3
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d105      	bne.n	800f406 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f7fe f88f 	bl	800d524 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2203      	movs	r2, #3
 800f40a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	f000 f814 	bl	800f43c <HAL_SD_InitCard>
 800f414:	4603      	mov	r3, r0
 800f416:	2b00      	cmp	r3, #0
 800f418:	d001      	beq.n	800f41e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800f41a:	2301      	movs	r3, #1
 800f41c:	e00a      	b.n	800f434 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2200      	movs	r2, #0
 800f422:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2200      	movs	r2, #0
 800f428:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2201      	movs	r2, #1
 800f42e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800f432:	2300      	movs	r3, #0
}
 800f434:	4618      	mov	r0, r3
 800f436:	3708      	adds	r7, #8
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}

0800f43c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f43c:	b5b0      	push	{r4, r5, r7, lr}
 800f43e:	b08e      	sub	sp, #56	; 0x38
 800f440:	af04      	add	r7, sp, #16
 800f442:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800f444:	2300      	movs	r3, #0
 800f446:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800f448:	2300      	movs	r3, #0
 800f44a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800f44c:	2300      	movs	r3, #0
 800f44e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800f450:	2300      	movs	r3, #0
 800f452:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800f454:	2300      	movs	r3, #0
 800f456:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800f458:	2376      	movs	r3, #118	; 0x76
 800f45a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681d      	ldr	r5, [r3, #0]
 800f460:	466c      	mov	r4, sp
 800f462:	f107 0314 	add.w	r3, r7, #20
 800f466:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f46a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f46e:	f107 0308 	add.w	r3, r7, #8
 800f472:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f474:	4628      	mov	r0, r5
 800f476:	f003 fc23 	bl	8012cc0 <SDIO_Init>
 800f47a:	4603      	mov	r3, r0
 800f47c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800f480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f484:	2b00      	cmp	r3, #0
 800f486:	d001      	beq.n	800f48c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800f488:	2301      	movs	r3, #1
 800f48a:	e04f      	b.n	800f52c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800f48c:	4b29      	ldr	r3, [pc, #164]	; (800f534 <HAL_SD_InitCard+0xf8>)
 800f48e:	2200      	movs	r2, #0
 800f490:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	4618      	mov	r0, r3
 800f498:	f003 fc5b 	bl	8012d52 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800f49c:	4b25      	ldr	r3, [pc, #148]	; (800f534 <HAL_SD_InitCard+0xf8>)
 800f49e:	2201      	movs	r2, #1
 800f4a0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800f4a2:	2002      	movs	r0, #2
 800f4a4:	f7fe fbfc 	bl	800dca0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f001 f877 	bl	801059c <SD_PowerON>
 800f4ae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f4b0:	6a3b      	ldr	r3, [r7, #32]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d00b      	beq.n	800f4ce <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2201      	movs	r2, #1
 800f4ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4c2:	6a3b      	ldr	r3, [r7, #32]
 800f4c4:	431a      	orrs	r2, r3
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	e02e      	b.n	800f52c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f000 ff96 	bl	8010400 <SD_InitCard>
 800f4d4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f4d6:	6a3b      	ldr	r3, [r7, #32]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d00b      	beq.n	800f4f4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2201      	movs	r2, #1
 800f4e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4e8:	6a3b      	ldr	r3, [r7, #32]
 800f4ea:	431a      	orrs	r2, r3
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	e01b      	b.n	800f52c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f003 fcba 	bl	8012e76 <SDMMC_CmdBlockLength>
 800f502:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f504:	6a3b      	ldr	r3, [r7, #32]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d00f      	beq.n	800f52a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	4a0a      	ldr	r2, [pc, #40]	; (800f538 <HAL_SD_InitCard+0xfc>)
 800f510:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f516:	6a3b      	ldr	r3, [r7, #32]
 800f518:	431a      	orrs	r2, r3
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	2201      	movs	r2, #1
 800f522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800f526:	2301      	movs	r3, #1
 800f528:	e000      	b.n	800f52c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800f52a:	2300      	movs	r3, #0
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3728      	adds	r7, #40	; 0x28
 800f530:	46bd      	mov	sp, r7
 800f532:	bdb0      	pop	{r4, r5, r7, pc}
 800f534:	422580a0 	.word	0x422580a0
 800f538:	004005ff 	.word	0x004005ff

0800f53c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b092      	sub	sp, #72	; 0x48
 800f540:	af00      	add	r7, sp, #0
 800f542:	60f8      	str	r0, [r7, #12]
 800f544:	60b9      	str	r1, [r7, #8]
 800f546:	607a      	str	r2, [r7, #4]
 800f548:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f54a:	f7fe fb9d 	bl	800dc88 <HAL_GetTick>
 800f54e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d107      	bne.n	800f56e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f562:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800f56a:	2301      	movs	r3, #1
 800f56c:	e1c5      	b.n	800f8fa <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f574:	b2db      	uxtb	r3, r3
 800f576:	2b01      	cmp	r3, #1
 800f578:	f040 81b8 	bne.w	800f8ec <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	2200      	movs	r2, #0
 800f580:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800f582:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	441a      	add	r2, r3
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f58c:	429a      	cmp	r2, r3
 800f58e:	d907      	bls.n	800f5a0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f594:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800f59c:	2301      	movs	r3, #1
 800f59e:	e1ac      	b.n	800f8fa <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	2203      	movs	r2, #3
 800f5a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5b4:	2b01      	cmp	r3, #1
 800f5b6:	d002      	beq.n	800f5be <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800f5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ba:	025b      	lsls	r3, r3, #9
 800f5bc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f5be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5c2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	025b      	lsls	r3, r3, #9
 800f5c8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800f5ca:	2390      	movs	r3, #144	; 0x90
 800f5cc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800f5ce:	2302      	movs	r3, #2
 800f5d0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	f107 0214 	add.w	r2, r7, #20
 800f5e2:	4611      	mov	r1, r2
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f003 fc1a 	bl	8012e1e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	2b01      	cmp	r3, #1
 800f5ee:	d90a      	bls.n	800f606 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	2202      	movs	r2, #2
 800f5f4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f003 fc7e 	bl	8012efe <SDMMC_CmdReadMultiBlock>
 800f602:	6478      	str	r0, [r7, #68]	; 0x44
 800f604:	e009      	b.n	800f61a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	2201      	movs	r2, #1
 800f60a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f612:	4618      	mov	r0, r3
 800f614:	f003 fc51 	bl	8012eba <SDMMC_CmdReadSingleBlock>
 800f618:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800f61a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d012      	beq.n	800f646 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	4a7e      	ldr	r2, [pc, #504]	; (800f820 <HAL_SD_ReadBlocks+0x2e4>)
 800f626:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f62c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f62e:	431a      	orrs	r2, r3
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	2201      	movs	r2, #1
 800f638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	2200      	movs	r2, #0
 800f640:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800f642:	2301      	movs	r3, #1
 800f644:	e159      	b.n	800f8fa <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800f646:	69bb      	ldr	r3, [r7, #24]
 800f648:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800f64a:	e061      	b.n	800f710 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f652:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f656:	2b00      	cmp	r3, #0
 800f658:	d03c      	beq.n	800f6d4 <HAL_SD_ReadBlocks+0x198>
 800f65a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d039      	beq.n	800f6d4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800f660:	2300      	movs	r3, #0
 800f662:	643b      	str	r3, [r7, #64]	; 0x40
 800f664:	e033      	b.n	800f6ce <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	4618      	mov	r0, r3
 800f66c:	f003 fb53 	bl	8012d16 <SDIO_ReadFIFO>
 800f670:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800f672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f674:	b2da      	uxtb	r2, r3
 800f676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f678:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800f67a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f67c:	3301      	adds	r3, #1
 800f67e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800f680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f682:	3b01      	subs	r3, #1
 800f684:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800f686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f688:	0a1b      	lsrs	r3, r3, #8
 800f68a:	b2da      	uxtb	r2, r3
 800f68c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f68e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800f690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f692:	3301      	adds	r3, #1
 800f694:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800f696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f698:	3b01      	subs	r3, #1
 800f69a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800f69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f69e:	0c1b      	lsrs	r3, r3, #16
 800f6a0:	b2da      	uxtb	r2, r3
 800f6a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6a4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800f6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6a8:	3301      	adds	r3, #1
 800f6aa:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800f6ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6ae:	3b01      	subs	r3, #1
 800f6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800f6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b4:	0e1b      	lsrs	r3, r3, #24
 800f6b6:	b2da      	uxtb	r2, r3
 800f6b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6ba:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800f6bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6be:	3301      	adds	r3, #1
 800f6c0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800f6c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6c4:	3b01      	subs	r3, #1
 800f6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800f6c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6ca:	3301      	adds	r3, #1
 800f6cc:	643b      	str	r3, [r7, #64]	; 0x40
 800f6ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6d0:	2b07      	cmp	r3, #7
 800f6d2:	d9c8      	bls.n	800f666 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800f6d4:	f7fe fad8 	bl	800dc88 <HAL_GetTick>
 800f6d8:	4602      	mov	r2, r0
 800f6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6dc:	1ad3      	subs	r3, r2, r3
 800f6de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f6e0:	429a      	cmp	r2, r3
 800f6e2:	d902      	bls.n	800f6ea <HAL_SD_ReadBlocks+0x1ae>
 800f6e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d112      	bne.n	800f710 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	4a4c      	ldr	r2, [pc, #304]	; (800f820 <HAL_SD_ReadBlocks+0x2e4>)
 800f6f0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6f6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	2201      	movs	r2, #1
 800f702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	2200      	movs	r2, #0
 800f70a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800f70c:	2303      	movs	r3, #3
 800f70e:	e0f4      	b.n	800f8fa <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f716:	f240 332a 	movw	r3, #810	; 0x32a
 800f71a:	4013      	ands	r3, r2
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d095      	beq.n	800f64c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d022      	beq.n	800f774 <HAL_SD_ReadBlocks+0x238>
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	2b01      	cmp	r3, #1
 800f732:	d91f      	bls.n	800f774 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f738:	2b03      	cmp	r3, #3
 800f73a:	d01b      	beq.n	800f774 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	4618      	mov	r0, r3
 800f742:	f003 fc43 	bl	8012fcc <SDMMC_CmdStopTransfer>
 800f746:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800f748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d012      	beq.n	800f774 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	4a33      	ldr	r2, [pc, #204]	; (800f820 <HAL_SD_ReadBlocks+0x2e4>)
 800f754:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f75a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f75c:	431a      	orrs	r2, r3
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	2201      	movs	r2, #1
 800f766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	2200      	movs	r2, #0
 800f76e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800f770:	2301      	movs	r3, #1
 800f772:	e0c2      	b.n	800f8fa <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f77a:	f003 0308 	and.w	r3, r3, #8
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d106      	bne.n	800f790 <HAL_SD_ReadBlocks+0x254>
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d012      	beq.n	800f7b6 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	4a22      	ldr	r2, [pc, #136]	; (800f820 <HAL_SD_ReadBlocks+0x2e4>)
 800f796:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f79c:	f043 0208 	orr.w	r2, r3, #8
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	2201      	movs	r2, #1
 800f7a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800f7b2:	2301      	movs	r3, #1
 800f7b4:	e0a1      	b.n	800f8fa <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7bc:	f003 0302 	and.w	r3, r3, #2
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d012      	beq.n	800f7ea <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	4a15      	ldr	r2, [pc, #84]	; (800f820 <HAL_SD_ReadBlocks+0x2e4>)
 800f7ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7d0:	f043 0202 	orr.w	r2, r3, #2
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	2201      	movs	r2, #1
 800f7dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	e087      	b.n	800f8fa <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7f0:	f003 0320 	and.w	r3, r3, #32
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d064      	beq.n	800f8c2 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	4a08      	ldr	r2, [pc, #32]	; (800f820 <HAL_SD_ReadBlocks+0x2e4>)
 800f7fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f804:	f043 0220 	orr.w	r2, r3, #32
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	2201      	movs	r2, #1
 800f810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	2200      	movs	r2, #0
 800f818:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800f81a:	2301      	movs	r3, #1
 800f81c:	e06d      	b.n	800f8fa <HAL_SD_ReadBlocks+0x3be>
 800f81e:	bf00      	nop
 800f820:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	4618      	mov	r0, r3
 800f82a:	f003 fa74 	bl	8012d16 <SDIO_ReadFIFO>
 800f82e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800f830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f832:	b2da      	uxtb	r2, r3
 800f834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f836:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800f838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f83a:	3301      	adds	r3, #1
 800f83c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800f83e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f840:	3b01      	subs	r3, #1
 800f842:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800f844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f846:	0a1b      	lsrs	r3, r3, #8
 800f848:	b2da      	uxtb	r2, r3
 800f84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f84c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800f84e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f850:	3301      	adds	r3, #1
 800f852:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800f854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f856:	3b01      	subs	r3, #1
 800f858:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800f85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f85c:	0c1b      	lsrs	r3, r3, #16
 800f85e:	b2da      	uxtb	r2, r3
 800f860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f862:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800f864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f866:	3301      	adds	r3, #1
 800f868:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800f86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f86c:	3b01      	subs	r3, #1
 800f86e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800f870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f872:	0e1b      	lsrs	r3, r3, #24
 800f874:	b2da      	uxtb	r2, r3
 800f876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f878:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800f87a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f87c:	3301      	adds	r3, #1
 800f87e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800f880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f882:	3b01      	subs	r3, #1
 800f884:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800f886:	f7fe f9ff 	bl	800dc88 <HAL_GetTick>
 800f88a:	4602      	mov	r2, r0
 800f88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f88e:	1ad3      	subs	r3, r2, r3
 800f890:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f892:	429a      	cmp	r2, r3
 800f894:	d902      	bls.n	800f89c <HAL_SD_ReadBlocks+0x360>
 800f896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d112      	bne.n	800f8c2 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	4a18      	ldr	r2, [pc, #96]	; (800f904 <HAL_SD_ReadBlocks+0x3c8>)
 800f8a2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	2201      	movs	r2, #1
 800f8b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800f8be:	2301      	movs	r3, #1
 800f8c0:	e01b      	b.n	800f8fa <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d002      	beq.n	800f8d6 <HAL_SD_ReadBlocks+0x39a>
 800f8d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d1a6      	bne.n	800f824 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	f240 523a 	movw	r2, #1338	; 0x53a
 800f8de:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	2201      	movs	r2, #1
 800f8e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	e006      	b.n	800f8fa <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8f0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800f8f8:	2301      	movs	r3, #1
  }
}
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	3748      	adds	r7, #72	; 0x48
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bd80      	pop	{r7, pc}
 800f902:	bf00      	nop
 800f904:	004005ff 	.word	0x004005ff

0800f908 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b092      	sub	sp, #72	; 0x48
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	60f8      	str	r0, [r7, #12]
 800f910:	60b9      	str	r1, [r7, #8]
 800f912:	607a      	str	r2, [r7, #4]
 800f914:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f916:	f7fe f9b7 	bl	800dc88 <HAL_GetTick>
 800f91a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d107      	bne.n	800f93a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f92e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800f936:	2301      	movs	r3, #1
 800f938:	e16d      	b.n	800fc16 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f940:	b2db      	uxtb	r3, r3
 800f942:	2b01      	cmp	r3, #1
 800f944:	f040 8160 	bne.w	800fc08 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	2200      	movs	r2, #0
 800f94c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800f94e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	441a      	add	r2, r3
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f958:	429a      	cmp	r2, r3
 800f95a:	d907      	bls.n	800f96c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f960:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800f968:	2301      	movs	r3, #1
 800f96a:	e154      	b.n	800fc16 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	2203      	movs	r2, #3
 800f970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	2200      	movs	r2, #0
 800f97a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f980:	2b01      	cmp	r3, #1
 800f982:	d002      	beq.n	800f98a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800f984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f986:	025b      	lsls	r3, r3, #9
 800f988:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f98a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f98e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	025b      	lsls	r3, r3, #9
 800f994:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800f996:	2390      	movs	r3, #144	; 0x90
 800f998:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800f99a:	2300      	movs	r3, #0
 800f99c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800f99e:	2300      	movs	r3, #0
 800f9a0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800f9a2:	2301      	movs	r3, #1
 800f9a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	f107 0218 	add.w	r2, r7, #24
 800f9ae:	4611      	mov	r1, r2
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f003 fa34 	bl	8012e1e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	2b01      	cmp	r3, #1
 800f9ba:	d90a      	bls.n	800f9d2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	2220      	movs	r2, #32
 800f9c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f003 fadc 	bl	8012f86 <SDMMC_CmdWriteMultiBlock>
 800f9ce:	6478      	str	r0, [r7, #68]	; 0x44
 800f9d0:	e009      	b.n	800f9e6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	2210      	movs	r2, #16
 800f9d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f003 faaf 	bl	8012f42 <SDMMC_CmdWriteSingleBlock>
 800f9e4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800f9e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d012      	beq.n	800fa12 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	4a8b      	ldr	r2, [pc, #556]	; (800fc20 <HAL_SD_WriteBlocks+0x318>)
 800f9f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f9f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9fa:	431a      	orrs	r2, r3
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	2201      	movs	r2, #1
 800fa04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800fa0e:	2301      	movs	r3, #1
 800fa10:	e101      	b.n	800fc16 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800fa12:	69fb      	ldr	r3, [r7, #28]
 800fa14:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800fa16:	e065      	b.n	800fae4 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d040      	beq.n	800faa8 <HAL_SD_WriteBlocks+0x1a0>
 800fa26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d03d      	beq.n	800faa8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	643b      	str	r3, [r7, #64]	; 0x40
 800fa30:	e037      	b.n	800faa2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800fa32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa34:	781b      	ldrb	r3, [r3, #0]
 800fa36:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800fa38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800fa3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa40:	3b01      	subs	r3, #1
 800fa42:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800fa44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa46:	781b      	ldrb	r3, [r3, #0]
 800fa48:	021a      	lsls	r2, r3, #8
 800fa4a:	697b      	ldr	r3, [r7, #20]
 800fa4c:	4313      	orrs	r3, r2
 800fa4e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800fa50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa52:	3301      	adds	r3, #1
 800fa54:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800fa56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa58:	3b01      	subs	r3, #1
 800fa5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800fa5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa5e:	781b      	ldrb	r3, [r3, #0]
 800fa60:	041a      	lsls	r2, r3, #16
 800fa62:	697b      	ldr	r3, [r7, #20]
 800fa64:	4313      	orrs	r3, r2
 800fa66:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800fa68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa6a:	3301      	adds	r3, #1
 800fa6c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800fa6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa70:	3b01      	subs	r3, #1
 800fa72:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800fa74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa76:	781b      	ldrb	r3, [r3, #0]
 800fa78:	061a      	lsls	r2, r3, #24
 800fa7a:	697b      	ldr	r3, [r7, #20]
 800fa7c:	4313      	orrs	r3, r2
 800fa7e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800fa80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa82:	3301      	adds	r3, #1
 800fa84:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800fa86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa88:	3b01      	subs	r3, #1
 800fa8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	f107 0214 	add.w	r2, r7, #20
 800fa94:	4611      	mov	r1, r2
 800fa96:	4618      	mov	r0, r3
 800fa98:	f003 f94a 	bl	8012d30 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800fa9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa9e:	3301      	adds	r3, #1
 800faa0:	643b      	str	r3, [r7, #64]	; 0x40
 800faa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800faa4:	2b07      	cmp	r3, #7
 800faa6:	d9c4      	bls.n	800fa32 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800faa8:	f7fe f8ee 	bl	800dc88 <HAL_GetTick>
 800faac:	4602      	mov	r2, r0
 800faae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fab0:	1ad3      	subs	r3, r2, r3
 800fab2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fab4:	429a      	cmp	r2, r3
 800fab6:	d902      	bls.n	800fabe <HAL_SD_WriteBlocks+0x1b6>
 800fab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d112      	bne.n	800fae4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	4a57      	ldr	r2, [pc, #348]	; (800fc20 <HAL_SD_WriteBlocks+0x318>)
 800fac4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800faca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800facc:	431a      	orrs	r2, r3
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	2201      	movs	r2, #1
 800fad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	2200      	movs	r2, #0
 800fade:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800fae0:	2303      	movs	r3, #3
 800fae2:	e098      	b.n	800fc16 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800faea:	f240 331a 	movw	r3, #794	; 0x31a
 800faee:	4013      	ands	r3, r2
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d091      	beq.n	800fa18 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fafa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d022      	beq.n	800fb48 <HAL_SD_WriteBlocks+0x240>
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	2b01      	cmp	r3, #1
 800fb06:	d91f      	bls.n	800fb48 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb0c:	2b03      	cmp	r3, #3
 800fb0e:	d01b      	beq.n	800fb48 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	4618      	mov	r0, r3
 800fb16:	f003 fa59 	bl	8012fcc <SDMMC_CmdStopTransfer>
 800fb1a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800fb1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d012      	beq.n	800fb48 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	4a3e      	ldr	r2, [pc, #248]	; (800fc20 <HAL_SD_WriteBlocks+0x318>)
 800fb28:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb30:	431a      	orrs	r2, r3
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	2201      	movs	r2, #1
 800fb3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	2200      	movs	r2, #0
 800fb42:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800fb44:	2301      	movs	r3, #1
 800fb46:	e066      	b.n	800fc16 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb4e:	f003 0308 	and.w	r3, r3, #8
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d106      	bne.n	800fb64 <HAL_SD_WriteBlocks+0x25c>
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d012      	beq.n	800fb8a <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	4a2d      	ldr	r2, [pc, #180]	; (800fc20 <HAL_SD_WriteBlocks+0x318>)
 800fb6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb70:	f043 0208 	orr.w	r2, r3, #8
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	2200      	movs	r2, #0
 800fb84:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800fb86:	2301      	movs	r3, #1
 800fb88:	e045      	b.n	800fc16 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb90:	f003 0302 	and.w	r3, r3, #2
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d012      	beq.n	800fbbe <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	4a20      	ldr	r2, [pc, #128]	; (800fc20 <HAL_SD_WriteBlocks+0x318>)
 800fb9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fba4:	f043 0202 	orr.w	r2, r3, #2
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	2201      	movs	r2, #1
 800fbb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800fbba:	2301      	movs	r3, #1
 800fbbc:	e02b      	b.n	800fc16 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbc4:	f003 0310 	and.w	r3, r3, #16
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d012      	beq.n	800fbf2 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	4a13      	ldr	r2, [pc, #76]	; (800fc20 <HAL_SD_WriteBlocks+0x318>)
 800fbd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbd8:	f043 0210 	orr.w	r2, r3, #16
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	2201      	movs	r2, #1
 800fbe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	2200      	movs	r2, #0
 800fbec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800fbee:	2301      	movs	r3, #1
 800fbf0:	e011      	b.n	800fc16 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	f240 523a 	movw	r2, #1338	; 0x53a
 800fbfa:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	2201      	movs	r2, #1
 800fc00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800fc04:	2300      	movs	r3, #0
 800fc06:	e006      	b.n	800fc16 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc0c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800fc14:	2301      	movs	r3, #1
  }
}
 800fc16:	4618      	mov	r0, r3
 800fc18:	3748      	adds	r7, #72	; 0x48
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	004005ff 	.word	0x004005ff

0800fc24 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b084      	sub	sp, #16
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc30:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d008      	beq.n	800fc52 <HAL_SD_IRQHandler+0x2e>
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	f003 0308 	and.w	r3, r3, #8
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d003      	beq.n	800fc52 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f000 fd5c 	bl	8010708 <SD_Read_IT>
 800fc50:	e165      	b.n	800ff1e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	f000 808f 	beq.w	800fd80 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fc6a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc72:	687a      	ldr	r2, [r7, #4]
 800fc74:	6812      	ldr	r2, [r2, #0]
 800fc76:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800fc7a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800fc7e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	f022 0201 	bic.w	r2, r2, #1
 800fc8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	f003 0308 	and.w	r3, r3, #8
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d039      	beq.n	800fd0e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	f003 0302 	and.w	r3, r3, #2
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d104      	bne.n	800fcae <HAL_SD_IRQHandler+0x8a>
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	f003 0320 	and.w	r3, r3, #32
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d011      	beq.n	800fcd2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f003 f98a 	bl	8012fcc <SDMMC_CmdStopTransfer>
 800fcb8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800fcba:	68bb      	ldr	r3, [r7, #8]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d008      	beq.n	800fcd2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	431a      	orrs	r2, r3
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f000 f92f 	bl	800ff30 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	f240 523a 	movw	r2, #1338	; 0x53a
 800fcda:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2201      	movs	r2, #1
 800fce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2200      	movs	r2, #0
 800fce8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	f003 0301 	and.w	r3, r3, #1
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d104      	bne.n	800fcfe <HAL_SD_IRQHandler+0xda>
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	f003 0302 	and.w	r3, r3, #2
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d003      	beq.n	800fd06 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f003 fdb0 	bl	8013864 <HAL_SD_RxCpltCallback>
 800fd04:	e10b      	b.n	800ff1e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f003 fda2 	bl	8013850 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800fd0c:	e107      	b.n	800ff1e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	f000 8102 	beq.w	800ff1e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	f003 0320 	and.w	r3, r3, #32
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d011      	beq.n	800fd48 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f003 f94f 	bl	8012fcc <SDMMC_CmdStopTransfer>
 800fd2e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800fd30:	68bb      	ldr	r3, [r7, #8]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d008      	beq.n	800fd48 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	431a      	orrs	r2, r3
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f000 f8f4 	bl	800ff30 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	f003 0301 	and.w	r3, r3, #1
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	f040 80e5 	bne.w	800ff1e <HAL_SD_IRQHandler+0x2fa>
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	f003 0302 	and.w	r3, r3, #2
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	f040 80df 	bne.w	800ff1e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	f022 0208 	bic.w	r2, r2, #8
 800fd6e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2201      	movs	r2, #1
 800fd74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f003 fd69 	bl	8013850 <HAL_SD_TxCpltCallback>
}
 800fd7e:	e0ce      	b.n	800ff1e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d008      	beq.n	800fda0 <HAL_SD_IRQHandler+0x17c>
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	f003 0308 	and.w	r3, r3, #8
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d003      	beq.n	800fda0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800fd98:	6878      	ldr	r0, [r7, #4]
 800fd9a:	f000 fd06 	bl	80107aa <SD_Write_IT>
 800fd9e:	e0be      	b.n	800ff1e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fda6:	f240 233a 	movw	r3, #570	; 0x23a
 800fdaa:	4013      	ands	r3, r2
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	f000 80b6 	beq.w	800ff1e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdb8:	f003 0302 	and.w	r3, r3, #2
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d005      	beq.n	800fdcc <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdc4:	f043 0202 	orr.w	r2, r3, #2
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdd2:	f003 0308 	and.w	r3, r3, #8
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d005      	beq.n	800fde6 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdde:	f043 0208 	orr.w	r2, r3, #8
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdec:	f003 0320 	and.w	r3, r3, #32
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d005      	beq.n	800fe00 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdf8:	f043 0220 	orr.w	r2, r3, #32
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe06:	f003 0310 	and.w	r3, r3, #16
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d005      	beq.n	800fe1a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe12:	f043 0210 	orr.w	r2, r3, #16
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d005      	beq.n	800fe34 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe2c:	f043 0208 	orr.w	r2, r3, #8
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	f240 723a 	movw	r2, #1850	; 0x73a
 800fe3c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe44:	687a      	ldr	r2, [r7, #4]
 800fe46:	6812      	ldr	r2, [r2, #0]
 800fe48:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800fe4c:	f023 0302 	bic.w	r3, r3, #2
 800fe50:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	4618      	mov	r0, r3
 800fe58:	f003 f8b8 	bl	8012fcc <SDMMC_CmdStopTransfer>
 800fe5c:	4602      	mov	r2, r0
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe62:	431a      	orrs	r2, r3
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	f003 0308 	and.w	r3, r3, #8
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d00a      	beq.n	800fe88 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2201      	movs	r2, #1
 800fe76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f000 f855 	bl	800ff30 <HAL_SD_ErrorCallback>
}
 800fe86:	e04a      	b.n	800ff1e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d045      	beq.n	800ff1e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	f003 0310 	and.w	r3, r3, #16
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d104      	bne.n	800fea6 <HAL_SD_IRQHandler+0x282>
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	f003 0320 	and.w	r3, r3, #32
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d011      	beq.n	800feca <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800feaa:	4a1f      	ldr	r2, [pc, #124]	; (800ff28 <HAL_SD_IRQHandler+0x304>)
 800feac:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800feb2:	4618      	mov	r0, r3
 800feb4:	f7fe f9a0 	bl	800e1f8 <HAL_DMA_Abort_IT>
 800feb8:	4603      	mov	r3, r0
 800feba:	2b00      	cmp	r3, #0
 800febc:	d02f      	beq.n	800ff1e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fec2:	4618      	mov	r0, r3
 800fec4:	f000 fa2e 	bl	8010324 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800fec8:	e029      	b.n	800ff1e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	f003 0301 	and.w	r3, r3, #1
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d104      	bne.n	800fede <HAL_SD_IRQHandler+0x2ba>
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	f003 0302 	and.w	r3, r3, #2
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d011      	beq.n	800ff02 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fee2:	4a12      	ldr	r2, [pc, #72]	; (800ff2c <HAL_SD_IRQHandler+0x308>)
 800fee4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800feea:	4618      	mov	r0, r3
 800feec:	f7fe f984 	bl	800e1f8 <HAL_DMA_Abort_IT>
 800fef0:	4603      	mov	r3, r0
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d013      	beq.n	800ff1e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fefa:	4618      	mov	r0, r3
 800fefc:	f000 fa49 	bl	8010392 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800ff00:	e00d      	b.n	800ff1e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2200      	movs	r2, #0
 800ff06:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2201      	movs	r2, #1
 800ff0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2200      	movs	r2, #0
 800ff14:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f003 fc90 	bl	801383c <HAL_SD_AbortCallback>
}
 800ff1c:	e7ff      	b.n	800ff1e <HAL_SD_IRQHandler+0x2fa>
 800ff1e:	bf00      	nop
 800ff20:	3710      	adds	r7, #16
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}
 800ff26:	bf00      	nop
 800ff28:	08010325 	.word	0x08010325
 800ff2c:	08010393 	.word	0x08010393

0800ff30 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800ff30:	b480      	push	{r7}
 800ff32:	b083      	sub	sp, #12
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ff38:	bf00      	nop
 800ff3a:	370c      	adds	r7, #12
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff42:	4770      	bx	lr

0800ff44 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ff44:	b480      	push	{r7}
 800ff46:	b083      	sub	sp, #12
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
 800ff4c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff52:	0f9b      	lsrs	r3, r3, #30
 800ff54:	b2da      	uxtb	r2, r3
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff5e:	0e9b      	lsrs	r3, r3, #26
 800ff60:	b2db      	uxtb	r3, r3
 800ff62:	f003 030f 	and.w	r3, r3, #15
 800ff66:	b2da      	uxtb	r2, r3
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff70:	0e1b      	lsrs	r3, r3, #24
 800ff72:	b2db      	uxtb	r3, r3
 800ff74:	f003 0303 	and.w	r3, r3, #3
 800ff78:	b2da      	uxtb	r2, r3
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff82:	0c1b      	lsrs	r3, r3, #16
 800ff84:	b2da      	uxtb	r2, r3
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff8e:	0a1b      	lsrs	r3, r3, #8
 800ff90:	b2da      	uxtb	r2, r3
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff9a:	b2da      	uxtb	r2, r3
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ffa4:	0d1b      	lsrs	r3, r3, #20
 800ffa6:	b29a      	uxth	r2, r3
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ffb0:	0c1b      	lsrs	r3, r3, #16
 800ffb2:	b2db      	uxtb	r3, r3
 800ffb4:	f003 030f 	and.w	r3, r3, #15
 800ffb8:	b2da      	uxtb	r2, r3
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ffc2:	0bdb      	lsrs	r3, r3, #15
 800ffc4:	b2db      	uxtb	r3, r3
 800ffc6:	f003 0301 	and.w	r3, r3, #1
 800ffca:	b2da      	uxtb	r2, r3
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ffd4:	0b9b      	lsrs	r3, r3, #14
 800ffd6:	b2db      	uxtb	r3, r3
 800ffd8:	f003 0301 	and.w	r3, r3, #1
 800ffdc:	b2da      	uxtb	r2, r3
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ffe6:	0b5b      	lsrs	r3, r3, #13
 800ffe8:	b2db      	uxtb	r3, r3
 800ffea:	f003 0301 	and.w	r3, r3, #1
 800ffee:	b2da      	uxtb	r2, r3
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fff8:	0b1b      	lsrs	r3, r3, #12
 800fffa:	b2db      	uxtb	r3, r3
 800fffc:	f003 0301 	and.w	r3, r3, #1
 8010000:	b2da      	uxtb	r2, r3
 8010002:	683b      	ldr	r3, [r7, #0]
 8010004:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	2200      	movs	r2, #0
 801000a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010010:	2b00      	cmp	r3, #0
 8010012:	d163      	bne.n	80100dc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010018:	009a      	lsls	r2, r3, #2
 801001a:	f640 73fc 	movw	r3, #4092	; 0xffc
 801001e:	4013      	ands	r3, r2
 8010020:	687a      	ldr	r2, [r7, #4]
 8010022:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8010024:	0f92      	lsrs	r2, r2, #30
 8010026:	431a      	orrs	r2, r3
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010030:	0edb      	lsrs	r3, r3, #27
 8010032:	b2db      	uxtb	r3, r3
 8010034:	f003 0307 	and.w	r3, r3, #7
 8010038:	b2da      	uxtb	r2, r3
 801003a:	683b      	ldr	r3, [r7, #0]
 801003c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010042:	0e1b      	lsrs	r3, r3, #24
 8010044:	b2db      	uxtb	r3, r3
 8010046:	f003 0307 	and.w	r3, r3, #7
 801004a:	b2da      	uxtb	r2, r3
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010054:	0d5b      	lsrs	r3, r3, #21
 8010056:	b2db      	uxtb	r3, r3
 8010058:	f003 0307 	and.w	r3, r3, #7
 801005c:	b2da      	uxtb	r2, r3
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010066:	0c9b      	lsrs	r3, r3, #18
 8010068:	b2db      	uxtb	r3, r3
 801006a:	f003 0307 	and.w	r3, r3, #7
 801006e:	b2da      	uxtb	r2, r3
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010078:	0bdb      	lsrs	r3, r3, #15
 801007a:	b2db      	uxtb	r3, r3
 801007c:	f003 0307 	and.w	r3, r3, #7
 8010080:	b2da      	uxtb	r2, r3
 8010082:	683b      	ldr	r3, [r7, #0]
 8010084:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	691b      	ldr	r3, [r3, #16]
 801008a:	1c5a      	adds	r2, r3, #1
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	7e1b      	ldrb	r3, [r3, #24]
 8010094:	b2db      	uxtb	r3, r3
 8010096:	f003 0307 	and.w	r3, r3, #7
 801009a:	3302      	adds	r3, #2
 801009c:	2201      	movs	r2, #1
 801009e:	fa02 f303 	lsl.w	r3, r2, r3
 80100a2:	687a      	ldr	r2, [r7, #4]
 80100a4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80100a6:	fb03 f202 	mul.w	r2, r3, r2
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	7a1b      	ldrb	r3, [r3, #8]
 80100b2:	b2db      	uxtb	r3, r3
 80100b4:	f003 030f 	and.w	r3, r3, #15
 80100b8:	2201      	movs	r2, #1
 80100ba:	409a      	lsls	r2, r3
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100c4:	687a      	ldr	r2, [r7, #4]
 80100c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80100c8:	0a52      	lsrs	r2, r2, #9
 80100ca:	fb03 f202 	mul.w	r2, r3, r2
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80100d8:	661a      	str	r2, [r3, #96]	; 0x60
 80100da:	e031      	b.n	8010140 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100e0:	2b01      	cmp	r3, #1
 80100e2:	d11d      	bne.n	8010120 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80100e8:	041b      	lsls	r3, r3, #16
 80100ea:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100f2:	0c1b      	lsrs	r3, r3, #16
 80100f4:	431a      	orrs	r2, r3
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	691b      	ldr	r3, [r3, #16]
 80100fe:	3301      	adds	r3, #1
 8010100:	029a      	lsls	r2, r3, #10
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010114:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	661a      	str	r2, [r3, #96]	; 0x60
 801011e:	e00f      	b.n	8010140 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	4a58      	ldr	r2, [pc, #352]	; (8010288 <HAL_SD_GetCardCSD+0x344>)
 8010126:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801012c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2201      	movs	r2, #1
 8010138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801013c:	2301      	movs	r3, #1
 801013e:	e09d      	b.n	801027c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010144:	0b9b      	lsrs	r3, r3, #14
 8010146:	b2db      	uxtb	r3, r3
 8010148:	f003 0301 	and.w	r3, r3, #1
 801014c:	b2da      	uxtb	r2, r3
 801014e:	683b      	ldr	r3, [r7, #0]
 8010150:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010156:	09db      	lsrs	r3, r3, #7
 8010158:	b2db      	uxtb	r3, r3
 801015a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801015e:	b2da      	uxtb	r2, r3
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010168:	b2db      	uxtb	r3, r3
 801016a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801016e:	b2da      	uxtb	r2, r3
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010178:	0fdb      	lsrs	r3, r3, #31
 801017a:	b2da      	uxtb	r2, r3
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010184:	0f5b      	lsrs	r3, r3, #29
 8010186:	b2db      	uxtb	r3, r3
 8010188:	f003 0303 	and.w	r3, r3, #3
 801018c:	b2da      	uxtb	r2, r3
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010196:	0e9b      	lsrs	r3, r3, #26
 8010198:	b2db      	uxtb	r3, r3
 801019a:	f003 0307 	and.w	r3, r3, #7
 801019e:	b2da      	uxtb	r2, r3
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101a8:	0d9b      	lsrs	r3, r3, #22
 80101aa:	b2db      	uxtb	r3, r3
 80101ac:	f003 030f 	and.w	r3, r3, #15
 80101b0:	b2da      	uxtb	r2, r3
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101ba:	0d5b      	lsrs	r3, r3, #21
 80101bc:	b2db      	uxtb	r3, r3
 80101be:	f003 0301 	and.w	r3, r3, #1
 80101c2:	b2da      	uxtb	r2, r3
 80101c4:	683b      	ldr	r3, [r7, #0]
 80101c6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	2200      	movs	r2, #0
 80101ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101d6:	0c1b      	lsrs	r3, r3, #16
 80101d8:	b2db      	uxtb	r3, r3
 80101da:	f003 0301 	and.w	r3, r3, #1
 80101de:	b2da      	uxtb	r2, r3
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101ea:	0bdb      	lsrs	r3, r3, #15
 80101ec:	b2db      	uxtb	r3, r3
 80101ee:	f003 0301 	and.w	r3, r3, #1
 80101f2:	b2da      	uxtb	r2, r3
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101fe:	0b9b      	lsrs	r3, r3, #14
 8010200:	b2db      	uxtb	r3, r3
 8010202:	f003 0301 	and.w	r3, r3, #1
 8010206:	b2da      	uxtb	r2, r3
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010212:	0b5b      	lsrs	r3, r3, #13
 8010214:	b2db      	uxtb	r3, r3
 8010216:	f003 0301 	and.w	r3, r3, #1
 801021a:	b2da      	uxtb	r2, r3
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010226:	0b1b      	lsrs	r3, r3, #12
 8010228:	b2db      	uxtb	r3, r3
 801022a:	f003 0301 	and.w	r3, r3, #1
 801022e:	b2da      	uxtb	r2, r3
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801023a:	0a9b      	lsrs	r3, r3, #10
 801023c:	b2db      	uxtb	r3, r3
 801023e:	f003 0303 	and.w	r3, r3, #3
 8010242:	b2da      	uxtb	r2, r3
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801024e:	0a1b      	lsrs	r3, r3, #8
 8010250:	b2db      	uxtb	r3, r3
 8010252:	f003 0303 	and.w	r3, r3, #3
 8010256:	b2da      	uxtb	r2, r3
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010262:	085b      	lsrs	r3, r3, #1
 8010264:	b2db      	uxtb	r3, r3
 8010266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801026a:	b2da      	uxtb	r2, r3
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	2201      	movs	r2, #1
 8010276:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 801027a:	2300      	movs	r3, #0
}
 801027c:	4618      	mov	r0, r3
 801027e:	370c      	adds	r7, #12
 8010280:	46bd      	mov	sp, r7
 8010282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010286:	4770      	bx	lr
 8010288:	004005ff 	.word	0x004005ff

0801028c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 801028c:	b480      	push	{r7}
 801028e:	b083      	sub	sp, #12
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
 8010294:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80102ba:	683b      	ldr	r3, [r7, #0]
 80102bc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80102c2:	683b      	ldr	r3, [r7, #0]
 80102c4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80102d2:	683b      	ldr	r3, [r7, #0]
 80102d4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80102d6:	2300      	movs	r3, #0
}
 80102d8:	4618      	mov	r0, r3
 80102da:	370c      	adds	r7, #12
 80102dc:	46bd      	mov	sp, r7
 80102de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e2:	4770      	bx	lr

080102e4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b086      	sub	sp, #24
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80102ec:	2300      	movs	r3, #0
 80102ee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80102f0:	f107 030c 	add.w	r3, r7, #12
 80102f4:	4619      	mov	r1, r3
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	f000 f9de 	bl	80106b8 <SD_SendStatus>
 80102fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80102fe:	697b      	ldr	r3, [r7, #20]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d005      	beq.n	8010310 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010308:	697b      	ldr	r3, [r7, #20]
 801030a:	431a      	orrs	r2, r3
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	0a5b      	lsrs	r3, r3, #9
 8010314:	f003 030f 	and.w	r3, r3, #15
 8010318:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 801031a:	693b      	ldr	r3, [r7, #16]
}
 801031c:	4618      	mov	r0, r3
 801031e:	3718      	adds	r7, #24
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}

08010324 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b084      	sub	sp, #16
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010330:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	f240 523a 	movw	r2, #1338	; 0x53a
 801033a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 801033c:	68f8      	ldr	r0, [r7, #12]
 801033e:	f7ff ffd1 	bl	80102e4 <HAL_SD_GetCardState>
 8010342:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	2201      	movs	r2, #1
 8010348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	2200      	movs	r2, #0
 8010350:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	2b06      	cmp	r3, #6
 8010356:	d002      	beq.n	801035e <SD_DMATxAbort+0x3a>
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	2b05      	cmp	r3, #5
 801035c:	d10a      	bne.n	8010374 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	4618      	mov	r0, r3
 8010364:	f002 fe32 	bl	8012fcc <SDMMC_CmdStopTransfer>
 8010368:	4602      	mov	r2, r0
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801036e:	431a      	orrs	r2, r3
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010378:	2b00      	cmp	r3, #0
 801037a:	d103      	bne.n	8010384 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 801037c:	68f8      	ldr	r0, [r7, #12]
 801037e:	f003 fa5d 	bl	801383c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8010382:	e002      	b.n	801038a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8010384:	68f8      	ldr	r0, [r7, #12]
 8010386:	f7ff fdd3 	bl	800ff30 <HAL_SD_ErrorCallback>
}
 801038a:	bf00      	nop
 801038c:	3710      	adds	r7, #16
 801038e:	46bd      	mov	sp, r7
 8010390:	bd80      	pop	{r7, pc}

08010392 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8010392:	b580      	push	{r7, lr}
 8010394:	b084      	sub	sp, #16
 8010396:	af00      	add	r7, sp, #0
 8010398:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801039e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	f240 523a 	movw	r2, #1338	; 0x53a
 80103a8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80103aa:	68f8      	ldr	r0, [r7, #12]
 80103ac:	f7ff ff9a 	bl	80102e4 <HAL_SD_GetCardState>
 80103b0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	2201      	movs	r2, #1
 80103b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	2200      	movs	r2, #0
 80103be:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	2b06      	cmp	r3, #6
 80103c4:	d002      	beq.n	80103cc <SD_DMARxAbort+0x3a>
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	2b05      	cmp	r3, #5
 80103ca:	d10a      	bne.n	80103e2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	4618      	mov	r0, r3
 80103d2:	f002 fdfb 	bl	8012fcc <SDMMC_CmdStopTransfer>
 80103d6:	4602      	mov	r2, r0
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103dc:	431a      	orrs	r2, r3
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d103      	bne.n	80103f2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80103ea:	68f8      	ldr	r0, [r7, #12]
 80103ec:	f003 fa26 	bl	801383c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80103f0:	e002      	b.n	80103f8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80103f2:	68f8      	ldr	r0, [r7, #12]
 80103f4:	f7ff fd9c 	bl	800ff30 <HAL_SD_ErrorCallback>
}
 80103f8:	bf00      	nop
 80103fa:	3710      	adds	r7, #16
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}

08010400 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8010400:	b5b0      	push	{r4, r5, r7, lr}
 8010402:	b094      	sub	sp, #80	; 0x50
 8010404:	af04      	add	r7, sp, #16
 8010406:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8010408:	2301      	movs	r3, #1
 801040a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	4618      	mov	r0, r3
 8010412:	f002 fcac 	bl	8012d6e <SDIO_GetPowerState>
 8010416:	4603      	mov	r3, r0
 8010418:	2b00      	cmp	r3, #0
 801041a:	d102      	bne.n	8010422 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801041c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8010420:	e0b8      	b.n	8010594 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010426:	2b03      	cmp	r3, #3
 8010428:	d02f      	beq.n	801048a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	4618      	mov	r0, r3
 8010430:	f002 fe93 	bl	801315a <SDMMC_CmdSendCID>
 8010434:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8010436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010438:	2b00      	cmp	r3, #0
 801043a:	d001      	beq.n	8010440 <SD_InitCard+0x40>
    {
      return errorstate;
 801043c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801043e:	e0a9      	b.n	8010594 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	2100      	movs	r1, #0
 8010446:	4618      	mov	r0, r3
 8010448:	f002 fcd6 	bl	8012df8 <SDIO_GetResponse>
 801044c:	4602      	mov	r2, r0
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	2104      	movs	r1, #4
 8010458:	4618      	mov	r0, r3
 801045a:	f002 fccd 	bl	8012df8 <SDIO_GetResponse>
 801045e:	4602      	mov	r2, r0
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	2108      	movs	r1, #8
 801046a:	4618      	mov	r0, r3
 801046c:	f002 fcc4 	bl	8012df8 <SDIO_GetResponse>
 8010470:	4602      	mov	r2, r0
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	210c      	movs	r1, #12
 801047c:	4618      	mov	r0, r3
 801047e:	f002 fcbb 	bl	8012df8 <SDIO_GetResponse>
 8010482:	4602      	mov	r2, r0
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801048e:	2b03      	cmp	r3, #3
 8010490:	d00d      	beq.n	80104ae <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	f107 020e 	add.w	r2, r7, #14
 801049a:	4611      	mov	r1, r2
 801049c:	4618      	mov	r0, r3
 801049e:	f002 fe99 	bl	80131d4 <SDMMC_CmdSetRelAdd>
 80104a2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80104a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d001      	beq.n	80104ae <SD_InitCard+0xae>
    {
      return errorstate;
 80104aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104ac:	e072      	b.n	8010594 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104b2:	2b03      	cmp	r3, #3
 80104b4:	d036      	beq.n	8010524 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80104b6:	89fb      	ldrh	r3, [r7, #14]
 80104b8:	461a      	mov	r2, r3
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	681a      	ldr	r2, [r3, #0]
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104c6:	041b      	lsls	r3, r3, #16
 80104c8:	4619      	mov	r1, r3
 80104ca:	4610      	mov	r0, r2
 80104cc:	f002 fe63 	bl	8013196 <SDMMC_CmdSendCSD>
 80104d0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80104d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d001      	beq.n	80104dc <SD_InitCard+0xdc>
    {
      return errorstate;
 80104d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104da:	e05b      	b.n	8010594 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	2100      	movs	r1, #0
 80104e2:	4618      	mov	r0, r3
 80104e4:	f002 fc88 	bl	8012df8 <SDIO_GetResponse>
 80104e8:	4602      	mov	r2, r0
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	2104      	movs	r1, #4
 80104f4:	4618      	mov	r0, r3
 80104f6:	f002 fc7f 	bl	8012df8 <SDIO_GetResponse>
 80104fa:	4602      	mov	r2, r0
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	2108      	movs	r1, #8
 8010506:	4618      	mov	r0, r3
 8010508:	f002 fc76 	bl	8012df8 <SDIO_GetResponse>
 801050c:	4602      	mov	r2, r0
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	210c      	movs	r1, #12
 8010518:	4618      	mov	r0, r3
 801051a:	f002 fc6d 	bl	8012df8 <SDIO_GetResponse>
 801051e:	4602      	mov	r2, r0
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	2104      	movs	r1, #4
 801052a:	4618      	mov	r0, r3
 801052c:	f002 fc64 	bl	8012df8 <SDIO_GetResponse>
 8010530:	4603      	mov	r3, r0
 8010532:	0d1a      	lsrs	r2, r3, #20
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8010538:	f107 0310 	add.w	r3, r7, #16
 801053c:	4619      	mov	r1, r3
 801053e:	6878      	ldr	r0, [r7, #4]
 8010540:	f7ff fd00 	bl	800ff44 <HAL_SD_GetCardCSD>
 8010544:	4603      	mov	r3, r0
 8010546:	2b00      	cmp	r3, #0
 8010548:	d002      	beq.n	8010550 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801054a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801054e:	e021      	b.n	8010594 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	6819      	ldr	r1, [r3, #0]
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010558:	041b      	lsls	r3, r3, #16
 801055a:	2200      	movs	r2, #0
 801055c:	461c      	mov	r4, r3
 801055e:	4615      	mov	r5, r2
 8010560:	4622      	mov	r2, r4
 8010562:	462b      	mov	r3, r5
 8010564:	4608      	mov	r0, r1
 8010566:	f002 fd53 	bl	8013010 <SDMMC_CmdSelDesel>
 801056a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 801056c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801056e:	2b00      	cmp	r3, #0
 8010570:	d001      	beq.n	8010576 <SD_InitCard+0x176>
  {
    return errorstate;
 8010572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010574:	e00e      	b.n	8010594 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681d      	ldr	r5, [r3, #0]
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	466c      	mov	r4, sp
 801057e:	f103 0210 	add.w	r2, r3, #16
 8010582:	ca07      	ldmia	r2, {r0, r1, r2}
 8010584:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010588:	3304      	adds	r3, #4
 801058a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801058c:	4628      	mov	r0, r5
 801058e:	f002 fb97 	bl	8012cc0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8010592:	2300      	movs	r3, #0
}
 8010594:	4618      	mov	r0, r3
 8010596:	3740      	adds	r7, #64	; 0x40
 8010598:	46bd      	mov	sp, r7
 801059a:	bdb0      	pop	{r4, r5, r7, pc}

0801059c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b086      	sub	sp, #24
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80105a4:	2300      	movs	r3, #0
 80105a6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80105a8:	2300      	movs	r3, #0
 80105aa:	617b      	str	r3, [r7, #20]
 80105ac:	2300      	movs	r3, #0
 80105ae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	4618      	mov	r0, r3
 80105b6:	f002 fd4e 	bl	8013056 <SDMMC_CmdGoIdleState>
 80105ba:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d001      	beq.n	80105c6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	e072      	b.n	80106ac <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	4618      	mov	r0, r3
 80105cc:	f002 fd61 	bl	8013092 <SDMMC_CmdOperCond>
 80105d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d00d      	beq.n	80105f4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2200      	movs	r2, #0
 80105dc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	4618      	mov	r0, r3
 80105e4:	f002 fd37 	bl	8013056 <SDMMC_CmdGoIdleState>
 80105e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d004      	beq.n	80105fa <SD_PowerON+0x5e>
    {
      return errorstate;
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	e05b      	b.n	80106ac <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2201      	movs	r2, #1
 80105f8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80105fe:	2b01      	cmp	r3, #1
 8010600:	d137      	bne.n	8010672 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	2100      	movs	r1, #0
 8010608:	4618      	mov	r0, r3
 801060a:	f002 fd61 	bl	80130d0 <SDMMC_CmdAppCommand>
 801060e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d02d      	beq.n	8010672 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010616:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801061a:	e047      	b.n	80106ac <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	2100      	movs	r1, #0
 8010622:	4618      	mov	r0, r3
 8010624:	f002 fd54 	bl	80130d0 <SDMMC_CmdAppCommand>
 8010628:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d001      	beq.n	8010634 <SD_PowerON+0x98>
    {
      return errorstate;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	e03b      	b.n	80106ac <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	491e      	ldr	r1, [pc, #120]	; (80106b4 <SD_PowerON+0x118>)
 801063a:	4618      	mov	r0, r3
 801063c:	f002 fd6a 	bl	8013114 <SDMMC_CmdAppOperCommand>
 8010640:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d002      	beq.n	801064e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8010648:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801064c:	e02e      	b.n	80106ac <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	2100      	movs	r1, #0
 8010654:	4618      	mov	r0, r3
 8010656:	f002 fbcf 	bl	8012df8 <SDIO_GetResponse>
 801065a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 801065c:	697b      	ldr	r3, [r7, #20]
 801065e:	0fdb      	lsrs	r3, r3, #31
 8010660:	2b01      	cmp	r3, #1
 8010662:	d101      	bne.n	8010668 <SD_PowerON+0xcc>
 8010664:	2301      	movs	r3, #1
 8010666:	e000      	b.n	801066a <SD_PowerON+0xce>
 8010668:	2300      	movs	r3, #0
 801066a:	613b      	str	r3, [r7, #16]

    count++;
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	3301      	adds	r3, #1
 8010670:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010678:	4293      	cmp	r3, r2
 801067a:	d802      	bhi.n	8010682 <SD_PowerON+0xe6>
 801067c:	693b      	ldr	r3, [r7, #16]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d0cc      	beq.n	801061c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010688:	4293      	cmp	r3, r2
 801068a:	d902      	bls.n	8010692 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 801068c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010690:	e00c      	b.n	80106ac <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8010692:	697b      	ldr	r3, [r7, #20]
 8010694:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010698:	2b00      	cmp	r3, #0
 801069a:	d003      	beq.n	80106a4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2201      	movs	r2, #1
 80106a0:	645a      	str	r2, [r3, #68]	; 0x44
 80106a2:	e002      	b.n	80106aa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	2200      	movs	r2, #0
 80106a8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80106aa:	2300      	movs	r3, #0
}
 80106ac:	4618      	mov	r0, r3
 80106ae:	3718      	adds	r7, #24
 80106b0:	46bd      	mov	sp, r7
 80106b2:	bd80      	pop	{r7, pc}
 80106b4:	c1100000 	.word	0xc1100000

080106b8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b084      	sub	sp, #16
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
 80106c0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80106c2:	683b      	ldr	r3, [r7, #0]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d102      	bne.n	80106ce <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80106c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80106cc:	e018      	b.n	8010700 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681a      	ldr	r2, [r3, #0]
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106d6:	041b      	lsls	r3, r3, #16
 80106d8:	4619      	mov	r1, r3
 80106da:	4610      	mov	r0, r2
 80106dc:	f002 fd9b 	bl	8013216 <SDMMC_CmdSendStatus>
 80106e0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d001      	beq.n	80106ec <SD_SendStatus+0x34>
  {
    return errorstate;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	e009      	b.n	8010700 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	2100      	movs	r1, #0
 80106f2:	4618      	mov	r0, r3
 80106f4:	f002 fb80 	bl	8012df8 <SDIO_GetResponse>
 80106f8:	4602      	mov	r2, r0
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80106fe:	2300      	movs	r3, #0
}
 8010700:	4618      	mov	r0, r3
 8010702:	3710      	adds	r7, #16
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}

08010708 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b086      	sub	sp, #24
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010714:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801071a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 801071c:	693b      	ldr	r3, [r7, #16]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d03f      	beq.n	80107a2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8010722:	2300      	movs	r3, #0
 8010724:	617b      	str	r3, [r7, #20]
 8010726:	e033      	b.n	8010790 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	4618      	mov	r0, r3
 801072e:	f002 faf2 	bl	8012d16 <SDIO_ReadFIFO>
 8010732:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	b2da      	uxtb	r2, r3
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	701a      	strb	r2, [r3, #0]
      tmp++;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	3301      	adds	r3, #1
 8010740:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010742:	693b      	ldr	r3, [r7, #16]
 8010744:	3b01      	subs	r3, #1
 8010746:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	0a1b      	lsrs	r3, r3, #8
 801074c:	b2da      	uxtb	r2, r3
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	3301      	adds	r3, #1
 8010756:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010758:	693b      	ldr	r3, [r7, #16]
 801075a:	3b01      	subs	r3, #1
 801075c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	0c1b      	lsrs	r3, r3, #16
 8010762:	b2da      	uxtb	r2, r3
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	3301      	adds	r3, #1
 801076c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801076e:	693b      	ldr	r3, [r7, #16]
 8010770:	3b01      	subs	r3, #1
 8010772:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8010774:	68bb      	ldr	r3, [r7, #8]
 8010776:	0e1b      	lsrs	r3, r3, #24
 8010778:	b2da      	uxtb	r2, r3
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	701a      	strb	r2, [r3, #0]
      tmp++;
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	3301      	adds	r3, #1
 8010782:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010784:	693b      	ldr	r3, [r7, #16]
 8010786:	3b01      	subs	r3, #1
 8010788:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 801078a:	697b      	ldr	r3, [r7, #20]
 801078c:	3301      	adds	r3, #1
 801078e:	617b      	str	r3, [r7, #20]
 8010790:	697b      	ldr	r3, [r7, #20]
 8010792:	2b07      	cmp	r3, #7
 8010794:	d9c8      	bls.n	8010728 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	68fa      	ldr	r2, [r7, #12]
 801079a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	693a      	ldr	r2, [r7, #16]
 80107a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80107a2:	bf00      	nop
 80107a4:	3718      	adds	r7, #24
 80107a6:	46bd      	mov	sp, r7
 80107a8:	bd80      	pop	{r7, pc}

080107aa <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80107aa:	b580      	push	{r7, lr}
 80107ac:	b086      	sub	sp, #24
 80107ae:	af00      	add	r7, sp, #0
 80107b0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	6a1b      	ldr	r3, [r3, #32]
 80107b6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107bc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80107be:	693b      	ldr	r3, [r7, #16]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d043      	beq.n	801084c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80107c4:	2300      	movs	r3, #0
 80107c6:	617b      	str	r3, [r7, #20]
 80107c8:	e037      	b.n	801083a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	781b      	ldrb	r3, [r3, #0]
 80107ce:	60bb      	str	r3, [r7, #8]
      tmp++;
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	3301      	adds	r3, #1
 80107d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80107d6:	693b      	ldr	r3, [r7, #16]
 80107d8:	3b01      	subs	r3, #1
 80107da:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	781b      	ldrb	r3, [r3, #0]
 80107e0:	021a      	lsls	r2, r3, #8
 80107e2:	68bb      	ldr	r3, [r7, #8]
 80107e4:	4313      	orrs	r3, r2
 80107e6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	3301      	adds	r3, #1
 80107ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80107ee:	693b      	ldr	r3, [r7, #16]
 80107f0:	3b01      	subs	r3, #1
 80107f2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	781b      	ldrb	r3, [r3, #0]
 80107f8:	041a      	lsls	r2, r3, #16
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	4313      	orrs	r3, r2
 80107fe:	60bb      	str	r3, [r7, #8]
      tmp++;
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	3301      	adds	r3, #1
 8010804:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010806:	693b      	ldr	r3, [r7, #16]
 8010808:	3b01      	subs	r3, #1
 801080a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	781b      	ldrb	r3, [r3, #0]
 8010810:	061a      	lsls	r2, r3, #24
 8010812:	68bb      	ldr	r3, [r7, #8]
 8010814:	4313      	orrs	r3, r2
 8010816:	60bb      	str	r3, [r7, #8]
      tmp++;
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	3301      	adds	r3, #1
 801081c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801081e:	693b      	ldr	r3, [r7, #16]
 8010820:	3b01      	subs	r3, #1
 8010822:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	f107 0208 	add.w	r2, r7, #8
 801082c:	4611      	mov	r1, r2
 801082e:	4618      	mov	r0, r3
 8010830:	f002 fa7e 	bl	8012d30 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8010834:	697b      	ldr	r3, [r7, #20]
 8010836:	3301      	adds	r3, #1
 8010838:	617b      	str	r3, [r7, #20]
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	2b07      	cmp	r3, #7
 801083e:	d9c4      	bls.n	80107ca <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	68fa      	ldr	r2, [r7, #12]
 8010844:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	693a      	ldr	r2, [r7, #16]
 801084a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 801084c:	bf00      	nop
 801084e:	3718      	adds	r7, #24
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}

08010854 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b082      	sub	sp, #8
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d101      	bne.n	8010866 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010862:	2301      	movs	r3, #1
 8010864:	e07b      	b.n	801095e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801086a:	2b00      	cmp	r3, #0
 801086c:	d108      	bne.n	8010880 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	685b      	ldr	r3, [r3, #4]
 8010872:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010876:	d009      	beq.n	801088c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	2200      	movs	r2, #0
 801087c:	61da      	str	r2, [r3, #28]
 801087e:	e005      	b.n	801088c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2200      	movs	r2, #0
 8010884:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2200      	movs	r2, #0
 801088a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	2200      	movs	r2, #0
 8010890:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010898:	b2db      	uxtb	r3, r3
 801089a:	2b00      	cmp	r3, #0
 801089c:	d106      	bne.n	80108ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	2200      	movs	r2, #0
 80108a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	f7fc feac 	bl	800d604 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2202      	movs	r2, #2
 80108b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	681a      	ldr	r2, [r3, #0]
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80108c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	685b      	ldr	r3, [r3, #4]
 80108c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	689b      	ldr	r3, [r3, #8]
 80108d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80108d4:	431a      	orrs	r2, r3
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	68db      	ldr	r3, [r3, #12]
 80108da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80108de:	431a      	orrs	r2, r3
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	691b      	ldr	r3, [r3, #16]
 80108e4:	f003 0302 	and.w	r3, r3, #2
 80108e8:	431a      	orrs	r2, r3
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	695b      	ldr	r3, [r3, #20]
 80108ee:	f003 0301 	and.w	r3, r3, #1
 80108f2:	431a      	orrs	r2, r3
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	699b      	ldr	r3, [r3, #24]
 80108f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80108fc:	431a      	orrs	r2, r3
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	69db      	ldr	r3, [r3, #28]
 8010902:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010906:	431a      	orrs	r2, r3
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	6a1b      	ldr	r3, [r3, #32]
 801090c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010910:	ea42 0103 	orr.w	r1, r2, r3
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010918:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	430a      	orrs	r2, r1
 8010922:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	699b      	ldr	r3, [r3, #24]
 8010928:	0c1b      	lsrs	r3, r3, #16
 801092a:	f003 0104 	and.w	r1, r3, #4
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010932:	f003 0210 	and.w	r2, r3, #16
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	430a      	orrs	r2, r1
 801093c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	69da      	ldr	r2, [r3, #28]
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801094c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2200      	movs	r2, #0
 8010952:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	2201      	movs	r2, #1
 8010958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801095c:	2300      	movs	r3, #0
}
 801095e:	4618      	mov	r0, r3
 8010960:	3708      	adds	r7, #8
 8010962:	46bd      	mov	sp, r7
 8010964:	bd80      	pop	{r7, pc}

08010966 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010966:	b580      	push	{r7, lr}
 8010968:	b088      	sub	sp, #32
 801096a:	af00      	add	r7, sp, #0
 801096c:	60f8      	str	r0, [r7, #12]
 801096e:	60b9      	str	r1, [r7, #8]
 8010970:	603b      	str	r3, [r7, #0]
 8010972:	4613      	mov	r3, r2
 8010974:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010976:	2300      	movs	r3, #0
 8010978:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010980:	2b01      	cmp	r3, #1
 8010982:	d101      	bne.n	8010988 <HAL_SPI_Transmit+0x22>
 8010984:	2302      	movs	r3, #2
 8010986:	e12d      	b.n	8010be4 <HAL_SPI_Transmit+0x27e>
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	2201      	movs	r2, #1
 801098c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010990:	f7fd f97a 	bl	800dc88 <HAL_GetTick>
 8010994:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8010996:	88fb      	ldrh	r3, [r7, #6]
 8010998:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80109a0:	b2db      	uxtb	r3, r3
 80109a2:	2b01      	cmp	r3, #1
 80109a4:	d002      	beq.n	80109ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80109a6:	2302      	movs	r3, #2
 80109a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80109aa:	e116      	b.n	8010bda <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80109ac:	68bb      	ldr	r3, [r7, #8]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d002      	beq.n	80109b8 <HAL_SPI_Transmit+0x52>
 80109b2:	88fb      	ldrh	r3, [r7, #6]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d102      	bne.n	80109be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80109b8:	2301      	movs	r3, #1
 80109ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80109bc:	e10d      	b.n	8010bda <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	2203      	movs	r2, #3
 80109c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	2200      	movs	r2, #0
 80109ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	68ba      	ldr	r2, [r7, #8]
 80109d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	88fa      	ldrh	r2, [r7, #6]
 80109d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	88fa      	ldrh	r2, [r7, #6]
 80109dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	2200      	movs	r2, #0
 80109e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	2200      	movs	r2, #0
 80109e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	2200      	movs	r2, #0
 80109ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	2200      	movs	r2, #0
 80109f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	2200      	movs	r2, #0
 80109fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	689b      	ldr	r3, [r3, #8]
 8010a00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010a04:	d10f      	bne.n	8010a26 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	681a      	ldr	r2, [r3, #0]
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010a14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	681a      	ldr	r2, [r3, #0]
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010a24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a30:	2b40      	cmp	r3, #64	; 0x40
 8010a32:	d007      	beq.n	8010a44 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	681a      	ldr	r2, [r3, #0]
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010a42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	68db      	ldr	r3, [r3, #12]
 8010a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010a4c:	d14f      	bne.n	8010aee <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	685b      	ldr	r3, [r3, #4]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d002      	beq.n	8010a5c <HAL_SPI_Transmit+0xf6>
 8010a56:	8afb      	ldrh	r3, [r7, #22]
 8010a58:	2b01      	cmp	r3, #1
 8010a5a:	d142      	bne.n	8010ae2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a60:	881a      	ldrh	r2, [r3, #0]
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a6c:	1c9a      	adds	r2, r3, #2
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010a76:	b29b      	uxth	r3, r3
 8010a78:	3b01      	subs	r3, #1
 8010a7a:	b29a      	uxth	r2, r3
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8010a80:	e02f      	b.n	8010ae2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	689b      	ldr	r3, [r3, #8]
 8010a88:	f003 0302 	and.w	r3, r3, #2
 8010a8c:	2b02      	cmp	r3, #2
 8010a8e:	d112      	bne.n	8010ab6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a94:	881a      	ldrh	r2, [r3, #0]
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010aa0:	1c9a      	adds	r2, r3, #2
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010aaa:	b29b      	uxth	r3, r3
 8010aac:	3b01      	subs	r3, #1
 8010aae:	b29a      	uxth	r2, r3
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	86da      	strh	r2, [r3, #54]	; 0x36
 8010ab4:	e015      	b.n	8010ae2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010ab6:	f7fd f8e7 	bl	800dc88 <HAL_GetTick>
 8010aba:	4602      	mov	r2, r0
 8010abc:	69bb      	ldr	r3, [r7, #24]
 8010abe:	1ad3      	subs	r3, r2, r3
 8010ac0:	683a      	ldr	r2, [r7, #0]
 8010ac2:	429a      	cmp	r2, r3
 8010ac4:	d803      	bhi.n	8010ace <HAL_SPI_Transmit+0x168>
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010acc:	d102      	bne.n	8010ad4 <HAL_SPI_Transmit+0x16e>
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d106      	bne.n	8010ae2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8010ad4:	2303      	movs	r3, #3
 8010ad6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	2201      	movs	r2, #1
 8010adc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8010ae0:	e07b      	b.n	8010bda <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010ae6:	b29b      	uxth	r3, r3
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d1ca      	bne.n	8010a82 <HAL_SPI_Transmit+0x11c>
 8010aec:	e050      	b.n	8010b90 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	685b      	ldr	r3, [r3, #4]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d002      	beq.n	8010afc <HAL_SPI_Transmit+0x196>
 8010af6:	8afb      	ldrh	r3, [r7, #22]
 8010af8:	2b01      	cmp	r3, #1
 8010afa:	d144      	bne.n	8010b86 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	330c      	adds	r3, #12
 8010b06:	7812      	ldrb	r2, [r2, #0]
 8010b08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b0e:	1c5a      	adds	r2, r3, #1
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010b18:	b29b      	uxth	r3, r3
 8010b1a:	3b01      	subs	r3, #1
 8010b1c:	b29a      	uxth	r2, r3
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8010b22:	e030      	b.n	8010b86 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	689b      	ldr	r3, [r3, #8]
 8010b2a:	f003 0302 	and.w	r3, r3, #2
 8010b2e:	2b02      	cmp	r3, #2
 8010b30:	d113      	bne.n	8010b5a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	330c      	adds	r3, #12
 8010b3c:	7812      	ldrb	r2, [r2, #0]
 8010b3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b44:	1c5a      	adds	r2, r3, #1
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010b4e:	b29b      	uxth	r3, r3
 8010b50:	3b01      	subs	r3, #1
 8010b52:	b29a      	uxth	r2, r3
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	86da      	strh	r2, [r3, #54]	; 0x36
 8010b58:	e015      	b.n	8010b86 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010b5a:	f7fd f895 	bl	800dc88 <HAL_GetTick>
 8010b5e:	4602      	mov	r2, r0
 8010b60:	69bb      	ldr	r3, [r7, #24]
 8010b62:	1ad3      	subs	r3, r2, r3
 8010b64:	683a      	ldr	r2, [r7, #0]
 8010b66:	429a      	cmp	r2, r3
 8010b68:	d803      	bhi.n	8010b72 <HAL_SPI_Transmit+0x20c>
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b70:	d102      	bne.n	8010b78 <HAL_SPI_Transmit+0x212>
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d106      	bne.n	8010b86 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8010b78:	2303      	movs	r3, #3
 8010b7a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	2201      	movs	r2, #1
 8010b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8010b84:	e029      	b.n	8010bda <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010b8a:	b29b      	uxth	r3, r3
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d1c9      	bne.n	8010b24 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010b90:	69ba      	ldr	r2, [r7, #24]
 8010b92:	6839      	ldr	r1, [r7, #0]
 8010b94:	68f8      	ldr	r0, [r7, #12]
 8010b96:	f000 f8b1 	bl	8010cfc <SPI_EndRxTxTransaction>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d002      	beq.n	8010ba6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	2220      	movs	r2, #32
 8010ba4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	689b      	ldr	r3, [r3, #8]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d10a      	bne.n	8010bc4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010bae:	2300      	movs	r3, #0
 8010bb0:	613b      	str	r3, [r7, #16]
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	68db      	ldr	r3, [r3, #12]
 8010bb8:	613b      	str	r3, [r7, #16]
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	689b      	ldr	r3, [r3, #8]
 8010bc0:	613b      	str	r3, [r7, #16]
 8010bc2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d002      	beq.n	8010bd2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8010bcc:	2301      	movs	r3, #1
 8010bce:	77fb      	strb	r3, [r7, #31]
 8010bd0:	e003      	b.n	8010bda <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	2201      	movs	r2, #1
 8010bd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	2200      	movs	r2, #0
 8010bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010be2:	7ffb      	ldrb	r3, [r7, #31]
}
 8010be4:	4618      	mov	r0, r3
 8010be6:	3720      	adds	r7, #32
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}

08010bec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b088      	sub	sp, #32
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	60f8      	str	r0, [r7, #12]
 8010bf4:	60b9      	str	r1, [r7, #8]
 8010bf6:	603b      	str	r3, [r7, #0]
 8010bf8:	4613      	mov	r3, r2
 8010bfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8010bfc:	f7fd f844 	bl	800dc88 <HAL_GetTick>
 8010c00:	4602      	mov	r2, r0
 8010c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c04:	1a9b      	subs	r3, r3, r2
 8010c06:	683a      	ldr	r2, [r7, #0]
 8010c08:	4413      	add	r3, r2
 8010c0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8010c0c:	f7fd f83c 	bl	800dc88 <HAL_GetTick>
 8010c10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8010c12:	4b39      	ldr	r3, [pc, #228]	; (8010cf8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	015b      	lsls	r3, r3, #5
 8010c18:	0d1b      	lsrs	r3, r3, #20
 8010c1a:	69fa      	ldr	r2, [r7, #28]
 8010c1c:	fb02 f303 	mul.w	r3, r2, r3
 8010c20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010c22:	e054      	b.n	8010cce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c2a:	d050      	beq.n	8010cce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010c2c:	f7fd f82c 	bl	800dc88 <HAL_GetTick>
 8010c30:	4602      	mov	r2, r0
 8010c32:	69bb      	ldr	r3, [r7, #24]
 8010c34:	1ad3      	subs	r3, r2, r3
 8010c36:	69fa      	ldr	r2, [r7, #28]
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	d902      	bls.n	8010c42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8010c3c:	69fb      	ldr	r3, [r7, #28]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d13d      	bne.n	8010cbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	685a      	ldr	r2, [r3, #4]
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010c50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	685b      	ldr	r3, [r3, #4]
 8010c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010c5a:	d111      	bne.n	8010c80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	689b      	ldr	r3, [r3, #8]
 8010c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010c64:	d004      	beq.n	8010c70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	689b      	ldr	r3, [r3, #8]
 8010c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010c6e:	d107      	bne.n	8010c80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	681a      	ldr	r2, [r3, #0]
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010c7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010c88:	d10f      	bne.n	8010caa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	681a      	ldr	r2, [r3, #0]
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010c98:	601a      	str	r2, [r3, #0]
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	681a      	ldr	r2, [r3, #0]
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010ca8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	2201      	movs	r2, #1
 8010cae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8010cba:	2303      	movs	r3, #3
 8010cbc:	e017      	b.n	8010cee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010cbe:	697b      	ldr	r3, [r7, #20]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d101      	bne.n	8010cc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8010cc8:	697b      	ldr	r3, [r7, #20]
 8010cca:	3b01      	subs	r3, #1
 8010ccc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	689a      	ldr	r2, [r3, #8]
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	4013      	ands	r3, r2
 8010cd8:	68ba      	ldr	r2, [r7, #8]
 8010cda:	429a      	cmp	r2, r3
 8010cdc:	bf0c      	ite	eq
 8010cde:	2301      	moveq	r3, #1
 8010ce0:	2300      	movne	r3, #0
 8010ce2:	b2db      	uxtb	r3, r3
 8010ce4:	461a      	mov	r2, r3
 8010ce6:	79fb      	ldrb	r3, [r7, #7]
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	d19b      	bne.n	8010c24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8010cec:	2300      	movs	r3, #0
}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	3720      	adds	r7, #32
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd80      	pop	{r7, pc}
 8010cf6:	bf00      	nop
 8010cf8:	20000000 	.word	0x20000000

08010cfc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b088      	sub	sp, #32
 8010d00:	af02      	add	r7, sp, #8
 8010d02:	60f8      	str	r0, [r7, #12]
 8010d04:	60b9      	str	r1, [r7, #8]
 8010d06:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	9300      	str	r3, [sp, #0]
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	2201      	movs	r2, #1
 8010d10:	2102      	movs	r1, #2
 8010d12:	68f8      	ldr	r0, [r7, #12]
 8010d14:	f7ff ff6a 	bl	8010bec <SPI_WaitFlagStateUntilTimeout>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d007      	beq.n	8010d2e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d22:	f043 0220 	orr.w	r2, r3, #32
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8010d2a:	2303      	movs	r3, #3
 8010d2c:	e032      	b.n	8010d94 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8010d2e:	4b1b      	ldr	r3, [pc, #108]	; (8010d9c <SPI_EndRxTxTransaction+0xa0>)
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	4a1b      	ldr	r2, [pc, #108]	; (8010da0 <SPI_EndRxTxTransaction+0xa4>)
 8010d34:	fba2 2303 	umull	r2, r3, r2, r3
 8010d38:	0d5b      	lsrs	r3, r3, #21
 8010d3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010d3e:	fb02 f303 	mul.w	r3, r2, r3
 8010d42:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	685b      	ldr	r3, [r3, #4]
 8010d48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010d4c:	d112      	bne.n	8010d74 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	9300      	str	r3, [sp, #0]
 8010d52:	68bb      	ldr	r3, [r7, #8]
 8010d54:	2200      	movs	r2, #0
 8010d56:	2180      	movs	r1, #128	; 0x80
 8010d58:	68f8      	ldr	r0, [r7, #12]
 8010d5a:	f7ff ff47 	bl	8010bec <SPI_WaitFlagStateUntilTimeout>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d016      	beq.n	8010d92 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d68:	f043 0220 	orr.w	r2, r3, #32
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8010d70:	2303      	movs	r3, #3
 8010d72:	e00f      	b.n	8010d94 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8010d74:	697b      	ldr	r3, [r7, #20]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d00a      	beq.n	8010d90 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8010d7a:	697b      	ldr	r3, [r7, #20]
 8010d7c:	3b01      	subs	r3, #1
 8010d7e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	689b      	ldr	r3, [r3, #8]
 8010d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d8a:	2b80      	cmp	r3, #128	; 0x80
 8010d8c:	d0f2      	beq.n	8010d74 <SPI_EndRxTxTransaction+0x78>
 8010d8e:	e000      	b.n	8010d92 <SPI_EndRxTxTransaction+0x96>
        break;
 8010d90:	bf00      	nop
  }

  return HAL_OK;
 8010d92:	2300      	movs	r3, #0
}
 8010d94:	4618      	mov	r0, r3
 8010d96:	3718      	adds	r7, #24
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}
 8010d9c:	20000000 	.word	0x20000000
 8010da0:	165e9f81 	.word	0x165e9f81

08010da4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b082      	sub	sp, #8
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d101      	bne.n	8010db6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010db2:	2301      	movs	r3, #1
 8010db4:	e041      	b.n	8010e3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010dbc:	b2db      	uxtb	r3, r3
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d106      	bne.n	8010dd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010dca:	6878      	ldr	r0, [r7, #4]
 8010dcc:	f7fc fc62 	bl	800d694 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	2202      	movs	r2, #2
 8010dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681a      	ldr	r2, [r3, #0]
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	3304      	adds	r3, #4
 8010de0:	4619      	mov	r1, r3
 8010de2:	4610      	mov	r0, r2
 8010de4:	f000 f9b8 	bl	8011158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	2201      	movs	r2, #1
 8010dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	2201      	movs	r2, #1
 8010df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2201      	movs	r2, #1
 8010dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	2201      	movs	r2, #1
 8010e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2201      	movs	r2, #1
 8010e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2201      	movs	r2, #1
 8010e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	2201      	movs	r2, #1
 8010e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	2201      	movs	r2, #1
 8010e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2201      	movs	r2, #1
 8010e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2201      	movs	r2, #1
 8010e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010e38:	2300      	movs	r3, #0
}
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	3708      	adds	r7, #8
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	bd80      	pop	{r7, pc}
	...

08010e44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b084      	sub	sp, #16
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
 8010e4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010e4e:	683b      	ldr	r3, [r7, #0]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d109      	bne.n	8010e68 <HAL_TIM_PWM_Start+0x24>
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010e5a:	b2db      	uxtb	r3, r3
 8010e5c:	2b01      	cmp	r3, #1
 8010e5e:	bf14      	ite	ne
 8010e60:	2301      	movne	r3, #1
 8010e62:	2300      	moveq	r3, #0
 8010e64:	b2db      	uxtb	r3, r3
 8010e66:	e022      	b.n	8010eae <HAL_TIM_PWM_Start+0x6a>
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	2b04      	cmp	r3, #4
 8010e6c:	d109      	bne.n	8010e82 <HAL_TIM_PWM_Start+0x3e>
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010e74:	b2db      	uxtb	r3, r3
 8010e76:	2b01      	cmp	r3, #1
 8010e78:	bf14      	ite	ne
 8010e7a:	2301      	movne	r3, #1
 8010e7c:	2300      	moveq	r3, #0
 8010e7e:	b2db      	uxtb	r3, r3
 8010e80:	e015      	b.n	8010eae <HAL_TIM_PWM_Start+0x6a>
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	2b08      	cmp	r3, #8
 8010e86:	d109      	bne.n	8010e9c <HAL_TIM_PWM_Start+0x58>
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e8e:	b2db      	uxtb	r3, r3
 8010e90:	2b01      	cmp	r3, #1
 8010e92:	bf14      	ite	ne
 8010e94:	2301      	movne	r3, #1
 8010e96:	2300      	moveq	r3, #0
 8010e98:	b2db      	uxtb	r3, r3
 8010e9a:	e008      	b.n	8010eae <HAL_TIM_PWM_Start+0x6a>
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010ea2:	b2db      	uxtb	r3, r3
 8010ea4:	2b01      	cmp	r3, #1
 8010ea6:	bf14      	ite	ne
 8010ea8:	2301      	movne	r3, #1
 8010eaa:	2300      	moveq	r3, #0
 8010eac:	b2db      	uxtb	r3, r3
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d001      	beq.n	8010eb6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8010eb2:	2301      	movs	r3, #1
 8010eb4:	e07c      	b.n	8010fb0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010eb6:	683b      	ldr	r3, [r7, #0]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d104      	bne.n	8010ec6 <HAL_TIM_PWM_Start+0x82>
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2202      	movs	r2, #2
 8010ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010ec4:	e013      	b.n	8010eee <HAL_TIM_PWM_Start+0xaa>
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	2b04      	cmp	r3, #4
 8010eca:	d104      	bne.n	8010ed6 <HAL_TIM_PWM_Start+0x92>
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	2202      	movs	r2, #2
 8010ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010ed4:	e00b      	b.n	8010eee <HAL_TIM_PWM_Start+0xaa>
 8010ed6:	683b      	ldr	r3, [r7, #0]
 8010ed8:	2b08      	cmp	r3, #8
 8010eda:	d104      	bne.n	8010ee6 <HAL_TIM_PWM_Start+0xa2>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	2202      	movs	r2, #2
 8010ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010ee4:	e003      	b.n	8010eee <HAL_TIM_PWM_Start+0xaa>
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	2202      	movs	r2, #2
 8010eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	2201      	movs	r2, #1
 8010ef4:	6839      	ldr	r1, [r7, #0]
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f000 fb8a 	bl	8011610 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	4a2d      	ldr	r2, [pc, #180]	; (8010fb8 <HAL_TIM_PWM_Start+0x174>)
 8010f02:	4293      	cmp	r3, r2
 8010f04:	d004      	beq.n	8010f10 <HAL_TIM_PWM_Start+0xcc>
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	4a2c      	ldr	r2, [pc, #176]	; (8010fbc <HAL_TIM_PWM_Start+0x178>)
 8010f0c:	4293      	cmp	r3, r2
 8010f0e:	d101      	bne.n	8010f14 <HAL_TIM_PWM_Start+0xd0>
 8010f10:	2301      	movs	r3, #1
 8010f12:	e000      	b.n	8010f16 <HAL_TIM_PWM_Start+0xd2>
 8010f14:	2300      	movs	r3, #0
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d007      	beq.n	8010f2a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010f28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	4a22      	ldr	r2, [pc, #136]	; (8010fb8 <HAL_TIM_PWM_Start+0x174>)
 8010f30:	4293      	cmp	r3, r2
 8010f32:	d022      	beq.n	8010f7a <HAL_TIM_PWM_Start+0x136>
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010f3c:	d01d      	beq.n	8010f7a <HAL_TIM_PWM_Start+0x136>
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	4a1f      	ldr	r2, [pc, #124]	; (8010fc0 <HAL_TIM_PWM_Start+0x17c>)
 8010f44:	4293      	cmp	r3, r2
 8010f46:	d018      	beq.n	8010f7a <HAL_TIM_PWM_Start+0x136>
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	4a1d      	ldr	r2, [pc, #116]	; (8010fc4 <HAL_TIM_PWM_Start+0x180>)
 8010f4e:	4293      	cmp	r3, r2
 8010f50:	d013      	beq.n	8010f7a <HAL_TIM_PWM_Start+0x136>
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	4a1c      	ldr	r2, [pc, #112]	; (8010fc8 <HAL_TIM_PWM_Start+0x184>)
 8010f58:	4293      	cmp	r3, r2
 8010f5a:	d00e      	beq.n	8010f7a <HAL_TIM_PWM_Start+0x136>
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	4a16      	ldr	r2, [pc, #88]	; (8010fbc <HAL_TIM_PWM_Start+0x178>)
 8010f62:	4293      	cmp	r3, r2
 8010f64:	d009      	beq.n	8010f7a <HAL_TIM_PWM_Start+0x136>
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	4a18      	ldr	r2, [pc, #96]	; (8010fcc <HAL_TIM_PWM_Start+0x188>)
 8010f6c:	4293      	cmp	r3, r2
 8010f6e:	d004      	beq.n	8010f7a <HAL_TIM_PWM_Start+0x136>
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	4a16      	ldr	r2, [pc, #88]	; (8010fd0 <HAL_TIM_PWM_Start+0x18c>)
 8010f76:	4293      	cmp	r3, r2
 8010f78:	d111      	bne.n	8010f9e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	689b      	ldr	r3, [r3, #8]
 8010f80:	f003 0307 	and.w	r3, r3, #7
 8010f84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	2b06      	cmp	r3, #6
 8010f8a:	d010      	beq.n	8010fae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	681a      	ldr	r2, [r3, #0]
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	f042 0201 	orr.w	r2, r2, #1
 8010f9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010f9c:	e007      	b.n	8010fae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	681a      	ldr	r2, [r3, #0]
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	f042 0201 	orr.w	r2, r2, #1
 8010fac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010fae:	2300      	movs	r3, #0
}
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	3710      	adds	r7, #16
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	bd80      	pop	{r7, pc}
 8010fb8:	40010000 	.word	0x40010000
 8010fbc:	40010400 	.word	0x40010400
 8010fc0:	40000400 	.word	0x40000400
 8010fc4:	40000800 	.word	0x40000800
 8010fc8:	40000c00 	.word	0x40000c00
 8010fcc:	40014000 	.word	0x40014000
 8010fd0:	40001800 	.word	0x40001800

08010fd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b086      	sub	sp, #24
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	60f8      	str	r0, [r7, #12]
 8010fdc:	60b9      	str	r1, [r7, #8]
 8010fde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010fea:	2b01      	cmp	r3, #1
 8010fec:	d101      	bne.n	8010ff2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010fee:	2302      	movs	r3, #2
 8010ff0:	e0ae      	b.n	8011150 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	2201      	movs	r2, #1
 8010ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2b0c      	cmp	r3, #12
 8010ffe:	f200 809f 	bhi.w	8011140 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8011002:	a201      	add	r2, pc, #4	; (adr r2, 8011008 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011008:	0801103d 	.word	0x0801103d
 801100c:	08011141 	.word	0x08011141
 8011010:	08011141 	.word	0x08011141
 8011014:	08011141 	.word	0x08011141
 8011018:	0801107d 	.word	0x0801107d
 801101c:	08011141 	.word	0x08011141
 8011020:	08011141 	.word	0x08011141
 8011024:	08011141 	.word	0x08011141
 8011028:	080110bf 	.word	0x080110bf
 801102c:	08011141 	.word	0x08011141
 8011030:	08011141 	.word	0x08011141
 8011034:	08011141 	.word	0x08011141
 8011038:	080110ff 	.word	0x080110ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	68b9      	ldr	r1, [r7, #8]
 8011042:	4618      	mov	r0, r3
 8011044:	f000 f934 	bl	80112b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	699a      	ldr	r2, [r3, #24]
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	f042 0208 	orr.w	r2, r2, #8
 8011056:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	699a      	ldr	r2, [r3, #24]
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	f022 0204 	bic.w	r2, r2, #4
 8011066:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	6999      	ldr	r1, [r3, #24]
 801106e:	68bb      	ldr	r3, [r7, #8]
 8011070:	691a      	ldr	r2, [r3, #16]
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	430a      	orrs	r2, r1
 8011078:	619a      	str	r2, [r3, #24]
      break;
 801107a:	e064      	b.n	8011146 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	68b9      	ldr	r1, [r7, #8]
 8011082:	4618      	mov	r0, r3
 8011084:	f000 f984 	bl	8011390 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	699a      	ldr	r2, [r3, #24]
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011096:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	699a      	ldr	r2, [r3, #24]
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80110a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	6999      	ldr	r1, [r3, #24]
 80110ae:	68bb      	ldr	r3, [r7, #8]
 80110b0:	691b      	ldr	r3, [r3, #16]
 80110b2:	021a      	lsls	r2, r3, #8
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	430a      	orrs	r2, r1
 80110ba:	619a      	str	r2, [r3, #24]
      break;
 80110bc:	e043      	b.n	8011146 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	68b9      	ldr	r1, [r7, #8]
 80110c4:	4618      	mov	r0, r3
 80110c6:	f000 f9d9 	bl	801147c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	69da      	ldr	r2, [r3, #28]
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	f042 0208 	orr.w	r2, r2, #8
 80110d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	69da      	ldr	r2, [r3, #28]
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	f022 0204 	bic.w	r2, r2, #4
 80110e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	69d9      	ldr	r1, [r3, #28]
 80110f0:	68bb      	ldr	r3, [r7, #8]
 80110f2:	691a      	ldr	r2, [r3, #16]
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	430a      	orrs	r2, r1
 80110fa:	61da      	str	r2, [r3, #28]
      break;
 80110fc:	e023      	b.n	8011146 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	68b9      	ldr	r1, [r7, #8]
 8011104:	4618      	mov	r0, r3
 8011106:	f000 fa2d 	bl	8011564 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	69da      	ldr	r2, [r3, #28]
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011118:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	69da      	ldr	r2, [r3, #28]
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011128:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	69d9      	ldr	r1, [r3, #28]
 8011130:	68bb      	ldr	r3, [r7, #8]
 8011132:	691b      	ldr	r3, [r3, #16]
 8011134:	021a      	lsls	r2, r3, #8
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	430a      	orrs	r2, r1
 801113c:	61da      	str	r2, [r3, #28]
      break;
 801113e:	e002      	b.n	8011146 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8011140:	2301      	movs	r3, #1
 8011142:	75fb      	strb	r3, [r7, #23]
      break;
 8011144:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	2200      	movs	r2, #0
 801114a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801114e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011150:	4618      	mov	r0, r3
 8011152:	3718      	adds	r7, #24
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}

08011158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011158:	b480      	push	{r7}
 801115a:	b085      	sub	sp, #20
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
 8011160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	4a46      	ldr	r2, [pc, #280]	; (8011284 <TIM_Base_SetConfig+0x12c>)
 801116c:	4293      	cmp	r3, r2
 801116e:	d013      	beq.n	8011198 <TIM_Base_SetConfig+0x40>
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011176:	d00f      	beq.n	8011198 <TIM_Base_SetConfig+0x40>
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	4a43      	ldr	r2, [pc, #268]	; (8011288 <TIM_Base_SetConfig+0x130>)
 801117c:	4293      	cmp	r3, r2
 801117e:	d00b      	beq.n	8011198 <TIM_Base_SetConfig+0x40>
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	4a42      	ldr	r2, [pc, #264]	; (801128c <TIM_Base_SetConfig+0x134>)
 8011184:	4293      	cmp	r3, r2
 8011186:	d007      	beq.n	8011198 <TIM_Base_SetConfig+0x40>
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	4a41      	ldr	r2, [pc, #260]	; (8011290 <TIM_Base_SetConfig+0x138>)
 801118c:	4293      	cmp	r3, r2
 801118e:	d003      	beq.n	8011198 <TIM_Base_SetConfig+0x40>
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	4a40      	ldr	r2, [pc, #256]	; (8011294 <TIM_Base_SetConfig+0x13c>)
 8011194:	4293      	cmp	r3, r2
 8011196:	d108      	bne.n	80111aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801119e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80111a0:	683b      	ldr	r3, [r7, #0]
 80111a2:	685b      	ldr	r3, [r3, #4]
 80111a4:	68fa      	ldr	r2, [r7, #12]
 80111a6:	4313      	orrs	r3, r2
 80111a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	4a35      	ldr	r2, [pc, #212]	; (8011284 <TIM_Base_SetConfig+0x12c>)
 80111ae:	4293      	cmp	r3, r2
 80111b0:	d02b      	beq.n	801120a <TIM_Base_SetConfig+0xb2>
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80111b8:	d027      	beq.n	801120a <TIM_Base_SetConfig+0xb2>
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	4a32      	ldr	r2, [pc, #200]	; (8011288 <TIM_Base_SetConfig+0x130>)
 80111be:	4293      	cmp	r3, r2
 80111c0:	d023      	beq.n	801120a <TIM_Base_SetConfig+0xb2>
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	4a31      	ldr	r2, [pc, #196]	; (801128c <TIM_Base_SetConfig+0x134>)
 80111c6:	4293      	cmp	r3, r2
 80111c8:	d01f      	beq.n	801120a <TIM_Base_SetConfig+0xb2>
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	4a30      	ldr	r2, [pc, #192]	; (8011290 <TIM_Base_SetConfig+0x138>)
 80111ce:	4293      	cmp	r3, r2
 80111d0:	d01b      	beq.n	801120a <TIM_Base_SetConfig+0xb2>
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	4a2f      	ldr	r2, [pc, #188]	; (8011294 <TIM_Base_SetConfig+0x13c>)
 80111d6:	4293      	cmp	r3, r2
 80111d8:	d017      	beq.n	801120a <TIM_Base_SetConfig+0xb2>
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	4a2e      	ldr	r2, [pc, #184]	; (8011298 <TIM_Base_SetConfig+0x140>)
 80111de:	4293      	cmp	r3, r2
 80111e0:	d013      	beq.n	801120a <TIM_Base_SetConfig+0xb2>
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	4a2d      	ldr	r2, [pc, #180]	; (801129c <TIM_Base_SetConfig+0x144>)
 80111e6:	4293      	cmp	r3, r2
 80111e8:	d00f      	beq.n	801120a <TIM_Base_SetConfig+0xb2>
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	4a2c      	ldr	r2, [pc, #176]	; (80112a0 <TIM_Base_SetConfig+0x148>)
 80111ee:	4293      	cmp	r3, r2
 80111f0:	d00b      	beq.n	801120a <TIM_Base_SetConfig+0xb2>
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	4a2b      	ldr	r2, [pc, #172]	; (80112a4 <TIM_Base_SetConfig+0x14c>)
 80111f6:	4293      	cmp	r3, r2
 80111f8:	d007      	beq.n	801120a <TIM_Base_SetConfig+0xb2>
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	4a2a      	ldr	r2, [pc, #168]	; (80112a8 <TIM_Base_SetConfig+0x150>)
 80111fe:	4293      	cmp	r3, r2
 8011200:	d003      	beq.n	801120a <TIM_Base_SetConfig+0xb2>
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	4a29      	ldr	r2, [pc, #164]	; (80112ac <TIM_Base_SetConfig+0x154>)
 8011206:	4293      	cmp	r3, r2
 8011208:	d108      	bne.n	801121c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	68db      	ldr	r3, [r3, #12]
 8011216:	68fa      	ldr	r2, [r7, #12]
 8011218:	4313      	orrs	r3, r2
 801121a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	695b      	ldr	r3, [r3, #20]
 8011226:	4313      	orrs	r3, r2
 8011228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	68fa      	ldr	r2, [r7, #12]
 801122e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	689a      	ldr	r2, [r3, #8]
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	681a      	ldr	r2, [r3, #0]
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	4a10      	ldr	r2, [pc, #64]	; (8011284 <TIM_Base_SetConfig+0x12c>)
 8011244:	4293      	cmp	r3, r2
 8011246:	d003      	beq.n	8011250 <TIM_Base_SetConfig+0xf8>
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	4a12      	ldr	r2, [pc, #72]	; (8011294 <TIM_Base_SetConfig+0x13c>)
 801124c:	4293      	cmp	r3, r2
 801124e:	d103      	bne.n	8011258 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	691a      	ldr	r2, [r3, #16]
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2201      	movs	r2, #1
 801125c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	691b      	ldr	r3, [r3, #16]
 8011262:	f003 0301 	and.w	r3, r3, #1
 8011266:	2b01      	cmp	r3, #1
 8011268:	d105      	bne.n	8011276 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	691b      	ldr	r3, [r3, #16]
 801126e:	f023 0201 	bic.w	r2, r3, #1
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	611a      	str	r2, [r3, #16]
  }
}
 8011276:	bf00      	nop
 8011278:	3714      	adds	r7, #20
 801127a:	46bd      	mov	sp, r7
 801127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011280:	4770      	bx	lr
 8011282:	bf00      	nop
 8011284:	40010000 	.word	0x40010000
 8011288:	40000400 	.word	0x40000400
 801128c:	40000800 	.word	0x40000800
 8011290:	40000c00 	.word	0x40000c00
 8011294:	40010400 	.word	0x40010400
 8011298:	40014000 	.word	0x40014000
 801129c:	40014400 	.word	0x40014400
 80112a0:	40014800 	.word	0x40014800
 80112a4:	40001800 	.word	0x40001800
 80112a8:	40001c00 	.word	0x40001c00
 80112ac:	40002000 	.word	0x40002000

080112b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80112b0:	b480      	push	{r7}
 80112b2:	b087      	sub	sp, #28
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
 80112b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	6a1b      	ldr	r3, [r3, #32]
 80112be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	6a1b      	ldr	r3, [r3, #32]
 80112c4:	f023 0201 	bic.w	r2, r3, #1
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	685b      	ldr	r3, [r3, #4]
 80112d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	699b      	ldr	r3, [r3, #24]
 80112d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80112de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	f023 0303 	bic.w	r3, r3, #3
 80112e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	68fa      	ldr	r2, [r7, #12]
 80112ee:	4313      	orrs	r3, r2
 80112f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80112f2:	697b      	ldr	r3, [r7, #20]
 80112f4:	f023 0302 	bic.w	r3, r3, #2
 80112f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	689b      	ldr	r3, [r3, #8]
 80112fe:	697a      	ldr	r2, [r7, #20]
 8011300:	4313      	orrs	r3, r2
 8011302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	4a20      	ldr	r2, [pc, #128]	; (8011388 <TIM_OC1_SetConfig+0xd8>)
 8011308:	4293      	cmp	r3, r2
 801130a:	d003      	beq.n	8011314 <TIM_OC1_SetConfig+0x64>
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	4a1f      	ldr	r2, [pc, #124]	; (801138c <TIM_OC1_SetConfig+0xdc>)
 8011310:	4293      	cmp	r3, r2
 8011312:	d10c      	bne.n	801132e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011314:	697b      	ldr	r3, [r7, #20]
 8011316:	f023 0308 	bic.w	r3, r3, #8
 801131a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	68db      	ldr	r3, [r3, #12]
 8011320:	697a      	ldr	r2, [r7, #20]
 8011322:	4313      	orrs	r3, r2
 8011324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011326:	697b      	ldr	r3, [r7, #20]
 8011328:	f023 0304 	bic.w	r3, r3, #4
 801132c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	4a15      	ldr	r2, [pc, #84]	; (8011388 <TIM_OC1_SetConfig+0xd8>)
 8011332:	4293      	cmp	r3, r2
 8011334:	d003      	beq.n	801133e <TIM_OC1_SetConfig+0x8e>
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	4a14      	ldr	r2, [pc, #80]	; (801138c <TIM_OC1_SetConfig+0xdc>)
 801133a:	4293      	cmp	r3, r2
 801133c:	d111      	bne.n	8011362 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801133e:	693b      	ldr	r3, [r7, #16]
 8011340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011346:	693b      	ldr	r3, [r7, #16]
 8011348:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801134c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	695b      	ldr	r3, [r3, #20]
 8011352:	693a      	ldr	r2, [r7, #16]
 8011354:	4313      	orrs	r3, r2
 8011356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	699b      	ldr	r3, [r3, #24]
 801135c:	693a      	ldr	r2, [r7, #16]
 801135e:	4313      	orrs	r3, r2
 8011360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	693a      	ldr	r2, [r7, #16]
 8011366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	68fa      	ldr	r2, [r7, #12]
 801136c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	685a      	ldr	r2, [r3, #4]
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	697a      	ldr	r2, [r7, #20]
 801137a:	621a      	str	r2, [r3, #32]
}
 801137c:	bf00      	nop
 801137e:	371c      	adds	r7, #28
 8011380:	46bd      	mov	sp, r7
 8011382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011386:	4770      	bx	lr
 8011388:	40010000 	.word	0x40010000
 801138c:	40010400 	.word	0x40010400

08011390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011390:	b480      	push	{r7}
 8011392:	b087      	sub	sp, #28
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
 8011398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	6a1b      	ldr	r3, [r3, #32]
 801139e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	6a1b      	ldr	r3, [r3, #32]
 80113a4:	f023 0210 	bic.w	r2, r3, #16
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	685b      	ldr	r3, [r3, #4]
 80113b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	699b      	ldr	r3, [r3, #24]
 80113b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80113be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80113c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80113c8:	683b      	ldr	r3, [r7, #0]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	021b      	lsls	r3, r3, #8
 80113ce:	68fa      	ldr	r2, [r7, #12]
 80113d0:	4313      	orrs	r3, r2
 80113d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80113d4:	697b      	ldr	r3, [r7, #20]
 80113d6:	f023 0320 	bic.w	r3, r3, #32
 80113da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	689b      	ldr	r3, [r3, #8]
 80113e0:	011b      	lsls	r3, r3, #4
 80113e2:	697a      	ldr	r2, [r7, #20]
 80113e4:	4313      	orrs	r3, r2
 80113e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	4a22      	ldr	r2, [pc, #136]	; (8011474 <TIM_OC2_SetConfig+0xe4>)
 80113ec:	4293      	cmp	r3, r2
 80113ee:	d003      	beq.n	80113f8 <TIM_OC2_SetConfig+0x68>
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	4a21      	ldr	r2, [pc, #132]	; (8011478 <TIM_OC2_SetConfig+0xe8>)
 80113f4:	4293      	cmp	r3, r2
 80113f6:	d10d      	bne.n	8011414 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80113f8:	697b      	ldr	r3, [r7, #20]
 80113fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80113fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011400:	683b      	ldr	r3, [r7, #0]
 8011402:	68db      	ldr	r3, [r3, #12]
 8011404:	011b      	lsls	r3, r3, #4
 8011406:	697a      	ldr	r2, [r7, #20]
 8011408:	4313      	orrs	r3, r2
 801140a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801140c:	697b      	ldr	r3, [r7, #20]
 801140e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011412:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	4a17      	ldr	r2, [pc, #92]	; (8011474 <TIM_OC2_SetConfig+0xe4>)
 8011418:	4293      	cmp	r3, r2
 801141a:	d003      	beq.n	8011424 <TIM_OC2_SetConfig+0x94>
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	4a16      	ldr	r2, [pc, #88]	; (8011478 <TIM_OC2_SetConfig+0xe8>)
 8011420:	4293      	cmp	r3, r2
 8011422:	d113      	bne.n	801144c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011424:	693b      	ldr	r3, [r7, #16]
 8011426:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801142a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801142c:	693b      	ldr	r3, [r7, #16]
 801142e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011432:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011434:	683b      	ldr	r3, [r7, #0]
 8011436:	695b      	ldr	r3, [r3, #20]
 8011438:	009b      	lsls	r3, r3, #2
 801143a:	693a      	ldr	r2, [r7, #16]
 801143c:	4313      	orrs	r3, r2
 801143e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	699b      	ldr	r3, [r3, #24]
 8011444:	009b      	lsls	r3, r3, #2
 8011446:	693a      	ldr	r2, [r7, #16]
 8011448:	4313      	orrs	r3, r2
 801144a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	693a      	ldr	r2, [r7, #16]
 8011450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	68fa      	ldr	r2, [r7, #12]
 8011456:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011458:	683b      	ldr	r3, [r7, #0]
 801145a:	685a      	ldr	r2, [r3, #4]
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	697a      	ldr	r2, [r7, #20]
 8011464:	621a      	str	r2, [r3, #32]
}
 8011466:	bf00      	nop
 8011468:	371c      	adds	r7, #28
 801146a:	46bd      	mov	sp, r7
 801146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011470:	4770      	bx	lr
 8011472:	bf00      	nop
 8011474:	40010000 	.word	0x40010000
 8011478:	40010400 	.word	0x40010400

0801147c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801147c:	b480      	push	{r7}
 801147e:	b087      	sub	sp, #28
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
 8011484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	6a1b      	ldr	r3, [r3, #32]
 801148a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	6a1b      	ldr	r3, [r3, #32]
 8011490:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	685b      	ldr	r3, [r3, #4]
 801149c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	69db      	ldr	r3, [r3, #28]
 80114a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80114aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	f023 0303 	bic.w	r3, r3, #3
 80114b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80114b4:	683b      	ldr	r3, [r7, #0]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	68fa      	ldr	r2, [r7, #12]
 80114ba:	4313      	orrs	r3, r2
 80114bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80114be:	697b      	ldr	r3, [r7, #20]
 80114c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80114c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80114c6:	683b      	ldr	r3, [r7, #0]
 80114c8:	689b      	ldr	r3, [r3, #8]
 80114ca:	021b      	lsls	r3, r3, #8
 80114cc:	697a      	ldr	r2, [r7, #20]
 80114ce:	4313      	orrs	r3, r2
 80114d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	4a21      	ldr	r2, [pc, #132]	; (801155c <TIM_OC3_SetConfig+0xe0>)
 80114d6:	4293      	cmp	r3, r2
 80114d8:	d003      	beq.n	80114e2 <TIM_OC3_SetConfig+0x66>
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	4a20      	ldr	r2, [pc, #128]	; (8011560 <TIM_OC3_SetConfig+0xe4>)
 80114de:	4293      	cmp	r3, r2
 80114e0:	d10d      	bne.n	80114fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80114e2:	697b      	ldr	r3, [r7, #20]
 80114e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80114e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	68db      	ldr	r3, [r3, #12]
 80114ee:	021b      	lsls	r3, r3, #8
 80114f0:	697a      	ldr	r2, [r7, #20]
 80114f2:	4313      	orrs	r3, r2
 80114f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80114f6:	697b      	ldr	r3, [r7, #20]
 80114f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80114fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	4a16      	ldr	r2, [pc, #88]	; (801155c <TIM_OC3_SetConfig+0xe0>)
 8011502:	4293      	cmp	r3, r2
 8011504:	d003      	beq.n	801150e <TIM_OC3_SetConfig+0x92>
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	4a15      	ldr	r2, [pc, #84]	; (8011560 <TIM_OC3_SetConfig+0xe4>)
 801150a:	4293      	cmp	r3, r2
 801150c:	d113      	bne.n	8011536 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801150e:	693b      	ldr	r3, [r7, #16]
 8011510:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011516:	693b      	ldr	r3, [r7, #16]
 8011518:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801151c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	695b      	ldr	r3, [r3, #20]
 8011522:	011b      	lsls	r3, r3, #4
 8011524:	693a      	ldr	r2, [r7, #16]
 8011526:	4313      	orrs	r3, r2
 8011528:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801152a:	683b      	ldr	r3, [r7, #0]
 801152c:	699b      	ldr	r3, [r3, #24]
 801152e:	011b      	lsls	r3, r3, #4
 8011530:	693a      	ldr	r2, [r7, #16]
 8011532:	4313      	orrs	r3, r2
 8011534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	693a      	ldr	r2, [r7, #16]
 801153a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	68fa      	ldr	r2, [r7, #12]
 8011540:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	685a      	ldr	r2, [r3, #4]
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	697a      	ldr	r2, [r7, #20]
 801154e:	621a      	str	r2, [r3, #32]
}
 8011550:	bf00      	nop
 8011552:	371c      	adds	r7, #28
 8011554:	46bd      	mov	sp, r7
 8011556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155a:	4770      	bx	lr
 801155c:	40010000 	.word	0x40010000
 8011560:	40010400 	.word	0x40010400

08011564 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011564:	b480      	push	{r7}
 8011566:	b087      	sub	sp, #28
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
 801156c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	6a1b      	ldr	r3, [r3, #32]
 8011572:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	6a1b      	ldr	r3, [r3, #32]
 8011578:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	69db      	ldr	r3, [r3, #28]
 801158a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801159a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801159c:	683b      	ldr	r3, [r7, #0]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	021b      	lsls	r3, r3, #8
 80115a2:	68fa      	ldr	r2, [r7, #12]
 80115a4:	4313      	orrs	r3, r2
 80115a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80115a8:	693b      	ldr	r3, [r7, #16]
 80115aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80115ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80115b0:	683b      	ldr	r3, [r7, #0]
 80115b2:	689b      	ldr	r3, [r3, #8]
 80115b4:	031b      	lsls	r3, r3, #12
 80115b6:	693a      	ldr	r2, [r7, #16]
 80115b8:	4313      	orrs	r3, r2
 80115ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	4a12      	ldr	r2, [pc, #72]	; (8011608 <TIM_OC4_SetConfig+0xa4>)
 80115c0:	4293      	cmp	r3, r2
 80115c2:	d003      	beq.n	80115cc <TIM_OC4_SetConfig+0x68>
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	4a11      	ldr	r2, [pc, #68]	; (801160c <TIM_OC4_SetConfig+0xa8>)
 80115c8:	4293      	cmp	r3, r2
 80115ca:	d109      	bne.n	80115e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80115cc:	697b      	ldr	r3, [r7, #20]
 80115ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80115d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80115d4:	683b      	ldr	r3, [r7, #0]
 80115d6:	695b      	ldr	r3, [r3, #20]
 80115d8:	019b      	lsls	r3, r3, #6
 80115da:	697a      	ldr	r2, [r7, #20]
 80115dc:	4313      	orrs	r3, r2
 80115de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	697a      	ldr	r2, [r7, #20]
 80115e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	68fa      	ldr	r2, [r7, #12]
 80115ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80115ec:	683b      	ldr	r3, [r7, #0]
 80115ee:	685a      	ldr	r2, [r3, #4]
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	693a      	ldr	r2, [r7, #16]
 80115f8:	621a      	str	r2, [r3, #32]
}
 80115fa:	bf00      	nop
 80115fc:	371c      	adds	r7, #28
 80115fe:	46bd      	mov	sp, r7
 8011600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011604:	4770      	bx	lr
 8011606:	bf00      	nop
 8011608:	40010000 	.word	0x40010000
 801160c:	40010400 	.word	0x40010400

08011610 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011610:	b480      	push	{r7}
 8011612:	b087      	sub	sp, #28
 8011614:	af00      	add	r7, sp, #0
 8011616:	60f8      	str	r0, [r7, #12]
 8011618:	60b9      	str	r1, [r7, #8]
 801161a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801161c:	68bb      	ldr	r3, [r7, #8]
 801161e:	f003 031f 	and.w	r3, r3, #31
 8011622:	2201      	movs	r2, #1
 8011624:	fa02 f303 	lsl.w	r3, r2, r3
 8011628:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	6a1a      	ldr	r2, [r3, #32]
 801162e:	697b      	ldr	r3, [r7, #20]
 8011630:	43db      	mvns	r3, r3
 8011632:	401a      	ands	r2, r3
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	6a1a      	ldr	r2, [r3, #32]
 801163c:	68bb      	ldr	r3, [r7, #8]
 801163e:	f003 031f 	and.w	r3, r3, #31
 8011642:	6879      	ldr	r1, [r7, #4]
 8011644:	fa01 f303 	lsl.w	r3, r1, r3
 8011648:	431a      	orrs	r2, r3
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	621a      	str	r2, [r3, #32]
}
 801164e:	bf00      	nop
 8011650:	371c      	adds	r7, #28
 8011652:	46bd      	mov	sp, r7
 8011654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011658:	4770      	bx	lr
	...

0801165c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801165c:	b480      	push	{r7}
 801165e:	b085      	sub	sp, #20
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
 8011664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801166c:	2b01      	cmp	r3, #1
 801166e:	d101      	bne.n	8011674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011670:	2302      	movs	r3, #2
 8011672:	e05a      	b.n	801172a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	2201      	movs	r2, #1
 8011678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	2202      	movs	r2, #2
 8011680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	685b      	ldr	r3, [r3, #4]
 801168a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	689b      	ldr	r3, [r3, #8]
 8011692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801169a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	68fa      	ldr	r2, [r7, #12]
 80116a2:	4313      	orrs	r3, r2
 80116a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	68fa      	ldr	r2, [r7, #12]
 80116ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	4a21      	ldr	r2, [pc, #132]	; (8011738 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80116b4:	4293      	cmp	r3, r2
 80116b6:	d022      	beq.n	80116fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80116c0:	d01d      	beq.n	80116fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	4a1d      	ldr	r2, [pc, #116]	; (801173c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80116c8:	4293      	cmp	r3, r2
 80116ca:	d018      	beq.n	80116fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	4a1b      	ldr	r2, [pc, #108]	; (8011740 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80116d2:	4293      	cmp	r3, r2
 80116d4:	d013      	beq.n	80116fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	4a1a      	ldr	r2, [pc, #104]	; (8011744 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80116dc:	4293      	cmp	r3, r2
 80116de:	d00e      	beq.n	80116fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	4a18      	ldr	r2, [pc, #96]	; (8011748 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80116e6:	4293      	cmp	r3, r2
 80116e8:	d009      	beq.n	80116fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	4a17      	ldr	r2, [pc, #92]	; (801174c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80116f0:	4293      	cmp	r3, r2
 80116f2:	d004      	beq.n	80116fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	4a15      	ldr	r2, [pc, #84]	; (8011750 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80116fa:	4293      	cmp	r3, r2
 80116fc:	d10c      	bne.n	8011718 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80116fe:	68bb      	ldr	r3, [r7, #8]
 8011700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011704:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011706:	683b      	ldr	r3, [r7, #0]
 8011708:	685b      	ldr	r3, [r3, #4]
 801170a:	68ba      	ldr	r2, [r7, #8]
 801170c:	4313      	orrs	r3, r2
 801170e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	68ba      	ldr	r2, [r7, #8]
 8011716:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	2201      	movs	r2, #1
 801171c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	2200      	movs	r2, #0
 8011724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011728:	2300      	movs	r3, #0
}
 801172a:	4618      	mov	r0, r3
 801172c:	3714      	adds	r7, #20
 801172e:	46bd      	mov	sp, r7
 8011730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011734:	4770      	bx	lr
 8011736:	bf00      	nop
 8011738:	40010000 	.word	0x40010000
 801173c:	40000400 	.word	0x40000400
 8011740:	40000800 	.word	0x40000800
 8011744:	40000c00 	.word	0x40000c00
 8011748:	40010400 	.word	0x40010400
 801174c:	40014000 	.word	0x40014000
 8011750:	40001800 	.word	0x40001800

08011754 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b082      	sub	sp, #8
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d101      	bne.n	8011766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011762:	2301      	movs	r3, #1
 8011764:	e042      	b.n	80117ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801176c:	b2db      	uxtb	r3, r3
 801176e:	2b00      	cmp	r3, #0
 8011770:	d106      	bne.n	8011780 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	2200      	movs	r2, #0
 8011776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801177a:	6878      	ldr	r0, [r7, #4]
 801177c:	f7fb ffe6 	bl	800d74c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	2224      	movs	r2, #36	; 0x24
 8011784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	68da      	ldr	r2, [r3, #12]
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011796:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011798:	6878      	ldr	r0, [r7, #4]
 801179a:	f001 f81d 	bl	80127d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	691a      	ldr	r2, [r3, #16]
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80117ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	695a      	ldr	r2, [r3, #20]
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80117bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	68da      	ldr	r2, [r3, #12]
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80117cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	2200      	movs	r2, #0
 80117d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	2220      	movs	r2, #32
 80117d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	2220      	movs	r2, #32
 80117e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2200      	movs	r2, #0
 80117e8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80117ea:	2300      	movs	r3, #0
}
 80117ec:	4618      	mov	r0, r3
 80117ee:	3708      	adds	r7, #8
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}

080117f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b08a      	sub	sp, #40	; 0x28
 80117f8:	af02      	add	r7, sp, #8
 80117fa:	60f8      	str	r0, [r7, #12]
 80117fc:	60b9      	str	r1, [r7, #8]
 80117fe:	603b      	str	r3, [r7, #0]
 8011800:	4613      	mov	r3, r2
 8011802:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8011804:	2300      	movs	r3, #0
 8011806:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801180e:	b2db      	uxtb	r3, r3
 8011810:	2b20      	cmp	r3, #32
 8011812:	d175      	bne.n	8011900 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8011814:	68bb      	ldr	r3, [r7, #8]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d002      	beq.n	8011820 <HAL_UART_Transmit+0x2c>
 801181a:	88fb      	ldrh	r3, [r7, #6]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d101      	bne.n	8011824 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8011820:	2301      	movs	r3, #1
 8011822:	e06e      	b.n	8011902 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	2200      	movs	r2, #0
 8011828:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	2221      	movs	r2, #33	; 0x21
 801182e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011832:	f7fc fa29 	bl	800dc88 <HAL_GetTick>
 8011836:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	88fa      	ldrh	r2, [r7, #6]
 801183c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	88fa      	ldrh	r2, [r7, #6]
 8011842:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	689b      	ldr	r3, [r3, #8]
 8011848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801184c:	d108      	bne.n	8011860 <HAL_UART_Transmit+0x6c>
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	691b      	ldr	r3, [r3, #16]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d104      	bne.n	8011860 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8011856:	2300      	movs	r3, #0
 8011858:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801185a:	68bb      	ldr	r3, [r7, #8]
 801185c:	61bb      	str	r3, [r7, #24]
 801185e:	e003      	b.n	8011868 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8011860:	68bb      	ldr	r3, [r7, #8]
 8011862:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011864:	2300      	movs	r3, #0
 8011866:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011868:	e02e      	b.n	80118c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	9300      	str	r3, [sp, #0]
 801186e:	697b      	ldr	r3, [r7, #20]
 8011870:	2200      	movs	r2, #0
 8011872:	2180      	movs	r1, #128	; 0x80
 8011874:	68f8      	ldr	r0, [r7, #12]
 8011876:	f000 fcf5 	bl	8012264 <UART_WaitOnFlagUntilTimeout>
 801187a:	4603      	mov	r3, r0
 801187c:	2b00      	cmp	r3, #0
 801187e:	d005      	beq.n	801188c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	2220      	movs	r2, #32
 8011884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8011888:	2303      	movs	r3, #3
 801188a:	e03a      	b.n	8011902 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 801188c:	69fb      	ldr	r3, [r7, #28]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d10b      	bne.n	80118aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011892:	69bb      	ldr	r3, [r7, #24]
 8011894:	881b      	ldrh	r3, [r3, #0]
 8011896:	461a      	mov	r2, r3
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80118a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80118a2:	69bb      	ldr	r3, [r7, #24]
 80118a4:	3302      	adds	r3, #2
 80118a6:	61bb      	str	r3, [r7, #24]
 80118a8:	e007      	b.n	80118ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80118aa:	69fb      	ldr	r3, [r7, #28]
 80118ac:	781a      	ldrb	r2, [r3, #0]
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80118b4:	69fb      	ldr	r3, [r7, #28]
 80118b6:	3301      	adds	r3, #1
 80118b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80118be:	b29b      	uxth	r3, r3
 80118c0:	3b01      	subs	r3, #1
 80118c2:	b29a      	uxth	r2, r3
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80118cc:	b29b      	uxth	r3, r3
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d1cb      	bne.n	801186a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80118d2:	683b      	ldr	r3, [r7, #0]
 80118d4:	9300      	str	r3, [sp, #0]
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	2200      	movs	r2, #0
 80118da:	2140      	movs	r1, #64	; 0x40
 80118dc:	68f8      	ldr	r0, [r7, #12]
 80118de:	f000 fcc1 	bl	8012264 <UART_WaitOnFlagUntilTimeout>
 80118e2:	4603      	mov	r3, r0
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d005      	beq.n	80118f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	2220      	movs	r2, #32
 80118ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80118f0:	2303      	movs	r3, #3
 80118f2:	e006      	b.n	8011902 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	2220      	movs	r2, #32
 80118f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80118fc:	2300      	movs	r3, #0
 80118fe:	e000      	b.n	8011902 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8011900:	2302      	movs	r3, #2
  }
}
 8011902:	4618      	mov	r0, r3
 8011904:	3720      	adds	r7, #32
 8011906:	46bd      	mov	sp, r7
 8011908:	bd80      	pop	{r7, pc}

0801190a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801190a:	b580      	push	{r7, lr}
 801190c:	b08a      	sub	sp, #40	; 0x28
 801190e:	af02      	add	r7, sp, #8
 8011910:	60f8      	str	r0, [r7, #12]
 8011912:	60b9      	str	r1, [r7, #8]
 8011914:	603b      	str	r3, [r7, #0]
 8011916:	4613      	mov	r3, r2
 8011918:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801191a:	2300      	movs	r3, #0
 801191c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011924:	b2db      	uxtb	r3, r3
 8011926:	2b20      	cmp	r3, #32
 8011928:	f040 8081 	bne.w	8011a2e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 801192c:	68bb      	ldr	r3, [r7, #8]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d002      	beq.n	8011938 <HAL_UART_Receive+0x2e>
 8011932:	88fb      	ldrh	r3, [r7, #6]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d101      	bne.n	801193c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8011938:	2301      	movs	r3, #1
 801193a:	e079      	b.n	8011a30 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	2200      	movs	r2, #0
 8011940:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	2222      	movs	r2, #34	; 0x22
 8011946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	2200      	movs	r2, #0
 801194e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011950:	f7fc f99a 	bl	800dc88 <HAL_GetTick>
 8011954:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	88fa      	ldrh	r2, [r7, #6]
 801195a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	88fa      	ldrh	r2, [r7, #6]
 8011960:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	689b      	ldr	r3, [r3, #8]
 8011966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801196a:	d108      	bne.n	801197e <HAL_UART_Receive+0x74>
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	691b      	ldr	r3, [r3, #16]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d104      	bne.n	801197e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8011974:	2300      	movs	r3, #0
 8011976:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8011978:	68bb      	ldr	r3, [r7, #8]
 801197a:	61bb      	str	r3, [r7, #24]
 801197c:	e003      	b.n	8011986 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 801197e:	68bb      	ldr	r3, [r7, #8]
 8011980:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011982:	2300      	movs	r3, #0
 8011984:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8011986:	e047      	b.n	8011a18 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8011988:	683b      	ldr	r3, [r7, #0]
 801198a:	9300      	str	r3, [sp, #0]
 801198c:	697b      	ldr	r3, [r7, #20]
 801198e:	2200      	movs	r2, #0
 8011990:	2120      	movs	r1, #32
 8011992:	68f8      	ldr	r0, [r7, #12]
 8011994:	f000 fc66 	bl	8012264 <UART_WaitOnFlagUntilTimeout>
 8011998:	4603      	mov	r3, r0
 801199a:	2b00      	cmp	r3, #0
 801199c:	d005      	beq.n	80119aa <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	2220      	movs	r2, #32
 80119a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 80119a6:	2303      	movs	r3, #3
 80119a8:	e042      	b.n	8011a30 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80119aa:	69fb      	ldr	r3, [r7, #28]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d10c      	bne.n	80119ca <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	685b      	ldr	r3, [r3, #4]
 80119b6:	b29b      	uxth	r3, r3
 80119b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80119bc:	b29a      	uxth	r2, r3
 80119be:	69bb      	ldr	r3, [r7, #24]
 80119c0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80119c2:	69bb      	ldr	r3, [r7, #24]
 80119c4:	3302      	adds	r3, #2
 80119c6:	61bb      	str	r3, [r7, #24]
 80119c8:	e01f      	b.n	8011a0a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	689b      	ldr	r3, [r3, #8]
 80119ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80119d2:	d007      	beq.n	80119e4 <HAL_UART_Receive+0xda>
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	689b      	ldr	r3, [r3, #8]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d10a      	bne.n	80119f2 <HAL_UART_Receive+0xe8>
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	691b      	ldr	r3, [r3, #16]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d106      	bne.n	80119f2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	685b      	ldr	r3, [r3, #4]
 80119ea:	b2da      	uxtb	r2, r3
 80119ec:	69fb      	ldr	r3, [r7, #28]
 80119ee:	701a      	strb	r2, [r3, #0]
 80119f0:	e008      	b.n	8011a04 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	685b      	ldr	r3, [r3, #4]
 80119f8:	b2db      	uxtb	r3, r3
 80119fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80119fe:	b2da      	uxtb	r2, r3
 8011a00:	69fb      	ldr	r3, [r7, #28]
 8011a02:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8011a04:	69fb      	ldr	r3, [r7, #28]
 8011a06:	3301      	adds	r3, #1
 8011a08:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011a0e:	b29b      	uxth	r3, r3
 8011a10:	3b01      	subs	r3, #1
 8011a12:	b29a      	uxth	r2, r3
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011a1c:	b29b      	uxth	r3, r3
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d1b2      	bne.n	8011988 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	2220      	movs	r2, #32
 8011a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	e000      	b.n	8011a30 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8011a2e:	2302      	movs	r3, #2
  }
}
 8011a30:	4618      	mov	r0, r3
 8011a32:	3720      	adds	r7, #32
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bd80      	pop	{r7, pc}

08011a38 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b08c      	sub	sp, #48	; 0x30
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	60f8      	str	r0, [r7, #12]
 8011a40:	60b9      	str	r1, [r7, #8]
 8011a42:	4613      	mov	r3, r2
 8011a44:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011a4c:	b2db      	uxtb	r3, r3
 8011a4e:	2b20      	cmp	r3, #32
 8011a50:	d14a      	bne.n	8011ae8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8011a52:	68bb      	ldr	r3, [r7, #8]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d002      	beq.n	8011a5e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8011a58:	88fb      	ldrh	r3, [r7, #6]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d101      	bne.n	8011a62 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8011a5e:	2301      	movs	r3, #1
 8011a60:	e043      	b.n	8011aea <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	2201      	movs	r2, #1
 8011a66:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8011a6e:	88fb      	ldrh	r3, [r7, #6]
 8011a70:	461a      	mov	r2, r3
 8011a72:	68b9      	ldr	r1, [r7, #8]
 8011a74:	68f8      	ldr	r0, [r7, #12]
 8011a76:	f000 fc4f 	bl	8012318 <UART_Start_Receive_DMA>
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8011a80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d12c      	bne.n	8011ae2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a8c:	2b01      	cmp	r3, #1
 8011a8e:	d125      	bne.n	8011adc <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011a90:	2300      	movs	r3, #0
 8011a92:	613b      	str	r3, [r7, #16]
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	613b      	str	r3, [r7, #16]
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	685b      	ldr	r3, [r3, #4]
 8011aa2:	613b      	str	r3, [r7, #16]
 8011aa4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	330c      	adds	r3, #12
 8011aac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aae:	69bb      	ldr	r3, [r7, #24]
 8011ab0:	e853 3f00 	ldrex	r3, [r3]
 8011ab4:	617b      	str	r3, [r7, #20]
   return(result);
 8011ab6:	697b      	ldr	r3, [r7, #20]
 8011ab8:	f043 0310 	orr.w	r3, r3, #16
 8011abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	330c      	adds	r3, #12
 8011ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ac6:	627a      	str	r2, [r7, #36]	; 0x24
 8011ac8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aca:	6a39      	ldr	r1, [r7, #32]
 8011acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ace:	e841 2300 	strex	r3, r2, [r1]
 8011ad2:	61fb      	str	r3, [r7, #28]
   return(result);
 8011ad4:	69fb      	ldr	r3, [r7, #28]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d1e5      	bne.n	8011aa6 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8011ada:	e002      	b.n	8011ae2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8011adc:	2301      	movs	r3, #1
 8011ade:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8011ae2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ae6:	e000      	b.n	8011aea <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8011ae8:	2302      	movs	r3, #2
  }
}
 8011aea:	4618      	mov	r0, r3
 8011aec:	3730      	adds	r7, #48	; 0x30
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bd80      	pop	{r7, pc}
	...

08011af4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b0ba      	sub	sp, #232	; 0xe8
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	68db      	ldr	r3, [r3, #12]
 8011b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	695b      	ldr	r3, [r3, #20]
 8011b16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8011b20:	2300      	movs	r3, #0
 8011b22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8011b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011b2a:	f003 030f 	and.w	r3, r3, #15
 8011b2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8011b32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d10f      	bne.n	8011b5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011b3e:	f003 0320 	and.w	r3, r3, #32
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d009      	beq.n	8011b5a <HAL_UART_IRQHandler+0x66>
 8011b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011b4a:	f003 0320 	and.w	r3, r3, #32
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d003      	beq.n	8011b5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8011b52:	6878      	ldr	r0, [r7, #4]
 8011b54:	f000 fd81 	bl	801265a <UART_Receive_IT>
      return;
 8011b58:	e25b      	b.n	8012012 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8011b5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	f000 80de 	beq.w	8011d20 <HAL_UART_IRQHandler+0x22c>
 8011b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011b68:	f003 0301 	and.w	r3, r3, #1
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d106      	bne.n	8011b7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8011b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011b74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	f000 80d1 	beq.w	8011d20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8011b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011b82:	f003 0301 	and.w	r3, r3, #1
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d00b      	beq.n	8011ba2 <HAL_UART_IRQHandler+0xae>
 8011b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d005      	beq.n	8011ba2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b9a:	f043 0201 	orr.w	r2, r3, #1
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8011ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011ba6:	f003 0304 	and.w	r3, r3, #4
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d00b      	beq.n	8011bc6 <HAL_UART_IRQHandler+0xd2>
 8011bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011bb2:	f003 0301 	and.w	r3, r3, #1
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d005      	beq.n	8011bc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011bbe:	f043 0202 	orr.w	r2, r3, #2
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8011bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011bca:	f003 0302 	and.w	r3, r3, #2
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d00b      	beq.n	8011bea <HAL_UART_IRQHandler+0xf6>
 8011bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011bd6:	f003 0301 	and.w	r3, r3, #1
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d005      	beq.n	8011bea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011be2:	f043 0204 	orr.w	r2, r3, #4
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8011bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011bee:	f003 0308 	and.w	r3, r3, #8
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d011      	beq.n	8011c1a <HAL_UART_IRQHandler+0x126>
 8011bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011bfa:	f003 0320 	and.w	r3, r3, #32
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d105      	bne.n	8011c0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8011c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011c06:	f003 0301 	and.w	r3, r3, #1
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d005      	beq.n	8011c1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c12:	f043 0208 	orr.w	r2, r3, #8
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	f000 81f2 	beq.w	8012008 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011c28:	f003 0320 	and.w	r3, r3, #32
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d008      	beq.n	8011c42 <HAL_UART_IRQHandler+0x14e>
 8011c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011c34:	f003 0320 	and.w	r3, r3, #32
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d002      	beq.n	8011c42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8011c3c:	6878      	ldr	r0, [r7, #4]
 8011c3e:	f000 fd0c 	bl	801265a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	695b      	ldr	r3, [r3, #20]
 8011c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c4c:	2b40      	cmp	r3, #64	; 0x40
 8011c4e:	bf0c      	ite	eq
 8011c50:	2301      	moveq	r3, #1
 8011c52:	2300      	movne	r3, #0
 8011c54:	b2db      	uxtb	r3, r3
 8011c56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c5e:	f003 0308 	and.w	r3, r3, #8
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d103      	bne.n	8011c6e <HAL_UART_IRQHandler+0x17a>
 8011c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d04f      	beq.n	8011d0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011c6e:	6878      	ldr	r0, [r7, #4]
 8011c70:	f000 fc14 	bl	801249c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	695b      	ldr	r3, [r3, #20]
 8011c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c7e:	2b40      	cmp	r3, #64	; 0x40
 8011c80:	d141      	bne.n	8011d06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	3314      	adds	r3, #20
 8011c88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011c90:	e853 3f00 	ldrex	r3, [r3]
 8011c94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8011c98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	3314      	adds	r3, #20
 8011caa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8011cae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8011cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8011cba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011cbe:	e841 2300 	strex	r3, r2, [r1]
 8011cc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8011cc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d1d9      	bne.n	8011c82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d013      	beq.n	8011cfe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cda:	4a7e      	ldr	r2, [pc, #504]	; (8011ed4 <HAL_UART_IRQHandler+0x3e0>)
 8011cdc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	f7fc fa88 	bl	800e1f8 <HAL_DMA_Abort_IT>
 8011ce8:	4603      	mov	r3, r0
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d016      	beq.n	8011d1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011cf4:	687a      	ldr	r2, [r7, #4]
 8011cf6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8011cf8:	4610      	mov	r0, r2
 8011cfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011cfc:	e00e      	b.n	8011d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011cfe:	6878      	ldr	r0, [r7, #4]
 8011d00:	f000 f9a8 	bl	8012054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011d04:	e00a      	b.n	8011d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011d06:	6878      	ldr	r0, [r7, #4]
 8011d08:	f000 f9a4 	bl	8012054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011d0c:	e006      	b.n	8011d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f000 f9a0 	bl	8012054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	2200      	movs	r2, #0
 8011d18:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8011d1a:	e175      	b.n	8012008 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011d1c:	bf00      	nop
    return;
 8011d1e:	e173      	b.n	8012008 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d24:	2b01      	cmp	r3, #1
 8011d26:	f040 814f 	bne.w	8011fc8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8011d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011d2e:	f003 0310 	and.w	r3, r3, #16
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	f000 8148 	beq.w	8011fc8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8011d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011d3c:	f003 0310 	and.w	r3, r3, #16
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	f000 8141 	beq.w	8011fc8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011d46:	2300      	movs	r3, #0
 8011d48:	60bb      	str	r3, [r7, #8]
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	60bb      	str	r3, [r7, #8]
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	685b      	ldr	r3, [r3, #4]
 8011d58:	60bb      	str	r3, [r7, #8]
 8011d5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	695b      	ldr	r3, [r3, #20]
 8011d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d66:	2b40      	cmp	r3, #64	; 0x40
 8011d68:	f040 80b6 	bne.w	8011ed8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	685b      	ldr	r3, [r3, #4]
 8011d74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8011d78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	f000 8145 	beq.w	801200c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011d86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011d8a:	429a      	cmp	r2, r3
 8011d8c:	f080 813e 	bcs.w	801200c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011d96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d9c:	69db      	ldr	r3, [r3, #28]
 8011d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011da2:	f000 8088 	beq.w	8011eb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	330c      	adds	r3, #12
 8011dac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011db0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011db4:	e853 3f00 	ldrex	r3, [r3]
 8011db8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8011dbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011dc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	330c      	adds	r3, #12
 8011dce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011dd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8011dd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011dde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011de2:	e841 2300 	strex	r3, r2, [r1]
 8011de6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8011dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d1d9      	bne.n	8011da6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	3314      	adds	r3, #20
 8011df8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011dfc:	e853 3f00 	ldrex	r3, [r3]
 8011e00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8011e02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011e04:	f023 0301 	bic.w	r3, r3, #1
 8011e08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	3314      	adds	r3, #20
 8011e12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011e16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8011e1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011e1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011e22:	e841 2300 	strex	r3, r2, [r1]
 8011e26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011e28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d1e1      	bne.n	8011df2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	3314      	adds	r3, #20
 8011e34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011e38:	e853 3f00 	ldrex	r3, [r3]
 8011e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011e40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011e44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	3314      	adds	r3, #20
 8011e4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8011e52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011e54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011e58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011e5a:	e841 2300 	strex	r3, r2, [r1]
 8011e5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011e60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d1e3      	bne.n	8011e2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	2220      	movs	r2, #32
 8011e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	2200      	movs	r2, #0
 8011e72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	330c      	adds	r3, #12
 8011e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e7e:	e853 3f00 	ldrex	r3, [r3]
 8011e82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e86:	f023 0310 	bic.w	r3, r3, #16
 8011e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	330c      	adds	r3, #12
 8011e94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8011e98:	65ba      	str	r2, [r7, #88]	; 0x58
 8011e9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011e9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011ea0:	e841 2300 	strex	r3, r2, [r1]
 8011ea4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d1e3      	bne.n	8011e74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	f7fc f931 	bl	800e118 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	2202      	movs	r2, #2
 8011eba:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011ec4:	b29b      	uxth	r3, r3
 8011ec6:	1ad3      	subs	r3, r2, r3
 8011ec8:	b29b      	uxth	r3, r3
 8011eca:	4619      	mov	r1, r3
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f7f7 f919 	bl	8009104 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011ed2:	e09b      	b.n	801200c <HAL_UART_IRQHandler+0x518>
 8011ed4:	08012563 	.word	0x08012563
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011ee0:	b29b      	uxth	r3, r3
 8011ee2:	1ad3      	subs	r3, r2, r3
 8011ee4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011eec:	b29b      	uxth	r3, r3
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	f000 808e 	beq.w	8012010 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8011ef4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	f000 8089 	beq.w	8012010 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	330c      	adds	r3, #12
 8011f04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f08:	e853 3f00 	ldrex	r3, [r3]
 8011f0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011f14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	330c      	adds	r3, #12
 8011f1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011f22:	647a      	str	r2, [r7, #68]	; 0x44
 8011f24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011f28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011f2a:	e841 2300 	strex	r3, r2, [r1]
 8011f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d1e3      	bne.n	8011efe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	3314      	adds	r3, #20
 8011f3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f40:	e853 3f00 	ldrex	r3, [r3]
 8011f44:	623b      	str	r3, [r7, #32]
   return(result);
 8011f46:	6a3b      	ldr	r3, [r7, #32]
 8011f48:	f023 0301 	bic.w	r3, r3, #1
 8011f4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	3314      	adds	r3, #20
 8011f56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011f5a:	633a      	str	r2, [r7, #48]	; 0x30
 8011f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f62:	e841 2300 	strex	r3, r2, [r1]
 8011f66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d1e3      	bne.n	8011f36 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	2220      	movs	r2, #32
 8011f72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	2200      	movs	r2, #0
 8011f7a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	330c      	adds	r3, #12
 8011f82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f84:	693b      	ldr	r3, [r7, #16]
 8011f86:	e853 3f00 	ldrex	r3, [r3]
 8011f8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	f023 0310 	bic.w	r3, r3, #16
 8011f92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	330c      	adds	r3, #12
 8011f9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8011fa0:	61fa      	str	r2, [r7, #28]
 8011fa2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fa4:	69b9      	ldr	r1, [r7, #24]
 8011fa6:	69fa      	ldr	r2, [r7, #28]
 8011fa8:	e841 2300 	strex	r3, r2, [r1]
 8011fac:	617b      	str	r3, [r7, #20]
   return(result);
 8011fae:	697b      	ldr	r3, [r7, #20]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d1e3      	bne.n	8011f7c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	2202      	movs	r2, #2
 8011fb8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011fba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011fbe:	4619      	mov	r1, r3
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	f7f7 f89f 	bl	8009104 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011fc6:	e023      	b.n	8012010 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8011fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d009      	beq.n	8011fe8 <HAL_UART_IRQHandler+0x4f4>
 8011fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d003      	beq.n	8011fe8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f000 fad2 	bl	801258a <UART_Transmit_IT>
    return;
 8011fe6:	e014      	b.n	8012012 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8011fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d00e      	beq.n	8012012 <HAL_UART_IRQHandler+0x51e>
 8011ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d008      	beq.n	8012012 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8012000:	6878      	ldr	r0, [r7, #4]
 8012002:	f000 fb12 	bl	801262a <UART_EndTransmit_IT>
    return;
 8012006:	e004      	b.n	8012012 <HAL_UART_IRQHandler+0x51e>
    return;
 8012008:	bf00      	nop
 801200a:	e002      	b.n	8012012 <HAL_UART_IRQHandler+0x51e>
      return;
 801200c:	bf00      	nop
 801200e:	e000      	b.n	8012012 <HAL_UART_IRQHandler+0x51e>
      return;
 8012010:	bf00      	nop
  }
}
 8012012:	37e8      	adds	r7, #232	; 0xe8
 8012014:	46bd      	mov	sp, r7
 8012016:	bd80      	pop	{r7, pc}

08012018 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012018:	b480      	push	{r7}
 801201a:	b083      	sub	sp, #12
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8012020:	bf00      	nop
 8012022:	370c      	adds	r7, #12
 8012024:	46bd      	mov	sp, r7
 8012026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202a:	4770      	bx	lr

0801202c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801202c:	b480      	push	{r7}
 801202e:	b083      	sub	sp, #12
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8012034:	bf00      	nop
 8012036:	370c      	adds	r7, #12
 8012038:	46bd      	mov	sp, r7
 801203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203e:	4770      	bx	lr

08012040 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012040:	b480      	push	{r7}
 8012042:	b083      	sub	sp, #12
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8012048:	bf00      	nop
 801204a:	370c      	adds	r7, #12
 801204c:	46bd      	mov	sp, r7
 801204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012052:	4770      	bx	lr

08012054 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012054:	b480      	push	{r7}
 8012056:	b083      	sub	sp, #12
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801205c:	bf00      	nop
 801205e:	370c      	adds	r7, #12
 8012060:	46bd      	mov	sp, r7
 8012062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012066:	4770      	bx	lr

08012068 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b09c      	sub	sp, #112	; 0x70
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012074:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012080:	2b00      	cmp	r3, #0
 8012082:	d172      	bne.n	801216a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8012084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012086:	2200      	movs	r2, #0
 8012088:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801208a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	330c      	adds	r3, #12
 8012090:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012094:	e853 3f00 	ldrex	r3, [r3]
 8012098:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801209a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801209c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80120a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80120a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	330c      	adds	r3, #12
 80120a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80120aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80120ac:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80120b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80120b2:	e841 2300 	strex	r3, r2, [r1]
 80120b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80120b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d1e5      	bne.n	801208a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80120be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	3314      	adds	r3, #20
 80120c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120c8:	e853 3f00 	ldrex	r3, [r3]
 80120cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80120ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120d0:	f023 0301 	bic.w	r3, r3, #1
 80120d4:	667b      	str	r3, [r7, #100]	; 0x64
 80120d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	3314      	adds	r3, #20
 80120dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80120de:	647a      	str	r2, [r7, #68]	; 0x44
 80120e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80120e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80120e6:	e841 2300 	strex	r3, r2, [r1]
 80120ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80120ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d1e5      	bne.n	80120be <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80120f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	3314      	adds	r3, #20
 80120f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120fc:	e853 3f00 	ldrex	r3, [r3]
 8012100:	623b      	str	r3, [r7, #32]
   return(result);
 8012102:	6a3b      	ldr	r3, [r7, #32]
 8012104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012108:	663b      	str	r3, [r7, #96]	; 0x60
 801210a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	3314      	adds	r3, #20
 8012110:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012112:	633a      	str	r2, [r7, #48]	; 0x30
 8012114:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012116:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801211a:	e841 2300 	strex	r3, r2, [r1]
 801211e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012122:	2b00      	cmp	r3, #0
 8012124:	d1e5      	bne.n	80120f2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012128:	2220      	movs	r2, #32
 801212a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801212e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012132:	2b01      	cmp	r3, #1
 8012134:	d119      	bne.n	801216a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	330c      	adds	r3, #12
 801213c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801213e:	693b      	ldr	r3, [r7, #16]
 8012140:	e853 3f00 	ldrex	r3, [r3]
 8012144:	60fb      	str	r3, [r7, #12]
   return(result);
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	f023 0310 	bic.w	r3, r3, #16
 801214c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801214e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	330c      	adds	r3, #12
 8012154:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012156:	61fa      	str	r2, [r7, #28]
 8012158:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801215a:	69b9      	ldr	r1, [r7, #24]
 801215c:	69fa      	ldr	r2, [r7, #28]
 801215e:	e841 2300 	strex	r3, r2, [r1]
 8012162:	617b      	str	r3, [r7, #20]
   return(result);
 8012164:	697b      	ldr	r3, [r7, #20]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d1e5      	bne.n	8012136 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801216a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801216c:	2200      	movs	r2, #0
 801216e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012174:	2b01      	cmp	r3, #1
 8012176:	d106      	bne.n	8012186 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801217a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801217c:	4619      	mov	r1, r3
 801217e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012180:	f7f6 ffc0 	bl	8009104 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012184:	e002      	b.n	801218c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8012186:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012188:	f7ff ff50 	bl	801202c <HAL_UART_RxCpltCallback>
}
 801218c:	bf00      	nop
 801218e:	3770      	adds	r7, #112	; 0x70
 8012190:	46bd      	mov	sp, r7
 8012192:	bd80      	pop	{r7, pc}

08012194 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012194:	b580      	push	{r7, lr}
 8012196:	b084      	sub	sp, #16
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121a0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	2201      	movs	r2, #1
 80121a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121ac:	2b01      	cmp	r3, #1
 80121ae:	d108      	bne.n	80121c2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80121b4:	085b      	lsrs	r3, r3, #1
 80121b6:	b29b      	uxth	r3, r3
 80121b8:	4619      	mov	r1, r3
 80121ba:	68f8      	ldr	r0, [r7, #12]
 80121bc:	f7f6 ffa2 	bl	8009104 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80121c0:	e002      	b.n	80121c8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80121c2:	68f8      	ldr	r0, [r7, #12]
 80121c4:	f7ff ff3c 	bl	8012040 <HAL_UART_RxHalfCpltCallback>
}
 80121c8:	bf00      	nop
 80121ca:	3710      	adds	r7, #16
 80121cc:	46bd      	mov	sp, r7
 80121ce:	bd80      	pop	{r7, pc}

080121d0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b084      	sub	sp, #16
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80121d8:	2300      	movs	r3, #0
 80121da:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121e0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	695b      	ldr	r3, [r3, #20]
 80121e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80121ec:	2b80      	cmp	r3, #128	; 0x80
 80121ee:	bf0c      	ite	eq
 80121f0:	2301      	moveq	r3, #1
 80121f2:	2300      	movne	r3, #0
 80121f4:	b2db      	uxtb	r3, r3
 80121f6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80121f8:	68bb      	ldr	r3, [r7, #8]
 80121fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80121fe:	b2db      	uxtb	r3, r3
 8012200:	2b21      	cmp	r3, #33	; 0x21
 8012202:	d108      	bne.n	8012216 <UART_DMAError+0x46>
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d005      	beq.n	8012216 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801220a:	68bb      	ldr	r3, [r7, #8]
 801220c:	2200      	movs	r2, #0
 801220e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8012210:	68b8      	ldr	r0, [r7, #8]
 8012212:	f000 f91b 	bl	801244c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8012216:	68bb      	ldr	r3, [r7, #8]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	695b      	ldr	r3, [r3, #20]
 801221c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012220:	2b40      	cmp	r3, #64	; 0x40
 8012222:	bf0c      	ite	eq
 8012224:	2301      	moveq	r3, #1
 8012226:	2300      	movne	r3, #0
 8012228:	b2db      	uxtb	r3, r3
 801222a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801222c:	68bb      	ldr	r3, [r7, #8]
 801222e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012232:	b2db      	uxtb	r3, r3
 8012234:	2b22      	cmp	r3, #34	; 0x22
 8012236:	d108      	bne.n	801224a <UART_DMAError+0x7a>
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d005      	beq.n	801224a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801223e:	68bb      	ldr	r3, [r7, #8]
 8012240:	2200      	movs	r2, #0
 8012242:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8012244:	68b8      	ldr	r0, [r7, #8]
 8012246:	f000 f929 	bl	801249c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801224a:	68bb      	ldr	r3, [r7, #8]
 801224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801224e:	f043 0210 	orr.w	r2, r3, #16
 8012252:	68bb      	ldr	r3, [r7, #8]
 8012254:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012256:	68b8      	ldr	r0, [r7, #8]
 8012258:	f7ff fefc 	bl	8012054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801225c:	bf00      	nop
 801225e:	3710      	adds	r7, #16
 8012260:	46bd      	mov	sp, r7
 8012262:	bd80      	pop	{r7, pc}

08012264 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b086      	sub	sp, #24
 8012268:	af00      	add	r7, sp, #0
 801226a:	60f8      	str	r0, [r7, #12]
 801226c:	60b9      	str	r1, [r7, #8]
 801226e:	603b      	str	r3, [r7, #0]
 8012270:	4613      	mov	r3, r2
 8012272:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012274:	e03b      	b.n	80122ee <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012276:	6a3b      	ldr	r3, [r7, #32]
 8012278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801227c:	d037      	beq.n	80122ee <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801227e:	f7fb fd03 	bl	800dc88 <HAL_GetTick>
 8012282:	4602      	mov	r2, r0
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	1ad3      	subs	r3, r2, r3
 8012288:	6a3a      	ldr	r2, [r7, #32]
 801228a:	429a      	cmp	r2, r3
 801228c:	d302      	bcc.n	8012294 <UART_WaitOnFlagUntilTimeout+0x30>
 801228e:	6a3b      	ldr	r3, [r7, #32]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d101      	bne.n	8012298 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012294:	2303      	movs	r3, #3
 8012296:	e03a      	b.n	801230e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	68db      	ldr	r3, [r3, #12]
 801229e:	f003 0304 	and.w	r3, r3, #4
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d023      	beq.n	80122ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80122a6:	68bb      	ldr	r3, [r7, #8]
 80122a8:	2b80      	cmp	r3, #128	; 0x80
 80122aa:	d020      	beq.n	80122ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80122ac:	68bb      	ldr	r3, [r7, #8]
 80122ae:	2b40      	cmp	r3, #64	; 0x40
 80122b0:	d01d      	beq.n	80122ee <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	f003 0308 	and.w	r3, r3, #8
 80122bc:	2b08      	cmp	r3, #8
 80122be:	d116      	bne.n	80122ee <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80122c0:	2300      	movs	r3, #0
 80122c2:	617b      	str	r3, [r7, #20]
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	617b      	str	r3, [r7, #20]
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	685b      	ldr	r3, [r3, #4]
 80122d2:	617b      	str	r3, [r7, #20]
 80122d4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80122d6:	68f8      	ldr	r0, [r7, #12]
 80122d8:	f000 f8e0 	bl	801249c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	2208      	movs	r2, #8
 80122e0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	2200      	movs	r2, #0
 80122e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80122ea:	2301      	movs	r3, #1
 80122ec:	e00f      	b.n	801230e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	681a      	ldr	r2, [r3, #0]
 80122f4:	68bb      	ldr	r3, [r7, #8]
 80122f6:	4013      	ands	r3, r2
 80122f8:	68ba      	ldr	r2, [r7, #8]
 80122fa:	429a      	cmp	r2, r3
 80122fc:	bf0c      	ite	eq
 80122fe:	2301      	moveq	r3, #1
 8012300:	2300      	movne	r3, #0
 8012302:	b2db      	uxtb	r3, r3
 8012304:	461a      	mov	r2, r3
 8012306:	79fb      	ldrb	r3, [r7, #7]
 8012308:	429a      	cmp	r2, r3
 801230a:	d0b4      	beq.n	8012276 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801230c:	2300      	movs	r3, #0
}
 801230e:	4618      	mov	r0, r3
 8012310:	3718      	adds	r7, #24
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}
	...

08012318 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b098      	sub	sp, #96	; 0x60
 801231c:	af00      	add	r7, sp, #0
 801231e:	60f8      	str	r0, [r7, #12]
 8012320:	60b9      	str	r1, [r7, #8]
 8012322:	4613      	mov	r3, r2
 8012324:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8012326:	68ba      	ldr	r2, [r7, #8]
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	88fa      	ldrh	r2, [r7, #6]
 8012330:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	2200      	movs	r2, #0
 8012336:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	2222      	movs	r2, #34	; 0x22
 801233c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012344:	4a3e      	ldr	r2, [pc, #248]	; (8012440 <UART_Start_Receive_DMA+0x128>)
 8012346:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801234c:	4a3d      	ldr	r2, [pc, #244]	; (8012444 <UART_Start_Receive_DMA+0x12c>)
 801234e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012354:	4a3c      	ldr	r2, [pc, #240]	; (8012448 <UART_Start_Receive_DMA+0x130>)
 8012356:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801235c:	2200      	movs	r2, #0
 801235e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8012360:	f107 0308 	add.w	r3, r7, #8
 8012364:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	3304      	adds	r3, #4
 8012370:	4619      	mov	r1, r3
 8012372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012374:	681a      	ldr	r2, [r3, #0]
 8012376:	88fb      	ldrh	r3, [r7, #6]
 8012378:	f7fb fe76 	bl	800e068 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 801237c:	2300      	movs	r3, #0
 801237e:	613b      	str	r3, [r7, #16]
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	613b      	str	r3, [r7, #16]
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	685b      	ldr	r3, [r3, #4]
 801238e:	613b      	str	r3, [r7, #16]
 8012390:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	691b      	ldr	r3, [r3, #16]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d019      	beq.n	80123ce <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	330c      	adds	r3, #12
 80123a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80123a4:	e853 3f00 	ldrex	r3, [r3]
 80123a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80123aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80123b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	330c      	adds	r3, #12
 80123b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80123ba:	64fa      	str	r2, [r7, #76]	; 0x4c
 80123bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80123c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80123c2:	e841 2300 	strex	r3, r2, [r1]
 80123c6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80123c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d1e5      	bne.n	801239a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	3314      	adds	r3, #20
 80123d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123d8:	e853 3f00 	ldrex	r3, [r3]
 80123dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80123de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123e0:	f043 0301 	orr.w	r3, r3, #1
 80123e4:	657b      	str	r3, [r7, #84]	; 0x54
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	3314      	adds	r3, #20
 80123ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80123ee:	63ba      	str	r2, [r7, #56]	; 0x38
 80123f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80123f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80123f6:	e841 2300 	strex	r3, r2, [r1]
 80123fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80123fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d1e5      	bne.n	80123ce <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	3314      	adds	r3, #20
 8012408:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801240a:	69bb      	ldr	r3, [r7, #24]
 801240c:	e853 3f00 	ldrex	r3, [r3]
 8012410:	617b      	str	r3, [r7, #20]
   return(result);
 8012412:	697b      	ldr	r3, [r7, #20]
 8012414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012418:	653b      	str	r3, [r7, #80]	; 0x50
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	3314      	adds	r3, #20
 8012420:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012422:	627a      	str	r2, [r7, #36]	; 0x24
 8012424:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012426:	6a39      	ldr	r1, [r7, #32]
 8012428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801242a:	e841 2300 	strex	r3, r2, [r1]
 801242e:	61fb      	str	r3, [r7, #28]
   return(result);
 8012430:	69fb      	ldr	r3, [r7, #28]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d1e5      	bne.n	8012402 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8012436:	2300      	movs	r3, #0
}
 8012438:	4618      	mov	r0, r3
 801243a:	3760      	adds	r7, #96	; 0x60
 801243c:	46bd      	mov	sp, r7
 801243e:	bd80      	pop	{r7, pc}
 8012440:	08012069 	.word	0x08012069
 8012444:	08012195 	.word	0x08012195
 8012448:	080121d1 	.word	0x080121d1

0801244c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801244c:	b480      	push	{r7}
 801244e:	b089      	sub	sp, #36	; 0x24
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	330c      	adds	r3, #12
 801245a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	e853 3f00 	ldrex	r3, [r3]
 8012462:	60bb      	str	r3, [r7, #8]
   return(result);
 8012464:	68bb      	ldr	r3, [r7, #8]
 8012466:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801246a:	61fb      	str	r3, [r7, #28]
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	330c      	adds	r3, #12
 8012472:	69fa      	ldr	r2, [r7, #28]
 8012474:	61ba      	str	r2, [r7, #24]
 8012476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012478:	6979      	ldr	r1, [r7, #20]
 801247a:	69ba      	ldr	r2, [r7, #24]
 801247c:	e841 2300 	strex	r3, r2, [r1]
 8012480:	613b      	str	r3, [r7, #16]
   return(result);
 8012482:	693b      	ldr	r3, [r7, #16]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d1e5      	bne.n	8012454 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2220      	movs	r2, #32
 801248c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8012490:	bf00      	nop
 8012492:	3724      	adds	r7, #36	; 0x24
 8012494:	46bd      	mov	sp, r7
 8012496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249a:	4770      	bx	lr

0801249c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801249c:	b480      	push	{r7}
 801249e:	b095      	sub	sp, #84	; 0x54
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	330c      	adds	r3, #12
 80124aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124ae:	e853 3f00 	ldrex	r3, [r3]
 80124b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80124b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80124ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	330c      	adds	r3, #12
 80124c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80124c4:	643a      	str	r2, [r7, #64]	; 0x40
 80124c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80124ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80124cc:	e841 2300 	strex	r3, r2, [r1]
 80124d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80124d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d1e5      	bne.n	80124a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	3314      	adds	r3, #20
 80124de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124e0:	6a3b      	ldr	r3, [r7, #32]
 80124e2:	e853 3f00 	ldrex	r3, [r3]
 80124e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80124e8:	69fb      	ldr	r3, [r7, #28]
 80124ea:	f023 0301 	bic.w	r3, r3, #1
 80124ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	3314      	adds	r3, #20
 80124f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80124f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80124fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80124fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012500:	e841 2300 	strex	r3, r2, [r1]
 8012504:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012508:	2b00      	cmp	r3, #0
 801250a:	d1e5      	bne.n	80124d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012510:	2b01      	cmp	r3, #1
 8012512:	d119      	bne.n	8012548 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	330c      	adds	r3, #12
 801251a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	e853 3f00 	ldrex	r3, [r3]
 8012522:	60bb      	str	r3, [r7, #8]
   return(result);
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	f023 0310 	bic.w	r3, r3, #16
 801252a:	647b      	str	r3, [r7, #68]	; 0x44
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	330c      	adds	r3, #12
 8012532:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012534:	61ba      	str	r2, [r7, #24]
 8012536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012538:	6979      	ldr	r1, [r7, #20]
 801253a:	69ba      	ldr	r2, [r7, #24]
 801253c:	e841 2300 	strex	r3, r2, [r1]
 8012540:	613b      	str	r3, [r7, #16]
   return(result);
 8012542:	693b      	ldr	r3, [r7, #16]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d1e5      	bne.n	8012514 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	2220      	movs	r2, #32
 801254c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	2200      	movs	r2, #0
 8012554:	631a      	str	r2, [r3, #48]	; 0x30
}
 8012556:	bf00      	nop
 8012558:	3754      	adds	r7, #84	; 0x54
 801255a:	46bd      	mov	sp, r7
 801255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012560:	4770      	bx	lr

08012562 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012562:	b580      	push	{r7, lr}
 8012564:	b084      	sub	sp, #16
 8012566:	af00      	add	r7, sp, #0
 8012568:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801256e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	2200      	movs	r2, #0
 8012574:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	2200      	movs	r2, #0
 801257a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801257c:	68f8      	ldr	r0, [r7, #12]
 801257e:	f7ff fd69 	bl	8012054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012582:	bf00      	nop
 8012584:	3710      	adds	r7, #16
 8012586:	46bd      	mov	sp, r7
 8012588:	bd80      	pop	{r7, pc}

0801258a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801258a:	b480      	push	{r7}
 801258c:	b085      	sub	sp, #20
 801258e:	af00      	add	r7, sp, #0
 8012590:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012598:	b2db      	uxtb	r3, r3
 801259a:	2b21      	cmp	r3, #33	; 0x21
 801259c:	d13e      	bne.n	801261c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	689b      	ldr	r3, [r3, #8]
 80125a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80125a6:	d114      	bne.n	80125d2 <UART_Transmit_IT+0x48>
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	691b      	ldr	r3, [r3, #16]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d110      	bne.n	80125d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	6a1b      	ldr	r3, [r3, #32]
 80125b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	881b      	ldrh	r3, [r3, #0]
 80125ba:	461a      	mov	r2, r3
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80125c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	6a1b      	ldr	r3, [r3, #32]
 80125ca:	1c9a      	adds	r2, r3, #2
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	621a      	str	r2, [r3, #32]
 80125d0:	e008      	b.n	80125e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	6a1b      	ldr	r3, [r3, #32]
 80125d6:	1c59      	adds	r1, r3, #1
 80125d8:	687a      	ldr	r2, [r7, #4]
 80125da:	6211      	str	r1, [r2, #32]
 80125dc:	781a      	ldrb	r2, [r3, #0]
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80125e8:	b29b      	uxth	r3, r3
 80125ea:	3b01      	subs	r3, #1
 80125ec:	b29b      	uxth	r3, r3
 80125ee:	687a      	ldr	r2, [r7, #4]
 80125f0:	4619      	mov	r1, r3
 80125f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d10f      	bne.n	8012618 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	68da      	ldr	r2, [r3, #12]
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012606:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	68da      	ldr	r2, [r3, #12]
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012616:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8012618:	2300      	movs	r3, #0
 801261a:	e000      	b.n	801261e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801261c:	2302      	movs	r3, #2
  }
}
 801261e:	4618      	mov	r0, r3
 8012620:	3714      	adds	r7, #20
 8012622:	46bd      	mov	sp, r7
 8012624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012628:	4770      	bx	lr

0801262a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801262a:	b580      	push	{r7, lr}
 801262c:	b082      	sub	sp, #8
 801262e:	af00      	add	r7, sp, #0
 8012630:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	68da      	ldr	r2, [r3, #12]
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012640:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	2220      	movs	r2, #32
 8012646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801264a:	6878      	ldr	r0, [r7, #4]
 801264c:	f7ff fce4 	bl	8012018 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8012650:	2300      	movs	r3, #0
}
 8012652:	4618      	mov	r0, r3
 8012654:	3708      	adds	r7, #8
 8012656:	46bd      	mov	sp, r7
 8012658:	bd80      	pop	{r7, pc}

0801265a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801265a:	b580      	push	{r7, lr}
 801265c:	b08c      	sub	sp, #48	; 0x30
 801265e:	af00      	add	r7, sp, #0
 8012660:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012668:	b2db      	uxtb	r3, r3
 801266a:	2b22      	cmp	r3, #34	; 0x22
 801266c:	f040 80ae 	bne.w	80127cc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	689b      	ldr	r3, [r3, #8]
 8012674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012678:	d117      	bne.n	80126aa <UART_Receive_IT+0x50>
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	691b      	ldr	r3, [r3, #16]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d113      	bne.n	80126aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8012682:	2300      	movs	r3, #0
 8012684:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801268a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	685b      	ldr	r3, [r3, #4]
 8012692:	b29b      	uxth	r3, r3
 8012694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012698:	b29a      	uxth	r2, r3
 801269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801269c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126a2:	1c9a      	adds	r2, r3, #2
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	629a      	str	r2, [r3, #40]	; 0x28
 80126a8:	e026      	b.n	80126f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80126b0:	2300      	movs	r3, #0
 80126b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	689b      	ldr	r3, [r3, #8]
 80126b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80126bc:	d007      	beq.n	80126ce <UART_Receive_IT+0x74>
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	689b      	ldr	r3, [r3, #8]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d10a      	bne.n	80126dc <UART_Receive_IT+0x82>
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	691b      	ldr	r3, [r3, #16]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d106      	bne.n	80126dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	685b      	ldr	r3, [r3, #4]
 80126d4:	b2da      	uxtb	r2, r3
 80126d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126d8:	701a      	strb	r2, [r3, #0]
 80126da:	e008      	b.n	80126ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	685b      	ldr	r3, [r3, #4]
 80126e2:	b2db      	uxtb	r3, r3
 80126e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80126e8:	b2da      	uxtb	r2, r3
 80126ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126f2:	1c5a      	adds	r2, r3, #1
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80126fc:	b29b      	uxth	r3, r3
 80126fe:	3b01      	subs	r3, #1
 8012700:	b29b      	uxth	r3, r3
 8012702:	687a      	ldr	r2, [r7, #4]
 8012704:	4619      	mov	r1, r3
 8012706:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8012708:	2b00      	cmp	r3, #0
 801270a:	d15d      	bne.n	80127c8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	68da      	ldr	r2, [r3, #12]
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	f022 0220 	bic.w	r2, r2, #32
 801271a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	68da      	ldr	r2, [r3, #12]
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801272a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	695a      	ldr	r2, [r3, #20]
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	f022 0201 	bic.w	r2, r2, #1
 801273a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	2220      	movs	r2, #32
 8012740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	2200      	movs	r2, #0
 8012748:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801274e:	2b01      	cmp	r3, #1
 8012750:	d135      	bne.n	80127be <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	2200      	movs	r2, #0
 8012756:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	330c      	adds	r3, #12
 801275e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012760:	697b      	ldr	r3, [r7, #20]
 8012762:	e853 3f00 	ldrex	r3, [r3]
 8012766:	613b      	str	r3, [r7, #16]
   return(result);
 8012768:	693b      	ldr	r3, [r7, #16]
 801276a:	f023 0310 	bic.w	r3, r3, #16
 801276e:	627b      	str	r3, [r7, #36]	; 0x24
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	330c      	adds	r3, #12
 8012776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012778:	623a      	str	r2, [r7, #32]
 801277a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801277c:	69f9      	ldr	r1, [r7, #28]
 801277e:	6a3a      	ldr	r2, [r7, #32]
 8012780:	e841 2300 	strex	r3, r2, [r1]
 8012784:	61bb      	str	r3, [r7, #24]
   return(result);
 8012786:	69bb      	ldr	r3, [r7, #24]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d1e5      	bne.n	8012758 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	f003 0310 	and.w	r3, r3, #16
 8012796:	2b10      	cmp	r3, #16
 8012798:	d10a      	bne.n	80127b0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801279a:	2300      	movs	r3, #0
 801279c:	60fb      	str	r3, [r7, #12]
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	60fb      	str	r3, [r7, #12]
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	685b      	ldr	r3, [r3, #4]
 80127ac:	60fb      	str	r3, [r7, #12]
 80127ae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80127b4:	4619      	mov	r1, r3
 80127b6:	6878      	ldr	r0, [r7, #4]
 80127b8:	f7f6 fca4 	bl	8009104 <HAL_UARTEx_RxEventCallback>
 80127bc:	e002      	b.n	80127c4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80127be:	6878      	ldr	r0, [r7, #4]
 80127c0:	f7ff fc34 	bl	801202c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80127c4:	2300      	movs	r3, #0
 80127c6:	e002      	b.n	80127ce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80127c8:	2300      	movs	r3, #0
 80127ca:	e000      	b.n	80127ce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80127cc:	2302      	movs	r3, #2
  }
}
 80127ce:	4618      	mov	r0, r3
 80127d0:	3730      	adds	r7, #48	; 0x30
 80127d2:	46bd      	mov	sp, r7
 80127d4:	bd80      	pop	{r7, pc}
	...

080127d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80127d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80127dc:	b0c0      	sub	sp, #256	; 0x100
 80127de:	af00      	add	r7, sp, #0
 80127e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80127e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	691b      	ldr	r3, [r3, #16]
 80127ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80127f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80127f4:	68d9      	ldr	r1, [r3, #12]
 80127f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80127fa:	681a      	ldr	r2, [r3, #0]
 80127fc:	ea40 0301 	orr.w	r3, r0, r1
 8012800:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8012802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012806:	689a      	ldr	r2, [r3, #8]
 8012808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801280c:	691b      	ldr	r3, [r3, #16]
 801280e:	431a      	orrs	r2, r3
 8012810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012814:	695b      	ldr	r3, [r3, #20]
 8012816:	431a      	orrs	r2, r3
 8012818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801281c:	69db      	ldr	r3, [r3, #28]
 801281e:	4313      	orrs	r3, r2
 8012820:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8012824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	68db      	ldr	r3, [r3, #12]
 801282c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8012830:	f021 010c 	bic.w	r1, r1, #12
 8012834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012838:	681a      	ldr	r2, [r3, #0]
 801283a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801283e:	430b      	orrs	r3, r1
 8012840:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8012842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	695b      	ldr	r3, [r3, #20]
 801284a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801284e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012852:	6999      	ldr	r1, [r3, #24]
 8012854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012858:	681a      	ldr	r2, [r3, #0]
 801285a:	ea40 0301 	orr.w	r3, r0, r1
 801285e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8012860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012864:	681a      	ldr	r2, [r3, #0]
 8012866:	4b8f      	ldr	r3, [pc, #572]	; (8012aa4 <UART_SetConfig+0x2cc>)
 8012868:	429a      	cmp	r2, r3
 801286a:	d005      	beq.n	8012878 <UART_SetConfig+0xa0>
 801286c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012870:	681a      	ldr	r2, [r3, #0]
 8012872:	4b8d      	ldr	r3, [pc, #564]	; (8012aa8 <UART_SetConfig+0x2d0>)
 8012874:	429a      	cmp	r2, r3
 8012876:	d104      	bne.n	8012882 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8012878:	f7fc fd9c 	bl	800f3b4 <HAL_RCC_GetPCLK2Freq>
 801287c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8012880:	e003      	b.n	801288a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8012882:	f7fc fd83 	bl	800f38c <HAL_RCC_GetPCLK1Freq>
 8012886:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801288a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801288e:	69db      	ldr	r3, [r3, #28]
 8012890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012894:	f040 810c 	bne.w	8012ab0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8012898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801289c:	2200      	movs	r2, #0
 801289e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80128a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80128a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80128aa:	4622      	mov	r2, r4
 80128ac:	462b      	mov	r3, r5
 80128ae:	1891      	adds	r1, r2, r2
 80128b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80128b2:	415b      	adcs	r3, r3
 80128b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80128b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80128ba:	4621      	mov	r1, r4
 80128bc:	eb12 0801 	adds.w	r8, r2, r1
 80128c0:	4629      	mov	r1, r5
 80128c2:	eb43 0901 	adc.w	r9, r3, r1
 80128c6:	f04f 0200 	mov.w	r2, #0
 80128ca:	f04f 0300 	mov.w	r3, #0
 80128ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80128d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80128d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80128da:	4690      	mov	r8, r2
 80128dc:	4699      	mov	r9, r3
 80128de:	4623      	mov	r3, r4
 80128e0:	eb18 0303 	adds.w	r3, r8, r3
 80128e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80128e8:	462b      	mov	r3, r5
 80128ea:	eb49 0303 	adc.w	r3, r9, r3
 80128ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80128f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80128f6:	685b      	ldr	r3, [r3, #4]
 80128f8:	2200      	movs	r2, #0
 80128fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80128fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8012902:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8012906:	460b      	mov	r3, r1
 8012908:	18db      	adds	r3, r3, r3
 801290a:	653b      	str	r3, [r7, #80]	; 0x50
 801290c:	4613      	mov	r3, r2
 801290e:	eb42 0303 	adc.w	r3, r2, r3
 8012912:	657b      	str	r3, [r7, #84]	; 0x54
 8012914:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012918:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801291c:	f7f4 f94c 	bl	8006bb8 <__aeabi_uldivmod>
 8012920:	4602      	mov	r2, r0
 8012922:	460b      	mov	r3, r1
 8012924:	4b61      	ldr	r3, [pc, #388]	; (8012aac <UART_SetConfig+0x2d4>)
 8012926:	fba3 2302 	umull	r2, r3, r3, r2
 801292a:	095b      	lsrs	r3, r3, #5
 801292c:	011c      	lsls	r4, r3, #4
 801292e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012932:	2200      	movs	r2, #0
 8012934:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012938:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801293c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8012940:	4642      	mov	r2, r8
 8012942:	464b      	mov	r3, r9
 8012944:	1891      	adds	r1, r2, r2
 8012946:	64b9      	str	r1, [r7, #72]	; 0x48
 8012948:	415b      	adcs	r3, r3
 801294a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801294c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8012950:	4641      	mov	r1, r8
 8012952:	eb12 0a01 	adds.w	sl, r2, r1
 8012956:	4649      	mov	r1, r9
 8012958:	eb43 0b01 	adc.w	fp, r3, r1
 801295c:	f04f 0200 	mov.w	r2, #0
 8012960:	f04f 0300 	mov.w	r3, #0
 8012964:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8012968:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801296c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8012970:	4692      	mov	sl, r2
 8012972:	469b      	mov	fp, r3
 8012974:	4643      	mov	r3, r8
 8012976:	eb1a 0303 	adds.w	r3, sl, r3
 801297a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801297e:	464b      	mov	r3, r9
 8012980:	eb4b 0303 	adc.w	r3, fp, r3
 8012984:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801298c:	685b      	ldr	r3, [r3, #4]
 801298e:	2200      	movs	r2, #0
 8012990:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012994:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8012998:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801299c:	460b      	mov	r3, r1
 801299e:	18db      	adds	r3, r3, r3
 80129a0:	643b      	str	r3, [r7, #64]	; 0x40
 80129a2:	4613      	mov	r3, r2
 80129a4:	eb42 0303 	adc.w	r3, r2, r3
 80129a8:	647b      	str	r3, [r7, #68]	; 0x44
 80129aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80129ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80129b2:	f7f4 f901 	bl	8006bb8 <__aeabi_uldivmod>
 80129b6:	4602      	mov	r2, r0
 80129b8:	460b      	mov	r3, r1
 80129ba:	4611      	mov	r1, r2
 80129bc:	4b3b      	ldr	r3, [pc, #236]	; (8012aac <UART_SetConfig+0x2d4>)
 80129be:	fba3 2301 	umull	r2, r3, r3, r1
 80129c2:	095b      	lsrs	r3, r3, #5
 80129c4:	2264      	movs	r2, #100	; 0x64
 80129c6:	fb02 f303 	mul.w	r3, r2, r3
 80129ca:	1acb      	subs	r3, r1, r3
 80129cc:	00db      	lsls	r3, r3, #3
 80129ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80129d2:	4b36      	ldr	r3, [pc, #216]	; (8012aac <UART_SetConfig+0x2d4>)
 80129d4:	fba3 2302 	umull	r2, r3, r3, r2
 80129d8:	095b      	lsrs	r3, r3, #5
 80129da:	005b      	lsls	r3, r3, #1
 80129dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80129e0:	441c      	add	r4, r3
 80129e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80129e6:	2200      	movs	r2, #0
 80129e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80129ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80129f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80129f4:	4642      	mov	r2, r8
 80129f6:	464b      	mov	r3, r9
 80129f8:	1891      	adds	r1, r2, r2
 80129fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80129fc:	415b      	adcs	r3, r3
 80129fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012a00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8012a04:	4641      	mov	r1, r8
 8012a06:	1851      	adds	r1, r2, r1
 8012a08:	6339      	str	r1, [r7, #48]	; 0x30
 8012a0a:	4649      	mov	r1, r9
 8012a0c:	414b      	adcs	r3, r1
 8012a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8012a10:	f04f 0200 	mov.w	r2, #0
 8012a14:	f04f 0300 	mov.w	r3, #0
 8012a18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8012a1c:	4659      	mov	r1, fp
 8012a1e:	00cb      	lsls	r3, r1, #3
 8012a20:	4651      	mov	r1, sl
 8012a22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012a26:	4651      	mov	r1, sl
 8012a28:	00ca      	lsls	r2, r1, #3
 8012a2a:	4610      	mov	r0, r2
 8012a2c:	4619      	mov	r1, r3
 8012a2e:	4603      	mov	r3, r0
 8012a30:	4642      	mov	r2, r8
 8012a32:	189b      	adds	r3, r3, r2
 8012a34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012a38:	464b      	mov	r3, r9
 8012a3a:	460a      	mov	r2, r1
 8012a3c:	eb42 0303 	adc.w	r3, r2, r3
 8012a40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012a48:	685b      	ldr	r3, [r3, #4]
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8012a50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8012a54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8012a58:	460b      	mov	r3, r1
 8012a5a:	18db      	adds	r3, r3, r3
 8012a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8012a5e:	4613      	mov	r3, r2
 8012a60:	eb42 0303 	adc.w	r3, r2, r3
 8012a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012a66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012a6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8012a6e:	f7f4 f8a3 	bl	8006bb8 <__aeabi_uldivmod>
 8012a72:	4602      	mov	r2, r0
 8012a74:	460b      	mov	r3, r1
 8012a76:	4b0d      	ldr	r3, [pc, #52]	; (8012aac <UART_SetConfig+0x2d4>)
 8012a78:	fba3 1302 	umull	r1, r3, r3, r2
 8012a7c:	095b      	lsrs	r3, r3, #5
 8012a7e:	2164      	movs	r1, #100	; 0x64
 8012a80:	fb01 f303 	mul.w	r3, r1, r3
 8012a84:	1ad3      	subs	r3, r2, r3
 8012a86:	00db      	lsls	r3, r3, #3
 8012a88:	3332      	adds	r3, #50	; 0x32
 8012a8a:	4a08      	ldr	r2, [pc, #32]	; (8012aac <UART_SetConfig+0x2d4>)
 8012a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8012a90:	095b      	lsrs	r3, r3, #5
 8012a92:	f003 0207 	and.w	r2, r3, #7
 8012a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	4422      	add	r2, r4
 8012a9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8012aa0:	e106      	b.n	8012cb0 <UART_SetConfig+0x4d8>
 8012aa2:	bf00      	nop
 8012aa4:	40011000 	.word	0x40011000
 8012aa8:	40011400 	.word	0x40011400
 8012aac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8012ab0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8012aba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8012abe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8012ac2:	4642      	mov	r2, r8
 8012ac4:	464b      	mov	r3, r9
 8012ac6:	1891      	adds	r1, r2, r2
 8012ac8:	6239      	str	r1, [r7, #32]
 8012aca:	415b      	adcs	r3, r3
 8012acc:	627b      	str	r3, [r7, #36]	; 0x24
 8012ace:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012ad2:	4641      	mov	r1, r8
 8012ad4:	1854      	adds	r4, r2, r1
 8012ad6:	4649      	mov	r1, r9
 8012ad8:	eb43 0501 	adc.w	r5, r3, r1
 8012adc:	f04f 0200 	mov.w	r2, #0
 8012ae0:	f04f 0300 	mov.w	r3, #0
 8012ae4:	00eb      	lsls	r3, r5, #3
 8012ae6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8012aea:	00e2      	lsls	r2, r4, #3
 8012aec:	4614      	mov	r4, r2
 8012aee:	461d      	mov	r5, r3
 8012af0:	4643      	mov	r3, r8
 8012af2:	18e3      	adds	r3, r4, r3
 8012af4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012af8:	464b      	mov	r3, r9
 8012afa:	eb45 0303 	adc.w	r3, r5, r3
 8012afe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012b06:	685b      	ldr	r3, [r3, #4]
 8012b08:	2200      	movs	r2, #0
 8012b0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012b0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8012b12:	f04f 0200 	mov.w	r2, #0
 8012b16:	f04f 0300 	mov.w	r3, #0
 8012b1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8012b1e:	4629      	mov	r1, r5
 8012b20:	008b      	lsls	r3, r1, #2
 8012b22:	4621      	mov	r1, r4
 8012b24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012b28:	4621      	mov	r1, r4
 8012b2a:	008a      	lsls	r2, r1, #2
 8012b2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8012b30:	f7f4 f842 	bl	8006bb8 <__aeabi_uldivmod>
 8012b34:	4602      	mov	r2, r0
 8012b36:	460b      	mov	r3, r1
 8012b38:	4b60      	ldr	r3, [pc, #384]	; (8012cbc <UART_SetConfig+0x4e4>)
 8012b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8012b3e:	095b      	lsrs	r3, r3, #5
 8012b40:	011c      	lsls	r4, r3, #4
 8012b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012b46:	2200      	movs	r2, #0
 8012b48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012b4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8012b50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8012b54:	4642      	mov	r2, r8
 8012b56:	464b      	mov	r3, r9
 8012b58:	1891      	adds	r1, r2, r2
 8012b5a:	61b9      	str	r1, [r7, #24]
 8012b5c:	415b      	adcs	r3, r3
 8012b5e:	61fb      	str	r3, [r7, #28]
 8012b60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012b64:	4641      	mov	r1, r8
 8012b66:	1851      	adds	r1, r2, r1
 8012b68:	6139      	str	r1, [r7, #16]
 8012b6a:	4649      	mov	r1, r9
 8012b6c:	414b      	adcs	r3, r1
 8012b6e:	617b      	str	r3, [r7, #20]
 8012b70:	f04f 0200 	mov.w	r2, #0
 8012b74:	f04f 0300 	mov.w	r3, #0
 8012b78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8012b7c:	4659      	mov	r1, fp
 8012b7e:	00cb      	lsls	r3, r1, #3
 8012b80:	4651      	mov	r1, sl
 8012b82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012b86:	4651      	mov	r1, sl
 8012b88:	00ca      	lsls	r2, r1, #3
 8012b8a:	4610      	mov	r0, r2
 8012b8c:	4619      	mov	r1, r3
 8012b8e:	4603      	mov	r3, r0
 8012b90:	4642      	mov	r2, r8
 8012b92:	189b      	adds	r3, r3, r2
 8012b94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012b98:	464b      	mov	r3, r9
 8012b9a:	460a      	mov	r2, r1
 8012b9c:	eb42 0303 	adc.w	r3, r2, r3
 8012ba0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012ba8:	685b      	ldr	r3, [r3, #4]
 8012baa:	2200      	movs	r2, #0
 8012bac:	67bb      	str	r3, [r7, #120]	; 0x78
 8012bae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8012bb0:	f04f 0200 	mov.w	r2, #0
 8012bb4:	f04f 0300 	mov.w	r3, #0
 8012bb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8012bbc:	4649      	mov	r1, r9
 8012bbe:	008b      	lsls	r3, r1, #2
 8012bc0:	4641      	mov	r1, r8
 8012bc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012bc6:	4641      	mov	r1, r8
 8012bc8:	008a      	lsls	r2, r1, #2
 8012bca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8012bce:	f7f3 fff3 	bl	8006bb8 <__aeabi_uldivmod>
 8012bd2:	4602      	mov	r2, r0
 8012bd4:	460b      	mov	r3, r1
 8012bd6:	4611      	mov	r1, r2
 8012bd8:	4b38      	ldr	r3, [pc, #224]	; (8012cbc <UART_SetConfig+0x4e4>)
 8012bda:	fba3 2301 	umull	r2, r3, r3, r1
 8012bde:	095b      	lsrs	r3, r3, #5
 8012be0:	2264      	movs	r2, #100	; 0x64
 8012be2:	fb02 f303 	mul.w	r3, r2, r3
 8012be6:	1acb      	subs	r3, r1, r3
 8012be8:	011b      	lsls	r3, r3, #4
 8012bea:	3332      	adds	r3, #50	; 0x32
 8012bec:	4a33      	ldr	r2, [pc, #204]	; (8012cbc <UART_SetConfig+0x4e4>)
 8012bee:	fba2 2303 	umull	r2, r3, r2, r3
 8012bf2:	095b      	lsrs	r3, r3, #5
 8012bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012bf8:	441c      	add	r4, r3
 8012bfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012bfe:	2200      	movs	r2, #0
 8012c00:	673b      	str	r3, [r7, #112]	; 0x70
 8012c02:	677a      	str	r2, [r7, #116]	; 0x74
 8012c04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8012c08:	4642      	mov	r2, r8
 8012c0a:	464b      	mov	r3, r9
 8012c0c:	1891      	adds	r1, r2, r2
 8012c0e:	60b9      	str	r1, [r7, #8]
 8012c10:	415b      	adcs	r3, r3
 8012c12:	60fb      	str	r3, [r7, #12]
 8012c14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012c18:	4641      	mov	r1, r8
 8012c1a:	1851      	adds	r1, r2, r1
 8012c1c:	6039      	str	r1, [r7, #0]
 8012c1e:	4649      	mov	r1, r9
 8012c20:	414b      	adcs	r3, r1
 8012c22:	607b      	str	r3, [r7, #4]
 8012c24:	f04f 0200 	mov.w	r2, #0
 8012c28:	f04f 0300 	mov.w	r3, #0
 8012c2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8012c30:	4659      	mov	r1, fp
 8012c32:	00cb      	lsls	r3, r1, #3
 8012c34:	4651      	mov	r1, sl
 8012c36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012c3a:	4651      	mov	r1, sl
 8012c3c:	00ca      	lsls	r2, r1, #3
 8012c3e:	4610      	mov	r0, r2
 8012c40:	4619      	mov	r1, r3
 8012c42:	4603      	mov	r3, r0
 8012c44:	4642      	mov	r2, r8
 8012c46:	189b      	adds	r3, r3, r2
 8012c48:	66bb      	str	r3, [r7, #104]	; 0x68
 8012c4a:	464b      	mov	r3, r9
 8012c4c:	460a      	mov	r2, r1
 8012c4e:	eb42 0303 	adc.w	r3, r2, r3
 8012c52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012c58:	685b      	ldr	r3, [r3, #4]
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	663b      	str	r3, [r7, #96]	; 0x60
 8012c5e:	667a      	str	r2, [r7, #100]	; 0x64
 8012c60:	f04f 0200 	mov.w	r2, #0
 8012c64:	f04f 0300 	mov.w	r3, #0
 8012c68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8012c6c:	4649      	mov	r1, r9
 8012c6e:	008b      	lsls	r3, r1, #2
 8012c70:	4641      	mov	r1, r8
 8012c72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012c76:	4641      	mov	r1, r8
 8012c78:	008a      	lsls	r2, r1, #2
 8012c7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8012c7e:	f7f3 ff9b 	bl	8006bb8 <__aeabi_uldivmod>
 8012c82:	4602      	mov	r2, r0
 8012c84:	460b      	mov	r3, r1
 8012c86:	4b0d      	ldr	r3, [pc, #52]	; (8012cbc <UART_SetConfig+0x4e4>)
 8012c88:	fba3 1302 	umull	r1, r3, r3, r2
 8012c8c:	095b      	lsrs	r3, r3, #5
 8012c8e:	2164      	movs	r1, #100	; 0x64
 8012c90:	fb01 f303 	mul.w	r3, r1, r3
 8012c94:	1ad3      	subs	r3, r2, r3
 8012c96:	011b      	lsls	r3, r3, #4
 8012c98:	3332      	adds	r3, #50	; 0x32
 8012c9a:	4a08      	ldr	r2, [pc, #32]	; (8012cbc <UART_SetConfig+0x4e4>)
 8012c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8012ca0:	095b      	lsrs	r3, r3, #5
 8012ca2:	f003 020f 	and.w	r2, r3, #15
 8012ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	4422      	add	r2, r4
 8012cae:	609a      	str	r2, [r3, #8]
}
 8012cb0:	bf00      	nop
 8012cb2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012cbc:	51eb851f 	.word	0x51eb851f

08012cc0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8012cc0:	b084      	sub	sp, #16
 8012cc2:	b480      	push	{r7}
 8012cc4:	b085      	sub	sp, #20
 8012cc6:	af00      	add	r7, sp, #0
 8012cc8:	6078      	str	r0, [r7, #4]
 8012cca:	f107 001c 	add.w	r0, r7, #28
 8012cce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8012cd6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8012cd8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8012cda:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8012cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8012cde:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8012ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8012ce2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8012ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8012ce6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8012cea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8012cec:	68fa      	ldr	r2, [r7, #12]
 8012cee:	4313      	orrs	r3, r2
 8012cf0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	685b      	ldr	r3, [r3, #4]
 8012cf6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8012cfa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012cfe:	68fa      	ldr	r2, [r7, #12]
 8012d00:	431a      	orrs	r2, r3
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012d06:	2300      	movs	r3, #0
}
 8012d08:	4618      	mov	r0, r3
 8012d0a:	3714      	adds	r7, #20
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d12:	b004      	add	sp, #16
 8012d14:	4770      	bx	lr

08012d16 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8012d16:	b480      	push	{r7}
 8012d18:	b083      	sub	sp, #12
 8012d1a:	af00      	add	r7, sp, #0
 8012d1c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8012d24:	4618      	mov	r0, r3
 8012d26:	370c      	adds	r7, #12
 8012d28:	46bd      	mov	sp, r7
 8012d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2e:	4770      	bx	lr

08012d30 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8012d30:	b480      	push	{r7}
 8012d32:	b083      	sub	sp, #12
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
 8012d38:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8012d3a:	683b      	ldr	r3, [r7, #0]
 8012d3c:	681a      	ldr	r2, [r3, #0]
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012d44:	2300      	movs	r3, #0
}
 8012d46:	4618      	mov	r0, r3
 8012d48:	370c      	adds	r7, #12
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d50:	4770      	bx	lr

08012d52 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8012d52:	b480      	push	{r7}
 8012d54:	b083      	sub	sp, #12
 8012d56:	af00      	add	r7, sp, #0
 8012d58:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	2203      	movs	r2, #3
 8012d5e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8012d60:	2300      	movs	r3, #0
}
 8012d62:	4618      	mov	r0, r3
 8012d64:	370c      	adds	r7, #12
 8012d66:	46bd      	mov	sp, r7
 8012d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6c:	4770      	bx	lr

08012d6e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8012d6e:	b480      	push	{r7}
 8012d70:	b083      	sub	sp, #12
 8012d72:	af00      	add	r7, sp, #0
 8012d74:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	f003 0303 	and.w	r3, r3, #3
}
 8012d7e:	4618      	mov	r0, r3
 8012d80:	370c      	adds	r7, #12
 8012d82:	46bd      	mov	sp, r7
 8012d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d88:	4770      	bx	lr

08012d8a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8012d8a:	b480      	push	{r7}
 8012d8c:	b085      	sub	sp, #20
 8012d8e:	af00      	add	r7, sp, #0
 8012d90:	6078      	str	r0, [r7, #4]
 8012d92:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012d94:	2300      	movs	r3, #0
 8012d96:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8012d98:	683b      	ldr	r3, [r7, #0]
 8012d9a:	681a      	ldr	r2, [r3, #0]
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012da0:	683b      	ldr	r3, [r7, #0]
 8012da2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8012da4:	683b      	ldr	r3, [r7, #0]
 8012da6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012da8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8012daa:	683b      	ldr	r3, [r7, #0]
 8012dac:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8012dae:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012db0:	683b      	ldr	r3, [r7, #0]
 8012db2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8012db4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012db6:	68fa      	ldr	r2, [r7, #12]
 8012db8:	4313      	orrs	r3, r2
 8012dba:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	68db      	ldr	r3, [r3, #12]
 8012dc0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012dc4:	f023 030f 	bic.w	r3, r3, #15
 8012dc8:	68fa      	ldr	r2, [r7, #12]
 8012dca:	431a      	orrs	r2, r3
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8012dd0:	2300      	movs	r3, #0
}
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	3714      	adds	r7, #20
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ddc:	4770      	bx	lr

08012dde <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8012dde:	b480      	push	{r7}
 8012de0:	b083      	sub	sp, #12
 8012de2:	af00      	add	r7, sp, #0
 8012de4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	691b      	ldr	r3, [r3, #16]
 8012dea:	b2db      	uxtb	r3, r3
}
 8012dec:	4618      	mov	r0, r3
 8012dee:	370c      	adds	r7, #12
 8012df0:	46bd      	mov	sp, r7
 8012df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df6:	4770      	bx	lr

08012df8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8012df8:	b480      	push	{r7}
 8012dfa:	b085      	sub	sp, #20
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]
 8012e00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	3314      	adds	r3, #20
 8012e06:	461a      	mov	r2, r3
 8012e08:	683b      	ldr	r3, [r7, #0]
 8012e0a:	4413      	add	r3, r2
 8012e0c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	681b      	ldr	r3, [r3, #0]
}  
 8012e12:	4618      	mov	r0, r3
 8012e14:	3714      	adds	r7, #20
 8012e16:	46bd      	mov	sp, r7
 8012e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1c:	4770      	bx	lr

08012e1e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8012e1e:	b480      	push	{r7}
 8012e20:	b085      	sub	sp, #20
 8012e22:	af00      	add	r7, sp, #0
 8012e24:	6078      	str	r0, [r7, #4]
 8012e26:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012e28:	2300      	movs	r3, #0
 8012e2a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8012e2c:	683b      	ldr	r3, [r7, #0]
 8012e2e:	681a      	ldr	r2, [r3, #0]
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8012e34:	683b      	ldr	r3, [r7, #0]
 8012e36:	685a      	ldr	r2, [r3, #4]
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012e3c:	683b      	ldr	r3, [r7, #0]
 8012e3e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8012e40:	683b      	ldr	r3, [r7, #0]
 8012e42:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012e44:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8012e46:	683b      	ldr	r3, [r7, #0]
 8012e48:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8012e4a:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012e4c:	683b      	ldr	r3, [r7, #0]
 8012e4e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8012e50:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012e52:	68fa      	ldr	r2, [r7, #12]
 8012e54:	4313      	orrs	r3, r2
 8012e56:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e5c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	431a      	orrs	r2, r3
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012e68:	2300      	movs	r3, #0

}
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	3714      	adds	r7, #20
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e74:	4770      	bx	lr

08012e76 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8012e76:	b580      	push	{r7, lr}
 8012e78:	b088      	sub	sp, #32
 8012e7a:	af00      	add	r7, sp, #0
 8012e7c:	6078      	str	r0, [r7, #4]
 8012e7e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012e80:	683b      	ldr	r3, [r7, #0]
 8012e82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012e84:	2310      	movs	r3, #16
 8012e86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012e88:	2340      	movs	r3, #64	; 0x40
 8012e8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012e90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012e94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012e96:	f107 0308 	add.w	r3, r7, #8
 8012e9a:	4619      	mov	r1, r3
 8012e9c:	6878      	ldr	r0, [r7, #4]
 8012e9e:	f7ff ff74 	bl	8012d8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8012ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ea6:	2110      	movs	r1, #16
 8012ea8:	6878      	ldr	r0, [r7, #4]
 8012eaa:	f000 f9d7 	bl	801325c <SDMMC_GetCmdResp1>
 8012eae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012eb0:	69fb      	ldr	r3, [r7, #28]
}
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	3720      	adds	r7, #32
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	bd80      	pop	{r7, pc}

08012eba <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8012eba:	b580      	push	{r7, lr}
 8012ebc:	b088      	sub	sp, #32
 8012ebe:	af00      	add	r7, sp, #0
 8012ec0:	6078      	str	r0, [r7, #4]
 8012ec2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012ec4:	683b      	ldr	r3, [r7, #0]
 8012ec6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012ec8:	2311      	movs	r3, #17
 8012eca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012ecc:	2340      	movs	r3, #64	; 0x40
 8012ece:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012ed8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012eda:	f107 0308 	add.w	r3, r7, #8
 8012ede:	4619      	mov	r1, r3
 8012ee0:	6878      	ldr	r0, [r7, #4]
 8012ee2:	f7ff ff52 	bl	8012d8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8012ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8012eea:	2111      	movs	r1, #17
 8012eec:	6878      	ldr	r0, [r7, #4]
 8012eee:	f000 f9b5 	bl	801325c <SDMMC_GetCmdResp1>
 8012ef2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ef4:	69fb      	ldr	r3, [r7, #28]
}
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	3720      	adds	r7, #32
 8012efa:	46bd      	mov	sp, r7
 8012efc:	bd80      	pop	{r7, pc}

08012efe <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8012efe:	b580      	push	{r7, lr}
 8012f00:	b088      	sub	sp, #32
 8012f02:	af00      	add	r7, sp, #0
 8012f04:	6078      	str	r0, [r7, #4]
 8012f06:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012f08:	683b      	ldr	r3, [r7, #0]
 8012f0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8012f0c:	2312      	movs	r3, #18
 8012f0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012f10:	2340      	movs	r3, #64	; 0x40
 8012f12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012f14:	2300      	movs	r3, #0
 8012f16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012f18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012f1e:	f107 0308 	add.w	r3, r7, #8
 8012f22:	4619      	mov	r1, r3
 8012f24:	6878      	ldr	r0, [r7, #4]
 8012f26:	f7ff ff30 	bl	8012d8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8012f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f2e:	2112      	movs	r1, #18
 8012f30:	6878      	ldr	r0, [r7, #4]
 8012f32:	f000 f993 	bl	801325c <SDMMC_GetCmdResp1>
 8012f36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f38:	69fb      	ldr	r3, [r7, #28]
}
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	3720      	adds	r7, #32
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd80      	pop	{r7, pc}

08012f42 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8012f42:	b580      	push	{r7, lr}
 8012f44:	b088      	sub	sp, #32
 8012f46:	af00      	add	r7, sp, #0
 8012f48:	6078      	str	r0, [r7, #4]
 8012f4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012f4c:	683b      	ldr	r3, [r7, #0]
 8012f4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012f50:	2318      	movs	r3, #24
 8012f52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012f54:	2340      	movs	r3, #64	; 0x40
 8012f56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012f58:	2300      	movs	r3, #0
 8012f5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012f62:	f107 0308 	add.w	r3, r7, #8
 8012f66:	4619      	mov	r1, r3
 8012f68:	6878      	ldr	r0, [r7, #4]
 8012f6a:	f7ff ff0e 	bl	8012d8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8012f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f72:	2118      	movs	r1, #24
 8012f74:	6878      	ldr	r0, [r7, #4]
 8012f76:	f000 f971 	bl	801325c <SDMMC_GetCmdResp1>
 8012f7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f7c:	69fb      	ldr	r3, [r7, #28]
}
 8012f7e:	4618      	mov	r0, r3
 8012f80:	3720      	adds	r7, #32
 8012f82:	46bd      	mov	sp, r7
 8012f84:	bd80      	pop	{r7, pc}

08012f86 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8012f86:	b580      	push	{r7, lr}
 8012f88:	b088      	sub	sp, #32
 8012f8a:	af00      	add	r7, sp, #0
 8012f8c:	6078      	str	r0, [r7, #4]
 8012f8e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012f90:	683b      	ldr	r3, [r7, #0]
 8012f92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012f94:	2319      	movs	r3, #25
 8012f96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012f98:	2340      	movs	r3, #64	; 0x40
 8012f9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012fa4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012fa6:	f107 0308 	add.w	r3, r7, #8
 8012faa:	4619      	mov	r1, r3
 8012fac:	6878      	ldr	r0, [r7, #4]
 8012fae:	f7ff feec 	bl	8012d8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8012fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8012fb6:	2119      	movs	r1, #25
 8012fb8:	6878      	ldr	r0, [r7, #4]
 8012fba:	f000 f94f 	bl	801325c <SDMMC_GetCmdResp1>
 8012fbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012fc0:	69fb      	ldr	r3, [r7, #28]
}
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	3720      	adds	r7, #32
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	bd80      	pop	{r7, pc}
	...

08012fcc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b088      	sub	sp, #32
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012fd8:	230c      	movs	r3, #12
 8012fda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012fdc:	2340      	movs	r3, #64	; 0x40
 8012fde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012fe8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012fea:	f107 0308 	add.w	r3, r7, #8
 8012fee:	4619      	mov	r1, r3
 8012ff0:	6878      	ldr	r0, [r7, #4]
 8012ff2:	f7ff feca 	bl	8012d8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8012ff6:	4a05      	ldr	r2, [pc, #20]	; (801300c <SDMMC_CmdStopTransfer+0x40>)
 8012ff8:	210c      	movs	r1, #12
 8012ffa:	6878      	ldr	r0, [r7, #4]
 8012ffc:	f000 f92e 	bl	801325c <SDMMC_GetCmdResp1>
 8013000:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013002:	69fb      	ldr	r3, [r7, #28]
}
 8013004:	4618      	mov	r0, r3
 8013006:	3720      	adds	r7, #32
 8013008:	46bd      	mov	sp, r7
 801300a:	bd80      	pop	{r7, pc}
 801300c:	05f5e100 	.word	0x05f5e100

08013010 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b08a      	sub	sp, #40	; 0x28
 8013014:	af00      	add	r7, sp, #0
 8013016:	60f8      	str	r0, [r7, #12]
 8013018:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801301c:	683b      	ldr	r3, [r7, #0]
 801301e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8013020:	2307      	movs	r3, #7
 8013022:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8013024:	2340      	movs	r3, #64	; 0x40
 8013026:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013028:	2300      	movs	r3, #0
 801302a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801302c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013030:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013032:	f107 0310 	add.w	r3, r7, #16
 8013036:	4619      	mov	r1, r3
 8013038:	68f8      	ldr	r0, [r7, #12]
 801303a:	f7ff fea6 	bl	8012d8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 801303e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013042:	2107      	movs	r1, #7
 8013044:	68f8      	ldr	r0, [r7, #12]
 8013046:	f000 f909 	bl	801325c <SDMMC_GetCmdResp1>
 801304a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 801304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801304e:	4618      	mov	r0, r3
 8013050:	3728      	adds	r7, #40	; 0x28
 8013052:	46bd      	mov	sp, r7
 8013054:	bd80      	pop	{r7, pc}

08013056 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8013056:	b580      	push	{r7, lr}
 8013058:	b088      	sub	sp, #32
 801305a:	af00      	add	r7, sp, #0
 801305c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 801305e:	2300      	movs	r3, #0
 8013060:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8013062:	2300      	movs	r3, #0
 8013064:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8013066:	2300      	movs	r3, #0
 8013068:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801306a:	2300      	movs	r3, #0
 801306c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801306e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013072:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013074:	f107 0308 	add.w	r3, r7, #8
 8013078:	4619      	mov	r1, r3
 801307a:	6878      	ldr	r0, [r7, #4]
 801307c:	f7ff fe85 	bl	8012d8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8013080:	6878      	ldr	r0, [r7, #4]
 8013082:	f000 fb23 	bl	80136cc <SDMMC_GetCmdError>
 8013086:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013088:	69fb      	ldr	r3, [r7, #28]
}
 801308a:	4618      	mov	r0, r3
 801308c:	3720      	adds	r7, #32
 801308e:	46bd      	mov	sp, r7
 8013090:	bd80      	pop	{r7, pc}

08013092 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8013092:	b580      	push	{r7, lr}
 8013094:	b088      	sub	sp, #32
 8013096:	af00      	add	r7, sp, #0
 8013098:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801309a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801309e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80130a0:	2308      	movs	r3, #8
 80130a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80130a4:	2340      	movs	r3, #64	; 0x40
 80130a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80130a8:	2300      	movs	r3, #0
 80130aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80130ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80130b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80130b2:	f107 0308 	add.w	r3, r7, #8
 80130b6:	4619      	mov	r1, r3
 80130b8:	6878      	ldr	r0, [r7, #4]
 80130ba:	f7ff fe66 	bl	8012d8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80130be:	6878      	ldr	r0, [r7, #4]
 80130c0:	f000 fab6 	bl	8013630 <SDMMC_GetCmdResp7>
 80130c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80130c6:	69fb      	ldr	r3, [r7, #28]
}
 80130c8:	4618      	mov	r0, r3
 80130ca:	3720      	adds	r7, #32
 80130cc:	46bd      	mov	sp, r7
 80130ce:	bd80      	pop	{r7, pc}

080130d0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80130d0:	b580      	push	{r7, lr}
 80130d2:	b088      	sub	sp, #32
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	6078      	str	r0, [r7, #4]
 80130d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80130da:	683b      	ldr	r3, [r7, #0]
 80130dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80130de:	2337      	movs	r3, #55	; 0x37
 80130e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80130e2:	2340      	movs	r3, #64	; 0x40
 80130e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80130e6:	2300      	movs	r3, #0
 80130e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80130ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80130ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80130f0:	f107 0308 	add.w	r3, r7, #8
 80130f4:	4619      	mov	r1, r3
 80130f6:	6878      	ldr	r0, [r7, #4]
 80130f8:	f7ff fe47 	bl	8012d8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80130fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8013100:	2137      	movs	r1, #55	; 0x37
 8013102:	6878      	ldr	r0, [r7, #4]
 8013104:	f000 f8aa 	bl	801325c <SDMMC_GetCmdResp1>
 8013108:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801310a:	69fb      	ldr	r3, [r7, #28]
}
 801310c:	4618      	mov	r0, r3
 801310e:	3720      	adds	r7, #32
 8013110:	46bd      	mov	sp, r7
 8013112:	bd80      	pop	{r7, pc}

08013114 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8013114:	b580      	push	{r7, lr}
 8013116:	b088      	sub	sp, #32
 8013118:	af00      	add	r7, sp, #0
 801311a:	6078      	str	r0, [r7, #4]
 801311c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 801311e:	683b      	ldr	r3, [r7, #0]
 8013120:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013128:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801312a:	2329      	movs	r3, #41	; 0x29
 801312c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801312e:	2340      	movs	r3, #64	; 0x40
 8013130:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013132:	2300      	movs	r3, #0
 8013134:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801313a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801313c:	f107 0308 	add.w	r3, r7, #8
 8013140:	4619      	mov	r1, r3
 8013142:	6878      	ldr	r0, [r7, #4]
 8013144:	f7ff fe21 	bl	8012d8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8013148:	6878      	ldr	r0, [r7, #4]
 801314a:	f000 f9bd 	bl	80134c8 <SDMMC_GetCmdResp3>
 801314e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013150:	69fb      	ldr	r3, [r7, #28]
}
 8013152:	4618      	mov	r0, r3
 8013154:	3720      	adds	r7, #32
 8013156:	46bd      	mov	sp, r7
 8013158:	bd80      	pop	{r7, pc}

0801315a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 801315a:	b580      	push	{r7, lr}
 801315c:	b088      	sub	sp, #32
 801315e:	af00      	add	r7, sp, #0
 8013160:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8013162:	2300      	movs	r3, #0
 8013164:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8013166:	2302      	movs	r3, #2
 8013168:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 801316a:	23c0      	movs	r3, #192	; 0xc0
 801316c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801316e:	2300      	movs	r3, #0
 8013170:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013176:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013178:	f107 0308 	add.w	r3, r7, #8
 801317c:	4619      	mov	r1, r3
 801317e:	6878      	ldr	r0, [r7, #4]
 8013180:	f7ff fe03 	bl	8012d8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8013184:	6878      	ldr	r0, [r7, #4]
 8013186:	f000 f957 	bl	8013438 <SDMMC_GetCmdResp2>
 801318a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801318c:	69fb      	ldr	r3, [r7, #28]
}
 801318e:	4618      	mov	r0, r3
 8013190:	3720      	adds	r7, #32
 8013192:	46bd      	mov	sp, r7
 8013194:	bd80      	pop	{r7, pc}

08013196 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8013196:	b580      	push	{r7, lr}
 8013198:	b088      	sub	sp, #32
 801319a:	af00      	add	r7, sp, #0
 801319c:	6078      	str	r0, [r7, #4]
 801319e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80131a0:	683b      	ldr	r3, [r7, #0]
 80131a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80131a4:	2309      	movs	r3, #9
 80131a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80131a8:	23c0      	movs	r3, #192	; 0xc0
 80131aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80131ac:	2300      	movs	r3, #0
 80131ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80131b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80131b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80131b6:	f107 0308 	add.w	r3, r7, #8
 80131ba:	4619      	mov	r1, r3
 80131bc:	6878      	ldr	r0, [r7, #4]
 80131be:	f7ff fde4 	bl	8012d8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80131c2:	6878      	ldr	r0, [r7, #4]
 80131c4:	f000 f938 	bl	8013438 <SDMMC_GetCmdResp2>
 80131c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80131ca:	69fb      	ldr	r3, [r7, #28]
}
 80131cc:	4618      	mov	r0, r3
 80131ce:	3720      	adds	r7, #32
 80131d0:	46bd      	mov	sp, r7
 80131d2:	bd80      	pop	{r7, pc}

080131d4 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b088      	sub	sp, #32
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
 80131dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80131de:	2300      	movs	r3, #0
 80131e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80131e2:	2303      	movs	r3, #3
 80131e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80131e6:	2340      	movs	r3, #64	; 0x40
 80131e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80131ea:	2300      	movs	r3, #0
 80131ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80131ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80131f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80131f4:	f107 0308 	add.w	r3, r7, #8
 80131f8:	4619      	mov	r1, r3
 80131fa:	6878      	ldr	r0, [r7, #4]
 80131fc:	f7ff fdc5 	bl	8012d8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8013200:	683a      	ldr	r2, [r7, #0]
 8013202:	2103      	movs	r1, #3
 8013204:	6878      	ldr	r0, [r7, #4]
 8013206:	f000 f99d 	bl	8013544 <SDMMC_GetCmdResp6>
 801320a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801320c:	69fb      	ldr	r3, [r7, #28]
}
 801320e:	4618      	mov	r0, r3
 8013210:	3720      	adds	r7, #32
 8013212:	46bd      	mov	sp, r7
 8013214:	bd80      	pop	{r7, pc}

08013216 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8013216:	b580      	push	{r7, lr}
 8013218:	b088      	sub	sp, #32
 801321a:	af00      	add	r7, sp, #0
 801321c:	6078      	str	r0, [r7, #4]
 801321e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8013220:	683b      	ldr	r3, [r7, #0]
 8013222:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8013224:	230d      	movs	r3, #13
 8013226:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8013228:	2340      	movs	r3, #64	; 0x40
 801322a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801322c:	2300      	movs	r3, #0
 801322e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013234:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013236:	f107 0308 	add.w	r3, r7, #8
 801323a:	4619      	mov	r1, r3
 801323c:	6878      	ldr	r0, [r7, #4]
 801323e:	f7ff fda4 	bl	8012d8a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8013242:	f241 3288 	movw	r2, #5000	; 0x1388
 8013246:	210d      	movs	r1, #13
 8013248:	6878      	ldr	r0, [r7, #4]
 801324a:	f000 f807 	bl	801325c <SDMMC_GetCmdResp1>
 801324e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013250:	69fb      	ldr	r3, [r7, #28]
}
 8013252:	4618      	mov	r0, r3
 8013254:	3720      	adds	r7, #32
 8013256:	46bd      	mov	sp, r7
 8013258:	bd80      	pop	{r7, pc}
	...

0801325c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b088      	sub	sp, #32
 8013260:	af00      	add	r7, sp, #0
 8013262:	60f8      	str	r0, [r7, #12]
 8013264:	460b      	mov	r3, r1
 8013266:	607a      	str	r2, [r7, #4]
 8013268:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801326a:	4b70      	ldr	r3, [pc, #448]	; (801342c <SDMMC_GetCmdResp1+0x1d0>)
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	4a70      	ldr	r2, [pc, #448]	; (8013430 <SDMMC_GetCmdResp1+0x1d4>)
 8013270:	fba2 2303 	umull	r2, r3, r2, r3
 8013274:	0a5a      	lsrs	r2, r3, #9
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	fb02 f303 	mul.w	r3, r2, r3
 801327c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 801327e:	69fb      	ldr	r3, [r7, #28]
 8013280:	1e5a      	subs	r2, r3, #1
 8013282:	61fa      	str	r2, [r7, #28]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d102      	bne.n	801328e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013288:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801328c:	e0c9      	b.n	8013422 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013292:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8013294:	69bb      	ldr	r3, [r7, #24]
 8013296:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801329a:	2b00      	cmp	r3, #0
 801329c:	d0ef      	beq.n	801327e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801329e:	69bb      	ldr	r3, [r7, #24]
 80132a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d1ea      	bne.n	801327e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132ac:	f003 0304 	and.w	r3, r3, #4
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d004      	beq.n	80132be <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	2204      	movs	r2, #4
 80132b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80132ba:	2304      	movs	r3, #4
 80132bc:	e0b1      	b.n	8013422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132c2:	f003 0301 	and.w	r3, r3, #1
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d004      	beq.n	80132d4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	2201      	movs	r2, #1
 80132ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80132d0:	2301      	movs	r3, #1
 80132d2:	e0a6      	b.n	8013422 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	22c5      	movs	r2, #197	; 0xc5
 80132d8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80132da:	68f8      	ldr	r0, [r7, #12]
 80132dc:	f7ff fd7f 	bl	8012dde <SDIO_GetCommandResponse>
 80132e0:	4603      	mov	r3, r0
 80132e2:	461a      	mov	r2, r3
 80132e4:	7afb      	ldrb	r3, [r7, #11]
 80132e6:	4293      	cmp	r3, r2
 80132e8:	d001      	beq.n	80132ee <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80132ea:	2301      	movs	r3, #1
 80132ec:	e099      	b.n	8013422 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80132ee:	2100      	movs	r1, #0
 80132f0:	68f8      	ldr	r0, [r7, #12]
 80132f2:	f7ff fd81 	bl	8012df8 <SDIO_GetResponse>
 80132f6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80132f8:	697a      	ldr	r2, [r7, #20]
 80132fa:	4b4e      	ldr	r3, [pc, #312]	; (8013434 <SDMMC_GetCmdResp1+0x1d8>)
 80132fc:	4013      	ands	r3, r2
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d101      	bne.n	8013306 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8013302:	2300      	movs	r3, #0
 8013304:	e08d      	b.n	8013422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013306:	697b      	ldr	r3, [r7, #20]
 8013308:	2b00      	cmp	r3, #0
 801330a:	da02      	bge.n	8013312 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801330c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013310:	e087      	b.n	8013422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013312:	697b      	ldr	r3, [r7, #20]
 8013314:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013318:	2b00      	cmp	r3, #0
 801331a:	d001      	beq.n	8013320 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801331c:	2340      	movs	r3, #64	; 0x40
 801331e:	e080      	b.n	8013422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013320:	697b      	ldr	r3, [r7, #20]
 8013322:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013326:	2b00      	cmp	r3, #0
 8013328:	d001      	beq.n	801332e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801332a:	2380      	movs	r3, #128	; 0x80
 801332c:	e079      	b.n	8013422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801332e:	697b      	ldr	r3, [r7, #20]
 8013330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013334:	2b00      	cmp	r3, #0
 8013336:	d002      	beq.n	801333e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013338:	f44f 7380 	mov.w	r3, #256	; 0x100
 801333c:	e071      	b.n	8013422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801333e:	697b      	ldr	r3, [r7, #20]
 8013340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013344:	2b00      	cmp	r3, #0
 8013346:	d002      	beq.n	801334e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013348:	f44f 7300 	mov.w	r3, #512	; 0x200
 801334c:	e069      	b.n	8013422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801334e:	697b      	ldr	r3, [r7, #20]
 8013350:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013354:	2b00      	cmp	r3, #0
 8013356:	d002      	beq.n	801335e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801335c:	e061      	b.n	8013422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801335e:	697b      	ldr	r3, [r7, #20]
 8013360:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013364:	2b00      	cmp	r3, #0
 8013366:	d002      	beq.n	801336e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013368:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801336c:	e059      	b.n	8013422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801336e:	697b      	ldr	r3, [r7, #20]
 8013370:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013374:	2b00      	cmp	r3, #0
 8013376:	d002      	beq.n	801337e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801337c:	e051      	b.n	8013422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801337e:	697b      	ldr	r3, [r7, #20]
 8013380:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013384:	2b00      	cmp	r3, #0
 8013386:	d002      	beq.n	801338e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801338c:	e049      	b.n	8013422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801338e:	697b      	ldr	r3, [r7, #20]
 8013390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013394:	2b00      	cmp	r3, #0
 8013396:	d002      	beq.n	801339e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013398:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801339c:	e041      	b.n	8013422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801339e:	697b      	ldr	r3, [r7, #20]
 80133a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d002      	beq.n	80133ae <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80133a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80133ac:	e039      	b.n	8013422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80133ae:	697b      	ldr	r3, [r7, #20]
 80133b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d002      	beq.n	80133be <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80133b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80133bc:	e031      	b.n	8013422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80133be:	697b      	ldr	r3, [r7, #20]
 80133c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d002      	beq.n	80133ce <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80133c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80133cc:	e029      	b.n	8013422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80133ce:	697b      	ldr	r3, [r7, #20]
 80133d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d002      	beq.n	80133de <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80133d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80133dc:	e021      	b.n	8013422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80133de:	697b      	ldr	r3, [r7, #20]
 80133e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d002      	beq.n	80133ee <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80133e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80133ec:	e019      	b.n	8013422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80133ee:	697b      	ldr	r3, [r7, #20]
 80133f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d002      	beq.n	80133fe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80133f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80133fc:	e011      	b.n	8013422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80133fe:	697b      	ldr	r3, [r7, #20]
 8013400:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013404:	2b00      	cmp	r3, #0
 8013406:	d002      	beq.n	801340e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8013408:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801340c:	e009      	b.n	8013422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801340e:	697b      	ldr	r3, [r7, #20]
 8013410:	f003 0308 	and.w	r3, r3, #8
 8013414:	2b00      	cmp	r3, #0
 8013416:	d002      	beq.n	801341e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8013418:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801341c:	e001      	b.n	8013422 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801341e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8013422:	4618      	mov	r0, r3
 8013424:	3720      	adds	r7, #32
 8013426:	46bd      	mov	sp, r7
 8013428:	bd80      	pop	{r7, pc}
 801342a:	bf00      	nop
 801342c:	20000000 	.word	0x20000000
 8013430:	10624dd3 	.word	0x10624dd3
 8013434:	fdffe008 	.word	0xfdffe008

08013438 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8013438:	b480      	push	{r7}
 801343a:	b085      	sub	sp, #20
 801343c:	af00      	add	r7, sp, #0
 801343e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013440:	4b1f      	ldr	r3, [pc, #124]	; (80134c0 <SDMMC_GetCmdResp2+0x88>)
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	4a1f      	ldr	r2, [pc, #124]	; (80134c4 <SDMMC_GetCmdResp2+0x8c>)
 8013446:	fba2 2303 	umull	r2, r3, r2, r3
 801344a:	0a5b      	lsrs	r3, r3, #9
 801344c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013450:	fb02 f303 	mul.w	r3, r2, r3
 8013454:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	1e5a      	subs	r2, r3, #1
 801345a:	60fa      	str	r2, [r7, #12]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d102      	bne.n	8013466 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013460:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013464:	e026      	b.n	80134b4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801346a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801346c:	68bb      	ldr	r3, [r7, #8]
 801346e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8013472:	2b00      	cmp	r3, #0
 8013474:	d0ef      	beq.n	8013456 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8013476:	68bb      	ldr	r3, [r7, #8]
 8013478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801347c:	2b00      	cmp	r3, #0
 801347e:	d1ea      	bne.n	8013456 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013484:	f003 0304 	and.w	r3, r3, #4
 8013488:	2b00      	cmp	r3, #0
 801348a:	d004      	beq.n	8013496 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	2204      	movs	r2, #4
 8013490:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013492:	2304      	movs	r3, #4
 8013494:	e00e      	b.n	80134b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801349a:	f003 0301 	and.w	r3, r3, #1
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d004      	beq.n	80134ac <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	2201      	movs	r2, #1
 80134a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80134a8:	2301      	movs	r3, #1
 80134aa:	e003      	b.n	80134b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	22c5      	movs	r2, #197	; 0xc5
 80134b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80134b2:	2300      	movs	r3, #0
}
 80134b4:	4618      	mov	r0, r3
 80134b6:	3714      	adds	r7, #20
 80134b8:	46bd      	mov	sp, r7
 80134ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134be:	4770      	bx	lr
 80134c0:	20000000 	.word	0x20000000
 80134c4:	10624dd3 	.word	0x10624dd3

080134c8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80134c8:	b480      	push	{r7}
 80134ca:	b085      	sub	sp, #20
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80134d0:	4b1a      	ldr	r3, [pc, #104]	; (801353c <SDMMC_GetCmdResp3+0x74>)
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	4a1a      	ldr	r2, [pc, #104]	; (8013540 <SDMMC_GetCmdResp3+0x78>)
 80134d6:	fba2 2303 	umull	r2, r3, r2, r3
 80134da:	0a5b      	lsrs	r3, r3, #9
 80134dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80134e0:	fb02 f303 	mul.w	r3, r2, r3
 80134e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	1e5a      	subs	r2, r3, #1
 80134ea:	60fa      	str	r2, [r7, #12]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d102      	bne.n	80134f6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80134f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80134f4:	e01b      	b.n	801352e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80134fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80134fc:	68bb      	ldr	r3, [r7, #8]
 80134fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8013502:	2b00      	cmp	r3, #0
 8013504:	d0ef      	beq.n	80134e6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8013506:	68bb      	ldr	r3, [r7, #8]
 8013508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801350c:	2b00      	cmp	r3, #0
 801350e:	d1ea      	bne.n	80134e6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013514:	f003 0304 	and.w	r3, r3, #4
 8013518:	2b00      	cmp	r3, #0
 801351a:	d004      	beq.n	8013526 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	2204      	movs	r2, #4
 8013520:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013522:	2304      	movs	r3, #4
 8013524:	e003      	b.n	801352e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	22c5      	movs	r2, #197	; 0xc5
 801352a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801352c:	2300      	movs	r3, #0
}
 801352e:	4618      	mov	r0, r3
 8013530:	3714      	adds	r7, #20
 8013532:	46bd      	mov	sp, r7
 8013534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013538:	4770      	bx	lr
 801353a:	bf00      	nop
 801353c:	20000000 	.word	0x20000000
 8013540:	10624dd3 	.word	0x10624dd3

08013544 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b088      	sub	sp, #32
 8013548:	af00      	add	r7, sp, #0
 801354a:	60f8      	str	r0, [r7, #12]
 801354c:	460b      	mov	r3, r1
 801354e:	607a      	str	r2, [r7, #4]
 8013550:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013552:	4b35      	ldr	r3, [pc, #212]	; (8013628 <SDMMC_GetCmdResp6+0xe4>)
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	4a35      	ldr	r2, [pc, #212]	; (801362c <SDMMC_GetCmdResp6+0xe8>)
 8013558:	fba2 2303 	umull	r2, r3, r2, r3
 801355c:	0a5b      	lsrs	r3, r3, #9
 801355e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013562:	fb02 f303 	mul.w	r3, r2, r3
 8013566:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8013568:	69fb      	ldr	r3, [r7, #28]
 801356a:	1e5a      	subs	r2, r3, #1
 801356c:	61fa      	str	r2, [r7, #28]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d102      	bne.n	8013578 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013572:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013576:	e052      	b.n	801361e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801357c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801357e:	69bb      	ldr	r3, [r7, #24]
 8013580:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8013584:	2b00      	cmp	r3, #0
 8013586:	d0ef      	beq.n	8013568 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8013588:	69bb      	ldr	r3, [r7, #24]
 801358a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801358e:	2b00      	cmp	r3, #0
 8013590:	d1ea      	bne.n	8013568 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013596:	f003 0304 	and.w	r3, r3, #4
 801359a:	2b00      	cmp	r3, #0
 801359c:	d004      	beq.n	80135a8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	2204      	movs	r2, #4
 80135a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80135a4:	2304      	movs	r3, #4
 80135a6:	e03a      	b.n	801361e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135ac:	f003 0301 	and.w	r3, r3, #1
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d004      	beq.n	80135be <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	2201      	movs	r2, #1
 80135b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80135ba:	2301      	movs	r3, #1
 80135bc:	e02f      	b.n	801361e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80135be:	68f8      	ldr	r0, [r7, #12]
 80135c0:	f7ff fc0d 	bl	8012dde <SDIO_GetCommandResponse>
 80135c4:	4603      	mov	r3, r0
 80135c6:	461a      	mov	r2, r3
 80135c8:	7afb      	ldrb	r3, [r7, #11]
 80135ca:	4293      	cmp	r3, r2
 80135cc:	d001      	beq.n	80135d2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80135ce:	2301      	movs	r3, #1
 80135d0:	e025      	b.n	801361e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	22c5      	movs	r2, #197	; 0xc5
 80135d6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80135d8:	2100      	movs	r1, #0
 80135da:	68f8      	ldr	r0, [r7, #12]
 80135dc:	f7ff fc0c 	bl	8012df8 <SDIO_GetResponse>
 80135e0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80135e2:	697b      	ldr	r3, [r7, #20]
 80135e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d106      	bne.n	80135fa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80135ec:	697b      	ldr	r3, [r7, #20]
 80135ee:	0c1b      	lsrs	r3, r3, #16
 80135f0:	b29a      	uxth	r2, r3
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80135f6:	2300      	movs	r3, #0
 80135f8:	e011      	b.n	801361e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80135fa:	697b      	ldr	r3, [r7, #20]
 80135fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013600:	2b00      	cmp	r3, #0
 8013602:	d002      	beq.n	801360a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013604:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013608:	e009      	b.n	801361e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801360a:	697b      	ldr	r3, [r7, #20]
 801360c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013610:	2b00      	cmp	r3, #0
 8013612:	d002      	beq.n	801361a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013618:	e001      	b.n	801361e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801361a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801361e:	4618      	mov	r0, r3
 8013620:	3720      	adds	r7, #32
 8013622:	46bd      	mov	sp, r7
 8013624:	bd80      	pop	{r7, pc}
 8013626:	bf00      	nop
 8013628:	20000000 	.word	0x20000000
 801362c:	10624dd3 	.word	0x10624dd3

08013630 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8013630:	b480      	push	{r7}
 8013632:	b085      	sub	sp, #20
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013638:	4b22      	ldr	r3, [pc, #136]	; (80136c4 <SDMMC_GetCmdResp7+0x94>)
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	4a22      	ldr	r2, [pc, #136]	; (80136c8 <SDMMC_GetCmdResp7+0x98>)
 801363e:	fba2 2303 	umull	r2, r3, r2, r3
 8013642:	0a5b      	lsrs	r3, r3, #9
 8013644:	f241 3288 	movw	r2, #5000	; 0x1388
 8013648:	fb02 f303 	mul.w	r3, r2, r3
 801364c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	1e5a      	subs	r2, r3, #1
 8013652:	60fa      	str	r2, [r7, #12]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d102      	bne.n	801365e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013658:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801365c:	e02c      	b.n	80136b8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013662:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8013664:	68bb      	ldr	r3, [r7, #8]
 8013666:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801366a:	2b00      	cmp	r3, #0
 801366c:	d0ef      	beq.n	801364e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801366e:	68bb      	ldr	r3, [r7, #8]
 8013670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8013674:	2b00      	cmp	r3, #0
 8013676:	d1ea      	bne.n	801364e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801367c:	f003 0304 	and.w	r3, r3, #4
 8013680:	2b00      	cmp	r3, #0
 8013682:	d004      	beq.n	801368e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	2204      	movs	r2, #4
 8013688:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801368a:	2304      	movs	r3, #4
 801368c:	e014      	b.n	80136b8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013692:	f003 0301 	and.w	r3, r3, #1
 8013696:	2b00      	cmp	r3, #0
 8013698:	d004      	beq.n	80136a4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	2201      	movs	r2, #1
 801369e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80136a0:	2301      	movs	r3, #1
 80136a2:	e009      	b.n	80136b8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d002      	beq.n	80136b6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	2240      	movs	r2, #64	; 0x40
 80136b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80136b6:	2300      	movs	r3, #0
  
}
 80136b8:	4618      	mov	r0, r3
 80136ba:	3714      	adds	r7, #20
 80136bc:	46bd      	mov	sp, r7
 80136be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c2:	4770      	bx	lr
 80136c4:	20000000 	.word	0x20000000
 80136c8:	10624dd3 	.word	0x10624dd3

080136cc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80136cc:	b480      	push	{r7}
 80136ce:	b085      	sub	sp, #20
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80136d4:	4b11      	ldr	r3, [pc, #68]	; (801371c <SDMMC_GetCmdError+0x50>)
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	4a11      	ldr	r2, [pc, #68]	; (8013720 <SDMMC_GetCmdError+0x54>)
 80136da:	fba2 2303 	umull	r2, r3, r2, r3
 80136de:	0a5b      	lsrs	r3, r3, #9
 80136e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80136e4:	fb02 f303 	mul.w	r3, r2, r3
 80136e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	1e5a      	subs	r2, r3, #1
 80136ee:	60fa      	str	r2, [r7, #12]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d102      	bne.n	80136fa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80136f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80136f8:	e009      	b.n	801370e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013702:	2b00      	cmp	r3, #0
 8013704:	d0f1      	beq.n	80136ea <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	22c5      	movs	r2, #197	; 0xc5
 801370a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 801370c:	2300      	movs	r3, #0
}
 801370e:	4618      	mov	r0, r3
 8013710:	3714      	adds	r7, #20
 8013712:	46bd      	mov	sp, r7
 8013714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013718:	4770      	bx	lr
 801371a:	bf00      	nop
 801371c:	20000000 	.word	0x20000000
 8013720:	10624dd3 	.word	0x10624dd3

08013724 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013724:	b580      	push	{r7, lr}
 8013726:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013728:	4904      	ldr	r1, [pc, #16]	; (801373c <MX_FATFS_Init+0x18>)
 801372a:	4805      	ldr	r0, [pc, #20]	; (8013740 <MX_FATFS_Init+0x1c>)
 801372c:	f004 ff5c 	bl	80185e8 <FATFS_LinkDriver>
 8013730:	4603      	mov	r3, r0
 8013732:	461a      	mov	r2, r3
 8013734:	4b03      	ldr	r3, [pc, #12]	; (8013744 <MX_FATFS_Init+0x20>)
 8013736:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013738:	bf00      	nop
 801373a:	bd80      	pop	{r7, pc}
 801373c:	200005f8 	.word	0x200005f8
 8013740:	0801fc5c 	.word	0x0801fc5c
 8013744:	200005f4 	.word	0x200005f4

08013748 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8013748:	b480      	push	{r7}
 801374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801374c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801374e:	4618      	mov	r0, r3
 8013750:	46bd      	mov	sp, r7
 8013752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013756:	4770      	bx	lr

08013758 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013758:	b580      	push	{r7, lr}
 801375a:	b082      	sub	sp, #8
 801375c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801375e:	2300      	movs	r3, #0
 8013760:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013762:	f000 f89e 	bl	80138a2 <BSP_SD_IsDetected>
 8013766:	4603      	mov	r3, r0
 8013768:	2b01      	cmp	r3, #1
 801376a:	d001      	beq.n	8013770 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 801376c:	2301      	movs	r3, #1
 801376e:	e005      	b.n	801377c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8013770:	4804      	ldr	r0, [pc, #16]	; (8013784 <BSP_SD_Init+0x2c>)
 8013772:	f7fb fe33 	bl	800f3dc <HAL_SD_Init>
 8013776:	4603      	mov	r3, r0
 8013778:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 801377a:	79fb      	ldrb	r3, [r7, #7]
}
 801377c:	4618      	mov	r0, r3
 801377e:	3708      	adds	r7, #8
 8013780:	46bd      	mov	sp, r7
 8013782:	bd80      	pop	{r7, pc}
 8013784:	20000390 	.word	0x20000390

08013788 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8013788:	b580      	push	{r7, lr}
 801378a:	b088      	sub	sp, #32
 801378c:	af02      	add	r7, sp, #8
 801378e:	60f8      	str	r0, [r7, #12]
 8013790:	60b9      	str	r1, [r7, #8]
 8013792:	607a      	str	r2, [r7, #4]
 8013794:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8013796:	2300      	movs	r3, #0
 8013798:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 801379a:	683b      	ldr	r3, [r7, #0]
 801379c:	9300      	str	r3, [sp, #0]
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	68ba      	ldr	r2, [r7, #8]
 80137a2:	68f9      	ldr	r1, [r7, #12]
 80137a4:	4806      	ldr	r0, [pc, #24]	; (80137c0 <BSP_SD_ReadBlocks+0x38>)
 80137a6:	f7fb fec9 	bl	800f53c <HAL_SD_ReadBlocks>
 80137aa:	4603      	mov	r3, r0
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d001      	beq.n	80137b4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80137b0:	2301      	movs	r3, #1
 80137b2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80137b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80137b6:	4618      	mov	r0, r3
 80137b8:	3718      	adds	r7, #24
 80137ba:	46bd      	mov	sp, r7
 80137bc:	bd80      	pop	{r7, pc}
 80137be:	bf00      	nop
 80137c0:	20000390 	.word	0x20000390

080137c4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80137c4:	b580      	push	{r7, lr}
 80137c6:	b088      	sub	sp, #32
 80137c8:	af02      	add	r7, sp, #8
 80137ca:	60f8      	str	r0, [r7, #12]
 80137cc:	60b9      	str	r1, [r7, #8]
 80137ce:	607a      	str	r2, [r7, #4]
 80137d0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80137d2:	2300      	movs	r3, #0
 80137d4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80137d6:	683b      	ldr	r3, [r7, #0]
 80137d8:	9300      	str	r3, [sp, #0]
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	68ba      	ldr	r2, [r7, #8]
 80137de:	68f9      	ldr	r1, [r7, #12]
 80137e0:	4806      	ldr	r0, [pc, #24]	; (80137fc <BSP_SD_WriteBlocks+0x38>)
 80137e2:	f7fc f891 	bl	800f908 <HAL_SD_WriteBlocks>
 80137e6:	4603      	mov	r3, r0
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d001      	beq.n	80137f0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80137ec:	2301      	movs	r3, #1
 80137ee:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80137f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80137f2:	4618      	mov	r0, r3
 80137f4:	3718      	adds	r7, #24
 80137f6:	46bd      	mov	sp, r7
 80137f8:	bd80      	pop	{r7, pc}
 80137fa:	bf00      	nop
 80137fc:	20000390 	.word	0x20000390

08013800 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013800:	b580      	push	{r7, lr}
 8013802:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013804:	4805      	ldr	r0, [pc, #20]	; (801381c <BSP_SD_GetCardState+0x1c>)
 8013806:	f7fc fd6d 	bl	80102e4 <HAL_SD_GetCardState>
 801380a:	4603      	mov	r3, r0
 801380c:	2b04      	cmp	r3, #4
 801380e:	bf14      	ite	ne
 8013810:	2301      	movne	r3, #1
 8013812:	2300      	moveq	r3, #0
 8013814:	b2db      	uxtb	r3, r3
}
 8013816:	4618      	mov	r0, r3
 8013818:	bd80      	pop	{r7, pc}
 801381a:	bf00      	nop
 801381c:	20000390 	.word	0x20000390

08013820 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013820:	b580      	push	{r7, lr}
 8013822:	b082      	sub	sp, #8
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8013828:	6879      	ldr	r1, [r7, #4]
 801382a:	4803      	ldr	r0, [pc, #12]	; (8013838 <BSP_SD_GetCardInfo+0x18>)
 801382c:	f7fc fd2e 	bl	801028c <HAL_SD_GetCardInfo>
}
 8013830:	bf00      	nop
 8013832:	3708      	adds	r7, #8
 8013834:	46bd      	mov	sp, r7
 8013836:	bd80      	pop	{r7, pc}
 8013838:	20000390 	.word	0x20000390

0801383c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 801383c:	b580      	push	{r7, lr}
 801383e:	b082      	sub	sp, #8
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8013844:	f000 f818 	bl	8013878 <BSP_SD_AbortCallback>
}
 8013848:	bf00      	nop
 801384a:	3708      	adds	r7, #8
 801384c:	46bd      	mov	sp, r7
 801384e:	bd80      	pop	{r7, pc}

08013850 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013850:	b580      	push	{r7, lr}
 8013852:	b082      	sub	sp, #8
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8013858:	f000 f815 	bl	8013886 <BSP_SD_WriteCpltCallback>
}
 801385c:	bf00      	nop
 801385e:	3708      	adds	r7, #8
 8013860:	46bd      	mov	sp, r7
 8013862:	bd80      	pop	{r7, pc}

08013864 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013864:	b580      	push	{r7, lr}
 8013866:	b082      	sub	sp, #8
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801386c:	f000 f812 	bl	8013894 <BSP_SD_ReadCpltCallback>
}
 8013870:	bf00      	nop
 8013872:	3708      	adds	r7, #8
 8013874:	46bd      	mov	sp, r7
 8013876:	bd80      	pop	{r7, pc}

08013878 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8013878:	b480      	push	{r7}
 801387a:	af00      	add	r7, sp, #0

}
 801387c:	bf00      	nop
 801387e:	46bd      	mov	sp, r7
 8013880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013884:	4770      	bx	lr

08013886 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8013886:	b480      	push	{r7}
 8013888:	af00      	add	r7, sp, #0

}
 801388a:	bf00      	nop
 801388c:	46bd      	mov	sp, r7
 801388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013892:	4770      	bx	lr

08013894 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8013894:	b480      	push	{r7}
 8013896:	af00      	add	r7, sp, #0

}
 8013898:	bf00      	nop
 801389a:	46bd      	mov	sp, r7
 801389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a0:	4770      	bx	lr

080138a2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80138a2:	b480      	push	{r7}
 80138a4:	b083      	sub	sp, #12
 80138a6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80138a8:	2301      	movs	r3, #1
 80138aa:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80138ac:	79fb      	ldrb	r3, [r7, #7]
 80138ae:	b2db      	uxtb	r3, r3
}
 80138b0:	4618      	mov	r0, r3
 80138b2:	370c      	adds	r7, #12
 80138b4:	46bd      	mov	sp, r7
 80138b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ba:	4770      	bx	lr

080138bc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80138bc:	b580      	push	{r7, lr}
 80138be:	b082      	sub	sp, #8
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	4603      	mov	r3, r0
 80138c4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80138c6:	4b0b      	ldr	r3, [pc, #44]	; (80138f4 <SD_CheckStatus+0x38>)
 80138c8:	2201      	movs	r2, #1
 80138ca:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80138cc:	f7ff ff98 	bl	8013800 <BSP_SD_GetCardState>
 80138d0:	4603      	mov	r3, r0
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d107      	bne.n	80138e6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80138d6:	4b07      	ldr	r3, [pc, #28]	; (80138f4 <SD_CheckStatus+0x38>)
 80138d8:	781b      	ldrb	r3, [r3, #0]
 80138da:	b2db      	uxtb	r3, r3
 80138dc:	f023 0301 	bic.w	r3, r3, #1
 80138e0:	b2da      	uxtb	r2, r3
 80138e2:	4b04      	ldr	r3, [pc, #16]	; (80138f4 <SD_CheckStatus+0x38>)
 80138e4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80138e6:	4b03      	ldr	r3, [pc, #12]	; (80138f4 <SD_CheckStatus+0x38>)
 80138e8:	781b      	ldrb	r3, [r3, #0]
 80138ea:	b2db      	uxtb	r3, r3
}
 80138ec:	4618      	mov	r0, r3
 80138ee:	3708      	adds	r7, #8
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd80      	pop	{r7, pc}
 80138f4:	20000009 	.word	0x20000009

080138f8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b082      	sub	sp, #8
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	4603      	mov	r3, r0
 8013900:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8013902:	4b0b      	ldr	r3, [pc, #44]	; (8013930 <SD_initialize+0x38>)
 8013904:	2201      	movs	r2, #1
 8013906:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8013908:	f7ff ff26 	bl	8013758 <BSP_SD_Init>
 801390c:	4603      	mov	r3, r0
 801390e:	2b00      	cmp	r3, #0
 8013910:	d107      	bne.n	8013922 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8013912:	79fb      	ldrb	r3, [r7, #7]
 8013914:	4618      	mov	r0, r3
 8013916:	f7ff ffd1 	bl	80138bc <SD_CheckStatus>
 801391a:	4603      	mov	r3, r0
 801391c:	461a      	mov	r2, r3
 801391e:	4b04      	ldr	r3, [pc, #16]	; (8013930 <SD_initialize+0x38>)
 8013920:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8013922:	4b03      	ldr	r3, [pc, #12]	; (8013930 <SD_initialize+0x38>)
 8013924:	781b      	ldrb	r3, [r3, #0]
 8013926:	b2db      	uxtb	r3, r3
}
 8013928:	4618      	mov	r0, r3
 801392a:	3708      	adds	r7, #8
 801392c:	46bd      	mov	sp, r7
 801392e:	bd80      	pop	{r7, pc}
 8013930:	20000009 	.word	0x20000009

08013934 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013934:	b580      	push	{r7, lr}
 8013936:	b082      	sub	sp, #8
 8013938:	af00      	add	r7, sp, #0
 801393a:	4603      	mov	r3, r0
 801393c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801393e:	79fb      	ldrb	r3, [r7, #7]
 8013940:	4618      	mov	r0, r3
 8013942:	f7ff ffbb 	bl	80138bc <SD_CheckStatus>
 8013946:	4603      	mov	r3, r0
}
 8013948:	4618      	mov	r0, r3
 801394a:	3708      	adds	r7, #8
 801394c:	46bd      	mov	sp, r7
 801394e:	bd80      	pop	{r7, pc}

08013950 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013950:	b580      	push	{r7, lr}
 8013952:	b086      	sub	sp, #24
 8013954:	af00      	add	r7, sp, #0
 8013956:	60b9      	str	r1, [r7, #8]
 8013958:	607a      	str	r2, [r7, #4]
 801395a:	603b      	str	r3, [r7, #0]
 801395c:	4603      	mov	r3, r0
 801395e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013960:	2301      	movs	r3, #1
 8013962:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8013964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013968:	683a      	ldr	r2, [r7, #0]
 801396a:	6879      	ldr	r1, [r7, #4]
 801396c:	68b8      	ldr	r0, [r7, #8]
 801396e:	f7ff ff0b 	bl	8013788 <BSP_SD_ReadBlocks>
 8013972:	4603      	mov	r3, r0
 8013974:	2b00      	cmp	r3, #0
 8013976:	d107      	bne.n	8013988 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8013978:	bf00      	nop
 801397a:	f7ff ff41 	bl	8013800 <BSP_SD_GetCardState>
 801397e:	4603      	mov	r3, r0
 8013980:	2b00      	cmp	r3, #0
 8013982:	d1fa      	bne.n	801397a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8013984:	2300      	movs	r3, #0
 8013986:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8013988:	7dfb      	ldrb	r3, [r7, #23]
}
 801398a:	4618      	mov	r0, r3
 801398c:	3718      	adds	r7, #24
 801398e:	46bd      	mov	sp, r7
 8013990:	bd80      	pop	{r7, pc}

08013992 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013992:	b580      	push	{r7, lr}
 8013994:	b086      	sub	sp, #24
 8013996:	af00      	add	r7, sp, #0
 8013998:	60b9      	str	r1, [r7, #8]
 801399a:	607a      	str	r2, [r7, #4]
 801399c:	603b      	str	r3, [r7, #0]
 801399e:	4603      	mov	r3, r0
 80139a0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80139a2:	2301      	movs	r3, #1
 80139a4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80139a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80139aa:	683a      	ldr	r2, [r7, #0]
 80139ac:	6879      	ldr	r1, [r7, #4]
 80139ae:	68b8      	ldr	r0, [r7, #8]
 80139b0:	f7ff ff08 	bl	80137c4 <BSP_SD_WriteBlocks>
 80139b4:	4603      	mov	r3, r0
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d107      	bne.n	80139ca <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80139ba:	bf00      	nop
 80139bc:	f7ff ff20 	bl	8013800 <BSP_SD_GetCardState>
 80139c0:	4603      	mov	r3, r0
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d1fa      	bne.n	80139bc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80139c6:	2300      	movs	r3, #0
 80139c8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80139ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80139cc:	4618      	mov	r0, r3
 80139ce:	3718      	adds	r7, #24
 80139d0:	46bd      	mov	sp, r7
 80139d2:	bd80      	pop	{r7, pc}

080139d4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b08c      	sub	sp, #48	; 0x30
 80139d8:	af00      	add	r7, sp, #0
 80139da:	4603      	mov	r3, r0
 80139dc:	603a      	str	r2, [r7, #0]
 80139de:	71fb      	strb	r3, [r7, #7]
 80139e0:	460b      	mov	r3, r1
 80139e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80139e4:	2301      	movs	r3, #1
 80139e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80139ea:	4b25      	ldr	r3, [pc, #148]	; (8013a80 <SD_ioctl+0xac>)
 80139ec:	781b      	ldrb	r3, [r3, #0]
 80139ee:	b2db      	uxtb	r3, r3
 80139f0:	f003 0301 	and.w	r3, r3, #1
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d001      	beq.n	80139fc <SD_ioctl+0x28>
 80139f8:	2303      	movs	r3, #3
 80139fa:	e03c      	b.n	8013a76 <SD_ioctl+0xa2>

  switch (cmd)
 80139fc:	79bb      	ldrb	r3, [r7, #6]
 80139fe:	2b03      	cmp	r3, #3
 8013a00:	d834      	bhi.n	8013a6c <SD_ioctl+0x98>
 8013a02:	a201      	add	r2, pc, #4	; (adr r2, 8013a08 <SD_ioctl+0x34>)
 8013a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a08:	08013a19 	.word	0x08013a19
 8013a0c:	08013a21 	.word	0x08013a21
 8013a10:	08013a39 	.word	0x08013a39
 8013a14:	08013a53 	.word	0x08013a53
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013a18:	2300      	movs	r3, #0
 8013a1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013a1e:	e028      	b.n	8013a72 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013a20:	f107 030c 	add.w	r3, r7, #12
 8013a24:	4618      	mov	r0, r3
 8013a26:	f7ff fefb 	bl	8013820 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8013a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a2c:	683b      	ldr	r3, [r7, #0]
 8013a2e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013a30:	2300      	movs	r3, #0
 8013a32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013a36:	e01c      	b.n	8013a72 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013a38:	f107 030c 	add.w	r3, r7, #12
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	f7ff feef 	bl	8013820 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8013a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a44:	b29a      	uxth	r2, r3
 8013a46:	683b      	ldr	r3, [r7, #0]
 8013a48:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013a50:	e00f      	b.n	8013a72 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013a52:	f107 030c 	add.w	r3, r7, #12
 8013a56:	4618      	mov	r0, r3
 8013a58:	f7ff fee2 	bl	8013820 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8013a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a5e:	0a5a      	lsrs	r2, r3, #9
 8013a60:	683b      	ldr	r3, [r7, #0]
 8013a62:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013a64:	2300      	movs	r3, #0
 8013a66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013a6a:	e002      	b.n	8013a72 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013a6c:	2304      	movs	r3, #4
 8013a6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8013a72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013a76:	4618      	mov	r0, r3
 8013a78:	3730      	adds	r7, #48	; 0x30
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	bd80      	pop	{r7, pc}
 8013a7e:	bf00      	nop
 8013a80:	20000009 	.word	0x20000009

08013a84 <_Z13DEV_SPI_WRiteh>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 8013a84:	b580      	push	{r7, lr}
 8013a86:	b082      	sub	sp, #8
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	4603      	mov	r3, r0
 8013a8c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&_dat, 1, 500);
 8013a8e:	1df9      	adds	r1, r7, #7
 8013a90:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8013a94:	2201      	movs	r2, #1
 8013a96:	4803      	ldr	r0, [pc, #12]	; (8013aa4 <_Z13DEV_SPI_WRiteh+0x20>)
 8013a98:	f7fc ff65 	bl	8010966 <HAL_SPI_Transmit>
}
 8013a9c:	bf00      	nop
 8013a9e:	3708      	adds	r7, #8
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	bd80      	pop	{r7, pc}
 8013aa4:	20000414 	.word	0x20000414

08013aa8 <_Z15DEV_Module_Initv>:

int DEV_Module_Init(void)
{
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 8013aac:	2201      	movs	r2, #1
 8013aae:	2120      	movs	r1, #32
 8013ab0:	4809      	ldr	r0, [pc, #36]	; (8013ad8 <_Z15DEV_Module_Initv+0x30>)
 8013ab2:	f7fa ffe1 	bl	800ea78 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8013ab6:	2201      	movs	r2, #1
 8013ab8:	2180      	movs	r1, #128	; 0x80
 8013aba:	4807      	ldr	r0, [pc, #28]	; (8013ad8 <_Z15DEV_Module_Initv+0x30>)
 8013abc:	f7fa ffdc 	bl	800ea78 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 8013ac0:	2201      	movs	r2, #1
 8013ac2:	2140      	movs	r1, #64	; 0x40
 8013ac4:	4804      	ldr	r0, [pc, #16]	; (8013ad8 <_Z15DEV_Module_Initv+0x30>)
 8013ac6:	f7fa ffd7 	bl	800ea78 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8013aca:	2104      	movs	r1, #4
 8013acc:	4803      	ldr	r0, [pc, #12]	; (8013adc <_Z15DEV_Module_Initv+0x34>)
 8013ace:	f7fd f9b9 	bl	8010e44 <HAL_TIM_PWM_Start>
		return 0;
 8013ad2:	2300      	movs	r3, #0
}
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	bd80      	pop	{r7, pc}
 8013ad8:	40020400 	.word	0x40020400
 8013adc:	2000046c 	.word	0x2000046c

08013ae0 <_Z14Paint_NewImagetttt>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8013ae0:	b590      	push	{r4, r7, lr}
 8013ae2:	b083      	sub	sp, #12
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	4604      	mov	r4, r0
 8013ae8:	4608      	mov	r0, r1
 8013aea:	4611      	mov	r1, r2
 8013aec:	461a      	mov	r2, r3
 8013aee:	4623      	mov	r3, r4
 8013af0:	80fb      	strh	r3, [r7, #6]
 8013af2:	4603      	mov	r3, r0
 8013af4:	80bb      	strh	r3, [r7, #4]
 8013af6:	460b      	mov	r3, r1
 8013af8:	807b      	strh	r3, [r7, #2]
 8013afa:	4613      	mov	r3, r2
 8013afc:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 8013afe:	4a1c      	ldr	r2, [pc, #112]	; (8013b70 <_Z14Paint_NewImagetttt+0x90>)
 8013b00:	88fb      	ldrh	r3, [r7, #6]
 8013b02:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8013b04:	4a1a      	ldr	r2, [pc, #104]	; (8013b70 <_Z14Paint_NewImagetttt+0x90>)
 8013b06:	88bb      	ldrh	r3, [r7, #4]
 8013b08:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8013b0a:	4a19      	ldr	r2, [pc, #100]	; (8013b70 <_Z14Paint_NewImagetttt+0x90>)
 8013b0c:	883b      	ldrh	r3, [r7, #0]
 8013b0e:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 8013b10:	4a17      	ldr	r2, [pc, #92]	; (8013b70 <_Z14Paint_NewImagetttt+0x90>)
 8013b12:	88fb      	ldrh	r3, [r7, #6]
 8013b14:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8013b16:	4a16      	ldr	r2, [pc, #88]	; (8013b70 <_Z14Paint_NewImagetttt+0x90>)
 8013b18:	88bb      	ldrh	r3, [r7, #4]
 8013b1a:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 8013b1c:	4b14      	ldr	r3, [pc, #80]	; (8013b70 <_Z14Paint_NewImagetttt+0x90>)
 8013b1e:	8a5b      	ldrh	r3, [r3, #18]
 8013b20:	b29b      	uxth	r3, r3
 8013b22:	4619      	mov	r1, r3
 8013b24:	4b12      	ldr	r3, [pc, #72]	; (8013b70 <_Z14Paint_NewImagetttt+0x90>)
 8013b26:	8a9b      	ldrh	r3, [r3, #20]
 8013b28:	b29b      	uxth	r3, r3
 8013b2a:	461a      	mov	r2, r3
 8013b2c:	4811      	ldr	r0, [pc, #68]	; (8013b74 <_Z14Paint_NewImagetttt+0x94>)
 8013b2e:	f007 fddf 	bl	801b6f0 <iprintf>
   
    Paint.Rotate = Rotate;
 8013b32:	4a0f      	ldr	r2, [pc, #60]	; (8013b70 <_Z14Paint_NewImagetttt+0x90>)
 8013b34:	887b      	ldrh	r3, [r7, #2]
 8013b36:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8013b38:	4b0d      	ldr	r3, [pc, #52]	; (8013b70 <_Z14Paint_NewImagetttt+0x90>)
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8013b3e:	887b      	ldrh	r3, [r7, #2]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d002      	beq.n	8013b4a <_Z14Paint_NewImagetttt+0x6a>
 8013b44:	887b      	ldrh	r3, [r7, #2]
 8013b46:	2bb4      	cmp	r3, #180	; 0xb4
 8013b48:	d106      	bne.n	8013b58 <_Z14Paint_NewImagetttt+0x78>
        Paint.Width = Width;
 8013b4a:	4a09      	ldr	r2, [pc, #36]	; (8013b70 <_Z14Paint_NewImagetttt+0x90>)
 8013b4c:	88fb      	ldrh	r3, [r7, #6]
 8013b4e:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8013b50:	4a07      	ldr	r2, [pc, #28]	; (8013b70 <_Z14Paint_NewImagetttt+0x90>)
 8013b52:	88bb      	ldrh	r3, [r7, #4]
 8013b54:	80d3      	strh	r3, [r2, #6]
 8013b56:	e006      	b.n	8013b66 <_Z14Paint_NewImagetttt+0x86>
    } else {
        Paint.Width = Height;
 8013b58:	4a05      	ldr	r2, [pc, #20]	; (8013b70 <_Z14Paint_NewImagetttt+0x90>)
 8013b5a:	88bb      	ldrh	r3, [r7, #4]
 8013b5c:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8013b5e:	4a04      	ldr	r2, [pc, #16]	; (8013b70 <_Z14Paint_NewImagetttt+0x90>)
 8013b60:	88fb      	ldrh	r3, [r7, #6]
 8013b62:	80d3      	strh	r3, [r2, #6]
    }
}
 8013b64:	bf00      	nop
 8013b66:	bf00      	nop
 8013b68:	370c      	adds	r7, #12
 8013b6a:	46bd      	mov	sp, r7
 8013b6c:	bd90      	pop	{r4, r7, pc}
 8013b6e:	bf00      	nop
 8013b70:	20001634 	.word	0x20001634
 8013b74:	0801efc0 	.word	0x0801efc0

08013b78 <_Z21Paint_SetClearFuntionPFvtE>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 8013b78:	b480      	push	{r7}
 8013b7a:	b083      	sub	sp, #12
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 8013b80:	4a04      	ldr	r2, [pc, #16]	; (8013b94 <_Z21Paint_SetClearFuntionPFvtE+0x1c>)
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	6013      	str	r3, [r2, #0]
}
 8013b86:	bf00      	nop
 8013b88:	370c      	adds	r7, #12
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b90:	4770      	bx	lr
 8013b92:	bf00      	nop
 8013b94:	20001650 	.word	0x20001650

08013b98 <_Z23Paint_SetDisplayFuntionPFvtttE>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 8013b98:	b480      	push	{r7}
 8013b9a:	b083      	sub	sp, #12
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 8013ba0:	4a04      	ldr	r2, [pc, #16]	; (8013bb4 <_Z23Paint_SetDisplayFuntionPFvtttE+0x1c>)
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	6013      	str	r3, [r2, #0]
}
 8013ba6:	bf00      	nop
 8013ba8:	370c      	adds	r7, #12
 8013baa:	46bd      	mov	sp, r7
 8013bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb0:	4770      	bx	lr
 8013bb2:	bf00      	nop
 8013bb4:	2000164c 	.word	0x2000164c

08013bb8 <_Z14Paint_SetPixelttt>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b084      	sub	sp, #16
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	4603      	mov	r3, r0
 8013bc0:	80fb      	strh	r3, [r7, #6]
 8013bc2:	460b      	mov	r3, r1
 8013bc4:	80bb      	strh	r3, [r7, #4]
 8013bc6:	4613      	mov	r3, r2
 8013bc8:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8013bca:	4b55      	ldr	r3, [pc, #340]	; (8013d20 <_Z14Paint_SetPixelttt+0x168>)
 8013bcc:	889b      	ldrh	r3, [r3, #4]
 8013bce:	b29b      	uxth	r3, r3
 8013bd0:	88fa      	ldrh	r2, [r7, #6]
 8013bd2:	429a      	cmp	r2, r3
 8013bd4:	d805      	bhi.n	8013be2 <_Z14Paint_SetPixelttt+0x2a>
 8013bd6:	4b52      	ldr	r3, [pc, #328]	; (8013d20 <_Z14Paint_SetPixelttt+0x168>)
 8013bd8:	88db      	ldrh	r3, [r3, #6]
 8013bda:	b29b      	uxth	r3, r3
 8013bdc:	88ba      	ldrh	r2, [r7, #4]
 8013bde:	429a      	cmp	r2, r3
 8013be0:	d901      	bls.n	8013be6 <_Z14Paint_SetPixelttt+0x2e>
 8013be2:	2301      	movs	r3, #1
 8013be4:	e000      	b.n	8013be8 <_Z14Paint_SetPixelttt+0x30>
 8013be6:	2300      	movs	r3, #0
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d003      	beq.n	8013bf4 <_Z14Paint_SetPixelttt+0x3c>
        Debug("Exceeding display boundaries\r\n");
 8013bec:	484d      	ldr	r0, [pc, #308]	; (8013d24 <_Z14Paint_SetPixelttt+0x16c>)
 8013bee:	f007 fe19 	bl	801b824 <puts>
        return;
 8013bf2:	e092      	b.n	8013d1a <_Z14Paint_SetPixelttt+0x162>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8013bf4:	4b4a      	ldr	r3, [pc, #296]	; (8013d20 <_Z14Paint_SetPixelttt+0x168>)
 8013bf6:	89db      	ldrh	r3, [r3, #14]
 8013bf8:	b29b      	uxth	r3, r3
 8013bfa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013bfe:	d02e      	beq.n	8013c5e <_Z14Paint_SetPixelttt+0xa6>
 8013c00:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013c04:	f300 8086 	bgt.w	8013d14 <_Z14Paint_SetPixelttt+0x15c>
 8013c08:	2bb4      	cmp	r3, #180	; 0xb4
 8013c0a:	d017      	beq.n	8013c3c <_Z14Paint_SetPixelttt+0x84>
 8013c0c:	2bb4      	cmp	r3, #180	; 0xb4
 8013c0e:	f300 8081 	bgt.w	8013d14 <_Z14Paint_SetPixelttt+0x15c>
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d002      	beq.n	8013c1c <_Z14Paint_SetPixelttt+0x64>
 8013c16:	2b5a      	cmp	r3, #90	; 0x5a
 8013c18:	d005      	beq.n	8013c26 <_Z14Paint_SetPixelttt+0x6e>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 8013c1a:	e07b      	b.n	8013d14 <_Z14Paint_SetPixelttt+0x15c>
        X = Xpoint;
 8013c1c:	88fb      	ldrh	r3, [r7, #6]
 8013c1e:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 8013c20:	88bb      	ldrh	r3, [r7, #4]
 8013c22:	81bb      	strh	r3, [r7, #12]
        break;
 8013c24:	e026      	b.n	8013c74 <_Z14Paint_SetPixelttt+0xbc>
        X = Paint.WidthMemory - Ypoint - 1;
 8013c26:	4b3e      	ldr	r3, [pc, #248]	; (8013d20 <_Z14Paint_SetPixelttt+0x168>)
 8013c28:	891b      	ldrh	r3, [r3, #8]
 8013c2a:	b29a      	uxth	r2, r3
 8013c2c:	88bb      	ldrh	r3, [r7, #4]
 8013c2e:	1ad3      	subs	r3, r2, r3
 8013c30:	b29b      	uxth	r3, r3
 8013c32:	3b01      	subs	r3, #1
 8013c34:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8013c36:	88fb      	ldrh	r3, [r7, #6]
 8013c38:	81bb      	strh	r3, [r7, #12]
        break;
 8013c3a:	e01b      	b.n	8013c74 <_Z14Paint_SetPixelttt+0xbc>
        X = Paint.WidthMemory - Xpoint - 1;
 8013c3c:	4b38      	ldr	r3, [pc, #224]	; (8013d20 <_Z14Paint_SetPixelttt+0x168>)
 8013c3e:	891b      	ldrh	r3, [r3, #8]
 8013c40:	b29a      	uxth	r2, r3
 8013c42:	88fb      	ldrh	r3, [r7, #6]
 8013c44:	1ad3      	subs	r3, r2, r3
 8013c46:	b29b      	uxth	r3, r3
 8013c48:	3b01      	subs	r3, #1
 8013c4a:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 8013c4c:	4b34      	ldr	r3, [pc, #208]	; (8013d20 <_Z14Paint_SetPixelttt+0x168>)
 8013c4e:	895b      	ldrh	r3, [r3, #10]
 8013c50:	b29a      	uxth	r2, r3
 8013c52:	88bb      	ldrh	r3, [r7, #4]
 8013c54:	1ad3      	subs	r3, r2, r3
 8013c56:	b29b      	uxth	r3, r3
 8013c58:	3b01      	subs	r3, #1
 8013c5a:	81bb      	strh	r3, [r7, #12]
        break;
 8013c5c:	e00a      	b.n	8013c74 <_Z14Paint_SetPixelttt+0xbc>
        X = Ypoint;
 8013c5e:	88bb      	ldrh	r3, [r7, #4]
 8013c60:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8013c62:	4b2f      	ldr	r3, [pc, #188]	; (8013d20 <_Z14Paint_SetPixelttt+0x168>)
 8013c64:	895b      	ldrh	r3, [r3, #10]
 8013c66:	b29a      	uxth	r2, r3
 8013c68:	88fb      	ldrh	r3, [r7, #6]
 8013c6a:	1ad3      	subs	r3, r2, r3
 8013c6c:	b29b      	uxth	r3, r3
 8013c6e:	3b01      	subs	r3, #1
 8013c70:	81bb      	strh	r3, [r7, #12]
        break;
 8013c72:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8013c74:	4b2a      	ldr	r3, [pc, #168]	; (8013d20 <_Z14Paint_SetPixelttt+0x168>)
 8013c76:	8a1b      	ldrh	r3, [r3, #16]
 8013c78:	b29b      	uxth	r3, r3
 8013c7a:	2b03      	cmp	r3, #3
 8013c7c:	d84c      	bhi.n	8013d18 <_Z14Paint_SetPixelttt+0x160>
 8013c7e:	a201      	add	r2, pc, #4	; (adr r2, 8013c84 <_Z14Paint_SetPixelttt+0xcc>)
 8013c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c84:	08013cdb 	.word	0x08013cdb
 8013c88:	08013c95 	.word	0x08013c95
 8013c8c:	08013ca7 	.word	0x08013ca7
 8013c90:	08013cb9 	.word	0x08013cb9
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8013c94:	4b22      	ldr	r3, [pc, #136]	; (8013d20 <_Z14Paint_SetPixelttt+0x168>)
 8013c96:	891b      	ldrh	r3, [r3, #8]
 8013c98:	b29a      	uxth	r2, r3
 8013c9a:	89fb      	ldrh	r3, [r7, #14]
 8013c9c:	1ad3      	subs	r3, r2, r3
 8013c9e:	b29b      	uxth	r3, r3
 8013ca0:	3b01      	subs	r3, #1
 8013ca2:	81fb      	strh	r3, [r7, #14]
        break;
 8013ca4:	e01a      	b.n	8013cdc <_Z14Paint_SetPixelttt+0x124>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8013ca6:	4b1e      	ldr	r3, [pc, #120]	; (8013d20 <_Z14Paint_SetPixelttt+0x168>)
 8013ca8:	895b      	ldrh	r3, [r3, #10]
 8013caa:	b29a      	uxth	r2, r3
 8013cac:	89bb      	ldrh	r3, [r7, #12]
 8013cae:	1ad3      	subs	r3, r2, r3
 8013cb0:	b29b      	uxth	r3, r3
 8013cb2:	3b01      	subs	r3, #1
 8013cb4:	81bb      	strh	r3, [r7, #12]
        break;
 8013cb6:	e011      	b.n	8013cdc <_Z14Paint_SetPixelttt+0x124>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8013cb8:	4b19      	ldr	r3, [pc, #100]	; (8013d20 <_Z14Paint_SetPixelttt+0x168>)
 8013cba:	891b      	ldrh	r3, [r3, #8]
 8013cbc:	b29a      	uxth	r2, r3
 8013cbe:	89fb      	ldrh	r3, [r7, #14]
 8013cc0:	1ad3      	subs	r3, r2, r3
 8013cc2:	b29b      	uxth	r3, r3
 8013cc4:	3b01      	subs	r3, #1
 8013cc6:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8013cc8:	4b15      	ldr	r3, [pc, #84]	; (8013d20 <_Z14Paint_SetPixelttt+0x168>)
 8013cca:	895b      	ldrh	r3, [r3, #10]
 8013ccc:	b29a      	uxth	r2, r3
 8013cce:	89bb      	ldrh	r3, [r7, #12]
 8013cd0:	1ad3      	subs	r3, r2, r3
 8013cd2:	b29b      	uxth	r3, r3
 8013cd4:	3b01      	subs	r3, #1
 8013cd6:	81bb      	strh	r3, [r7, #12]
        break;
 8013cd8:	e000      	b.n	8013cdc <_Z14Paint_SetPixelttt+0x124>
        break;
 8013cda:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8013cdc:	4b10      	ldr	r3, [pc, #64]	; (8013d20 <_Z14Paint_SetPixelttt+0x168>)
 8013cde:	891b      	ldrh	r3, [r3, #8]
 8013ce0:	b29b      	uxth	r3, r3
 8013ce2:	89fa      	ldrh	r2, [r7, #14]
 8013ce4:	429a      	cmp	r2, r3
 8013ce6:	d805      	bhi.n	8013cf4 <_Z14Paint_SetPixelttt+0x13c>
 8013ce8:	4b0d      	ldr	r3, [pc, #52]	; (8013d20 <_Z14Paint_SetPixelttt+0x168>)
 8013cea:	895b      	ldrh	r3, [r3, #10]
 8013cec:	b29b      	uxth	r3, r3
 8013cee:	89ba      	ldrh	r2, [r7, #12]
 8013cf0:	429a      	cmp	r2, r3
 8013cf2:	d901      	bls.n	8013cf8 <_Z14Paint_SetPixelttt+0x140>
 8013cf4:	2301      	movs	r3, #1
 8013cf6:	e000      	b.n	8013cfa <_Z14Paint_SetPixelttt+0x142>
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d003      	beq.n	8013d06 <_Z14Paint_SetPixelttt+0x14e>
        Debug("Exceeding display boundaries\r\n");
 8013cfe:	4809      	ldr	r0, [pc, #36]	; (8013d24 <_Z14Paint_SetPixelttt+0x16c>)
 8013d00:	f007 fd90 	bl	801b824 <puts>
        return;
 8013d04:	e009      	b.n	8013d1a <_Z14Paint_SetPixelttt+0x162>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8013d06:	4b08      	ldr	r3, [pc, #32]	; (8013d28 <_Z14Paint_SetPixelttt+0x170>)
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	887a      	ldrh	r2, [r7, #2]
 8013d0c:	89b9      	ldrh	r1, [r7, #12]
 8013d0e:	89f8      	ldrh	r0, [r7, #14]
 8013d10:	4798      	blx	r3
 8013d12:	e002      	b.n	8013d1a <_Z14Paint_SetPixelttt+0x162>
        return;
 8013d14:	bf00      	nop
 8013d16:	e000      	b.n	8013d1a <_Z14Paint_SetPixelttt+0x162>
        return;
 8013d18:	bf00      	nop
}
 8013d1a:	3710      	adds	r7, #16
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd80      	pop	{r7, pc}
 8013d20:	20001634 	.word	0x20001634
 8013d24:	0801f0c0 	.word	0x0801f0c0
 8013d28:	2000164c 	.word	0x2000164c

08013d2c <_Z11Paint_Cleart>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b082      	sub	sp, #8
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	4603      	mov	r3, r0
 8013d34:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 8013d36:	4b04      	ldr	r3, [pc, #16]	; (8013d48 <_Z11Paint_Cleart+0x1c>)
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	88fa      	ldrh	r2, [r7, #6]
 8013d3c:	4610      	mov	r0, r2
 8013d3e:	4798      	blx	r3
}
 8013d40:	bf00      	nop
 8013d42:	3708      	adds	r7, #8
 8013d44:	46bd      	mov	sp, r7
 8013d46:	bd80      	pop	{r7, pc}
 8013d48:	20001650 	.word	0x20001650

08013d4c <_Z14Paint_DrawCharttcP6_tFonttt>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b088      	sub	sp, #32
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	607b      	str	r3, [r7, #4]
 8013d54:	4603      	mov	r3, r0
 8013d56:	81fb      	strh	r3, [r7, #14]
 8013d58:	460b      	mov	r3, r1
 8013d5a:	81bb      	strh	r3, [r7, #12]
 8013d5c:	4613      	mov	r3, r2
 8013d5e:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8013d60:	4b4f      	ldr	r3, [pc, #316]	; (8013ea0 <_Z14Paint_DrawCharttcP6_tFonttt+0x154>)
 8013d62:	889b      	ldrh	r3, [r3, #4]
 8013d64:	b29b      	uxth	r3, r3
 8013d66:	89fa      	ldrh	r2, [r7, #14]
 8013d68:	429a      	cmp	r2, r3
 8013d6a:	d805      	bhi.n	8013d78 <_Z14Paint_DrawCharttcP6_tFonttt+0x2c>
 8013d6c:	4b4c      	ldr	r3, [pc, #304]	; (8013ea0 <_Z14Paint_DrawCharttcP6_tFonttt+0x154>)
 8013d6e:	88db      	ldrh	r3, [r3, #6]
 8013d70:	b29b      	uxth	r3, r3
 8013d72:	89ba      	ldrh	r2, [r7, #12]
 8013d74:	429a      	cmp	r2, r3
 8013d76:	d901      	bls.n	8013d7c <_Z14Paint_DrawCharttcP6_tFonttt+0x30>
 8013d78:	2301      	movs	r3, #1
 8013d7a:	e000      	b.n	8013d7e <_Z14Paint_DrawCharttcP6_tFonttt+0x32>
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d003      	beq.n	8013d8a <_Z14Paint_DrawCharttcP6_tFonttt+0x3e>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8013d82:	4848      	ldr	r0, [pc, #288]	; (8013ea4 <_Z14Paint_DrawCharttcP6_tFonttt+0x158>)
 8013d84:	f007 fd4e 	bl	801b824 <puts>
        return;
 8013d88:	e086      	b.n	8013e98 <_Z14Paint_DrawCharttcP6_tFonttt+0x14c>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8013d8a:	7afb      	ldrb	r3, [r7, #11]
 8013d8c:	3b20      	subs	r3, #32
 8013d8e:	687a      	ldr	r2, [r7, #4]
 8013d90:	88d2      	ldrh	r2, [r2, #6]
 8013d92:	fb02 f303 	mul.w	r3, r2, r3
 8013d96:	687a      	ldr	r2, [r7, #4]
 8013d98:	8892      	ldrh	r2, [r2, #4]
 8013d9a:	08d2      	lsrs	r2, r2, #3
 8013d9c:	b292      	uxth	r2, r2
 8013d9e:	4611      	mov	r1, r2
 8013da0:	687a      	ldr	r2, [r7, #4]
 8013da2:	8892      	ldrh	r2, [r2, #4]
 8013da4:	f002 0207 	and.w	r2, r2, #7
 8013da8:	2a00      	cmp	r2, #0
 8013daa:	d001      	beq.n	8013db0 <_Z14Paint_DrawCharttcP6_tFonttt+0x64>
 8013dac:	2201      	movs	r2, #1
 8013dae:	e000      	b.n	8013db2 <_Z14Paint_DrawCharttcP6_tFonttt+0x66>
 8013db0:	2200      	movs	r2, #0
 8013db2:	440a      	add	r2, r1
 8013db4:	fb02 f303 	mul.w	r3, r2, r3
 8013db8:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	681a      	ldr	r2, [r3, #0]
 8013dbe:	697b      	ldr	r3, [r7, #20]
 8013dc0:	4413      	add	r3, r2
 8013dc2:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	83fb      	strh	r3, [r7, #30]
 8013dc8:	e061      	b.n	8013e8e <_Z14Paint_DrawCharttcP6_tFonttt+0x142>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8013dca:	2300      	movs	r3, #0
 8013dcc:	83bb      	strh	r3, [r7, #28]
 8013dce:	e04d      	b.n	8013e6c <_Z14Paint_DrawCharttcP6_tFonttt+0x120>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8013dd0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013dd6:	4293      	cmp	r3, r2
 8013dd8:	d118      	bne.n	8013e0c <_Z14Paint_DrawCharttcP6_tFonttt+0xc0>
                if (*ptr & (0x80 >> (Column % 8)))
 8013dda:	69bb      	ldr	r3, [r7, #24]
 8013ddc:	781b      	ldrb	r3, [r3, #0]
 8013dde:	4619      	mov	r1, r3
 8013de0:	8bbb      	ldrh	r3, [r7, #28]
 8013de2:	f003 0307 	and.w	r3, r3, #7
 8013de6:	2280      	movs	r2, #128	; 0x80
 8013de8:	fa42 f303 	asr.w	r3, r2, r3
 8013dec:	400b      	ands	r3, r1
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d031      	beq.n	8013e56 <_Z14Paint_DrawCharttcP6_tFonttt+0x10a>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8013df2:	89fa      	ldrh	r2, [r7, #14]
 8013df4:	8bbb      	ldrh	r3, [r7, #28]
 8013df6:	4413      	add	r3, r2
 8013df8:	b298      	uxth	r0, r3
 8013dfa:	89ba      	ldrh	r2, [r7, #12]
 8013dfc:	8bfb      	ldrh	r3, [r7, #30]
 8013dfe:	4413      	add	r3, r2
 8013e00:	b29b      	uxth	r3, r3
 8013e02:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8013e04:	4619      	mov	r1, r3
 8013e06:	f7ff fed7 	bl	8013bb8 <_Z14Paint_SetPixelttt>
 8013e0a:	e024      	b.n	8013e56 <_Z14Paint_DrawCharttcP6_tFonttt+0x10a>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8013e0c:	69bb      	ldr	r3, [r7, #24]
 8013e0e:	781b      	ldrb	r3, [r3, #0]
 8013e10:	4619      	mov	r1, r3
 8013e12:	8bbb      	ldrh	r3, [r7, #28]
 8013e14:	f003 0307 	and.w	r3, r3, #7
 8013e18:	2280      	movs	r2, #128	; 0x80
 8013e1a:	fa42 f303 	asr.w	r3, r2, r3
 8013e1e:	400b      	ands	r3, r1
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d00c      	beq.n	8013e3e <_Z14Paint_DrawCharttcP6_tFonttt+0xf2>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8013e24:	89fa      	ldrh	r2, [r7, #14]
 8013e26:	8bbb      	ldrh	r3, [r7, #28]
 8013e28:	4413      	add	r3, r2
 8013e2a:	b298      	uxth	r0, r3
 8013e2c:	89ba      	ldrh	r2, [r7, #12]
 8013e2e:	8bfb      	ldrh	r3, [r7, #30]
 8013e30:	4413      	add	r3, r2
 8013e32:	b29b      	uxth	r3, r3
 8013e34:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8013e36:	4619      	mov	r1, r3
 8013e38:	f7ff febe 	bl	8013bb8 <_Z14Paint_SetPixelttt>
 8013e3c:	e00b      	b.n	8013e56 <_Z14Paint_DrawCharttcP6_tFonttt+0x10a>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8013e3e:	89fa      	ldrh	r2, [r7, #14]
 8013e40:	8bbb      	ldrh	r3, [r7, #28]
 8013e42:	4413      	add	r3, r2
 8013e44:	b298      	uxth	r0, r3
 8013e46:	89ba      	ldrh	r2, [r7, #12]
 8013e48:	8bfb      	ldrh	r3, [r7, #30]
 8013e4a:	4413      	add	r3, r2
 8013e4c:	b29b      	uxth	r3, r3
 8013e4e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013e50:	4619      	mov	r1, r3
 8013e52:	f7ff feb1 	bl	8013bb8 <_Z14Paint_SetPixelttt>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8013e56:	8bbb      	ldrh	r3, [r7, #28]
 8013e58:	f003 0307 	and.w	r3, r3, #7
 8013e5c:	2b07      	cmp	r3, #7
 8013e5e:	d102      	bne.n	8013e66 <_Z14Paint_DrawCharttcP6_tFonttt+0x11a>
                ptr++;
 8013e60:	69bb      	ldr	r3, [r7, #24]
 8013e62:	3301      	adds	r3, #1
 8013e64:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8013e66:	8bbb      	ldrh	r3, [r7, #28]
 8013e68:	3301      	adds	r3, #1
 8013e6a:	83bb      	strh	r3, [r7, #28]
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	889b      	ldrh	r3, [r3, #4]
 8013e70:	8bba      	ldrh	r2, [r7, #28]
 8013e72:	429a      	cmp	r2, r3
 8013e74:	d3ac      	bcc.n	8013dd0 <_Z14Paint_DrawCharttcP6_tFonttt+0x84>
        }// Write a line
        if (Font->Width % 8 != 0)
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	889b      	ldrh	r3, [r3, #4]
 8013e7a:	f003 0307 	and.w	r3, r3, #7
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d002      	beq.n	8013e88 <_Z14Paint_DrawCharttcP6_tFonttt+0x13c>
            ptr++;
 8013e82:	69bb      	ldr	r3, [r7, #24]
 8013e84:	3301      	adds	r3, #1
 8013e86:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8013e88:	8bfb      	ldrh	r3, [r7, #30]
 8013e8a:	3301      	adds	r3, #1
 8013e8c:	83fb      	strh	r3, [r7, #30]
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	88db      	ldrh	r3, [r3, #6]
 8013e92:	8bfa      	ldrh	r2, [r7, #30]
 8013e94:	429a      	cmp	r2, r3
 8013e96:	d398      	bcc.n	8013dca <_Z14Paint_DrawCharttcP6_tFonttt+0x7e>
    }// Write all
}
 8013e98:	3720      	adds	r7, #32
 8013e9a:	46bd      	mov	sp, r7
 8013e9c:	bd80      	pop	{r7, pc}
 8013e9e:	bf00      	nop
 8013ea0:	20001634 	.word	0x20001634
 8013ea4:	0801f1dc 	.word	0x0801f1dc

08013ea8 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b088      	sub	sp, #32
 8013eac:	af02      	add	r7, sp, #8
 8013eae:	60ba      	str	r2, [r7, #8]
 8013eb0:	607b      	str	r3, [r7, #4]
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	81fb      	strh	r3, [r7, #14]
 8013eb6:	460b      	mov	r3, r1
 8013eb8:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8013eba:	89fb      	ldrh	r3, [r7, #14]
 8013ebc:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8013ebe:	89bb      	ldrh	r3, [r7, #12]
 8013ec0:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8013ec2:	4b2b      	ldr	r3, [pc, #172]	; (8013f70 <_Z19Paint_DrawString_ENttPKcP6_tFonttt+0xc8>)
 8013ec4:	889b      	ldrh	r3, [r3, #4]
 8013ec6:	b29b      	uxth	r3, r3
 8013ec8:	89fa      	ldrh	r2, [r7, #14]
 8013eca:	429a      	cmp	r2, r3
 8013ecc:	d805      	bhi.n	8013eda <_Z19Paint_DrawString_ENttPKcP6_tFonttt+0x32>
 8013ece:	4b28      	ldr	r3, [pc, #160]	; (8013f70 <_Z19Paint_DrawString_ENttPKcP6_tFonttt+0xc8>)
 8013ed0:	88db      	ldrh	r3, [r3, #6]
 8013ed2:	b29b      	uxth	r3, r3
 8013ed4:	89ba      	ldrh	r2, [r7, #12]
 8013ed6:	429a      	cmp	r2, r3
 8013ed8:	d901      	bls.n	8013ede <_Z19Paint_DrawString_ENttPKcP6_tFonttt+0x36>
 8013eda:	2301      	movs	r3, #1
 8013edc:	e000      	b.n	8013ee0 <_Z19Paint_DrawString_ENttPKcP6_tFonttt+0x38>
 8013ede:	2300      	movs	r3, #0
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d03d      	beq.n	8013f60 <_Z19Paint_DrawString_ENttPKcP6_tFonttt+0xb8>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8013ee4:	4823      	ldr	r0, [pc, #140]	; (8013f74 <_Z19Paint_DrawString_ENttPKcP6_tFonttt+0xcc>)
 8013ee6:	f007 fc9d 	bl	801b824 <puts>
        return;
 8013eea:	e03d      	b.n	8013f68 <_Z19Paint_DrawString_ENttPKcP6_tFonttt+0xc0>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8013eec:	8afb      	ldrh	r3, [r7, #22]
 8013eee:	687a      	ldr	r2, [r7, #4]
 8013ef0:	8892      	ldrh	r2, [r2, #4]
 8013ef2:	4413      	add	r3, r2
 8013ef4:	4a1e      	ldr	r2, [pc, #120]	; (8013f70 <_Z19Paint_DrawString_ENttPKcP6_tFonttt+0xc8>)
 8013ef6:	8892      	ldrh	r2, [r2, #4]
 8013ef8:	b292      	uxth	r2, r2
 8013efa:	4293      	cmp	r3, r2
 8013efc:	bfcc      	ite	gt
 8013efe:	2301      	movgt	r3, #1
 8013f00:	2300      	movle	r3, #0
 8013f02:	b2db      	uxtb	r3, r3
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d006      	beq.n	8013f16 <_Z19Paint_DrawString_ENttPKcP6_tFonttt+0x6e>
            Xpoint = Xstart;
 8013f08:	89fb      	ldrh	r3, [r7, #14]
 8013f0a:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	88da      	ldrh	r2, [r3, #6]
 8013f10:	8abb      	ldrh	r3, [r7, #20]
 8013f12:	4413      	add	r3, r2
 8013f14:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8013f16:	8abb      	ldrh	r3, [r7, #20]
 8013f18:	687a      	ldr	r2, [r7, #4]
 8013f1a:	88d2      	ldrh	r2, [r2, #6]
 8013f1c:	4413      	add	r3, r2
 8013f1e:	4a14      	ldr	r2, [pc, #80]	; (8013f70 <_Z19Paint_DrawString_ENttPKcP6_tFonttt+0xc8>)
 8013f20:	88d2      	ldrh	r2, [r2, #6]
 8013f22:	b292      	uxth	r2, r2
 8013f24:	4293      	cmp	r3, r2
 8013f26:	bfcc      	ite	gt
 8013f28:	2301      	movgt	r3, #1
 8013f2a:	2300      	movle	r3, #0
 8013f2c:	b2db      	uxtb	r3, r3
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d003      	beq.n	8013f3a <_Z19Paint_DrawString_ENttPKcP6_tFonttt+0x92>
            Xpoint = Xstart;
 8013f32:	89fb      	ldrh	r3, [r7, #14]
 8013f34:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8013f36:	89bb      	ldrh	r3, [r7, #12]
 8013f38:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8013f3a:	68bb      	ldr	r3, [r7, #8]
 8013f3c:	781a      	ldrb	r2, [r3, #0]
 8013f3e:	8ab9      	ldrh	r1, [r7, #20]
 8013f40:	8af8      	ldrh	r0, [r7, #22]
 8013f42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013f44:	9301      	str	r3, [sp, #4]
 8013f46:	8c3b      	ldrh	r3, [r7, #32]
 8013f48:	9300      	str	r3, [sp, #0]
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	f7ff fefe 	bl	8013d4c <_Z14Paint_DrawCharttcP6_tFonttt>

        //The next character of the address
        pString ++;
 8013f50:	68bb      	ldr	r3, [r7, #8]
 8013f52:	3301      	adds	r3, #1
 8013f54:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	889a      	ldrh	r2, [r3, #4]
 8013f5a:	8afb      	ldrh	r3, [r7, #22]
 8013f5c:	4413      	add	r3, r2
 8013f5e:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8013f60:	68bb      	ldr	r3, [r7, #8]
 8013f62:	781b      	ldrb	r3, [r3, #0]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d1c1      	bne.n	8013eec <_Z19Paint_DrawString_ENttPKcP6_tFonttt+0x44>
    }
}
 8013f68:	3718      	adds	r7, #24
 8013f6a:	46bd      	mov	sp, r7
 8013f6c:	bd80      	pop	{r7, pc}
 8013f6e:	bf00      	nop
 8013f70:	20001634 	.word	0x20001634
 8013f74:	0801f21c 	.word	0x0801f21c

08013f78 <_ZL13LCD_2IN_Resetv>:
/*******************************************************************************
function:
	Hardware reset
*******************************************************************************/
static void LCD_2IN_Reset(void)
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	af00      	add	r7, sp, #0
	LCD_2IN_RST_1;
 8013f7c:	2201      	movs	r2, #1
 8013f7e:	2140      	movs	r1, #64	; 0x40
 8013f80:	480b      	ldr	r0, [pc, #44]	; (8013fb0 <_ZL13LCD_2IN_Resetv+0x38>)
 8013f82:	f7fa fd79 	bl	800ea78 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 8013f86:	2064      	movs	r0, #100	; 0x64
 8013f88:	f7f9 fe8a 	bl	800dca0 <HAL_Delay>
	LCD_2IN_RST_0;
 8013f8c:	2200      	movs	r2, #0
 8013f8e:	2140      	movs	r1, #64	; 0x40
 8013f90:	4807      	ldr	r0, [pc, #28]	; (8013fb0 <_ZL13LCD_2IN_Resetv+0x38>)
 8013f92:	f7fa fd71 	bl	800ea78 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 8013f96:	2064      	movs	r0, #100	; 0x64
 8013f98:	f7f9 fe82 	bl	800dca0 <HAL_Delay>
	LCD_2IN_RST_1;
 8013f9c:	2201      	movs	r2, #1
 8013f9e:	2140      	movs	r1, #64	; 0x40
 8013fa0:	4803      	ldr	r0, [pc, #12]	; (8013fb0 <_ZL13LCD_2IN_Resetv+0x38>)
 8013fa2:	f7fa fd69 	bl	800ea78 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 8013fa6:	2064      	movs	r0, #100	; 0x64
 8013fa8:	f7f9 fe7a 	bl	800dca0 <HAL_Delay>
}
 8013fac:	bf00      	nop
 8013fae:	bd80      	pop	{r7, pc}
 8013fb0:	40020400 	.word	0x40020400

08013fb4 <_ZL21LCD_2IN_Write_Commandh>:
/*******************************************************************************
function:
		Write data and commands
*******************************************************************************/
static void LCD_2IN_Write_Command(UBYTE data)	 
{	
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b082      	sub	sp, #8
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	4603      	mov	r3, r0
 8013fbc:	71fb      	strb	r3, [r7, #7]
	LCD_2IN_CS_0;
 8013fbe:	2200      	movs	r2, #0
 8013fc0:	2180      	movs	r1, #128	; 0x80
 8013fc2:	4808      	ldr	r0, [pc, #32]	; (8013fe4 <_ZL21LCD_2IN_Write_Commandh+0x30>)
 8013fc4:	f7fa fd58 	bl	800ea78 <HAL_GPIO_WritePin>
	LCD_2IN_DC_0;
 8013fc8:	2200      	movs	r2, #0
 8013fca:	2120      	movs	r1, #32
 8013fcc:	4805      	ldr	r0, [pc, #20]	; (8013fe4 <_ZL21LCD_2IN_Write_Commandh+0x30>)
 8013fce:	f7fa fd53 	bl	800ea78 <HAL_GPIO_WritePin>
	DEV_SPI_WRITE(data);
 8013fd2:	79fb      	ldrb	r3, [r7, #7]
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	f7ff fd55 	bl	8013a84 <_Z13DEV_SPI_WRiteh>
}
 8013fda:	bf00      	nop
 8013fdc:	3708      	adds	r7, #8
 8013fde:	46bd      	mov	sp, r7
 8013fe0:	bd80      	pop	{r7, pc}
 8013fe2:	bf00      	nop
 8013fe4:	40020400 	.word	0x40020400

08013fe8 <_ZL22LCD_2IN_WriteData_Byteh>:

static void LCD_2IN_WriteData_Byte(UBYTE data) 
{	
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b082      	sub	sp, #8
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	4603      	mov	r3, r0
 8013ff0:	71fb      	strb	r3, [r7, #7]
	LCD_2IN_CS_0;
 8013ff2:	2200      	movs	r2, #0
 8013ff4:	2180      	movs	r1, #128	; 0x80
 8013ff6:	480a      	ldr	r0, [pc, #40]	; (8014020 <_ZL22LCD_2IN_WriteData_Byteh+0x38>)
 8013ff8:	f7fa fd3e 	bl	800ea78 <HAL_GPIO_WritePin>
	LCD_2IN_DC_1;
 8013ffc:	2201      	movs	r2, #1
 8013ffe:	2120      	movs	r1, #32
 8014000:	4807      	ldr	r0, [pc, #28]	; (8014020 <_ZL22LCD_2IN_WriteData_Byteh+0x38>)
 8014002:	f7fa fd39 	bl	800ea78 <HAL_GPIO_WritePin>
	DEV_SPI_WRITE(data);  
 8014006:	79fb      	ldrb	r3, [r7, #7]
 8014008:	4618      	mov	r0, r3
 801400a:	f7ff fd3b 	bl	8013a84 <_Z13DEV_SPI_WRiteh>
	LCD_2IN_CS_1;
 801400e:	2201      	movs	r2, #1
 8014010:	2180      	movs	r1, #128	; 0x80
 8014012:	4803      	ldr	r0, [pc, #12]	; (8014020 <_ZL22LCD_2IN_WriteData_Byteh+0x38>)
 8014014:	f7fa fd30 	bl	800ea78 <HAL_GPIO_WritePin>
}  
 8014018:	bf00      	nop
 801401a:	3708      	adds	r7, #8
 801401c:	46bd      	mov	sp, r7
 801401e:	bd80      	pop	{r7, pc}
 8014020:	40020400 	.word	0x40020400

08014024 <_Z22LCD_2IN_WriteData_Wordt>:

void LCD_2IN_WriteData_Word(UWORD data)
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b082      	sub	sp, #8
 8014028:	af00      	add	r7, sp, #0
 801402a:	4603      	mov	r3, r0
 801402c:	80fb      	strh	r3, [r7, #6]
	LCD_2IN_CS_0;
 801402e:	2200      	movs	r2, #0
 8014030:	2180      	movs	r1, #128	; 0x80
 8014032:	480e      	ldr	r0, [pc, #56]	; (801406c <_Z22LCD_2IN_WriteData_Wordt+0x48>)
 8014034:	f7fa fd20 	bl	800ea78 <HAL_GPIO_WritePin>
	LCD_2IN_DC_1;
 8014038:	2201      	movs	r2, #1
 801403a:	2120      	movs	r1, #32
 801403c:	480b      	ldr	r0, [pc, #44]	; (801406c <_Z22LCD_2IN_WriteData_Wordt+0x48>)
 801403e:	f7fa fd1b 	bl	800ea78 <HAL_GPIO_WritePin>
	DEV_SPI_WRITE((data>>8) & 0xff);
 8014042:	88fb      	ldrh	r3, [r7, #6]
 8014044:	0a1b      	lsrs	r3, r3, #8
 8014046:	b29b      	uxth	r3, r3
 8014048:	b2db      	uxtb	r3, r3
 801404a:	4618      	mov	r0, r3
 801404c:	f7ff fd1a 	bl	8013a84 <_Z13DEV_SPI_WRiteh>
	DEV_SPI_WRITE(data);
 8014050:	88fb      	ldrh	r3, [r7, #6]
 8014052:	b2db      	uxtb	r3, r3
 8014054:	4618      	mov	r0, r3
 8014056:	f7ff fd15 	bl	8013a84 <_Z13DEV_SPI_WRiteh>
	LCD_2IN_CS_1;
 801405a:	2201      	movs	r2, #1
 801405c:	2180      	movs	r1, #128	; 0x80
 801405e:	4803      	ldr	r0, [pc, #12]	; (801406c <_Z22LCD_2IN_WriteData_Wordt+0x48>)
 8014060:	f7fa fd0a 	bl	800ea78 <HAL_GPIO_WritePin>
}	  
 8014064:	bf00      	nop
 8014066:	3708      	adds	r7, #8
 8014068:	46bd      	mov	sp, r7
 801406a:	bd80      	pop	{r7, pc}
 801406c:	40020400 	.word	0x40020400

08014070 <_Z12LCD_2IN_Initv>:
/******************************************************************************
function:	
		Common register initialization
******************************************************************************/
void LCD_2IN_Init(void)
{
 8014070:	b580      	push	{r7, lr}
 8014072:	af00      	add	r7, sp, #0
	LCD_2IN_Reset();
 8014074:	f7ff ff80 	bl	8013f78 <_ZL13LCD_2IN_Resetv>

	LCD_2IN_Write_Command(0x36);
 8014078:	2036      	movs	r0, #54	; 0x36
 801407a:	f7ff ff9b 	bl	8013fb4 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0x00); 
 801407e:	2000      	movs	r0, #0
 8014080:	f7ff ffb2 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0x3A); 
 8014084:	203a      	movs	r0, #58	; 0x3a
 8014086:	f7ff ff95 	bl	8013fb4 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0x05);
 801408a:	2005      	movs	r0, #5
 801408c:	f7ff ffac 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0x21); 
 8014090:	2021      	movs	r0, #33	; 0x21
 8014092:	f7ff ff8f 	bl	8013fb4 <_ZL21LCD_2IN_Write_Commandh>

	LCD_2IN_Write_Command(0x2A);
 8014096:	202a      	movs	r0, #42	; 0x2a
 8014098:	f7ff ff8c 	bl	8013fb4 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0x00);
 801409c:	2000      	movs	r0, #0
 801409e:	f7ff ffa3 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x00);
 80140a2:	2000      	movs	r0, #0
 80140a4:	f7ff ffa0 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x01);
 80140a8:	2001      	movs	r0, #1
 80140aa:	f7ff ff9d 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x3F);
 80140ae:	203f      	movs	r0, #63	; 0x3f
 80140b0:	f7ff ff9a 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0x2B);
 80140b4:	202b      	movs	r0, #43	; 0x2b
 80140b6:	f7ff ff7d 	bl	8013fb4 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0x00);
 80140ba:	2000      	movs	r0, #0
 80140bc:	f7ff ff94 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x00);
 80140c0:	2000      	movs	r0, #0
 80140c2:	f7ff ff91 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x00);
 80140c6:	2000      	movs	r0, #0
 80140c8:	f7ff ff8e 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0xEF);
 80140cc:	20ef      	movs	r0, #239	; 0xef
 80140ce:	f7ff ff8b 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0xB2);
 80140d2:	20b2      	movs	r0, #178	; 0xb2
 80140d4:	f7ff ff6e 	bl	8013fb4 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0x0C);
 80140d8:	200c      	movs	r0, #12
 80140da:	f7ff ff85 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x0C);
 80140de:	200c      	movs	r0, #12
 80140e0:	f7ff ff82 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x00);
 80140e4:	2000      	movs	r0, #0
 80140e6:	f7ff ff7f 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x33);
 80140ea:	2033      	movs	r0, #51	; 0x33
 80140ec:	f7ff ff7c 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x33);
 80140f0:	2033      	movs	r0, #51	; 0x33
 80140f2:	f7ff ff79 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0xB7);
 80140f6:	20b7      	movs	r0, #183	; 0xb7
 80140f8:	f7ff ff5c 	bl	8013fb4 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0x35); 
 80140fc:	2035      	movs	r0, #53	; 0x35
 80140fe:	f7ff ff73 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0xBB);
 8014102:	20bb      	movs	r0, #187	; 0xbb
 8014104:	f7ff ff56 	bl	8013fb4 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0x1F);
 8014108:	201f      	movs	r0, #31
 801410a:	f7ff ff6d 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0xC0);
 801410e:	20c0      	movs	r0, #192	; 0xc0
 8014110:	f7ff ff50 	bl	8013fb4 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0x2C);
 8014114:	202c      	movs	r0, #44	; 0x2c
 8014116:	f7ff ff67 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0xC2);
 801411a:	20c2      	movs	r0, #194	; 0xc2
 801411c:	f7ff ff4a 	bl	8013fb4 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0x01);
 8014120:	2001      	movs	r0, #1
 8014122:	f7ff ff61 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0xC3);
 8014126:	20c3      	movs	r0, #195	; 0xc3
 8014128:	f7ff ff44 	bl	8013fb4 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0x12);   
 801412c:	2012      	movs	r0, #18
 801412e:	f7ff ff5b 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0xC4);
 8014132:	20c4      	movs	r0, #196	; 0xc4
 8014134:	f7ff ff3e 	bl	8013fb4 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0x20);
 8014138:	2020      	movs	r0, #32
 801413a:	f7ff ff55 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0xC6);
 801413e:	20c6      	movs	r0, #198	; 0xc6
 8014140:	f7ff ff38 	bl	8013fb4 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0x0F); 
 8014144:	200f      	movs	r0, #15
 8014146:	f7ff ff4f 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0xD0);
 801414a:	20d0      	movs	r0, #208	; 0xd0
 801414c:	f7ff ff32 	bl	8013fb4 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0xA4);
 8014150:	20a4      	movs	r0, #164	; 0xa4
 8014152:	f7ff ff49 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0xA1);
 8014156:	20a1      	movs	r0, #161	; 0xa1
 8014158:	f7ff ff46 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0xE0);
 801415c:	20e0      	movs	r0, #224	; 0xe0
 801415e:	f7ff ff29 	bl	8013fb4 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0xD0);
 8014162:	20d0      	movs	r0, #208	; 0xd0
 8014164:	f7ff ff40 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x08);
 8014168:	2008      	movs	r0, #8
 801416a:	f7ff ff3d 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x11);
 801416e:	2011      	movs	r0, #17
 8014170:	f7ff ff3a 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x08);
 8014174:	2008      	movs	r0, #8
 8014176:	f7ff ff37 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x0C);
 801417a:	200c      	movs	r0, #12
 801417c:	f7ff ff34 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x15);
 8014180:	2015      	movs	r0, #21
 8014182:	f7ff ff31 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x39);
 8014186:	2039      	movs	r0, #57	; 0x39
 8014188:	f7ff ff2e 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x33);
 801418c:	2033      	movs	r0, #51	; 0x33
 801418e:	f7ff ff2b 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x50);
 8014192:	2050      	movs	r0, #80	; 0x50
 8014194:	f7ff ff28 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x36);
 8014198:	2036      	movs	r0, #54	; 0x36
 801419a:	f7ff ff25 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x13);
 801419e:	2013      	movs	r0, #19
 80141a0:	f7ff ff22 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x14);
 80141a4:	2014      	movs	r0, #20
 80141a6:	f7ff ff1f 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x29);
 80141aa:	2029      	movs	r0, #41	; 0x29
 80141ac:	f7ff ff1c 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x2D);
 80141b0:	202d      	movs	r0, #45	; 0x2d
 80141b2:	f7ff ff19 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0xE1);
 80141b6:	20e1      	movs	r0, #225	; 0xe1
 80141b8:	f7ff fefc 	bl	8013fb4 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0xD0);
 80141bc:	20d0      	movs	r0, #208	; 0xd0
 80141be:	f7ff ff13 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x08);
 80141c2:	2008      	movs	r0, #8
 80141c4:	f7ff ff10 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x10);
 80141c8:	2010      	movs	r0, #16
 80141ca:	f7ff ff0d 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x08);
 80141ce:	2008      	movs	r0, #8
 80141d0:	f7ff ff0a 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x06);
 80141d4:	2006      	movs	r0, #6
 80141d6:	f7ff ff07 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x06);
 80141da:	2006      	movs	r0, #6
 80141dc:	f7ff ff04 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x39);
 80141e0:	2039      	movs	r0, #57	; 0x39
 80141e2:	f7ff ff01 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x44);
 80141e6:	2044      	movs	r0, #68	; 0x44
 80141e8:	f7ff fefe 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x51);
 80141ec:	2051      	movs	r0, #81	; 0x51
 80141ee:	f7ff fefb 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x0B);
 80141f2:	200b      	movs	r0, #11
 80141f4:	f7ff fef8 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x16);
 80141f8:	2016      	movs	r0, #22
 80141fa:	f7ff fef5 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x14);
 80141fe:	2014      	movs	r0, #20
 8014200:	f7ff fef2 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x2F);
 8014204:	202f      	movs	r0, #47	; 0x2f
 8014206:	f7ff feef 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x31);
 801420a:	2031      	movs	r0, #49	; 0x31
 801420c:	f7ff feec 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_Write_Command(0x21);
 8014210:	2021      	movs	r0, #33	; 0x21
 8014212:	f7ff fecf 	bl	8013fb4 <_ZL21LCD_2IN_Write_Commandh>

	LCD_2IN_Write_Command(0x11);
 8014216:	2011      	movs	r0, #17
 8014218:	f7ff fecc 	bl	8013fb4 <_ZL21LCD_2IN_Write_Commandh>

	LCD_2IN_Write_Command(0x29);
 801421c:	2029      	movs	r0, #41	; 0x29
 801421e:	f7ff fec9 	bl	8013fb4 <_ZL21LCD_2IN_Write_Commandh>
}
 8014222:	bf00      	nop
 8014224:	bd80      	pop	{r7, pc}

08014226 <_Z17LCD_2IN_SetWindowtttt>:
	  Ystart:	Start UWORD y coordinate
	  Xend  :	End UWORD coordinates
	  Yend  :	End UWORD coordinatesen
******************************************************************************/
void LCD_2IN_SetWindow(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD  Yend)
{ 
 8014226:	b590      	push	{r4, r7, lr}
 8014228:	b083      	sub	sp, #12
 801422a:	af00      	add	r7, sp, #0
 801422c:	4604      	mov	r4, r0
 801422e:	4608      	mov	r0, r1
 8014230:	4611      	mov	r1, r2
 8014232:	461a      	mov	r2, r3
 8014234:	4623      	mov	r3, r4
 8014236:	80fb      	strh	r3, [r7, #6]
 8014238:	4603      	mov	r3, r0
 801423a:	80bb      	strh	r3, [r7, #4]
 801423c:	460b      	mov	r3, r1
 801423e:	807b      	strh	r3, [r7, #2]
 8014240:	4613      	mov	r3, r2
 8014242:	803b      	strh	r3, [r7, #0]
	LCD_2IN_Write_Command(0x2a);
 8014244:	202a      	movs	r0, #42	; 0x2a
 8014246:	f7ff feb5 	bl	8013fb4 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(Xstart >>8);
 801424a:	88fb      	ldrh	r3, [r7, #6]
 801424c:	0a1b      	lsrs	r3, r3, #8
 801424e:	b29b      	uxth	r3, r3
 8014250:	b2db      	uxtb	r3, r3
 8014252:	4618      	mov	r0, r3
 8014254:	f7ff fec8 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(Xstart & 0xff);
 8014258:	88fb      	ldrh	r3, [r7, #6]
 801425a:	b2db      	uxtb	r3, r3
 801425c:	4618      	mov	r0, r3
 801425e:	f7ff fec3 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte((Xend - 1) >> 8);
 8014262:	887b      	ldrh	r3, [r7, #2]
 8014264:	3b01      	subs	r3, #1
 8014266:	121b      	asrs	r3, r3, #8
 8014268:	b2db      	uxtb	r3, r3
 801426a:	4618      	mov	r0, r3
 801426c:	f7ff febc 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte((Xend - 1) & 0xff);
 8014270:	887b      	ldrh	r3, [r7, #2]
 8014272:	b2db      	uxtb	r3, r3
 8014274:	3b01      	subs	r3, #1
 8014276:	b2db      	uxtb	r3, r3
 8014278:	4618      	mov	r0, r3
 801427a:	f7ff feb5 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0x2b);
 801427e:	202b      	movs	r0, #43	; 0x2b
 8014280:	f7ff fe98 	bl	8013fb4 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(Ystart >>8);
 8014284:	88bb      	ldrh	r3, [r7, #4]
 8014286:	0a1b      	lsrs	r3, r3, #8
 8014288:	b29b      	uxth	r3, r3
 801428a:	b2db      	uxtb	r3, r3
 801428c:	4618      	mov	r0, r3
 801428e:	f7ff feab 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(Ystart & 0xff);
 8014292:	88bb      	ldrh	r3, [r7, #4]
 8014294:	b2db      	uxtb	r3, r3
 8014296:	4618      	mov	r0, r3
 8014298:	f7ff fea6 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte((Yend - 1) >> 8);
 801429c:	883b      	ldrh	r3, [r7, #0]
 801429e:	3b01      	subs	r3, #1
 80142a0:	121b      	asrs	r3, r3, #8
 80142a2:	b2db      	uxtb	r3, r3
 80142a4:	4618      	mov	r0, r3
 80142a6:	f7ff fe9f 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte((Yend - 1) & 0xff);
 80142aa:	883b      	ldrh	r3, [r7, #0]
 80142ac:	b2db      	uxtb	r3, r3
 80142ae:	3b01      	subs	r3, #1
 80142b0:	b2db      	uxtb	r3, r3
 80142b2:	4618      	mov	r0, r3
 80142b4:	f7ff fe98 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0x2C);
 80142b8:	202c      	movs	r0, #44	; 0x2c
 80142ba:	f7ff fe7b 	bl	8013fb4 <_ZL21LCD_2IN_Write_Commandh>
}
 80142be:	bf00      	nop
 80142c0:	370c      	adds	r7, #12
 80142c2:	46bd      	mov	sp, r7
 80142c4:	bd90      	pop	{r4, r7, pc}

080142c6 <_Z17LCD_2IN_SetCursortt>:
	  Xstart: 	Start UWORD x coordinate
	  Ystart:	Start UWORD y coordinate

******************************************************************************/
void LCD_2IN_SetCursor(UWORD X, UWORD Y)
{ 
 80142c6:	b580      	push	{r7, lr}
 80142c8:	b082      	sub	sp, #8
 80142ca:	af00      	add	r7, sp, #0
 80142cc:	4603      	mov	r3, r0
 80142ce:	460a      	mov	r2, r1
 80142d0:	80fb      	strh	r3, [r7, #6]
 80142d2:	4613      	mov	r3, r2
 80142d4:	80bb      	strh	r3, [r7, #4]
	LCD_2IN_Write_Command(0x2a);
 80142d6:	202a      	movs	r0, #42	; 0x2a
 80142d8:	f7ff fe6c 	bl	8013fb4 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(X >> 8);
 80142dc:	88fb      	ldrh	r3, [r7, #6]
 80142de:	0a1b      	lsrs	r3, r3, #8
 80142e0:	b29b      	uxth	r3, r3
 80142e2:	b2db      	uxtb	r3, r3
 80142e4:	4618      	mov	r0, r3
 80142e6:	f7ff fe7f 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(X);
 80142ea:	88fb      	ldrh	r3, [r7, #6]
 80142ec:	b2db      	uxtb	r3, r3
 80142ee:	4618      	mov	r0, r3
 80142f0:	f7ff fe7a 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(X >> 8);
 80142f4:	88fb      	ldrh	r3, [r7, #6]
 80142f6:	0a1b      	lsrs	r3, r3, #8
 80142f8:	b29b      	uxth	r3, r3
 80142fa:	b2db      	uxtb	r3, r3
 80142fc:	4618      	mov	r0, r3
 80142fe:	f7ff fe73 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(X);
 8014302:	88fb      	ldrh	r3, [r7, #6]
 8014304:	b2db      	uxtb	r3, r3
 8014306:	4618      	mov	r0, r3
 8014308:	f7ff fe6e 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0x2b);
 801430c:	202b      	movs	r0, #43	; 0x2b
 801430e:	f7ff fe51 	bl	8013fb4 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(Y >> 8);
 8014312:	88bb      	ldrh	r3, [r7, #4]
 8014314:	0a1b      	lsrs	r3, r3, #8
 8014316:	b29b      	uxth	r3, r3
 8014318:	b2db      	uxtb	r3, r3
 801431a:	4618      	mov	r0, r3
 801431c:	f7ff fe64 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(Y);
 8014320:	88bb      	ldrh	r3, [r7, #4]
 8014322:	b2db      	uxtb	r3, r3
 8014324:	4618      	mov	r0, r3
 8014326:	f7ff fe5f 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(Y >> 8);
 801432a:	88bb      	ldrh	r3, [r7, #4]
 801432c:	0a1b      	lsrs	r3, r3, #8
 801432e:	b29b      	uxth	r3, r3
 8014330:	b2db      	uxtb	r3, r3
 8014332:	4618      	mov	r0, r3
 8014334:	f7ff fe58 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(Y);
 8014338:	88bb      	ldrh	r3, [r7, #4]
 801433a:	b2db      	uxtb	r3, r3
 801433c:	4618      	mov	r0, r3
 801433e:	f7ff fe53 	bl	8013fe8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0x2C);
 8014342:	202c      	movs	r0, #44	; 0x2c
 8014344:	f7ff fe36 	bl	8013fb4 <_ZL21LCD_2IN_Write_Commandh>
}
 8014348:	bf00      	nop
 801434a:	3708      	adds	r7, #8
 801434c:	46bd      	mov	sp, r7
 801434e:	bd80      	pop	{r7, pc}

08014350 <_Z13LCD_2IN_Cleart>:
function:	Clear screen function, refresh the screen to a certain color
parameter	:
	  Color :		The color you want to clear all the screen
******************************************************************************/
void LCD_2IN_Clear(UWORD Color)
{
 8014350:	b580      	push	{r7, lr}
 8014352:	b084      	sub	sp, #16
 8014354:	af00      	add	r7, sp, #0
 8014356:	4603      	mov	r3, r0
 8014358:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_2IN_SetWindow(0, 0, LCD_2IN_WIDTH, LCD_2IN_HEIGHT);
 801435a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 801435e:	22f0      	movs	r2, #240	; 0xf0
 8014360:	2100      	movs	r1, #0
 8014362:	2000      	movs	r0, #0
 8014364:	f7ff ff5f 	bl	8014226 <_Z17LCD_2IN_SetWindowtttt>

	DEV_Digital_Write(DEV_DC_PIN, 1);
 8014368:	2201      	movs	r2, #1
 801436a:	2120      	movs	r1, #32
 801436c:	480f      	ldr	r0, [pc, #60]	; (80143ac <_Z13LCD_2IN_Cleart+0x5c>)
 801436e:	f7fa fb83 	bl	800ea78 <HAL_GPIO_WritePin>
	for(i = 0; i < LCD_2IN_WIDTH; i++){
 8014372:	2300      	movs	r3, #0
 8014374:	81fb      	strh	r3, [r7, #14]
 8014376:	e010      	b.n	801439a <_Z13LCD_2IN_Cleart+0x4a>
		for(j = 0; j < LCD_2IN_HEIGHT; j++){
 8014378:	2300      	movs	r3, #0
 801437a:	81bb      	strh	r3, [r7, #12]
 801437c:	e006      	b.n	801438c <_Z13LCD_2IN_Cleart+0x3c>
			LCD_2IN_WriteData_Word(Color);
 801437e:	88fb      	ldrh	r3, [r7, #6]
 8014380:	4618      	mov	r0, r3
 8014382:	f7ff fe4f 	bl	8014024 <_Z22LCD_2IN_WriteData_Wordt>
		for(j = 0; j < LCD_2IN_HEIGHT; j++){
 8014386:	89bb      	ldrh	r3, [r7, #12]
 8014388:	3301      	adds	r3, #1
 801438a:	81bb      	strh	r3, [r7, #12]
 801438c:	89bb      	ldrh	r3, [r7, #12]
 801438e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8014392:	d3f4      	bcc.n	801437e <_Z13LCD_2IN_Cleart+0x2e>
	for(i = 0; i < LCD_2IN_WIDTH; i++){
 8014394:	89fb      	ldrh	r3, [r7, #14]
 8014396:	3301      	adds	r3, #1
 8014398:	81fb      	strh	r3, [r7, #14]
 801439a:	89fb      	ldrh	r3, [r7, #14]
 801439c:	2bef      	cmp	r3, #239	; 0xef
 801439e:	d9eb      	bls.n	8014378 <_Z13LCD_2IN_Cleart+0x28>
		}
	 }
}
 80143a0:	bf00      	nop
 80143a2:	bf00      	nop
 80143a4:	3710      	adds	r7, #16
 80143a6:	46bd      	mov	sp, r7
 80143a8:	bd80      	pop	{r7, pc}
 80143aa:	bf00      	nop
 80143ac:	40020400 	.word	0x40020400

080143b0 <_Z17LCD_2IN_DrawPaintttt>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_2IN_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b082      	sub	sp, #8
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	4603      	mov	r3, r0
 80143b8:	80fb      	strh	r3, [r7, #6]
 80143ba:	460b      	mov	r3, r1
 80143bc:	80bb      	strh	r3, [r7, #4]
 80143be:	4613      	mov	r3, r2
 80143c0:	807b      	strh	r3, [r7, #2]
	LCD_2IN_SetCursor(x, y);
 80143c2:	88ba      	ldrh	r2, [r7, #4]
 80143c4:	88fb      	ldrh	r3, [r7, #6]
 80143c6:	4611      	mov	r1, r2
 80143c8:	4618      	mov	r0, r3
 80143ca:	f7ff ff7c 	bl	80142c6 <_Z17LCD_2IN_SetCursortt>
	LCD_2IN_WriteData_Word(Color); 	    
 80143ce:	887b      	ldrh	r3, [r7, #2]
 80143d0:	4618      	mov	r0, r3
 80143d2:	f7ff fe27 	bl	8014024 <_Z22LCD_2IN_WriteData_Wordt>
}
 80143d6:	bf00      	nop
 80143d8:	3708      	adds	r7, #8
 80143da:	46bd      	mov	sp, r7
 80143dc:	bd80      	pop	{r7, pc}
	...

080143e0 <_Z20LCD_2IN_SetBackLightt>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_2IN_SetBackLight(UWORD Value)
{
 80143e0:	b480      	push	{r7}
 80143e2:	b083      	sub	sp, #12
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	4603      	mov	r3, r0
 80143e8:	80fb      	strh	r3, [r7, #6]
	DEV_Set_PWM(Value);
 80143ea:	4a04      	ldr	r2, [pc, #16]	; (80143fc <_Z20LCD_2IN_SetBackLightt+0x1c>)
 80143ec:	88fb      	ldrh	r3, [r7, #6]
 80143ee:	6393      	str	r3, [r2, #56]	; 0x38
}
 80143f0:	bf00      	nop
 80143f2:	370c      	adds	r7, #12
 80143f4:	46bd      	mov	sp, r7
 80143f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143fa:	4770      	bx	lr
 80143fc:	40000400 	.word	0x40000400

08014400 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8014400:	b580      	push	{r7, lr}
 8014402:	b084      	sub	sp, #16
 8014404:	af00      	add	r7, sp, #0
 8014406:	4603      	mov	r3, r0
 8014408:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801440a:	79fb      	ldrb	r3, [r7, #7]
 801440c:	4a08      	ldr	r2, [pc, #32]	; (8014430 <disk_status+0x30>)
 801440e:	009b      	lsls	r3, r3, #2
 8014410:	4413      	add	r3, r2
 8014412:	685b      	ldr	r3, [r3, #4]
 8014414:	685b      	ldr	r3, [r3, #4]
 8014416:	79fa      	ldrb	r2, [r7, #7]
 8014418:	4905      	ldr	r1, [pc, #20]	; (8014430 <disk_status+0x30>)
 801441a:	440a      	add	r2, r1
 801441c:	7a12      	ldrb	r2, [r2, #8]
 801441e:	4610      	mov	r0, r2
 8014420:	4798      	blx	r3
 8014422:	4603      	mov	r3, r0
 8014424:	73fb      	strb	r3, [r7, #15]
  return stat;
 8014426:	7bfb      	ldrb	r3, [r7, #15]
}
 8014428:	4618      	mov	r0, r3
 801442a:	3710      	adds	r7, #16
 801442c:	46bd      	mov	sp, r7
 801442e:	bd80      	pop	{r7, pc}
 8014430:	200016f4 	.word	0x200016f4

08014434 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b084      	sub	sp, #16
 8014438:	af00      	add	r7, sp, #0
 801443a:	4603      	mov	r3, r0
 801443c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801443e:	2300      	movs	r3, #0
 8014440:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8014442:	79fb      	ldrb	r3, [r7, #7]
 8014444:	4a0e      	ldr	r2, [pc, #56]	; (8014480 <disk_initialize+0x4c>)
 8014446:	5cd3      	ldrb	r3, [r2, r3]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d114      	bne.n	8014476 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801444c:	79fb      	ldrb	r3, [r7, #7]
 801444e:	4a0c      	ldr	r2, [pc, #48]	; (8014480 <disk_initialize+0x4c>)
 8014450:	009b      	lsls	r3, r3, #2
 8014452:	4413      	add	r3, r2
 8014454:	685b      	ldr	r3, [r3, #4]
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	79fa      	ldrb	r2, [r7, #7]
 801445a:	4909      	ldr	r1, [pc, #36]	; (8014480 <disk_initialize+0x4c>)
 801445c:	440a      	add	r2, r1
 801445e:	7a12      	ldrb	r2, [r2, #8]
 8014460:	4610      	mov	r0, r2
 8014462:	4798      	blx	r3
 8014464:	4603      	mov	r3, r0
 8014466:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8014468:	7bfb      	ldrb	r3, [r7, #15]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d103      	bne.n	8014476 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801446e:	79fb      	ldrb	r3, [r7, #7]
 8014470:	4a03      	ldr	r2, [pc, #12]	; (8014480 <disk_initialize+0x4c>)
 8014472:	2101      	movs	r1, #1
 8014474:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8014476:	7bfb      	ldrb	r3, [r7, #15]
}
 8014478:	4618      	mov	r0, r3
 801447a:	3710      	adds	r7, #16
 801447c:	46bd      	mov	sp, r7
 801447e:	bd80      	pop	{r7, pc}
 8014480:	200016f4 	.word	0x200016f4

08014484 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8014484:	b590      	push	{r4, r7, lr}
 8014486:	b087      	sub	sp, #28
 8014488:	af00      	add	r7, sp, #0
 801448a:	60b9      	str	r1, [r7, #8]
 801448c:	607a      	str	r2, [r7, #4]
 801448e:	603b      	str	r3, [r7, #0]
 8014490:	4603      	mov	r3, r0
 8014492:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8014494:	7bfb      	ldrb	r3, [r7, #15]
 8014496:	4a0a      	ldr	r2, [pc, #40]	; (80144c0 <disk_read+0x3c>)
 8014498:	009b      	lsls	r3, r3, #2
 801449a:	4413      	add	r3, r2
 801449c:	685b      	ldr	r3, [r3, #4]
 801449e:	689c      	ldr	r4, [r3, #8]
 80144a0:	7bfb      	ldrb	r3, [r7, #15]
 80144a2:	4a07      	ldr	r2, [pc, #28]	; (80144c0 <disk_read+0x3c>)
 80144a4:	4413      	add	r3, r2
 80144a6:	7a18      	ldrb	r0, [r3, #8]
 80144a8:	683b      	ldr	r3, [r7, #0]
 80144aa:	687a      	ldr	r2, [r7, #4]
 80144ac:	68b9      	ldr	r1, [r7, #8]
 80144ae:	47a0      	blx	r4
 80144b0:	4603      	mov	r3, r0
 80144b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80144b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80144b6:	4618      	mov	r0, r3
 80144b8:	371c      	adds	r7, #28
 80144ba:	46bd      	mov	sp, r7
 80144bc:	bd90      	pop	{r4, r7, pc}
 80144be:	bf00      	nop
 80144c0:	200016f4 	.word	0x200016f4

080144c4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80144c4:	b590      	push	{r4, r7, lr}
 80144c6:	b087      	sub	sp, #28
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	60b9      	str	r1, [r7, #8]
 80144cc:	607a      	str	r2, [r7, #4]
 80144ce:	603b      	str	r3, [r7, #0]
 80144d0:	4603      	mov	r3, r0
 80144d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80144d4:	7bfb      	ldrb	r3, [r7, #15]
 80144d6:	4a0a      	ldr	r2, [pc, #40]	; (8014500 <disk_write+0x3c>)
 80144d8:	009b      	lsls	r3, r3, #2
 80144da:	4413      	add	r3, r2
 80144dc:	685b      	ldr	r3, [r3, #4]
 80144de:	68dc      	ldr	r4, [r3, #12]
 80144e0:	7bfb      	ldrb	r3, [r7, #15]
 80144e2:	4a07      	ldr	r2, [pc, #28]	; (8014500 <disk_write+0x3c>)
 80144e4:	4413      	add	r3, r2
 80144e6:	7a18      	ldrb	r0, [r3, #8]
 80144e8:	683b      	ldr	r3, [r7, #0]
 80144ea:	687a      	ldr	r2, [r7, #4]
 80144ec:	68b9      	ldr	r1, [r7, #8]
 80144ee:	47a0      	blx	r4
 80144f0:	4603      	mov	r3, r0
 80144f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80144f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80144f6:	4618      	mov	r0, r3
 80144f8:	371c      	adds	r7, #28
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bd90      	pop	{r4, r7, pc}
 80144fe:	bf00      	nop
 8014500:	200016f4 	.word	0x200016f4

08014504 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b084      	sub	sp, #16
 8014508:	af00      	add	r7, sp, #0
 801450a:	4603      	mov	r3, r0
 801450c:	603a      	str	r2, [r7, #0]
 801450e:	71fb      	strb	r3, [r7, #7]
 8014510:	460b      	mov	r3, r1
 8014512:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8014514:	79fb      	ldrb	r3, [r7, #7]
 8014516:	4a09      	ldr	r2, [pc, #36]	; (801453c <disk_ioctl+0x38>)
 8014518:	009b      	lsls	r3, r3, #2
 801451a:	4413      	add	r3, r2
 801451c:	685b      	ldr	r3, [r3, #4]
 801451e:	691b      	ldr	r3, [r3, #16]
 8014520:	79fa      	ldrb	r2, [r7, #7]
 8014522:	4906      	ldr	r1, [pc, #24]	; (801453c <disk_ioctl+0x38>)
 8014524:	440a      	add	r2, r1
 8014526:	7a10      	ldrb	r0, [r2, #8]
 8014528:	79b9      	ldrb	r1, [r7, #6]
 801452a:	683a      	ldr	r2, [r7, #0]
 801452c:	4798      	blx	r3
 801452e:	4603      	mov	r3, r0
 8014530:	73fb      	strb	r3, [r7, #15]
  return res;
 8014532:	7bfb      	ldrb	r3, [r7, #15]
}
 8014534:	4618      	mov	r0, r3
 8014536:	3710      	adds	r7, #16
 8014538:	46bd      	mov	sp, r7
 801453a:	bd80      	pop	{r7, pc}
 801453c:	200016f4 	.word	0x200016f4

08014540 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8014540:	b480      	push	{r7}
 8014542:	b085      	sub	sp, #20
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	3301      	adds	r3, #1
 801454c:	781b      	ldrb	r3, [r3, #0]
 801454e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8014550:	89fb      	ldrh	r3, [r7, #14]
 8014552:	021b      	lsls	r3, r3, #8
 8014554:	b21a      	sxth	r2, r3
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	781b      	ldrb	r3, [r3, #0]
 801455a:	b21b      	sxth	r3, r3
 801455c:	4313      	orrs	r3, r2
 801455e:	b21b      	sxth	r3, r3
 8014560:	81fb      	strh	r3, [r7, #14]
	return rv;
 8014562:	89fb      	ldrh	r3, [r7, #14]
}
 8014564:	4618      	mov	r0, r3
 8014566:	3714      	adds	r7, #20
 8014568:	46bd      	mov	sp, r7
 801456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456e:	4770      	bx	lr

08014570 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8014570:	b480      	push	{r7}
 8014572:	b085      	sub	sp, #20
 8014574:	af00      	add	r7, sp, #0
 8014576:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	3303      	adds	r3, #3
 801457c:	781b      	ldrb	r3, [r3, #0]
 801457e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	021b      	lsls	r3, r3, #8
 8014584:	687a      	ldr	r2, [r7, #4]
 8014586:	3202      	adds	r2, #2
 8014588:	7812      	ldrb	r2, [r2, #0]
 801458a:	4313      	orrs	r3, r2
 801458c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	021b      	lsls	r3, r3, #8
 8014592:	687a      	ldr	r2, [r7, #4]
 8014594:	3201      	adds	r2, #1
 8014596:	7812      	ldrb	r2, [r2, #0]
 8014598:	4313      	orrs	r3, r2
 801459a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	021b      	lsls	r3, r3, #8
 80145a0:	687a      	ldr	r2, [r7, #4]
 80145a2:	7812      	ldrb	r2, [r2, #0]
 80145a4:	4313      	orrs	r3, r2
 80145a6:	60fb      	str	r3, [r7, #12]
	return rv;
 80145a8:	68fb      	ldr	r3, [r7, #12]
}
 80145aa:	4618      	mov	r0, r3
 80145ac:	3714      	adds	r7, #20
 80145ae:	46bd      	mov	sp, r7
 80145b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b4:	4770      	bx	lr

080145b6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80145b6:	b480      	push	{r7}
 80145b8:	b083      	sub	sp, #12
 80145ba:	af00      	add	r7, sp, #0
 80145bc:	6078      	str	r0, [r7, #4]
 80145be:	460b      	mov	r3, r1
 80145c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	1c5a      	adds	r2, r3, #1
 80145c6:	607a      	str	r2, [r7, #4]
 80145c8:	887a      	ldrh	r2, [r7, #2]
 80145ca:	b2d2      	uxtb	r2, r2
 80145cc:	701a      	strb	r2, [r3, #0]
 80145ce:	887b      	ldrh	r3, [r7, #2]
 80145d0:	0a1b      	lsrs	r3, r3, #8
 80145d2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	1c5a      	adds	r2, r3, #1
 80145d8:	607a      	str	r2, [r7, #4]
 80145da:	887a      	ldrh	r2, [r7, #2]
 80145dc:	b2d2      	uxtb	r2, r2
 80145de:	701a      	strb	r2, [r3, #0]
}
 80145e0:	bf00      	nop
 80145e2:	370c      	adds	r7, #12
 80145e4:	46bd      	mov	sp, r7
 80145e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ea:	4770      	bx	lr

080145ec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80145ec:	b480      	push	{r7}
 80145ee:	b083      	sub	sp, #12
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
 80145f4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	1c5a      	adds	r2, r3, #1
 80145fa:	607a      	str	r2, [r7, #4]
 80145fc:	683a      	ldr	r2, [r7, #0]
 80145fe:	b2d2      	uxtb	r2, r2
 8014600:	701a      	strb	r2, [r3, #0]
 8014602:	683b      	ldr	r3, [r7, #0]
 8014604:	0a1b      	lsrs	r3, r3, #8
 8014606:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	1c5a      	adds	r2, r3, #1
 801460c:	607a      	str	r2, [r7, #4]
 801460e:	683a      	ldr	r2, [r7, #0]
 8014610:	b2d2      	uxtb	r2, r2
 8014612:	701a      	strb	r2, [r3, #0]
 8014614:	683b      	ldr	r3, [r7, #0]
 8014616:	0a1b      	lsrs	r3, r3, #8
 8014618:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	1c5a      	adds	r2, r3, #1
 801461e:	607a      	str	r2, [r7, #4]
 8014620:	683a      	ldr	r2, [r7, #0]
 8014622:	b2d2      	uxtb	r2, r2
 8014624:	701a      	strb	r2, [r3, #0]
 8014626:	683b      	ldr	r3, [r7, #0]
 8014628:	0a1b      	lsrs	r3, r3, #8
 801462a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	1c5a      	adds	r2, r3, #1
 8014630:	607a      	str	r2, [r7, #4]
 8014632:	683a      	ldr	r2, [r7, #0]
 8014634:	b2d2      	uxtb	r2, r2
 8014636:	701a      	strb	r2, [r3, #0]
}
 8014638:	bf00      	nop
 801463a:	370c      	adds	r7, #12
 801463c:	46bd      	mov	sp, r7
 801463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014642:	4770      	bx	lr

08014644 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8014644:	b480      	push	{r7}
 8014646:	b087      	sub	sp, #28
 8014648:	af00      	add	r7, sp, #0
 801464a:	60f8      	str	r0, [r7, #12]
 801464c:	60b9      	str	r1, [r7, #8]
 801464e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8014654:	68bb      	ldr	r3, [r7, #8]
 8014656:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d00d      	beq.n	801467a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801465e:	693a      	ldr	r2, [r7, #16]
 8014660:	1c53      	adds	r3, r2, #1
 8014662:	613b      	str	r3, [r7, #16]
 8014664:	697b      	ldr	r3, [r7, #20]
 8014666:	1c59      	adds	r1, r3, #1
 8014668:	6179      	str	r1, [r7, #20]
 801466a:	7812      	ldrb	r2, [r2, #0]
 801466c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	3b01      	subs	r3, #1
 8014672:	607b      	str	r3, [r7, #4]
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d1f1      	bne.n	801465e <mem_cpy+0x1a>
	}
}
 801467a:	bf00      	nop
 801467c:	371c      	adds	r7, #28
 801467e:	46bd      	mov	sp, r7
 8014680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014684:	4770      	bx	lr

08014686 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8014686:	b480      	push	{r7}
 8014688:	b087      	sub	sp, #28
 801468a:	af00      	add	r7, sp, #0
 801468c:	60f8      	str	r0, [r7, #12]
 801468e:	60b9      	str	r1, [r7, #8]
 8014690:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8014696:	697b      	ldr	r3, [r7, #20]
 8014698:	1c5a      	adds	r2, r3, #1
 801469a:	617a      	str	r2, [r7, #20]
 801469c:	68ba      	ldr	r2, [r7, #8]
 801469e:	b2d2      	uxtb	r2, r2
 80146a0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	3b01      	subs	r3, #1
 80146a6:	607b      	str	r3, [r7, #4]
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d1f3      	bne.n	8014696 <mem_set+0x10>
}
 80146ae:	bf00      	nop
 80146b0:	bf00      	nop
 80146b2:	371c      	adds	r7, #28
 80146b4:	46bd      	mov	sp, r7
 80146b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ba:	4770      	bx	lr

080146bc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80146bc:	b480      	push	{r7}
 80146be:	b089      	sub	sp, #36	; 0x24
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	60f8      	str	r0, [r7, #12]
 80146c4:	60b9      	str	r1, [r7, #8]
 80146c6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	61fb      	str	r3, [r7, #28]
 80146cc:	68bb      	ldr	r3, [r7, #8]
 80146ce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80146d0:	2300      	movs	r3, #0
 80146d2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80146d4:	69fb      	ldr	r3, [r7, #28]
 80146d6:	1c5a      	adds	r2, r3, #1
 80146d8:	61fa      	str	r2, [r7, #28]
 80146da:	781b      	ldrb	r3, [r3, #0]
 80146dc:	4619      	mov	r1, r3
 80146de:	69bb      	ldr	r3, [r7, #24]
 80146e0:	1c5a      	adds	r2, r3, #1
 80146e2:	61ba      	str	r2, [r7, #24]
 80146e4:	781b      	ldrb	r3, [r3, #0]
 80146e6:	1acb      	subs	r3, r1, r3
 80146e8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	3b01      	subs	r3, #1
 80146ee:	607b      	str	r3, [r7, #4]
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d002      	beq.n	80146fc <mem_cmp+0x40>
 80146f6:	697b      	ldr	r3, [r7, #20]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d0eb      	beq.n	80146d4 <mem_cmp+0x18>

	return r;
 80146fc:	697b      	ldr	r3, [r7, #20]
}
 80146fe:	4618      	mov	r0, r3
 8014700:	3724      	adds	r7, #36	; 0x24
 8014702:	46bd      	mov	sp, r7
 8014704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014708:	4770      	bx	lr

0801470a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801470a:	b480      	push	{r7}
 801470c:	b083      	sub	sp, #12
 801470e:	af00      	add	r7, sp, #0
 8014710:	6078      	str	r0, [r7, #4]
 8014712:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8014714:	e002      	b.n	801471c <chk_chr+0x12>
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	3301      	adds	r3, #1
 801471a:	607b      	str	r3, [r7, #4]
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	781b      	ldrb	r3, [r3, #0]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d005      	beq.n	8014730 <chk_chr+0x26>
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	781b      	ldrb	r3, [r3, #0]
 8014728:	461a      	mov	r2, r3
 801472a:	683b      	ldr	r3, [r7, #0]
 801472c:	4293      	cmp	r3, r2
 801472e:	d1f2      	bne.n	8014716 <chk_chr+0xc>
	return *str;
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	781b      	ldrb	r3, [r3, #0]
}
 8014734:	4618      	mov	r0, r3
 8014736:	370c      	adds	r7, #12
 8014738:	46bd      	mov	sp, r7
 801473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801473e:	4770      	bx	lr

08014740 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8014740:	b480      	push	{r7}
 8014742:	b085      	sub	sp, #20
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]
 8014748:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801474a:	2300      	movs	r3, #0
 801474c:	60bb      	str	r3, [r7, #8]
 801474e:	68bb      	ldr	r3, [r7, #8]
 8014750:	60fb      	str	r3, [r7, #12]
 8014752:	e029      	b.n	80147a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8014754:	4a27      	ldr	r2, [pc, #156]	; (80147f4 <chk_lock+0xb4>)
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	011b      	lsls	r3, r3, #4
 801475a:	4413      	add	r3, r2
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d01d      	beq.n	801479e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8014762:	4a24      	ldr	r2, [pc, #144]	; (80147f4 <chk_lock+0xb4>)
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	011b      	lsls	r3, r3, #4
 8014768:	4413      	add	r3, r2
 801476a:	681a      	ldr	r2, [r3, #0]
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	429a      	cmp	r2, r3
 8014772:	d116      	bne.n	80147a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8014774:	4a1f      	ldr	r2, [pc, #124]	; (80147f4 <chk_lock+0xb4>)
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	011b      	lsls	r3, r3, #4
 801477a:	4413      	add	r3, r2
 801477c:	3304      	adds	r3, #4
 801477e:	681a      	ldr	r2, [r3, #0]
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8014784:	429a      	cmp	r2, r3
 8014786:	d10c      	bne.n	80147a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8014788:	4a1a      	ldr	r2, [pc, #104]	; (80147f4 <chk_lock+0xb4>)
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	011b      	lsls	r3, r3, #4
 801478e:	4413      	add	r3, r2
 8014790:	3308      	adds	r3, #8
 8014792:	681a      	ldr	r2, [r3, #0]
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8014798:	429a      	cmp	r2, r3
 801479a:	d102      	bne.n	80147a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801479c:	e007      	b.n	80147ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801479e:	2301      	movs	r3, #1
 80147a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	3301      	adds	r3, #1
 80147a6:	60fb      	str	r3, [r7, #12]
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	2b02      	cmp	r3, #2
 80147ac:	d9d2      	bls.n	8014754 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	2b03      	cmp	r3, #3
 80147b2:	d109      	bne.n	80147c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80147b4:	68bb      	ldr	r3, [r7, #8]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d102      	bne.n	80147c0 <chk_lock+0x80>
 80147ba:	683b      	ldr	r3, [r7, #0]
 80147bc:	2b02      	cmp	r3, #2
 80147be:	d101      	bne.n	80147c4 <chk_lock+0x84>
 80147c0:	2300      	movs	r3, #0
 80147c2:	e010      	b.n	80147e6 <chk_lock+0xa6>
 80147c4:	2312      	movs	r3, #18
 80147c6:	e00e      	b.n	80147e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80147c8:	683b      	ldr	r3, [r7, #0]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d108      	bne.n	80147e0 <chk_lock+0xa0>
 80147ce:	4a09      	ldr	r2, [pc, #36]	; (80147f4 <chk_lock+0xb4>)
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	011b      	lsls	r3, r3, #4
 80147d4:	4413      	add	r3, r2
 80147d6:	330c      	adds	r3, #12
 80147d8:	881b      	ldrh	r3, [r3, #0]
 80147da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80147de:	d101      	bne.n	80147e4 <chk_lock+0xa4>
 80147e0:	2310      	movs	r3, #16
 80147e2:	e000      	b.n	80147e6 <chk_lock+0xa6>
 80147e4:	2300      	movs	r3, #0
}
 80147e6:	4618      	mov	r0, r3
 80147e8:	3714      	adds	r7, #20
 80147ea:	46bd      	mov	sp, r7
 80147ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f0:	4770      	bx	lr
 80147f2:	bf00      	nop
 80147f4:	2000165c 	.word	0x2000165c

080147f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80147f8:	b480      	push	{r7}
 80147fa:	b083      	sub	sp, #12
 80147fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80147fe:	2300      	movs	r3, #0
 8014800:	607b      	str	r3, [r7, #4]
 8014802:	e002      	b.n	801480a <enq_lock+0x12>
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	3301      	adds	r3, #1
 8014808:	607b      	str	r3, [r7, #4]
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	2b02      	cmp	r3, #2
 801480e:	d806      	bhi.n	801481e <enq_lock+0x26>
 8014810:	4a09      	ldr	r2, [pc, #36]	; (8014838 <enq_lock+0x40>)
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	011b      	lsls	r3, r3, #4
 8014816:	4413      	add	r3, r2
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d1f2      	bne.n	8014804 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	2b03      	cmp	r3, #3
 8014822:	bf14      	ite	ne
 8014824:	2301      	movne	r3, #1
 8014826:	2300      	moveq	r3, #0
 8014828:	b2db      	uxtb	r3, r3
}
 801482a:	4618      	mov	r0, r3
 801482c:	370c      	adds	r7, #12
 801482e:	46bd      	mov	sp, r7
 8014830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014834:	4770      	bx	lr
 8014836:	bf00      	nop
 8014838:	2000165c 	.word	0x2000165c

0801483c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801483c:	b480      	push	{r7}
 801483e:	b085      	sub	sp, #20
 8014840:	af00      	add	r7, sp, #0
 8014842:	6078      	str	r0, [r7, #4]
 8014844:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8014846:	2300      	movs	r3, #0
 8014848:	60fb      	str	r3, [r7, #12]
 801484a:	e01f      	b.n	801488c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801484c:	4a41      	ldr	r2, [pc, #260]	; (8014954 <inc_lock+0x118>)
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	011b      	lsls	r3, r3, #4
 8014852:	4413      	add	r3, r2
 8014854:	681a      	ldr	r2, [r3, #0]
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	429a      	cmp	r2, r3
 801485c:	d113      	bne.n	8014886 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801485e:	4a3d      	ldr	r2, [pc, #244]	; (8014954 <inc_lock+0x118>)
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	011b      	lsls	r3, r3, #4
 8014864:	4413      	add	r3, r2
 8014866:	3304      	adds	r3, #4
 8014868:	681a      	ldr	r2, [r3, #0]
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801486e:	429a      	cmp	r2, r3
 8014870:	d109      	bne.n	8014886 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8014872:	4a38      	ldr	r2, [pc, #224]	; (8014954 <inc_lock+0x118>)
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	011b      	lsls	r3, r3, #4
 8014878:	4413      	add	r3, r2
 801487a:	3308      	adds	r3, #8
 801487c:	681a      	ldr	r2, [r3, #0]
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8014882:	429a      	cmp	r2, r3
 8014884:	d006      	beq.n	8014894 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	3301      	adds	r3, #1
 801488a:	60fb      	str	r3, [r7, #12]
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	2b02      	cmp	r3, #2
 8014890:	d9dc      	bls.n	801484c <inc_lock+0x10>
 8014892:	e000      	b.n	8014896 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8014894:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	2b03      	cmp	r3, #3
 801489a:	d132      	bne.n	8014902 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801489c:	2300      	movs	r3, #0
 801489e:	60fb      	str	r3, [r7, #12]
 80148a0:	e002      	b.n	80148a8 <inc_lock+0x6c>
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	3301      	adds	r3, #1
 80148a6:	60fb      	str	r3, [r7, #12]
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	2b02      	cmp	r3, #2
 80148ac:	d806      	bhi.n	80148bc <inc_lock+0x80>
 80148ae:	4a29      	ldr	r2, [pc, #164]	; (8014954 <inc_lock+0x118>)
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	011b      	lsls	r3, r3, #4
 80148b4:	4413      	add	r3, r2
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d1f2      	bne.n	80148a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	2b03      	cmp	r3, #3
 80148c0:	d101      	bne.n	80148c6 <inc_lock+0x8a>
 80148c2:	2300      	movs	r3, #0
 80148c4:	e040      	b.n	8014948 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	681a      	ldr	r2, [r3, #0]
 80148ca:	4922      	ldr	r1, [pc, #136]	; (8014954 <inc_lock+0x118>)
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	011b      	lsls	r3, r3, #4
 80148d0:	440b      	add	r3, r1
 80148d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	689a      	ldr	r2, [r3, #8]
 80148d8:	491e      	ldr	r1, [pc, #120]	; (8014954 <inc_lock+0x118>)
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	011b      	lsls	r3, r3, #4
 80148de:	440b      	add	r3, r1
 80148e0:	3304      	adds	r3, #4
 80148e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	695a      	ldr	r2, [r3, #20]
 80148e8:	491a      	ldr	r1, [pc, #104]	; (8014954 <inc_lock+0x118>)
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	011b      	lsls	r3, r3, #4
 80148ee:	440b      	add	r3, r1
 80148f0:	3308      	adds	r3, #8
 80148f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80148f4:	4a17      	ldr	r2, [pc, #92]	; (8014954 <inc_lock+0x118>)
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	011b      	lsls	r3, r3, #4
 80148fa:	4413      	add	r3, r2
 80148fc:	330c      	adds	r3, #12
 80148fe:	2200      	movs	r2, #0
 8014900:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8014902:	683b      	ldr	r3, [r7, #0]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d009      	beq.n	801491c <inc_lock+0xe0>
 8014908:	4a12      	ldr	r2, [pc, #72]	; (8014954 <inc_lock+0x118>)
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	011b      	lsls	r3, r3, #4
 801490e:	4413      	add	r3, r2
 8014910:	330c      	adds	r3, #12
 8014912:	881b      	ldrh	r3, [r3, #0]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d001      	beq.n	801491c <inc_lock+0xe0>
 8014918:	2300      	movs	r3, #0
 801491a:	e015      	b.n	8014948 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801491c:	683b      	ldr	r3, [r7, #0]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d108      	bne.n	8014934 <inc_lock+0xf8>
 8014922:	4a0c      	ldr	r2, [pc, #48]	; (8014954 <inc_lock+0x118>)
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	011b      	lsls	r3, r3, #4
 8014928:	4413      	add	r3, r2
 801492a:	330c      	adds	r3, #12
 801492c:	881b      	ldrh	r3, [r3, #0]
 801492e:	3301      	adds	r3, #1
 8014930:	b29a      	uxth	r2, r3
 8014932:	e001      	b.n	8014938 <inc_lock+0xfc>
 8014934:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014938:	4906      	ldr	r1, [pc, #24]	; (8014954 <inc_lock+0x118>)
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	011b      	lsls	r3, r3, #4
 801493e:	440b      	add	r3, r1
 8014940:	330c      	adds	r3, #12
 8014942:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	3301      	adds	r3, #1
}
 8014948:	4618      	mov	r0, r3
 801494a:	3714      	adds	r7, #20
 801494c:	46bd      	mov	sp, r7
 801494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014952:	4770      	bx	lr
 8014954:	2000165c 	.word	0x2000165c

08014958 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8014958:	b480      	push	{r7}
 801495a:	b085      	sub	sp, #20
 801495c:	af00      	add	r7, sp, #0
 801495e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	3b01      	subs	r3, #1
 8014964:	607b      	str	r3, [r7, #4]
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	2b02      	cmp	r3, #2
 801496a:	d825      	bhi.n	80149b8 <dec_lock+0x60>
		n = Files[i].ctr;
 801496c:	4a17      	ldr	r2, [pc, #92]	; (80149cc <dec_lock+0x74>)
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	011b      	lsls	r3, r3, #4
 8014972:	4413      	add	r3, r2
 8014974:	330c      	adds	r3, #12
 8014976:	881b      	ldrh	r3, [r3, #0]
 8014978:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801497a:	89fb      	ldrh	r3, [r7, #14]
 801497c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014980:	d101      	bne.n	8014986 <dec_lock+0x2e>
 8014982:	2300      	movs	r3, #0
 8014984:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8014986:	89fb      	ldrh	r3, [r7, #14]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d002      	beq.n	8014992 <dec_lock+0x3a>
 801498c:	89fb      	ldrh	r3, [r7, #14]
 801498e:	3b01      	subs	r3, #1
 8014990:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8014992:	4a0e      	ldr	r2, [pc, #56]	; (80149cc <dec_lock+0x74>)
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	011b      	lsls	r3, r3, #4
 8014998:	4413      	add	r3, r2
 801499a:	330c      	adds	r3, #12
 801499c:	89fa      	ldrh	r2, [r7, #14]
 801499e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80149a0:	89fb      	ldrh	r3, [r7, #14]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d105      	bne.n	80149b2 <dec_lock+0x5a>
 80149a6:	4a09      	ldr	r2, [pc, #36]	; (80149cc <dec_lock+0x74>)
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	011b      	lsls	r3, r3, #4
 80149ac:	4413      	add	r3, r2
 80149ae:	2200      	movs	r2, #0
 80149b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80149b2:	2300      	movs	r3, #0
 80149b4:	737b      	strb	r3, [r7, #13]
 80149b6:	e001      	b.n	80149bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80149b8:	2302      	movs	r3, #2
 80149ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80149bc:	7b7b      	ldrb	r3, [r7, #13]
}
 80149be:	4618      	mov	r0, r3
 80149c0:	3714      	adds	r7, #20
 80149c2:	46bd      	mov	sp, r7
 80149c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c8:	4770      	bx	lr
 80149ca:	bf00      	nop
 80149cc:	2000165c 	.word	0x2000165c

080149d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80149d0:	b480      	push	{r7}
 80149d2:	b085      	sub	sp, #20
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80149d8:	2300      	movs	r3, #0
 80149da:	60fb      	str	r3, [r7, #12]
 80149dc:	e010      	b.n	8014a00 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80149de:	4a0d      	ldr	r2, [pc, #52]	; (8014a14 <clear_lock+0x44>)
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	011b      	lsls	r3, r3, #4
 80149e4:	4413      	add	r3, r2
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	687a      	ldr	r2, [r7, #4]
 80149ea:	429a      	cmp	r2, r3
 80149ec:	d105      	bne.n	80149fa <clear_lock+0x2a>
 80149ee:	4a09      	ldr	r2, [pc, #36]	; (8014a14 <clear_lock+0x44>)
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	011b      	lsls	r3, r3, #4
 80149f4:	4413      	add	r3, r2
 80149f6:	2200      	movs	r2, #0
 80149f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	3301      	adds	r3, #1
 80149fe:	60fb      	str	r3, [r7, #12]
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	2b02      	cmp	r3, #2
 8014a04:	d9eb      	bls.n	80149de <clear_lock+0xe>
	}
}
 8014a06:	bf00      	nop
 8014a08:	bf00      	nop
 8014a0a:	3714      	adds	r7, #20
 8014a0c:	46bd      	mov	sp, r7
 8014a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a12:	4770      	bx	lr
 8014a14:	2000165c 	.word	0x2000165c

08014a18 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b086      	sub	sp, #24
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8014a20:	2300      	movs	r3, #0
 8014a22:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	78db      	ldrb	r3, [r3, #3]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d034      	beq.n	8014a96 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a30:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	7858      	ldrb	r0, [r3, #1]
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014a3c:	2301      	movs	r3, #1
 8014a3e:	697a      	ldr	r2, [r7, #20]
 8014a40:	f7ff fd40 	bl	80144c4 <disk_write>
 8014a44:	4603      	mov	r3, r0
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d002      	beq.n	8014a50 <sync_window+0x38>
			res = FR_DISK_ERR;
 8014a4a:	2301      	movs	r3, #1
 8014a4c:	73fb      	strb	r3, [r7, #15]
 8014a4e:	e022      	b.n	8014a96 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	2200      	movs	r2, #0
 8014a54:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a5a:	697a      	ldr	r2, [r7, #20]
 8014a5c:	1ad2      	subs	r2, r2, r3
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	6a1b      	ldr	r3, [r3, #32]
 8014a62:	429a      	cmp	r2, r3
 8014a64:	d217      	bcs.n	8014a96 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	789b      	ldrb	r3, [r3, #2]
 8014a6a:	613b      	str	r3, [r7, #16]
 8014a6c:	e010      	b.n	8014a90 <sync_window+0x78>
					wsect += fs->fsize;
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	6a1b      	ldr	r3, [r3, #32]
 8014a72:	697a      	ldr	r2, [r7, #20]
 8014a74:	4413      	add	r3, r2
 8014a76:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	7858      	ldrb	r0, [r3, #1]
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014a82:	2301      	movs	r3, #1
 8014a84:	697a      	ldr	r2, [r7, #20]
 8014a86:	f7ff fd1d 	bl	80144c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014a8a:	693b      	ldr	r3, [r7, #16]
 8014a8c:	3b01      	subs	r3, #1
 8014a8e:	613b      	str	r3, [r7, #16]
 8014a90:	693b      	ldr	r3, [r7, #16]
 8014a92:	2b01      	cmp	r3, #1
 8014a94:	d8eb      	bhi.n	8014a6e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8014a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a98:	4618      	mov	r0, r3
 8014a9a:	3718      	adds	r7, #24
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	bd80      	pop	{r7, pc}

08014aa0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b084      	sub	sp, #16
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	6078      	str	r0, [r7, #4]
 8014aa8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8014aaa:	2300      	movs	r3, #0
 8014aac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ab2:	683a      	ldr	r2, [r7, #0]
 8014ab4:	429a      	cmp	r2, r3
 8014ab6:	d01b      	beq.n	8014af0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8014ab8:	6878      	ldr	r0, [r7, #4]
 8014aba:	f7ff ffad 	bl	8014a18 <sync_window>
 8014abe:	4603      	mov	r3, r0
 8014ac0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8014ac2:	7bfb      	ldrb	r3, [r7, #15]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d113      	bne.n	8014af0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	7858      	ldrb	r0, [r3, #1]
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014ad2:	2301      	movs	r3, #1
 8014ad4:	683a      	ldr	r2, [r7, #0]
 8014ad6:	f7ff fcd5 	bl	8014484 <disk_read>
 8014ada:	4603      	mov	r3, r0
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d004      	beq.n	8014aea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8014ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014ae4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8014ae6:	2301      	movs	r3, #1
 8014ae8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	683a      	ldr	r2, [r7, #0]
 8014aee:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8014af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014af2:	4618      	mov	r0, r3
 8014af4:	3710      	adds	r7, #16
 8014af6:	46bd      	mov	sp, r7
 8014af8:	bd80      	pop	{r7, pc}
	...

08014afc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b084      	sub	sp, #16
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8014b04:	6878      	ldr	r0, [r7, #4]
 8014b06:	f7ff ff87 	bl	8014a18 <sync_window>
 8014b0a:	4603      	mov	r3, r0
 8014b0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8014b0e:	7bfb      	ldrb	r3, [r7, #15]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d159      	bne.n	8014bc8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	781b      	ldrb	r3, [r3, #0]
 8014b18:	2b03      	cmp	r3, #3
 8014b1a:	d149      	bne.n	8014bb0 <sync_fs+0xb4>
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	791b      	ldrb	r3, [r3, #4]
 8014b20:	2b01      	cmp	r3, #1
 8014b22:	d145      	bne.n	8014bb0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	899b      	ldrh	r3, [r3, #12]
 8014b2e:	461a      	mov	r2, r3
 8014b30:	2100      	movs	r1, #0
 8014b32:	f7ff fda8 	bl	8014686 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	3338      	adds	r3, #56	; 0x38
 8014b3a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014b3e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8014b42:	4618      	mov	r0, r3
 8014b44:	f7ff fd37 	bl	80145b6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	3338      	adds	r3, #56	; 0x38
 8014b4c:	4921      	ldr	r1, [pc, #132]	; (8014bd4 <sync_fs+0xd8>)
 8014b4e:	4618      	mov	r0, r3
 8014b50:	f7ff fd4c 	bl	80145ec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	3338      	adds	r3, #56	; 0x38
 8014b58:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014b5c:	491e      	ldr	r1, [pc, #120]	; (8014bd8 <sync_fs+0xdc>)
 8014b5e:	4618      	mov	r0, r3
 8014b60:	f7ff fd44 	bl	80145ec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	3338      	adds	r3, #56	; 0x38
 8014b68:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	699b      	ldr	r3, [r3, #24]
 8014b70:	4619      	mov	r1, r3
 8014b72:	4610      	mov	r0, r2
 8014b74:	f7ff fd3a 	bl	80145ec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	3338      	adds	r3, #56	; 0x38
 8014b7c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	695b      	ldr	r3, [r3, #20]
 8014b84:	4619      	mov	r1, r3
 8014b86:	4610      	mov	r0, r2
 8014b88:	f7ff fd30 	bl	80145ec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b90:	1c5a      	adds	r2, r3, #1
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	7858      	ldrb	r0, [r3, #1]
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014ba4:	2301      	movs	r3, #1
 8014ba6:	f7ff fc8d 	bl	80144c4 <disk_write>
			fs->fsi_flag = 0;
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	2200      	movs	r2, #0
 8014bae:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	785b      	ldrb	r3, [r3, #1]
 8014bb4:	2200      	movs	r2, #0
 8014bb6:	2100      	movs	r1, #0
 8014bb8:	4618      	mov	r0, r3
 8014bba:	f7ff fca3 	bl	8014504 <disk_ioctl>
 8014bbe:	4603      	mov	r3, r0
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d001      	beq.n	8014bc8 <sync_fs+0xcc>
 8014bc4:	2301      	movs	r3, #1
 8014bc6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8014bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bca:	4618      	mov	r0, r3
 8014bcc:	3710      	adds	r7, #16
 8014bce:	46bd      	mov	sp, r7
 8014bd0:	bd80      	pop	{r7, pc}
 8014bd2:	bf00      	nop
 8014bd4:	41615252 	.word	0x41615252
 8014bd8:	61417272 	.word	0x61417272

08014bdc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8014bdc:	b480      	push	{r7}
 8014bde:	b083      	sub	sp, #12
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
 8014be4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8014be6:	683b      	ldr	r3, [r7, #0]
 8014be8:	3b02      	subs	r3, #2
 8014bea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	69db      	ldr	r3, [r3, #28]
 8014bf0:	3b02      	subs	r3, #2
 8014bf2:	683a      	ldr	r2, [r7, #0]
 8014bf4:	429a      	cmp	r2, r3
 8014bf6:	d301      	bcc.n	8014bfc <clust2sect+0x20>
 8014bf8:	2300      	movs	r3, #0
 8014bfa:	e008      	b.n	8014c0e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	895b      	ldrh	r3, [r3, #10]
 8014c00:	461a      	mov	r2, r3
 8014c02:	683b      	ldr	r3, [r7, #0]
 8014c04:	fb03 f202 	mul.w	r2, r3, r2
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c0c:	4413      	add	r3, r2
}
 8014c0e:	4618      	mov	r0, r3
 8014c10:	370c      	adds	r7, #12
 8014c12:	46bd      	mov	sp, r7
 8014c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c18:	4770      	bx	lr

08014c1a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8014c1a:	b580      	push	{r7, lr}
 8014c1c:	b086      	sub	sp, #24
 8014c1e:	af00      	add	r7, sp, #0
 8014c20:	6078      	str	r0, [r7, #4]
 8014c22:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014c2a:	683b      	ldr	r3, [r7, #0]
 8014c2c:	2b01      	cmp	r3, #1
 8014c2e:	d904      	bls.n	8014c3a <get_fat+0x20>
 8014c30:	693b      	ldr	r3, [r7, #16]
 8014c32:	69db      	ldr	r3, [r3, #28]
 8014c34:	683a      	ldr	r2, [r7, #0]
 8014c36:	429a      	cmp	r2, r3
 8014c38:	d302      	bcc.n	8014c40 <get_fat+0x26>
		val = 1;	/* Internal error */
 8014c3a:	2301      	movs	r3, #1
 8014c3c:	617b      	str	r3, [r7, #20]
 8014c3e:	e0bb      	b.n	8014db8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8014c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014c44:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8014c46:	693b      	ldr	r3, [r7, #16]
 8014c48:	781b      	ldrb	r3, [r3, #0]
 8014c4a:	2b03      	cmp	r3, #3
 8014c4c:	f000 8083 	beq.w	8014d56 <get_fat+0x13c>
 8014c50:	2b03      	cmp	r3, #3
 8014c52:	f300 80a7 	bgt.w	8014da4 <get_fat+0x18a>
 8014c56:	2b01      	cmp	r3, #1
 8014c58:	d002      	beq.n	8014c60 <get_fat+0x46>
 8014c5a:	2b02      	cmp	r3, #2
 8014c5c:	d056      	beq.n	8014d0c <get_fat+0xf2>
 8014c5e:	e0a1      	b.n	8014da4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8014c60:	683b      	ldr	r3, [r7, #0]
 8014c62:	60fb      	str	r3, [r7, #12]
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	085b      	lsrs	r3, r3, #1
 8014c68:	68fa      	ldr	r2, [r7, #12]
 8014c6a:	4413      	add	r3, r2
 8014c6c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014c6e:	693b      	ldr	r3, [r7, #16]
 8014c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014c72:	693b      	ldr	r3, [r7, #16]
 8014c74:	899b      	ldrh	r3, [r3, #12]
 8014c76:	4619      	mov	r1, r3
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8014c7e:	4413      	add	r3, r2
 8014c80:	4619      	mov	r1, r3
 8014c82:	6938      	ldr	r0, [r7, #16]
 8014c84:	f7ff ff0c 	bl	8014aa0 <move_window>
 8014c88:	4603      	mov	r3, r0
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	f040 808d 	bne.w	8014daa <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	1c5a      	adds	r2, r3, #1
 8014c94:	60fa      	str	r2, [r7, #12]
 8014c96:	693a      	ldr	r2, [r7, #16]
 8014c98:	8992      	ldrh	r2, [r2, #12]
 8014c9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8014c9e:	fb01 f202 	mul.w	r2, r1, r2
 8014ca2:	1a9b      	subs	r3, r3, r2
 8014ca4:	693a      	ldr	r2, [r7, #16]
 8014ca6:	4413      	add	r3, r2
 8014ca8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014cac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014cae:	693b      	ldr	r3, [r7, #16]
 8014cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014cb2:	693b      	ldr	r3, [r7, #16]
 8014cb4:	899b      	ldrh	r3, [r3, #12]
 8014cb6:	4619      	mov	r1, r3
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8014cbe:	4413      	add	r3, r2
 8014cc0:	4619      	mov	r1, r3
 8014cc2:	6938      	ldr	r0, [r7, #16]
 8014cc4:	f7ff feec 	bl	8014aa0 <move_window>
 8014cc8:	4603      	mov	r3, r0
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d16f      	bne.n	8014dae <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8014cce:	693b      	ldr	r3, [r7, #16]
 8014cd0:	899b      	ldrh	r3, [r3, #12]
 8014cd2:	461a      	mov	r2, r3
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	fbb3 f1f2 	udiv	r1, r3, r2
 8014cda:	fb01 f202 	mul.w	r2, r1, r2
 8014cde:	1a9b      	subs	r3, r3, r2
 8014ce0:	693a      	ldr	r2, [r7, #16]
 8014ce2:	4413      	add	r3, r2
 8014ce4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014ce8:	021b      	lsls	r3, r3, #8
 8014cea:	461a      	mov	r2, r3
 8014cec:	68bb      	ldr	r3, [r7, #8]
 8014cee:	4313      	orrs	r3, r2
 8014cf0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014cf2:	683b      	ldr	r3, [r7, #0]
 8014cf4:	f003 0301 	and.w	r3, r3, #1
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d002      	beq.n	8014d02 <get_fat+0xe8>
 8014cfc:	68bb      	ldr	r3, [r7, #8]
 8014cfe:	091b      	lsrs	r3, r3, #4
 8014d00:	e002      	b.n	8014d08 <get_fat+0xee>
 8014d02:	68bb      	ldr	r3, [r7, #8]
 8014d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014d08:	617b      	str	r3, [r7, #20]
			break;
 8014d0a:	e055      	b.n	8014db8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014d0c:	693b      	ldr	r3, [r7, #16]
 8014d0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014d10:	693b      	ldr	r3, [r7, #16]
 8014d12:	899b      	ldrh	r3, [r3, #12]
 8014d14:	085b      	lsrs	r3, r3, #1
 8014d16:	b29b      	uxth	r3, r3
 8014d18:	4619      	mov	r1, r3
 8014d1a:	683b      	ldr	r3, [r7, #0]
 8014d1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8014d20:	4413      	add	r3, r2
 8014d22:	4619      	mov	r1, r3
 8014d24:	6938      	ldr	r0, [r7, #16]
 8014d26:	f7ff febb 	bl	8014aa0 <move_window>
 8014d2a:	4603      	mov	r3, r0
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d140      	bne.n	8014db2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014d30:	693b      	ldr	r3, [r7, #16]
 8014d32:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014d36:	683b      	ldr	r3, [r7, #0]
 8014d38:	005b      	lsls	r3, r3, #1
 8014d3a:	693a      	ldr	r2, [r7, #16]
 8014d3c:	8992      	ldrh	r2, [r2, #12]
 8014d3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8014d42:	fb00 f202 	mul.w	r2, r0, r2
 8014d46:	1a9b      	subs	r3, r3, r2
 8014d48:	440b      	add	r3, r1
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	f7ff fbf8 	bl	8014540 <ld_word>
 8014d50:	4603      	mov	r3, r0
 8014d52:	617b      	str	r3, [r7, #20]
			break;
 8014d54:	e030      	b.n	8014db8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014d56:	693b      	ldr	r3, [r7, #16]
 8014d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014d5a:	693b      	ldr	r3, [r7, #16]
 8014d5c:	899b      	ldrh	r3, [r3, #12]
 8014d5e:	089b      	lsrs	r3, r3, #2
 8014d60:	b29b      	uxth	r3, r3
 8014d62:	4619      	mov	r1, r3
 8014d64:	683b      	ldr	r3, [r7, #0]
 8014d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8014d6a:	4413      	add	r3, r2
 8014d6c:	4619      	mov	r1, r3
 8014d6e:	6938      	ldr	r0, [r7, #16]
 8014d70:	f7ff fe96 	bl	8014aa0 <move_window>
 8014d74:	4603      	mov	r3, r0
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d11d      	bne.n	8014db6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014d7a:	693b      	ldr	r3, [r7, #16]
 8014d7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014d80:	683b      	ldr	r3, [r7, #0]
 8014d82:	009b      	lsls	r3, r3, #2
 8014d84:	693a      	ldr	r2, [r7, #16]
 8014d86:	8992      	ldrh	r2, [r2, #12]
 8014d88:	fbb3 f0f2 	udiv	r0, r3, r2
 8014d8c:	fb00 f202 	mul.w	r2, r0, r2
 8014d90:	1a9b      	subs	r3, r3, r2
 8014d92:	440b      	add	r3, r1
 8014d94:	4618      	mov	r0, r3
 8014d96:	f7ff fbeb 	bl	8014570 <ld_dword>
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8014da0:	617b      	str	r3, [r7, #20]
			break;
 8014da2:	e009      	b.n	8014db8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8014da4:	2301      	movs	r3, #1
 8014da6:	617b      	str	r3, [r7, #20]
 8014da8:	e006      	b.n	8014db8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014daa:	bf00      	nop
 8014dac:	e004      	b.n	8014db8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014dae:	bf00      	nop
 8014db0:	e002      	b.n	8014db8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014db2:	bf00      	nop
 8014db4:	e000      	b.n	8014db8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014db6:	bf00      	nop
		}
	}

	return val;
 8014db8:	697b      	ldr	r3, [r7, #20]
}
 8014dba:	4618      	mov	r0, r3
 8014dbc:	3718      	adds	r7, #24
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	bd80      	pop	{r7, pc}

08014dc2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8014dc2:	b590      	push	{r4, r7, lr}
 8014dc4:	b089      	sub	sp, #36	; 0x24
 8014dc6:	af00      	add	r7, sp, #0
 8014dc8:	60f8      	str	r0, [r7, #12]
 8014dca:	60b9      	str	r1, [r7, #8]
 8014dcc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8014dce:	2302      	movs	r3, #2
 8014dd0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8014dd2:	68bb      	ldr	r3, [r7, #8]
 8014dd4:	2b01      	cmp	r3, #1
 8014dd6:	f240 8109 	bls.w	8014fec <put_fat+0x22a>
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	69db      	ldr	r3, [r3, #28]
 8014dde:	68ba      	ldr	r2, [r7, #8]
 8014de0:	429a      	cmp	r2, r3
 8014de2:	f080 8103 	bcs.w	8014fec <put_fat+0x22a>
		switch (fs->fs_type) {
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	781b      	ldrb	r3, [r3, #0]
 8014dea:	2b03      	cmp	r3, #3
 8014dec:	f000 80b6 	beq.w	8014f5c <put_fat+0x19a>
 8014df0:	2b03      	cmp	r3, #3
 8014df2:	f300 80fb 	bgt.w	8014fec <put_fat+0x22a>
 8014df6:	2b01      	cmp	r3, #1
 8014df8:	d003      	beq.n	8014e02 <put_fat+0x40>
 8014dfa:	2b02      	cmp	r3, #2
 8014dfc:	f000 8083 	beq.w	8014f06 <put_fat+0x144>
 8014e00:	e0f4      	b.n	8014fec <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8014e02:	68bb      	ldr	r3, [r7, #8]
 8014e04:	61bb      	str	r3, [r7, #24]
 8014e06:	69bb      	ldr	r3, [r7, #24]
 8014e08:	085b      	lsrs	r3, r3, #1
 8014e0a:	69ba      	ldr	r2, [r7, #24]
 8014e0c:	4413      	add	r3, r2
 8014e0e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	899b      	ldrh	r3, [r3, #12]
 8014e18:	4619      	mov	r1, r3
 8014e1a:	69bb      	ldr	r3, [r7, #24]
 8014e1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8014e20:	4413      	add	r3, r2
 8014e22:	4619      	mov	r1, r3
 8014e24:	68f8      	ldr	r0, [r7, #12]
 8014e26:	f7ff fe3b 	bl	8014aa0 <move_window>
 8014e2a:	4603      	mov	r3, r0
 8014e2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014e2e:	7ffb      	ldrb	r3, [r7, #31]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	f040 80d4 	bne.w	8014fde <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014e3c:	69bb      	ldr	r3, [r7, #24]
 8014e3e:	1c5a      	adds	r2, r3, #1
 8014e40:	61ba      	str	r2, [r7, #24]
 8014e42:	68fa      	ldr	r2, [r7, #12]
 8014e44:	8992      	ldrh	r2, [r2, #12]
 8014e46:	fbb3 f0f2 	udiv	r0, r3, r2
 8014e4a:	fb00 f202 	mul.w	r2, r0, r2
 8014e4e:	1a9b      	subs	r3, r3, r2
 8014e50:	440b      	add	r3, r1
 8014e52:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8014e54:	68bb      	ldr	r3, [r7, #8]
 8014e56:	f003 0301 	and.w	r3, r3, #1
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d00d      	beq.n	8014e7a <put_fat+0xb8>
 8014e5e:	697b      	ldr	r3, [r7, #20]
 8014e60:	781b      	ldrb	r3, [r3, #0]
 8014e62:	b25b      	sxtb	r3, r3
 8014e64:	f003 030f 	and.w	r3, r3, #15
 8014e68:	b25a      	sxtb	r2, r3
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	b2db      	uxtb	r3, r3
 8014e6e:	011b      	lsls	r3, r3, #4
 8014e70:	b25b      	sxtb	r3, r3
 8014e72:	4313      	orrs	r3, r2
 8014e74:	b25b      	sxtb	r3, r3
 8014e76:	b2db      	uxtb	r3, r3
 8014e78:	e001      	b.n	8014e7e <put_fat+0xbc>
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	b2db      	uxtb	r3, r3
 8014e7e:	697a      	ldr	r2, [r7, #20]
 8014e80:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	2201      	movs	r2, #1
 8014e86:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	899b      	ldrh	r3, [r3, #12]
 8014e90:	4619      	mov	r1, r3
 8014e92:	69bb      	ldr	r3, [r7, #24]
 8014e94:	fbb3 f3f1 	udiv	r3, r3, r1
 8014e98:	4413      	add	r3, r2
 8014e9a:	4619      	mov	r1, r3
 8014e9c:	68f8      	ldr	r0, [r7, #12]
 8014e9e:	f7ff fdff 	bl	8014aa0 <move_window>
 8014ea2:	4603      	mov	r3, r0
 8014ea4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014ea6:	7ffb      	ldrb	r3, [r7, #31]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	f040 809a 	bne.w	8014fe2 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	899b      	ldrh	r3, [r3, #12]
 8014eb8:	461a      	mov	r2, r3
 8014eba:	69bb      	ldr	r3, [r7, #24]
 8014ebc:	fbb3 f0f2 	udiv	r0, r3, r2
 8014ec0:	fb00 f202 	mul.w	r2, r0, r2
 8014ec4:	1a9b      	subs	r3, r3, r2
 8014ec6:	440b      	add	r3, r1
 8014ec8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014eca:	68bb      	ldr	r3, [r7, #8]
 8014ecc:	f003 0301 	and.w	r3, r3, #1
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d003      	beq.n	8014edc <put_fat+0x11a>
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	091b      	lsrs	r3, r3, #4
 8014ed8:	b2db      	uxtb	r3, r3
 8014eda:	e00e      	b.n	8014efa <put_fat+0x138>
 8014edc:	697b      	ldr	r3, [r7, #20]
 8014ede:	781b      	ldrb	r3, [r3, #0]
 8014ee0:	b25b      	sxtb	r3, r3
 8014ee2:	f023 030f 	bic.w	r3, r3, #15
 8014ee6:	b25a      	sxtb	r2, r3
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	0a1b      	lsrs	r3, r3, #8
 8014eec:	b25b      	sxtb	r3, r3
 8014eee:	f003 030f 	and.w	r3, r3, #15
 8014ef2:	b25b      	sxtb	r3, r3
 8014ef4:	4313      	orrs	r3, r2
 8014ef6:	b25b      	sxtb	r3, r3
 8014ef8:	b2db      	uxtb	r3, r3
 8014efa:	697a      	ldr	r2, [r7, #20]
 8014efc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	2201      	movs	r2, #1
 8014f02:	70da      	strb	r2, [r3, #3]
			break;
 8014f04:	e072      	b.n	8014fec <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	899b      	ldrh	r3, [r3, #12]
 8014f0e:	085b      	lsrs	r3, r3, #1
 8014f10:	b29b      	uxth	r3, r3
 8014f12:	4619      	mov	r1, r3
 8014f14:	68bb      	ldr	r3, [r7, #8]
 8014f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8014f1a:	4413      	add	r3, r2
 8014f1c:	4619      	mov	r1, r3
 8014f1e:	68f8      	ldr	r0, [r7, #12]
 8014f20:	f7ff fdbe 	bl	8014aa0 <move_window>
 8014f24:	4603      	mov	r3, r0
 8014f26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014f28:	7ffb      	ldrb	r3, [r7, #31]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d15b      	bne.n	8014fe6 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014f34:	68bb      	ldr	r3, [r7, #8]
 8014f36:	005b      	lsls	r3, r3, #1
 8014f38:	68fa      	ldr	r2, [r7, #12]
 8014f3a:	8992      	ldrh	r2, [r2, #12]
 8014f3c:	fbb3 f0f2 	udiv	r0, r3, r2
 8014f40:	fb00 f202 	mul.w	r2, r0, r2
 8014f44:	1a9b      	subs	r3, r3, r2
 8014f46:	440b      	add	r3, r1
 8014f48:	687a      	ldr	r2, [r7, #4]
 8014f4a:	b292      	uxth	r2, r2
 8014f4c:	4611      	mov	r1, r2
 8014f4e:	4618      	mov	r0, r3
 8014f50:	f7ff fb31 	bl	80145b6 <st_word>
			fs->wflag = 1;
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	2201      	movs	r2, #1
 8014f58:	70da      	strb	r2, [r3, #3]
			break;
 8014f5a:	e047      	b.n	8014fec <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	899b      	ldrh	r3, [r3, #12]
 8014f64:	089b      	lsrs	r3, r3, #2
 8014f66:	b29b      	uxth	r3, r3
 8014f68:	4619      	mov	r1, r3
 8014f6a:	68bb      	ldr	r3, [r7, #8]
 8014f6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8014f70:	4413      	add	r3, r2
 8014f72:	4619      	mov	r1, r3
 8014f74:	68f8      	ldr	r0, [r7, #12]
 8014f76:	f7ff fd93 	bl	8014aa0 <move_window>
 8014f7a:	4603      	mov	r3, r0
 8014f7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014f7e:	7ffb      	ldrb	r3, [r7, #31]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d132      	bne.n	8014fea <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014f90:	68bb      	ldr	r3, [r7, #8]
 8014f92:	009b      	lsls	r3, r3, #2
 8014f94:	68fa      	ldr	r2, [r7, #12]
 8014f96:	8992      	ldrh	r2, [r2, #12]
 8014f98:	fbb3 f0f2 	udiv	r0, r3, r2
 8014f9c:	fb00 f202 	mul.w	r2, r0, r2
 8014fa0:	1a9b      	subs	r3, r3, r2
 8014fa2:	440b      	add	r3, r1
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	f7ff fae3 	bl	8014570 <ld_dword>
 8014faa:	4603      	mov	r3, r0
 8014fac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8014fb0:	4323      	orrs	r3, r4
 8014fb2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014fba:	68bb      	ldr	r3, [r7, #8]
 8014fbc:	009b      	lsls	r3, r3, #2
 8014fbe:	68fa      	ldr	r2, [r7, #12]
 8014fc0:	8992      	ldrh	r2, [r2, #12]
 8014fc2:	fbb3 f0f2 	udiv	r0, r3, r2
 8014fc6:	fb00 f202 	mul.w	r2, r0, r2
 8014fca:	1a9b      	subs	r3, r3, r2
 8014fcc:	440b      	add	r3, r1
 8014fce:	6879      	ldr	r1, [r7, #4]
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	f7ff fb0b 	bl	80145ec <st_dword>
			fs->wflag = 1;
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	2201      	movs	r2, #1
 8014fda:	70da      	strb	r2, [r3, #3]
			break;
 8014fdc:	e006      	b.n	8014fec <put_fat+0x22a>
			if (res != FR_OK) break;
 8014fde:	bf00      	nop
 8014fe0:	e004      	b.n	8014fec <put_fat+0x22a>
			if (res != FR_OK) break;
 8014fe2:	bf00      	nop
 8014fe4:	e002      	b.n	8014fec <put_fat+0x22a>
			if (res != FR_OK) break;
 8014fe6:	bf00      	nop
 8014fe8:	e000      	b.n	8014fec <put_fat+0x22a>
			if (res != FR_OK) break;
 8014fea:	bf00      	nop
		}
	}
	return res;
 8014fec:	7ffb      	ldrb	r3, [r7, #31]
}
 8014fee:	4618      	mov	r0, r3
 8014ff0:	3724      	adds	r7, #36	; 0x24
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	bd90      	pop	{r4, r7, pc}

08014ff6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8014ff6:	b580      	push	{r7, lr}
 8014ff8:	b088      	sub	sp, #32
 8014ffa:	af00      	add	r7, sp, #0
 8014ffc:	60f8      	str	r0, [r7, #12]
 8014ffe:	60b9      	str	r1, [r7, #8]
 8015000:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8015002:	2300      	movs	r3, #0
 8015004:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801500c:	68bb      	ldr	r3, [r7, #8]
 801500e:	2b01      	cmp	r3, #1
 8015010:	d904      	bls.n	801501c <remove_chain+0x26>
 8015012:	69bb      	ldr	r3, [r7, #24]
 8015014:	69db      	ldr	r3, [r3, #28]
 8015016:	68ba      	ldr	r2, [r7, #8]
 8015018:	429a      	cmp	r2, r3
 801501a:	d301      	bcc.n	8015020 <remove_chain+0x2a>
 801501c:	2302      	movs	r3, #2
 801501e:	e04b      	b.n	80150b8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	2b00      	cmp	r3, #0
 8015024:	d00c      	beq.n	8015040 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8015026:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801502a:	6879      	ldr	r1, [r7, #4]
 801502c:	69b8      	ldr	r0, [r7, #24]
 801502e:	f7ff fec8 	bl	8014dc2 <put_fat>
 8015032:	4603      	mov	r3, r0
 8015034:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8015036:	7ffb      	ldrb	r3, [r7, #31]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d001      	beq.n	8015040 <remove_chain+0x4a>
 801503c:	7ffb      	ldrb	r3, [r7, #31]
 801503e:	e03b      	b.n	80150b8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8015040:	68b9      	ldr	r1, [r7, #8]
 8015042:	68f8      	ldr	r0, [r7, #12]
 8015044:	f7ff fde9 	bl	8014c1a <get_fat>
 8015048:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801504a:	697b      	ldr	r3, [r7, #20]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d031      	beq.n	80150b4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8015050:	697b      	ldr	r3, [r7, #20]
 8015052:	2b01      	cmp	r3, #1
 8015054:	d101      	bne.n	801505a <remove_chain+0x64>
 8015056:	2302      	movs	r3, #2
 8015058:	e02e      	b.n	80150b8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801505a:	697b      	ldr	r3, [r7, #20]
 801505c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015060:	d101      	bne.n	8015066 <remove_chain+0x70>
 8015062:	2301      	movs	r3, #1
 8015064:	e028      	b.n	80150b8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8015066:	2200      	movs	r2, #0
 8015068:	68b9      	ldr	r1, [r7, #8]
 801506a:	69b8      	ldr	r0, [r7, #24]
 801506c:	f7ff fea9 	bl	8014dc2 <put_fat>
 8015070:	4603      	mov	r3, r0
 8015072:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8015074:	7ffb      	ldrb	r3, [r7, #31]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d001      	beq.n	801507e <remove_chain+0x88>
 801507a:	7ffb      	ldrb	r3, [r7, #31]
 801507c:	e01c      	b.n	80150b8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801507e:	69bb      	ldr	r3, [r7, #24]
 8015080:	699a      	ldr	r2, [r3, #24]
 8015082:	69bb      	ldr	r3, [r7, #24]
 8015084:	69db      	ldr	r3, [r3, #28]
 8015086:	3b02      	subs	r3, #2
 8015088:	429a      	cmp	r2, r3
 801508a:	d20b      	bcs.n	80150a4 <remove_chain+0xae>
			fs->free_clst++;
 801508c:	69bb      	ldr	r3, [r7, #24]
 801508e:	699b      	ldr	r3, [r3, #24]
 8015090:	1c5a      	adds	r2, r3, #1
 8015092:	69bb      	ldr	r3, [r7, #24]
 8015094:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8015096:	69bb      	ldr	r3, [r7, #24]
 8015098:	791b      	ldrb	r3, [r3, #4]
 801509a:	f043 0301 	orr.w	r3, r3, #1
 801509e:	b2da      	uxtb	r2, r3
 80150a0:	69bb      	ldr	r3, [r7, #24]
 80150a2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80150a4:	697b      	ldr	r3, [r7, #20]
 80150a6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80150a8:	69bb      	ldr	r3, [r7, #24]
 80150aa:	69db      	ldr	r3, [r3, #28]
 80150ac:	68ba      	ldr	r2, [r7, #8]
 80150ae:	429a      	cmp	r2, r3
 80150b0:	d3c6      	bcc.n	8015040 <remove_chain+0x4a>
 80150b2:	e000      	b.n	80150b6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80150b4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80150b6:	2300      	movs	r3, #0
}
 80150b8:	4618      	mov	r0, r3
 80150ba:	3720      	adds	r7, #32
 80150bc:	46bd      	mov	sp, r7
 80150be:	bd80      	pop	{r7, pc}

080150c0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80150c0:	b580      	push	{r7, lr}
 80150c2:	b088      	sub	sp, #32
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	6078      	str	r0, [r7, #4]
 80150c8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80150d0:	683b      	ldr	r3, [r7, #0]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d10d      	bne.n	80150f2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80150d6:	693b      	ldr	r3, [r7, #16]
 80150d8:	695b      	ldr	r3, [r3, #20]
 80150da:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80150dc:	69bb      	ldr	r3, [r7, #24]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d004      	beq.n	80150ec <create_chain+0x2c>
 80150e2:	693b      	ldr	r3, [r7, #16]
 80150e4:	69db      	ldr	r3, [r3, #28]
 80150e6:	69ba      	ldr	r2, [r7, #24]
 80150e8:	429a      	cmp	r2, r3
 80150ea:	d31b      	bcc.n	8015124 <create_chain+0x64>
 80150ec:	2301      	movs	r3, #1
 80150ee:	61bb      	str	r3, [r7, #24]
 80150f0:	e018      	b.n	8015124 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80150f2:	6839      	ldr	r1, [r7, #0]
 80150f4:	6878      	ldr	r0, [r7, #4]
 80150f6:	f7ff fd90 	bl	8014c1a <get_fat>
 80150fa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	2b01      	cmp	r3, #1
 8015100:	d801      	bhi.n	8015106 <create_chain+0x46>
 8015102:	2301      	movs	r3, #1
 8015104:	e070      	b.n	80151e8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801510c:	d101      	bne.n	8015112 <create_chain+0x52>
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	e06a      	b.n	80151e8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8015112:	693b      	ldr	r3, [r7, #16]
 8015114:	69db      	ldr	r3, [r3, #28]
 8015116:	68fa      	ldr	r2, [r7, #12]
 8015118:	429a      	cmp	r2, r3
 801511a:	d201      	bcs.n	8015120 <create_chain+0x60>
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	e063      	b.n	80151e8 <create_chain+0x128>
		scl = clst;
 8015120:	683b      	ldr	r3, [r7, #0]
 8015122:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8015124:	69bb      	ldr	r3, [r7, #24]
 8015126:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8015128:	69fb      	ldr	r3, [r7, #28]
 801512a:	3301      	adds	r3, #1
 801512c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801512e:	693b      	ldr	r3, [r7, #16]
 8015130:	69db      	ldr	r3, [r3, #28]
 8015132:	69fa      	ldr	r2, [r7, #28]
 8015134:	429a      	cmp	r2, r3
 8015136:	d307      	bcc.n	8015148 <create_chain+0x88>
				ncl = 2;
 8015138:	2302      	movs	r3, #2
 801513a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801513c:	69fa      	ldr	r2, [r7, #28]
 801513e:	69bb      	ldr	r3, [r7, #24]
 8015140:	429a      	cmp	r2, r3
 8015142:	d901      	bls.n	8015148 <create_chain+0x88>
 8015144:	2300      	movs	r3, #0
 8015146:	e04f      	b.n	80151e8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8015148:	69f9      	ldr	r1, [r7, #28]
 801514a:	6878      	ldr	r0, [r7, #4]
 801514c:	f7ff fd65 	bl	8014c1a <get_fat>
 8015150:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d00e      	beq.n	8015176 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	2b01      	cmp	r3, #1
 801515c:	d003      	beq.n	8015166 <create_chain+0xa6>
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015164:	d101      	bne.n	801516a <create_chain+0xaa>
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	e03e      	b.n	80151e8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801516a:	69fa      	ldr	r2, [r7, #28]
 801516c:	69bb      	ldr	r3, [r7, #24]
 801516e:	429a      	cmp	r2, r3
 8015170:	d1da      	bne.n	8015128 <create_chain+0x68>
 8015172:	2300      	movs	r3, #0
 8015174:	e038      	b.n	80151e8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8015176:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8015178:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801517c:	69f9      	ldr	r1, [r7, #28]
 801517e:	6938      	ldr	r0, [r7, #16]
 8015180:	f7ff fe1f 	bl	8014dc2 <put_fat>
 8015184:	4603      	mov	r3, r0
 8015186:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8015188:	7dfb      	ldrb	r3, [r7, #23]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d109      	bne.n	80151a2 <create_chain+0xe2>
 801518e:	683b      	ldr	r3, [r7, #0]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d006      	beq.n	80151a2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8015194:	69fa      	ldr	r2, [r7, #28]
 8015196:	6839      	ldr	r1, [r7, #0]
 8015198:	6938      	ldr	r0, [r7, #16]
 801519a:	f7ff fe12 	bl	8014dc2 <put_fat>
 801519e:	4603      	mov	r3, r0
 80151a0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80151a2:	7dfb      	ldrb	r3, [r7, #23]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d116      	bne.n	80151d6 <create_chain+0x116>
		fs->last_clst = ncl;
 80151a8:	693b      	ldr	r3, [r7, #16]
 80151aa:	69fa      	ldr	r2, [r7, #28]
 80151ac:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80151ae:	693b      	ldr	r3, [r7, #16]
 80151b0:	699a      	ldr	r2, [r3, #24]
 80151b2:	693b      	ldr	r3, [r7, #16]
 80151b4:	69db      	ldr	r3, [r3, #28]
 80151b6:	3b02      	subs	r3, #2
 80151b8:	429a      	cmp	r2, r3
 80151ba:	d804      	bhi.n	80151c6 <create_chain+0x106>
 80151bc:	693b      	ldr	r3, [r7, #16]
 80151be:	699b      	ldr	r3, [r3, #24]
 80151c0:	1e5a      	subs	r2, r3, #1
 80151c2:	693b      	ldr	r3, [r7, #16]
 80151c4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80151c6:	693b      	ldr	r3, [r7, #16]
 80151c8:	791b      	ldrb	r3, [r3, #4]
 80151ca:	f043 0301 	orr.w	r3, r3, #1
 80151ce:	b2da      	uxtb	r2, r3
 80151d0:	693b      	ldr	r3, [r7, #16]
 80151d2:	711a      	strb	r2, [r3, #4]
 80151d4:	e007      	b.n	80151e6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80151d6:	7dfb      	ldrb	r3, [r7, #23]
 80151d8:	2b01      	cmp	r3, #1
 80151da:	d102      	bne.n	80151e2 <create_chain+0x122>
 80151dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80151e0:	e000      	b.n	80151e4 <create_chain+0x124>
 80151e2:	2301      	movs	r3, #1
 80151e4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80151e6:	69fb      	ldr	r3, [r7, #28]
}
 80151e8:	4618      	mov	r0, r3
 80151ea:	3720      	adds	r7, #32
 80151ec:	46bd      	mov	sp, r7
 80151ee:	bd80      	pop	{r7, pc}

080151f0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80151f0:	b480      	push	{r7}
 80151f2:	b087      	sub	sp, #28
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	6078      	str	r0, [r7, #4]
 80151f8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015204:	3304      	adds	r3, #4
 8015206:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	899b      	ldrh	r3, [r3, #12]
 801520c:	461a      	mov	r2, r3
 801520e:	683b      	ldr	r3, [r7, #0]
 8015210:	fbb3 f3f2 	udiv	r3, r3, r2
 8015214:	68fa      	ldr	r2, [r7, #12]
 8015216:	8952      	ldrh	r2, [r2, #10]
 8015218:	fbb3 f3f2 	udiv	r3, r3, r2
 801521c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801521e:	693b      	ldr	r3, [r7, #16]
 8015220:	1d1a      	adds	r2, r3, #4
 8015222:	613a      	str	r2, [r7, #16]
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8015228:	68bb      	ldr	r3, [r7, #8]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d101      	bne.n	8015232 <clmt_clust+0x42>
 801522e:	2300      	movs	r3, #0
 8015230:	e010      	b.n	8015254 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8015232:	697a      	ldr	r2, [r7, #20]
 8015234:	68bb      	ldr	r3, [r7, #8]
 8015236:	429a      	cmp	r2, r3
 8015238:	d307      	bcc.n	801524a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801523a:	697a      	ldr	r2, [r7, #20]
 801523c:	68bb      	ldr	r3, [r7, #8]
 801523e:	1ad3      	subs	r3, r2, r3
 8015240:	617b      	str	r3, [r7, #20]
 8015242:	693b      	ldr	r3, [r7, #16]
 8015244:	3304      	adds	r3, #4
 8015246:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015248:	e7e9      	b.n	801521e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801524a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801524c:	693b      	ldr	r3, [r7, #16]
 801524e:	681a      	ldr	r2, [r3, #0]
 8015250:	697b      	ldr	r3, [r7, #20]
 8015252:	4413      	add	r3, r2
}
 8015254:	4618      	mov	r0, r3
 8015256:	371c      	adds	r7, #28
 8015258:	46bd      	mov	sp, r7
 801525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801525e:	4770      	bx	lr

08015260 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8015260:	b580      	push	{r7, lr}
 8015262:	b086      	sub	sp, #24
 8015264:	af00      	add	r7, sp, #0
 8015266:	6078      	str	r0, [r7, #4]
 8015268:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8015270:	683b      	ldr	r3, [r7, #0]
 8015272:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015276:	d204      	bcs.n	8015282 <dir_sdi+0x22>
 8015278:	683b      	ldr	r3, [r7, #0]
 801527a:	f003 031f 	and.w	r3, r3, #31
 801527e:	2b00      	cmp	r3, #0
 8015280:	d001      	beq.n	8015286 <dir_sdi+0x26>
		return FR_INT_ERR;
 8015282:	2302      	movs	r3, #2
 8015284:	e071      	b.n	801536a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	683a      	ldr	r2, [r7, #0]
 801528a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	689b      	ldr	r3, [r3, #8]
 8015290:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8015292:	697b      	ldr	r3, [r7, #20]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d106      	bne.n	80152a6 <dir_sdi+0x46>
 8015298:	693b      	ldr	r3, [r7, #16]
 801529a:	781b      	ldrb	r3, [r3, #0]
 801529c:	2b02      	cmp	r3, #2
 801529e:	d902      	bls.n	80152a6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80152a0:	693b      	ldr	r3, [r7, #16]
 80152a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152a4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80152a6:	697b      	ldr	r3, [r7, #20]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d10c      	bne.n	80152c6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80152ac:	683b      	ldr	r3, [r7, #0]
 80152ae:	095b      	lsrs	r3, r3, #5
 80152b0:	693a      	ldr	r2, [r7, #16]
 80152b2:	8912      	ldrh	r2, [r2, #8]
 80152b4:	4293      	cmp	r3, r2
 80152b6:	d301      	bcc.n	80152bc <dir_sdi+0x5c>
 80152b8:	2302      	movs	r3, #2
 80152ba:	e056      	b.n	801536a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80152bc:	693b      	ldr	r3, [r7, #16]
 80152be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	61da      	str	r2, [r3, #28]
 80152c4:	e02d      	b.n	8015322 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80152c6:	693b      	ldr	r3, [r7, #16]
 80152c8:	895b      	ldrh	r3, [r3, #10]
 80152ca:	461a      	mov	r2, r3
 80152cc:	693b      	ldr	r3, [r7, #16]
 80152ce:	899b      	ldrh	r3, [r3, #12]
 80152d0:	fb02 f303 	mul.w	r3, r2, r3
 80152d4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80152d6:	e019      	b.n	801530c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	6979      	ldr	r1, [r7, #20]
 80152dc:	4618      	mov	r0, r3
 80152de:	f7ff fc9c 	bl	8014c1a <get_fat>
 80152e2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80152e4:	697b      	ldr	r3, [r7, #20]
 80152e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80152ea:	d101      	bne.n	80152f0 <dir_sdi+0x90>
 80152ec:	2301      	movs	r3, #1
 80152ee:	e03c      	b.n	801536a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80152f0:	697b      	ldr	r3, [r7, #20]
 80152f2:	2b01      	cmp	r3, #1
 80152f4:	d904      	bls.n	8015300 <dir_sdi+0xa0>
 80152f6:	693b      	ldr	r3, [r7, #16]
 80152f8:	69db      	ldr	r3, [r3, #28]
 80152fa:	697a      	ldr	r2, [r7, #20]
 80152fc:	429a      	cmp	r2, r3
 80152fe:	d301      	bcc.n	8015304 <dir_sdi+0xa4>
 8015300:	2302      	movs	r3, #2
 8015302:	e032      	b.n	801536a <dir_sdi+0x10a>
			ofs -= csz;
 8015304:	683a      	ldr	r2, [r7, #0]
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	1ad3      	subs	r3, r2, r3
 801530a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801530c:	683a      	ldr	r2, [r7, #0]
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	429a      	cmp	r2, r3
 8015312:	d2e1      	bcs.n	80152d8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8015314:	6979      	ldr	r1, [r7, #20]
 8015316:	6938      	ldr	r0, [r7, #16]
 8015318:	f7ff fc60 	bl	8014bdc <clust2sect>
 801531c:	4602      	mov	r2, r0
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	697a      	ldr	r2, [r7, #20]
 8015326:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	69db      	ldr	r3, [r3, #28]
 801532c:	2b00      	cmp	r3, #0
 801532e:	d101      	bne.n	8015334 <dir_sdi+0xd4>
 8015330:	2302      	movs	r3, #2
 8015332:	e01a      	b.n	801536a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	69da      	ldr	r2, [r3, #28]
 8015338:	693b      	ldr	r3, [r7, #16]
 801533a:	899b      	ldrh	r3, [r3, #12]
 801533c:	4619      	mov	r1, r3
 801533e:	683b      	ldr	r3, [r7, #0]
 8015340:	fbb3 f3f1 	udiv	r3, r3, r1
 8015344:	441a      	add	r2, r3
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801534a:	693b      	ldr	r3, [r7, #16]
 801534c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015350:	693b      	ldr	r3, [r7, #16]
 8015352:	899b      	ldrh	r3, [r3, #12]
 8015354:	461a      	mov	r2, r3
 8015356:	683b      	ldr	r3, [r7, #0]
 8015358:	fbb3 f0f2 	udiv	r0, r3, r2
 801535c:	fb00 f202 	mul.w	r2, r0, r2
 8015360:	1a9b      	subs	r3, r3, r2
 8015362:	18ca      	adds	r2, r1, r3
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8015368:	2300      	movs	r3, #0
}
 801536a:	4618      	mov	r0, r3
 801536c:	3718      	adds	r7, #24
 801536e:	46bd      	mov	sp, r7
 8015370:	bd80      	pop	{r7, pc}

08015372 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8015372:	b580      	push	{r7, lr}
 8015374:	b086      	sub	sp, #24
 8015376:	af00      	add	r7, sp, #0
 8015378:	6078      	str	r0, [r7, #4]
 801537a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	695b      	ldr	r3, [r3, #20]
 8015386:	3320      	adds	r3, #32
 8015388:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	69db      	ldr	r3, [r3, #28]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d003      	beq.n	801539a <dir_next+0x28>
 8015392:	68bb      	ldr	r3, [r7, #8]
 8015394:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015398:	d301      	bcc.n	801539e <dir_next+0x2c>
 801539a:	2304      	movs	r3, #4
 801539c:	e0bb      	b.n	8015516 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	899b      	ldrh	r3, [r3, #12]
 80153a2:	461a      	mov	r2, r3
 80153a4:	68bb      	ldr	r3, [r7, #8]
 80153a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80153aa:	fb01 f202 	mul.w	r2, r1, r2
 80153ae:	1a9b      	subs	r3, r3, r2
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	f040 809d 	bne.w	80154f0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	69db      	ldr	r3, [r3, #28]
 80153ba:	1c5a      	adds	r2, r3, #1
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	699b      	ldr	r3, [r3, #24]
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d10b      	bne.n	80153e0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80153c8:	68bb      	ldr	r3, [r7, #8]
 80153ca:	095b      	lsrs	r3, r3, #5
 80153cc:	68fa      	ldr	r2, [r7, #12]
 80153ce:	8912      	ldrh	r2, [r2, #8]
 80153d0:	4293      	cmp	r3, r2
 80153d2:	f0c0 808d 	bcc.w	80154f0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	2200      	movs	r2, #0
 80153da:	61da      	str	r2, [r3, #28]
 80153dc:	2304      	movs	r3, #4
 80153de:	e09a      	b.n	8015516 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	899b      	ldrh	r3, [r3, #12]
 80153e4:	461a      	mov	r2, r3
 80153e6:	68bb      	ldr	r3, [r7, #8]
 80153e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80153ec:	68fa      	ldr	r2, [r7, #12]
 80153ee:	8952      	ldrh	r2, [r2, #10]
 80153f0:	3a01      	subs	r2, #1
 80153f2:	4013      	ands	r3, r2
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d17b      	bne.n	80154f0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80153f8:	687a      	ldr	r2, [r7, #4]
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	699b      	ldr	r3, [r3, #24]
 80153fe:	4619      	mov	r1, r3
 8015400:	4610      	mov	r0, r2
 8015402:	f7ff fc0a 	bl	8014c1a <get_fat>
 8015406:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015408:	697b      	ldr	r3, [r7, #20]
 801540a:	2b01      	cmp	r3, #1
 801540c:	d801      	bhi.n	8015412 <dir_next+0xa0>
 801540e:	2302      	movs	r3, #2
 8015410:	e081      	b.n	8015516 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015412:	697b      	ldr	r3, [r7, #20]
 8015414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015418:	d101      	bne.n	801541e <dir_next+0xac>
 801541a:	2301      	movs	r3, #1
 801541c:	e07b      	b.n	8015516 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	69db      	ldr	r3, [r3, #28]
 8015422:	697a      	ldr	r2, [r7, #20]
 8015424:	429a      	cmp	r2, r3
 8015426:	d359      	bcc.n	80154dc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8015428:	683b      	ldr	r3, [r7, #0]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d104      	bne.n	8015438 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	2200      	movs	r2, #0
 8015432:	61da      	str	r2, [r3, #28]
 8015434:	2304      	movs	r3, #4
 8015436:	e06e      	b.n	8015516 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8015438:	687a      	ldr	r2, [r7, #4]
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	699b      	ldr	r3, [r3, #24]
 801543e:	4619      	mov	r1, r3
 8015440:	4610      	mov	r0, r2
 8015442:	f7ff fe3d 	bl	80150c0 <create_chain>
 8015446:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015448:	697b      	ldr	r3, [r7, #20]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d101      	bne.n	8015452 <dir_next+0xe0>
 801544e:	2307      	movs	r3, #7
 8015450:	e061      	b.n	8015516 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8015452:	697b      	ldr	r3, [r7, #20]
 8015454:	2b01      	cmp	r3, #1
 8015456:	d101      	bne.n	801545c <dir_next+0xea>
 8015458:	2302      	movs	r3, #2
 801545a:	e05c      	b.n	8015516 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801545c:	697b      	ldr	r3, [r7, #20]
 801545e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015462:	d101      	bne.n	8015468 <dir_next+0xf6>
 8015464:	2301      	movs	r3, #1
 8015466:	e056      	b.n	8015516 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8015468:	68f8      	ldr	r0, [r7, #12]
 801546a:	f7ff fad5 	bl	8014a18 <sync_window>
 801546e:	4603      	mov	r3, r0
 8015470:	2b00      	cmp	r3, #0
 8015472:	d001      	beq.n	8015478 <dir_next+0x106>
 8015474:	2301      	movs	r3, #1
 8015476:	e04e      	b.n	8015516 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	899b      	ldrh	r3, [r3, #12]
 8015482:	461a      	mov	r2, r3
 8015484:	2100      	movs	r1, #0
 8015486:	f7ff f8fe 	bl	8014686 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801548a:	2300      	movs	r3, #0
 801548c:	613b      	str	r3, [r7, #16]
 801548e:	6979      	ldr	r1, [r7, #20]
 8015490:	68f8      	ldr	r0, [r7, #12]
 8015492:	f7ff fba3 	bl	8014bdc <clust2sect>
 8015496:	4602      	mov	r2, r0
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	635a      	str	r2, [r3, #52]	; 0x34
 801549c:	e012      	b.n	80154c4 <dir_next+0x152>
						fs->wflag = 1;
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	2201      	movs	r2, #1
 80154a2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80154a4:	68f8      	ldr	r0, [r7, #12]
 80154a6:	f7ff fab7 	bl	8014a18 <sync_window>
 80154aa:	4603      	mov	r3, r0
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d001      	beq.n	80154b4 <dir_next+0x142>
 80154b0:	2301      	movs	r3, #1
 80154b2:	e030      	b.n	8015516 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80154b4:	693b      	ldr	r3, [r7, #16]
 80154b6:	3301      	adds	r3, #1
 80154b8:	613b      	str	r3, [r7, #16]
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80154be:	1c5a      	adds	r2, r3, #1
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	635a      	str	r2, [r3, #52]	; 0x34
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	895b      	ldrh	r3, [r3, #10]
 80154c8:	461a      	mov	r2, r3
 80154ca:	693b      	ldr	r3, [r7, #16]
 80154cc:	4293      	cmp	r3, r2
 80154ce:	d3e6      	bcc.n	801549e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80154d4:	693b      	ldr	r3, [r7, #16]
 80154d6:	1ad2      	subs	r2, r2, r3
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	697a      	ldr	r2, [r7, #20]
 80154e0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80154e2:	6979      	ldr	r1, [r7, #20]
 80154e4:	68f8      	ldr	r0, [r7, #12]
 80154e6:	f7ff fb79 	bl	8014bdc <clust2sect>
 80154ea:	4602      	mov	r2, r0
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	68ba      	ldr	r2, [r7, #8]
 80154f4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	899b      	ldrh	r3, [r3, #12]
 8015500:	461a      	mov	r2, r3
 8015502:	68bb      	ldr	r3, [r7, #8]
 8015504:	fbb3 f0f2 	udiv	r0, r3, r2
 8015508:	fb00 f202 	mul.w	r2, r0, r2
 801550c:	1a9b      	subs	r3, r3, r2
 801550e:	18ca      	adds	r2, r1, r3
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8015514:	2300      	movs	r3, #0
}
 8015516:	4618      	mov	r0, r3
 8015518:	3718      	adds	r7, #24
 801551a:	46bd      	mov	sp, r7
 801551c:	bd80      	pop	{r7, pc}

0801551e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801551e:	b580      	push	{r7, lr}
 8015520:	b086      	sub	sp, #24
 8015522:	af00      	add	r7, sp, #0
 8015524:	6078      	str	r0, [r7, #4]
 8015526:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801552e:	2100      	movs	r1, #0
 8015530:	6878      	ldr	r0, [r7, #4]
 8015532:	f7ff fe95 	bl	8015260 <dir_sdi>
 8015536:	4603      	mov	r3, r0
 8015538:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801553a:	7dfb      	ldrb	r3, [r7, #23]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d12b      	bne.n	8015598 <dir_alloc+0x7a>
		n = 0;
 8015540:	2300      	movs	r3, #0
 8015542:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	69db      	ldr	r3, [r3, #28]
 8015548:	4619      	mov	r1, r3
 801554a:	68f8      	ldr	r0, [r7, #12]
 801554c:	f7ff faa8 	bl	8014aa0 <move_window>
 8015550:	4603      	mov	r3, r0
 8015552:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015554:	7dfb      	ldrb	r3, [r7, #23]
 8015556:	2b00      	cmp	r3, #0
 8015558:	d11d      	bne.n	8015596 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	6a1b      	ldr	r3, [r3, #32]
 801555e:	781b      	ldrb	r3, [r3, #0]
 8015560:	2be5      	cmp	r3, #229	; 0xe5
 8015562:	d004      	beq.n	801556e <dir_alloc+0x50>
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	6a1b      	ldr	r3, [r3, #32]
 8015568:	781b      	ldrb	r3, [r3, #0]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d107      	bne.n	801557e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801556e:	693b      	ldr	r3, [r7, #16]
 8015570:	3301      	adds	r3, #1
 8015572:	613b      	str	r3, [r7, #16]
 8015574:	693a      	ldr	r2, [r7, #16]
 8015576:	683b      	ldr	r3, [r7, #0]
 8015578:	429a      	cmp	r2, r3
 801557a:	d102      	bne.n	8015582 <dir_alloc+0x64>
 801557c:	e00c      	b.n	8015598 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801557e:	2300      	movs	r3, #0
 8015580:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8015582:	2101      	movs	r1, #1
 8015584:	6878      	ldr	r0, [r7, #4]
 8015586:	f7ff fef4 	bl	8015372 <dir_next>
 801558a:	4603      	mov	r3, r0
 801558c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801558e:	7dfb      	ldrb	r3, [r7, #23]
 8015590:	2b00      	cmp	r3, #0
 8015592:	d0d7      	beq.n	8015544 <dir_alloc+0x26>
 8015594:	e000      	b.n	8015598 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8015596:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8015598:	7dfb      	ldrb	r3, [r7, #23]
 801559a:	2b04      	cmp	r3, #4
 801559c:	d101      	bne.n	80155a2 <dir_alloc+0x84>
 801559e:	2307      	movs	r3, #7
 80155a0:	75fb      	strb	r3, [r7, #23]
	return res;
 80155a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80155a4:	4618      	mov	r0, r3
 80155a6:	3718      	adds	r7, #24
 80155a8:	46bd      	mov	sp, r7
 80155aa:	bd80      	pop	{r7, pc}

080155ac <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80155ac:	b580      	push	{r7, lr}
 80155ae:	b084      	sub	sp, #16
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	6078      	str	r0, [r7, #4]
 80155b4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80155b6:	683b      	ldr	r3, [r7, #0]
 80155b8:	331a      	adds	r3, #26
 80155ba:	4618      	mov	r0, r3
 80155bc:	f7fe ffc0 	bl	8014540 <ld_word>
 80155c0:	4603      	mov	r3, r0
 80155c2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	781b      	ldrb	r3, [r3, #0]
 80155c8:	2b03      	cmp	r3, #3
 80155ca:	d109      	bne.n	80155e0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80155cc:	683b      	ldr	r3, [r7, #0]
 80155ce:	3314      	adds	r3, #20
 80155d0:	4618      	mov	r0, r3
 80155d2:	f7fe ffb5 	bl	8014540 <ld_word>
 80155d6:	4603      	mov	r3, r0
 80155d8:	041b      	lsls	r3, r3, #16
 80155da:	68fa      	ldr	r2, [r7, #12]
 80155dc:	4313      	orrs	r3, r2
 80155de:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80155e0:	68fb      	ldr	r3, [r7, #12]
}
 80155e2:	4618      	mov	r0, r3
 80155e4:	3710      	adds	r7, #16
 80155e6:	46bd      	mov	sp, r7
 80155e8:	bd80      	pop	{r7, pc}

080155ea <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80155ea:	b580      	push	{r7, lr}
 80155ec:	b084      	sub	sp, #16
 80155ee:	af00      	add	r7, sp, #0
 80155f0:	60f8      	str	r0, [r7, #12]
 80155f2:	60b9      	str	r1, [r7, #8]
 80155f4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80155f6:	68bb      	ldr	r3, [r7, #8]
 80155f8:	331a      	adds	r3, #26
 80155fa:	687a      	ldr	r2, [r7, #4]
 80155fc:	b292      	uxth	r2, r2
 80155fe:	4611      	mov	r1, r2
 8015600:	4618      	mov	r0, r3
 8015602:	f7fe ffd8 	bl	80145b6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	781b      	ldrb	r3, [r3, #0]
 801560a:	2b03      	cmp	r3, #3
 801560c:	d109      	bne.n	8015622 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801560e:	68bb      	ldr	r3, [r7, #8]
 8015610:	f103 0214 	add.w	r2, r3, #20
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	0c1b      	lsrs	r3, r3, #16
 8015618:	b29b      	uxth	r3, r3
 801561a:	4619      	mov	r1, r3
 801561c:	4610      	mov	r0, r2
 801561e:	f7fe ffca 	bl	80145b6 <st_word>
	}
}
 8015622:	bf00      	nop
 8015624:	3710      	adds	r7, #16
 8015626:	46bd      	mov	sp, r7
 8015628:	bd80      	pop	{r7, pc}
	...

0801562c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801562c:	b590      	push	{r4, r7, lr}
 801562e:	b087      	sub	sp, #28
 8015630:	af00      	add	r7, sp, #0
 8015632:	6078      	str	r0, [r7, #4]
 8015634:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8015636:	683b      	ldr	r3, [r7, #0]
 8015638:	331a      	adds	r3, #26
 801563a:	4618      	mov	r0, r3
 801563c:	f7fe ff80 	bl	8014540 <ld_word>
 8015640:	4603      	mov	r3, r0
 8015642:	2b00      	cmp	r3, #0
 8015644:	d001      	beq.n	801564a <cmp_lfn+0x1e>
 8015646:	2300      	movs	r3, #0
 8015648:	e059      	b.n	80156fe <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801564a:	683b      	ldr	r3, [r7, #0]
 801564c:	781b      	ldrb	r3, [r3, #0]
 801564e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015652:	1e5a      	subs	r2, r3, #1
 8015654:	4613      	mov	r3, r2
 8015656:	005b      	lsls	r3, r3, #1
 8015658:	4413      	add	r3, r2
 801565a:	009b      	lsls	r3, r3, #2
 801565c:	4413      	add	r3, r2
 801565e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015660:	2301      	movs	r3, #1
 8015662:	81fb      	strh	r3, [r7, #14]
 8015664:	2300      	movs	r3, #0
 8015666:	613b      	str	r3, [r7, #16]
 8015668:	e033      	b.n	80156d2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801566a:	4a27      	ldr	r2, [pc, #156]	; (8015708 <cmp_lfn+0xdc>)
 801566c:	693b      	ldr	r3, [r7, #16]
 801566e:	4413      	add	r3, r2
 8015670:	781b      	ldrb	r3, [r3, #0]
 8015672:	461a      	mov	r2, r3
 8015674:	683b      	ldr	r3, [r7, #0]
 8015676:	4413      	add	r3, r2
 8015678:	4618      	mov	r0, r3
 801567a:	f7fe ff61 	bl	8014540 <ld_word>
 801567e:	4603      	mov	r3, r0
 8015680:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8015682:	89fb      	ldrh	r3, [r7, #14]
 8015684:	2b00      	cmp	r3, #0
 8015686:	d01a      	beq.n	80156be <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8015688:	697b      	ldr	r3, [r7, #20]
 801568a:	2b31      	cmp	r3, #49	; 0x31
 801568c:	d812      	bhi.n	80156b4 <cmp_lfn+0x88>
 801568e:	89bb      	ldrh	r3, [r7, #12]
 8015690:	4618      	mov	r0, r3
 8015692:	f002 fff5 	bl	8018680 <ff_wtoupper>
 8015696:	4603      	mov	r3, r0
 8015698:	461c      	mov	r4, r3
 801569a:	697b      	ldr	r3, [r7, #20]
 801569c:	1c5a      	adds	r2, r3, #1
 801569e:	617a      	str	r2, [r7, #20]
 80156a0:	005b      	lsls	r3, r3, #1
 80156a2:	687a      	ldr	r2, [r7, #4]
 80156a4:	4413      	add	r3, r2
 80156a6:	881b      	ldrh	r3, [r3, #0]
 80156a8:	4618      	mov	r0, r3
 80156aa:	f002 ffe9 	bl	8018680 <ff_wtoupper>
 80156ae:	4603      	mov	r3, r0
 80156b0:	429c      	cmp	r4, r3
 80156b2:	d001      	beq.n	80156b8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80156b4:	2300      	movs	r3, #0
 80156b6:	e022      	b.n	80156fe <cmp_lfn+0xd2>
			}
			wc = uc;
 80156b8:	89bb      	ldrh	r3, [r7, #12]
 80156ba:	81fb      	strh	r3, [r7, #14]
 80156bc:	e006      	b.n	80156cc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80156be:	89bb      	ldrh	r3, [r7, #12]
 80156c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80156c4:	4293      	cmp	r3, r2
 80156c6:	d001      	beq.n	80156cc <cmp_lfn+0xa0>
 80156c8:	2300      	movs	r3, #0
 80156ca:	e018      	b.n	80156fe <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80156cc:	693b      	ldr	r3, [r7, #16]
 80156ce:	3301      	adds	r3, #1
 80156d0:	613b      	str	r3, [r7, #16]
 80156d2:	693b      	ldr	r3, [r7, #16]
 80156d4:	2b0c      	cmp	r3, #12
 80156d6:	d9c8      	bls.n	801566a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80156d8:	683b      	ldr	r3, [r7, #0]
 80156da:	781b      	ldrb	r3, [r3, #0]
 80156dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d00b      	beq.n	80156fc <cmp_lfn+0xd0>
 80156e4:	89fb      	ldrh	r3, [r7, #14]
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d008      	beq.n	80156fc <cmp_lfn+0xd0>
 80156ea:	697b      	ldr	r3, [r7, #20]
 80156ec:	005b      	lsls	r3, r3, #1
 80156ee:	687a      	ldr	r2, [r7, #4]
 80156f0:	4413      	add	r3, r2
 80156f2:	881b      	ldrh	r3, [r3, #0]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d001      	beq.n	80156fc <cmp_lfn+0xd0>
 80156f8:	2300      	movs	r3, #0
 80156fa:	e000      	b.n	80156fe <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80156fc:	2301      	movs	r3, #1
}
 80156fe:	4618      	mov	r0, r3
 8015700:	371c      	adds	r7, #28
 8015702:	46bd      	mov	sp, r7
 8015704:	bd90      	pop	{r4, r7, pc}
 8015706:	bf00      	nop
 8015708:	080236d4 	.word	0x080236d4

0801570c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801570c:	b580      	push	{r7, lr}
 801570e:	b086      	sub	sp, #24
 8015710:	af00      	add	r7, sp, #0
 8015712:	6078      	str	r0, [r7, #4]
 8015714:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8015716:	683b      	ldr	r3, [r7, #0]
 8015718:	331a      	adds	r3, #26
 801571a:	4618      	mov	r0, r3
 801571c:	f7fe ff10 	bl	8014540 <ld_word>
 8015720:	4603      	mov	r3, r0
 8015722:	2b00      	cmp	r3, #0
 8015724:	d001      	beq.n	801572a <pick_lfn+0x1e>
 8015726:	2300      	movs	r3, #0
 8015728:	e04d      	b.n	80157c6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801572a:	683b      	ldr	r3, [r7, #0]
 801572c:	781b      	ldrb	r3, [r3, #0]
 801572e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015732:	1e5a      	subs	r2, r3, #1
 8015734:	4613      	mov	r3, r2
 8015736:	005b      	lsls	r3, r3, #1
 8015738:	4413      	add	r3, r2
 801573a:	009b      	lsls	r3, r3, #2
 801573c:	4413      	add	r3, r2
 801573e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015740:	2301      	movs	r3, #1
 8015742:	81fb      	strh	r3, [r7, #14]
 8015744:	2300      	movs	r3, #0
 8015746:	613b      	str	r3, [r7, #16]
 8015748:	e028      	b.n	801579c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801574a:	4a21      	ldr	r2, [pc, #132]	; (80157d0 <pick_lfn+0xc4>)
 801574c:	693b      	ldr	r3, [r7, #16]
 801574e:	4413      	add	r3, r2
 8015750:	781b      	ldrb	r3, [r3, #0]
 8015752:	461a      	mov	r2, r3
 8015754:	683b      	ldr	r3, [r7, #0]
 8015756:	4413      	add	r3, r2
 8015758:	4618      	mov	r0, r3
 801575a:	f7fe fef1 	bl	8014540 <ld_word>
 801575e:	4603      	mov	r3, r0
 8015760:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8015762:	89fb      	ldrh	r3, [r7, #14]
 8015764:	2b00      	cmp	r3, #0
 8015766:	d00f      	beq.n	8015788 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8015768:	697b      	ldr	r3, [r7, #20]
 801576a:	2b31      	cmp	r3, #49	; 0x31
 801576c:	d901      	bls.n	8015772 <pick_lfn+0x66>
 801576e:	2300      	movs	r3, #0
 8015770:	e029      	b.n	80157c6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8015772:	89bb      	ldrh	r3, [r7, #12]
 8015774:	81fb      	strh	r3, [r7, #14]
 8015776:	697b      	ldr	r3, [r7, #20]
 8015778:	1c5a      	adds	r2, r3, #1
 801577a:	617a      	str	r2, [r7, #20]
 801577c:	005b      	lsls	r3, r3, #1
 801577e:	687a      	ldr	r2, [r7, #4]
 8015780:	4413      	add	r3, r2
 8015782:	89fa      	ldrh	r2, [r7, #14]
 8015784:	801a      	strh	r2, [r3, #0]
 8015786:	e006      	b.n	8015796 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015788:	89bb      	ldrh	r3, [r7, #12]
 801578a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801578e:	4293      	cmp	r3, r2
 8015790:	d001      	beq.n	8015796 <pick_lfn+0x8a>
 8015792:	2300      	movs	r3, #0
 8015794:	e017      	b.n	80157c6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015796:	693b      	ldr	r3, [r7, #16]
 8015798:	3301      	adds	r3, #1
 801579a:	613b      	str	r3, [r7, #16]
 801579c:	693b      	ldr	r3, [r7, #16]
 801579e:	2b0c      	cmp	r3, #12
 80157a0:	d9d3      	bls.n	801574a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80157a2:	683b      	ldr	r3, [r7, #0]
 80157a4:	781b      	ldrb	r3, [r3, #0]
 80157a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d00a      	beq.n	80157c4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80157ae:	697b      	ldr	r3, [r7, #20]
 80157b0:	2b31      	cmp	r3, #49	; 0x31
 80157b2:	d901      	bls.n	80157b8 <pick_lfn+0xac>
 80157b4:	2300      	movs	r3, #0
 80157b6:	e006      	b.n	80157c6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80157b8:	697b      	ldr	r3, [r7, #20]
 80157ba:	005b      	lsls	r3, r3, #1
 80157bc:	687a      	ldr	r2, [r7, #4]
 80157be:	4413      	add	r3, r2
 80157c0:	2200      	movs	r2, #0
 80157c2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80157c4:	2301      	movs	r3, #1
}
 80157c6:	4618      	mov	r0, r3
 80157c8:	3718      	adds	r7, #24
 80157ca:	46bd      	mov	sp, r7
 80157cc:	bd80      	pop	{r7, pc}
 80157ce:	bf00      	nop
 80157d0:	080236d4 	.word	0x080236d4

080157d4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80157d4:	b580      	push	{r7, lr}
 80157d6:	b088      	sub	sp, #32
 80157d8:	af00      	add	r7, sp, #0
 80157da:	60f8      	str	r0, [r7, #12]
 80157dc:	60b9      	str	r1, [r7, #8]
 80157de:	4611      	mov	r1, r2
 80157e0:	461a      	mov	r2, r3
 80157e2:	460b      	mov	r3, r1
 80157e4:	71fb      	strb	r3, [r7, #7]
 80157e6:	4613      	mov	r3, r2
 80157e8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80157ea:	68bb      	ldr	r3, [r7, #8]
 80157ec:	330d      	adds	r3, #13
 80157ee:	79ba      	ldrb	r2, [r7, #6]
 80157f0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80157f2:	68bb      	ldr	r3, [r7, #8]
 80157f4:	330b      	adds	r3, #11
 80157f6:	220f      	movs	r2, #15
 80157f8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80157fa:	68bb      	ldr	r3, [r7, #8]
 80157fc:	330c      	adds	r3, #12
 80157fe:	2200      	movs	r2, #0
 8015800:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8015802:	68bb      	ldr	r3, [r7, #8]
 8015804:	331a      	adds	r3, #26
 8015806:	2100      	movs	r1, #0
 8015808:	4618      	mov	r0, r3
 801580a:	f7fe fed4 	bl	80145b6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801580e:	79fb      	ldrb	r3, [r7, #7]
 8015810:	1e5a      	subs	r2, r3, #1
 8015812:	4613      	mov	r3, r2
 8015814:	005b      	lsls	r3, r3, #1
 8015816:	4413      	add	r3, r2
 8015818:	009b      	lsls	r3, r3, #2
 801581a:	4413      	add	r3, r2
 801581c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801581e:	2300      	movs	r3, #0
 8015820:	82fb      	strh	r3, [r7, #22]
 8015822:	2300      	movs	r3, #0
 8015824:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8015826:	8afb      	ldrh	r3, [r7, #22]
 8015828:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801582c:	4293      	cmp	r3, r2
 801582e:	d007      	beq.n	8015840 <put_lfn+0x6c>
 8015830:	69fb      	ldr	r3, [r7, #28]
 8015832:	1c5a      	adds	r2, r3, #1
 8015834:	61fa      	str	r2, [r7, #28]
 8015836:	005b      	lsls	r3, r3, #1
 8015838:	68fa      	ldr	r2, [r7, #12]
 801583a:	4413      	add	r3, r2
 801583c:	881b      	ldrh	r3, [r3, #0]
 801583e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8015840:	4a17      	ldr	r2, [pc, #92]	; (80158a0 <put_lfn+0xcc>)
 8015842:	69bb      	ldr	r3, [r7, #24]
 8015844:	4413      	add	r3, r2
 8015846:	781b      	ldrb	r3, [r3, #0]
 8015848:	461a      	mov	r2, r3
 801584a:	68bb      	ldr	r3, [r7, #8]
 801584c:	4413      	add	r3, r2
 801584e:	8afa      	ldrh	r2, [r7, #22]
 8015850:	4611      	mov	r1, r2
 8015852:	4618      	mov	r0, r3
 8015854:	f7fe feaf 	bl	80145b6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015858:	8afb      	ldrh	r3, [r7, #22]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d102      	bne.n	8015864 <put_lfn+0x90>
 801585e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015862:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8015864:	69bb      	ldr	r3, [r7, #24]
 8015866:	3301      	adds	r3, #1
 8015868:	61bb      	str	r3, [r7, #24]
 801586a:	69bb      	ldr	r3, [r7, #24]
 801586c:	2b0c      	cmp	r3, #12
 801586e:	d9da      	bls.n	8015826 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8015870:	8afb      	ldrh	r3, [r7, #22]
 8015872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015876:	4293      	cmp	r3, r2
 8015878:	d006      	beq.n	8015888 <put_lfn+0xb4>
 801587a:	69fb      	ldr	r3, [r7, #28]
 801587c:	005b      	lsls	r3, r3, #1
 801587e:	68fa      	ldr	r2, [r7, #12]
 8015880:	4413      	add	r3, r2
 8015882:	881b      	ldrh	r3, [r3, #0]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d103      	bne.n	8015890 <put_lfn+0xbc>
 8015888:	79fb      	ldrb	r3, [r7, #7]
 801588a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801588e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8015890:	68bb      	ldr	r3, [r7, #8]
 8015892:	79fa      	ldrb	r2, [r7, #7]
 8015894:	701a      	strb	r2, [r3, #0]
}
 8015896:	bf00      	nop
 8015898:	3720      	adds	r7, #32
 801589a:	46bd      	mov	sp, r7
 801589c:	bd80      	pop	{r7, pc}
 801589e:	bf00      	nop
 80158a0:	080236d4 	.word	0x080236d4

080158a4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b08c      	sub	sp, #48	; 0x30
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	60f8      	str	r0, [r7, #12]
 80158ac:	60b9      	str	r1, [r7, #8]
 80158ae:	607a      	str	r2, [r7, #4]
 80158b0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80158b2:	220b      	movs	r2, #11
 80158b4:	68b9      	ldr	r1, [r7, #8]
 80158b6:	68f8      	ldr	r0, [r7, #12]
 80158b8:	f7fe fec4 	bl	8014644 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80158bc:	683b      	ldr	r3, [r7, #0]
 80158be:	2b05      	cmp	r3, #5
 80158c0:	d92b      	bls.n	801591a <gen_numname+0x76>
		sr = seq;
 80158c2:	683b      	ldr	r3, [r7, #0]
 80158c4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80158c6:	e022      	b.n	801590e <gen_numname+0x6a>
			wc = *lfn++;
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	1c9a      	adds	r2, r3, #2
 80158cc:	607a      	str	r2, [r7, #4]
 80158ce:	881b      	ldrh	r3, [r3, #0]
 80158d0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80158d2:	2300      	movs	r3, #0
 80158d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80158d6:	e017      	b.n	8015908 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80158d8:	69fb      	ldr	r3, [r7, #28]
 80158da:	005a      	lsls	r2, r3, #1
 80158dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80158de:	f003 0301 	and.w	r3, r3, #1
 80158e2:	4413      	add	r3, r2
 80158e4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80158e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80158e8:	085b      	lsrs	r3, r3, #1
 80158ea:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80158ec:	69fb      	ldr	r3, [r7, #28]
 80158ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d005      	beq.n	8015902 <gen_numname+0x5e>
 80158f6:	69fb      	ldr	r3, [r7, #28]
 80158f8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80158fc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8015900:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8015902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015904:	3301      	adds	r3, #1
 8015906:	62bb      	str	r3, [r7, #40]	; 0x28
 8015908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801590a:	2b0f      	cmp	r3, #15
 801590c:	d9e4      	bls.n	80158d8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	881b      	ldrh	r3, [r3, #0]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d1d8      	bne.n	80158c8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8015916:	69fb      	ldr	r3, [r7, #28]
 8015918:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801591a:	2307      	movs	r3, #7
 801591c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801591e:	683b      	ldr	r3, [r7, #0]
 8015920:	b2db      	uxtb	r3, r3
 8015922:	f003 030f 	and.w	r3, r3, #15
 8015926:	b2db      	uxtb	r3, r3
 8015928:	3330      	adds	r3, #48	; 0x30
 801592a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801592e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015932:	2b39      	cmp	r3, #57	; 0x39
 8015934:	d904      	bls.n	8015940 <gen_numname+0x9c>
 8015936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801593a:	3307      	adds	r3, #7
 801593c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8015940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015942:	1e5a      	subs	r2, r3, #1
 8015944:	62ba      	str	r2, [r7, #40]	; 0x28
 8015946:	3330      	adds	r3, #48	; 0x30
 8015948:	443b      	add	r3, r7
 801594a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801594e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8015952:	683b      	ldr	r3, [r7, #0]
 8015954:	091b      	lsrs	r3, r3, #4
 8015956:	603b      	str	r3, [r7, #0]
	} while (seq);
 8015958:	683b      	ldr	r3, [r7, #0]
 801595a:	2b00      	cmp	r3, #0
 801595c:	d1df      	bne.n	801591e <gen_numname+0x7a>
	ns[i] = '~';
 801595e:	f107 0214 	add.w	r2, r7, #20
 8015962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015964:	4413      	add	r3, r2
 8015966:	227e      	movs	r2, #126	; 0x7e
 8015968:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801596a:	2300      	movs	r3, #0
 801596c:	627b      	str	r3, [r7, #36]	; 0x24
 801596e:	e002      	b.n	8015976 <gen_numname+0xd2>
 8015970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015972:	3301      	adds	r3, #1
 8015974:	627b      	str	r3, [r7, #36]	; 0x24
 8015976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801597a:	429a      	cmp	r2, r3
 801597c:	d205      	bcs.n	801598a <gen_numname+0xe6>
 801597e:	68fa      	ldr	r2, [r7, #12]
 8015980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015982:	4413      	add	r3, r2
 8015984:	781b      	ldrb	r3, [r3, #0]
 8015986:	2b20      	cmp	r3, #32
 8015988:	d1f2      	bne.n	8015970 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801598a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801598c:	2b07      	cmp	r3, #7
 801598e:	d807      	bhi.n	80159a0 <gen_numname+0xfc>
 8015990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015992:	1c5a      	adds	r2, r3, #1
 8015994:	62ba      	str	r2, [r7, #40]	; 0x28
 8015996:	3330      	adds	r3, #48	; 0x30
 8015998:	443b      	add	r3, r7
 801599a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801599e:	e000      	b.n	80159a2 <gen_numname+0xfe>
 80159a0:	2120      	movs	r1, #32
 80159a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159a4:	1c5a      	adds	r2, r3, #1
 80159a6:	627a      	str	r2, [r7, #36]	; 0x24
 80159a8:	68fa      	ldr	r2, [r7, #12]
 80159aa:	4413      	add	r3, r2
 80159ac:	460a      	mov	r2, r1
 80159ae:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80159b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159b2:	2b07      	cmp	r3, #7
 80159b4:	d9e9      	bls.n	801598a <gen_numname+0xe6>
}
 80159b6:	bf00      	nop
 80159b8:	bf00      	nop
 80159ba:	3730      	adds	r7, #48	; 0x30
 80159bc:	46bd      	mov	sp, r7
 80159be:	bd80      	pop	{r7, pc}

080159c0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80159c0:	b480      	push	{r7}
 80159c2:	b085      	sub	sp, #20
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80159c8:	2300      	movs	r3, #0
 80159ca:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80159cc:	230b      	movs	r3, #11
 80159ce:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80159d0:	7bfb      	ldrb	r3, [r7, #15]
 80159d2:	b2da      	uxtb	r2, r3
 80159d4:	0852      	lsrs	r2, r2, #1
 80159d6:	01db      	lsls	r3, r3, #7
 80159d8:	4313      	orrs	r3, r2
 80159da:	b2da      	uxtb	r2, r3
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	1c59      	adds	r1, r3, #1
 80159e0:	6079      	str	r1, [r7, #4]
 80159e2:	781b      	ldrb	r3, [r3, #0]
 80159e4:	4413      	add	r3, r2
 80159e6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80159e8:	68bb      	ldr	r3, [r7, #8]
 80159ea:	3b01      	subs	r3, #1
 80159ec:	60bb      	str	r3, [r7, #8]
 80159ee:	68bb      	ldr	r3, [r7, #8]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d1ed      	bne.n	80159d0 <sum_sfn+0x10>
	return sum;
 80159f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80159f6:	4618      	mov	r0, r3
 80159f8:	3714      	adds	r7, #20
 80159fa:	46bd      	mov	sp, r7
 80159fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a00:	4770      	bx	lr

08015a02 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8015a02:	b580      	push	{r7, lr}
 8015a04:	b086      	sub	sp, #24
 8015a06:	af00      	add	r7, sp, #0
 8015a08:	6078      	str	r0, [r7, #4]
 8015a0a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8015a0c:	2304      	movs	r3, #4
 8015a0e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8015a16:	23ff      	movs	r3, #255	; 0xff
 8015a18:	757b      	strb	r3, [r7, #21]
 8015a1a:	23ff      	movs	r3, #255	; 0xff
 8015a1c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8015a1e:	e081      	b.n	8015b24 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	69db      	ldr	r3, [r3, #28]
 8015a24:	4619      	mov	r1, r3
 8015a26:	6938      	ldr	r0, [r7, #16]
 8015a28:	f7ff f83a 	bl	8014aa0 <move_window>
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015a30:	7dfb      	ldrb	r3, [r7, #23]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d17c      	bne.n	8015b30 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	6a1b      	ldr	r3, [r3, #32]
 8015a3a:	781b      	ldrb	r3, [r3, #0]
 8015a3c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8015a3e:	7dbb      	ldrb	r3, [r7, #22]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d102      	bne.n	8015a4a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8015a44:	2304      	movs	r3, #4
 8015a46:	75fb      	strb	r3, [r7, #23]
 8015a48:	e077      	b.n	8015b3a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	6a1b      	ldr	r3, [r3, #32]
 8015a4e:	330b      	adds	r3, #11
 8015a50:	781b      	ldrb	r3, [r3, #0]
 8015a52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015a56:	73fb      	strb	r3, [r7, #15]
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	7bfa      	ldrb	r2, [r7, #15]
 8015a5c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8015a5e:	7dbb      	ldrb	r3, [r7, #22]
 8015a60:	2be5      	cmp	r3, #229	; 0xe5
 8015a62:	d00e      	beq.n	8015a82 <dir_read+0x80>
 8015a64:	7dbb      	ldrb	r3, [r7, #22]
 8015a66:	2b2e      	cmp	r3, #46	; 0x2e
 8015a68:	d00b      	beq.n	8015a82 <dir_read+0x80>
 8015a6a:	7bfb      	ldrb	r3, [r7, #15]
 8015a6c:	f023 0320 	bic.w	r3, r3, #32
 8015a70:	2b08      	cmp	r3, #8
 8015a72:	bf0c      	ite	eq
 8015a74:	2301      	moveq	r3, #1
 8015a76:	2300      	movne	r3, #0
 8015a78:	b2db      	uxtb	r3, r3
 8015a7a:	461a      	mov	r2, r3
 8015a7c:	683b      	ldr	r3, [r7, #0]
 8015a7e:	4293      	cmp	r3, r2
 8015a80:	d002      	beq.n	8015a88 <dir_read+0x86>
				ord = 0xFF;
 8015a82:	23ff      	movs	r3, #255	; 0xff
 8015a84:	757b      	strb	r3, [r7, #21]
 8015a86:	e044      	b.n	8015b12 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8015a88:	7bfb      	ldrb	r3, [r7, #15]
 8015a8a:	2b0f      	cmp	r3, #15
 8015a8c:	d12f      	bne.n	8015aee <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8015a8e:	7dbb      	ldrb	r3, [r7, #22]
 8015a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d00d      	beq.n	8015ab4 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	6a1b      	ldr	r3, [r3, #32]
 8015a9c:	7b5b      	ldrb	r3, [r3, #13]
 8015a9e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8015aa0:	7dbb      	ldrb	r3, [r7, #22]
 8015aa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015aa6:	75bb      	strb	r3, [r7, #22]
 8015aa8:	7dbb      	ldrb	r3, [r7, #22]
 8015aaa:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	695a      	ldr	r2, [r3, #20]
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8015ab4:	7dba      	ldrb	r2, [r7, #22]
 8015ab6:	7d7b      	ldrb	r3, [r7, #21]
 8015ab8:	429a      	cmp	r2, r3
 8015aba:	d115      	bne.n	8015ae8 <dir_read+0xe6>
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	6a1b      	ldr	r3, [r3, #32]
 8015ac0:	330d      	adds	r3, #13
 8015ac2:	781b      	ldrb	r3, [r3, #0]
 8015ac4:	7d3a      	ldrb	r2, [r7, #20]
 8015ac6:	429a      	cmp	r2, r3
 8015ac8:	d10e      	bne.n	8015ae8 <dir_read+0xe6>
 8015aca:	693b      	ldr	r3, [r7, #16]
 8015acc:	691a      	ldr	r2, [r3, #16]
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	6a1b      	ldr	r3, [r3, #32]
 8015ad2:	4619      	mov	r1, r3
 8015ad4:	4610      	mov	r0, r2
 8015ad6:	f7ff fe19 	bl	801570c <pick_lfn>
 8015ada:	4603      	mov	r3, r0
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d003      	beq.n	8015ae8 <dir_read+0xe6>
 8015ae0:	7d7b      	ldrb	r3, [r7, #21]
 8015ae2:	3b01      	subs	r3, #1
 8015ae4:	b2db      	uxtb	r3, r3
 8015ae6:	e000      	b.n	8015aea <dir_read+0xe8>
 8015ae8:	23ff      	movs	r3, #255	; 0xff
 8015aea:	757b      	strb	r3, [r7, #21]
 8015aec:	e011      	b.n	8015b12 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8015aee:	7d7b      	ldrb	r3, [r7, #21]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d109      	bne.n	8015b08 <dir_read+0x106>
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	6a1b      	ldr	r3, [r3, #32]
 8015af8:	4618      	mov	r0, r3
 8015afa:	f7ff ff61 	bl	80159c0 <sum_sfn>
 8015afe:	4603      	mov	r3, r0
 8015b00:	461a      	mov	r2, r3
 8015b02:	7d3b      	ldrb	r3, [r7, #20]
 8015b04:	4293      	cmp	r3, r2
 8015b06:	d015      	beq.n	8015b34 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015b0e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8015b10:	e010      	b.n	8015b34 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8015b12:	2100      	movs	r1, #0
 8015b14:	6878      	ldr	r0, [r7, #4]
 8015b16:	f7ff fc2c 	bl	8015372 <dir_next>
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015b1e:	7dfb      	ldrb	r3, [r7, #23]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d109      	bne.n	8015b38 <dir_read+0x136>
	while (dp->sect) {
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	69db      	ldr	r3, [r3, #28]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	f47f af79 	bne.w	8015a20 <dir_read+0x1e>
 8015b2e:	e004      	b.n	8015b3a <dir_read+0x138>
		if (res != FR_OK) break;
 8015b30:	bf00      	nop
 8015b32:	e002      	b.n	8015b3a <dir_read+0x138>
					break;
 8015b34:	bf00      	nop
 8015b36:	e000      	b.n	8015b3a <dir_read+0x138>
		if (res != FR_OK) break;
 8015b38:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8015b3a:	7dfb      	ldrb	r3, [r7, #23]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d002      	beq.n	8015b46 <dir_read+0x144>
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	2200      	movs	r2, #0
 8015b44:	61da      	str	r2, [r3, #28]
	return res;
 8015b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8015b48:	4618      	mov	r0, r3
 8015b4a:	3718      	adds	r7, #24
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	bd80      	pop	{r7, pc}

08015b50 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b086      	sub	sp, #24
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015b5e:	2100      	movs	r1, #0
 8015b60:	6878      	ldr	r0, [r7, #4]
 8015b62:	f7ff fb7d 	bl	8015260 <dir_sdi>
 8015b66:	4603      	mov	r3, r0
 8015b68:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8015b6a:	7dfb      	ldrb	r3, [r7, #23]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d001      	beq.n	8015b74 <dir_find+0x24>
 8015b70:	7dfb      	ldrb	r3, [r7, #23]
 8015b72:	e0a9      	b.n	8015cc8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015b74:	23ff      	movs	r3, #255	; 0xff
 8015b76:	753b      	strb	r3, [r7, #20]
 8015b78:	7d3b      	ldrb	r3, [r7, #20]
 8015b7a:	757b      	strb	r3, [r7, #21]
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015b82:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	69db      	ldr	r3, [r3, #28]
 8015b88:	4619      	mov	r1, r3
 8015b8a:	6938      	ldr	r0, [r7, #16]
 8015b8c:	f7fe ff88 	bl	8014aa0 <move_window>
 8015b90:	4603      	mov	r3, r0
 8015b92:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015b94:	7dfb      	ldrb	r3, [r7, #23]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	f040 8090 	bne.w	8015cbc <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	6a1b      	ldr	r3, [r3, #32]
 8015ba0:	781b      	ldrb	r3, [r3, #0]
 8015ba2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8015ba4:	7dbb      	ldrb	r3, [r7, #22]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d102      	bne.n	8015bb0 <dir_find+0x60>
 8015baa:	2304      	movs	r3, #4
 8015bac:	75fb      	strb	r3, [r7, #23]
 8015bae:	e08a      	b.n	8015cc6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	6a1b      	ldr	r3, [r3, #32]
 8015bb4:	330b      	adds	r3, #11
 8015bb6:	781b      	ldrb	r3, [r3, #0]
 8015bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015bbc:	73fb      	strb	r3, [r7, #15]
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	7bfa      	ldrb	r2, [r7, #15]
 8015bc2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8015bc4:	7dbb      	ldrb	r3, [r7, #22]
 8015bc6:	2be5      	cmp	r3, #229	; 0xe5
 8015bc8:	d007      	beq.n	8015bda <dir_find+0x8a>
 8015bca:	7bfb      	ldrb	r3, [r7, #15]
 8015bcc:	f003 0308 	and.w	r3, r3, #8
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d009      	beq.n	8015be8 <dir_find+0x98>
 8015bd4:	7bfb      	ldrb	r3, [r7, #15]
 8015bd6:	2b0f      	cmp	r3, #15
 8015bd8:	d006      	beq.n	8015be8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015bda:	23ff      	movs	r3, #255	; 0xff
 8015bdc:	757b      	strb	r3, [r7, #21]
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015be4:	631a      	str	r2, [r3, #48]	; 0x30
 8015be6:	e05e      	b.n	8015ca6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8015be8:	7bfb      	ldrb	r3, [r7, #15]
 8015bea:	2b0f      	cmp	r3, #15
 8015bec:	d136      	bne.n	8015c5c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d154      	bne.n	8015ca6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8015bfc:	7dbb      	ldrb	r3, [r7, #22]
 8015bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d00d      	beq.n	8015c22 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	6a1b      	ldr	r3, [r3, #32]
 8015c0a:	7b5b      	ldrb	r3, [r3, #13]
 8015c0c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8015c0e:	7dbb      	ldrb	r3, [r7, #22]
 8015c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015c14:	75bb      	strb	r3, [r7, #22]
 8015c16:	7dbb      	ldrb	r3, [r7, #22]
 8015c18:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	695a      	ldr	r2, [r3, #20]
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8015c22:	7dba      	ldrb	r2, [r7, #22]
 8015c24:	7d7b      	ldrb	r3, [r7, #21]
 8015c26:	429a      	cmp	r2, r3
 8015c28:	d115      	bne.n	8015c56 <dir_find+0x106>
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	6a1b      	ldr	r3, [r3, #32]
 8015c2e:	330d      	adds	r3, #13
 8015c30:	781b      	ldrb	r3, [r3, #0]
 8015c32:	7d3a      	ldrb	r2, [r7, #20]
 8015c34:	429a      	cmp	r2, r3
 8015c36:	d10e      	bne.n	8015c56 <dir_find+0x106>
 8015c38:	693b      	ldr	r3, [r7, #16]
 8015c3a:	691a      	ldr	r2, [r3, #16]
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	6a1b      	ldr	r3, [r3, #32]
 8015c40:	4619      	mov	r1, r3
 8015c42:	4610      	mov	r0, r2
 8015c44:	f7ff fcf2 	bl	801562c <cmp_lfn>
 8015c48:	4603      	mov	r3, r0
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d003      	beq.n	8015c56 <dir_find+0x106>
 8015c4e:	7d7b      	ldrb	r3, [r7, #21]
 8015c50:	3b01      	subs	r3, #1
 8015c52:	b2db      	uxtb	r3, r3
 8015c54:	e000      	b.n	8015c58 <dir_find+0x108>
 8015c56:	23ff      	movs	r3, #255	; 0xff
 8015c58:	757b      	strb	r3, [r7, #21]
 8015c5a:	e024      	b.n	8015ca6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8015c5c:	7d7b      	ldrb	r3, [r7, #21]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d109      	bne.n	8015c76 <dir_find+0x126>
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	6a1b      	ldr	r3, [r3, #32]
 8015c66:	4618      	mov	r0, r3
 8015c68:	f7ff feaa 	bl	80159c0 <sum_sfn>
 8015c6c:	4603      	mov	r3, r0
 8015c6e:	461a      	mov	r2, r3
 8015c70:	7d3b      	ldrb	r3, [r7, #20]
 8015c72:	4293      	cmp	r3, r2
 8015c74:	d024      	beq.n	8015cc0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015c7c:	f003 0301 	and.w	r3, r3, #1
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d10a      	bne.n	8015c9a <dir_find+0x14a>
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	6a18      	ldr	r0, [r3, #32]
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	3324      	adds	r3, #36	; 0x24
 8015c8c:	220b      	movs	r2, #11
 8015c8e:	4619      	mov	r1, r3
 8015c90:	f7fe fd14 	bl	80146bc <mem_cmp>
 8015c94:	4603      	mov	r3, r0
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d014      	beq.n	8015cc4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015c9a:	23ff      	movs	r3, #255	; 0xff
 8015c9c:	757b      	strb	r3, [r7, #21]
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015ca4:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8015ca6:	2100      	movs	r1, #0
 8015ca8:	6878      	ldr	r0, [r7, #4]
 8015caa:	f7ff fb62 	bl	8015372 <dir_next>
 8015cae:	4603      	mov	r3, r0
 8015cb0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8015cb2:	7dfb      	ldrb	r3, [r7, #23]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	f43f af65 	beq.w	8015b84 <dir_find+0x34>
 8015cba:	e004      	b.n	8015cc6 <dir_find+0x176>
		if (res != FR_OK) break;
 8015cbc:	bf00      	nop
 8015cbe:	e002      	b.n	8015cc6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8015cc0:	bf00      	nop
 8015cc2:	e000      	b.n	8015cc6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015cc4:	bf00      	nop

	return res;
 8015cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8015cc8:	4618      	mov	r0, r3
 8015cca:	3718      	adds	r7, #24
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	bd80      	pop	{r7, pc}

08015cd0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b08c      	sub	sp, #48	; 0x30
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015ce4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d001      	beq.n	8015cf0 <dir_register+0x20>
 8015cec:	2306      	movs	r3, #6
 8015cee:	e0e0      	b.n	8015eb2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8015cf4:	e002      	b.n	8015cfc <dir_register+0x2c>
 8015cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cf8:	3301      	adds	r3, #1
 8015cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8015cfc:	69fb      	ldr	r3, [r7, #28]
 8015cfe:	691a      	ldr	r2, [r3, #16]
 8015d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d02:	005b      	lsls	r3, r3, #1
 8015d04:	4413      	add	r3, r2
 8015d06:	881b      	ldrh	r3, [r3, #0]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d1f4      	bne.n	8015cf6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8015d12:	f107 030c 	add.w	r3, r7, #12
 8015d16:	220c      	movs	r2, #12
 8015d18:	4618      	mov	r0, r3
 8015d1a:	f7fe fc93 	bl	8014644 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8015d1e:	7dfb      	ldrb	r3, [r7, #23]
 8015d20:	f003 0301 	and.w	r3, r3, #1
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d032      	beq.n	8015d8e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	2240      	movs	r2, #64	; 0x40
 8015d2c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8015d30:	2301      	movs	r3, #1
 8015d32:	62bb      	str	r3, [r7, #40]	; 0x28
 8015d34:	e016      	b.n	8015d64 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8015d3c:	69fb      	ldr	r3, [r7, #28]
 8015d3e:	691a      	ldr	r2, [r3, #16]
 8015d40:	f107 010c 	add.w	r1, r7, #12
 8015d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d46:	f7ff fdad 	bl	80158a4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8015d4a:	6878      	ldr	r0, [r7, #4]
 8015d4c:	f7ff ff00 	bl	8015b50 <dir_find>
 8015d50:	4603      	mov	r3, r0
 8015d52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8015d56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d106      	bne.n	8015d6c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8015d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d60:	3301      	adds	r3, #1
 8015d62:	62bb      	str	r3, [r7, #40]	; 0x28
 8015d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d66:	2b63      	cmp	r3, #99	; 0x63
 8015d68:	d9e5      	bls.n	8015d36 <dir_register+0x66>
 8015d6a:	e000      	b.n	8015d6e <dir_register+0x9e>
			if (res != FR_OK) break;
 8015d6c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8015d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d70:	2b64      	cmp	r3, #100	; 0x64
 8015d72:	d101      	bne.n	8015d78 <dir_register+0xa8>
 8015d74:	2307      	movs	r3, #7
 8015d76:	e09c      	b.n	8015eb2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8015d78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015d7c:	2b04      	cmp	r3, #4
 8015d7e:	d002      	beq.n	8015d86 <dir_register+0xb6>
 8015d80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015d84:	e095      	b.n	8015eb2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8015d86:	7dfa      	ldrb	r2, [r7, #23]
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8015d8e:	7dfb      	ldrb	r3, [r7, #23]
 8015d90:	f003 0302 	and.w	r3, r3, #2
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d007      	beq.n	8015da8 <dir_register+0xd8>
 8015d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d9a:	330c      	adds	r3, #12
 8015d9c:	4a47      	ldr	r2, [pc, #284]	; (8015ebc <dir_register+0x1ec>)
 8015d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8015da2:	089b      	lsrs	r3, r3, #2
 8015da4:	3301      	adds	r3, #1
 8015da6:	e000      	b.n	8015daa <dir_register+0xda>
 8015da8:	2301      	movs	r3, #1
 8015daa:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8015dac:	6a39      	ldr	r1, [r7, #32]
 8015dae:	6878      	ldr	r0, [r7, #4]
 8015db0:	f7ff fbb5 	bl	801551e <dir_alloc>
 8015db4:	4603      	mov	r3, r0
 8015db6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8015dba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d148      	bne.n	8015e54 <dir_register+0x184>
 8015dc2:	6a3b      	ldr	r3, [r7, #32]
 8015dc4:	3b01      	subs	r3, #1
 8015dc6:	623b      	str	r3, [r7, #32]
 8015dc8:	6a3b      	ldr	r3, [r7, #32]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d042      	beq.n	8015e54 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	695a      	ldr	r2, [r3, #20]
 8015dd2:	6a3b      	ldr	r3, [r7, #32]
 8015dd4:	015b      	lsls	r3, r3, #5
 8015dd6:	1ad3      	subs	r3, r2, r3
 8015dd8:	4619      	mov	r1, r3
 8015dda:	6878      	ldr	r0, [r7, #4]
 8015ddc:	f7ff fa40 	bl	8015260 <dir_sdi>
 8015de0:	4603      	mov	r3, r0
 8015de2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8015de6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d132      	bne.n	8015e54 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	3324      	adds	r3, #36	; 0x24
 8015df2:	4618      	mov	r0, r3
 8015df4:	f7ff fde4 	bl	80159c0 <sum_sfn>
 8015df8:	4603      	mov	r3, r0
 8015dfa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	69db      	ldr	r3, [r3, #28]
 8015e00:	4619      	mov	r1, r3
 8015e02:	69f8      	ldr	r0, [r7, #28]
 8015e04:	f7fe fe4c 	bl	8014aa0 <move_window>
 8015e08:	4603      	mov	r3, r0
 8015e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8015e0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d11d      	bne.n	8015e52 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8015e16:	69fb      	ldr	r3, [r7, #28]
 8015e18:	6918      	ldr	r0, [r3, #16]
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	6a19      	ldr	r1, [r3, #32]
 8015e1e:	6a3b      	ldr	r3, [r7, #32]
 8015e20:	b2da      	uxtb	r2, r3
 8015e22:	7efb      	ldrb	r3, [r7, #27]
 8015e24:	f7ff fcd6 	bl	80157d4 <put_lfn>
				fs->wflag = 1;
 8015e28:	69fb      	ldr	r3, [r7, #28]
 8015e2a:	2201      	movs	r2, #1
 8015e2c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8015e2e:	2100      	movs	r1, #0
 8015e30:	6878      	ldr	r0, [r7, #4]
 8015e32:	f7ff fa9e 	bl	8015372 <dir_next>
 8015e36:	4603      	mov	r3, r0
 8015e38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8015e3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d107      	bne.n	8015e54 <dir_register+0x184>
 8015e44:	6a3b      	ldr	r3, [r7, #32]
 8015e46:	3b01      	subs	r3, #1
 8015e48:	623b      	str	r3, [r7, #32]
 8015e4a:	6a3b      	ldr	r3, [r7, #32]
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d1d5      	bne.n	8015dfc <dir_register+0x12c>
 8015e50:	e000      	b.n	8015e54 <dir_register+0x184>
				if (res != FR_OK) break;
 8015e52:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8015e54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d128      	bne.n	8015eae <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	69db      	ldr	r3, [r3, #28]
 8015e60:	4619      	mov	r1, r3
 8015e62:	69f8      	ldr	r0, [r7, #28]
 8015e64:	f7fe fe1c 	bl	8014aa0 <move_window>
 8015e68:	4603      	mov	r3, r0
 8015e6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8015e6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d11b      	bne.n	8015eae <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	6a1b      	ldr	r3, [r3, #32]
 8015e7a:	2220      	movs	r2, #32
 8015e7c:	2100      	movs	r1, #0
 8015e7e:	4618      	mov	r0, r3
 8015e80:	f7fe fc01 	bl	8014686 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	6a18      	ldr	r0, [r3, #32]
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	3324      	adds	r3, #36	; 0x24
 8015e8c:	220b      	movs	r2, #11
 8015e8e:	4619      	mov	r1, r3
 8015e90:	f7fe fbd8 	bl	8014644 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	6a1b      	ldr	r3, [r3, #32]
 8015e9e:	330c      	adds	r3, #12
 8015ea0:	f002 0218 	and.w	r2, r2, #24
 8015ea4:	b2d2      	uxtb	r2, r2
 8015ea6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8015ea8:	69fb      	ldr	r3, [r7, #28]
 8015eaa:	2201      	movs	r2, #1
 8015eac:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8015eae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015eb2:	4618      	mov	r0, r3
 8015eb4:	3730      	adds	r7, #48	; 0x30
 8015eb6:	46bd      	mov	sp, r7
 8015eb8:	bd80      	pop	{r7, pc}
 8015eba:	bf00      	nop
 8015ebc:	4ec4ec4f 	.word	0x4ec4ec4f

08015ec0 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8015ec0:	b580      	push	{r7, lr}
 8015ec2:	b086      	sub	sp, #24
 8015ec4:	af00      	add	r7, sp, #0
 8015ec6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	695b      	ldr	r3, [r3, #20]
 8015ed2:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015edc:	d007      	beq.n	8015eee <dir_remove+0x2e>
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ee2:	4619      	mov	r1, r3
 8015ee4:	6878      	ldr	r0, [r7, #4]
 8015ee6:	f7ff f9bb 	bl	8015260 <dir_sdi>
 8015eea:	4603      	mov	r3, r0
 8015eec:	e000      	b.n	8015ef0 <dir_remove+0x30>
 8015eee:	2300      	movs	r3, #0
 8015ef0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015ef2:	7dfb      	ldrb	r3, [r7, #23]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d128      	bne.n	8015f4a <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	69db      	ldr	r3, [r3, #28]
 8015efc:	4619      	mov	r1, r3
 8015efe:	6938      	ldr	r0, [r7, #16]
 8015f00:	f7fe fdce 	bl	8014aa0 <move_window>
 8015f04:	4603      	mov	r3, r0
 8015f06:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015f08:	7dfb      	ldrb	r3, [r7, #23]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d115      	bne.n	8015f3a <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	6a1b      	ldr	r3, [r3, #32]
 8015f12:	22e5      	movs	r2, #229	; 0xe5
 8015f14:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8015f16:	693b      	ldr	r3, [r7, #16]
 8015f18:	2201      	movs	r2, #1
 8015f1a:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	695b      	ldr	r3, [r3, #20]
 8015f20:	68fa      	ldr	r2, [r7, #12]
 8015f22:	429a      	cmp	r2, r3
 8015f24:	d90b      	bls.n	8015f3e <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 8015f26:	2100      	movs	r1, #0
 8015f28:	6878      	ldr	r0, [r7, #4]
 8015f2a:	f7ff fa22 	bl	8015372 <dir_next>
 8015f2e:	4603      	mov	r3, r0
 8015f30:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8015f32:	7dfb      	ldrb	r3, [r7, #23]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d0df      	beq.n	8015ef8 <dir_remove+0x38>
 8015f38:	e002      	b.n	8015f40 <dir_remove+0x80>
			if (res != FR_OK) break;
 8015f3a:	bf00      	nop
 8015f3c:	e000      	b.n	8015f40 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8015f3e:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8015f40:	7dfb      	ldrb	r3, [r7, #23]
 8015f42:	2b04      	cmp	r3, #4
 8015f44:	d101      	bne.n	8015f4a <dir_remove+0x8a>
 8015f46:	2302      	movs	r3, #2
 8015f48:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8015f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	3718      	adds	r7, #24
 8015f50:	46bd      	mov	sp, r7
 8015f52:	bd80      	pop	{r7, pc}

08015f54 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8015f54:	b580      	push	{r7, lr}
 8015f56:	b088      	sub	sp, #32
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]
 8015f5c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8015f64:	683b      	ldr	r3, [r7, #0]
 8015f66:	2200      	movs	r2, #0
 8015f68:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	69db      	ldr	r3, [r3, #28]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	f000 80c9 	beq.w	8016106 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015f7c:	d032      	beq.n	8015fe4 <get_fileinfo+0x90>
			i = j = 0;
 8015f7e:	2300      	movs	r3, #0
 8015f80:	61bb      	str	r3, [r7, #24]
 8015f82:	69bb      	ldr	r3, [r7, #24]
 8015f84:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8015f86:	e01b      	b.n	8015fc0 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8015f88:	89fb      	ldrh	r3, [r7, #14]
 8015f8a:	2100      	movs	r1, #0
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	f002 fb3b 	bl	8018608 <ff_convert>
 8015f92:	4603      	mov	r3, r0
 8015f94:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8015f96:	89fb      	ldrh	r3, [r7, #14]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d102      	bne.n	8015fa2 <get_fileinfo+0x4e>
 8015f9c:	2300      	movs	r3, #0
 8015f9e:	61fb      	str	r3, [r7, #28]
 8015fa0:	e01a      	b.n	8015fd8 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8015fa2:	69fb      	ldr	r3, [r7, #28]
 8015fa4:	2b31      	cmp	r3, #49	; 0x31
 8015fa6:	d902      	bls.n	8015fae <get_fileinfo+0x5a>
 8015fa8:	2300      	movs	r3, #0
 8015faa:	61fb      	str	r3, [r7, #28]
 8015fac:	e014      	b.n	8015fd8 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8015fae:	69fb      	ldr	r3, [r7, #28]
 8015fb0:	1c5a      	adds	r2, r3, #1
 8015fb2:	61fa      	str	r2, [r7, #28]
 8015fb4:	89fa      	ldrh	r2, [r7, #14]
 8015fb6:	b2d1      	uxtb	r1, r2
 8015fb8:	683a      	ldr	r2, [r7, #0]
 8015fba:	4413      	add	r3, r2
 8015fbc:	460a      	mov	r2, r1
 8015fbe:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8015fc0:	693b      	ldr	r3, [r7, #16]
 8015fc2:	691a      	ldr	r2, [r3, #16]
 8015fc4:	69bb      	ldr	r3, [r7, #24]
 8015fc6:	1c59      	adds	r1, r3, #1
 8015fc8:	61b9      	str	r1, [r7, #24]
 8015fca:	005b      	lsls	r3, r3, #1
 8015fcc:	4413      	add	r3, r2
 8015fce:	881b      	ldrh	r3, [r3, #0]
 8015fd0:	81fb      	strh	r3, [r7, #14]
 8015fd2:	89fb      	ldrh	r3, [r7, #14]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d1d7      	bne.n	8015f88 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8015fd8:	683a      	ldr	r2, [r7, #0]
 8015fda:	69fb      	ldr	r3, [r7, #28]
 8015fdc:	4413      	add	r3, r2
 8015fde:	3316      	adds	r3, #22
 8015fe0:	2200      	movs	r2, #0
 8015fe2:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	61bb      	str	r3, [r7, #24]
 8015fe8:	69bb      	ldr	r3, [r7, #24]
 8015fea:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8015fec:	683a      	ldr	r2, [r7, #0]
 8015fee:	69fb      	ldr	r3, [r7, #28]
 8015ff0:	4413      	add	r3, r2
 8015ff2:	3316      	adds	r3, #22
 8015ff4:	781b      	ldrb	r3, [r3, #0]
 8015ff6:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8015ff8:	e04c      	b.n	8016094 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	6a1a      	ldr	r2, [r3, #32]
 8015ffe:	69fb      	ldr	r3, [r7, #28]
 8016000:	1c59      	adds	r1, r3, #1
 8016002:	61f9      	str	r1, [r7, #28]
 8016004:	4413      	add	r3, r2
 8016006:	781b      	ldrb	r3, [r3, #0]
 8016008:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 801600a:	7dfb      	ldrb	r3, [r7, #23]
 801600c:	2b20      	cmp	r3, #32
 801600e:	d100      	bne.n	8016012 <get_fileinfo+0xbe>
 8016010:	e040      	b.n	8016094 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8016012:	7dfb      	ldrb	r3, [r7, #23]
 8016014:	2b05      	cmp	r3, #5
 8016016:	d101      	bne.n	801601c <get_fileinfo+0xc8>
 8016018:	23e5      	movs	r3, #229	; 0xe5
 801601a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 801601c:	69fb      	ldr	r3, [r7, #28]
 801601e:	2b09      	cmp	r3, #9
 8016020:	d10f      	bne.n	8016042 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8016022:	89bb      	ldrh	r3, [r7, #12]
 8016024:	2b00      	cmp	r3, #0
 8016026:	d105      	bne.n	8016034 <get_fileinfo+0xe0>
 8016028:	683a      	ldr	r2, [r7, #0]
 801602a:	69bb      	ldr	r3, [r7, #24]
 801602c:	4413      	add	r3, r2
 801602e:	3316      	adds	r3, #22
 8016030:	222e      	movs	r2, #46	; 0x2e
 8016032:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8016034:	69bb      	ldr	r3, [r7, #24]
 8016036:	1c5a      	adds	r2, r3, #1
 8016038:	61ba      	str	r2, [r7, #24]
 801603a:	683a      	ldr	r2, [r7, #0]
 801603c:	4413      	add	r3, r2
 801603e:	222e      	movs	r2, #46	; 0x2e
 8016040:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8016042:	683a      	ldr	r2, [r7, #0]
 8016044:	69bb      	ldr	r3, [r7, #24]
 8016046:	4413      	add	r3, r2
 8016048:	3309      	adds	r3, #9
 801604a:	7dfa      	ldrb	r2, [r7, #23]
 801604c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 801604e:	89bb      	ldrh	r3, [r7, #12]
 8016050:	2b00      	cmp	r3, #0
 8016052:	d11c      	bne.n	801608e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8016054:	7dfb      	ldrb	r3, [r7, #23]
 8016056:	2b40      	cmp	r3, #64	; 0x40
 8016058:	d913      	bls.n	8016082 <get_fileinfo+0x12e>
 801605a:	7dfb      	ldrb	r3, [r7, #23]
 801605c:	2b5a      	cmp	r3, #90	; 0x5a
 801605e:	d810      	bhi.n	8016082 <get_fileinfo+0x12e>
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	6a1b      	ldr	r3, [r3, #32]
 8016064:	330c      	adds	r3, #12
 8016066:	781b      	ldrb	r3, [r3, #0]
 8016068:	461a      	mov	r2, r3
 801606a:	69fb      	ldr	r3, [r7, #28]
 801606c:	2b08      	cmp	r3, #8
 801606e:	d901      	bls.n	8016074 <get_fileinfo+0x120>
 8016070:	2310      	movs	r3, #16
 8016072:	e000      	b.n	8016076 <get_fileinfo+0x122>
 8016074:	2308      	movs	r3, #8
 8016076:	4013      	ands	r3, r2
 8016078:	2b00      	cmp	r3, #0
 801607a:	d002      	beq.n	8016082 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 801607c:	7dfb      	ldrb	r3, [r7, #23]
 801607e:	3320      	adds	r3, #32
 8016080:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8016082:	683a      	ldr	r2, [r7, #0]
 8016084:	69bb      	ldr	r3, [r7, #24]
 8016086:	4413      	add	r3, r2
 8016088:	3316      	adds	r3, #22
 801608a:	7dfa      	ldrb	r2, [r7, #23]
 801608c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 801608e:	69bb      	ldr	r3, [r7, #24]
 8016090:	3301      	adds	r3, #1
 8016092:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8016094:	69fb      	ldr	r3, [r7, #28]
 8016096:	2b0a      	cmp	r3, #10
 8016098:	d9af      	bls.n	8015ffa <get_fileinfo+0xa6>
	}
	if (!lfv) {
 801609a:	89bb      	ldrh	r3, [r7, #12]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d10d      	bne.n	80160bc <get_fileinfo+0x168>
		fno->fname[j] = 0;
 80160a0:	683a      	ldr	r2, [r7, #0]
 80160a2:	69bb      	ldr	r3, [r7, #24]
 80160a4:	4413      	add	r3, r2
 80160a6:	3316      	adds	r3, #22
 80160a8:	2200      	movs	r2, #0
 80160aa:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	6a1b      	ldr	r3, [r3, #32]
 80160b0:	330c      	adds	r3, #12
 80160b2:	781b      	ldrb	r3, [r3, #0]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d101      	bne.n	80160bc <get_fileinfo+0x168>
 80160b8:	2300      	movs	r3, #0
 80160ba:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80160bc:	683a      	ldr	r2, [r7, #0]
 80160be:	69bb      	ldr	r3, [r7, #24]
 80160c0:	4413      	add	r3, r2
 80160c2:	3309      	adds	r3, #9
 80160c4:	2200      	movs	r2, #0
 80160c6:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	6a1b      	ldr	r3, [r3, #32]
 80160cc:	7ada      	ldrb	r2, [r3, #11]
 80160ce:	683b      	ldr	r3, [r7, #0]
 80160d0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	6a1b      	ldr	r3, [r3, #32]
 80160d6:	331c      	adds	r3, #28
 80160d8:	4618      	mov	r0, r3
 80160da:	f7fe fa49 	bl	8014570 <ld_dword>
 80160de:	4602      	mov	r2, r0
 80160e0:	683b      	ldr	r3, [r7, #0]
 80160e2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	6a1b      	ldr	r3, [r3, #32]
 80160e8:	3316      	adds	r3, #22
 80160ea:	4618      	mov	r0, r3
 80160ec:	f7fe fa40 	bl	8014570 <ld_dword>
 80160f0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80160f2:	68bb      	ldr	r3, [r7, #8]
 80160f4:	b29a      	uxth	r2, r3
 80160f6:	683b      	ldr	r3, [r7, #0]
 80160f8:	80da      	strh	r2, [r3, #6]
 80160fa:	68bb      	ldr	r3, [r7, #8]
 80160fc:	0c1b      	lsrs	r3, r3, #16
 80160fe:	b29a      	uxth	r2, r3
 8016100:	683b      	ldr	r3, [r7, #0]
 8016102:	809a      	strh	r2, [r3, #4]
 8016104:	e000      	b.n	8016108 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8016106:	bf00      	nop
}
 8016108:	3720      	adds	r7, #32
 801610a:	46bd      	mov	sp, r7
 801610c:	bd80      	pop	{r7, pc}
	...

08016110 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8016110:	b580      	push	{r7, lr}
 8016112:	b08a      	sub	sp, #40	; 0x28
 8016114:	af00      	add	r7, sp, #0
 8016116:	6078      	str	r0, [r7, #4]
 8016118:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801611a:	683b      	ldr	r3, [r7, #0]
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	613b      	str	r3, [r7, #16]
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	691b      	ldr	r3, [r3, #16]
 8016126:	60fb      	str	r3, [r7, #12]
 8016128:	2300      	movs	r3, #0
 801612a:	617b      	str	r3, [r7, #20]
 801612c:	697b      	ldr	r3, [r7, #20]
 801612e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8016130:	69bb      	ldr	r3, [r7, #24]
 8016132:	1c5a      	adds	r2, r3, #1
 8016134:	61ba      	str	r2, [r7, #24]
 8016136:	693a      	ldr	r2, [r7, #16]
 8016138:	4413      	add	r3, r2
 801613a:	781b      	ldrb	r3, [r3, #0]
 801613c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801613e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016140:	2b1f      	cmp	r3, #31
 8016142:	d940      	bls.n	80161c6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8016144:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016146:	2b2f      	cmp	r3, #47	; 0x2f
 8016148:	d006      	beq.n	8016158 <create_name+0x48>
 801614a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801614c:	2b5c      	cmp	r3, #92	; 0x5c
 801614e:	d110      	bne.n	8016172 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8016150:	e002      	b.n	8016158 <create_name+0x48>
 8016152:	69bb      	ldr	r3, [r7, #24]
 8016154:	3301      	adds	r3, #1
 8016156:	61bb      	str	r3, [r7, #24]
 8016158:	693a      	ldr	r2, [r7, #16]
 801615a:	69bb      	ldr	r3, [r7, #24]
 801615c:	4413      	add	r3, r2
 801615e:	781b      	ldrb	r3, [r3, #0]
 8016160:	2b2f      	cmp	r3, #47	; 0x2f
 8016162:	d0f6      	beq.n	8016152 <create_name+0x42>
 8016164:	693a      	ldr	r2, [r7, #16]
 8016166:	69bb      	ldr	r3, [r7, #24]
 8016168:	4413      	add	r3, r2
 801616a:	781b      	ldrb	r3, [r3, #0]
 801616c:	2b5c      	cmp	r3, #92	; 0x5c
 801616e:	d0f0      	beq.n	8016152 <create_name+0x42>
			break;
 8016170:	e02a      	b.n	80161c8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8016172:	697b      	ldr	r3, [r7, #20]
 8016174:	2b31      	cmp	r3, #49	; 0x31
 8016176:	d901      	bls.n	801617c <create_name+0x6c>
 8016178:	2306      	movs	r3, #6
 801617a:	e17d      	b.n	8016478 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801617c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801617e:	b2db      	uxtb	r3, r3
 8016180:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8016182:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016184:	2101      	movs	r1, #1
 8016186:	4618      	mov	r0, r3
 8016188:	f002 fa3e 	bl	8018608 <ff_convert>
 801618c:	4603      	mov	r3, r0
 801618e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8016190:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016192:	2b00      	cmp	r3, #0
 8016194:	d101      	bne.n	801619a <create_name+0x8a>
 8016196:	2306      	movs	r3, #6
 8016198:	e16e      	b.n	8016478 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801619a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801619c:	2b7f      	cmp	r3, #127	; 0x7f
 801619e:	d809      	bhi.n	80161b4 <create_name+0xa4>
 80161a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80161a2:	4619      	mov	r1, r3
 80161a4:	488d      	ldr	r0, [pc, #564]	; (80163dc <create_name+0x2cc>)
 80161a6:	f7fe fab0 	bl	801470a <chk_chr>
 80161aa:	4603      	mov	r3, r0
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d001      	beq.n	80161b4 <create_name+0xa4>
 80161b0:	2306      	movs	r3, #6
 80161b2:	e161      	b.n	8016478 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80161b4:	697b      	ldr	r3, [r7, #20]
 80161b6:	1c5a      	adds	r2, r3, #1
 80161b8:	617a      	str	r2, [r7, #20]
 80161ba:	005b      	lsls	r3, r3, #1
 80161bc:	68fa      	ldr	r2, [r7, #12]
 80161be:	4413      	add	r3, r2
 80161c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80161c2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80161c4:	e7b4      	b.n	8016130 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80161c6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80161c8:	693a      	ldr	r2, [r7, #16]
 80161ca:	69bb      	ldr	r3, [r7, #24]
 80161cc:	441a      	add	r2, r3
 80161ce:	683b      	ldr	r3, [r7, #0]
 80161d0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80161d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80161d4:	2b1f      	cmp	r3, #31
 80161d6:	d801      	bhi.n	80161dc <create_name+0xcc>
 80161d8:	2304      	movs	r3, #4
 80161da:	e000      	b.n	80161de <create_name+0xce>
 80161dc:	2300      	movs	r3, #0
 80161de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80161e2:	e011      	b.n	8016208 <create_name+0xf8>
		w = lfn[di - 1];
 80161e4:	697b      	ldr	r3, [r7, #20]
 80161e6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80161ea:	3b01      	subs	r3, #1
 80161ec:	005b      	lsls	r3, r3, #1
 80161ee:	68fa      	ldr	r2, [r7, #12]
 80161f0:	4413      	add	r3, r2
 80161f2:	881b      	ldrh	r3, [r3, #0]
 80161f4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80161f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80161f8:	2b20      	cmp	r3, #32
 80161fa:	d002      	beq.n	8016202 <create_name+0xf2>
 80161fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80161fe:	2b2e      	cmp	r3, #46	; 0x2e
 8016200:	d106      	bne.n	8016210 <create_name+0x100>
		di--;
 8016202:	697b      	ldr	r3, [r7, #20]
 8016204:	3b01      	subs	r3, #1
 8016206:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8016208:	697b      	ldr	r3, [r7, #20]
 801620a:	2b00      	cmp	r3, #0
 801620c:	d1ea      	bne.n	80161e4 <create_name+0xd4>
 801620e:	e000      	b.n	8016212 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8016210:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8016212:	697b      	ldr	r3, [r7, #20]
 8016214:	005b      	lsls	r3, r3, #1
 8016216:	68fa      	ldr	r2, [r7, #12]
 8016218:	4413      	add	r3, r2
 801621a:	2200      	movs	r2, #0
 801621c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801621e:	697b      	ldr	r3, [r7, #20]
 8016220:	2b00      	cmp	r3, #0
 8016222:	d101      	bne.n	8016228 <create_name+0x118>
 8016224:	2306      	movs	r3, #6
 8016226:	e127      	b.n	8016478 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	3324      	adds	r3, #36	; 0x24
 801622c:	220b      	movs	r2, #11
 801622e:	2120      	movs	r1, #32
 8016230:	4618      	mov	r0, r3
 8016232:	f7fe fa28 	bl	8014686 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8016236:	2300      	movs	r3, #0
 8016238:	61bb      	str	r3, [r7, #24]
 801623a:	e002      	b.n	8016242 <create_name+0x132>
 801623c:	69bb      	ldr	r3, [r7, #24]
 801623e:	3301      	adds	r3, #1
 8016240:	61bb      	str	r3, [r7, #24]
 8016242:	69bb      	ldr	r3, [r7, #24]
 8016244:	005b      	lsls	r3, r3, #1
 8016246:	68fa      	ldr	r2, [r7, #12]
 8016248:	4413      	add	r3, r2
 801624a:	881b      	ldrh	r3, [r3, #0]
 801624c:	2b20      	cmp	r3, #32
 801624e:	d0f5      	beq.n	801623c <create_name+0x12c>
 8016250:	69bb      	ldr	r3, [r7, #24]
 8016252:	005b      	lsls	r3, r3, #1
 8016254:	68fa      	ldr	r2, [r7, #12]
 8016256:	4413      	add	r3, r2
 8016258:	881b      	ldrh	r3, [r3, #0]
 801625a:	2b2e      	cmp	r3, #46	; 0x2e
 801625c:	d0ee      	beq.n	801623c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801625e:	69bb      	ldr	r3, [r7, #24]
 8016260:	2b00      	cmp	r3, #0
 8016262:	d009      	beq.n	8016278 <create_name+0x168>
 8016264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016268:	f043 0303 	orr.w	r3, r3, #3
 801626c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8016270:	e002      	b.n	8016278 <create_name+0x168>
 8016272:	697b      	ldr	r3, [r7, #20]
 8016274:	3b01      	subs	r3, #1
 8016276:	617b      	str	r3, [r7, #20]
 8016278:	697b      	ldr	r3, [r7, #20]
 801627a:	2b00      	cmp	r3, #0
 801627c:	d009      	beq.n	8016292 <create_name+0x182>
 801627e:	697b      	ldr	r3, [r7, #20]
 8016280:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016284:	3b01      	subs	r3, #1
 8016286:	005b      	lsls	r3, r3, #1
 8016288:	68fa      	ldr	r2, [r7, #12]
 801628a:	4413      	add	r3, r2
 801628c:	881b      	ldrh	r3, [r3, #0]
 801628e:	2b2e      	cmp	r3, #46	; 0x2e
 8016290:	d1ef      	bne.n	8016272 <create_name+0x162>

	i = b = 0; ni = 8;
 8016292:	2300      	movs	r3, #0
 8016294:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016298:	2300      	movs	r3, #0
 801629a:	623b      	str	r3, [r7, #32]
 801629c:	2308      	movs	r3, #8
 801629e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80162a0:	69bb      	ldr	r3, [r7, #24]
 80162a2:	1c5a      	adds	r2, r3, #1
 80162a4:	61ba      	str	r2, [r7, #24]
 80162a6:	005b      	lsls	r3, r3, #1
 80162a8:	68fa      	ldr	r2, [r7, #12]
 80162aa:	4413      	add	r3, r2
 80162ac:	881b      	ldrh	r3, [r3, #0]
 80162ae:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80162b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	f000 8090 	beq.w	80163d8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80162b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80162ba:	2b20      	cmp	r3, #32
 80162bc:	d006      	beq.n	80162cc <create_name+0x1bc>
 80162be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80162c0:	2b2e      	cmp	r3, #46	; 0x2e
 80162c2:	d10a      	bne.n	80162da <create_name+0x1ca>
 80162c4:	69ba      	ldr	r2, [r7, #24]
 80162c6:	697b      	ldr	r3, [r7, #20]
 80162c8:	429a      	cmp	r2, r3
 80162ca:	d006      	beq.n	80162da <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80162cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80162d0:	f043 0303 	orr.w	r3, r3, #3
 80162d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80162d8:	e07d      	b.n	80163d6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80162da:	6a3a      	ldr	r2, [r7, #32]
 80162dc:	69fb      	ldr	r3, [r7, #28]
 80162de:	429a      	cmp	r2, r3
 80162e0:	d203      	bcs.n	80162ea <create_name+0x1da>
 80162e2:	69ba      	ldr	r2, [r7, #24]
 80162e4:	697b      	ldr	r3, [r7, #20]
 80162e6:	429a      	cmp	r2, r3
 80162e8:	d123      	bne.n	8016332 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80162ea:	69fb      	ldr	r3, [r7, #28]
 80162ec:	2b0b      	cmp	r3, #11
 80162ee:	d106      	bne.n	80162fe <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80162f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80162f4:	f043 0303 	orr.w	r3, r3, #3
 80162f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80162fc:	e075      	b.n	80163ea <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80162fe:	69ba      	ldr	r2, [r7, #24]
 8016300:	697b      	ldr	r3, [r7, #20]
 8016302:	429a      	cmp	r2, r3
 8016304:	d005      	beq.n	8016312 <create_name+0x202>
 8016306:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801630a:	f043 0303 	orr.w	r3, r3, #3
 801630e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8016312:	69ba      	ldr	r2, [r7, #24]
 8016314:	697b      	ldr	r3, [r7, #20]
 8016316:	429a      	cmp	r2, r3
 8016318:	d866      	bhi.n	80163e8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801631a:	697b      	ldr	r3, [r7, #20]
 801631c:	61bb      	str	r3, [r7, #24]
 801631e:	2308      	movs	r3, #8
 8016320:	623b      	str	r3, [r7, #32]
 8016322:	230b      	movs	r3, #11
 8016324:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8016326:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801632a:	009b      	lsls	r3, r3, #2
 801632c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016330:	e051      	b.n	80163d6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8016332:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016334:	2b7f      	cmp	r3, #127	; 0x7f
 8016336:	d914      	bls.n	8016362 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8016338:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801633a:	2100      	movs	r1, #0
 801633c:	4618      	mov	r0, r3
 801633e:	f002 f963 	bl	8018608 <ff_convert>
 8016342:	4603      	mov	r3, r0
 8016344:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8016346:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016348:	2b00      	cmp	r3, #0
 801634a:	d004      	beq.n	8016356 <create_name+0x246>
 801634c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801634e:	3b80      	subs	r3, #128	; 0x80
 8016350:	4a23      	ldr	r2, [pc, #140]	; (80163e0 <create_name+0x2d0>)
 8016352:	5cd3      	ldrb	r3, [r2, r3]
 8016354:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8016356:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801635a:	f043 0302 	orr.w	r3, r3, #2
 801635e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8016362:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016364:	2b00      	cmp	r3, #0
 8016366:	d007      	beq.n	8016378 <create_name+0x268>
 8016368:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801636a:	4619      	mov	r1, r3
 801636c:	481d      	ldr	r0, [pc, #116]	; (80163e4 <create_name+0x2d4>)
 801636e:	f7fe f9cc 	bl	801470a <chk_chr>
 8016372:	4603      	mov	r3, r0
 8016374:	2b00      	cmp	r3, #0
 8016376:	d008      	beq.n	801638a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8016378:	235f      	movs	r3, #95	; 0x5f
 801637a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801637c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016380:	f043 0303 	orr.w	r3, r3, #3
 8016384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016388:	e01b      	b.n	80163c2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801638a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801638c:	2b40      	cmp	r3, #64	; 0x40
 801638e:	d909      	bls.n	80163a4 <create_name+0x294>
 8016390:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016392:	2b5a      	cmp	r3, #90	; 0x5a
 8016394:	d806      	bhi.n	80163a4 <create_name+0x294>
					b |= 2;
 8016396:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801639a:	f043 0302 	orr.w	r3, r3, #2
 801639e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80163a2:	e00e      	b.n	80163c2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80163a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80163a6:	2b60      	cmp	r3, #96	; 0x60
 80163a8:	d90b      	bls.n	80163c2 <create_name+0x2b2>
 80163aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80163ac:	2b7a      	cmp	r3, #122	; 0x7a
 80163ae:	d808      	bhi.n	80163c2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80163b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80163b4:	f043 0301 	orr.w	r3, r3, #1
 80163b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80163bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80163be:	3b20      	subs	r3, #32
 80163c0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80163c2:	6a3b      	ldr	r3, [r7, #32]
 80163c4:	1c5a      	adds	r2, r3, #1
 80163c6:	623a      	str	r2, [r7, #32]
 80163c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80163ca:	b2d1      	uxtb	r1, r2
 80163cc:	687a      	ldr	r2, [r7, #4]
 80163ce:	4413      	add	r3, r2
 80163d0:	460a      	mov	r2, r1
 80163d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80163d6:	e763      	b.n	80162a0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80163d8:	bf00      	nop
 80163da:	e006      	b.n	80163ea <create_name+0x2da>
 80163dc:	0801f2b4 	.word	0x0801f2b4
 80163e0:	08023654 	.word	0x08023654
 80163e4:	0801f2c0 	.word	0x0801f2c0
			if (si > di) break;			/* No extension */
 80163e8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80163f0:	2be5      	cmp	r3, #229	; 0xe5
 80163f2:	d103      	bne.n	80163fc <create_name+0x2ec>
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	2205      	movs	r2, #5
 80163f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80163fc:	69fb      	ldr	r3, [r7, #28]
 80163fe:	2b08      	cmp	r3, #8
 8016400:	d104      	bne.n	801640c <create_name+0x2fc>
 8016402:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016406:	009b      	lsls	r3, r3, #2
 8016408:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801640c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016410:	f003 030c 	and.w	r3, r3, #12
 8016414:	2b0c      	cmp	r3, #12
 8016416:	d005      	beq.n	8016424 <create_name+0x314>
 8016418:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801641c:	f003 0303 	and.w	r3, r3, #3
 8016420:	2b03      	cmp	r3, #3
 8016422:	d105      	bne.n	8016430 <create_name+0x320>
 8016424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016428:	f043 0302 	orr.w	r3, r3, #2
 801642c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8016430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016434:	f003 0302 	and.w	r3, r3, #2
 8016438:	2b00      	cmp	r3, #0
 801643a:	d117      	bne.n	801646c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801643c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016440:	f003 0303 	and.w	r3, r3, #3
 8016444:	2b01      	cmp	r3, #1
 8016446:	d105      	bne.n	8016454 <create_name+0x344>
 8016448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801644c:	f043 0310 	orr.w	r3, r3, #16
 8016450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8016454:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016458:	f003 030c 	and.w	r3, r3, #12
 801645c:	2b04      	cmp	r3, #4
 801645e:	d105      	bne.n	801646c <create_name+0x35c>
 8016460:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016464:	f043 0308 	orr.w	r3, r3, #8
 8016468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016472:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8016476:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8016478:	4618      	mov	r0, r3
 801647a:	3728      	adds	r7, #40	; 0x28
 801647c:	46bd      	mov	sp, r7
 801647e:	bd80      	pop	{r7, pc}

08016480 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8016480:	b580      	push	{r7, lr}
 8016482:	b086      	sub	sp, #24
 8016484:	af00      	add	r7, sp, #0
 8016486:	6078      	str	r0, [r7, #4]
 8016488:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801648e:	693b      	ldr	r3, [r7, #16]
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8016494:	e002      	b.n	801649c <follow_path+0x1c>
 8016496:	683b      	ldr	r3, [r7, #0]
 8016498:	3301      	adds	r3, #1
 801649a:	603b      	str	r3, [r7, #0]
 801649c:	683b      	ldr	r3, [r7, #0]
 801649e:	781b      	ldrb	r3, [r3, #0]
 80164a0:	2b2f      	cmp	r3, #47	; 0x2f
 80164a2:	d0f8      	beq.n	8016496 <follow_path+0x16>
 80164a4:	683b      	ldr	r3, [r7, #0]
 80164a6:	781b      	ldrb	r3, [r3, #0]
 80164a8:	2b5c      	cmp	r3, #92	; 0x5c
 80164aa:	d0f4      	beq.n	8016496 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80164ac:	693b      	ldr	r3, [r7, #16]
 80164ae:	2200      	movs	r2, #0
 80164b0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80164b2:	683b      	ldr	r3, [r7, #0]
 80164b4:	781b      	ldrb	r3, [r3, #0]
 80164b6:	2b1f      	cmp	r3, #31
 80164b8:	d80a      	bhi.n	80164d0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	2280      	movs	r2, #128	; 0x80
 80164be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80164c2:	2100      	movs	r1, #0
 80164c4:	6878      	ldr	r0, [r7, #4]
 80164c6:	f7fe fecb 	bl	8015260 <dir_sdi>
 80164ca:	4603      	mov	r3, r0
 80164cc:	75fb      	strb	r3, [r7, #23]
 80164ce:	e048      	b.n	8016562 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80164d0:	463b      	mov	r3, r7
 80164d2:	4619      	mov	r1, r3
 80164d4:	6878      	ldr	r0, [r7, #4]
 80164d6:	f7ff fe1b 	bl	8016110 <create_name>
 80164da:	4603      	mov	r3, r0
 80164dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80164de:	7dfb      	ldrb	r3, [r7, #23]
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d139      	bne.n	8016558 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80164e4:	6878      	ldr	r0, [r7, #4]
 80164e6:	f7ff fb33 	bl	8015b50 <dir_find>
 80164ea:	4603      	mov	r3, r0
 80164ec:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80164f4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80164f6:	7dfb      	ldrb	r3, [r7, #23]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d00a      	beq.n	8016512 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80164fc:	7dfb      	ldrb	r3, [r7, #23]
 80164fe:	2b04      	cmp	r3, #4
 8016500:	d12c      	bne.n	801655c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8016502:	7afb      	ldrb	r3, [r7, #11]
 8016504:	f003 0304 	and.w	r3, r3, #4
 8016508:	2b00      	cmp	r3, #0
 801650a:	d127      	bne.n	801655c <follow_path+0xdc>
 801650c:	2305      	movs	r3, #5
 801650e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8016510:	e024      	b.n	801655c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016512:	7afb      	ldrb	r3, [r7, #11]
 8016514:	f003 0304 	and.w	r3, r3, #4
 8016518:	2b00      	cmp	r3, #0
 801651a:	d121      	bne.n	8016560 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801651c:	693b      	ldr	r3, [r7, #16]
 801651e:	799b      	ldrb	r3, [r3, #6]
 8016520:	f003 0310 	and.w	r3, r3, #16
 8016524:	2b00      	cmp	r3, #0
 8016526:	d102      	bne.n	801652e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8016528:	2305      	movs	r3, #5
 801652a:	75fb      	strb	r3, [r7, #23]
 801652c:	e019      	b.n	8016562 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	695b      	ldr	r3, [r3, #20]
 8016538:	68fa      	ldr	r2, [r7, #12]
 801653a:	8992      	ldrh	r2, [r2, #12]
 801653c:	fbb3 f0f2 	udiv	r0, r3, r2
 8016540:	fb00 f202 	mul.w	r2, r0, r2
 8016544:	1a9b      	subs	r3, r3, r2
 8016546:	440b      	add	r3, r1
 8016548:	4619      	mov	r1, r3
 801654a:	68f8      	ldr	r0, [r7, #12]
 801654c:	f7ff f82e 	bl	80155ac <ld_clust>
 8016550:	4602      	mov	r2, r0
 8016552:	693b      	ldr	r3, [r7, #16]
 8016554:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016556:	e7bb      	b.n	80164d0 <follow_path+0x50>
			if (res != FR_OK) break;
 8016558:	bf00      	nop
 801655a:	e002      	b.n	8016562 <follow_path+0xe2>
				break;
 801655c:	bf00      	nop
 801655e:	e000      	b.n	8016562 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016560:	bf00      	nop
			}
		}
	}

	return res;
 8016562:	7dfb      	ldrb	r3, [r7, #23]
}
 8016564:	4618      	mov	r0, r3
 8016566:	3718      	adds	r7, #24
 8016568:	46bd      	mov	sp, r7
 801656a:	bd80      	pop	{r7, pc}

0801656c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801656c:	b480      	push	{r7}
 801656e:	b087      	sub	sp, #28
 8016570:	af00      	add	r7, sp, #0
 8016572:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8016574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016578:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	2b00      	cmp	r3, #0
 8016580:	d031      	beq.n	80165e6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	617b      	str	r3, [r7, #20]
 8016588:	e002      	b.n	8016590 <get_ldnumber+0x24>
 801658a:	697b      	ldr	r3, [r7, #20]
 801658c:	3301      	adds	r3, #1
 801658e:	617b      	str	r3, [r7, #20]
 8016590:	697b      	ldr	r3, [r7, #20]
 8016592:	781b      	ldrb	r3, [r3, #0]
 8016594:	2b1f      	cmp	r3, #31
 8016596:	d903      	bls.n	80165a0 <get_ldnumber+0x34>
 8016598:	697b      	ldr	r3, [r7, #20]
 801659a:	781b      	ldrb	r3, [r3, #0]
 801659c:	2b3a      	cmp	r3, #58	; 0x3a
 801659e:	d1f4      	bne.n	801658a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80165a0:	697b      	ldr	r3, [r7, #20]
 80165a2:	781b      	ldrb	r3, [r3, #0]
 80165a4:	2b3a      	cmp	r3, #58	; 0x3a
 80165a6:	d11c      	bne.n	80165e2 <get_ldnumber+0x76>
			tp = *path;
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	1c5a      	adds	r2, r3, #1
 80165b2:	60fa      	str	r2, [r7, #12]
 80165b4:	781b      	ldrb	r3, [r3, #0]
 80165b6:	3b30      	subs	r3, #48	; 0x30
 80165b8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80165ba:	68bb      	ldr	r3, [r7, #8]
 80165bc:	2b09      	cmp	r3, #9
 80165be:	d80e      	bhi.n	80165de <get_ldnumber+0x72>
 80165c0:	68fa      	ldr	r2, [r7, #12]
 80165c2:	697b      	ldr	r3, [r7, #20]
 80165c4:	429a      	cmp	r2, r3
 80165c6:	d10a      	bne.n	80165de <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80165c8:	68bb      	ldr	r3, [r7, #8]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d107      	bne.n	80165de <get_ldnumber+0x72>
					vol = (int)i;
 80165ce:	68bb      	ldr	r3, [r7, #8]
 80165d0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80165d2:	697b      	ldr	r3, [r7, #20]
 80165d4:	3301      	adds	r3, #1
 80165d6:	617b      	str	r3, [r7, #20]
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	697a      	ldr	r2, [r7, #20]
 80165dc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80165de:	693b      	ldr	r3, [r7, #16]
 80165e0:	e002      	b.n	80165e8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80165e2:	2300      	movs	r3, #0
 80165e4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80165e6:	693b      	ldr	r3, [r7, #16]
}
 80165e8:	4618      	mov	r0, r3
 80165ea:	371c      	adds	r7, #28
 80165ec:	46bd      	mov	sp, r7
 80165ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f2:	4770      	bx	lr

080165f4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80165f4:	b580      	push	{r7, lr}
 80165f6:	b082      	sub	sp, #8
 80165f8:	af00      	add	r7, sp, #0
 80165fa:	6078      	str	r0, [r7, #4]
 80165fc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	2200      	movs	r2, #0
 8016602:	70da      	strb	r2, [r3, #3]
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801660a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801660c:	6839      	ldr	r1, [r7, #0]
 801660e:	6878      	ldr	r0, [r7, #4]
 8016610:	f7fe fa46 	bl	8014aa0 <move_window>
 8016614:	4603      	mov	r3, r0
 8016616:	2b00      	cmp	r3, #0
 8016618:	d001      	beq.n	801661e <check_fs+0x2a>
 801661a:	2304      	movs	r3, #4
 801661c:	e038      	b.n	8016690 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	3338      	adds	r3, #56	; 0x38
 8016622:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016626:	4618      	mov	r0, r3
 8016628:	f7fd ff8a 	bl	8014540 <ld_word>
 801662c:	4603      	mov	r3, r0
 801662e:	461a      	mov	r2, r3
 8016630:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016634:	429a      	cmp	r2, r3
 8016636:	d001      	beq.n	801663c <check_fs+0x48>
 8016638:	2303      	movs	r3, #3
 801663a:	e029      	b.n	8016690 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016642:	2be9      	cmp	r3, #233	; 0xe9
 8016644:	d009      	beq.n	801665a <check_fs+0x66>
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801664c:	2beb      	cmp	r3, #235	; 0xeb
 801664e:	d11e      	bne.n	801668e <check_fs+0x9a>
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8016656:	2b90      	cmp	r3, #144	; 0x90
 8016658:	d119      	bne.n	801668e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	3338      	adds	r3, #56	; 0x38
 801665e:	3336      	adds	r3, #54	; 0x36
 8016660:	4618      	mov	r0, r3
 8016662:	f7fd ff85 	bl	8014570 <ld_dword>
 8016666:	4603      	mov	r3, r0
 8016668:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801666c:	4a0a      	ldr	r2, [pc, #40]	; (8016698 <check_fs+0xa4>)
 801666e:	4293      	cmp	r3, r2
 8016670:	d101      	bne.n	8016676 <check_fs+0x82>
 8016672:	2300      	movs	r3, #0
 8016674:	e00c      	b.n	8016690 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	3338      	adds	r3, #56	; 0x38
 801667a:	3352      	adds	r3, #82	; 0x52
 801667c:	4618      	mov	r0, r3
 801667e:	f7fd ff77 	bl	8014570 <ld_dword>
 8016682:	4603      	mov	r3, r0
 8016684:	4a05      	ldr	r2, [pc, #20]	; (801669c <check_fs+0xa8>)
 8016686:	4293      	cmp	r3, r2
 8016688:	d101      	bne.n	801668e <check_fs+0x9a>
 801668a:	2300      	movs	r3, #0
 801668c:	e000      	b.n	8016690 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801668e:	2302      	movs	r3, #2
}
 8016690:	4618      	mov	r0, r3
 8016692:	3708      	adds	r7, #8
 8016694:	46bd      	mov	sp, r7
 8016696:	bd80      	pop	{r7, pc}
 8016698:	00544146 	.word	0x00544146
 801669c:	33544146 	.word	0x33544146

080166a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80166a0:	b580      	push	{r7, lr}
 80166a2:	b096      	sub	sp, #88	; 0x58
 80166a4:	af00      	add	r7, sp, #0
 80166a6:	60f8      	str	r0, [r7, #12]
 80166a8:	60b9      	str	r1, [r7, #8]
 80166aa:	4613      	mov	r3, r2
 80166ac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80166ae:	68bb      	ldr	r3, [r7, #8]
 80166b0:	2200      	movs	r2, #0
 80166b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80166b4:	68f8      	ldr	r0, [r7, #12]
 80166b6:	f7ff ff59 	bl	801656c <get_ldnumber>
 80166ba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80166bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80166be:	2b00      	cmp	r3, #0
 80166c0:	da01      	bge.n	80166c6 <find_volume+0x26>
 80166c2:	230b      	movs	r3, #11
 80166c4:	e265      	b.n	8016b92 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80166c6:	4a9f      	ldr	r2, [pc, #636]	; (8016944 <find_volume+0x2a4>)
 80166c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80166ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80166ce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80166d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d101      	bne.n	80166da <find_volume+0x3a>
 80166d6:	230c      	movs	r3, #12
 80166d8:	e25b      	b.n	8016b92 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80166da:	68bb      	ldr	r3, [r7, #8]
 80166dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80166de:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80166e0:	79fb      	ldrb	r3, [r7, #7]
 80166e2:	f023 0301 	bic.w	r3, r3, #1
 80166e6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80166e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166ea:	781b      	ldrb	r3, [r3, #0]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d01a      	beq.n	8016726 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80166f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166f2:	785b      	ldrb	r3, [r3, #1]
 80166f4:	4618      	mov	r0, r3
 80166f6:	f7fd fe83 	bl	8014400 <disk_status>
 80166fa:	4603      	mov	r3, r0
 80166fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8016700:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016704:	f003 0301 	and.w	r3, r3, #1
 8016708:	2b00      	cmp	r3, #0
 801670a:	d10c      	bne.n	8016726 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801670c:	79fb      	ldrb	r3, [r7, #7]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d007      	beq.n	8016722 <find_volume+0x82>
 8016712:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016716:	f003 0304 	and.w	r3, r3, #4
 801671a:	2b00      	cmp	r3, #0
 801671c:	d001      	beq.n	8016722 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801671e:	230a      	movs	r3, #10
 8016720:	e237      	b.n	8016b92 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8016722:	2300      	movs	r3, #0
 8016724:	e235      	b.n	8016b92 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8016726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016728:	2200      	movs	r2, #0
 801672a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801672c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801672e:	b2da      	uxtb	r2, r3
 8016730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016732:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8016734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016736:	785b      	ldrb	r3, [r3, #1]
 8016738:	4618      	mov	r0, r3
 801673a:	f7fd fe7b 	bl	8014434 <disk_initialize>
 801673e:	4603      	mov	r3, r0
 8016740:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8016744:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016748:	f003 0301 	and.w	r3, r3, #1
 801674c:	2b00      	cmp	r3, #0
 801674e:	d001      	beq.n	8016754 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8016750:	2303      	movs	r3, #3
 8016752:	e21e      	b.n	8016b92 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8016754:	79fb      	ldrb	r3, [r7, #7]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d007      	beq.n	801676a <find_volume+0xca>
 801675a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801675e:	f003 0304 	and.w	r3, r3, #4
 8016762:	2b00      	cmp	r3, #0
 8016764:	d001      	beq.n	801676a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8016766:	230a      	movs	r3, #10
 8016768:	e213      	b.n	8016b92 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801676a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801676c:	7858      	ldrb	r0, [r3, #1]
 801676e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016770:	330c      	adds	r3, #12
 8016772:	461a      	mov	r2, r3
 8016774:	2102      	movs	r1, #2
 8016776:	f7fd fec5 	bl	8014504 <disk_ioctl>
 801677a:	4603      	mov	r3, r0
 801677c:	2b00      	cmp	r3, #0
 801677e:	d001      	beq.n	8016784 <find_volume+0xe4>
 8016780:	2301      	movs	r3, #1
 8016782:	e206      	b.n	8016b92 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8016784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016786:	899b      	ldrh	r3, [r3, #12]
 8016788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801678c:	d80d      	bhi.n	80167aa <find_volume+0x10a>
 801678e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016790:	899b      	ldrh	r3, [r3, #12]
 8016792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016796:	d308      	bcc.n	80167aa <find_volume+0x10a>
 8016798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801679a:	899b      	ldrh	r3, [r3, #12]
 801679c:	461a      	mov	r2, r3
 801679e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167a0:	899b      	ldrh	r3, [r3, #12]
 80167a2:	3b01      	subs	r3, #1
 80167a4:	4013      	ands	r3, r2
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d001      	beq.n	80167ae <find_volume+0x10e>
 80167aa:	2301      	movs	r3, #1
 80167ac:	e1f1      	b.n	8016b92 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80167ae:	2300      	movs	r3, #0
 80167b0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80167b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80167b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80167b6:	f7ff ff1d 	bl	80165f4 <check_fs>
 80167ba:	4603      	mov	r3, r0
 80167bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80167c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80167c4:	2b02      	cmp	r3, #2
 80167c6:	d149      	bne.n	801685c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80167c8:	2300      	movs	r3, #0
 80167ca:	643b      	str	r3, [r7, #64]	; 0x40
 80167cc:	e01e      	b.n	801680c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80167ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167d0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80167d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80167d6:	011b      	lsls	r3, r3, #4
 80167d8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80167dc:	4413      	add	r3, r2
 80167de:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80167e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167e2:	3304      	adds	r3, #4
 80167e4:	781b      	ldrb	r3, [r3, #0]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d006      	beq.n	80167f8 <find_volume+0x158>
 80167ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167ec:	3308      	adds	r3, #8
 80167ee:	4618      	mov	r0, r3
 80167f0:	f7fd febe 	bl	8014570 <ld_dword>
 80167f4:	4602      	mov	r2, r0
 80167f6:	e000      	b.n	80167fa <find_volume+0x15a>
 80167f8:	2200      	movs	r2, #0
 80167fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80167fc:	009b      	lsls	r3, r3, #2
 80167fe:	3358      	adds	r3, #88	; 0x58
 8016800:	443b      	add	r3, r7
 8016802:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016808:	3301      	adds	r3, #1
 801680a:	643b      	str	r3, [r7, #64]	; 0x40
 801680c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801680e:	2b03      	cmp	r3, #3
 8016810:	d9dd      	bls.n	80167ce <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8016812:	2300      	movs	r3, #0
 8016814:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8016816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016818:	2b00      	cmp	r3, #0
 801681a:	d002      	beq.n	8016822 <find_volume+0x182>
 801681c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801681e:	3b01      	subs	r3, #1
 8016820:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8016822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016824:	009b      	lsls	r3, r3, #2
 8016826:	3358      	adds	r3, #88	; 0x58
 8016828:	443b      	add	r3, r7
 801682a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801682e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8016830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016832:	2b00      	cmp	r3, #0
 8016834:	d005      	beq.n	8016842 <find_volume+0x1a2>
 8016836:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016838:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801683a:	f7ff fedb 	bl	80165f4 <check_fs>
 801683e:	4603      	mov	r3, r0
 8016840:	e000      	b.n	8016844 <find_volume+0x1a4>
 8016842:	2303      	movs	r3, #3
 8016844:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8016848:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801684c:	2b01      	cmp	r3, #1
 801684e:	d905      	bls.n	801685c <find_volume+0x1bc>
 8016850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016852:	3301      	adds	r3, #1
 8016854:	643b      	str	r3, [r7, #64]	; 0x40
 8016856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016858:	2b03      	cmp	r3, #3
 801685a:	d9e2      	bls.n	8016822 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801685c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016860:	2b04      	cmp	r3, #4
 8016862:	d101      	bne.n	8016868 <find_volume+0x1c8>
 8016864:	2301      	movs	r3, #1
 8016866:	e194      	b.n	8016b92 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8016868:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801686c:	2b01      	cmp	r3, #1
 801686e:	d901      	bls.n	8016874 <find_volume+0x1d4>
 8016870:	230d      	movs	r3, #13
 8016872:	e18e      	b.n	8016b92 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8016874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016876:	3338      	adds	r3, #56	; 0x38
 8016878:	330b      	adds	r3, #11
 801687a:	4618      	mov	r0, r3
 801687c:	f7fd fe60 	bl	8014540 <ld_word>
 8016880:	4603      	mov	r3, r0
 8016882:	461a      	mov	r2, r3
 8016884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016886:	899b      	ldrh	r3, [r3, #12]
 8016888:	429a      	cmp	r2, r3
 801688a:	d001      	beq.n	8016890 <find_volume+0x1f0>
 801688c:	230d      	movs	r3, #13
 801688e:	e180      	b.n	8016b92 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8016890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016892:	3338      	adds	r3, #56	; 0x38
 8016894:	3316      	adds	r3, #22
 8016896:	4618      	mov	r0, r3
 8016898:	f7fd fe52 	bl	8014540 <ld_word>
 801689c:	4603      	mov	r3, r0
 801689e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80168a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d106      	bne.n	80168b4 <find_volume+0x214>
 80168a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168a8:	3338      	adds	r3, #56	; 0x38
 80168aa:	3324      	adds	r3, #36	; 0x24
 80168ac:	4618      	mov	r0, r3
 80168ae:	f7fd fe5f 	bl	8014570 <ld_dword>
 80168b2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80168b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80168b8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80168ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168bc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80168c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168c2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80168c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168c6:	789b      	ldrb	r3, [r3, #2]
 80168c8:	2b01      	cmp	r3, #1
 80168ca:	d005      	beq.n	80168d8 <find_volume+0x238>
 80168cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168ce:	789b      	ldrb	r3, [r3, #2]
 80168d0:	2b02      	cmp	r3, #2
 80168d2:	d001      	beq.n	80168d8 <find_volume+0x238>
 80168d4:	230d      	movs	r3, #13
 80168d6:	e15c      	b.n	8016b92 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80168d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168da:	789b      	ldrb	r3, [r3, #2]
 80168dc:	461a      	mov	r2, r3
 80168de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80168e0:	fb02 f303 	mul.w	r3, r2, r3
 80168e4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80168e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80168ec:	b29a      	uxth	r2, r3
 80168ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168f0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80168f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168f4:	895b      	ldrh	r3, [r3, #10]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d008      	beq.n	801690c <find_volume+0x26c>
 80168fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168fc:	895b      	ldrh	r3, [r3, #10]
 80168fe:	461a      	mov	r2, r3
 8016900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016902:	895b      	ldrh	r3, [r3, #10]
 8016904:	3b01      	subs	r3, #1
 8016906:	4013      	ands	r3, r2
 8016908:	2b00      	cmp	r3, #0
 801690a:	d001      	beq.n	8016910 <find_volume+0x270>
 801690c:	230d      	movs	r3, #13
 801690e:	e140      	b.n	8016b92 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8016910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016912:	3338      	adds	r3, #56	; 0x38
 8016914:	3311      	adds	r3, #17
 8016916:	4618      	mov	r0, r3
 8016918:	f7fd fe12 	bl	8014540 <ld_word>
 801691c:	4603      	mov	r3, r0
 801691e:	461a      	mov	r2, r3
 8016920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016922:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8016924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016926:	891b      	ldrh	r3, [r3, #8]
 8016928:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801692a:	8992      	ldrh	r2, [r2, #12]
 801692c:	0952      	lsrs	r2, r2, #5
 801692e:	b292      	uxth	r2, r2
 8016930:	fbb3 f1f2 	udiv	r1, r3, r2
 8016934:	fb01 f202 	mul.w	r2, r1, r2
 8016938:	1a9b      	subs	r3, r3, r2
 801693a:	b29b      	uxth	r3, r3
 801693c:	2b00      	cmp	r3, #0
 801693e:	d003      	beq.n	8016948 <find_volume+0x2a8>
 8016940:	230d      	movs	r3, #13
 8016942:	e126      	b.n	8016b92 <find_volume+0x4f2>
 8016944:	20001654 	.word	0x20001654

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8016948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801694a:	3338      	adds	r3, #56	; 0x38
 801694c:	3313      	adds	r3, #19
 801694e:	4618      	mov	r0, r3
 8016950:	f7fd fdf6 	bl	8014540 <ld_word>
 8016954:	4603      	mov	r3, r0
 8016956:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8016958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801695a:	2b00      	cmp	r3, #0
 801695c:	d106      	bne.n	801696c <find_volume+0x2cc>
 801695e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016960:	3338      	adds	r3, #56	; 0x38
 8016962:	3320      	adds	r3, #32
 8016964:	4618      	mov	r0, r3
 8016966:	f7fd fe03 	bl	8014570 <ld_dword>
 801696a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801696c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801696e:	3338      	adds	r3, #56	; 0x38
 8016970:	330e      	adds	r3, #14
 8016972:	4618      	mov	r0, r3
 8016974:	f7fd fde4 	bl	8014540 <ld_word>
 8016978:	4603      	mov	r3, r0
 801697a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801697c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801697e:	2b00      	cmp	r3, #0
 8016980:	d101      	bne.n	8016986 <find_volume+0x2e6>
 8016982:	230d      	movs	r3, #13
 8016984:	e105      	b.n	8016b92 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8016986:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801698a:	4413      	add	r3, r2
 801698c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801698e:	8911      	ldrh	r1, [r2, #8]
 8016990:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016992:	8992      	ldrh	r2, [r2, #12]
 8016994:	0952      	lsrs	r2, r2, #5
 8016996:	b292      	uxth	r2, r2
 8016998:	fbb1 f2f2 	udiv	r2, r1, r2
 801699c:	b292      	uxth	r2, r2
 801699e:	4413      	add	r3, r2
 80169a0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80169a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80169a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169a6:	429a      	cmp	r2, r3
 80169a8:	d201      	bcs.n	80169ae <find_volume+0x30e>
 80169aa:	230d      	movs	r3, #13
 80169ac:	e0f1      	b.n	8016b92 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80169ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80169b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169b2:	1ad3      	subs	r3, r2, r3
 80169b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80169b6:	8952      	ldrh	r2, [r2, #10]
 80169b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80169bc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80169be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d101      	bne.n	80169c8 <find_volume+0x328>
 80169c4:	230d      	movs	r3, #13
 80169c6:	e0e4      	b.n	8016b92 <find_volume+0x4f2>
		fmt = FS_FAT32;
 80169c8:	2303      	movs	r3, #3
 80169ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80169ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169d0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80169d4:	4293      	cmp	r3, r2
 80169d6:	d802      	bhi.n	80169de <find_volume+0x33e>
 80169d8:	2302      	movs	r3, #2
 80169da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80169de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169e0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80169e4:	4293      	cmp	r3, r2
 80169e6:	d802      	bhi.n	80169ee <find_volume+0x34e>
 80169e8:	2301      	movs	r3, #1
 80169ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80169ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169f0:	1c9a      	adds	r2, r3, #2
 80169f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169f4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80169f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80169fa:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80169fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80169fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a00:	441a      	add	r2, r3
 8016a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a04:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8016a06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a0a:	441a      	add	r2, r3
 8016a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a0e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8016a10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016a14:	2b03      	cmp	r3, #3
 8016a16:	d11e      	bne.n	8016a56 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8016a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a1a:	3338      	adds	r3, #56	; 0x38
 8016a1c:	332a      	adds	r3, #42	; 0x2a
 8016a1e:	4618      	mov	r0, r3
 8016a20:	f7fd fd8e 	bl	8014540 <ld_word>
 8016a24:	4603      	mov	r3, r0
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d001      	beq.n	8016a2e <find_volume+0x38e>
 8016a2a:	230d      	movs	r3, #13
 8016a2c:	e0b1      	b.n	8016b92 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8016a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a30:	891b      	ldrh	r3, [r3, #8]
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d001      	beq.n	8016a3a <find_volume+0x39a>
 8016a36:	230d      	movs	r3, #13
 8016a38:	e0ab      	b.n	8016b92 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8016a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a3c:	3338      	adds	r3, #56	; 0x38
 8016a3e:	332c      	adds	r3, #44	; 0x2c
 8016a40:	4618      	mov	r0, r3
 8016a42:	f7fd fd95 	bl	8014570 <ld_dword>
 8016a46:	4602      	mov	r2, r0
 8016a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a4a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8016a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a4e:	69db      	ldr	r3, [r3, #28]
 8016a50:	009b      	lsls	r3, r3, #2
 8016a52:	647b      	str	r3, [r7, #68]	; 0x44
 8016a54:	e01f      	b.n	8016a96 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8016a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a58:	891b      	ldrh	r3, [r3, #8]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d101      	bne.n	8016a62 <find_volume+0x3c2>
 8016a5e:	230d      	movs	r3, #13
 8016a60:	e097      	b.n	8016b92 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8016a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016a68:	441a      	add	r2, r3
 8016a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a6c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8016a6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016a72:	2b02      	cmp	r3, #2
 8016a74:	d103      	bne.n	8016a7e <find_volume+0x3de>
 8016a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a78:	69db      	ldr	r3, [r3, #28]
 8016a7a:	005b      	lsls	r3, r3, #1
 8016a7c:	e00a      	b.n	8016a94 <find_volume+0x3f4>
 8016a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a80:	69da      	ldr	r2, [r3, #28]
 8016a82:	4613      	mov	r3, r2
 8016a84:	005b      	lsls	r3, r3, #1
 8016a86:	4413      	add	r3, r2
 8016a88:	085a      	lsrs	r2, r3, #1
 8016a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a8c:	69db      	ldr	r3, [r3, #28]
 8016a8e:	f003 0301 	and.w	r3, r3, #1
 8016a92:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8016a94:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8016a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a98:	6a1a      	ldr	r2, [r3, #32]
 8016a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a9c:	899b      	ldrh	r3, [r3, #12]
 8016a9e:	4619      	mov	r1, r3
 8016aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016aa2:	440b      	add	r3, r1
 8016aa4:	3b01      	subs	r3, #1
 8016aa6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016aa8:	8989      	ldrh	r1, [r1, #12]
 8016aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8016aae:	429a      	cmp	r2, r3
 8016ab0:	d201      	bcs.n	8016ab6 <find_volume+0x416>
 8016ab2:	230d      	movs	r3, #13
 8016ab4:	e06d      	b.n	8016b92 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8016ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ab8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016abc:	619a      	str	r2, [r3, #24]
 8016abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ac0:	699a      	ldr	r2, [r3, #24]
 8016ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ac4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8016ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ac8:	2280      	movs	r2, #128	; 0x80
 8016aca:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8016acc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016ad0:	2b03      	cmp	r3, #3
 8016ad2:	d149      	bne.n	8016b68 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8016ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ad6:	3338      	adds	r3, #56	; 0x38
 8016ad8:	3330      	adds	r3, #48	; 0x30
 8016ada:	4618      	mov	r0, r3
 8016adc:	f7fd fd30 	bl	8014540 <ld_word>
 8016ae0:	4603      	mov	r3, r0
 8016ae2:	2b01      	cmp	r3, #1
 8016ae4:	d140      	bne.n	8016b68 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8016ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016ae8:	3301      	adds	r3, #1
 8016aea:	4619      	mov	r1, r3
 8016aec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016aee:	f7fd ffd7 	bl	8014aa0 <move_window>
 8016af2:	4603      	mov	r3, r0
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d137      	bne.n	8016b68 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8016af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016afa:	2200      	movs	r2, #0
 8016afc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8016afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b00:	3338      	adds	r3, #56	; 0x38
 8016b02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016b06:	4618      	mov	r0, r3
 8016b08:	f7fd fd1a 	bl	8014540 <ld_word>
 8016b0c:	4603      	mov	r3, r0
 8016b0e:	461a      	mov	r2, r3
 8016b10:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016b14:	429a      	cmp	r2, r3
 8016b16:	d127      	bne.n	8016b68 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8016b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b1a:	3338      	adds	r3, #56	; 0x38
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	f7fd fd27 	bl	8014570 <ld_dword>
 8016b22:	4603      	mov	r3, r0
 8016b24:	4a1d      	ldr	r2, [pc, #116]	; (8016b9c <find_volume+0x4fc>)
 8016b26:	4293      	cmp	r3, r2
 8016b28:	d11e      	bne.n	8016b68 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8016b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b2c:	3338      	adds	r3, #56	; 0x38
 8016b2e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016b32:	4618      	mov	r0, r3
 8016b34:	f7fd fd1c 	bl	8014570 <ld_dword>
 8016b38:	4603      	mov	r3, r0
 8016b3a:	4a19      	ldr	r2, [pc, #100]	; (8016ba0 <find_volume+0x500>)
 8016b3c:	4293      	cmp	r3, r2
 8016b3e:	d113      	bne.n	8016b68 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8016b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b42:	3338      	adds	r3, #56	; 0x38
 8016b44:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8016b48:	4618      	mov	r0, r3
 8016b4a:	f7fd fd11 	bl	8014570 <ld_dword>
 8016b4e:	4602      	mov	r2, r0
 8016b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b52:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8016b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b56:	3338      	adds	r3, #56	; 0x38
 8016b58:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	f7fd fd07 	bl	8014570 <ld_dword>
 8016b62:	4602      	mov	r2, r0
 8016b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b66:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8016b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b6a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8016b6e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8016b70:	4b0c      	ldr	r3, [pc, #48]	; (8016ba4 <find_volume+0x504>)
 8016b72:	881b      	ldrh	r3, [r3, #0]
 8016b74:	3301      	adds	r3, #1
 8016b76:	b29a      	uxth	r2, r3
 8016b78:	4b0a      	ldr	r3, [pc, #40]	; (8016ba4 <find_volume+0x504>)
 8016b7a:	801a      	strh	r2, [r3, #0]
 8016b7c:	4b09      	ldr	r3, [pc, #36]	; (8016ba4 <find_volume+0x504>)
 8016b7e:	881a      	ldrh	r2, [r3, #0]
 8016b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b82:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8016b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b86:	4a08      	ldr	r2, [pc, #32]	; (8016ba8 <find_volume+0x508>)
 8016b88:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8016b8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016b8c:	f7fd ff20 	bl	80149d0 <clear_lock>
#endif
	return FR_OK;
 8016b90:	2300      	movs	r3, #0
}
 8016b92:	4618      	mov	r0, r3
 8016b94:	3758      	adds	r7, #88	; 0x58
 8016b96:	46bd      	mov	sp, r7
 8016b98:	bd80      	pop	{r7, pc}
 8016b9a:	bf00      	nop
 8016b9c:	41615252 	.word	0x41615252
 8016ba0:	61417272 	.word	0x61417272
 8016ba4:	20001658 	.word	0x20001658
 8016ba8:	2000168c 	.word	0x2000168c

08016bac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8016bac:	b580      	push	{r7, lr}
 8016bae:	b084      	sub	sp, #16
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	6078      	str	r0, [r7, #4]
 8016bb4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8016bb6:	2309      	movs	r3, #9
 8016bb8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d01c      	beq.n	8016bfa <validate+0x4e>
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d018      	beq.n	8016bfa <validate+0x4e>
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	781b      	ldrb	r3, [r3, #0]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d013      	beq.n	8016bfa <validate+0x4e>
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	889a      	ldrh	r2, [r3, #4]
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	88db      	ldrh	r3, [r3, #6]
 8016bdc:	429a      	cmp	r2, r3
 8016bde:	d10c      	bne.n	8016bfa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	785b      	ldrb	r3, [r3, #1]
 8016be6:	4618      	mov	r0, r3
 8016be8:	f7fd fc0a 	bl	8014400 <disk_status>
 8016bec:	4603      	mov	r3, r0
 8016bee:	f003 0301 	and.w	r3, r3, #1
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d101      	bne.n	8016bfa <validate+0x4e>
			res = FR_OK;
 8016bf6:	2300      	movs	r3, #0
 8016bf8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8016bfa:	7bfb      	ldrb	r3, [r7, #15]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d102      	bne.n	8016c06 <validate+0x5a>
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	e000      	b.n	8016c08 <validate+0x5c>
 8016c06:	2300      	movs	r3, #0
 8016c08:	683a      	ldr	r2, [r7, #0]
 8016c0a:	6013      	str	r3, [r2, #0]
	return res;
 8016c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c0e:	4618      	mov	r0, r3
 8016c10:	3710      	adds	r7, #16
 8016c12:	46bd      	mov	sp, r7
 8016c14:	bd80      	pop	{r7, pc}
	...

08016c18 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8016c18:	b580      	push	{r7, lr}
 8016c1a:	b088      	sub	sp, #32
 8016c1c:	af00      	add	r7, sp, #0
 8016c1e:	60f8      	str	r0, [r7, #12]
 8016c20:	60b9      	str	r1, [r7, #8]
 8016c22:	4613      	mov	r3, r2
 8016c24:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8016c26:	68bb      	ldr	r3, [r7, #8]
 8016c28:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8016c2a:	f107 0310 	add.w	r3, r7, #16
 8016c2e:	4618      	mov	r0, r3
 8016c30:	f7ff fc9c 	bl	801656c <get_ldnumber>
 8016c34:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8016c36:	69fb      	ldr	r3, [r7, #28]
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	da01      	bge.n	8016c40 <f_mount+0x28>
 8016c3c:	230b      	movs	r3, #11
 8016c3e:	e02b      	b.n	8016c98 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8016c40:	4a17      	ldr	r2, [pc, #92]	; (8016ca0 <f_mount+0x88>)
 8016c42:	69fb      	ldr	r3, [r7, #28]
 8016c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016c48:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8016c4a:	69bb      	ldr	r3, [r7, #24]
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d005      	beq.n	8016c5c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8016c50:	69b8      	ldr	r0, [r7, #24]
 8016c52:	f7fd febd 	bl	80149d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8016c56:	69bb      	ldr	r3, [r7, #24]
 8016c58:	2200      	movs	r2, #0
 8016c5a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d002      	beq.n	8016c68 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	2200      	movs	r2, #0
 8016c66:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8016c68:	68fa      	ldr	r2, [r7, #12]
 8016c6a:	490d      	ldr	r1, [pc, #52]	; (8016ca0 <f_mount+0x88>)
 8016c6c:	69fb      	ldr	r3, [r7, #28]
 8016c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8016c72:	68fb      	ldr	r3, [r7, #12]
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d002      	beq.n	8016c7e <f_mount+0x66>
 8016c78:	79fb      	ldrb	r3, [r7, #7]
 8016c7a:	2b01      	cmp	r3, #1
 8016c7c:	d001      	beq.n	8016c82 <f_mount+0x6a>
 8016c7e:	2300      	movs	r3, #0
 8016c80:	e00a      	b.n	8016c98 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8016c82:	f107 010c 	add.w	r1, r7, #12
 8016c86:	f107 0308 	add.w	r3, r7, #8
 8016c8a:	2200      	movs	r2, #0
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	f7ff fd07 	bl	80166a0 <find_volume>
 8016c92:	4603      	mov	r3, r0
 8016c94:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8016c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8016c98:	4618      	mov	r0, r3
 8016c9a:	3720      	adds	r7, #32
 8016c9c:	46bd      	mov	sp, r7
 8016c9e:	bd80      	pop	{r7, pc}
 8016ca0:	20001654 	.word	0x20001654

08016ca4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8016ca4:	b580      	push	{r7, lr}
 8016ca6:	b09a      	sub	sp, #104	; 0x68
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	60f8      	str	r0, [r7, #12]
 8016cac:	60b9      	str	r1, [r7, #8]
 8016cae:	4613      	mov	r3, r2
 8016cb0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d101      	bne.n	8016cbc <f_open+0x18>
 8016cb8:	2309      	movs	r3, #9
 8016cba:	e1bb      	b.n	8017034 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8016cbc:	79fb      	ldrb	r3, [r7, #7]
 8016cbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016cc2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8016cc4:	79fa      	ldrb	r2, [r7, #7]
 8016cc6:	f107 0114 	add.w	r1, r7, #20
 8016cca:	f107 0308 	add.w	r3, r7, #8
 8016cce:	4618      	mov	r0, r3
 8016cd0:	f7ff fce6 	bl	80166a0 <find_volume>
 8016cd4:	4603      	mov	r3, r0
 8016cd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8016cda:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	f040 819f 	bne.w	8017022 <f_open+0x37e>
		dj.obj.fs = fs;
 8016ce4:	697b      	ldr	r3, [r7, #20]
 8016ce6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8016ce8:	68ba      	ldr	r2, [r7, #8]
 8016cea:	f107 0318 	add.w	r3, r7, #24
 8016cee:	4611      	mov	r1, r2
 8016cf0:	4618      	mov	r0, r3
 8016cf2:	f7ff fbc5 	bl	8016480 <follow_path>
 8016cf6:	4603      	mov	r3, r0
 8016cf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8016cfc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d11a      	bne.n	8016d3a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8016d04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016d08:	b25b      	sxtb	r3, r3
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	da03      	bge.n	8016d16 <f_open+0x72>
				res = FR_INVALID_NAME;
 8016d0e:	2306      	movs	r3, #6
 8016d10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8016d14:	e011      	b.n	8016d3a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016d16:	79fb      	ldrb	r3, [r7, #7]
 8016d18:	f023 0301 	bic.w	r3, r3, #1
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	bf14      	ite	ne
 8016d20:	2301      	movne	r3, #1
 8016d22:	2300      	moveq	r3, #0
 8016d24:	b2db      	uxtb	r3, r3
 8016d26:	461a      	mov	r2, r3
 8016d28:	f107 0318 	add.w	r3, r7, #24
 8016d2c:	4611      	mov	r1, r2
 8016d2e:	4618      	mov	r0, r3
 8016d30:	f7fd fd06 	bl	8014740 <chk_lock>
 8016d34:	4603      	mov	r3, r0
 8016d36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016d3a:	79fb      	ldrb	r3, [r7, #7]
 8016d3c:	f003 031c 	and.w	r3, r3, #28
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d07f      	beq.n	8016e44 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8016d44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d017      	beq.n	8016d7c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8016d4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016d50:	2b04      	cmp	r3, #4
 8016d52:	d10e      	bne.n	8016d72 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8016d54:	f7fd fd50 	bl	80147f8 <enq_lock>
 8016d58:	4603      	mov	r3, r0
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d006      	beq.n	8016d6c <f_open+0xc8>
 8016d5e:	f107 0318 	add.w	r3, r7, #24
 8016d62:	4618      	mov	r0, r3
 8016d64:	f7fe ffb4 	bl	8015cd0 <dir_register>
 8016d68:	4603      	mov	r3, r0
 8016d6a:	e000      	b.n	8016d6e <f_open+0xca>
 8016d6c:	2312      	movs	r3, #18
 8016d6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8016d72:	79fb      	ldrb	r3, [r7, #7]
 8016d74:	f043 0308 	orr.w	r3, r3, #8
 8016d78:	71fb      	strb	r3, [r7, #7]
 8016d7a:	e010      	b.n	8016d9e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8016d7c:	7fbb      	ldrb	r3, [r7, #30]
 8016d7e:	f003 0311 	and.w	r3, r3, #17
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d003      	beq.n	8016d8e <f_open+0xea>
					res = FR_DENIED;
 8016d86:	2307      	movs	r3, #7
 8016d88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8016d8c:	e007      	b.n	8016d9e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8016d8e:	79fb      	ldrb	r3, [r7, #7]
 8016d90:	f003 0304 	and.w	r3, r3, #4
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d002      	beq.n	8016d9e <f_open+0xfa>
 8016d98:	2308      	movs	r3, #8
 8016d9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8016d9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d168      	bne.n	8016e78 <f_open+0x1d4>
 8016da6:	79fb      	ldrb	r3, [r7, #7]
 8016da8:	f003 0308 	and.w	r3, r3, #8
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d063      	beq.n	8016e78 <f_open+0x1d4>
				dw = GET_FATTIME();
 8016db0:	f7fc fcca 	bl	8013748 <get_fattime>
 8016db4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8016db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016db8:	330e      	adds	r3, #14
 8016dba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	f7fd fc15 	bl	80145ec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8016dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dc4:	3316      	adds	r3, #22
 8016dc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016dc8:	4618      	mov	r0, r3
 8016dca:	f7fd fc0f 	bl	80145ec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8016dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dd0:	330b      	adds	r3, #11
 8016dd2:	2220      	movs	r2, #32
 8016dd4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8016dd6:	697b      	ldr	r3, [r7, #20]
 8016dd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016dda:	4611      	mov	r1, r2
 8016ddc:	4618      	mov	r0, r3
 8016dde:	f7fe fbe5 	bl	80155ac <ld_clust>
 8016de2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8016de4:	697b      	ldr	r3, [r7, #20]
 8016de6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016de8:	2200      	movs	r2, #0
 8016dea:	4618      	mov	r0, r3
 8016dec:	f7fe fbfd 	bl	80155ea <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8016df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016df2:	331c      	adds	r3, #28
 8016df4:	2100      	movs	r1, #0
 8016df6:	4618      	mov	r0, r3
 8016df8:	f7fd fbf8 	bl	80145ec <st_dword>
					fs->wflag = 1;
 8016dfc:	697b      	ldr	r3, [r7, #20]
 8016dfe:	2201      	movs	r2, #1
 8016e00:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8016e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d037      	beq.n	8016e78 <f_open+0x1d4>
						dw = fs->winsect;
 8016e08:	697b      	ldr	r3, [r7, #20]
 8016e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016e0c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8016e0e:	f107 0318 	add.w	r3, r7, #24
 8016e12:	2200      	movs	r2, #0
 8016e14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016e16:	4618      	mov	r0, r3
 8016e18:	f7fe f8ed 	bl	8014ff6 <remove_chain>
 8016e1c:	4603      	mov	r3, r0
 8016e1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8016e22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d126      	bne.n	8016e78 <f_open+0x1d4>
							res = move_window(fs, dw);
 8016e2a:	697b      	ldr	r3, [r7, #20]
 8016e2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016e2e:	4618      	mov	r0, r3
 8016e30:	f7fd fe36 	bl	8014aa0 <move_window>
 8016e34:	4603      	mov	r3, r0
 8016e36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8016e3a:	697b      	ldr	r3, [r7, #20]
 8016e3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016e3e:	3a01      	subs	r2, #1
 8016e40:	615a      	str	r2, [r3, #20]
 8016e42:	e019      	b.n	8016e78 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8016e44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d115      	bne.n	8016e78 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8016e4c:	7fbb      	ldrb	r3, [r7, #30]
 8016e4e:	f003 0310 	and.w	r3, r3, #16
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d003      	beq.n	8016e5e <f_open+0x1ba>
					res = FR_NO_FILE;
 8016e56:	2304      	movs	r3, #4
 8016e58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8016e5c:	e00c      	b.n	8016e78 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8016e5e:	79fb      	ldrb	r3, [r7, #7]
 8016e60:	f003 0302 	and.w	r3, r3, #2
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d007      	beq.n	8016e78 <f_open+0x1d4>
 8016e68:	7fbb      	ldrb	r3, [r7, #30]
 8016e6a:	f003 0301 	and.w	r3, r3, #1
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d002      	beq.n	8016e78 <f_open+0x1d4>
						res = FR_DENIED;
 8016e72:	2307      	movs	r3, #7
 8016e74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8016e78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d128      	bne.n	8016ed2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8016e80:	79fb      	ldrb	r3, [r7, #7]
 8016e82:	f003 0308 	and.w	r3, r3, #8
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d003      	beq.n	8016e92 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8016e8a:	79fb      	ldrb	r3, [r7, #7]
 8016e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e90:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8016e92:	697b      	ldr	r3, [r7, #20]
 8016e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8016e9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e9c:	68fb      	ldr	r3, [r7, #12]
 8016e9e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016ea0:	79fb      	ldrb	r3, [r7, #7]
 8016ea2:	f023 0301 	bic.w	r3, r3, #1
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	bf14      	ite	ne
 8016eaa:	2301      	movne	r3, #1
 8016eac:	2300      	moveq	r3, #0
 8016eae:	b2db      	uxtb	r3, r3
 8016eb0:	461a      	mov	r2, r3
 8016eb2:	f107 0318 	add.w	r3, r7, #24
 8016eb6:	4611      	mov	r1, r2
 8016eb8:	4618      	mov	r0, r3
 8016eba:	f7fd fcbf 	bl	801483c <inc_lock>
 8016ebe:	4602      	mov	r2, r0
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	691b      	ldr	r3, [r3, #16]
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d102      	bne.n	8016ed2 <f_open+0x22e>
 8016ecc:	2302      	movs	r3, #2
 8016ece:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8016ed2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	f040 80a3 	bne.w	8017022 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8016edc:	697b      	ldr	r3, [r7, #20]
 8016ede:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016ee0:	4611      	mov	r1, r2
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	f7fe fb62 	bl	80155ac <ld_clust>
 8016ee8:	4602      	mov	r2, r0
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8016eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ef0:	331c      	adds	r3, #28
 8016ef2:	4618      	mov	r0, r3
 8016ef4:	f7fd fb3c 	bl	8014570 <ld_dword>
 8016ef8:	4602      	mov	r2, r0
 8016efa:	68fb      	ldr	r3, [r7, #12]
 8016efc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	2200      	movs	r2, #0
 8016f02:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8016f04:	697a      	ldr	r2, [r7, #20]
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8016f0a:	697b      	ldr	r3, [r7, #20]
 8016f0c:	88da      	ldrh	r2, [r3, #6]
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	79fa      	ldrb	r2, [r7, #7]
 8016f16:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	2200      	movs	r2, #0
 8016f1c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	2200      	movs	r2, #0
 8016f22:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	2200      	movs	r2, #0
 8016f28:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	3330      	adds	r3, #48	; 0x30
 8016f2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016f32:	2100      	movs	r1, #0
 8016f34:	4618      	mov	r0, r3
 8016f36:	f7fd fba6 	bl	8014686 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8016f3a:	79fb      	ldrb	r3, [r7, #7]
 8016f3c:	f003 0320 	and.w	r3, r3, #32
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d06e      	beq.n	8017022 <f_open+0x37e>
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	68db      	ldr	r3, [r3, #12]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d06a      	beq.n	8017022 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	68da      	ldr	r2, [r3, #12]
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8016f54:	697b      	ldr	r3, [r7, #20]
 8016f56:	895b      	ldrh	r3, [r3, #10]
 8016f58:	461a      	mov	r2, r3
 8016f5a:	697b      	ldr	r3, [r7, #20]
 8016f5c:	899b      	ldrh	r3, [r3, #12]
 8016f5e:	fb02 f303 	mul.w	r3, r2, r3
 8016f62:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	689b      	ldr	r3, [r3, #8]
 8016f68:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	68db      	ldr	r3, [r3, #12]
 8016f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016f70:	e016      	b.n	8016fa0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8016f76:	4618      	mov	r0, r3
 8016f78:	f7fd fe4f 	bl	8014c1a <get_fat>
 8016f7c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8016f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016f80:	2b01      	cmp	r3, #1
 8016f82:	d802      	bhi.n	8016f8a <f_open+0x2e6>
 8016f84:	2302      	movs	r3, #2
 8016f86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016f8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016f90:	d102      	bne.n	8016f98 <f_open+0x2f4>
 8016f92:	2301      	movs	r3, #1
 8016f94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016f98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016f9c:	1ad3      	subs	r3, r2, r3
 8016f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016fa0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d103      	bne.n	8016fb0 <f_open+0x30c>
 8016fa8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016faa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016fac:	429a      	cmp	r2, r3
 8016fae:	d8e0      	bhi.n	8016f72 <f_open+0x2ce>
				}
				fp->clust = clst;
 8016fb0:	68fb      	ldr	r3, [r7, #12]
 8016fb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016fb4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8016fb6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d131      	bne.n	8017022 <f_open+0x37e>
 8016fbe:	697b      	ldr	r3, [r7, #20]
 8016fc0:	899b      	ldrh	r3, [r3, #12]
 8016fc2:	461a      	mov	r2, r3
 8016fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016fc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8016fca:	fb01 f202 	mul.w	r2, r1, r2
 8016fce:	1a9b      	subs	r3, r3, r2
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d026      	beq.n	8017022 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8016fd4:	697b      	ldr	r3, [r7, #20]
 8016fd6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8016fd8:	4618      	mov	r0, r3
 8016fda:	f7fd fdff 	bl	8014bdc <clust2sect>
 8016fde:	64f8      	str	r0, [r7, #76]	; 0x4c
 8016fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d103      	bne.n	8016fee <f_open+0x34a>
						res = FR_INT_ERR;
 8016fe6:	2302      	movs	r3, #2
 8016fe8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8016fec:	e019      	b.n	8017022 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8016fee:	697b      	ldr	r3, [r7, #20]
 8016ff0:	899b      	ldrh	r3, [r3, #12]
 8016ff2:	461a      	mov	r2, r3
 8016ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ff6:	fbb3 f2f2 	udiv	r2, r3, r2
 8016ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ffc:	441a      	add	r2, r3
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8017002:	697b      	ldr	r3, [r7, #20]
 8017004:	7858      	ldrb	r0, [r3, #1]
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801700c:	68fb      	ldr	r3, [r7, #12]
 801700e:	6a1a      	ldr	r2, [r3, #32]
 8017010:	2301      	movs	r3, #1
 8017012:	f7fd fa37 	bl	8014484 <disk_read>
 8017016:	4603      	mov	r3, r0
 8017018:	2b00      	cmp	r3, #0
 801701a:	d002      	beq.n	8017022 <f_open+0x37e>
 801701c:	2301      	movs	r3, #1
 801701e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8017022:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017026:	2b00      	cmp	r3, #0
 8017028:	d002      	beq.n	8017030 <f_open+0x38c>
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	2200      	movs	r2, #0
 801702e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8017030:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8017034:	4618      	mov	r0, r3
 8017036:	3768      	adds	r7, #104	; 0x68
 8017038:	46bd      	mov	sp, r7
 801703a:	bd80      	pop	{r7, pc}

0801703c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801703c:	b580      	push	{r7, lr}
 801703e:	b08e      	sub	sp, #56	; 0x38
 8017040:	af00      	add	r7, sp, #0
 8017042:	60f8      	str	r0, [r7, #12]
 8017044:	60b9      	str	r1, [r7, #8]
 8017046:	607a      	str	r2, [r7, #4]
 8017048:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801704a:	68bb      	ldr	r3, [r7, #8]
 801704c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801704e:	683b      	ldr	r3, [r7, #0]
 8017050:	2200      	movs	r2, #0
 8017052:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	f107 0214 	add.w	r2, r7, #20
 801705a:	4611      	mov	r1, r2
 801705c:	4618      	mov	r0, r3
 801705e:	f7ff fda5 	bl	8016bac <validate>
 8017062:	4603      	mov	r3, r0
 8017064:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8017068:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801706c:	2b00      	cmp	r3, #0
 801706e:	d107      	bne.n	8017080 <f_read+0x44>
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	7d5b      	ldrb	r3, [r3, #21]
 8017074:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8017078:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801707c:	2b00      	cmp	r3, #0
 801707e:	d002      	beq.n	8017086 <f_read+0x4a>
 8017080:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017084:	e135      	b.n	80172f2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	7d1b      	ldrb	r3, [r3, #20]
 801708a:	f003 0301 	and.w	r3, r3, #1
 801708e:	2b00      	cmp	r3, #0
 8017090:	d101      	bne.n	8017096 <f_read+0x5a>
 8017092:	2307      	movs	r3, #7
 8017094:	e12d      	b.n	80172f2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	68da      	ldr	r2, [r3, #12]
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	699b      	ldr	r3, [r3, #24]
 801709e:	1ad3      	subs	r3, r2, r3
 80170a0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80170a2:	687a      	ldr	r2, [r7, #4]
 80170a4:	6a3b      	ldr	r3, [r7, #32]
 80170a6:	429a      	cmp	r2, r3
 80170a8:	f240 811e 	bls.w	80172e8 <f_read+0x2ac>
 80170ac:	6a3b      	ldr	r3, [r7, #32]
 80170ae:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80170b0:	e11a      	b.n	80172e8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	699b      	ldr	r3, [r3, #24]
 80170b6:	697a      	ldr	r2, [r7, #20]
 80170b8:	8992      	ldrh	r2, [r2, #12]
 80170ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80170be:	fb01 f202 	mul.w	r2, r1, r2
 80170c2:	1a9b      	subs	r3, r3, r2
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	f040 80d5 	bne.w	8017274 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	699b      	ldr	r3, [r3, #24]
 80170ce:	697a      	ldr	r2, [r7, #20]
 80170d0:	8992      	ldrh	r2, [r2, #12]
 80170d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80170d6:	697a      	ldr	r2, [r7, #20]
 80170d8:	8952      	ldrh	r2, [r2, #10]
 80170da:	3a01      	subs	r2, #1
 80170dc:	4013      	ands	r3, r2
 80170de:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80170e0:	69fb      	ldr	r3, [r7, #28]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d12f      	bne.n	8017146 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	699b      	ldr	r3, [r3, #24]
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d103      	bne.n	80170f6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	689b      	ldr	r3, [r3, #8]
 80170f2:	633b      	str	r3, [r7, #48]	; 0x30
 80170f4:	e013      	b.n	801711e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d007      	beq.n	801710e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80170fe:	68fb      	ldr	r3, [r7, #12]
 8017100:	699b      	ldr	r3, [r3, #24]
 8017102:	4619      	mov	r1, r3
 8017104:	68f8      	ldr	r0, [r7, #12]
 8017106:	f7fe f873 	bl	80151f0 <clmt_clust>
 801710a:	6338      	str	r0, [r7, #48]	; 0x30
 801710c:	e007      	b.n	801711e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801710e:	68fa      	ldr	r2, [r7, #12]
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	69db      	ldr	r3, [r3, #28]
 8017114:	4619      	mov	r1, r3
 8017116:	4610      	mov	r0, r2
 8017118:	f7fd fd7f 	bl	8014c1a <get_fat>
 801711c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801711e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017120:	2b01      	cmp	r3, #1
 8017122:	d804      	bhi.n	801712e <f_read+0xf2>
 8017124:	68fb      	ldr	r3, [r7, #12]
 8017126:	2202      	movs	r2, #2
 8017128:	755a      	strb	r2, [r3, #21]
 801712a:	2302      	movs	r3, #2
 801712c:	e0e1      	b.n	80172f2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801712e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017134:	d104      	bne.n	8017140 <f_read+0x104>
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	2201      	movs	r2, #1
 801713a:	755a      	strb	r2, [r3, #21]
 801713c:	2301      	movs	r3, #1
 801713e:	e0d8      	b.n	80172f2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017144:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8017146:	697a      	ldr	r2, [r7, #20]
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	69db      	ldr	r3, [r3, #28]
 801714c:	4619      	mov	r1, r3
 801714e:	4610      	mov	r0, r2
 8017150:	f7fd fd44 	bl	8014bdc <clust2sect>
 8017154:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8017156:	69bb      	ldr	r3, [r7, #24]
 8017158:	2b00      	cmp	r3, #0
 801715a:	d104      	bne.n	8017166 <f_read+0x12a>
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	2202      	movs	r2, #2
 8017160:	755a      	strb	r2, [r3, #21]
 8017162:	2302      	movs	r3, #2
 8017164:	e0c5      	b.n	80172f2 <f_read+0x2b6>
			sect += csect;
 8017166:	69ba      	ldr	r2, [r7, #24]
 8017168:	69fb      	ldr	r3, [r7, #28]
 801716a:	4413      	add	r3, r2
 801716c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801716e:	697b      	ldr	r3, [r7, #20]
 8017170:	899b      	ldrh	r3, [r3, #12]
 8017172:	461a      	mov	r2, r3
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	fbb3 f3f2 	udiv	r3, r3, r2
 801717a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801717c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801717e:	2b00      	cmp	r3, #0
 8017180:	d041      	beq.n	8017206 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8017182:	69fa      	ldr	r2, [r7, #28]
 8017184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017186:	4413      	add	r3, r2
 8017188:	697a      	ldr	r2, [r7, #20]
 801718a:	8952      	ldrh	r2, [r2, #10]
 801718c:	4293      	cmp	r3, r2
 801718e:	d905      	bls.n	801719c <f_read+0x160>
					cc = fs->csize - csect;
 8017190:	697b      	ldr	r3, [r7, #20]
 8017192:	895b      	ldrh	r3, [r3, #10]
 8017194:	461a      	mov	r2, r3
 8017196:	69fb      	ldr	r3, [r7, #28]
 8017198:	1ad3      	subs	r3, r2, r3
 801719a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801719c:	697b      	ldr	r3, [r7, #20]
 801719e:	7858      	ldrb	r0, [r3, #1]
 80171a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171a2:	69ba      	ldr	r2, [r7, #24]
 80171a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80171a6:	f7fd f96d 	bl	8014484 <disk_read>
 80171aa:	4603      	mov	r3, r0
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d004      	beq.n	80171ba <f_read+0x17e>
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	2201      	movs	r2, #1
 80171b4:	755a      	strb	r2, [r3, #21]
 80171b6:	2301      	movs	r3, #1
 80171b8:	e09b      	b.n	80172f2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	7d1b      	ldrb	r3, [r3, #20]
 80171be:	b25b      	sxtb	r3, r3
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	da18      	bge.n	80171f6 <f_read+0x1ba>
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	6a1a      	ldr	r2, [r3, #32]
 80171c8:	69bb      	ldr	r3, [r7, #24]
 80171ca:	1ad3      	subs	r3, r2, r3
 80171cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80171ce:	429a      	cmp	r2, r3
 80171d0:	d911      	bls.n	80171f6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	6a1a      	ldr	r2, [r3, #32]
 80171d6:	69bb      	ldr	r3, [r7, #24]
 80171d8:	1ad3      	subs	r3, r2, r3
 80171da:	697a      	ldr	r2, [r7, #20]
 80171dc:	8992      	ldrh	r2, [r2, #12]
 80171de:	fb02 f303 	mul.w	r3, r2, r3
 80171e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80171e4:	18d0      	adds	r0, r2, r3
 80171e6:	68fb      	ldr	r3, [r7, #12]
 80171e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80171ec:	697b      	ldr	r3, [r7, #20]
 80171ee:	899b      	ldrh	r3, [r3, #12]
 80171f0:	461a      	mov	r2, r3
 80171f2:	f7fd fa27 	bl	8014644 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80171f6:	697b      	ldr	r3, [r7, #20]
 80171f8:	899b      	ldrh	r3, [r3, #12]
 80171fa:	461a      	mov	r2, r3
 80171fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171fe:	fb02 f303 	mul.w	r3, r2, r3
 8017202:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8017204:	e05c      	b.n	80172c0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	6a1b      	ldr	r3, [r3, #32]
 801720a:	69ba      	ldr	r2, [r7, #24]
 801720c:	429a      	cmp	r2, r3
 801720e:	d02e      	beq.n	801726e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	7d1b      	ldrb	r3, [r3, #20]
 8017214:	b25b      	sxtb	r3, r3
 8017216:	2b00      	cmp	r3, #0
 8017218:	da18      	bge.n	801724c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801721a:	697b      	ldr	r3, [r7, #20]
 801721c:	7858      	ldrb	r0, [r3, #1]
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	6a1a      	ldr	r2, [r3, #32]
 8017228:	2301      	movs	r3, #1
 801722a:	f7fd f94b 	bl	80144c4 <disk_write>
 801722e:	4603      	mov	r3, r0
 8017230:	2b00      	cmp	r3, #0
 8017232:	d004      	beq.n	801723e <f_read+0x202>
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	2201      	movs	r2, #1
 8017238:	755a      	strb	r2, [r3, #21]
 801723a:	2301      	movs	r3, #1
 801723c:	e059      	b.n	80172f2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	7d1b      	ldrb	r3, [r3, #20]
 8017242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017246:	b2da      	uxtb	r2, r3
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801724c:	697b      	ldr	r3, [r7, #20]
 801724e:	7858      	ldrb	r0, [r3, #1]
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017256:	2301      	movs	r3, #1
 8017258:	69ba      	ldr	r2, [r7, #24]
 801725a:	f7fd f913 	bl	8014484 <disk_read>
 801725e:	4603      	mov	r3, r0
 8017260:	2b00      	cmp	r3, #0
 8017262:	d004      	beq.n	801726e <f_read+0x232>
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	2201      	movs	r2, #1
 8017268:	755a      	strb	r2, [r3, #21]
 801726a:	2301      	movs	r3, #1
 801726c:	e041      	b.n	80172f2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	69ba      	ldr	r2, [r7, #24]
 8017272:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8017274:	697b      	ldr	r3, [r7, #20]
 8017276:	899b      	ldrh	r3, [r3, #12]
 8017278:	4618      	mov	r0, r3
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	699b      	ldr	r3, [r3, #24]
 801727e:	697a      	ldr	r2, [r7, #20]
 8017280:	8992      	ldrh	r2, [r2, #12]
 8017282:	fbb3 f1f2 	udiv	r1, r3, r2
 8017286:	fb01 f202 	mul.w	r2, r1, r2
 801728a:	1a9b      	subs	r3, r3, r2
 801728c:	1ac3      	subs	r3, r0, r3
 801728e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8017290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	429a      	cmp	r2, r3
 8017296:	d901      	bls.n	801729c <f_read+0x260>
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	699b      	ldr	r3, [r3, #24]
 80172a6:	697a      	ldr	r2, [r7, #20]
 80172a8:	8992      	ldrh	r2, [r2, #12]
 80172aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80172ae:	fb00 f202 	mul.w	r2, r0, r2
 80172b2:	1a9b      	subs	r3, r3, r2
 80172b4:	440b      	add	r3, r1
 80172b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80172b8:	4619      	mov	r1, r3
 80172ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80172bc:	f7fd f9c2 	bl	8014644 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80172c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80172c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172c4:	4413      	add	r3, r2
 80172c6:	627b      	str	r3, [r7, #36]	; 0x24
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	699a      	ldr	r2, [r3, #24]
 80172cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172ce:	441a      	add	r2, r3
 80172d0:	68fb      	ldr	r3, [r7, #12]
 80172d2:	619a      	str	r2, [r3, #24]
 80172d4:	683b      	ldr	r3, [r7, #0]
 80172d6:	681a      	ldr	r2, [r3, #0]
 80172d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172da:	441a      	add	r2, r3
 80172dc:	683b      	ldr	r3, [r7, #0]
 80172de:	601a      	str	r2, [r3, #0]
 80172e0:	687a      	ldr	r2, [r7, #4]
 80172e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172e4:	1ad3      	subs	r3, r2, r3
 80172e6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	f47f aee1 	bne.w	80170b2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80172f0:	2300      	movs	r3, #0
}
 80172f2:	4618      	mov	r0, r3
 80172f4:	3738      	adds	r7, #56	; 0x38
 80172f6:	46bd      	mov	sp, r7
 80172f8:	bd80      	pop	{r7, pc}

080172fa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80172fa:	b580      	push	{r7, lr}
 80172fc:	b08c      	sub	sp, #48	; 0x30
 80172fe:	af00      	add	r7, sp, #0
 8017300:	60f8      	str	r0, [r7, #12]
 8017302:	60b9      	str	r1, [r7, #8]
 8017304:	607a      	str	r2, [r7, #4]
 8017306:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8017308:	68bb      	ldr	r3, [r7, #8]
 801730a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801730c:	683b      	ldr	r3, [r7, #0]
 801730e:	2200      	movs	r2, #0
 8017310:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	f107 0210 	add.w	r2, r7, #16
 8017318:	4611      	mov	r1, r2
 801731a:	4618      	mov	r0, r3
 801731c:	f7ff fc46 	bl	8016bac <validate>
 8017320:	4603      	mov	r3, r0
 8017322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8017326:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801732a:	2b00      	cmp	r3, #0
 801732c:	d107      	bne.n	801733e <f_write+0x44>
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	7d5b      	ldrb	r3, [r3, #21]
 8017332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8017336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801733a:	2b00      	cmp	r3, #0
 801733c:	d002      	beq.n	8017344 <f_write+0x4a>
 801733e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017342:	e16a      	b.n	801761a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8017344:	68fb      	ldr	r3, [r7, #12]
 8017346:	7d1b      	ldrb	r3, [r3, #20]
 8017348:	f003 0302 	and.w	r3, r3, #2
 801734c:	2b00      	cmp	r3, #0
 801734e:	d101      	bne.n	8017354 <f_write+0x5a>
 8017350:	2307      	movs	r3, #7
 8017352:	e162      	b.n	801761a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	699a      	ldr	r2, [r3, #24]
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	441a      	add	r2, r3
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	699b      	ldr	r3, [r3, #24]
 8017360:	429a      	cmp	r2, r3
 8017362:	f080 814c 	bcs.w	80175fe <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8017366:	68fb      	ldr	r3, [r7, #12]
 8017368:	699b      	ldr	r3, [r3, #24]
 801736a:	43db      	mvns	r3, r3
 801736c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801736e:	e146      	b.n	80175fe <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8017370:	68fb      	ldr	r3, [r7, #12]
 8017372:	699b      	ldr	r3, [r3, #24]
 8017374:	693a      	ldr	r2, [r7, #16]
 8017376:	8992      	ldrh	r2, [r2, #12]
 8017378:	fbb3 f1f2 	udiv	r1, r3, r2
 801737c:	fb01 f202 	mul.w	r2, r1, r2
 8017380:	1a9b      	subs	r3, r3, r2
 8017382:	2b00      	cmp	r3, #0
 8017384:	f040 80f1 	bne.w	801756a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	699b      	ldr	r3, [r3, #24]
 801738c:	693a      	ldr	r2, [r7, #16]
 801738e:	8992      	ldrh	r2, [r2, #12]
 8017390:	fbb3 f3f2 	udiv	r3, r3, r2
 8017394:	693a      	ldr	r2, [r7, #16]
 8017396:	8952      	ldrh	r2, [r2, #10]
 8017398:	3a01      	subs	r2, #1
 801739a:	4013      	ands	r3, r2
 801739c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801739e:	69bb      	ldr	r3, [r7, #24]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d143      	bne.n	801742c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	699b      	ldr	r3, [r3, #24]
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d10c      	bne.n	80173c6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	689b      	ldr	r3, [r3, #8]
 80173b0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80173b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d11a      	bne.n	80173ee <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80173b8:	68fb      	ldr	r3, [r7, #12]
 80173ba:	2100      	movs	r1, #0
 80173bc:	4618      	mov	r0, r3
 80173be:	f7fd fe7f 	bl	80150c0 <create_chain>
 80173c2:	62b8      	str	r0, [r7, #40]	; 0x28
 80173c4:	e013      	b.n	80173ee <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d007      	beq.n	80173de <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	699b      	ldr	r3, [r3, #24]
 80173d2:	4619      	mov	r1, r3
 80173d4:	68f8      	ldr	r0, [r7, #12]
 80173d6:	f7fd ff0b 	bl	80151f0 <clmt_clust>
 80173da:	62b8      	str	r0, [r7, #40]	; 0x28
 80173dc:	e007      	b.n	80173ee <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80173de:	68fa      	ldr	r2, [r7, #12]
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	69db      	ldr	r3, [r3, #28]
 80173e4:	4619      	mov	r1, r3
 80173e6:	4610      	mov	r0, r2
 80173e8:	f7fd fe6a 	bl	80150c0 <create_chain>
 80173ec:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80173ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	f000 8109 	beq.w	8017608 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80173f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173f8:	2b01      	cmp	r3, #1
 80173fa:	d104      	bne.n	8017406 <f_write+0x10c>
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	2202      	movs	r2, #2
 8017400:	755a      	strb	r2, [r3, #21]
 8017402:	2302      	movs	r3, #2
 8017404:	e109      	b.n	801761a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801740c:	d104      	bne.n	8017418 <f_write+0x11e>
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	2201      	movs	r2, #1
 8017412:	755a      	strb	r2, [r3, #21]
 8017414:	2301      	movs	r3, #1
 8017416:	e100      	b.n	801761a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8017418:	68fb      	ldr	r3, [r7, #12]
 801741a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801741c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	689b      	ldr	r3, [r3, #8]
 8017422:	2b00      	cmp	r3, #0
 8017424:	d102      	bne.n	801742c <f_write+0x132>
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801742a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	7d1b      	ldrb	r3, [r3, #20]
 8017430:	b25b      	sxtb	r3, r3
 8017432:	2b00      	cmp	r3, #0
 8017434:	da18      	bge.n	8017468 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017436:	693b      	ldr	r3, [r7, #16]
 8017438:	7858      	ldrb	r0, [r3, #1]
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	6a1a      	ldr	r2, [r3, #32]
 8017444:	2301      	movs	r3, #1
 8017446:	f7fd f83d 	bl	80144c4 <disk_write>
 801744a:	4603      	mov	r3, r0
 801744c:	2b00      	cmp	r3, #0
 801744e:	d004      	beq.n	801745a <f_write+0x160>
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	2201      	movs	r2, #1
 8017454:	755a      	strb	r2, [r3, #21]
 8017456:	2301      	movs	r3, #1
 8017458:	e0df      	b.n	801761a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801745a:	68fb      	ldr	r3, [r7, #12]
 801745c:	7d1b      	ldrb	r3, [r3, #20]
 801745e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017462:	b2da      	uxtb	r2, r3
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8017468:	693a      	ldr	r2, [r7, #16]
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	69db      	ldr	r3, [r3, #28]
 801746e:	4619      	mov	r1, r3
 8017470:	4610      	mov	r0, r2
 8017472:	f7fd fbb3 	bl	8014bdc <clust2sect>
 8017476:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8017478:	697b      	ldr	r3, [r7, #20]
 801747a:	2b00      	cmp	r3, #0
 801747c:	d104      	bne.n	8017488 <f_write+0x18e>
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	2202      	movs	r2, #2
 8017482:	755a      	strb	r2, [r3, #21]
 8017484:	2302      	movs	r3, #2
 8017486:	e0c8      	b.n	801761a <f_write+0x320>
			sect += csect;
 8017488:	697a      	ldr	r2, [r7, #20]
 801748a:	69bb      	ldr	r3, [r7, #24]
 801748c:	4413      	add	r3, r2
 801748e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8017490:	693b      	ldr	r3, [r7, #16]
 8017492:	899b      	ldrh	r3, [r3, #12]
 8017494:	461a      	mov	r2, r3
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	fbb3 f3f2 	udiv	r3, r3, r2
 801749c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801749e:	6a3b      	ldr	r3, [r7, #32]
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d043      	beq.n	801752c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80174a4:	69ba      	ldr	r2, [r7, #24]
 80174a6:	6a3b      	ldr	r3, [r7, #32]
 80174a8:	4413      	add	r3, r2
 80174aa:	693a      	ldr	r2, [r7, #16]
 80174ac:	8952      	ldrh	r2, [r2, #10]
 80174ae:	4293      	cmp	r3, r2
 80174b0:	d905      	bls.n	80174be <f_write+0x1c4>
					cc = fs->csize - csect;
 80174b2:	693b      	ldr	r3, [r7, #16]
 80174b4:	895b      	ldrh	r3, [r3, #10]
 80174b6:	461a      	mov	r2, r3
 80174b8:	69bb      	ldr	r3, [r7, #24]
 80174ba:	1ad3      	subs	r3, r2, r3
 80174bc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80174be:	693b      	ldr	r3, [r7, #16]
 80174c0:	7858      	ldrb	r0, [r3, #1]
 80174c2:	6a3b      	ldr	r3, [r7, #32]
 80174c4:	697a      	ldr	r2, [r7, #20]
 80174c6:	69f9      	ldr	r1, [r7, #28]
 80174c8:	f7fc fffc 	bl	80144c4 <disk_write>
 80174cc:	4603      	mov	r3, r0
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d004      	beq.n	80174dc <f_write+0x1e2>
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	2201      	movs	r2, #1
 80174d6:	755a      	strb	r2, [r3, #21]
 80174d8:	2301      	movs	r3, #1
 80174da:	e09e      	b.n	801761a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	6a1a      	ldr	r2, [r3, #32]
 80174e0:	697b      	ldr	r3, [r7, #20]
 80174e2:	1ad3      	subs	r3, r2, r3
 80174e4:	6a3a      	ldr	r2, [r7, #32]
 80174e6:	429a      	cmp	r2, r3
 80174e8:	d918      	bls.n	801751c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80174ea:	68fb      	ldr	r3, [r7, #12]
 80174ec:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	6a1a      	ldr	r2, [r3, #32]
 80174f4:	697b      	ldr	r3, [r7, #20]
 80174f6:	1ad3      	subs	r3, r2, r3
 80174f8:	693a      	ldr	r2, [r7, #16]
 80174fa:	8992      	ldrh	r2, [r2, #12]
 80174fc:	fb02 f303 	mul.w	r3, r2, r3
 8017500:	69fa      	ldr	r2, [r7, #28]
 8017502:	18d1      	adds	r1, r2, r3
 8017504:	693b      	ldr	r3, [r7, #16]
 8017506:	899b      	ldrh	r3, [r3, #12]
 8017508:	461a      	mov	r2, r3
 801750a:	f7fd f89b 	bl	8014644 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801750e:	68fb      	ldr	r3, [r7, #12]
 8017510:	7d1b      	ldrb	r3, [r3, #20]
 8017512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017516:	b2da      	uxtb	r2, r3
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801751c:	693b      	ldr	r3, [r7, #16]
 801751e:	899b      	ldrh	r3, [r3, #12]
 8017520:	461a      	mov	r2, r3
 8017522:	6a3b      	ldr	r3, [r7, #32]
 8017524:	fb02 f303 	mul.w	r3, r2, r3
 8017528:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801752a:	e04b      	b.n	80175c4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	6a1b      	ldr	r3, [r3, #32]
 8017530:	697a      	ldr	r2, [r7, #20]
 8017532:	429a      	cmp	r2, r3
 8017534:	d016      	beq.n	8017564 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	699a      	ldr	r2, [r3, #24]
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801753e:	429a      	cmp	r2, r3
 8017540:	d210      	bcs.n	8017564 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8017542:	693b      	ldr	r3, [r7, #16]
 8017544:	7858      	ldrb	r0, [r3, #1]
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801754c:	2301      	movs	r3, #1
 801754e:	697a      	ldr	r2, [r7, #20]
 8017550:	f7fc ff98 	bl	8014484 <disk_read>
 8017554:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8017556:	2b00      	cmp	r3, #0
 8017558:	d004      	beq.n	8017564 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	2201      	movs	r2, #1
 801755e:	755a      	strb	r2, [r3, #21]
 8017560:	2301      	movs	r3, #1
 8017562:	e05a      	b.n	801761a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	697a      	ldr	r2, [r7, #20]
 8017568:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801756a:	693b      	ldr	r3, [r7, #16]
 801756c:	899b      	ldrh	r3, [r3, #12]
 801756e:	4618      	mov	r0, r3
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	699b      	ldr	r3, [r3, #24]
 8017574:	693a      	ldr	r2, [r7, #16]
 8017576:	8992      	ldrh	r2, [r2, #12]
 8017578:	fbb3 f1f2 	udiv	r1, r3, r2
 801757c:	fb01 f202 	mul.w	r2, r1, r2
 8017580:	1a9b      	subs	r3, r3, r2
 8017582:	1ac3      	subs	r3, r0, r3
 8017584:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8017586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	429a      	cmp	r2, r3
 801758c:	d901      	bls.n	8017592 <f_write+0x298>
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017598:	68fb      	ldr	r3, [r7, #12]
 801759a:	699b      	ldr	r3, [r3, #24]
 801759c:	693a      	ldr	r2, [r7, #16]
 801759e:	8992      	ldrh	r2, [r2, #12]
 80175a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80175a4:	fb00 f202 	mul.w	r2, r0, r2
 80175a8:	1a9b      	subs	r3, r3, r2
 80175aa:	440b      	add	r3, r1
 80175ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80175ae:	69f9      	ldr	r1, [r7, #28]
 80175b0:	4618      	mov	r0, r3
 80175b2:	f7fd f847 	bl	8014644 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	7d1b      	ldrb	r3, [r3, #20]
 80175ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80175be:	b2da      	uxtb	r2, r3
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80175c4:	69fa      	ldr	r2, [r7, #28]
 80175c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175c8:	4413      	add	r3, r2
 80175ca:	61fb      	str	r3, [r7, #28]
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	699a      	ldr	r2, [r3, #24]
 80175d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175d2:	441a      	add	r2, r3
 80175d4:	68fb      	ldr	r3, [r7, #12]
 80175d6:	619a      	str	r2, [r3, #24]
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	68da      	ldr	r2, [r3, #12]
 80175dc:	68fb      	ldr	r3, [r7, #12]
 80175de:	699b      	ldr	r3, [r3, #24]
 80175e0:	429a      	cmp	r2, r3
 80175e2:	bf38      	it	cc
 80175e4:	461a      	movcc	r2, r3
 80175e6:	68fb      	ldr	r3, [r7, #12]
 80175e8:	60da      	str	r2, [r3, #12]
 80175ea:	683b      	ldr	r3, [r7, #0]
 80175ec:	681a      	ldr	r2, [r3, #0]
 80175ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175f0:	441a      	add	r2, r3
 80175f2:	683b      	ldr	r3, [r7, #0]
 80175f4:	601a      	str	r2, [r3, #0]
 80175f6:	687a      	ldr	r2, [r7, #4]
 80175f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175fa:	1ad3      	subs	r3, r2, r3
 80175fc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	2b00      	cmp	r3, #0
 8017602:	f47f aeb5 	bne.w	8017370 <f_write+0x76>
 8017606:	e000      	b.n	801760a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8017608:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	7d1b      	ldrb	r3, [r3, #20]
 801760e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017612:	b2da      	uxtb	r2, r3
 8017614:	68fb      	ldr	r3, [r7, #12]
 8017616:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8017618:	2300      	movs	r3, #0
}
 801761a:	4618      	mov	r0, r3
 801761c:	3730      	adds	r7, #48	; 0x30
 801761e:	46bd      	mov	sp, r7
 8017620:	bd80      	pop	{r7, pc}

08017622 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8017622:	b580      	push	{r7, lr}
 8017624:	b086      	sub	sp, #24
 8017626:	af00      	add	r7, sp, #0
 8017628:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	f107 0208 	add.w	r2, r7, #8
 8017630:	4611      	mov	r1, r2
 8017632:	4618      	mov	r0, r3
 8017634:	f7ff faba 	bl	8016bac <validate>
 8017638:	4603      	mov	r3, r0
 801763a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801763c:	7dfb      	ldrb	r3, [r7, #23]
 801763e:	2b00      	cmp	r3, #0
 8017640:	d168      	bne.n	8017714 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	7d1b      	ldrb	r3, [r3, #20]
 8017646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801764a:	2b00      	cmp	r3, #0
 801764c:	d062      	beq.n	8017714 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	7d1b      	ldrb	r3, [r3, #20]
 8017652:	b25b      	sxtb	r3, r3
 8017654:	2b00      	cmp	r3, #0
 8017656:	da15      	bge.n	8017684 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8017658:	68bb      	ldr	r3, [r7, #8]
 801765a:	7858      	ldrb	r0, [r3, #1]
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	6a1a      	ldr	r2, [r3, #32]
 8017666:	2301      	movs	r3, #1
 8017668:	f7fc ff2c 	bl	80144c4 <disk_write>
 801766c:	4603      	mov	r3, r0
 801766e:	2b00      	cmp	r3, #0
 8017670:	d001      	beq.n	8017676 <f_sync+0x54>
 8017672:	2301      	movs	r3, #1
 8017674:	e04f      	b.n	8017716 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	7d1b      	ldrb	r3, [r3, #20]
 801767a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801767e:	b2da      	uxtb	r2, r3
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8017684:	f7fc f860 	bl	8013748 <get_fattime>
 8017688:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801768a:	68ba      	ldr	r2, [r7, #8]
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017690:	4619      	mov	r1, r3
 8017692:	4610      	mov	r0, r2
 8017694:	f7fd fa04 	bl	8014aa0 <move_window>
 8017698:	4603      	mov	r3, r0
 801769a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801769c:	7dfb      	ldrb	r3, [r7, #23]
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d138      	bne.n	8017714 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80176a6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	330b      	adds	r3, #11
 80176ac:	781a      	ldrb	r2, [r3, #0]
 80176ae:	68fb      	ldr	r3, [r7, #12]
 80176b0:	330b      	adds	r3, #11
 80176b2:	f042 0220 	orr.w	r2, r2, #32
 80176b6:	b2d2      	uxtb	r2, r2
 80176b8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	6818      	ldr	r0, [r3, #0]
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	689b      	ldr	r3, [r3, #8]
 80176c2:	461a      	mov	r2, r3
 80176c4:	68f9      	ldr	r1, [r7, #12]
 80176c6:	f7fd ff90 	bl	80155ea <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	f103 021c 	add.w	r2, r3, #28
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	68db      	ldr	r3, [r3, #12]
 80176d4:	4619      	mov	r1, r3
 80176d6:	4610      	mov	r0, r2
 80176d8:	f7fc ff88 	bl	80145ec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	3316      	adds	r3, #22
 80176e0:	6939      	ldr	r1, [r7, #16]
 80176e2:	4618      	mov	r0, r3
 80176e4:	f7fc ff82 	bl	80145ec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80176e8:	68fb      	ldr	r3, [r7, #12]
 80176ea:	3312      	adds	r3, #18
 80176ec:	2100      	movs	r1, #0
 80176ee:	4618      	mov	r0, r3
 80176f0:	f7fc ff61 	bl	80145b6 <st_word>
					fs->wflag = 1;
 80176f4:	68bb      	ldr	r3, [r7, #8]
 80176f6:	2201      	movs	r2, #1
 80176f8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80176fa:	68bb      	ldr	r3, [r7, #8]
 80176fc:	4618      	mov	r0, r3
 80176fe:	f7fd f9fd 	bl	8014afc <sync_fs>
 8017702:	4603      	mov	r3, r0
 8017704:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	7d1b      	ldrb	r3, [r3, #20]
 801770a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801770e:	b2da      	uxtb	r2, r3
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8017714:	7dfb      	ldrb	r3, [r7, #23]
}
 8017716:	4618      	mov	r0, r3
 8017718:	3718      	adds	r7, #24
 801771a:	46bd      	mov	sp, r7
 801771c:	bd80      	pop	{r7, pc}

0801771e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801771e:	b580      	push	{r7, lr}
 8017720:	b084      	sub	sp, #16
 8017722:	af00      	add	r7, sp, #0
 8017724:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8017726:	6878      	ldr	r0, [r7, #4]
 8017728:	f7ff ff7b 	bl	8017622 <f_sync>
 801772c:	4603      	mov	r3, r0
 801772e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8017730:	7bfb      	ldrb	r3, [r7, #15]
 8017732:	2b00      	cmp	r3, #0
 8017734:	d118      	bne.n	8017768 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	f107 0208 	add.w	r2, r7, #8
 801773c:	4611      	mov	r1, r2
 801773e:	4618      	mov	r0, r3
 8017740:	f7ff fa34 	bl	8016bac <validate>
 8017744:	4603      	mov	r3, r0
 8017746:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8017748:	7bfb      	ldrb	r3, [r7, #15]
 801774a:	2b00      	cmp	r3, #0
 801774c:	d10c      	bne.n	8017768 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	691b      	ldr	r3, [r3, #16]
 8017752:	4618      	mov	r0, r3
 8017754:	f7fd f900 	bl	8014958 <dec_lock>
 8017758:	4603      	mov	r3, r0
 801775a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801775c:	7bfb      	ldrb	r3, [r7, #15]
 801775e:	2b00      	cmp	r3, #0
 8017760:	d102      	bne.n	8017768 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	2200      	movs	r2, #0
 8017766:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8017768:	7bfb      	ldrb	r3, [r7, #15]
}
 801776a:	4618      	mov	r0, r3
 801776c:	3710      	adds	r7, #16
 801776e:	46bd      	mov	sp, r7
 8017770:	bd80      	pop	{r7, pc}

08017772 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8017772:	b580      	push	{r7, lr}
 8017774:	b090      	sub	sp, #64	; 0x40
 8017776:	af00      	add	r7, sp, #0
 8017778:	6078      	str	r0, [r7, #4]
 801777a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	f107 0208 	add.w	r2, r7, #8
 8017782:	4611      	mov	r1, r2
 8017784:	4618      	mov	r0, r3
 8017786:	f7ff fa11 	bl	8016bac <validate>
 801778a:	4603      	mov	r3, r0
 801778c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8017790:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017794:	2b00      	cmp	r3, #0
 8017796:	d103      	bne.n	80177a0 <f_lseek+0x2e>
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	7d5b      	ldrb	r3, [r3, #21]
 801779c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80177a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d002      	beq.n	80177ae <f_lseek+0x3c>
 80177a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80177ac:	e201      	b.n	8017bb2 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	f000 80d9 	beq.w	801796a <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80177b8:	683b      	ldr	r3, [r7, #0]
 80177ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80177be:	d15a      	bne.n	8017876 <f_lseek+0x104>
			tbl = fp->cltbl;
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177c4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80177c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177c8:	1d1a      	adds	r2, r3, #4
 80177ca:	627a      	str	r2, [r7, #36]	; 0x24
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	617b      	str	r3, [r7, #20]
 80177d0:	2302      	movs	r3, #2
 80177d2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	689b      	ldr	r3, [r3, #8]
 80177d8:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80177da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d03a      	beq.n	8017856 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80177e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177e2:	613b      	str	r3, [r7, #16]
 80177e4:	2300      	movs	r3, #0
 80177e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80177e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177ea:	3302      	adds	r3, #2
 80177ec:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80177ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177f0:	60fb      	str	r3, [r7, #12]
 80177f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177f4:	3301      	adds	r3, #1
 80177f6:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80177fc:	4618      	mov	r0, r3
 80177fe:	f7fd fa0c 	bl	8014c1a <get_fat>
 8017802:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8017804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017806:	2b01      	cmp	r3, #1
 8017808:	d804      	bhi.n	8017814 <f_lseek+0xa2>
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	2202      	movs	r2, #2
 801780e:	755a      	strb	r2, [r3, #21]
 8017810:	2302      	movs	r3, #2
 8017812:	e1ce      	b.n	8017bb2 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017816:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801781a:	d104      	bne.n	8017826 <f_lseek+0xb4>
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	2201      	movs	r2, #1
 8017820:	755a      	strb	r2, [r3, #21]
 8017822:	2301      	movs	r3, #1
 8017824:	e1c5      	b.n	8017bb2 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8017826:	68fb      	ldr	r3, [r7, #12]
 8017828:	3301      	adds	r3, #1
 801782a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801782c:	429a      	cmp	r2, r3
 801782e:	d0de      	beq.n	80177ee <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8017830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017832:	697b      	ldr	r3, [r7, #20]
 8017834:	429a      	cmp	r2, r3
 8017836:	d809      	bhi.n	801784c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8017838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801783a:	1d1a      	adds	r2, r3, #4
 801783c:	627a      	str	r2, [r7, #36]	; 0x24
 801783e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017840:	601a      	str	r2, [r3, #0]
 8017842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017844:	1d1a      	adds	r2, r3, #4
 8017846:	627a      	str	r2, [r7, #36]	; 0x24
 8017848:	693a      	ldr	r2, [r7, #16]
 801784a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801784c:	68bb      	ldr	r3, [r7, #8]
 801784e:	69db      	ldr	r3, [r3, #28]
 8017850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017852:	429a      	cmp	r2, r3
 8017854:	d3c4      	bcc.n	80177e0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801785a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801785c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801785e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017860:	697b      	ldr	r3, [r7, #20]
 8017862:	429a      	cmp	r2, r3
 8017864:	d803      	bhi.n	801786e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8017866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017868:	2200      	movs	r2, #0
 801786a:	601a      	str	r2, [r3, #0]
 801786c:	e19f      	b.n	8017bae <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801786e:	2311      	movs	r3, #17
 8017870:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8017874:	e19b      	b.n	8017bae <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	68db      	ldr	r3, [r3, #12]
 801787a:	683a      	ldr	r2, [r7, #0]
 801787c:	429a      	cmp	r2, r3
 801787e:	d902      	bls.n	8017886 <f_lseek+0x114>
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	68db      	ldr	r3, [r3, #12]
 8017884:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	683a      	ldr	r2, [r7, #0]
 801788a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801788c:	683b      	ldr	r3, [r7, #0]
 801788e:	2b00      	cmp	r3, #0
 8017890:	f000 818d 	beq.w	8017bae <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8017894:	683b      	ldr	r3, [r7, #0]
 8017896:	3b01      	subs	r3, #1
 8017898:	4619      	mov	r1, r3
 801789a:	6878      	ldr	r0, [r7, #4]
 801789c:	f7fd fca8 	bl	80151f0 <clmt_clust>
 80178a0:	4602      	mov	r2, r0
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80178a6:	68ba      	ldr	r2, [r7, #8]
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	69db      	ldr	r3, [r3, #28]
 80178ac:	4619      	mov	r1, r3
 80178ae:	4610      	mov	r0, r2
 80178b0:	f7fd f994 	bl	8014bdc <clust2sect>
 80178b4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80178b6:	69bb      	ldr	r3, [r7, #24]
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d104      	bne.n	80178c6 <f_lseek+0x154>
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	2202      	movs	r2, #2
 80178c0:	755a      	strb	r2, [r3, #21]
 80178c2:	2302      	movs	r3, #2
 80178c4:	e175      	b.n	8017bb2 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80178c6:	683b      	ldr	r3, [r7, #0]
 80178c8:	3b01      	subs	r3, #1
 80178ca:	68ba      	ldr	r2, [r7, #8]
 80178cc:	8992      	ldrh	r2, [r2, #12]
 80178ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80178d2:	68ba      	ldr	r2, [r7, #8]
 80178d4:	8952      	ldrh	r2, [r2, #10]
 80178d6:	3a01      	subs	r2, #1
 80178d8:	4013      	ands	r3, r2
 80178da:	69ba      	ldr	r2, [r7, #24]
 80178dc:	4413      	add	r3, r2
 80178de:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	699b      	ldr	r3, [r3, #24]
 80178e4:	68ba      	ldr	r2, [r7, #8]
 80178e6:	8992      	ldrh	r2, [r2, #12]
 80178e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80178ec:	fb01 f202 	mul.w	r2, r1, r2
 80178f0:	1a9b      	subs	r3, r3, r2
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	f000 815b 	beq.w	8017bae <f_lseek+0x43c>
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	6a1b      	ldr	r3, [r3, #32]
 80178fc:	69ba      	ldr	r2, [r7, #24]
 80178fe:	429a      	cmp	r2, r3
 8017900:	f000 8155 	beq.w	8017bae <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	7d1b      	ldrb	r3, [r3, #20]
 8017908:	b25b      	sxtb	r3, r3
 801790a:	2b00      	cmp	r3, #0
 801790c:	da18      	bge.n	8017940 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801790e:	68bb      	ldr	r3, [r7, #8]
 8017910:	7858      	ldrb	r0, [r3, #1]
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	6a1a      	ldr	r2, [r3, #32]
 801791c:	2301      	movs	r3, #1
 801791e:	f7fc fdd1 	bl	80144c4 <disk_write>
 8017922:	4603      	mov	r3, r0
 8017924:	2b00      	cmp	r3, #0
 8017926:	d004      	beq.n	8017932 <f_lseek+0x1c0>
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	2201      	movs	r2, #1
 801792c:	755a      	strb	r2, [r3, #21]
 801792e:	2301      	movs	r3, #1
 8017930:	e13f      	b.n	8017bb2 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	7d1b      	ldrb	r3, [r3, #20]
 8017936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801793a:	b2da      	uxtb	r2, r3
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8017940:	68bb      	ldr	r3, [r7, #8]
 8017942:	7858      	ldrb	r0, [r3, #1]
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801794a:	2301      	movs	r3, #1
 801794c:	69ba      	ldr	r2, [r7, #24]
 801794e:	f7fc fd99 	bl	8014484 <disk_read>
 8017952:	4603      	mov	r3, r0
 8017954:	2b00      	cmp	r3, #0
 8017956:	d004      	beq.n	8017962 <f_lseek+0x1f0>
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	2201      	movs	r2, #1
 801795c:	755a      	strb	r2, [r3, #21]
 801795e:	2301      	movs	r3, #1
 8017960:	e127      	b.n	8017bb2 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	69ba      	ldr	r2, [r7, #24]
 8017966:	621a      	str	r2, [r3, #32]
 8017968:	e121      	b.n	8017bae <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	68db      	ldr	r3, [r3, #12]
 801796e:	683a      	ldr	r2, [r7, #0]
 8017970:	429a      	cmp	r2, r3
 8017972:	d908      	bls.n	8017986 <f_lseek+0x214>
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	7d1b      	ldrb	r3, [r3, #20]
 8017978:	f003 0302 	and.w	r3, r3, #2
 801797c:	2b00      	cmp	r3, #0
 801797e:	d102      	bne.n	8017986 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	68db      	ldr	r3, [r3, #12]
 8017984:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	699b      	ldr	r3, [r3, #24]
 801798a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801798c:	2300      	movs	r3, #0
 801798e:	637b      	str	r3, [r7, #52]	; 0x34
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017994:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8017996:	683b      	ldr	r3, [r7, #0]
 8017998:	2b00      	cmp	r3, #0
 801799a:	f000 80b5 	beq.w	8017b08 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801799e:	68bb      	ldr	r3, [r7, #8]
 80179a0:	895b      	ldrh	r3, [r3, #10]
 80179a2:	461a      	mov	r2, r3
 80179a4:	68bb      	ldr	r3, [r7, #8]
 80179a6:	899b      	ldrh	r3, [r3, #12]
 80179a8:	fb02 f303 	mul.w	r3, r2, r3
 80179ac:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80179ae:	6a3b      	ldr	r3, [r7, #32]
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	d01b      	beq.n	80179ec <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80179b4:	683b      	ldr	r3, [r7, #0]
 80179b6:	1e5a      	subs	r2, r3, #1
 80179b8:	69fb      	ldr	r3, [r7, #28]
 80179ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80179be:	6a3b      	ldr	r3, [r7, #32]
 80179c0:	1e59      	subs	r1, r3, #1
 80179c2:	69fb      	ldr	r3, [r7, #28]
 80179c4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80179c8:	429a      	cmp	r2, r3
 80179ca:	d30f      	bcc.n	80179ec <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80179cc:	6a3b      	ldr	r3, [r7, #32]
 80179ce:	1e5a      	subs	r2, r3, #1
 80179d0:	69fb      	ldr	r3, [r7, #28]
 80179d2:	425b      	negs	r3, r3
 80179d4:	401a      	ands	r2, r3
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	699b      	ldr	r3, [r3, #24]
 80179de:	683a      	ldr	r2, [r7, #0]
 80179e0:	1ad3      	subs	r3, r2, r3
 80179e2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	69db      	ldr	r3, [r3, #28]
 80179e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80179ea:	e022      	b.n	8017a32 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	689b      	ldr	r3, [r3, #8]
 80179f0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80179f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d119      	bne.n	8017a2c <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	2100      	movs	r1, #0
 80179fc:	4618      	mov	r0, r3
 80179fe:	f7fd fb5f 	bl	80150c0 <create_chain>
 8017a02:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8017a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a06:	2b01      	cmp	r3, #1
 8017a08:	d104      	bne.n	8017a14 <f_lseek+0x2a2>
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	2202      	movs	r2, #2
 8017a0e:	755a      	strb	r2, [r3, #21]
 8017a10:	2302      	movs	r3, #2
 8017a12:	e0ce      	b.n	8017bb2 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017a1a:	d104      	bne.n	8017a26 <f_lseek+0x2b4>
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	2201      	movs	r2, #1
 8017a20:	755a      	strb	r2, [r3, #21]
 8017a22:	2301      	movs	r3, #1
 8017a24:	e0c5      	b.n	8017bb2 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017a2a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017a30:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8017a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d067      	beq.n	8017b08 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8017a38:	e03a      	b.n	8017ab0 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8017a3a:	683a      	ldr	r2, [r7, #0]
 8017a3c:	69fb      	ldr	r3, [r7, #28]
 8017a3e:	1ad3      	subs	r3, r2, r3
 8017a40:	603b      	str	r3, [r7, #0]
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	699a      	ldr	r2, [r3, #24]
 8017a46:	69fb      	ldr	r3, [r7, #28]
 8017a48:	441a      	add	r2, r3
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	7d1b      	ldrb	r3, [r3, #20]
 8017a52:	f003 0302 	and.w	r3, r3, #2
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d00b      	beq.n	8017a72 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017a5e:	4618      	mov	r0, r3
 8017a60:	f7fd fb2e 	bl	80150c0 <create_chain>
 8017a64:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8017a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d108      	bne.n	8017a7e <f_lseek+0x30c>
							ofs = 0; break;
 8017a6c:	2300      	movs	r3, #0
 8017a6e:	603b      	str	r3, [r7, #0]
 8017a70:	e022      	b.n	8017ab8 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017a76:	4618      	mov	r0, r3
 8017a78:	f7fd f8cf 	bl	8014c1a <get_fat>
 8017a7c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017a84:	d104      	bne.n	8017a90 <f_lseek+0x31e>
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	2201      	movs	r2, #1
 8017a8a:	755a      	strb	r2, [r3, #21]
 8017a8c:	2301      	movs	r3, #1
 8017a8e:	e090      	b.n	8017bb2 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8017a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a92:	2b01      	cmp	r3, #1
 8017a94:	d904      	bls.n	8017aa0 <f_lseek+0x32e>
 8017a96:	68bb      	ldr	r3, [r7, #8]
 8017a98:	69db      	ldr	r3, [r3, #28]
 8017a9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017a9c:	429a      	cmp	r2, r3
 8017a9e:	d304      	bcc.n	8017aaa <f_lseek+0x338>
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	2202      	movs	r2, #2
 8017aa4:	755a      	strb	r2, [r3, #21]
 8017aa6:	2302      	movs	r3, #2
 8017aa8:	e083      	b.n	8017bb2 <f_lseek+0x440>
					fp->clust = clst;
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017aae:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8017ab0:	683a      	ldr	r2, [r7, #0]
 8017ab2:	69fb      	ldr	r3, [r7, #28]
 8017ab4:	429a      	cmp	r2, r3
 8017ab6:	d8c0      	bhi.n	8017a3a <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	699a      	ldr	r2, [r3, #24]
 8017abc:	683b      	ldr	r3, [r7, #0]
 8017abe:	441a      	add	r2, r3
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8017ac4:	68bb      	ldr	r3, [r7, #8]
 8017ac6:	899b      	ldrh	r3, [r3, #12]
 8017ac8:	461a      	mov	r2, r3
 8017aca:	683b      	ldr	r3, [r7, #0]
 8017acc:	fbb3 f1f2 	udiv	r1, r3, r2
 8017ad0:	fb01 f202 	mul.w	r2, r1, r2
 8017ad4:	1a9b      	subs	r3, r3, r2
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d016      	beq.n	8017b08 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8017ada:	68bb      	ldr	r3, [r7, #8]
 8017adc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017ade:	4618      	mov	r0, r3
 8017ae0:	f7fd f87c 	bl	8014bdc <clust2sect>
 8017ae4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8017ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d104      	bne.n	8017af6 <f_lseek+0x384>
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	2202      	movs	r2, #2
 8017af0:	755a      	strb	r2, [r3, #21]
 8017af2:	2302      	movs	r3, #2
 8017af4:	e05d      	b.n	8017bb2 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8017af6:	68bb      	ldr	r3, [r7, #8]
 8017af8:	899b      	ldrh	r3, [r3, #12]
 8017afa:	461a      	mov	r2, r3
 8017afc:	683b      	ldr	r3, [r7, #0]
 8017afe:	fbb3 f3f2 	udiv	r3, r3, r2
 8017b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017b04:	4413      	add	r3, r2
 8017b06:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	699a      	ldr	r2, [r3, #24]
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	68db      	ldr	r3, [r3, #12]
 8017b10:	429a      	cmp	r2, r3
 8017b12:	d90a      	bls.n	8017b2a <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	699a      	ldr	r2, [r3, #24]
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	7d1b      	ldrb	r3, [r3, #20]
 8017b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b24:	b2da      	uxtb	r2, r3
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	699b      	ldr	r3, [r3, #24]
 8017b2e:	68ba      	ldr	r2, [r7, #8]
 8017b30:	8992      	ldrh	r2, [r2, #12]
 8017b32:	fbb3 f1f2 	udiv	r1, r3, r2
 8017b36:	fb01 f202 	mul.w	r2, r1, r2
 8017b3a:	1a9b      	subs	r3, r3, r2
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d036      	beq.n	8017bae <f_lseek+0x43c>
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	6a1b      	ldr	r3, [r3, #32]
 8017b44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017b46:	429a      	cmp	r2, r3
 8017b48:	d031      	beq.n	8017bae <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	7d1b      	ldrb	r3, [r3, #20]
 8017b4e:	b25b      	sxtb	r3, r3
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	da18      	bge.n	8017b86 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017b54:	68bb      	ldr	r3, [r7, #8]
 8017b56:	7858      	ldrb	r0, [r3, #1]
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	6a1a      	ldr	r2, [r3, #32]
 8017b62:	2301      	movs	r3, #1
 8017b64:	f7fc fcae 	bl	80144c4 <disk_write>
 8017b68:	4603      	mov	r3, r0
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d004      	beq.n	8017b78 <f_lseek+0x406>
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	2201      	movs	r2, #1
 8017b72:	755a      	strb	r2, [r3, #21]
 8017b74:	2301      	movs	r3, #1
 8017b76:	e01c      	b.n	8017bb2 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	7d1b      	ldrb	r3, [r3, #20]
 8017b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017b80:	b2da      	uxtb	r2, r3
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8017b86:	68bb      	ldr	r3, [r7, #8]
 8017b88:	7858      	ldrb	r0, [r3, #1]
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017b90:	2301      	movs	r3, #1
 8017b92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017b94:	f7fc fc76 	bl	8014484 <disk_read>
 8017b98:	4603      	mov	r3, r0
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d004      	beq.n	8017ba8 <f_lseek+0x436>
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	2201      	movs	r2, #1
 8017ba2:	755a      	strb	r2, [r3, #21]
 8017ba4:	2301      	movs	r3, #1
 8017ba6:	e004      	b.n	8017bb2 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017bac:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8017bae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	3740      	adds	r7, #64	; 0x40
 8017bb6:	46bd      	mov	sp, r7
 8017bb8:	bd80      	pop	{r7, pc}

08017bba <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8017bba:	b580      	push	{r7, lr}
 8017bbc:	b086      	sub	sp, #24
 8017bbe:	af00      	add	r7, sp, #0
 8017bc0:	6078      	str	r0, [r7, #4]
 8017bc2:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d101      	bne.n	8017bce <f_opendir+0x14>
 8017bca:	2309      	movs	r3, #9
 8017bcc:	e064      	b.n	8017c98 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8017bd2:	f107 010c 	add.w	r1, r7, #12
 8017bd6:	463b      	mov	r3, r7
 8017bd8:	2200      	movs	r2, #0
 8017bda:	4618      	mov	r0, r3
 8017bdc:	f7fe fd60 	bl	80166a0 <find_volume>
 8017be0:	4603      	mov	r3, r0
 8017be2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017be4:	7dfb      	ldrb	r3, [r7, #23]
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d14f      	bne.n	8017c8a <f_opendir+0xd0>
		obj->fs = fs;
 8017bea:	68fa      	ldr	r2, [r7, #12]
 8017bec:	693b      	ldr	r3, [r7, #16]
 8017bee:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8017bf0:	683b      	ldr	r3, [r7, #0]
 8017bf2:	4619      	mov	r1, r3
 8017bf4:	6878      	ldr	r0, [r7, #4]
 8017bf6:	f7fe fc43 	bl	8016480 <follow_path>
 8017bfa:	4603      	mov	r3, r0
 8017bfc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8017bfe:	7dfb      	ldrb	r3, [r7, #23]
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d13d      	bne.n	8017c80 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017c0a:	b25b      	sxtb	r3, r3
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	db12      	blt.n	8017c36 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8017c10:	693b      	ldr	r3, [r7, #16]
 8017c12:	799b      	ldrb	r3, [r3, #6]
 8017c14:	f003 0310 	and.w	r3, r3, #16
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d00a      	beq.n	8017c32 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8017c1c:	68fa      	ldr	r2, [r7, #12]
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	6a1b      	ldr	r3, [r3, #32]
 8017c22:	4619      	mov	r1, r3
 8017c24:	4610      	mov	r0, r2
 8017c26:	f7fd fcc1 	bl	80155ac <ld_clust>
 8017c2a:	4602      	mov	r2, r0
 8017c2c:	693b      	ldr	r3, [r7, #16]
 8017c2e:	609a      	str	r2, [r3, #8]
 8017c30:	e001      	b.n	8017c36 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8017c32:	2305      	movs	r3, #5
 8017c34:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8017c36:	7dfb      	ldrb	r3, [r7, #23]
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d121      	bne.n	8017c80 <f_opendir+0xc6>
				obj->id = fs->id;
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	88da      	ldrh	r2, [r3, #6]
 8017c40:	693b      	ldr	r3, [r7, #16]
 8017c42:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8017c44:	2100      	movs	r1, #0
 8017c46:	6878      	ldr	r0, [r7, #4]
 8017c48:	f7fd fb0a 	bl	8015260 <dir_sdi>
 8017c4c:	4603      	mov	r3, r0
 8017c4e:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8017c50:	7dfb      	ldrb	r3, [r7, #23]
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	d114      	bne.n	8017c80 <f_opendir+0xc6>
					if (obj->sclust) {
 8017c56:	693b      	ldr	r3, [r7, #16]
 8017c58:	689b      	ldr	r3, [r3, #8]
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d00d      	beq.n	8017c7a <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8017c5e:	2100      	movs	r1, #0
 8017c60:	6878      	ldr	r0, [r7, #4]
 8017c62:	f7fc fdeb 	bl	801483c <inc_lock>
 8017c66:	4602      	mov	r2, r0
 8017c68:	693b      	ldr	r3, [r7, #16]
 8017c6a:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8017c6c:	693b      	ldr	r3, [r7, #16]
 8017c6e:	691b      	ldr	r3, [r3, #16]
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d105      	bne.n	8017c80 <f_opendir+0xc6>
 8017c74:	2312      	movs	r3, #18
 8017c76:	75fb      	strb	r3, [r7, #23]
 8017c78:	e002      	b.n	8017c80 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8017c7a:	693b      	ldr	r3, [r7, #16]
 8017c7c:	2200      	movs	r2, #0
 8017c7e:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8017c80:	7dfb      	ldrb	r3, [r7, #23]
 8017c82:	2b04      	cmp	r3, #4
 8017c84:	d101      	bne.n	8017c8a <f_opendir+0xd0>
 8017c86:	2305      	movs	r3, #5
 8017c88:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8017c8a:	7dfb      	ldrb	r3, [r7, #23]
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	d002      	beq.n	8017c96 <f_opendir+0xdc>
 8017c90:	693b      	ldr	r3, [r7, #16]
 8017c92:	2200      	movs	r2, #0
 8017c94:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8017c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8017c98:	4618      	mov	r0, r3
 8017c9a:	3718      	adds	r7, #24
 8017c9c:	46bd      	mov	sp, r7
 8017c9e:	bd80      	pop	{r7, pc}

08017ca0 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8017ca0:	b580      	push	{r7, lr}
 8017ca2:	b084      	sub	sp, #16
 8017ca4:	af00      	add	r7, sp, #0
 8017ca6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	f107 0208 	add.w	r2, r7, #8
 8017cae:	4611      	mov	r1, r2
 8017cb0:	4618      	mov	r0, r3
 8017cb2:	f7fe ff7b 	bl	8016bac <validate>
 8017cb6:	4603      	mov	r3, r0
 8017cb8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017cba:	7bfb      	ldrb	r3, [r7, #15]
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d110      	bne.n	8017ce2 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	691b      	ldr	r3, [r3, #16]
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d006      	beq.n	8017cd6 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	691b      	ldr	r3, [r3, #16]
 8017ccc:	4618      	mov	r0, r3
 8017cce:	f7fc fe43 	bl	8014958 <dec_lock>
 8017cd2:	4603      	mov	r3, r0
 8017cd4:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8017cd6:	7bfb      	ldrb	r3, [r7, #15]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d102      	bne.n	8017ce2 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	2200      	movs	r2, #0
 8017ce0:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8017ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ce4:	4618      	mov	r0, r3
 8017ce6:	3710      	adds	r7, #16
 8017ce8:	46bd      	mov	sp, r7
 8017cea:	bd80      	pop	{r7, pc}

08017cec <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8017cec:	b580      	push	{r7, lr}
 8017cee:	b084      	sub	sp, #16
 8017cf0:	af00      	add	r7, sp, #0
 8017cf2:	6078      	str	r0, [r7, #4]
 8017cf4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	f107 0208 	add.w	r2, r7, #8
 8017cfc:	4611      	mov	r1, r2
 8017cfe:	4618      	mov	r0, r3
 8017d00:	f7fe ff54 	bl	8016bac <validate>
 8017d04:	4603      	mov	r3, r0
 8017d06:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017d08:	7bfb      	ldrb	r3, [r7, #15]
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d126      	bne.n	8017d5c <f_readdir+0x70>
		if (!fno) {
 8017d0e:	683b      	ldr	r3, [r7, #0]
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d106      	bne.n	8017d22 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8017d14:	2100      	movs	r1, #0
 8017d16:	6878      	ldr	r0, [r7, #4]
 8017d18:	f7fd faa2 	bl	8015260 <dir_sdi>
 8017d1c:	4603      	mov	r3, r0
 8017d1e:	73fb      	strb	r3, [r7, #15]
 8017d20:	e01c      	b.n	8017d5c <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8017d22:	2100      	movs	r1, #0
 8017d24:	6878      	ldr	r0, [r7, #4]
 8017d26:	f7fd fe6c 	bl	8015a02 <dir_read>
 8017d2a:	4603      	mov	r3, r0
 8017d2c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8017d2e:	7bfb      	ldrb	r3, [r7, #15]
 8017d30:	2b04      	cmp	r3, #4
 8017d32:	d101      	bne.n	8017d38 <f_readdir+0x4c>
 8017d34:	2300      	movs	r3, #0
 8017d36:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8017d38:	7bfb      	ldrb	r3, [r7, #15]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d10e      	bne.n	8017d5c <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8017d3e:	6839      	ldr	r1, [r7, #0]
 8017d40:	6878      	ldr	r0, [r7, #4]
 8017d42:	f7fe f907 	bl	8015f54 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8017d46:	2100      	movs	r1, #0
 8017d48:	6878      	ldr	r0, [r7, #4]
 8017d4a:	f7fd fb12 	bl	8015372 <dir_next>
 8017d4e:	4603      	mov	r3, r0
 8017d50:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8017d52:	7bfb      	ldrb	r3, [r7, #15]
 8017d54:	2b04      	cmp	r3, #4
 8017d56:	d101      	bne.n	8017d5c <f_readdir+0x70>
 8017d58:	2300      	movs	r3, #0
 8017d5a:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8017d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d5e:	4618      	mov	r0, r3
 8017d60:	3710      	adds	r7, #16
 8017d62:	46bd      	mov	sp, r7
 8017d64:	bd80      	pop	{r7, pc}

08017d66 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8017d66:	b580      	push	{r7, lr}
 8017d68:	b092      	sub	sp, #72	; 0x48
 8017d6a:	af00      	add	r7, sp, #0
 8017d6c:	60f8      	str	r0, [r7, #12]
 8017d6e:	60b9      	str	r1, [r7, #8]
 8017d70:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8017d72:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8017d76:	f107 030c 	add.w	r3, r7, #12
 8017d7a:	2200      	movs	r2, #0
 8017d7c:	4618      	mov	r0, r3
 8017d7e:	f7fe fc8f 	bl	80166a0 <find_volume>
 8017d82:	4603      	mov	r3, r0
 8017d84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8017d88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	f040 8099 	bne.w	8017ec4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8017d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8017d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d9a:	699a      	ldr	r2, [r3, #24]
 8017d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d9e:	69db      	ldr	r3, [r3, #28]
 8017da0:	3b02      	subs	r3, #2
 8017da2:	429a      	cmp	r2, r3
 8017da4:	d804      	bhi.n	8017db0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8017da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017da8:	699a      	ldr	r2, [r3, #24]
 8017daa:	68bb      	ldr	r3, [r7, #8]
 8017dac:	601a      	str	r2, [r3, #0]
 8017dae:	e089      	b.n	8017ec4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8017db0:	2300      	movs	r3, #0
 8017db2:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8017db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017db6:	781b      	ldrb	r3, [r3, #0]
 8017db8:	2b01      	cmp	r3, #1
 8017dba:	d128      	bne.n	8017e0e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8017dbc:	2302      	movs	r3, #2
 8017dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dc2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8017dc4:	f107 0314 	add.w	r3, r7, #20
 8017dc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017dca:	4618      	mov	r0, r3
 8017dcc:	f7fc ff25 	bl	8014c1a <get_fat>
 8017dd0:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8017dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017dd8:	d103      	bne.n	8017de2 <f_getfree+0x7c>
 8017dda:	2301      	movs	r3, #1
 8017ddc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8017de0:	e063      	b.n	8017eaa <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8017de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017de4:	2b01      	cmp	r3, #1
 8017de6:	d103      	bne.n	8017df0 <f_getfree+0x8a>
 8017de8:	2302      	movs	r3, #2
 8017dea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8017dee:	e05c      	b.n	8017eaa <f_getfree+0x144>
					if (stat == 0) nfree++;
 8017df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d102      	bne.n	8017dfc <f_getfree+0x96>
 8017df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017df8:	3301      	adds	r3, #1
 8017dfa:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8017dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017dfe:	3301      	adds	r3, #1
 8017e00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e04:	69db      	ldr	r3, [r3, #28]
 8017e06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017e08:	429a      	cmp	r2, r3
 8017e0a:	d3db      	bcc.n	8017dc4 <f_getfree+0x5e>
 8017e0c:	e04d      	b.n	8017eaa <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8017e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e10:	69db      	ldr	r3, [r3, #28]
 8017e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e18:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8017e1a:	2300      	movs	r3, #0
 8017e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8017e1e:	2300      	movs	r3, #0
 8017e20:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8017e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d113      	bne.n	8017e50 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8017e28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e2c:	1c5a      	adds	r2, r3, #1
 8017e2e:	63ba      	str	r2, [r7, #56]	; 0x38
 8017e30:	4619      	mov	r1, r3
 8017e32:	f7fc fe35 	bl	8014aa0 <move_window>
 8017e36:	4603      	mov	r3, r0
 8017e38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8017e3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d131      	bne.n	8017ea8 <f_getfree+0x142>
							p = fs->win;
 8017e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e46:	3338      	adds	r3, #56	; 0x38
 8017e48:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8017e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e4c:	899b      	ldrh	r3, [r3, #12]
 8017e4e:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8017e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e52:	781b      	ldrb	r3, [r3, #0]
 8017e54:	2b02      	cmp	r3, #2
 8017e56:	d10f      	bne.n	8017e78 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8017e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017e5a:	f7fc fb71 	bl	8014540 <ld_word>
 8017e5e:	4603      	mov	r3, r0
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d102      	bne.n	8017e6a <f_getfree+0x104>
 8017e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e66:	3301      	adds	r3, #1
 8017e68:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8017e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e6c:	3302      	adds	r3, #2
 8017e6e:	633b      	str	r3, [r7, #48]	; 0x30
 8017e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e72:	3b02      	subs	r3, #2
 8017e74:	637b      	str	r3, [r7, #52]	; 0x34
 8017e76:	e010      	b.n	8017e9a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8017e78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017e7a:	f7fc fb79 	bl	8014570 <ld_dword>
 8017e7e:	4603      	mov	r3, r0
 8017e80:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d102      	bne.n	8017e8e <f_getfree+0x128>
 8017e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e8a:	3301      	adds	r3, #1
 8017e8c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8017e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e90:	3304      	adds	r3, #4
 8017e92:	633b      	str	r3, [r7, #48]	; 0x30
 8017e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e96:	3b04      	subs	r3, #4
 8017e98:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8017e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017e9c:	3b01      	subs	r3, #1
 8017e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d1bd      	bne.n	8017e22 <f_getfree+0xbc>
 8017ea6:	e000      	b.n	8017eaa <f_getfree+0x144>
							if (res != FR_OK) break;
 8017ea8:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8017eaa:	68bb      	ldr	r3, [r7, #8]
 8017eac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017eae:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8017eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017eb4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8017eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eb8:	791a      	ldrb	r2, [r3, #4]
 8017eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ebc:	f042 0201 	orr.w	r2, r2, #1
 8017ec0:	b2d2      	uxtb	r2, r2
 8017ec2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8017ec4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8017ec8:	4618      	mov	r0, r3
 8017eca:	3748      	adds	r7, #72	; 0x48
 8017ecc:	46bd      	mov	sp, r7
 8017ece:	bd80      	pop	{r7, pc}

08017ed0 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8017ed0:	b580      	push	{r7, lr}
 8017ed2:	b0a0      	sub	sp, #128	; 0x80
 8017ed4:	af00      	add	r7, sp, #0
 8017ed6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8017ed8:	2300      	movs	r3, #0
 8017eda:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8017edc:	f107 010c 	add.w	r1, r7, #12
 8017ee0:	1d3b      	adds	r3, r7, #4
 8017ee2:	2202      	movs	r2, #2
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	f7fe fbdb 	bl	80166a0 <find_volume>
 8017eea:	4603      	mov	r3, r0
 8017eec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 8017ef4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	f040 808e 	bne.w	801801a <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8017efe:	687a      	ldr	r2, [r7, #4]
 8017f00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017f04:	4611      	mov	r1, r2
 8017f06:	4618      	mov	r0, r3
 8017f08:	f7fe faba 	bl	8016480 <follow_path>
 8017f0c:	4603      	mov	r3, r0
 8017f0e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8017f12:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d108      	bne.n	8017f2c <f_unlink+0x5c>
 8017f1a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017f1e:	2102      	movs	r1, #2
 8017f20:	4618      	mov	r0, r3
 8017f22:	f7fc fc0d 	bl	8014740 <chk_lock>
 8017f26:	4603      	mov	r3, r0
 8017f28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8017f2c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d172      	bne.n	801801a <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8017f34:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8017f38:	b25b      	sxtb	r3, r3
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	da03      	bge.n	8017f46 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8017f3e:	2306      	movs	r3, #6
 8017f40:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8017f44:	e008      	b.n	8017f58 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8017f46:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8017f4a:	f003 0301 	and.w	r3, r3, #1
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d002      	beq.n	8017f58 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8017f52:	2307      	movs	r3, #7
 8017f54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 8017f58:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d134      	bne.n	8017fca <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8017f60:	68fb      	ldr	r3, [r7, #12]
 8017f62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017f64:	4611      	mov	r1, r2
 8017f66:	4618      	mov	r0, r3
 8017f68:	f7fd fb20 	bl	80155ac <ld_clust>
 8017f6c:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8017f6e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8017f72:	f003 0310 	and.w	r3, r3, #16
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d027      	beq.n	8017fca <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8017f7a:	68fb      	ldr	r3, [r7, #12]
 8017f7c:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8017f7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017f80:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8017f82:	f107 0310 	add.w	r3, r7, #16
 8017f86:	2100      	movs	r1, #0
 8017f88:	4618      	mov	r0, r3
 8017f8a:	f7fd f969 	bl	8015260 <dir_sdi>
 8017f8e:	4603      	mov	r3, r0
 8017f90:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 8017f94:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d116      	bne.n	8017fca <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8017f9c:	f107 0310 	add.w	r3, r7, #16
 8017fa0:	2100      	movs	r1, #0
 8017fa2:	4618      	mov	r0, r3
 8017fa4:	f7fd fd2d 	bl	8015a02 <dir_read>
 8017fa8:	4603      	mov	r3, r0
 8017faa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8017fae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d102      	bne.n	8017fbc <f_unlink+0xec>
 8017fb6:	2307      	movs	r3, #7
 8017fb8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8017fbc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017fc0:	2b04      	cmp	r3, #4
 8017fc2:	d102      	bne.n	8017fca <f_unlink+0xfa>
 8017fc4:	2300      	movs	r3, #0
 8017fc6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 8017fca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d123      	bne.n	801801a <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8017fd2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017fd6:	4618      	mov	r0, r3
 8017fd8:	f7fd ff72 	bl	8015ec0 <dir_remove>
 8017fdc:	4603      	mov	r3, r0
 8017fde:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8017fe2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d10c      	bne.n	8018004 <f_unlink+0x134>
 8017fea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d009      	beq.n	8018004 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8017ff0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017ff4:	2200      	movs	r2, #0
 8017ff6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8017ff8:	4618      	mov	r0, r3
 8017ffa:	f7fc fffc 	bl	8014ff6 <remove_chain>
 8017ffe:	4603      	mov	r3, r0
 8018000:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8018004:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8018008:	2b00      	cmp	r3, #0
 801800a:	d106      	bne.n	801801a <f_unlink+0x14a>
 801800c:	68fb      	ldr	r3, [r7, #12]
 801800e:	4618      	mov	r0, r3
 8018010:	f7fc fd74 	bl	8014afc <sync_fs>
 8018014:	4603      	mov	r3, r0
 8018016:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801801a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 801801e:	4618      	mov	r0, r3
 8018020:	3780      	adds	r7, #128	; 0x80
 8018022:	46bd      	mov	sp, r7
 8018024:	bd80      	pop	{r7, pc}

08018026 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8018026:	b580      	push	{r7, lr}
 8018028:	b084      	sub	sp, #16
 801802a:	af00      	add	r7, sp, #0
 801802c:	6078      	str	r0, [r7, #4]
 801802e:	460b      	mov	r3, r1
 8018030:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8018032:	78fb      	ldrb	r3, [r7, #3]
 8018034:	2b0a      	cmp	r3, #10
 8018036:	d103      	bne.n	8018040 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8018038:	210d      	movs	r1, #13
 801803a:	6878      	ldr	r0, [r7, #4]
 801803c:	f7ff fff3 	bl	8018026 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	685b      	ldr	r3, [r3, #4]
 8018044:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8018046:	68fb      	ldr	r3, [r7, #12]
 8018048:	2b00      	cmp	r3, #0
 801804a:	db25      	blt.n	8018098 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801804c:	68fb      	ldr	r3, [r7, #12]
 801804e:	1c5a      	adds	r2, r3, #1
 8018050:	60fa      	str	r2, [r7, #12]
 8018052:	687a      	ldr	r2, [r7, #4]
 8018054:	4413      	add	r3, r2
 8018056:	78fa      	ldrb	r2, [r7, #3]
 8018058:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801805a:	68fb      	ldr	r3, [r7, #12]
 801805c:	2b3c      	cmp	r3, #60	; 0x3c
 801805e:	dd12      	ble.n	8018086 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	6818      	ldr	r0, [r3, #0]
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	f103 010c 	add.w	r1, r3, #12
 801806a:	68fa      	ldr	r2, [r7, #12]
 801806c:	f107 0308 	add.w	r3, r7, #8
 8018070:	f7ff f943 	bl	80172fa <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8018074:	68ba      	ldr	r2, [r7, #8]
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	429a      	cmp	r2, r3
 801807a:	d101      	bne.n	8018080 <putc_bfd+0x5a>
 801807c:	2300      	movs	r3, #0
 801807e:	e001      	b.n	8018084 <putc_bfd+0x5e>
 8018080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018084:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	68fa      	ldr	r2, [r7, #12]
 801808a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	689b      	ldr	r3, [r3, #8]
 8018090:	1c5a      	adds	r2, r3, #1
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	609a      	str	r2, [r3, #8]
 8018096:	e000      	b.n	801809a <putc_bfd+0x74>
	if (i < 0) return;
 8018098:	bf00      	nop
}
 801809a:	3710      	adds	r7, #16
 801809c:	46bd      	mov	sp, r7
 801809e:	bd80      	pop	{r7, pc}

080180a0 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80180a0:	b580      	push	{r7, lr}
 80180a2:	b084      	sub	sp, #16
 80180a4:	af00      	add	r7, sp, #0
 80180a6:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	685b      	ldr	r3, [r3, #4]
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	db16      	blt.n	80180de <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	6818      	ldr	r0, [r3, #0]
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	f103 010c 	add.w	r1, r3, #12
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	685b      	ldr	r3, [r3, #4]
 80180be:	461a      	mov	r2, r3
 80180c0:	f107 030c 	add.w	r3, r7, #12
 80180c4:	f7ff f919 	bl	80172fa <f_write>
 80180c8:	4603      	mov	r3, r0
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d107      	bne.n	80180de <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	685b      	ldr	r3, [r3, #4]
 80180d2:	68fa      	ldr	r2, [r7, #12]
 80180d4:	4293      	cmp	r3, r2
 80180d6:	d102      	bne.n	80180de <putc_flush+0x3e>
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	689b      	ldr	r3, [r3, #8]
 80180dc:	e001      	b.n	80180e2 <putc_flush+0x42>
	return EOF;
 80180de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80180e2:	4618      	mov	r0, r3
 80180e4:	3710      	adds	r7, #16
 80180e6:	46bd      	mov	sp, r7
 80180e8:	bd80      	pop	{r7, pc}

080180ea <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80180ea:	b480      	push	{r7}
 80180ec:	b083      	sub	sp, #12
 80180ee:	af00      	add	r7, sp, #0
 80180f0:	6078      	str	r0, [r7, #4]
 80180f2:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	683a      	ldr	r2, [r7, #0]
 80180f8:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	2200      	movs	r2, #0
 80180fe:	605a      	str	r2, [r3, #4]
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	685a      	ldr	r2, [r3, #4]
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	609a      	str	r2, [r3, #8]
}
 8018108:	bf00      	nop
 801810a:	370c      	adds	r7, #12
 801810c:	46bd      	mov	sp, r7
 801810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018112:	4770      	bx	lr

08018114 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8018114:	b40e      	push	{r1, r2, r3}
 8018116:	b580      	push	{r7, lr}
 8018118:	b0a7      	sub	sp, #156	; 0x9c
 801811a:	af00      	add	r7, sp, #0
 801811c:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 801811e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018122:	6879      	ldr	r1, [r7, #4]
 8018124:	4618      	mov	r0, r3
 8018126:	f7ff ffe0 	bl	80180ea <putc_init>

	va_start(arp, fmt);
 801812a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801812e:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8018130:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018134:	1c5a      	adds	r2, r3, #1
 8018136:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801813a:	781b      	ldrb	r3, [r3, #0]
 801813c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8018140:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8018144:	2b00      	cmp	r3, #0
 8018146:	f000 81f2 	beq.w	801852e <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 801814a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801814e:	2b25      	cmp	r3, #37	; 0x25
 8018150:	d008      	beq.n	8018164 <f_printf+0x50>
			putc_bfd(&pb, c);
 8018152:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8018156:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801815a:	4611      	mov	r1, r2
 801815c:	4618      	mov	r0, r3
 801815e:	f7ff ff62 	bl	8018026 <putc_bfd>
			continue;
 8018162:	e1e3      	b.n	801852c <f_printf+0x418>
		}
		w = f = 0;
 8018164:	2300      	movs	r3, #0
 8018166:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801816a:	2300      	movs	r3, #0
 801816c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8018170:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018174:	1c5a      	adds	r2, r3, #1
 8018176:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801817a:	781b      	ldrb	r3, [r3, #0]
 801817c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8018180:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8018184:	2b30      	cmp	r3, #48	; 0x30
 8018186:	d10b      	bne.n	80181a0 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8018188:	2301      	movs	r3, #1
 801818a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801818e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018192:	1c5a      	adds	r2, r3, #1
 8018194:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8018198:	781b      	ldrb	r3, [r3, #0]
 801819a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 801819e:	e024      	b.n	80181ea <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 80181a0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80181a4:	2b2d      	cmp	r3, #45	; 0x2d
 80181a6:	d120      	bne.n	80181ea <f_printf+0xd6>
				f = 2; c = *fmt++;
 80181a8:	2302      	movs	r3, #2
 80181aa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80181ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80181b2:	1c5a      	adds	r2, r3, #1
 80181b4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80181b8:	781b      	ldrb	r3, [r3, #0]
 80181ba:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 80181be:	e014      	b.n	80181ea <f_printf+0xd6>
			w = w * 10 + c - '0';
 80181c0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80181c4:	4613      	mov	r3, r2
 80181c6:	009b      	lsls	r3, r3, #2
 80181c8:	4413      	add	r3, r2
 80181ca:	005b      	lsls	r3, r3, #1
 80181cc:	461a      	mov	r2, r3
 80181ce:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80181d2:	4413      	add	r3, r2
 80181d4:	3b30      	subs	r3, #48	; 0x30
 80181d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 80181da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80181de:	1c5a      	adds	r2, r3, #1
 80181e0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80181e4:	781b      	ldrb	r3, [r3, #0]
 80181e6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 80181ea:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80181ee:	2b2f      	cmp	r3, #47	; 0x2f
 80181f0:	d903      	bls.n	80181fa <f_printf+0xe6>
 80181f2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80181f6:	2b39      	cmp	r3, #57	; 0x39
 80181f8:	d9e2      	bls.n	80181c0 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80181fa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80181fe:	2b6c      	cmp	r3, #108	; 0x6c
 8018200:	d003      	beq.n	801820a <f_printf+0xf6>
 8018202:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8018206:	2b4c      	cmp	r3, #76	; 0x4c
 8018208:	d10d      	bne.n	8018226 <f_printf+0x112>
			f |= 4; c = *fmt++;
 801820a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801820e:	f043 0304 	orr.w	r3, r3, #4
 8018212:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8018216:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801821a:	1c5a      	adds	r2, r3, #1
 801821c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8018220:	781b      	ldrb	r3, [r3, #0]
 8018222:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8018226:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801822a:	2b00      	cmp	r3, #0
 801822c:	f000 8181 	beq.w	8018532 <f_printf+0x41e>
		d = c;
 8018230:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8018234:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8018238:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801823c:	2b60      	cmp	r3, #96	; 0x60
 801823e:	d908      	bls.n	8018252 <f_printf+0x13e>
 8018240:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8018244:	2b7a      	cmp	r3, #122	; 0x7a
 8018246:	d804      	bhi.n	8018252 <f_printf+0x13e>
 8018248:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801824c:	3b20      	subs	r3, #32
 801824e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8018252:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8018256:	3b42      	subs	r3, #66	; 0x42
 8018258:	2b16      	cmp	r3, #22
 801825a:	f200 8098 	bhi.w	801838e <f_printf+0x27a>
 801825e:	a201      	add	r2, pc, #4	; (adr r2, 8018264 <f_printf+0x150>)
 8018260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018264:	0801836f 	.word	0x0801836f
 8018268:	08018357 	.word	0x08018357
 801826c:	0801837f 	.word	0x0801837f
 8018270:	0801838f 	.word	0x0801838f
 8018274:	0801838f 	.word	0x0801838f
 8018278:	0801838f 	.word	0x0801838f
 801827c:	0801838f 	.word	0x0801838f
 8018280:	0801838f 	.word	0x0801838f
 8018284:	0801838f 	.word	0x0801838f
 8018288:	0801838f 	.word	0x0801838f
 801828c:	0801838f 	.word	0x0801838f
 8018290:	0801838f 	.word	0x0801838f
 8018294:	0801838f 	.word	0x0801838f
 8018298:	08018377 	.word	0x08018377
 801829c:	0801838f 	.word	0x0801838f
 80182a0:	0801838f 	.word	0x0801838f
 80182a4:	0801838f 	.word	0x0801838f
 80182a8:	080182c1 	.word	0x080182c1
 80182ac:	0801838f 	.word	0x0801838f
 80182b0:	0801837f 	.word	0x0801837f
 80182b4:	0801838f 	.word	0x0801838f
 80182b8:	0801838f 	.word	0x0801838f
 80182bc:	08018387 	.word	0x08018387
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 80182c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80182c2:	1d1a      	adds	r2, r3, #4
 80182c4:	67ba      	str	r2, [r7, #120]	; 0x78
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 80182ca:	2300      	movs	r3, #0
 80182cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80182d0:	e004      	b.n	80182dc <f_printf+0x1c8>
 80182d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80182d6:	3301      	adds	r3, #1
 80182d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80182dc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80182de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80182e2:	4413      	add	r3, r2
 80182e4:	781b      	ldrb	r3, [r3, #0]
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d1f3      	bne.n	80182d2 <f_printf+0x1be>
			if (!(f & 2)) {
 80182ea:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80182ee:	f003 0302 	and.w	r3, r3, #2
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d11a      	bne.n	801832c <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 80182f6:	e005      	b.n	8018304 <f_printf+0x1f0>
 80182f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80182fc:	2120      	movs	r1, #32
 80182fe:	4618      	mov	r0, r3
 8018300:	f7ff fe91 	bl	8018026 <putc_bfd>
 8018304:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018308:	1c5a      	adds	r2, r3, #1
 801830a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801830e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018312:	429a      	cmp	r2, r3
 8018314:	d8f0      	bhi.n	80182f8 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8018316:	e009      	b.n	801832c <f_printf+0x218>
 8018318:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801831a:	1c5a      	adds	r2, r3, #1
 801831c:	67fa      	str	r2, [r7, #124]	; 0x7c
 801831e:	781a      	ldrb	r2, [r3, #0]
 8018320:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018324:	4611      	mov	r1, r2
 8018326:	4618      	mov	r0, r3
 8018328:	f7ff fe7d 	bl	8018026 <putc_bfd>
 801832c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801832e:	781b      	ldrb	r3, [r3, #0]
 8018330:	2b00      	cmp	r3, #0
 8018332:	d1f1      	bne.n	8018318 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8018334:	e005      	b.n	8018342 <f_printf+0x22e>
 8018336:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801833a:	2120      	movs	r1, #32
 801833c:	4618      	mov	r0, r3
 801833e:	f7ff fe72 	bl	8018026 <putc_bfd>
 8018342:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018346:	1c5a      	adds	r2, r3, #1
 8018348:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801834c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018350:	429a      	cmp	r2, r3
 8018352:	d8f0      	bhi.n	8018336 <f_printf+0x222>
			continue;
 8018354:	e0ea      	b.n	801852c <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8018356:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018358:	1d1a      	adds	r2, r3, #4
 801835a:	67ba      	str	r2, [r7, #120]	; 0x78
 801835c:	681b      	ldr	r3, [r3, #0]
 801835e:	b2da      	uxtb	r2, r3
 8018360:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018364:	4611      	mov	r1, r2
 8018366:	4618      	mov	r0, r3
 8018368:	f7ff fe5d 	bl	8018026 <putc_bfd>
 801836c:	e0de      	b.n	801852c <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 801836e:	2302      	movs	r3, #2
 8018370:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8018374:	e014      	b.n	80183a0 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8018376:	2308      	movs	r3, #8
 8018378:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 801837c:	e010      	b.n	80183a0 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 801837e:	230a      	movs	r3, #10
 8018380:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8018384:	e00c      	b.n	80183a0 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8018386:	2310      	movs	r3, #16
 8018388:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 801838c:	e008      	b.n	80183a0 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 801838e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8018392:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018396:	4611      	mov	r1, r2
 8018398:	4618      	mov	r0, r3
 801839a:	f7ff fe44 	bl	8018026 <putc_bfd>
 801839e:	e0c5      	b.n	801852c <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80183a0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80183a4:	f003 0304 	and.w	r3, r3, #4
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d004      	beq.n	80183b6 <f_printf+0x2a2>
 80183ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80183ae:	1d1a      	adds	r2, r3, #4
 80183b0:	67ba      	str	r2, [r7, #120]	; 0x78
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	e00c      	b.n	80183d0 <f_printf+0x2bc>
 80183b6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80183ba:	2b44      	cmp	r3, #68	; 0x44
 80183bc:	d104      	bne.n	80183c8 <f_printf+0x2b4>
 80183be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80183c0:	1d1a      	adds	r2, r3, #4
 80183c2:	67ba      	str	r2, [r7, #120]	; 0x78
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	e003      	b.n	80183d0 <f_printf+0x2bc>
 80183c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80183ca:	1d1a      	adds	r2, r3, #4
 80183cc:	67ba      	str	r2, [r7, #120]	; 0x78
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 80183d4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80183d8:	2b44      	cmp	r3, #68	; 0x44
 80183da:	d10e      	bne.n	80183fa <f_printf+0x2e6>
 80183dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	da0a      	bge.n	80183fa <f_printf+0x2e6>
			v = 0 - v;
 80183e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80183e8:	425b      	negs	r3, r3
 80183ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 80183ee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80183f2:	f043 0308 	orr.w	r3, r3, #8
 80183f6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 80183fa:	2300      	movs	r3, #0
 80183fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8018400:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8018404:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018408:	fbb3 f1f2 	udiv	r1, r3, r2
 801840c:	fb01 f202 	mul.w	r2, r1, r2
 8018410:	1a9b      	subs	r3, r3, r2
 8018412:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8018416:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 801841a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801841e:	fbb2 f3f3 	udiv	r3, r2, r3
 8018422:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8018426:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801842a:	2b09      	cmp	r3, #9
 801842c:	d90b      	bls.n	8018446 <f_printf+0x332>
 801842e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8018432:	2b78      	cmp	r3, #120	; 0x78
 8018434:	d101      	bne.n	801843a <f_printf+0x326>
 8018436:	2227      	movs	r2, #39	; 0x27
 8018438:	e000      	b.n	801843c <f_printf+0x328>
 801843a:	2207      	movs	r2, #7
 801843c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8018440:	4413      	add	r3, r2
 8018442:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8018446:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801844a:	1c5a      	adds	r2, r3, #1
 801844c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8018450:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8018454:	3230      	adds	r2, #48	; 0x30
 8018456:	b2d2      	uxtb	r2, r2
 8018458:	3398      	adds	r3, #152	; 0x98
 801845a:	443b      	add	r3, r7
 801845c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8018460:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018464:	2b00      	cmp	r3, #0
 8018466:	d003      	beq.n	8018470 <f_printf+0x35c>
 8018468:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801846c:	2b1f      	cmp	r3, #31
 801846e:	d9c7      	bls.n	8018400 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8018470:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018474:	f003 0308 	and.w	r3, r3, #8
 8018478:	2b00      	cmp	r3, #0
 801847a:	d009      	beq.n	8018490 <f_printf+0x37c>
 801847c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018480:	1c5a      	adds	r2, r3, #1
 8018482:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8018486:	3398      	adds	r3, #152	; 0x98
 8018488:	443b      	add	r3, r7
 801848a:	222d      	movs	r2, #45	; 0x2d
 801848c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8018490:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018494:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8018498:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801849c:	f003 0301 	and.w	r3, r3, #1
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d001      	beq.n	80184a8 <f_printf+0x394>
 80184a4:	2330      	movs	r3, #48	; 0x30
 80184a6:	e000      	b.n	80184aa <f_printf+0x396>
 80184a8:	2320      	movs	r3, #32
 80184aa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80184ae:	e007      	b.n	80184c0 <f_printf+0x3ac>
 80184b0:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80184b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80184b8:	4611      	mov	r1, r2
 80184ba:	4618      	mov	r0, r3
 80184bc:	f7ff fdb3 	bl	8018026 <putc_bfd>
 80184c0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80184c4:	f003 0302 	and.w	r3, r3, #2
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d108      	bne.n	80184de <f_printf+0x3ca>
 80184cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80184d0:	1c5a      	adds	r2, r3, #1
 80184d2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80184d6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80184da:	429a      	cmp	r2, r3
 80184dc:	d8e8      	bhi.n	80184b0 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 80184de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80184e2:	3b01      	subs	r3, #1
 80184e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80184e8:	f107 020c 	add.w	r2, r7, #12
 80184ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80184f0:	4413      	add	r3, r2
 80184f2:	781a      	ldrb	r2, [r3, #0]
 80184f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80184f8:	4611      	mov	r1, r2
 80184fa:	4618      	mov	r0, r3
 80184fc:	f7ff fd93 	bl	8018026 <putc_bfd>
		} while (i);
 8018500:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018504:	2b00      	cmp	r3, #0
 8018506:	d1ea      	bne.n	80184de <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8018508:	e007      	b.n	801851a <f_printf+0x406>
 801850a:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 801850e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018512:	4611      	mov	r1, r2
 8018514:	4618      	mov	r0, r3
 8018516:	f7ff fd86 	bl	8018026 <putc_bfd>
 801851a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801851e:	1c5a      	adds	r2, r3, #1
 8018520:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8018524:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018528:	429a      	cmp	r2, r3
 801852a:	d8ee      	bhi.n	801850a <f_printf+0x3f6>
		c = *fmt++;
 801852c:	e600      	b.n	8018130 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 801852e:	bf00      	nop
 8018530:	e000      	b.n	8018534 <f_printf+0x420>
		if (!c) break;
 8018532:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8018534:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018538:	4618      	mov	r0, r3
 801853a:	f7ff fdb1 	bl	80180a0 <putc_flush>
 801853e:	4603      	mov	r3, r0
}
 8018540:	4618      	mov	r0, r3
 8018542:	379c      	adds	r7, #156	; 0x9c
 8018544:	46bd      	mov	sp, r7
 8018546:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801854a:	b003      	add	sp, #12
 801854c:	4770      	bx	lr
 801854e:	bf00      	nop

08018550 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8018550:	b480      	push	{r7}
 8018552:	b087      	sub	sp, #28
 8018554:	af00      	add	r7, sp, #0
 8018556:	60f8      	str	r0, [r7, #12]
 8018558:	60b9      	str	r1, [r7, #8]
 801855a:	4613      	mov	r3, r2
 801855c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801855e:	2301      	movs	r3, #1
 8018560:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8018562:	2300      	movs	r3, #0
 8018564:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8018566:	4b1f      	ldr	r3, [pc, #124]	; (80185e4 <FATFS_LinkDriverEx+0x94>)
 8018568:	7a5b      	ldrb	r3, [r3, #9]
 801856a:	b2db      	uxtb	r3, r3
 801856c:	2b00      	cmp	r3, #0
 801856e:	d131      	bne.n	80185d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8018570:	4b1c      	ldr	r3, [pc, #112]	; (80185e4 <FATFS_LinkDriverEx+0x94>)
 8018572:	7a5b      	ldrb	r3, [r3, #9]
 8018574:	b2db      	uxtb	r3, r3
 8018576:	461a      	mov	r2, r3
 8018578:	4b1a      	ldr	r3, [pc, #104]	; (80185e4 <FATFS_LinkDriverEx+0x94>)
 801857a:	2100      	movs	r1, #0
 801857c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801857e:	4b19      	ldr	r3, [pc, #100]	; (80185e4 <FATFS_LinkDriverEx+0x94>)
 8018580:	7a5b      	ldrb	r3, [r3, #9]
 8018582:	b2db      	uxtb	r3, r3
 8018584:	4a17      	ldr	r2, [pc, #92]	; (80185e4 <FATFS_LinkDriverEx+0x94>)
 8018586:	009b      	lsls	r3, r3, #2
 8018588:	4413      	add	r3, r2
 801858a:	68fa      	ldr	r2, [r7, #12]
 801858c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801858e:	4b15      	ldr	r3, [pc, #84]	; (80185e4 <FATFS_LinkDriverEx+0x94>)
 8018590:	7a5b      	ldrb	r3, [r3, #9]
 8018592:	b2db      	uxtb	r3, r3
 8018594:	461a      	mov	r2, r3
 8018596:	4b13      	ldr	r3, [pc, #76]	; (80185e4 <FATFS_LinkDriverEx+0x94>)
 8018598:	4413      	add	r3, r2
 801859a:	79fa      	ldrb	r2, [r7, #7]
 801859c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801859e:	4b11      	ldr	r3, [pc, #68]	; (80185e4 <FATFS_LinkDriverEx+0x94>)
 80185a0:	7a5b      	ldrb	r3, [r3, #9]
 80185a2:	b2db      	uxtb	r3, r3
 80185a4:	1c5a      	adds	r2, r3, #1
 80185a6:	b2d1      	uxtb	r1, r2
 80185a8:	4a0e      	ldr	r2, [pc, #56]	; (80185e4 <FATFS_LinkDriverEx+0x94>)
 80185aa:	7251      	strb	r1, [r2, #9]
 80185ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80185ae:	7dbb      	ldrb	r3, [r7, #22]
 80185b0:	3330      	adds	r3, #48	; 0x30
 80185b2:	b2da      	uxtb	r2, r3
 80185b4:	68bb      	ldr	r3, [r7, #8]
 80185b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80185b8:	68bb      	ldr	r3, [r7, #8]
 80185ba:	3301      	adds	r3, #1
 80185bc:	223a      	movs	r2, #58	; 0x3a
 80185be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80185c0:	68bb      	ldr	r3, [r7, #8]
 80185c2:	3302      	adds	r3, #2
 80185c4:	222f      	movs	r2, #47	; 0x2f
 80185c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80185c8:	68bb      	ldr	r3, [r7, #8]
 80185ca:	3303      	adds	r3, #3
 80185cc:	2200      	movs	r2, #0
 80185ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80185d0:	2300      	movs	r3, #0
 80185d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80185d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80185d6:	4618      	mov	r0, r3
 80185d8:	371c      	adds	r7, #28
 80185da:	46bd      	mov	sp, r7
 80185dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185e0:	4770      	bx	lr
 80185e2:	bf00      	nop
 80185e4:	200016f4 	.word	0x200016f4

080185e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80185e8:	b580      	push	{r7, lr}
 80185ea:	b082      	sub	sp, #8
 80185ec:	af00      	add	r7, sp, #0
 80185ee:	6078      	str	r0, [r7, #4]
 80185f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80185f2:	2200      	movs	r2, #0
 80185f4:	6839      	ldr	r1, [r7, #0]
 80185f6:	6878      	ldr	r0, [r7, #4]
 80185f8:	f7ff ffaa 	bl	8018550 <FATFS_LinkDriverEx>
 80185fc:	4603      	mov	r3, r0
}
 80185fe:	4618      	mov	r0, r3
 8018600:	3708      	adds	r7, #8
 8018602:	46bd      	mov	sp, r7
 8018604:	bd80      	pop	{r7, pc}
	...

08018608 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8018608:	b480      	push	{r7}
 801860a:	b085      	sub	sp, #20
 801860c:	af00      	add	r7, sp, #0
 801860e:	4603      	mov	r3, r0
 8018610:	6039      	str	r1, [r7, #0]
 8018612:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8018614:	88fb      	ldrh	r3, [r7, #6]
 8018616:	2b7f      	cmp	r3, #127	; 0x7f
 8018618:	d802      	bhi.n	8018620 <ff_convert+0x18>
		c = chr;
 801861a:	88fb      	ldrh	r3, [r7, #6]
 801861c:	81fb      	strh	r3, [r7, #14]
 801861e:	e025      	b.n	801866c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8018620:	683b      	ldr	r3, [r7, #0]
 8018622:	2b00      	cmp	r3, #0
 8018624:	d00b      	beq.n	801863e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8018626:	88fb      	ldrh	r3, [r7, #6]
 8018628:	2bff      	cmp	r3, #255	; 0xff
 801862a:	d805      	bhi.n	8018638 <ff_convert+0x30>
 801862c:	88fb      	ldrh	r3, [r7, #6]
 801862e:	3b80      	subs	r3, #128	; 0x80
 8018630:	4a12      	ldr	r2, [pc, #72]	; (801867c <ff_convert+0x74>)
 8018632:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018636:	e000      	b.n	801863a <ff_convert+0x32>
 8018638:	2300      	movs	r3, #0
 801863a:	81fb      	strh	r3, [r7, #14]
 801863c:	e016      	b.n	801866c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801863e:	2300      	movs	r3, #0
 8018640:	81fb      	strh	r3, [r7, #14]
 8018642:	e009      	b.n	8018658 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8018644:	89fb      	ldrh	r3, [r7, #14]
 8018646:	4a0d      	ldr	r2, [pc, #52]	; (801867c <ff_convert+0x74>)
 8018648:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801864c:	88fa      	ldrh	r2, [r7, #6]
 801864e:	429a      	cmp	r2, r3
 8018650:	d006      	beq.n	8018660 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8018652:	89fb      	ldrh	r3, [r7, #14]
 8018654:	3301      	adds	r3, #1
 8018656:	81fb      	strh	r3, [r7, #14]
 8018658:	89fb      	ldrh	r3, [r7, #14]
 801865a:	2b7f      	cmp	r3, #127	; 0x7f
 801865c:	d9f2      	bls.n	8018644 <ff_convert+0x3c>
 801865e:	e000      	b.n	8018662 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8018660:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8018662:	89fb      	ldrh	r3, [r7, #14]
 8018664:	3380      	adds	r3, #128	; 0x80
 8018666:	b29b      	uxth	r3, r3
 8018668:	b2db      	uxtb	r3, r3
 801866a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801866c:	89fb      	ldrh	r3, [r7, #14]
}
 801866e:	4618      	mov	r0, r3
 8018670:	3714      	adds	r7, #20
 8018672:	46bd      	mov	sp, r7
 8018674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018678:	4770      	bx	lr
 801867a:	bf00      	nop
 801867c:	080236e4 	.word	0x080236e4

08018680 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8018680:	b480      	push	{r7}
 8018682:	b087      	sub	sp, #28
 8018684:	af00      	add	r7, sp, #0
 8018686:	4603      	mov	r3, r0
 8018688:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801868a:	88fb      	ldrh	r3, [r7, #6]
 801868c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018690:	d201      	bcs.n	8018696 <ff_wtoupper+0x16>
 8018692:	4b3e      	ldr	r3, [pc, #248]	; (801878c <ff_wtoupper+0x10c>)
 8018694:	e000      	b.n	8018698 <ff_wtoupper+0x18>
 8018696:	4b3e      	ldr	r3, [pc, #248]	; (8018790 <ff_wtoupper+0x110>)
 8018698:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801869a:	697b      	ldr	r3, [r7, #20]
 801869c:	1c9a      	adds	r2, r3, #2
 801869e:	617a      	str	r2, [r7, #20]
 80186a0:	881b      	ldrh	r3, [r3, #0]
 80186a2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80186a4:	8a7b      	ldrh	r3, [r7, #18]
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d068      	beq.n	801877c <ff_wtoupper+0xfc>
 80186aa:	88fa      	ldrh	r2, [r7, #6]
 80186ac:	8a7b      	ldrh	r3, [r7, #18]
 80186ae:	429a      	cmp	r2, r3
 80186b0:	d364      	bcc.n	801877c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80186b2:	697b      	ldr	r3, [r7, #20]
 80186b4:	1c9a      	adds	r2, r3, #2
 80186b6:	617a      	str	r2, [r7, #20]
 80186b8:	881b      	ldrh	r3, [r3, #0]
 80186ba:	823b      	strh	r3, [r7, #16]
 80186bc:	8a3b      	ldrh	r3, [r7, #16]
 80186be:	0a1b      	lsrs	r3, r3, #8
 80186c0:	81fb      	strh	r3, [r7, #14]
 80186c2:	8a3b      	ldrh	r3, [r7, #16]
 80186c4:	b2db      	uxtb	r3, r3
 80186c6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80186c8:	88fa      	ldrh	r2, [r7, #6]
 80186ca:	8a79      	ldrh	r1, [r7, #18]
 80186cc:	8a3b      	ldrh	r3, [r7, #16]
 80186ce:	440b      	add	r3, r1
 80186d0:	429a      	cmp	r2, r3
 80186d2:	da49      	bge.n	8018768 <ff_wtoupper+0xe8>
			switch (cmd) {
 80186d4:	89fb      	ldrh	r3, [r7, #14]
 80186d6:	2b08      	cmp	r3, #8
 80186d8:	d84f      	bhi.n	801877a <ff_wtoupper+0xfa>
 80186da:	a201      	add	r2, pc, #4	; (adr r2, 80186e0 <ff_wtoupper+0x60>)
 80186dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186e0:	08018705 	.word	0x08018705
 80186e4:	08018717 	.word	0x08018717
 80186e8:	0801872d 	.word	0x0801872d
 80186ec:	08018735 	.word	0x08018735
 80186f0:	0801873d 	.word	0x0801873d
 80186f4:	08018745 	.word	0x08018745
 80186f8:	0801874d 	.word	0x0801874d
 80186fc:	08018755 	.word	0x08018755
 8018700:	0801875d 	.word	0x0801875d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8018704:	88fa      	ldrh	r2, [r7, #6]
 8018706:	8a7b      	ldrh	r3, [r7, #18]
 8018708:	1ad3      	subs	r3, r2, r3
 801870a:	005b      	lsls	r3, r3, #1
 801870c:	697a      	ldr	r2, [r7, #20]
 801870e:	4413      	add	r3, r2
 8018710:	881b      	ldrh	r3, [r3, #0]
 8018712:	80fb      	strh	r3, [r7, #6]
 8018714:	e027      	b.n	8018766 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8018716:	88fa      	ldrh	r2, [r7, #6]
 8018718:	8a7b      	ldrh	r3, [r7, #18]
 801871a:	1ad3      	subs	r3, r2, r3
 801871c:	b29b      	uxth	r3, r3
 801871e:	f003 0301 	and.w	r3, r3, #1
 8018722:	b29b      	uxth	r3, r3
 8018724:	88fa      	ldrh	r2, [r7, #6]
 8018726:	1ad3      	subs	r3, r2, r3
 8018728:	80fb      	strh	r3, [r7, #6]
 801872a:	e01c      	b.n	8018766 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801872c:	88fb      	ldrh	r3, [r7, #6]
 801872e:	3b10      	subs	r3, #16
 8018730:	80fb      	strh	r3, [r7, #6]
 8018732:	e018      	b.n	8018766 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8018734:	88fb      	ldrh	r3, [r7, #6]
 8018736:	3b20      	subs	r3, #32
 8018738:	80fb      	strh	r3, [r7, #6]
 801873a:	e014      	b.n	8018766 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801873c:	88fb      	ldrh	r3, [r7, #6]
 801873e:	3b30      	subs	r3, #48	; 0x30
 8018740:	80fb      	strh	r3, [r7, #6]
 8018742:	e010      	b.n	8018766 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8018744:	88fb      	ldrh	r3, [r7, #6]
 8018746:	3b1a      	subs	r3, #26
 8018748:	80fb      	strh	r3, [r7, #6]
 801874a:	e00c      	b.n	8018766 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801874c:	88fb      	ldrh	r3, [r7, #6]
 801874e:	3308      	adds	r3, #8
 8018750:	80fb      	strh	r3, [r7, #6]
 8018752:	e008      	b.n	8018766 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8018754:	88fb      	ldrh	r3, [r7, #6]
 8018756:	3b50      	subs	r3, #80	; 0x50
 8018758:	80fb      	strh	r3, [r7, #6]
 801875a:	e004      	b.n	8018766 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801875c:	88fb      	ldrh	r3, [r7, #6]
 801875e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8018762:	80fb      	strh	r3, [r7, #6]
 8018764:	bf00      	nop
			}
			break;
 8018766:	e008      	b.n	801877a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8018768:	89fb      	ldrh	r3, [r7, #14]
 801876a:	2b00      	cmp	r3, #0
 801876c:	d195      	bne.n	801869a <ff_wtoupper+0x1a>
 801876e:	8a3b      	ldrh	r3, [r7, #16]
 8018770:	005b      	lsls	r3, r3, #1
 8018772:	697a      	ldr	r2, [r7, #20]
 8018774:	4413      	add	r3, r2
 8018776:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8018778:	e78f      	b.n	801869a <ff_wtoupper+0x1a>
			break;
 801877a:	bf00      	nop
	}

	return chr;
 801877c:	88fb      	ldrh	r3, [r7, #6]
}
 801877e:	4618      	mov	r0, r3
 8018780:	371c      	adds	r7, #28
 8018782:	46bd      	mov	sp, r7
 8018784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018788:	4770      	bx	lr
 801878a:	bf00      	nop
 801878c:	080237e4 	.word	0x080237e4
 8018790:	080239d8 	.word	0x080239d8

08018794 <_ZdlPvj>:
 8018794:	f001 b878 	b.w	8019888 <_ZdlPv>

08018798 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
 8018798:	4920      	ldr	r1, [pc, #128]	; (801881c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x84>)
 801879a:	684b      	ldr	r3, [r1, #4]
 801879c:	b530      	push	{r4, r5, lr}
 801879e:	f850 5c08 	ldr.w	r5, [r0, #-8]
 80187a2:	f1a0 0408 	sub.w	r4, r0, #8
 80187a6:	b35b      	cbz	r3, 8018800 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x68>
 80187a8:	eb04 0e05 	add.w	lr, r4, r5
 80187ac:	4573      	cmp	r3, lr
 80187ae:	d827      	bhi.n	8018800 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x68>
 80187b0:	d021      	beq.n	80187f6 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x5e>
 80187b2:	685a      	ldr	r2, [r3, #4]
 80187b4:	f101 0c04 	add.w	ip, r1, #4
 80187b8:	b932      	cbnz	r2, 80187c8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x30>
 80187ba:	e00f      	b.n	80187dc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x44>
 80187bc:	6851      	ldr	r1, [r2, #4]
 80187be:	f103 0c04 	add.w	ip, r3, #4
 80187c2:	b321      	cbz	r1, 801880e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x76>
 80187c4:	4613      	mov	r3, r2
 80187c6:	460a      	mov	r2, r1
 80187c8:	4596      	cmp	lr, r2
 80187ca:	d3f7      	bcc.n	80187bc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x24>
 80187cc:	bf04      	itt	eq
 80187ce:	e9de 2100 	ldrdeq	r2, r1, [lr]
 80187d2:	6059      	streq	r1, [r3, #4]
 80187d4:	f8dc 3000 	ldr.w	r3, [ip]
 80187d8:	bf08      	it	eq
 80187da:	18ad      	addeq	r5, r5, r2
 80187dc:	681a      	ldr	r2, [r3, #0]
 80187de:	1899      	adds	r1, r3, r2
 80187e0:	428c      	cmp	r4, r1
 80187e2:	d011      	beq.n	8018808 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x70>
 80187e4:	685b      	ldr	r3, [r3, #4]
 80187e6:	f840 3c04 	str.w	r3, [r0, #-4]
 80187ea:	f8dc 3000 	ldr.w	r3, [ip]
 80187ee:	f840 5c08 	str.w	r5, [r0, #-8]
 80187f2:	605c      	str	r4, [r3, #4]
 80187f4:	bd30      	pop	{r4, r5, pc}
 80187f6:	681a      	ldr	r2, [r3, #0]
 80187f8:	685b      	ldr	r3, [r3, #4]
 80187fa:	442a      	add	r2, r5
 80187fc:	f840 2c08 	str.w	r2, [r0, #-8]
 8018800:	f840 3c04 	str.w	r3, [r0, #-4]
 8018804:	604c      	str	r4, [r1, #4]
 8018806:	bd30      	pop	{r4, r5, pc}
 8018808:	442a      	add	r2, r5
 801880a:	601a      	str	r2, [r3, #0]
 801880c:	bd30      	pop	{r4, r5, pc}
 801880e:	685b      	ldr	r3, [r3, #4]
 8018810:	681a      	ldr	r2, [r3, #0]
 8018812:	1899      	adds	r1, r3, r2
 8018814:	428c      	cmp	r4, r1
 8018816:	d1e5      	bne.n	80187e4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x4c>
 8018818:	e7f6      	b.n	8018808 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x70>
 801881a:	bf00      	nop
 801881c:	20001700 	.word	0x20001700

08018820 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
 8018820:	4914      	ldr	r1, [pc, #80]	; (8018874 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x54>)
 8018822:	f100 0308 	add.w	r3, r0, #8
 8018826:	6848      	ldr	r0, [r1, #4]
 8018828:	2b08      	cmp	r3, #8
 801882a:	bf38      	it	cc
 801882c:	2308      	movcc	r3, #8
 801882e:	b1f8      	cbz	r0, 8018870 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x50>
 8018830:	3307      	adds	r3, #7
 8018832:	f023 0307 	bic.w	r3, r3, #7
 8018836:	3104      	adds	r1, #4
 8018838:	e002      	b.n	8018840 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x20>
 801883a:	1d01      	adds	r1, r0, #4
 801883c:	6840      	ldr	r0, [r0, #4]
 801883e:	b180      	cbz	r0, 8018862 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x42>
 8018840:	6802      	ldr	r2, [r0, #0]
 8018842:	4293      	cmp	r3, r2
 8018844:	d8f9      	bhi.n	801883a <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x1a>
 8018846:	b430      	push	{r4, r5}
 8018848:	1ad4      	subs	r4, r2, r3
 801884a:	2c07      	cmp	r4, #7
 801884c:	d90a      	bls.n	8018864 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x44>
 801884e:	18c5      	adds	r5, r0, r3
 8018850:	6842      	ldr	r2, [r0, #4]
 8018852:	606a      	str	r2, [r5, #4]
 8018854:	50c4      	str	r4, [r0, r3]
 8018856:	6808      	ldr	r0, [r1, #0]
 8018858:	6003      	str	r3, [r0, #0]
 801885a:	600d      	str	r5, [r1, #0]
 801885c:	3008      	adds	r0, #8
 801885e:	bc30      	pop	{r4, r5}
 8018860:	4770      	bx	lr
 8018862:	4770      	bx	lr
 8018864:	6845      	ldr	r5, [r0, #4]
 8018866:	6002      	str	r2, [r0, #0]
 8018868:	600d      	str	r5, [r1, #0]
 801886a:	3008      	adds	r0, #8
 801886c:	bc30      	pop	{r4, r5}
 801886e:	4770      	bx	lr
 8018870:	4770      	bx	lr
 8018872:	bf00      	nop
 8018874:	20001700 	.word	0x20001700

08018878 <__cxa_allocate_exception>:
 8018878:	b510      	push	{r4, lr}
 801887a:	f100 0480 	add.w	r4, r0, #128	; 0x80
 801887e:	4620      	mov	r0, r4
 8018880:	f001 f996 	bl	8019bb0 <malloc>
 8018884:	4603      	mov	r3, r0
 8018886:	b130      	cbz	r0, 8018896 <__cxa_allocate_exception+0x1e>
 8018888:	2280      	movs	r2, #128	; 0x80
 801888a:	2100      	movs	r1, #0
 801888c:	4618      	mov	r0, r3
 801888e:	f003 f8d9 	bl	801ba44 <memset>
 8018892:	3080      	adds	r0, #128	; 0x80
 8018894:	bd10      	pop	{r4, pc}
 8018896:	4620      	mov	r0, r4
 8018898:	f7ff ffc2 	bl	8018820 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
 801889c:	4603      	mov	r3, r0
 801889e:	2800      	cmp	r0, #0
 80188a0:	d1f2      	bne.n	8018888 <__cxa_allocate_exception+0x10>
 80188a2:	f000 fca7 	bl	80191f4 <_ZSt9terminatev>
 80188a6:	bf00      	nop

080188a8 <__cxa_free_exception>:
 80188a8:	4a06      	ldr	r2, [pc, #24]	; (80188c4 <__cxa_free_exception+0x1c>)
 80188aa:	6893      	ldr	r3, [r2, #8]
 80188ac:	3880      	subs	r0, #128	; 0x80
 80188ae:	4298      	cmp	r0, r3
 80188b0:	d905      	bls.n	80188be <__cxa_free_exception+0x16>
 80188b2:	68d2      	ldr	r2, [r2, #12]
 80188b4:	4413      	add	r3, r2
 80188b6:	4298      	cmp	r0, r3
 80188b8:	d201      	bcs.n	80188be <__cxa_free_exception+0x16>
 80188ba:	f7ff bf6d 	b.w	8018798 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
 80188be:	f001 b97f 	b.w	8019bc0 <free>
 80188c2:	bf00      	nop
 80188c4:	20001700 	.word	0x20001700

080188c8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 80188c8:	b538      	push	{r3, r4, r5, lr}
 80188ca:	4c08      	ldr	r4, [pc, #32]	; (80188ec <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 80188cc:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 80188d0:	4628      	mov	r0, r5
 80188d2:	60e5      	str	r5, [r4, #12]
 80188d4:	f001 f96c 	bl	8019bb0 <malloc>
 80188d8:	60a0      	str	r0, [r4, #8]
 80188da:	b120      	cbz	r0, 80188e6 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
 80188dc:	2300      	movs	r3, #0
 80188de:	e9c0 5300 	strd	r5, r3, [r0]
 80188e2:	6060      	str	r0, [r4, #4]
 80188e4:	bd38      	pop	{r3, r4, r5, pc}
 80188e6:	60e0      	str	r0, [r4, #12]
 80188e8:	6060      	str	r0, [r4, #4]
 80188ea:	bd38      	pop	{r3, r4, r5, pc}
 80188ec:	20001700 	.word	0x20001700

080188f0 <__cxa_end_cleanup>:
 80188f0:	b41e      	push	{r1, r2, r3, r4}
 80188f2:	f000 f88d 	bl	8018a10 <__gnu_end_cleanup>
 80188f6:	bc1e      	pop	{r1, r2, r3, r4}
 80188f8:	f7ef f89e 	bl	8007a38 <_Unwind_Resume>

080188fc <__cxa_type_match>:
 80188fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188fe:	7802      	ldrb	r2, [r0, #0]
 8018900:	2a47      	cmp	r2, #71	; 0x47
 8018902:	b083      	sub	sp, #12
 8018904:	460c      	mov	r4, r1
 8018906:	461d      	mov	r5, r3
 8018908:	d019      	beq.n	801893e <__cxa_type_match+0x42>
 801890a:	4e26      	ldr	r6, [pc, #152]	; (80189a4 <__cxa_type_match+0xa8>)
 801890c:	2000      	movs	r0, #0
 801890e:	6833      	ldr	r3, [r6, #0]
 8018910:	9001      	str	r0, [sp, #4]
 8018912:	689b      	ldr	r3, [r3, #8]
 8018914:	4630      	mov	r0, r6
 8018916:	4798      	blx	r3
 8018918:	b178      	cbz	r0, 801893a <__cxa_type_match+0x3e>
 801891a:	9b01      	ldr	r3, [sp, #4]
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	9301      	str	r3, [sp, #4]
 8018920:	2702      	movs	r7, #2
 8018922:	6823      	ldr	r3, [r4, #0]
 8018924:	4631      	mov	r1, r6
 8018926:	4620      	mov	r0, r4
 8018928:	691e      	ldr	r6, [r3, #16]
 801892a:	aa01      	add	r2, sp, #4
 801892c:	2301      	movs	r3, #1
 801892e:	47b0      	blx	r6
 8018930:	bb10      	cbnz	r0, 8018978 <__cxa_type_match+0x7c>
 8018932:	4607      	mov	r7, r0
 8018934:	4638      	mov	r0, r7
 8018936:	b003      	add	sp, #12
 8018938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801893a:	2701      	movs	r7, #1
 801893c:	e7f1      	b.n	8018922 <__cxa_type_match+0x26>
 801893e:	7843      	ldrb	r3, [r0, #1]
 8018940:	2b4e      	cmp	r3, #78	; 0x4e
 8018942:	d1e2      	bne.n	801890a <__cxa_type_match+0xe>
 8018944:	7883      	ldrb	r3, [r0, #2]
 8018946:	2b55      	cmp	r3, #85	; 0x55
 8018948:	d1df      	bne.n	801890a <__cxa_type_match+0xe>
 801894a:	78c3      	ldrb	r3, [r0, #3]
 801894c:	2b43      	cmp	r3, #67	; 0x43
 801894e:	d1dc      	bne.n	801890a <__cxa_type_match+0xe>
 8018950:	7903      	ldrb	r3, [r0, #4]
 8018952:	2b46      	cmp	r3, #70	; 0x46
 8018954:	d01a      	beq.n	801898c <__cxa_type_match+0x90>
 8018956:	7903      	ldrb	r3, [r0, #4]
 8018958:	2b43      	cmp	r3, #67	; 0x43
 801895a:	d1d6      	bne.n	801890a <__cxa_type_match+0xe>
 801895c:	7943      	ldrb	r3, [r0, #5]
 801895e:	2b2b      	cmp	r3, #43	; 0x2b
 8018960:	d1d3      	bne.n	801890a <__cxa_type_match+0xe>
 8018962:	7983      	ldrb	r3, [r0, #6]
 8018964:	2b2b      	cmp	r3, #43	; 0x2b
 8018966:	d1d0      	bne.n	801890a <__cxa_type_match+0xe>
 8018968:	79c3      	ldrb	r3, [r0, #7]
 801896a:	2b01      	cmp	r3, #1
 801896c:	d8cd      	bhi.n	801890a <__cxa_type_match+0xe>
 801896e:	d008      	beq.n	8018982 <__cxa_type_match+0x86>
 8018970:	f850 6c20 	ldr.w	r6, [r0, #-32]
 8018974:	3058      	adds	r0, #88	; 0x58
 8018976:	e7ca      	b.n	801890e <__cxa_type_match+0x12>
 8018978:	9b01      	ldr	r3, [sp, #4]
 801897a:	602b      	str	r3, [r5, #0]
 801897c:	4638      	mov	r0, r7
 801897e:	b003      	add	sp, #12
 8018980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018982:	f850 0c20 	ldr.w	r0, [r0, #-32]
 8018986:	f850 6c78 	ldr.w	r6, [r0, #-120]
 801898a:	e7c0      	b.n	801890e <__cxa_type_match+0x12>
 801898c:	7943      	ldrb	r3, [r0, #5]
 801898e:	2b4f      	cmp	r3, #79	; 0x4f
 8018990:	d1e1      	bne.n	8018956 <__cxa_type_match+0x5a>
 8018992:	7983      	ldrb	r3, [r0, #6]
 8018994:	2b52      	cmp	r3, #82	; 0x52
 8018996:	d1de      	bne.n	8018956 <__cxa_type_match+0x5a>
 8018998:	79c3      	ldrb	r3, [r0, #7]
 801899a:	2b00      	cmp	r3, #0
 801899c:	d1db      	bne.n	8018956 <__cxa_type_match+0x5a>
 801899e:	4e02      	ldr	r6, [pc, #8]	; (80189a8 <__cxa_type_match+0xac>)
 80189a0:	4618      	mov	r0, r3
 80189a2:	e7b4      	b.n	801890e <__cxa_type_match+0x12>
 80189a4:	08023ab0 	.word	0x08023ab0
 80189a8:	08023aa8 	.word	0x08023aa8

080189ac <__cxa_begin_cleanup>:
 80189ac:	b510      	push	{r4, lr}
 80189ae:	4604      	mov	r4, r0
 80189b0:	f000 f8fe 	bl	8018bb0 <__cxa_get_globals>
 80189b4:	4622      	mov	r2, r4
 80189b6:	f812 3920 	ldrb.w	r3, [r2], #-32
 80189ba:	2b47      	cmp	r3, #71	; 0x47
 80189bc:	d004      	beq.n	80189c8 <__cxa_begin_cleanup+0x1c>
 80189be:	6883      	ldr	r3, [r0, #8]
 80189c0:	bb23      	cbnz	r3, 8018a0c <__cxa_begin_cleanup+0x60>
 80189c2:	6082      	str	r2, [r0, #8]
 80189c4:	2001      	movs	r0, #1
 80189c6:	bd10      	pop	{r4, pc}
 80189c8:	7863      	ldrb	r3, [r4, #1]
 80189ca:	2b4e      	cmp	r3, #78	; 0x4e
 80189cc:	d1f7      	bne.n	80189be <__cxa_begin_cleanup+0x12>
 80189ce:	78a3      	ldrb	r3, [r4, #2]
 80189d0:	2b55      	cmp	r3, #85	; 0x55
 80189d2:	d1f4      	bne.n	80189be <__cxa_begin_cleanup+0x12>
 80189d4:	78e3      	ldrb	r3, [r4, #3]
 80189d6:	2b43      	cmp	r3, #67	; 0x43
 80189d8:	d1f1      	bne.n	80189be <__cxa_begin_cleanup+0x12>
 80189da:	7923      	ldrb	r3, [r4, #4]
 80189dc:	2b43      	cmp	r3, #67	; 0x43
 80189de:	d1ee      	bne.n	80189be <__cxa_begin_cleanup+0x12>
 80189e0:	7963      	ldrb	r3, [r4, #5]
 80189e2:	2b2b      	cmp	r3, #43	; 0x2b
 80189e4:	d1eb      	bne.n	80189be <__cxa_begin_cleanup+0x12>
 80189e6:	79a3      	ldrb	r3, [r4, #6]
 80189e8:	2b2b      	cmp	r3, #43	; 0x2b
 80189ea:	d1e8      	bne.n	80189be <__cxa_begin_cleanup+0x12>
 80189ec:	79e3      	ldrb	r3, [r4, #7]
 80189ee:	2b01      	cmp	r3, #1
 80189f0:	d8e5      	bhi.n	80189be <__cxa_begin_cleanup+0x12>
 80189f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80189f6:	3301      	adds	r3, #1
 80189f8:	2b01      	cmp	r3, #1
 80189fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80189fe:	d1e1      	bne.n	80189c4 <__cxa_begin_cleanup+0x18>
 8018a00:	6883      	ldr	r3, [r0, #8]
 8018a02:	f844 3c08 	str.w	r3, [r4, #-8]
 8018a06:	6082      	str	r2, [r0, #8]
 8018a08:	2001      	movs	r0, #1
 8018a0a:	bd10      	pop	{r4, pc}
 8018a0c:	f000 fbf2 	bl	80191f4 <_ZSt9terminatev>

08018a10 <__gnu_end_cleanup>:
 8018a10:	b508      	push	{r3, lr}
 8018a12:	f000 f8cd 	bl	8018bb0 <__cxa_get_globals>
 8018a16:	6883      	ldr	r3, [r0, #8]
 8018a18:	b383      	cbz	r3, 8018a7c <__gnu_end_cleanup+0x6c>
 8018a1a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8018a1e:	2a47      	cmp	r2, #71	; 0x47
 8018a20:	d004      	beq.n	8018a2c <__gnu_end_cleanup+0x1c>
 8018a22:	2200      	movs	r2, #0
 8018a24:	6082      	str	r2, [r0, #8]
 8018a26:	f103 0020 	add.w	r0, r3, #32
 8018a2a:	bd08      	pop	{r3, pc}
 8018a2c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8018a30:	2a4e      	cmp	r2, #78	; 0x4e
 8018a32:	d1f6      	bne.n	8018a22 <__gnu_end_cleanup+0x12>
 8018a34:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8018a38:	2a55      	cmp	r2, #85	; 0x55
 8018a3a:	d1f2      	bne.n	8018a22 <__gnu_end_cleanup+0x12>
 8018a3c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8018a40:	2a43      	cmp	r2, #67	; 0x43
 8018a42:	d1ee      	bne.n	8018a22 <__gnu_end_cleanup+0x12>
 8018a44:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8018a48:	2a43      	cmp	r2, #67	; 0x43
 8018a4a:	d1ea      	bne.n	8018a22 <__gnu_end_cleanup+0x12>
 8018a4c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8018a50:	2a2b      	cmp	r2, #43	; 0x2b
 8018a52:	d1e6      	bne.n	8018a22 <__gnu_end_cleanup+0x12>
 8018a54:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8018a58:	2a2b      	cmp	r2, #43	; 0x2b
 8018a5a:	d1e2      	bne.n	8018a22 <__gnu_end_cleanup+0x12>
 8018a5c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8018a60:	2a01      	cmp	r2, #1
 8018a62:	d8de      	bhi.n	8018a22 <__gnu_end_cleanup+0x12>
 8018a64:	69da      	ldr	r2, [r3, #28]
 8018a66:	3a01      	subs	r2, #1
 8018a68:	61da      	str	r2, [r3, #28]
 8018a6a:	2a00      	cmp	r2, #0
 8018a6c:	d1db      	bne.n	8018a26 <__gnu_end_cleanup+0x16>
 8018a6e:	6999      	ldr	r1, [r3, #24]
 8018a70:	6081      	str	r1, [r0, #8]
 8018a72:	2200      	movs	r2, #0
 8018a74:	619a      	str	r2, [r3, #24]
 8018a76:	f103 0020 	add.w	r0, r3, #32
 8018a7a:	bd08      	pop	{r3, pc}
 8018a7c:	f000 fbba 	bl	80191f4 <_ZSt9terminatev>

08018a80 <__cxa_begin_catch>:
 8018a80:	b538      	push	{r3, r4, r5, lr}
 8018a82:	4604      	mov	r4, r0
 8018a84:	f000 f894 	bl	8018bb0 <__cxa_get_globals>
 8018a88:	4622      	mov	r2, r4
 8018a8a:	6805      	ldr	r5, [r0, #0]
 8018a8c:	f812 3920 	ldrb.w	r3, [r2], #-32
 8018a90:	2b47      	cmp	r3, #71	; 0x47
 8018a92:	d003      	beq.n	8018a9c <__cxa_begin_catch+0x1c>
 8018a94:	bb85      	cbnz	r5, 8018af8 <__cxa_begin_catch+0x78>
 8018a96:	6002      	str	r2, [r0, #0]
 8018a98:	4628      	mov	r0, r5
 8018a9a:	bd38      	pop	{r3, r4, r5, pc}
 8018a9c:	7863      	ldrb	r3, [r4, #1]
 8018a9e:	2b4e      	cmp	r3, #78	; 0x4e
 8018aa0:	d1f8      	bne.n	8018a94 <__cxa_begin_catch+0x14>
 8018aa2:	78a3      	ldrb	r3, [r4, #2]
 8018aa4:	2b55      	cmp	r3, #85	; 0x55
 8018aa6:	d1f5      	bne.n	8018a94 <__cxa_begin_catch+0x14>
 8018aa8:	78e3      	ldrb	r3, [r4, #3]
 8018aaa:	2b43      	cmp	r3, #67	; 0x43
 8018aac:	d1f2      	bne.n	8018a94 <__cxa_begin_catch+0x14>
 8018aae:	7923      	ldrb	r3, [r4, #4]
 8018ab0:	2b43      	cmp	r3, #67	; 0x43
 8018ab2:	d1ef      	bne.n	8018a94 <__cxa_begin_catch+0x14>
 8018ab4:	7963      	ldrb	r3, [r4, #5]
 8018ab6:	2b2b      	cmp	r3, #43	; 0x2b
 8018ab8:	d1ec      	bne.n	8018a94 <__cxa_begin_catch+0x14>
 8018aba:	79a3      	ldrb	r3, [r4, #6]
 8018abc:	2b2b      	cmp	r3, #43	; 0x2b
 8018abe:	d1e9      	bne.n	8018a94 <__cxa_begin_catch+0x14>
 8018ac0:	79e3      	ldrb	r3, [r4, #7]
 8018ac2:	2b01      	cmp	r3, #1
 8018ac4:	d8e6      	bhi.n	8018a94 <__cxa_begin_catch+0x14>
 8018ac6:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	db11      	blt.n	8018af2 <__cxa_begin_catch+0x72>
 8018ace:	3301      	adds	r3, #1
 8018ad0:	f844 3c0c 	str.w	r3, [r4, #-12]
 8018ad4:	6843      	ldr	r3, [r0, #4]
 8018ad6:	3b01      	subs	r3, #1
 8018ad8:	6043      	str	r3, [r0, #4]
 8018ada:	4295      	cmp	r5, r2
 8018adc:	bf18      	it	ne
 8018ade:	f844 5c10 	strne.w	r5, [r4, #-16]
 8018ae2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018ae4:	bf18      	it	ne
 8018ae6:	6002      	strne	r2, [r0, #0]
 8018ae8:	4620      	mov	r0, r4
 8018aea:	f7ee fbd1 	bl	8007290 <_Unwind_Complete>
 8018aee:	4628      	mov	r0, r5
 8018af0:	bd38      	pop	{r3, r4, r5, pc}
 8018af2:	f1c3 0301 	rsb	r3, r3, #1
 8018af6:	e7eb      	b.n	8018ad0 <__cxa_begin_catch+0x50>
 8018af8:	f000 fb7c 	bl	80191f4 <_ZSt9terminatev>

08018afc <__cxa_end_catch>:
 8018afc:	b508      	push	{r3, lr}
 8018afe:	f000 f853 	bl	8018ba8 <__cxa_get_globals_fast>
 8018b02:	6803      	ldr	r3, [r0, #0]
 8018b04:	b37b      	cbz	r3, 8018b66 <__cxa_end_catch+0x6a>
 8018b06:	f893 2020 	ldrb.w	r2, [r3, #32]
 8018b0a:	2a47      	cmp	r2, #71	; 0x47
 8018b0c:	d007      	beq.n	8018b1e <__cxa_end_catch+0x22>
 8018b0e:	2200      	movs	r2, #0
 8018b10:	6002      	str	r2, [r0, #0]
 8018b12:	f103 0020 	add.w	r0, r3, #32
 8018b16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018b1a:	f7ee bbbb 	b.w	8007294 <_Unwind_DeleteException>
 8018b1e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8018b22:	2a4e      	cmp	r2, #78	; 0x4e
 8018b24:	d1f3      	bne.n	8018b0e <__cxa_end_catch+0x12>
 8018b26:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8018b2a:	2a55      	cmp	r2, #85	; 0x55
 8018b2c:	d1ef      	bne.n	8018b0e <__cxa_end_catch+0x12>
 8018b2e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8018b32:	2a43      	cmp	r2, #67	; 0x43
 8018b34:	d1eb      	bne.n	8018b0e <__cxa_end_catch+0x12>
 8018b36:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8018b3a:	2a43      	cmp	r2, #67	; 0x43
 8018b3c:	d1e7      	bne.n	8018b0e <__cxa_end_catch+0x12>
 8018b3e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8018b42:	2a2b      	cmp	r2, #43	; 0x2b
 8018b44:	d1e3      	bne.n	8018b0e <__cxa_end_catch+0x12>
 8018b46:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8018b4a:	2a2b      	cmp	r2, #43	; 0x2b
 8018b4c:	d1df      	bne.n	8018b0e <__cxa_end_catch+0x12>
 8018b4e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8018b52:	2a01      	cmp	r2, #1
 8018b54:	d8db      	bhi.n	8018b0e <__cxa_end_catch+0x12>
 8018b56:	695a      	ldr	r2, [r3, #20]
 8018b58:	2a00      	cmp	r2, #0
 8018b5a:	db05      	blt.n	8018b68 <__cxa_end_catch+0x6c>
 8018b5c:	3a01      	subs	r2, #1
 8018b5e:	d008      	beq.n	8018b72 <__cxa_end_catch+0x76>
 8018b60:	1c51      	adds	r1, r2, #1
 8018b62:	d00e      	beq.n	8018b82 <__cxa_end_catch+0x86>
 8018b64:	615a      	str	r2, [r3, #20]
 8018b66:	bd08      	pop	{r3, pc}
 8018b68:	3201      	adds	r2, #1
 8018b6a:	d1fb      	bne.n	8018b64 <__cxa_end_catch+0x68>
 8018b6c:	6919      	ldr	r1, [r3, #16]
 8018b6e:	6001      	str	r1, [r0, #0]
 8018b70:	e7f8      	b.n	8018b64 <__cxa_end_catch+0x68>
 8018b72:	691a      	ldr	r2, [r3, #16]
 8018b74:	6002      	str	r2, [r0, #0]
 8018b76:	f103 0020 	add.w	r0, r3, #32
 8018b7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018b7e:	f7ee bb89 	b.w	8007294 <_Unwind_DeleteException>
 8018b82:	f000 fb37 	bl	80191f4 <_ZSt9terminatev>
 8018b86:	bf00      	nop

08018b88 <_ZNSt9exceptionD1Ev>:
 8018b88:	4770      	bx	lr
 8018b8a:	bf00      	nop

08018b8c <_ZNSt13bad_exceptionD1Ev>:
 8018b8c:	4770      	bx	lr
 8018b8e:	bf00      	nop

08018b90 <_ZGTtNKSt13bad_exception4whatEv>:
 8018b90:	4800      	ldr	r0, [pc, #0]	; (8018b94 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
 8018b92:	4770      	bx	lr
 8018b94:	08023a94 	.word	0x08023a94

08018b98 <_ZNSt13bad_exceptionD0Ev>:
 8018b98:	b510      	push	{r4, lr}
 8018b9a:	2104      	movs	r1, #4
 8018b9c:	4604      	mov	r4, r0
 8018b9e:	f7ff fdf9 	bl	8018794 <_ZdlPvj>
 8018ba2:	4620      	mov	r0, r4
 8018ba4:	bd10      	pop	{r4, pc}
 8018ba6:	bf00      	nop

08018ba8 <__cxa_get_globals_fast>:
 8018ba8:	4800      	ldr	r0, [pc, #0]	; (8018bac <__cxa_get_globals_fast+0x4>)
 8018baa:	4770      	bx	lr
 8018bac:	20001710 	.word	0x20001710

08018bb0 <__cxa_get_globals>:
 8018bb0:	4800      	ldr	r0, [pc, #0]	; (8018bb4 <__cxa_get_globals+0x4>)
 8018bb2:	4770      	bx	lr
 8018bb4:	20001710 	.word	0x20001710

08018bb8 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8018bb8:	2850      	cmp	r0, #80	; 0x50
 8018bba:	b570      	push	{r4, r5, r6, lr}
 8018bbc:	d01d      	beq.n	8018bfa <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8018bbe:	4684      	mov	ip, r0
 8018bc0:	f000 000f 	and.w	r0, r0, #15
 8018bc4:	280c      	cmp	r0, #12
 8018bc6:	d855      	bhi.n	8018c74 <_ZL28read_encoded_value_with_basehjPKhPj+0xbc>
 8018bc8:	e8df f000 	tbb	[pc, r0]
 8018bcc:	07264407 	.word	0x07264407
 8018bd0:	5454541e 	.word	0x5454541e
 8018bd4:	07222a54 	.word	0x07222a54
 8018bd8:	1e          	.byte	0x1e
 8018bd9:	00          	.byte	0x00
 8018bda:	4610      	mov	r0, r2
 8018bdc:	f850 6b04 	ldr.w	r6, [r0], #4
 8018be0:	b14e      	cbz	r6, 8018bf6 <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
 8018be2:	f00c 0470 	and.w	r4, ip, #112	; 0x70
 8018be6:	2c10      	cmp	r4, #16
 8018be8:	bf08      	it	eq
 8018bea:	4611      	moveq	r1, r2
 8018bec:	440e      	add	r6, r1
 8018bee:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8018bf2:	bf18      	it	ne
 8018bf4:	6836      	ldrne	r6, [r6, #0]
 8018bf6:	601e      	str	r6, [r3, #0]
 8018bf8:	bd70      	pop	{r4, r5, r6, pc}
 8018bfa:	1cd0      	adds	r0, r2, #3
 8018bfc:	f020 0003 	bic.w	r0, r0, #3
 8018c00:	f850 6b04 	ldr.w	r6, [r0], #4
 8018c04:	601e      	str	r6, [r3, #0]
 8018c06:	bd70      	pop	{r4, r5, r6, pc}
 8018c08:	4610      	mov	r0, r2
 8018c0a:	f850 6b08 	ldr.w	r6, [r0], #8
 8018c0e:	e7e7      	b.n	8018be0 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 8018c10:	4610      	mov	r0, r2
 8018c12:	f930 6b02 	ldrsh.w	r6, [r0], #2
 8018c16:	e7e3      	b.n	8018be0 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 8018c18:	4610      	mov	r0, r2
 8018c1a:	f830 6b02 	ldrh.w	r6, [r0], #2
 8018c1e:	e7df      	b.n	8018be0 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 8018c20:	2600      	movs	r6, #0
 8018c22:	4610      	mov	r0, r2
 8018c24:	4634      	mov	r4, r6
 8018c26:	f810 5b01 	ldrb.w	r5, [r0], #1
 8018c2a:	f005 0e7f 	and.w	lr, r5, #127	; 0x7f
 8018c2e:	fa0e fe04 	lsl.w	lr, lr, r4
 8018c32:	f015 0f80 	tst.w	r5, #128	; 0x80
 8018c36:	ea46 060e 	orr.w	r6, r6, lr
 8018c3a:	f104 0407 	add.w	r4, r4, #7
 8018c3e:	d1f2      	bne.n	8018c26 <_ZL28read_encoded_value_with_basehjPKhPj+0x6e>
 8018c40:	2c1f      	cmp	r4, #31
 8018c42:	d8cd      	bhi.n	8018be0 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 8018c44:	066d      	lsls	r5, r5, #25
 8018c46:	d5cb      	bpl.n	8018be0 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 8018c48:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8018c4c:	fa05 f404 	lsl.w	r4, r5, r4
 8018c50:	4326      	orrs	r6, r4
 8018c52:	e7c6      	b.n	8018be2 <_ZL28read_encoded_value_with_basehjPKhPj+0x2a>
 8018c54:	2600      	movs	r6, #0
 8018c56:	4610      	mov	r0, r2
 8018c58:	4634      	mov	r4, r6
 8018c5a:	f810 5b01 	ldrb.w	r5, [r0], #1
 8018c5e:	f005 0e7f 	and.w	lr, r5, #127	; 0x7f
 8018c62:	fa0e fe04 	lsl.w	lr, lr, r4
 8018c66:	062d      	lsls	r5, r5, #24
 8018c68:	ea46 060e 	orr.w	r6, r6, lr
 8018c6c:	f104 0407 	add.w	r4, r4, #7
 8018c70:	d4f3      	bmi.n	8018c5a <_ZL28read_encoded_value_with_basehjPKhPj+0xa2>
 8018c72:	e7b5      	b.n	8018be0 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 8018c74:	f000 ff8e 	bl	8019b94 <abort>

08018c78 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8018c78:	28ff      	cmp	r0, #255	; 0xff
 8018c7a:	b508      	push	{r3, lr}
 8018c7c:	4603      	mov	r3, r0
 8018c7e:	d019      	beq.n	8018cb4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3c>
 8018c80:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8018c84:	2a30      	cmp	r2, #48	; 0x30
 8018c86:	4608      	mov	r0, r1
 8018c88:	d016      	beq.n	8018cb8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 8018c8a:	d805      	bhi.n	8018c98 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8018c8c:	2a20      	cmp	r2, #32
 8018c8e:	d109      	bne.n	8018ca4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8018c90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018c94:	f005 bb37 	b.w	801e306 <_Unwind_GetTextRelBase>
 8018c98:	2a40      	cmp	r2, #64	; 0x40
 8018c9a:	d109      	bne.n	8018cb0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 8018c9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018ca0:	f7ef b89a 	b.w	8007dd8 <_Unwind_GetRegionStart>
 8018ca4:	d802      	bhi.n	8018cac <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x34>
 8018ca6:	f013 0f60 	tst.w	r3, #96	; 0x60
 8018caa:	d003      	beq.n	8018cb4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3c>
 8018cac:	f000 ff72 	bl	8019b94 <abort>
 8018cb0:	2a50      	cmp	r2, #80	; 0x50
 8018cb2:	d1fb      	bne.n	8018cac <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x34>
 8018cb4:	2000      	movs	r0, #0
 8018cb6:	bd08      	pop	{r3, pc}
 8018cb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018cbc:	f005 bb20 	b.w	801e300 <_Unwind_GetDataRelBase>

08018cc0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8018cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cc2:	460c      	mov	r4, r1
 8018cc4:	4615      	mov	r5, r2
 8018cc6:	4606      	mov	r6, r0
 8018cc8:	b108      	cbz	r0, 8018cce <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 8018cca:	f7ef f885 	bl	8007dd8 <_Unwind_GetRegionStart>
 8018cce:	6028      	str	r0, [r5, #0]
 8018cd0:	f814 7b01 	ldrb.w	r7, [r4], #1
 8018cd4:	2fff      	cmp	r7, #255	; 0xff
 8018cd6:	d128      	bne.n	8018d2a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x6a>
 8018cd8:	6068      	str	r0, [r5, #4]
 8018cda:	4620      	mov	r0, r4
 8018cdc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018ce0:	2bff      	cmp	r3, #255	; 0xff
 8018ce2:	d032      	beq.n	8018d4a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8a>
 8018ce4:	2310      	movs	r3, #16
 8018ce6:	2400      	movs	r4, #0
 8018ce8:	752b      	strb	r3, [r5, #20]
 8018cea:	4622      	mov	r2, r4
 8018cec:	f810 1b01 	ldrb.w	r1, [r0], #1
 8018cf0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8018cf4:	4093      	lsls	r3, r2
 8018cf6:	0609      	lsls	r1, r1, #24
 8018cf8:	ea44 0403 	orr.w	r4, r4, r3
 8018cfc:	f102 0207 	add.w	r2, r2, #7
 8018d00:	d4f4      	bmi.n	8018cec <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x2c>
 8018d02:	4404      	add	r4, r0
 8018d04:	60ec      	str	r4, [r5, #12]
 8018d06:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018d0a:	756b      	strb	r3, [r5, #21]
 8018d0c:	2400      	movs	r4, #0
 8018d0e:	4622      	mov	r2, r4
 8018d10:	f810 1b01 	ldrb.w	r1, [r0], #1
 8018d14:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8018d18:	4093      	lsls	r3, r2
 8018d1a:	431c      	orrs	r4, r3
 8018d1c:	060b      	lsls	r3, r1, #24
 8018d1e:	f102 0207 	add.w	r2, r2, #7
 8018d22:	d4f5      	bmi.n	8018d10 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x50>
 8018d24:	4404      	add	r4, r0
 8018d26:	612c      	str	r4, [r5, #16]
 8018d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d2a:	4631      	mov	r1, r6
 8018d2c:	4638      	mov	r0, r7
 8018d2e:	f7ff ffa3 	bl	8018c78 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8018d32:	4622      	mov	r2, r4
 8018d34:	4601      	mov	r1, r0
 8018d36:	1d2b      	adds	r3, r5, #4
 8018d38:	4638      	mov	r0, r7
 8018d3a:	f7ff ff3d 	bl	8018bb8 <_ZL28read_encoded_value_with_basehjPKhPj>
 8018d3e:	4604      	mov	r4, r0
 8018d40:	4620      	mov	r0, r4
 8018d42:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018d46:	2bff      	cmp	r3, #255	; 0xff
 8018d48:	d1cc      	bne.n	8018ce4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
 8018d4a:	752b      	strb	r3, [r5, #20]
 8018d4c:	2400      	movs	r4, #0
 8018d4e:	e7d9      	b.n	8018d04 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>

08018d50 <__gxx_personality_v0>:
 8018d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d54:	f000 0403 	and.w	r4, r0, #3
 8018d58:	b093      	sub	sp, #76	; 0x4c
 8018d5a:	2300      	movs	r3, #0
 8018d5c:	2c01      	cmp	r4, #1
 8018d5e:	9308      	str	r3, [sp, #32]
 8018d60:	460f      	mov	r7, r1
 8018d62:	4690      	mov	r8, r2
 8018d64:	d013      	beq.n	8018d8e <__gxx_personality_v0+0x3e>
 8018d66:	2c02      	cmp	r4, #2
 8018d68:	d108      	bne.n	8018d7c <__gxx_personality_v0+0x2c>
 8018d6a:	4641      	mov	r1, r8
 8018d6c:	4638      	mov	r0, r7
 8018d6e:	f7ef f81d 	bl	8007dac <__gnu_unwind_frame>
 8018d72:	b940      	cbnz	r0, 8018d86 <__gxx_personality_v0+0x36>
 8018d74:	2008      	movs	r0, #8
 8018d76:	b013      	add	sp, #76	; 0x4c
 8018d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d7c:	2c00      	cmp	r4, #0
 8018d7e:	f000 8093 	beq.w	8018ea8 <__gxx_personality_v0+0x158>
 8018d82:	f000 ff07 	bl	8019b94 <abort>
 8018d86:	2009      	movs	r0, #9
 8018d88:	b013      	add	sp, #76	; 0x4c
 8018d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d8e:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8018d92:	f010 0408 	ands.w	r4, r0, #8
 8018d96:	f8cd a000 	str.w	sl, [sp]
 8018d9a:	f000 809a 	beq.w	8018ed2 <__gxx_personality_v0+0x182>
 8018d9e:	f044 0202 	orr.w	r2, r4, #2
 8018da2:	9202      	str	r2, [sp, #8]
 8018da4:	910c      	str	r1, [sp, #48]	; 0x30
 8018da6:	220c      	movs	r2, #12
 8018da8:	4619      	mov	r1, r3
 8018daa:	4640      	mov	r0, r8
 8018dac:	f7ee fa9e 	bl	80072ec <_Unwind_VRS_Set>
 8018db0:	4640      	mov	r0, r8
 8018db2:	f7ef f817 	bl	8007de4 <_Unwind_GetLanguageSpecificData>
 8018db6:	4683      	mov	fp, r0
 8018db8:	2800      	cmp	r0, #0
 8018dba:	d0d6      	beq.n	8018d6a <__gxx_personality_v0+0x1a>
 8018dbc:	4652      	mov	r2, sl
 8018dbe:	4601      	mov	r1, r0
 8018dc0:	4640      	mov	r0, r8
 8018dc2:	f7ff ff7d 	bl	8018cc0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8018dc6:	4641      	mov	r1, r8
 8018dc8:	4605      	mov	r5, r0
 8018dca:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8018dce:	f7ff ff53 	bl	8018c78 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8018dd2:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 8018dd6:	2300      	movs	r3, #0
 8018dd8:	900e      	str	r0, [sp, #56]	; 0x38
 8018dda:	4619      	mov	r1, r3
 8018ddc:	f8cd 9000 	str.w	r9, [sp]
 8018de0:	220f      	movs	r2, #15
 8018de2:	4640      	mov	r0, r8
 8018de4:	f7ee fa5c 	bl	80072a0 <_Unwind_VRS_Get>
 8018de8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018dea:	f023 0301 	bic.w	r3, r3, #1
 8018dee:	1e5e      	subs	r6, r3, #1
 8018df0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018df2:	429d      	cmp	r5, r3
 8018df4:	f080 80bd 	bcs.w	8018f72 <__gxx_personality_v0+0x222>
 8018df8:	f89d 4045 	ldrb.w	r4, [sp, #69]	; 0x45
 8018dfc:	2100      	movs	r1, #0
 8018dfe:	4620      	mov	r0, r4
 8018e00:	f7ff ff3a 	bl	8018c78 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8018e04:	462a      	mov	r2, r5
 8018e06:	4601      	mov	r1, r0
 8018e08:	ab09      	add	r3, sp, #36	; 0x24
 8018e0a:	4620      	mov	r0, r4
 8018e0c:	f7ff fed4 	bl	8018bb8 <_ZL28read_encoded_value_with_basehjPKhPj>
 8018e10:	f89d 5045 	ldrb.w	r5, [sp, #69]	; 0x45
 8018e14:	4604      	mov	r4, r0
 8018e16:	2100      	movs	r1, #0
 8018e18:	4628      	mov	r0, r5
 8018e1a:	f7ff ff2d 	bl	8018c78 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8018e1e:	4622      	mov	r2, r4
 8018e20:	4601      	mov	r1, r0
 8018e22:	ab0a      	add	r3, sp, #40	; 0x28
 8018e24:	4628      	mov	r0, r5
 8018e26:	f7ff fec7 	bl	8018bb8 <_ZL28read_encoded_value_with_basehjPKhPj>
 8018e2a:	f89d 5045 	ldrb.w	r5, [sp, #69]	; 0x45
 8018e2e:	4604      	mov	r4, r0
 8018e30:	2100      	movs	r1, #0
 8018e32:	4628      	mov	r0, r5
 8018e34:	f7ff ff20 	bl	8018c78 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8018e38:	4622      	mov	r2, r4
 8018e3a:	4601      	mov	r1, r0
 8018e3c:	464b      	mov	r3, r9
 8018e3e:	4628      	mov	r0, r5
 8018e40:	f7ff feba 	bl	8018bb8 <_ZL28read_encoded_value_with_basehjPKhPj>
 8018e44:	2400      	movs	r4, #0
 8018e46:	4605      	mov	r5, r0
 8018e48:	4622      	mov	r2, r4
 8018e4a:	f815 1b01 	ldrb.w	r1, [r5], #1
 8018e4e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8018e52:	4093      	lsls	r3, r2
 8018e54:	431c      	orrs	r4, r3
 8018e56:	060b      	lsls	r3, r1, #24
 8018e58:	f102 0207 	add.w	r2, r2, #7
 8018e5c:	d4f5      	bmi.n	8018e4a <__gxx_personality_v0+0xfa>
 8018e5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018e60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018e62:	4413      	add	r3, r2
 8018e64:	42b3      	cmp	r3, r6
 8018e66:	d917      	bls.n	8018e98 <__gxx_personality_v0+0x148>
 8018e68:	9b02      	ldr	r3, [sp, #8]
 8018e6a:	07d8      	lsls	r0, r3, #31
 8018e6c:	d52d      	bpl.n	8018eca <__gxx_personality_v0+0x17a>
 8018e6e:	2400      	movs	r4, #0
 8018e70:	9403      	str	r4, [sp, #12]
 8018e72:	2300      	movs	r3, #0
 8018e74:	4619      	mov	r1, r3
 8018e76:	f8cd 9000 	str.w	r9, [sp]
 8018e7a:	4640      	mov	r0, r8
 8018e7c:	220d      	movs	r2, #13
 8018e7e:	9d08      	ldr	r5, [sp, #32]
 8018e80:	f7ee fa0e 	bl	80072a0 <_Unwind_VRS_Get>
 8018e84:	9b03      	ldr	r3, [sp, #12]
 8018e86:	633b      	str	r3, [r7, #48]	; 0x30
 8018e88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018e8a:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 8018e8e:	e9c7 5409 	strd	r5, r4, [r7, #36]	; 0x24
 8018e92:	2006      	movs	r0, #6
 8018e94:	623b      	str	r3, [r7, #32]
 8018e96:	e76e      	b.n	8018d76 <__gxx_personality_v0+0x26>
 8018e98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018e9a:	4413      	add	r3, r2
 8018e9c:	42b3      	cmp	r3, r6
 8018e9e:	d872      	bhi.n	8018f86 <__gxx_personality_v0+0x236>
 8018ea0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018ea2:	42ab      	cmp	r3, r5
 8018ea4:	d8a8      	bhi.n	8018df8 <__gxx_personality_v0+0xa8>
 8018ea6:	e7df      	b.n	8018e68 <__gxx_personality_v0+0x118>
 8018ea8:	0702      	lsls	r2, r0, #28
 8018eaa:	f53f af5e 	bmi.w	8018d6a <__gxx_personality_v0+0x1a>
 8018eae:	2301      	movs	r3, #1
 8018eb0:	9302      	str	r3, [sp, #8]
 8018eb2:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8018eb6:	2300      	movs	r3, #0
 8018eb8:	f8cd a000 	str.w	sl, [sp]
 8018ebc:	220c      	movs	r2, #12
 8018ebe:	4619      	mov	r1, r3
 8018ec0:	4640      	mov	r0, r8
 8018ec2:	970c      	str	r7, [sp, #48]	; 0x30
 8018ec4:	f7ee fa12 	bl	80072ec <_Unwind_VRS_Set>
 8018ec8:	e772      	b.n	8018db0 <__gxx_personality_v0+0x60>
 8018eca:	0719      	lsls	r1, r3, #28
 8018ecc:	d558      	bpl.n	8018f80 <__gxx_personality_v0+0x230>
 8018ece:	f000 f991 	bl	80191f4 <_ZSt9terminatev>
 8018ed2:	6a0d      	ldr	r5, [r1, #32]
 8018ed4:	4623      	mov	r3, r4
 8018ed6:	220d      	movs	r2, #13
 8018ed8:	4621      	mov	r1, r4
 8018eda:	4640      	mov	r0, r8
 8018edc:	f7ee f9e0 	bl	80072a0 <_Unwind_VRS_Get>
 8018ee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018ee2:	429d      	cmp	r5, r3
 8018ee4:	d002      	beq.n	8018eec <__gxx_personality_v0+0x19c>
 8018ee6:	2302      	movs	r3, #2
 8018ee8:	9302      	str	r3, [sp, #8]
 8018eea:	e7e4      	b.n	8018eb6 <__gxx_personality_v0+0x166>
 8018eec:	4623      	mov	r3, r4
 8018eee:	4621      	mov	r1, r4
 8018ef0:	220c      	movs	r2, #12
 8018ef2:	f8cd a000 	str.w	sl, [sp]
 8018ef6:	4640      	mov	r0, r8
 8018ef8:	970c      	str	r7, [sp, #48]	; 0x30
 8018efa:	f7ee f9f7 	bl	80072ec <_Unwind_VRS_Set>
 8018efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018f00:	9203      	str	r2, [sp, #12]
 8018f02:	e9d7 430a 	ldrd	r4, r3, [r7, #40]	; 0x28
 8018f06:	2a00      	cmp	r2, #0
 8018f08:	d03a      	beq.n	8018f80 <__gxx_personality_v0+0x230>
 8018f0a:	469b      	mov	fp, r3
 8018f0c:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 8018f10:	2c00      	cmp	r4, #0
 8018f12:	db54      	blt.n	8018fbe <__gxx_personality_v0+0x26e>
 8018f14:	2503      	movs	r5, #3
 8018f16:	2300      	movs	r3, #0
 8018f18:	461a      	mov	r2, r3
 8018f1a:	4619      	mov	r1, r3
 8018f1c:	f8cd 9000 	str.w	r9, [sp]
 8018f20:	4640      	mov	r0, r8
 8018f22:	970b      	str	r7, [sp, #44]	; 0x2c
 8018f24:	f7ee f9e2 	bl	80072ec <_Unwind_VRS_Set>
 8018f28:	2300      	movs	r3, #0
 8018f2a:	4619      	mov	r1, r3
 8018f2c:	2201      	movs	r2, #1
 8018f2e:	f8cd 9000 	str.w	r9, [sp]
 8018f32:	4640      	mov	r0, r8
 8018f34:	940b      	str	r4, [sp, #44]	; 0x2c
 8018f36:	f7ee f9d9 	bl	80072ec <_Unwind_VRS_Set>
 8018f3a:	2300      	movs	r3, #0
 8018f3c:	4619      	mov	r1, r3
 8018f3e:	220f      	movs	r2, #15
 8018f40:	f8cd 9000 	str.w	r9, [sp]
 8018f44:	4640      	mov	r0, r8
 8018f46:	f7ee f9ab 	bl	80072a0 <_Unwind_VRS_Get>
 8018f4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018f4c:	9903      	ldr	r1, [sp, #12]
 8018f4e:	f8cd 9000 	str.w	r9, [sp]
 8018f52:	f002 0201 	and.w	r2, r2, #1
 8018f56:	430a      	orrs	r2, r1
 8018f58:	2300      	movs	r3, #0
 8018f5a:	920b      	str	r2, [sp, #44]	; 0x2c
 8018f5c:	4640      	mov	r0, r8
 8018f5e:	220f      	movs	r2, #15
 8018f60:	4619      	mov	r1, r3
 8018f62:	f7ee f9c3 	bl	80072ec <_Unwind_VRS_Set>
 8018f66:	2d02      	cmp	r5, #2
 8018f68:	d024      	beq.n	8018fb4 <__gxx_personality_v0+0x264>
 8018f6a:	2007      	movs	r0, #7
 8018f6c:	b013      	add	sp, #76	; 0x4c
 8018f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f72:	9b02      	ldr	r3, [sp, #8]
 8018f74:	07de      	lsls	r6, r3, #31
 8018f76:	f53f af7a 	bmi.w	8018e6e <__gxx_personality_v0+0x11e>
 8018f7a:	9b02      	ldr	r3, [sp, #8]
 8018f7c:	071b      	lsls	r3, r3, #28
 8018f7e:	d4a6      	bmi.n	8018ece <__gxx_personality_v0+0x17e>
 8018f80:	4638      	mov	r0, r7
 8018f82:	f000 fca1 	bl	80198c8 <__cxa_call_terminate>
 8018f86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	f43f aeee 	beq.w	8018d6a <__gxx_personality_v0+0x1a>
 8018f8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018f90:	4413      	add	r3, r2
 8018f92:	9303      	str	r3, [sp, #12]
 8018f94:	2c00      	cmp	r4, #0
 8018f96:	d136      	bne.n	8019006 <__gxx_personality_v0+0x2b6>
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	f43f aee6 	beq.w	8018d6a <__gxx_personality_v0+0x1a>
 8018f9e:	9b02      	ldr	r3, [sp, #8]
 8018fa0:	07dd      	lsls	r5, r3, #31
 8018fa2:	f53f aee2 	bmi.w	8018d6a <__gxx_personality_v0+0x1a>
 8018fa6:	9b02      	ldr	r3, [sp, #8]
 8018fa8:	071a      	lsls	r2, r3, #28
 8018faa:	f140 8116 	bpl.w	80191da <__gxx_personality_v0+0x48a>
 8018fae:	2400      	movs	r4, #0
 8018fb0:	2502      	movs	r5, #2
 8018fb2:	e7b0      	b.n	8018f16 <__gxx_personality_v0+0x1c6>
 8018fb4:	4638      	mov	r0, r7
 8018fb6:	f7ff fcf9 	bl	80189ac <__cxa_begin_cleanup>
 8018fba:	2007      	movs	r0, #7
 8018fbc:	e6db      	b.n	8018d76 <__gxx_personality_v0+0x26>
 8018fbe:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8018fc2:	1b1b      	subs	r3, r3, r4
 8018fc4:	461e      	mov	r6, r3
 8018fc6:	4652      	mov	r2, sl
 8018fc8:	4659      	mov	r1, fp
 8018fca:	4640      	mov	r0, r8
 8018fcc:	f7ff fe78 	bl	8018cc0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8018fd0:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8018fd4:	4641      	mov	r1, r8
 8018fd6:	f7ff fe4f 	bl	8018c78 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8018fda:	900e      	str	r0, [sp, #56]	; 0x38
 8018fdc:	4605      	mov	r5, r0
 8018fde:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018fe0:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]
 8018fe4:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8018fe8:	b133      	cbz	r3, 8018ff8 <__gxx_personality_v0+0x2a8>
 8018fea:	4602      	mov	r2, r0
 8018fec:	2300      	movs	r3, #0
 8018fee:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8018ff2:	3301      	adds	r3, #1
 8018ff4:	2900      	cmp	r1, #0
 8018ff6:	d1fa      	bne.n	8018fee <__gxx_personality_v0+0x29e>
 8018ff8:	e9c7 350a 	strd	r3, r5, [r7, #40]	; 0x28
 8018ffc:	2304      	movs	r3, #4
 8018ffe:	6378      	str	r0, [r7, #52]	; 0x34
 8019000:	633b      	str	r3, [r7, #48]	; 0x30
 8019002:	2503      	movs	r5, #3
 8019004:	e787      	b.n	8018f16 <__gxx_personality_v0+0x1c6>
 8019006:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8019008:	9b03      	ldr	r3, [sp, #12]
 801900a:	3c01      	subs	r4, #1
 801900c:	4426      	add	r6, r4
 801900e:	2b00      	cmp	r3, #0
 8019010:	f43f aeab 	beq.w	8018d6a <__gxx_personality_v0+0x1a>
 8019014:	9b02      	ldr	r3, [sp, #8]
 8019016:	2e00      	cmp	r6, #0
 8019018:	f000 80d7 	beq.w	80191ca <__gxx_personality_v0+0x47a>
 801901c:	f013 0308 	ands.w	r3, r3, #8
 8019020:	9304      	str	r3, [sp, #16]
 8019022:	f000 80c9 	beq.w	80191b8 <__gxx_personality_v0+0x468>
 8019026:	2347      	movs	r3, #71	; 0x47
 8019028:	703b      	strb	r3, [r7, #0]
 801902a:	234e      	movs	r3, #78	; 0x4e
 801902c:	707b      	strb	r3, [r7, #1]
 801902e:	2355      	movs	r3, #85	; 0x55
 8019030:	70bb      	strb	r3, [r7, #2]
 8019032:	2343      	movs	r3, #67	; 0x43
 8019034:	70fb      	strb	r3, [r7, #3]
 8019036:	2346      	movs	r3, #70	; 0x46
 8019038:	713b      	strb	r3, [r7, #4]
 801903a:	234f      	movs	r3, #79	; 0x4f
 801903c:	717b      	strb	r3, [r7, #5]
 801903e:	2352      	movs	r3, #82	; 0x52
 8019040:	71bb      	strb	r3, [r7, #6]
 8019042:	2300      	movs	r3, #0
 8019044:	71fb      	strb	r3, [r7, #7]
 8019046:	2300      	movs	r3, #0
 8019048:	f8cd b018 	str.w	fp, [sp, #24]
 801904c:	f8cd 8014 	str.w	r8, [sp, #20]
 8019050:	469b      	mov	fp, r3
 8019052:	f8cd a01c 	str.w	sl, [sp, #28]
 8019056:	2400      	movs	r4, #0
 8019058:	4622      	mov	r2, r4
 801905a:	f816 1b01 	ldrb.w	r1, [r6], #1
 801905e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8019062:	4093      	lsls	r3, r2
 8019064:	0608      	lsls	r0, r1, #24
 8019066:	ea44 0403 	orr.w	r4, r4, r3
 801906a:	f102 0207 	add.w	r2, r2, #7
 801906e:	d4f4      	bmi.n	801905a <__gxx_personality_v0+0x30a>
 8019070:	2a1f      	cmp	r2, #31
 8019072:	d805      	bhi.n	8019080 <__gxx_personality_v0+0x330>
 8019074:	0649      	lsls	r1, r1, #25
 8019076:	d503      	bpl.n	8019080 <__gxx_personality_v0+0x330>
 8019078:	2301      	movs	r3, #1
 801907a:	4093      	lsls	r3, r2
 801907c:	425b      	negs	r3, r3
 801907e:	431c      	orrs	r4, r3
 8019080:	2500      	movs	r5, #0
 8019082:	4630      	mov	r0, r6
 8019084:	462a      	mov	r2, r5
 8019086:	f810 1b01 	ldrb.w	r1, [r0], #1
 801908a:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 801908e:	4093      	lsls	r3, r2
 8019090:	431d      	orrs	r5, r3
 8019092:	060b      	lsls	r3, r1, #24
 8019094:	f102 0207 	add.w	r2, r2, #7
 8019098:	d4f5      	bmi.n	8019086 <__gxx_personality_v0+0x336>
 801909a:	2a1f      	cmp	r2, #31
 801909c:	d805      	bhi.n	80190aa <__gxx_personality_v0+0x35a>
 801909e:	064b      	lsls	r3, r1, #25
 80190a0:	d503      	bpl.n	80190aa <__gxx_personality_v0+0x35a>
 80190a2:	2301      	movs	r3, #1
 80190a4:	4093      	lsls	r3, r2
 80190a6:	425b      	negs	r3, r3
 80190a8:	431d      	orrs	r5, r3
 80190aa:	2c00      	cmp	r4, #0
 80190ac:	d034      	beq.n	8019118 <__gxx_personality_v0+0x3c8>
 80190ae:	dc36      	bgt.n	801911e <__gxx_personality_v0+0x3ce>
 80190b0:	b117      	cbz	r7, 80190b8 <__gxx_personality_v0+0x368>
 80190b2:	9b04      	ldr	r3, [sp, #16]
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	d04f      	beq.n	8019158 <__gxx_personality_v0+0x408>
 80190b8:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 80190bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80190be:	ebaa 0a04 	sub.w	sl, sl, r4
 80190c2:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 80190c6:	b1b3      	cbz	r3, 80190f6 <__gxx_personality_v0+0x3a6>
 80190c8:	2d00      	cmp	r5, #0
 80190ca:	d06a      	beq.n	80191a2 <__gxx_personality_v0+0x452>
 80190cc:	442e      	add	r6, r5
 80190ce:	e7c2      	b.n	8019056 <__gxx_personality_v0+0x306>
 80190d0:	00a3      	lsls	r3, r4, #2
 80190d2:	425b      	negs	r3, r3
 80190d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80190d6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80190d8:	441a      	add	r2, r3
 80190da:	464b      	mov	r3, r9
 80190dc:	f7ff fd6c 	bl	8018bb8 <_ZL28read_encoded_value_with_basehjPKhPj>
 80190e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80190e2:	b141      	cbz	r1, 80190f6 <__gxx_personality_v0+0x3a6>
 80190e4:	2f00      	cmp	r7, #0
 80190e6:	d0ef      	beq.n	80190c8 <__gxx_personality_v0+0x378>
 80190e8:	ab08      	add	r3, sp, #32
 80190ea:	2200      	movs	r2, #0
 80190ec:	4638      	mov	r0, r7
 80190ee:	f7ff fc05 	bl	80188fc <__cxa_type_match>
 80190f2:	2800      	cmp	r0, #0
 80190f4:	d0e8      	beq.n	80190c8 <__gxx_personality_v0+0x378>
 80190f6:	9b02      	ldr	r3, [sp, #8]
 80190f8:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80190fc:	07db      	lsls	r3, r3, #31
 80190fe:	e9dd 8b05 	ldrd	r8, fp, [sp, #20]
 8019102:	f53f aeb6 	bmi.w	8018e72 <__gxx_personality_v0+0x122>
 8019106:	9b04      	ldr	r3, [sp, #16]
 8019108:	2b00      	cmp	r3, #0
 801910a:	f43f af01 	beq.w	8018f10 <__gxx_personality_v0+0x1c0>
 801910e:	2c00      	cmp	r4, #0
 8019110:	f6bf af00 	bge.w	8018f14 <__gxx_personality_v0+0x1c4>
 8019114:	f000 f87c 	bl	8019210 <_ZSt10unexpectedv>
 8019118:	f04f 0b01 	mov.w	fp, #1
 801911c:	e7d4      	b.n	80190c8 <__gxx_personality_v0+0x378>
 801911e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8019122:	28ff      	cmp	r0, #255	; 0xff
 8019124:	d031      	beq.n	801918a <__gxx_personality_v0+0x43a>
 8019126:	f000 0307 	and.w	r3, r0, #7
 801912a:	2b04      	cmp	r3, #4
 801912c:	f63f ae29 	bhi.w	8018d82 <__gxx_personality_v0+0x32>
 8019130:	a201      	add	r2, pc, #4	; (adr r2, 8019138 <__gxx_personality_v0+0x3e8>)
 8019132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019136:	bf00      	nop
 8019138:	080190d1 	.word	0x080190d1
 801913c:	08018d83 	.word	0x08018d83
 8019140:	08019153 	.word	0x08019153
 8019144:	080190d1 	.word	0x080190d1
 8019148:	0801914d 	.word	0x0801914d
 801914c:	00e3      	lsls	r3, r4, #3
 801914e:	425b      	negs	r3, r3
 8019150:	e7c0      	b.n	80190d4 <__gxx_personality_v0+0x384>
 8019152:	0063      	lsls	r3, r4, #1
 8019154:	425b      	negs	r3, r3
 8019156:	e7bd      	b.n	80190d4 <__gxx_personality_v0+0x384>
 8019158:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 801915c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801915e:	9a08      	ldr	r2, [sp, #32]
 8019160:	920b      	str	r2, [sp, #44]	; 0x2c
 8019162:	ebaa 0a04 	sub.w	sl, sl, r4
 8019166:	eb03 088a 	add.w	r8, r3, sl, lsl #2
 801916a:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 801916e:	b919      	cbnz	r1, 8019178 <__gxx_personality_v0+0x428>
 8019170:	e00d      	b.n	801918e <__gxx_personality_v0+0x43e>
 8019172:	f858 1f04 	ldr.w	r1, [r8, #4]!
 8019176:	b151      	cbz	r1, 801918e <__gxx_personality_v0+0x43e>
 8019178:	4441      	add	r1, r8
 801917a:	464b      	mov	r3, r9
 801917c:	2200      	movs	r2, #0
 801917e:	4638      	mov	r0, r7
 8019180:	f7ff fbbc 	bl	80188fc <__cxa_type_match>
 8019184:	2800      	cmp	r0, #0
 8019186:	d0f4      	beq.n	8019172 <__gxx_personality_v0+0x422>
 8019188:	e79e      	b.n	80190c8 <__gxx_personality_v0+0x378>
 801918a:	2300      	movs	r3, #0
 801918c:	e7a2      	b.n	80190d4 <__gxx_personality_v0+0x384>
 801918e:	9b02      	ldr	r3, [sp, #8]
 8019190:	07d8      	lsls	r0, r3, #31
 8019192:	4656      	mov	r6, sl
 8019194:	e9dd 8b05 	ldrd	r8, fp, [sp, #20]
 8019198:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801919c:	f53f ae69 	bmi.w	8018e72 <__gxx_personality_v0+0x122>
 80191a0:	e711      	b.n	8018fc6 <__gxx_personality_v0+0x276>
 80191a2:	465b      	mov	r3, fp
 80191a4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	f43f adde 	beq.w	8018d6a <__gxx_personality_v0+0x1a>
 80191ae:	9b02      	ldr	r3, [sp, #8]
 80191b0:	07d9      	lsls	r1, r3, #31
 80191b2:	f53f adda 	bmi.w	8018d6a <__gxx_personality_v0+0x1a>
 80191b6:	e6fa      	b.n	8018fae <__gxx_personality_v0+0x25e>
 80191b8:	79fb      	ldrb	r3, [r7, #7]
 80191ba:	2b01      	cmp	r3, #1
 80191bc:	bf0c      	ite	eq
 80191be:	f857 3c20 	ldreq.w	r3, [r7, #-32]
 80191c2:	f107 0358 	addne.w	r3, r7, #88	; 0x58
 80191c6:	9308      	str	r3, [sp, #32]
 80191c8:	e73d      	b.n	8019046 <__gxx_personality_v0+0x2f6>
 80191ca:	07da      	lsls	r2, r3, #31
 80191cc:	f53f adcd 	bmi.w	8018d6a <__gxx_personality_v0+0x1a>
 80191d0:	9b02      	ldr	r3, [sp, #8]
 80191d2:	f013 0408 	ands.w	r4, r3, #8
 80191d6:	f47f aeea 	bne.w	8018fae <__gxx_personality_v0+0x25e>
 80191da:	2502      	movs	r5, #2
 80191dc:	e69b      	b.n	8018f16 <__gxx_personality_v0+0x1c6>
 80191de:	f7ff fc4f 	bl	8018a80 <__cxa_begin_catch>
 80191e2:	e674      	b.n	8018ece <__gxx_personality_v0+0x17e>

080191e4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80191e4:	b508      	push	{r3, lr}
 80191e6:	4780      	blx	r0
 80191e8:	f000 fcd4 	bl	8019b94 <abort>
 80191ec:	f7ff fc48 	bl	8018a80 <__cxa_begin_catch>
 80191f0:	f000 fcd0 	bl	8019b94 <abort>

080191f4 <_ZSt9terminatev>:
 80191f4:	b508      	push	{r3, lr}
 80191f6:	4b03      	ldr	r3, [pc, #12]	; (8019204 <_ZSt9terminatev+0x10>)
 80191f8:	6818      	ldr	r0, [r3, #0]
 80191fa:	f3bf 8f5b 	dmb	ish
 80191fe:	f7ff fff1 	bl	80191e4 <_ZN10__cxxabiv111__terminateEPFvvE>
 8019202:	bf00      	nop
 8019204:	20000030 	.word	0x20000030

08019208 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8019208:	b508      	push	{r3, lr}
 801920a:	4780      	blx	r0
 801920c:	f7ff fff2 	bl	80191f4 <_ZSt9terminatev>

08019210 <_ZSt10unexpectedv>:
 8019210:	b508      	push	{r3, lr}
 8019212:	4b03      	ldr	r3, [pc, #12]	; (8019220 <_ZSt10unexpectedv+0x10>)
 8019214:	6818      	ldr	r0, [r3, #0]
 8019216:	f3bf 8f5b 	dmb	ish
 801921a:	f7ff fff5 	bl	8019208 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 801921e:	bf00      	nop
 8019220:	2000002c 	.word	0x2000002c

08019224 <_ZSt13get_terminatev>:
 8019224:	4b02      	ldr	r3, [pc, #8]	; (8019230 <_ZSt13get_terminatev+0xc>)
 8019226:	6818      	ldr	r0, [r3, #0]
 8019228:	f3bf 8f5b 	dmb	ish
 801922c:	4770      	bx	lr
 801922e:	bf00      	nop
 8019230:	20000030 	.word	0x20000030

08019234 <_ZSt14get_unexpectedv>:
 8019234:	4b02      	ldr	r3, [pc, #8]	; (8019240 <_ZSt14get_unexpectedv+0xc>)
 8019236:	6818      	ldr	r0, [r3, #0]
 8019238:	f3bf 8f5b 	dmb	ish
 801923c:	4770      	bx	lr
 801923e:	bf00      	nop
 8019240:	2000002c 	.word	0x2000002c

08019244 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 8019244:	b500      	push	{lr}
 8019246:	2801      	cmp	r0, #1
 8019248:	b083      	sub	sp, #12
 801924a:	d81d      	bhi.n	8019288 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x44>
 801924c:	f3bf 8f5b 	dmb	ish
 8019250:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 8019254:	e853 2f00 	ldrex	r2, [r3]
 8019258:	3a01      	subs	r2, #1
 801925a:	e843 2000 	strex	r0, r2, [r3]
 801925e:	2800      	cmp	r0, #0
 8019260:	d1f8      	bne.n	8019254 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x10>
 8019262:	f3bf 8f5b 	dmb	ish
 8019266:	b962      	cbnz	r2, 8019282 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3e>
 8019268:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 801926c:	f101 0058 	add.w	r0, r1, #88	; 0x58
 8019270:	b113      	cbz	r3, 8019278 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x34>
 8019272:	9001      	str	r0, [sp, #4]
 8019274:	4798      	blx	r3
 8019276:	9801      	ldr	r0, [sp, #4]
 8019278:	b003      	add	sp, #12
 801927a:	f85d eb04 	ldr.w	lr, [sp], #4
 801927e:	f7ff bb13 	b.w	80188a8 <__cxa_free_exception>
 8019282:	b003      	add	sp, #12
 8019284:	f85d fb04 	ldr.w	pc, [sp], #4
 8019288:	f851 0c14 	ldr.w	r0, [r1, #-20]
 801928c:	f7ff ffaa 	bl	80191e4 <_ZN10__cxxabiv111__terminateEPFvvE>

08019290 <__cxa_init_primary_exception>:
 8019290:	b538      	push	{r3, r4, r5, lr}
 8019292:	2500      	movs	r5, #0
 8019294:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
 8019298:	f840 5c80 	str.w	r5, [r0, #-128]
 801929c:	4604      	mov	r4, r0
 801929e:	f7ff ffc9 	bl	8019234 <_ZSt14get_unexpectedv>
 80192a2:	f844 0c70 	str.w	r0, [r4, #-112]
 80192a6:	f7ff ffbd 	bl	8019224 <_ZSt13get_terminatev>
 80192aa:	2243      	movs	r2, #67	; 0x43
 80192ac:	232b      	movs	r3, #43	; 0x2b
 80192ae:	2147      	movs	r1, #71	; 0x47
 80192b0:	f804 2c55 	strb.w	r2, [r4, #-85]
 80192b4:	f804 2c54 	strb.w	r2, [r4, #-84]
 80192b8:	f804 3c53 	strb.w	r3, [r4, #-83]
 80192bc:	f804 3c52 	strb.w	r3, [r4, #-82]
 80192c0:	224e      	movs	r2, #78	; 0x4e
 80192c2:	2355      	movs	r3, #85	; 0x55
 80192c4:	f804 1c58 	strb.w	r1, [r4, #-88]
 80192c8:	f804 5c51 	strb.w	r5, [r4, #-81]
 80192cc:	4905      	ldr	r1, [pc, #20]	; (80192e4 <__cxa_init_primary_exception+0x54>)
 80192ce:	f804 2c57 	strb.w	r2, [r4, #-87]
 80192d2:	f804 3c56 	strb.w	r3, [r4, #-86]
 80192d6:	f844 0c6c 	str.w	r0, [r4, #-108]
 80192da:	f844 1c50 	str.w	r1, [r4, #-80]
 80192de:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
 80192e2:	bd38      	pop	{r3, r4, r5, pc}
 80192e4:	08019245 	.word	0x08019245

080192e8 <__cxa_throw>:
 80192e8:	b510      	push	{r4, lr}
 80192ea:	b082      	sub	sp, #8
 80192ec:	e9cd 2100 	strd	r2, r1, [sp]
 80192f0:	4604      	mov	r4, r0
 80192f2:	f7ff fc5d 	bl	8018bb0 <__cxa_get_globals>
 80192f6:	4603      	mov	r3, r0
 80192f8:	6840      	ldr	r0, [r0, #4]
 80192fa:	9a00      	ldr	r2, [sp, #0]
 80192fc:	9901      	ldr	r1, [sp, #4]
 80192fe:	3001      	adds	r0, #1
 8019300:	6058      	str	r0, [r3, #4]
 8019302:	4620      	mov	r0, r4
 8019304:	f7ff ffc4 	bl	8019290 <__cxa_init_primary_exception>
 8019308:	4604      	mov	r4, r0
 801930a:	2301      	movs	r3, #1
 801930c:	f844 3b28 	str.w	r3, [r4], #40
 8019310:	4620      	mov	r0, r4
 8019312:	f7ee fb7f 	bl	8007a14 <_Unwind_RaiseException>
 8019316:	4620      	mov	r0, r4
 8019318:	f7ff fbb2 	bl	8018a80 <__cxa_begin_catch>
 801931c:	f7ff ff6a 	bl	80191f4 <_ZSt9terminatev>

08019320 <__cxa_rethrow>:
 8019320:	b510      	push	{r4, lr}
 8019322:	f7ff fc45 	bl	8018bb0 <__cxa_get_globals>
 8019326:	e9d0 4200 	ldrd	r4, r2, [r0]
 801932a:	3201      	adds	r2, #1
 801932c:	6042      	str	r2, [r0, #4]
 801932e:	b164      	cbz	r4, 801934a <__cxa_rethrow+0x2a>
 8019330:	f894 2020 	ldrb.w	r2, [r4, #32]
 8019334:	2a47      	cmp	r2, #71	; 0x47
 8019336:	d00a      	beq.n	801934e <__cxa_rethrow+0x2e>
 8019338:	2200      	movs	r2, #0
 801933a:	6002      	str	r2, [r0, #0]
 801933c:	3420      	adds	r4, #32
 801933e:	4620      	mov	r0, r4
 8019340:	f7ee fb8c 	bl	8007a5c <_Unwind_Resume_or_Rethrow>
 8019344:	4620      	mov	r0, r4
 8019346:	f7ff fb9b 	bl	8018a80 <__cxa_begin_catch>
 801934a:	f7ff ff53 	bl	80191f4 <_ZSt9terminatev>
 801934e:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 8019352:	2a4e      	cmp	r2, #78	; 0x4e
 8019354:	d1f0      	bne.n	8019338 <__cxa_rethrow+0x18>
 8019356:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 801935a:	2a55      	cmp	r2, #85	; 0x55
 801935c:	d1ec      	bne.n	8019338 <__cxa_rethrow+0x18>
 801935e:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8019362:	2a43      	cmp	r2, #67	; 0x43
 8019364:	d1e8      	bne.n	8019338 <__cxa_rethrow+0x18>
 8019366:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 801936a:	2a43      	cmp	r2, #67	; 0x43
 801936c:	d1e4      	bne.n	8019338 <__cxa_rethrow+0x18>
 801936e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8019372:	2a2b      	cmp	r2, #43	; 0x2b
 8019374:	d1e0      	bne.n	8019338 <__cxa_rethrow+0x18>
 8019376:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 801937a:	2a2b      	cmp	r2, #43	; 0x2b
 801937c:	d1dc      	bne.n	8019338 <__cxa_rethrow+0x18>
 801937e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8019382:	2a01      	cmp	r2, #1
 8019384:	d8d8      	bhi.n	8019338 <__cxa_rethrow+0x18>
 8019386:	6962      	ldr	r2, [r4, #20]
 8019388:	4252      	negs	r2, r2
 801938a:	6162      	str	r2, [r4, #20]
 801938c:	e7d6      	b.n	801933c <__cxa_rethrow+0x1c>
 801938e:	bf00      	nop

08019390 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 8019390:	b510      	push	{r4, lr}
 8019392:	4b03      	ldr	r3, [pc, #12]	; (80193a0 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
 8019394:	6003      	str	r3, [r0, #0]
 8019396:	4604      	mov	r4, r0
 8019398:	f000 f8f8 	bl	801958c <_ZNSt9type_infoD1Ev>
 801939c:	4620      	mov	r0, r4
 801939e:	bd10      	pop	{r4, pc}
 80193a0:	08023bbc 	.word	0x08023bbc

080193a4 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 80193a4:	b510      	push	{r4, lr}
 80193a6:	4b05      	ldr	r3, [pc, #20]	; (80193bc <_ZN10__cxxabiv123__fundamental_type_infoD0Ev+0x18>)
 80193a8:	6003      	str	r3, [r0, #0]
 80193aa:	4604      	mov	r4, r0
 80193ac:	f000 f8ee 	bl	801958c <_ZNSt9type_infoD1Ev>
 80193b0:	4620      	mov	r0, r4
 80193b2:	2108      	movs	r1, #8
 80193b4:	f7ff f9ee 	bl	8018794 <_ZdlPvj>
 80193b8:	4620      	mov	r0, r4
 80193ba:	bd10      	pop	{r4, pc}
 80193bc:	08023bbc 	.word	0x08023bbc

080193c0 <_Znwj>:
 80193c0:	2801      	cmp	r0, #1
 80193c2:	bf38      	it	cc
 80193c4:	2001      	movcc	r0, #1
 80193c6:	b510      	push	{r4, lr}
 80193c8:	4604      	mov	r4, r0
 80193ca:	4620      	mov	r0, r4
 80193cc:	f000 fbf0 	bl	8019bb0 <malloc>
 80193d0:	b100      	cbz	r0, 80193d4 <_Znwj+0x14>
 80193d2:	bd10      	pop	{r4, pc}
 80193d4:	f000 fb08 	bl	80199e8 <_ZSt15get_new_handlerv>
 80193d8:	b108      	cbz	r0, 80193de <_Znwj+0x1e>
 80193da:	4780      	blx	r0
 80193dc:	e7f5      	b.n	80193ca <_Znwj+0xa>
 80193de:	2004      	movs	r0, #4
 80193e0:	f7ff fa4a 	bl	8018878 <__cxa_allocate_exception>
 80193e4:	4b02      	ldr	r3, [pc, #8]	; (80193f0 <_Znwj+0x30>)
 80193e6:	4a03      	ldr	r2, [pc, #12]	; (80193f4 <_Znwj+0x34>)
 80193e8:	4903      	ldr	r1, [pc, #12]	; (80193f8 <_Znwj+0x38>)
 80193ea:	6003      	str	r3, [r0, #0]
 80193ec:	f7ff ff7c 	bl	80192e8 <__cxa_throw>
 80193f0:	08023db4 	.word	0x08023db4
 80193f4:	0801975d 	.word	0x0801975d
 80193f8:	08023d90 	.word	0x08023d90

080193fc <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
 80193fc:	2001      	movs	r0, #1
 80193fe:	4770      	bx	lr

08019400 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
 8019400:	b510      	push	{r4, lr}
 8019402:	4b03      	ldr	r3, [pc, #12]	; (8019410 <_ZN10__cxxabiv119__pointer_type_infoD1Ev+0x10>)
 8019404:	6003      	str	r3, [r0, #0]
 8019406:	4604      	mov	r4, r0
 8019408:	f000 fb00 	bl	8019a0c <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 801940c:	4620      	mov	r0, r4
 801940e:	bd10      	pop	{r4, pc}
 8019410:	08023c0c 	.word	0x08023c0c

08019414 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
 8019414:	b510      	push	{r4, lr}
 8019416:	4b05      	ldr	r3, [pc, #20]	; (801942c <_ZN10__cxxabiv119__pointer_type_infoD0Ev+0x18>)
 8019418:	6003      	str	r3, [r0, #0]
 801941a:	4604      	mov	r4, r0
 801941c:	f000 faf6 	bl	8019a0c <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 8019420:	4620      	mov	r0, r4
 8019422:	2110      	movs	r1, #16
 8019424:	f7ff f9b6 	bl	8018794 <_ZdlPvj>
 8019428:	4620      	mov	r0, r4
 801942a:	bd10      	pop	{r4, pc}
 801942c:	08023c0c 	.word	0x08023c0c

08019430 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
 8019430:	b570      	push	{r4, r5, r6, lr}
 8019432:	2b01      	cmp	r3, #1
 8019434:	b082      	sub	sp, #8
 8019436:	461c      	mov	r4, r3
 8019438:	4605      	mov	r5, r0
 801943a:	460e      	mov	r6, r1
 801943c:	d909      	bls.n	8019452 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x22>
 801943e:	68e8      	ldr	r0, [r5, #12]
 8019440:	68f1      	ldr	r1, [r6, #12]
 8019442:	6805      	ldr	r5, [r0, #0]
 8019444:	1ca3      	adds	r3, r4, #2
 8019446:	692c      	ldr	r4, [r5, #16]
 8019448:	46a4      	mov	ip, r4
 801944a:	b002      	add	sp, #8
 801944c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019450:	4760      	bx	ip
 8019452:	4908      	ldr	r1, [pc, #32]	; (8019474 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x44>)
 8019454:	68c0      	ldr	r0, [r0, #12]
 8019456:	9201      	str	r2, [sp, #4]
 8019458:	f000 f8b4 	bl	80195c4 <_ZNKSt9type_infoeqERKS_>
 801945c:	9a01      	ldr	r2, [sp, #4]
 801945e:	2800      	cmp	r0, #0
 8019460:	d0ed      	beq.n	801943e <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0xe>
 8019462:	68f0      	ldr	r0, [r6, #12]
 8019464:	6803      	ldr	r3, [r0, #0]
 8019466:	68db      	ldr	r3, [r3, #12]
 8019468:	4798      	blx	r3
 801946a:	f080 0001 	eor.w	r0, r0, #1
 801946e:	b2c0      	uxtb	r0, r0
 8019470:	b002      	add	sp, #8
 8019472:	bd70      	pop	{r4, r5, r6, pc}
 8019474:	08023b78 	.word	0x08023b78

08019478 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8019478:	b510      	push	{r4, lr}
 801947a:	4b03      	ldr	r3, [pc, #12]	; (8019488 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 801947c:	6003      	str	r3, [r0, #0]
 801947e:	4604      	mov	r4, r0
 8019480:	f000 f9a4 	bl	80197cc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8019484:	4620      	mov	r0, r4
 8019486:	bd10      	pop	{r4, pc}
 8019488:	08023c64 	.word	0x08023c64

0801948c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 801948c:	b510      	push	{r4, lr}
 801948e:	4b05      	ldr	r3, [pc, #20]	; (80194a4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 8019490:	6003      	str	r3, [r0, #0]
 8019492:	4604      	mov	r4, r0
 8019494:	f000 f99a 	bl	80197cc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8019498:	4620      	mov	r0, r4
 801949a:	210c      	movs	r1, #12
 801949c:	f7ff f97a 	bl	8018794 <_ZdlPvj>
 80194a0:	4620      	mov	r0, r4
 80194a2:	bd10      	pop	{r4, pc}
 80194a4:	08023c64 	.word	0x08023c64

080194a8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80194a8:	b570      	push	{r4, r5, r6, lr}
 80194aa:	b082      	sub	sp, #8
 80194ac:	4604      	mov	r4, r0
 80194ae:	9e06      	ldr	r6, [sp, #24]
 80194b0:	4296      	cmp	r6, r2
 80194b2:	460d      	mov	r5, r1
 80194b4:	d009      	beq.n	80194ca <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
 80194b6:	68a0      	ldr	r0, [r4, #8]
 80194b8:	6804      	ldr	r4, [r0, #0]
 80194ba:	9606      	str	r6, [sp, #24]
 80194bc:	6a24      	ldr	r4, [r4, #32]
 80194be:	4629      	mov	r1, r5
 80194c0:	46a4      	mov	ip, r4
 80194c2:	b002      	add	sp, #8
 80194c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80194c8:	4760      	bx	ip
 80194ca:	4619      	mov	r1, r3
 80194cc:	9201      	str	r2, [sp, #4]
 80194ce:	9300      	str	r3, [sp, #0]
 80194d0:	f000 f878 	bl	80195c4 <_ZNKSt9type_infoeqERKS_>
 80194d4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80194d8:	2800      	cmp	r0, #0
 80194da:	d0ec      	beq.n	80194b6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 80194dc:	2006      	movs	r0, #6
 80194de:	b002      	add	sp, #8
 80194e0:	bd70      	pop	{r4, r5, r6, pc}
 80194e2:	bf00      	nop

080194e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80194e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194e8:	460c      	mov	r4, r1
 80194ea:	b081      	sub	sp, #4
 80194ec:	4619      	mov	r1, r3
 80194ee:	e9dd 690a 	ldrd	r6, r9, [sp, #40]	; 0x28
 80194f2:	e9dd 870c 	ldrd	r8, r7, [sp, #48]	; 0x30
 80194f6:	469b      	mov	fp, r3
 80194f8:	4605      	mov	r5, r0
 80194fa:	4692      	mov	sl, r2
 80194fc:	f000 f862 	bl	80195c4 <_ZNKSt9type_infoeqERKS_>
 8019500:	b980      	cbnz	r0, 8019524 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 8019502:	4546      	cmp	r6, r8
 8019504:	d022      	beq.n	801954c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x68>
 8019506:	68a8      	ldr	r0, [r5, #8]
 8019508:	4621      	mov	r1, r4
 801950a:	6804      	ldr	r4, [r0, #0]
 801950c:	e9cd 870c 	strd	r8, r7, [sp, #48]	; 0x30
 8019510:	e9cd 690a 	strd	r6, r9, [sp, #40]	; 0x28
 8019514:	69e4      	ldr	r4, [r4, #28]
 8019516:	465b      	mov	r3, fp
 8019518:	4652      	mov	r2, sl
 801951a:	46a4      	mov	ip, r4
 801951c:	b001      	add	sp, #4
 801951e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019522:	4760      	bx	ip
 8019524:	2c00      	cmp	r4, #0
 8019526:	603e      	str	r6, [r7, #0]
 8019528:	f887 a004 	strb.w	sl, [r7, #4]
 801952c:	db09      	blt.n	8019542 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e>
 801952e:	4426      	add	r6, r4
 8019530:	45b0      	cmp	r8, r6
 8019532:	bf0c      	ite	eq
 8019534:	2606      	moveq	r6, #6
 8019536:	2601      	movne	r6, #1
 8019538:	71be      	strb	r6, [r7, #6]
 801953a:	2000      	movs	r0, #0
 801953c:	b001      	add	sp, #4
 801953e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019542:	3402      	adds	r4, #2
 8019544:	d1f9      	bne.n	801953a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x56>
 8019546:	2301      	movs	r3, #1
 8019548:	71bb      	strb	r3, [r7, #6]
 801954a:	e7f6      	b.n	801953a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x56>
 801954c:	4649      	mov	r1, r9
 801954e:	4628      	mov	r0, r5
 8019550:	f000 f838 	bl	80195c4 <_ZNKSt9type_infoeqERKS_>
 8019554:	2800      	cmp	r0, #0
 8019556:	d0d6      	beq.n	8019506 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22>
 8019558:	f887 a005 	strb.w	sl, [r7, #5]
 801955c:	e7ed      	b.n	801953a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x56>
 801955e:	bf00      	nop

08019560 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8019560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019564:	4606      	mov	r6, r0
 8019566:	460f      	mov	r7, r1
 8019568:	4614      	mov	r4, r2
 801956a:	461d      	mov	r5, r3
 801956c:	f000 f968 	bl	8019840 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8019570:	b948      	cbnz	r0, 8019586 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8019572:	68b0      	ldr	r0, [r6, #8]
 8019574:	6801      	ldr	r1, [r0, #0]
 8019576:	4622      	mov	r2, r4
 8019578:	698c      	ldr	r4, [r1, #24]
 801957a:	462b      	mov	r3, r5
 801957c:	4639      	mov	r1, r7
 801957e:	46a4      	mov	ip, r4
 8019580:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019584:	4760      	bx	ip
 8019586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801958a:	bf00      	nop

0801958c <_ZNSt9type_infoD1Ev>:
 801958c:	4770      	bx	lr
 801958e:	bf00      	nop

08019590 <_ZNKSt9type_info14__is_pointer_pEv>:
 8019590:	2000      	movs	r0, #0
 8019592:	4770      	bx	lr

08019594 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 8019594:	2000      	movs	r0, #0
 8019596:	4770      	bx	lr

08019598 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 8019598:	4288      	cmp	r0, r1
 801959a:	d011      	beq.n	80195c0 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x28>
 801959c:	b508      	push	{r3, lr}
 801959e:	6840      	ldr	r0, [r0, #4]
 80195a0:	7803      	ldrb	r3, [r0, #0]
 80195a2:	2b2a      	cmp	r3, #42	; 0x2a
 80195a4:	d00a      	beq.n	80195bc <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x24>
 80195a6:	6849      	ldr	r1, [r1, #4]
 80195a8:	780b      	ldrb	r3, [r1, #0]
 80195aa:	2b2a      	cmp	r3, #42	; 0x2a
 80195ac:	bf08      	it	eq
 80195ae:	3101      	addeq	r1, #1
 80195b0:	f7ec fde6 	bl	8006180 <strcmp>
 80195b4:	fab0 f080 	clz	r0, r0
 80195b8:	0940      	lsrs	r0, r0, #5
 80195ba:	bd08      	pop	{r3, pc}
 80195bc:	2000      	movs	r0, #0
 80195be:	bd08      	pop	{r3, pc}
 80195c0:	2001      	movs	r0, #1
 80195c2:	4770      	bx	lr

080195c4 <_ZNKSt9type_infoeqERKS_>:
 80195c4:	4281      	cmp	r1, r0
 80195c6:	d011      	beq.n	80195ec <_ZNKSt9type_infoeqERKS_+0x28>
 80195c8:	b508      	push	{r3, lr}
 80195ca:	6840      	ldr	r0, [r0, #4]
 80195cc:	7803      	ldrb	r3, [r0, #0]
 80195ce:	2b2a      	cmp	r3, #42	; 0x2a
 80195d0:	d00a      	beq.n	80195e8 <_ZNKSt9type_infoeqERKS_+0x24>
 80195d2:	6849      	ldr	r1, [r1, #4]
 80195d4:	780b      	ldrb	r3, [r1, #0]
 80195d6:	2b2a      	cmp	r3, #42	; 0x2a
 80195d8:	bf08      	it	eq
 80195da:	3101      	addeq	r1, #1
 80195dc:	f7ec fdd0 	bl	8006180 <strcmp>
 80195e0:	fab0 f080 	clz	r0, r0
 80195e4:	0940      	lsrs	r0, r0, #5
 80195e6:	bd08      	pop	{r3, pc}
 80195e8:	2000      	movs	r0, #0
 80195ea:	bd08      	pop	{r3, pc}
 80195ec:	2001      	movs	r0, #1
 80195ee:	4770      	bx	lr

080195f0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 80195f0:	b570      	push	{r4, r5, r6, lr}
 80195f2:	4b3b      	ldr	r3, [pc, #236]	; (80196e0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf0>)
 80195f4:	781a      	ldrb	r2, [r3, #0]
 80195f6:	b082      	sub	sp, #8
 80195f8:	2a00      	cmp	r2, #0
 80195fa:	d141      	bne.n	8019680 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x90>
 80195fc:	2401      	movs	r4, #1
 80195fe:	701c      	strb	r4, [r3, #0]
 8019600:	f000 f9e4 	bl	80199cc <__cxa_current_exception_type>
 8019604:	2800      	cmp	r0, #0
 8019606:	d031      	beq.n	801966c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x7c>
 8019608:	6844      	ldr	r4, [r0, #4]
 801960a:	4d36      	ldr	r5, [pc, #216]	; (80196e4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
 801960c:	7823      	ldrb	r3, [r4, #0]
 801960e:	2b2a      	cmp	r3, #42	; 0x2a
 8019610:	bf08      	it	eq
 8019612:	3401      	addeq	r4, #1
 8019614:	2200      	movs	r2, #0
 8019616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801961a:	4611      	mov	r1, r2
 801961c:	ab01      	add	r3, sp, #4
 801961e:	9001      	str	r0, [sp, #4]
 8019620:	4620      	mov	r0, r4
 8019622:	f7ec fd39 	bl	8006098 <__cxa_demangle>
 8019626:	682b      	ldr	r3, [r5, #0]
 8019628:	2230      	movs	r2, #48	; 0x30
 801962a:	68db      	ldr	r3, [r3, #12]
 801962c:	4606      	mov	r6, r0
 801962e:	2101      	movs	r1, #1
 8019630:	482d      	ldr	r0, [pc, #180]	; (80196e8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 8019632:	f002 f84f 	bl	801b6d4 <fwrite>
 8019636:	9b01      	ldr	r3, [sp, #4]
 8019638:	b193      	cbz	r3, 8019660 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x70>
 801963a:	682b      	ldr	r3, [r5, #0]
 801963c:	4620      	mov	r0, r4
 801963e:	68d9      	ldr	r1, [r3, #12]
 8019640:	f001 ffd6 	bl	801b5f0 <fputs>
 8019644:	682b      	ldr	r3, [r5, #0]
 8019646:	4829      	ldr	r0, [pc, #164]	; (80196ec <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 8019648:	68db      	ldr	r3, [r3, #12]
 801964a:	2202      	movs	r2, #2
 801964c:	2101      	movs	r1, #1
 801964e:	f002 f841 	bl	801b6d4 <fwrite>
 8019652:	9b01      	ldr	r3, [sp, #4]
 8019654:	b913      	cbnz	r3, 801965c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
 8019656:	4630      	mov	r0, r6
 8019658:	f000 fab2 	bl	8019bc0 <free>
 801965c:	f7ff fe60 	bl	8019320 <__cxa_rethrow>
 8019660:	682b      	ldr	r3, [r5, #0]
 8019662:	4630      	mov	r0, r6
 8019664:	68d9      	ldr	r1, [r3, #12]
 8019666:	f001 ffc3 	bl	801b5f0 <fputs>
 801966a:	e7eb      	b.n	8019644 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x54>
 801966c:	4b1d      	ldr	r3, [pc, #116]	; (80196e4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
 801966e:	4820      	ldr	r0, [pc, #128]	; (80196f0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	222d      	movs	r2, #45	; 0x2d
 8019674:	68db      	ldr	r3, [r3, #12]
 8019676:	4621      	mov	r1, r4
 8019678:	f002 f82c 	bl	801b6d4 <fwrite>
 801967c:	f000 fa8a 	bl	8019b94 <abort>
 8019680:	4b18      	ldr	r3, [pc, #96]	; (80196e4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
 8019682:	481c      	ldr	r0, [pc, #112]	; (80196f4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 8019684:	681b      	ldr	r3, [r3, #0]
 8019686:	221d      	movs	r2, #29
 8019688:	68db      	ldr	r3, [r3, #12]
 801968a:	2101      	movs	r1, #1
 801968c:	f002 f822 	bl	801b6d4 <fwrite>
 8019690:	f000 fa80 	bl	8019b94 <abort>
 8019694:	2901      	cmp	r1, #1
 8019696:	460c      	mov	r4, r1
 8019698:	d119      	bne.n	80196ce <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xde>
 801969a:	f7ff f9f1 	bl	8018a80 <__cxa_begin_catch>
 801969e:	6803      	ldr	r3, [r0, #0]
 80196a0:	689b      	ldr	r3, [r3, #8]
 80196a2:	4798      	blx	r3
 80196a4:	682b      	ldr	r3, [r5, #0]
 80196a6:	4621      	mov	r1, r4
 80196a8:	68db      	ldr	r3, [r3, #12]
 80196aa:	4604      	mov	r4, r0
 80196ac:	220b      	movs	r2, #11
 80196ae:	4812      	ldr	r0, [pc, #72]	; (80196f8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 80196b0:	f002 f810 	bl	801b6d4 <fwrite>
 80196b4:	682b      	ldr	r3, [r5, #0]
 80196b6:	4620      	mov	r0, r4
 80196b8:	68d9      	ldr	r1, [r3, #12]
 80196ba:	f001 ff99 	bl	801b5f0 <fputs>
 80196be:	682b      	ldr	r3, [r5, #0]
 80196c0:	200a      	movs	r0, #10
 80196c2:	68d9      	ldr	r1, [r3, #12]
 80196c4:	f001 ff3a 	bl	801b53c <fputc>
 80196c8:	f7ff fa18 	bl	8018afc <__cxa_end_catch>
 80196cc:	e7d6      	b.n	801967c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 80196ce:	f7ff f9d7 	bl	8018a80 <__cxa_begin_catch>
 80196d2:	f7ff fa13 	bl	8018afc <__cxa_end_catch>
 80196d6:	e7d1      	b.n	801967c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 80196d8:	f7ff fa10 	bl	8018afc <__cxa_end_catch>
 80196dc:	f7ff f908 	bl	80188f0 <__cxa_end_cleanup>
 80196e0:	2000171c 	.word	0x2000171c
 80196e4:	200001f8 	.word	0x200001f8
 80196e8:	08023cc0 	.word	0x08023cc0
 80196ec:	08023cf4 	.word	0x08023cf4
 80196f0:	08023cf8 	.word	0x08023cf8
 80196f4:	08023ca0 	.word	0x08023ca0
 80196f8:	08023d28 	.word	0x08023d28

080196fc <_ZNKSt17bad_function_call4whatEv>:
 80196fc:	4800      	ldr	r0, [pc, #0]	; (8019700 <_ZNKSt17bad_function_call4whatEv+0x4>)
 80196fe:	4770      	bx	lr
 8019700:	08023d34 	.word	0x08023d34

08019704 <_ZNSt17bad_function_callD1Ev>:
 8019704:	b510      	push	{r4, lr}
 8019706:	4b03      	ldr	r3, [pc, #12]	; (8019714 <_ZNSt17bad_function_callD1Ev+0x10>)
 8019708:	6003      	str	r3, [r0, #0]
 801970a:	4604      	mov	r4, r0
 801970c:	f7ff fa3c 	bl	8018b88 <_ZNSt9exceptionD1Ev>
 8019710:	4620      	mov	r0, r4
 8019712:	bd10      	pop	{r4, pc}
 8019714:	08023d74 	.word	0x08023d74

08019718 <_ZNSt17bad_function_callD0Ev>:
 8019718:	b510      	push	{r4, lr}
 801971a:	4b05      	ldr	r3, [pc, #20]	; (8019730 <_ZNSt17bad_function_callD0Ev+0x18>)
 801971c:	6003      	str	r3, [r0, #0]
 801971e:	4604      	mov	r4, r0
 8019720:	f7ff fa32 	bl	8018b88 <_ZNSt9exceptionD1Ev>
 8019724:	4620      	mov	r0, r4
 8019726:	f000 f8af 	bl	8019888 <_ZdlPv>
 801972a:	4620      	mov	r0, r4
 801972c:	bd10      	pop	{r4, pc}
 801972e:	bf00      	nop
 8019730:	08023d74 	.word	0x08023d74

08019734 <_ZSt25__throw_bad_function_callv>:
 8019734:	b508      	push	{r3, lr}
 8019736:	2004      	movs	r0, #4
 8019738:	f7ff f89e 	bl	8018878 <__cxa_allocate_exception>
 801973c:	4b02      	ldr	r3, [pc, #8]	; (8019748 <_ZSt25__throw_bad_function_callv+0x14>)
 801973e:	4a03      	ldr	r2, [pc, #12]	; (801974c <_ZSt25__throw_bad_function_callv+0x18>)
 8019740:	4903      	ldr	r1, [pc, #12]	; (8019750 <_ZSt25__throw_bad_function_callv+0x1c>)
 8019742:	6003      	str	r3, [r0, #0]
 8019744:	f7ff fdd0 	bl	80192e8 <__cxa_throw>
 8019748:	08023d74 	.word	0x08023d74
 801974c:	08019705 	.word	0x08019705
 8019750:	08023d48 	.word	0x08023d48

08019754 <_ZNKSt9bad_alloc4whatEv>:
 8019754:	4800      	ldr	r0, [pc, #0]	; (8019758 <_ZNKSt9bad_alloc4whatEv+0x4>)
 8019756:	4770      	bx	lr
 8019758:	08023d80 	.word	0x08023d80

0801975c <_ZNSt9bad_allocD1Ev>:
 801975c:	b510      	push	{r4, lr}
 801975e:	4b03      	ldr	r3, [pc, #12]	; (801976c <_ZNSt9bad_allocD1Ev+0x10>)
 8019760:	6003      	str	r3, [r0, #0]
 8019762:	4604      	mov	r4, r0
 8019764:	f7ff fa10 	bl	8018b88 <_ZNSt9exceptionD1Ev>
 8019768:	4620      	mov	r0, r4
 801976a:	bd10      	pop	{r4, pc}
 801976c:	08023db4 	.word	0x08023db4

08019770 <_ZNSt9bad_allocD0Ev>:
 8019770:	b510      	push	{r4, lr}
 8019772:	4b05      	ldr	r3, [pc, #20]	; (8019788 <_ZNSt9bad_allocD0Ev+0x18>)
 8019774:	6003      	str	r3, [r0, #0]
 8019776:	4604      	mov	r4, r0
 8019778:	f7ff fa06 	bl	8018b88 <_ZNSt9exceptionD1Ev>
 801977c:	4620      	mov	r0, r4
 801977e:	2104      	movs	r1, #4
 8019780:	f7ff f808 	bl	8018794 <_ZdlPvj>
 8019784:	4620      	mov	r0, r4
 8019786:	bd10      	pop	{r4, pc}
 8019788:	08023db4 	.word	0x08023db4

0801978c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 801978c:	b570      	push	{r4, r5, r6, lr}
 801978e:	6803      	ldr	r3, [r0, #0]
 8019790:	b084      	sub	sp, #16
 8019792:	2400      	movs	r4, #0
 8019794:	699e      	ldr	r6, [r3, #24]
 8019796:	9403      	str	r4, [sp, #12]
 8019798:	2310      	movs	r3, #16
 801979a:	4615      	mov	r5, r2
 801979c:	9302      	str	r3, [sp, #8]
 801979e:	e9cd 4400 	strd	r4, r4, [sp]
 80197a2:	466b      	mov	r3, sp
 80197a4:	6812      	ldr	r2, [r2, #0]
 80197a6:	47b0      	blx	r6
 80197a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80197ac:	f003 0306 	and.w	r3, r3, #6
 80197b0:	2b06      	cmp	r3, #6
 80197b2:	bf03      	ittte	eq
 80197b4:	9b00      	ldreq	r3, [sp, #0]
 80197b6:	602b      	streq	r3, [r5, #0]
 80197b8:	2001      	moveq	r0, #1
 80197ba:	4620      	movne	r0, r4
 80197bc:	b004      	add	sp, #16
 80197be:	bd70      	pop	{r4, r5, r6, pc}

080197c0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80197c0:	9800      	ldr	r0, [sp, #0]
 80197c2:	4290      	cmp	r0, r2
 80197c4:	bf14      	ite	ne
 80197c6:	2001      	movne	r0, #1
 80197c8:	2006      	moveq	r0, #6
 80197ca:	4770      	bx	lr

080197cc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80197cc:	b510      	push	{r4, lr}
 80197ce:	4b03      	ldr	r3, [pc, #12]	; (80197dc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80197d0:	6003      	str	r3, [r0, #0]
 80197d2:	4604      	mov	r4, r0
 80197d4:	f7ff feda 	bl	801958c <_ZNSt9type_infoD1Ev>
 80197d8:	4620      	mov	r0, r4
 80197da:	bd10      	pop	{r4, pc}
 80197dc:	08023df8 	.word	0x08023df8

080197e0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80197e0:	b510      	push	{r4, lr}
 80197e2:	4b05      	ldr	r3, [pc, #20]	; (80197f8 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 80197e4:	6003      	str	r3, [r0, #0]
 80197e6:	4604      	mov	r4, r0
 80197e8:	f7ff fed0 	bl	801958c <_ZNSt9type_infoD1Ev>
 80197ec:	4620      	mov	r0, r4
 80197ee:	2108      	movs	r1, #8
 80197f0:	f7fe ffd0 	bl	8018794 <_ZdlPvj>
 80197f4:	4620      	mov	r0, r4
 80197f6:	bd10      	pop	{r4, pc}
 80197f8:	08023df8 	.word	0x08023df8

080197fc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80197fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019800:	9f06      	ldr	r7, [sp, #24]
 8019802:	9908      	ldr	r1, [sp, #32]
 8019804:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8019806:	428f      	cmp	r7, r1
 8019808:	4604      	mov	r4, r0
 801980a:	4690      	mov	r8, r2
 801980c:	461d      	mov	r5, r3
 801980e:	d00c      	beq.n	801982a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 8019810:	4629      	mov	r1, r5
 8019812:	4620      	mov	r0, r4
 8019814:	f7ff fed6 	bl	80195c4 <_ZNKSt9type_infoeqERKS_>
 8019818:	b120      	cbz	r0, 8019824 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x28>
 801981a:	2301      	movs	r3, #1
 801981c:	6037      	str	r7, [r6, #0]
 801981e:	f886 8004 	strb.w	r8, [r6, #4]
 8019822:	71b3      	strb	r3, [r6, #6]
 8019824:	2000      	movs	r0, #0
 8019826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801982a:	9907      	ldr	r1, [sp, #28]
 801982c:	f7ff feca 	bl	80195c4 <_ZNKSt9type_infoeqERKS_>
 8019830:	2800      	cmp	r0, #0
 8019832:	d0ed      	beq.n	8019810 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
 8019834:	f886 8005 	strb.w	r8, [r6, #5]
 8019838:	2000      	movs	r0, #0
 801983a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801983e:	bf00      	nop

08019840 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8019840:	b538      	push	{r3, r4, r5, lr}
 8019842:	4615      	mov	r5, r2
 8019844:	461c      	mov	r4, r3
 8019846:	f7ff febd 	bl	80195c4 <_ZNKSt9type_infoeqERKS_>
 801984a:	b900      	cbnz	r0, 801984e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0xe>
 801984c:	bd38      	pop	{r3, r4, r5, pc}
 801984e:	2208      	movs	r2, #8
 8019850:	2306      	movs	r3, #6
 8019852:	6025      	str	r5, [r4, #0]
 8019854:	60e2      	str	r2, [r4, #12]
 8019856:	7123      	strb	r3, [r4, #4]
 8019858:	bd38      	pop	{r3, r4, r5, pc}
 801985a:	bf00      	nop

0801985c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 801985c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019860:	4606      	mov	r6, r0
 8019862:	4617      	mov	r7, r2
 8019864:	461d      	mov	r5, r3
 8019866:	460c      	mov	r4, r1
 8019868:	f7ff feac 	bl	80195c4 <_ZNKSt9type_infoeqERKS_>
 801986c:	b948      	cbnz	r0, 8019882 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801986e:	2d03      	cmp	r5, #3
 8019870:	d807      	bhi.n	8019882 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8019872:	6823      	ldr	r3, [r4, #0]
 8019874:	463a      	mov	r2, r7
 8019876:	4631      	mov	r1, r6
 8019878:	4620      	mov	r0, r4
 801987a:	695b      	ldr	r3, [r3, #20]
 801987c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019880:	4718      	bx	r3
 8019882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019886:	bf00      	nop

08019888 <_ZdlPv>:
 8019888:	f000 b99a 	b.w	8019bc0 <free>

0801988c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 801988c:	7803      	ldrb	r3, [r0, #0]
 801988e:	2b47      	cmp	r3, #71	; 0x47
 8019890:	d001      	beq.n	8019896 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
 8019892:	2000      	movs	r0, #0
 8019894:	4770      	bx	lr
 8019896:	7843      	ldrb	r3, [r0, #1]
 8019898:	2b4e      	cmp	r3, #78	; 0x4e
 801989a:	d1fa      	bne.n	8019892 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 801989c:	7883      	ldrb	r3, [r0, #2]
 801989e:	2b55      	cmp	r3, #85	; 0x55
 80198a0:	d1f7      	bne.n	8019892 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80198a2:	78c3      	ldrb	r3, [r0, #3]
 80198a4:	2b43      	cmp	r3, #67	; 0x43
 80198a6:	d1f4      	bne.n	8019892 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80198a8:	7903      	ldrb	r3, [r0, #4]
 80198aa:	2b43      	cmp	r3, #67	; 0x43
 80198ac:	d1f1      	bne.n	8019892 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80198ae:	7943      	ldrb	r3, [r0, #5]
 80198b0:	2b2b      	cmp	r3, #43	; 0x2b
 80198b2:	d1ee      	bne.n	8019892 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80198b4:	7983      	ldrb	r3, [r0, #6]
 80198b6:	2b2b      	cmp	r3, #43	; 0x2b
 80198b8:	d1eb      	bne.n	8019892 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80198ba:	79c0      	ldrb	r0, [r0, #7]
 80198bc:	2801      	cmp	r0, #1
 80198be:	bf8c      	ite	hi
 80198c0:	2000      	movhi	r0, #0
 80198c2:	2001      	movls	r0, #1
 80198c4:	4770      	bx	lr
 80198c6:	bf00      	nop

080198c8 <__cxa_call_terminate>:
 80198c8:	b510      	push	{r4, lr}
 80198ca:	b130      	cbz	r0, 80198da <__cxa_call_terminate+0x12>
 80198cc:	4604      	mov	r4, r0
 80198ce:	f7ff f8d7 	bl	8018a80 <__cxa_begin_catch>
 80198d2:	4620      	mov	r0, r4
 80198d4:	f7ff ffda 	bl	801988c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80198d8:	b908      	cbnz	r0, 80198de <__cxa_call_terminate+0x16>
 80198da:	f7ff fc8b 	bl	80191f4 <_ZSt9terminatev>
 80198de:	f854 0c14 	ldr.w	r0, [r4, #-20]
 80198e2:	f7ff fc7f 	bl	80191e4 <_ZN10__cxxabiv111__terminateEPFvvE>
 80198e6:	bf00      	nop

080198e8 <__cxa_call_unexpected>:
 80198e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198ec:	b085      	sub	sp, #20
 80198ee:	4602      	mov	r2, r0
 80198f0:	f7ff ffcc 	bl	801988c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80198f4:	b138      	cbz	r0, 8019906 <__cxa_call_unexpected+0x1e>
 80198f6:	e952 7406 	ldrd	r7, r4, [r2, #-24]
 80198fa:	e9d2 850c 	ldrd	r8, r5, [r2, #48]	; 0x30
 80198fe:	f8d2 a028 	ldr.w	sl, [r2, #40]	; 0x28
 8019902:	2600      	movs	r6, #0
 8019904:	e005      	b.n	8019912 <__cxa_call_unexpected+0x2a>
 8019906:	4604      	mov	r4, r0
 8019908:	4607      	mov	r7, r0
 801990a:	2601      	movs	r6, #1
 801990c:	4605      	mov	r5, r0
 801990e:	4680      	mov	r8, r0
 8019910:	4682      	mov	sl, r0
 8019912:	4610      	mov	r0, r2
 8019914:	f7ff f8b4 	bl	8018a80 <__cxa_begin_catch>
 8019918:	b10e      	cbz	r6, 801991e <__cxa_call_unexpected+0x36>
 801991a:	f7ff fc79 	bl	8019210 <_ZSt10unexpectedv>
 801991e:	4638      	mov	r0, r7
 8019920:	f7ff fc72 	bl	8019208 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 8019924:	f7ff f8ac 	bl	8018a80 <__cxa_begin_catch>
 8019928:	b10e      	cbz	r6, 801992e <__cxa_call_unexpected+0x46>
 801992a:	f7ff fc63 	bl	80191f4 <_ZSt9terminatev>
 801992e:	f7ff f93b 	bl	8018ba8 <__cxa_get_globals_fast>
 8019932:	6807      	ldr	r7, [r0, #0]
 8019934:	f8df b090 	ldr.w	fp, [pc, #144]	; 80199c8 <__cxa_call_unexpected+0xe0>
 8019938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801993c:	2b01      	cmp	r3, #1
 801993e:	bf0c      	ite	eq
 8019940:	683b      	ldreq	r3, [r7, #0]
 8019942:	f107 0378 	addne.w	r3, r7, #120	; 0x78
 8019946:	9302      	str	r3, [sp, #8]
 8019948:	f028 0303 	bic.w	r3, r8, #3
 801994c:	9301      	str	r3, [sp, #4]
 801994e:	3720      	adds	r7, #32
 8019950:	f04f 0900 	mov.w	r9, #0
 8019954:	45ca      	cmp	sl, r9
 8019956:	dd20      	ble.n	801999a <__cxa_call_unexpected+0xb2>
 8019958:	f8d5 8000 	ldr.w	r8, [r5]
 801995c:	f1b8 0f00 	cmp.w	r8, #0
 8019960:	d000      	beq.n	8019964 <__cxa_call_unexpected+0x7c>
 8019962:	44a8      	add	r8, r5
 8019964:	ab02      	add	r3, sp, #8
 8019966:	2200      	movs	r2, #0
 8019968:	4641      	mov	r1, r8
 801996a:	4638      	mov	r0, r7
 801996c:	f7fe ffc6 	bl	80188fc <__cxa_type_match>
 8019970:	b108      	cbz	r0, 8019976 <__cxa_call_unexpected+0x8e>
 8019972:	f7ff fcd5 	bl	8019320 <__cxa_rethrow>
 8019976:	f8d8 3000 	ldr.w	r3, [r8]
 801997a:	9003      	str	r0, [sp, #12]
 801997c:	aa03      	add	r2, sp, #12
 801997e:	4640      	mov	r0, r8
 8019980:	4659      	mov	r1, fp
 8019982:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8019986:	2301      	movs	r3, #1
 8019988:	47c0      	blx	r8
 801998a:	9b01      	ldr	r3, [sp, #4]
 801998c:	2800      	cmp	r0, #0
 801998e:	bf18      	it	ne
 8019990:	4606      	movne	r6, r0
 8019992:	f109 0901 	add.w	r9, r9, #1
 8019996:	441d      	add	r5, r3
 8019998:	e7dc      	b.n	8019954 <__cxa_call_unexpected+0x6c>
 801999a:	b146      	cbz	r6, 80199ae <__cxa_call_unexpected+0xc6>
 801999c:	2004      	movs	r0, #4
 801999e:	f7fe ff6b 	bl	8018878 <__cxa_allocate_exception>
 80199a2:	4b07      	ldr	r3, [pc, #28]	; (80199c0 <__cxa_call_unexpected+0xd8>)
 80199a4:	4a07      	ldr	r2, [pc, #28]	; (80199c4 <__cxa_call_unexpected+0xdc>)
 80199a6:	4908      	ldr	r1, [pc, #32]	; (80199c8 <__cxa_call_unexpected+0xe0>)
 80199a8:	6003      	str	r3, [r0, #0]
 80199aa:	f7ff fc9d 	bl	80192e8 <__cxa_throw>
 80199ae:	4620      	mov	r0, r4
 80199b0:	f7ff fc18 	bl	80191e4 <_ZN10__cxxabiv111__terminateEPFvvE>
 80199b4:	f7ff f8a2 	bl	8018afc <__cxa_end_catch>
 80199b8:	f7ff f8a0 	bl	8018afc <__cxa_end_catch>
 80199bc:	f7fe ff98 	bl	80188f0 <__cxa_end_cleanup>
 80199c0:	08023b3c 	.word	0x08023b3c
 80199c4:	08018b8d 	.word	0x08018b8d
 80199c8:	08023ab8 	.word	0x08023ab8

080199cc <__cxa_current_exception_type>:
 80199cc:	b508      	push	{r3, lr}
 80199ce:	f7ff f8ef 	bl	8018bb0 <__cxa_get_globals>
 80199d2:	6800      	ldr	r0, [r0, #0]
 80199d4:	b130      	cbz	r0, 80199e4 <__cxa_current_exception_type+0x18>
 80199d6:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 80199da:	2b01      	cmp	r3, #1
 80199dc:	bf04      	itt	eq
 80199de:	6800      	ldreq	r0, [r0, #0]
 80199e0:	3878      	subeq	r0, #120	; 0x78
 80199e2:	6800      	ldr	r0, [r0, #0]
 80199e4:	bd08      	pop	{r3, pc}
 80199e6:	bf00      	nop

080199e8 <_ZSt15get_new_handlerv>:
 80199e8:	4b02      	ldr	r3, [pc, #8]	; (80199f4 <_ZSt15get_new_handlerv+0xc>)
 80199ea:	6818      	ldr	r0, [r3, #0]
 80199ec:	f3bf 8f5b 	dmb	ish
 80199f0:	4770      	bx	lr
 80199f2:	bf00      	nop
 80199f4:	20001720 	.word	0x20001720

080199f8 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
 80199f8:	68c0      	ldr	r0, [r0, #12]
 80199fa:	68c9      	ldr	r1, [r1, #12]
 80199fc:	b410      	push	{r4}
 80199fe:	6804      	ldr	r4, [r0, #0]
 8019a00:	6924      	ldr	r4, [r4, #16]
 8019a02:	3302      	adds	r3, #2
 8019a04:	46a4      	mov	ip, r4
 8019a06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a0a:	4760      	bx	ip

08019a0c <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
 8019a0c:	b510      	push	{r4, lr}
 8019a0e:	4b03      	ldr	r3, [pc, #12]	; (8019a1c <_ZN10__cxxabiv117__pbase_type_infoD1Ev+0x10>)
 8019a10:	6003      	str	r3, [r0, #0]
 8019a12:	4604      	mov	r4, r0
 8019a14:	f7ff fdba 	bl	801958c <_ZNSt9type_infoD1Ev>
 8019a18:	4620      	mov	r0, r4
 8019a1a:	bd10      	pop	{r4, pc}
 8019a1c:	0802470c 	.word	0x0802470c

08019a20 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
 8019a20:	b510      	push	{r4, lr}
 8019a22:	4b05      	ldr	r3, [pc, #20]	; (8019a38 <_ZN10__cxxabiv117__pbase_type_infoD0Ev+0x18>)
 8019a24:	6003      	str	r3, [r0, #0]
 8019a26:	4604      	mov	r4, r0
 8019a28:	f7ff fdb0 	bl	801958c <_ZNSt9type_infoD1Ev>
 8019a2c:	4620      	mov	r0, r4
 8019a2e:	2110      	movs	r1, #16
 8019a30:	f7fe feb0 	bl	8018794 <_ZdlPvj>
 8019a34:	4620      	mov	r0, r4
 8019a36:	bd10      	pop	{r4, pc}
 8019a38:	0802470c 	.word	0x0802470c

08019a3c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
 8019a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a40:	4606      	mov	r6, r0
 8019a42:	4690      	mov	r8, r2
 8019a44:	461f      	mov	r7, r3
 8019a46:	460d      	mov	r5, r1
 8019a48:	f7ff fdbc 	bl	80195c4 <_ZNKSt9type_infoeqERKS_>
 8019a4c:	4604      	mov	r4, r0
 8019a4e:	b110      	cbz	r0, 8019a56 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
 8019a50:	4620      	mov	r0, r4
 8019a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a56:	4933      	ldr	r1, [pc, #204]	; (8019b24 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xe8>)
 8019a58:	4628      	mov	r0, r5
 8019a5a:	f7ff fdb3 	bl	80195c4 <_ZNKSt9type_infoeqERKS_>
 8019a5e:	2800      	cmp	r0, #0
 8019a60:	d12f      	bne.n	8019ac2 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x86>
 8019a62:	6833      	ldr	r3, [r6, #0]
 8019a64:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8019a68:	2d00      	cmp	r5, #0
 8019a6a:	d059      	beq.n	8019b20 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xe4>
 8019a6c:	682b      	ldr	r3, [r5, #0]
 8019a6e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019a72:	f7ff fda7 	bl	80195c4 <_ZNKSt9type_infoeqERKS_>
 8019a76:	b378      	cbz	r0, 8019ad8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x9c>
 8019a78:	07fa      	lsls	r2, r7, #31
 8019a7a:	d5e9      	bpl.n	8019a50 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x14>
 8019a7c:	68aa      	ldr	r2, [r5, #8]
 8019a7e:	68b1      	ldr	r1, [r6, #8]
 8019a80:	f002 0060 	and.w	r0, r2, #96	; 0x60
 8019a84:	f001 0360 	and.w	r3, r1, #96	; 0x60
 8019a88:	ea30 0c03 	bics.w	ip, r0, r3
 8019a8c:	bf18      	it	ne
 8019a8e:	401a      	andne	r2, r3
 8019a90:	ea22 0201 	bic.w	r2, r2, r1
 8019a94:	ea23 0300 	bic.w	r3, r3, r0
 8019a98:	4313      	orrs	r3, r2
 8019a9a:	d1d9      	bne.n	8019a50 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x14>
 8019a9c:	07cb      	lsls	r3, r1, #31
 8019a9e:	6833      	ldr	r3, [r6, #0]
 8019aa0:	699c      	ldr	r4, [r3, #24]
 8019aa2:	4b21      	ldr	r3, [pc, #132]	; (8019b28 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xec>)
 8019aa4:	bf58      	it	pl
 8019aa6:	f027 0701 	bicpl.w	r7, r7, #1
 8019aaa:	429c      	cmp	r4, r3
 8019aac:	d130      	bne.n	8019b10 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xd4>
 8019aae:	68f0      	ldr	r0, [r6, #12]
 8019ab0:	68e9      	ldr	r1, [r5, #12]
 8019ab2:	6802      	ldr	r2, [r0, #0]
 8019ab4:	6914      	ldr	r4, [r2, #16]
 8019ab6:	1cbb      	adds	r3, r7, #2
 8019ab8:	4642      	mov	r2, r8
 8019aba:	46a4      	mov	ip, r4
 8019abc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ac0:	4760      	bx	ip
 8019ac2:	6833      	ldr	r3, [r6, #0]
 8019ac4:	4919      	ldr	r1, [pc, #100]	; (8019b2c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xf0>)
 8019ac6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8019aca:	f7ff fd7b 	bl	80195c4 <_ZNKSt9type_infoeqERKS_>
 8019ace:	b138      	cbz	r0, 8019ae0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xa4>
 8019ad0:	f8c8 4000 	str.w	r4, [r8]
 8019ad4:	4604      	mov	r4, r0
 8019ad6:	e7bb      	b.n	8019a50 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x14>
 8019ad8:	4604      	mov	r4, r0
 8019ada:	4620      	mov	r0, r4
 8019adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ae0:	6833      	ldr	r3, [r6, #0]
 8019ae2:	4913      	ldr	r1, [pc, #76]	; (8019b30 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xf4>)
 8019ae4:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8019ae8:	f7ff fd6c 	bl	80195c4 <_ZNKSt9type_infoeqERKS_>
 8019aec:	4681      	mov	r9, r0
 8019aee:	2800      	cmp	r0, #0
 8019af0:	d0b7      	beq.n	8019a62 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8019af2:	68f0      	ldr	r0, [r6, #12]
 8019af4:	6803      	ldr	r3, [r0, #0]
 8019af6:	68db      	ldr	r3, [r3, #12]
 8019af8:	4798      	blx	r3
 8019afa:	4604      	mov	r4, r0
 8019afc:	b118      	cbz	r0, 8019b06 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xca>
 8019afe:	4b0d      	ldr	r3, [pc, #52]	; (8019b34 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xf8>)
 8019b00:	f8c8 3000 	str.w	r3, [r8]
 8019b04:	e7a4      	b.n	8019a50 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x14>
 8019b06:	4b0c      	ldr	r3, [pc, #48]	; (8019b38 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xfc>)
 8019b08:	f8c8 3000 	str.w	r3, [r8]
 8019b0c:	464c      	mov	r4, r9
 8019b0e:	e79f      	b.n	8019a50 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x14>
 8019b10:	463b      	mov	r3, r7
 8019b12:	4642      	mov	r2, r8
 8019b14:	4629      	mov	r1, r5
 8019b16:	4630      	mov	r0, r6
 8019b18:	46a4      	mov	ip, r4
 8019b1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b1e:	4760      	bx	ip
 8019b20:	f000 f80c 	bl	8019b3c <__cxa_bad_typeid>
 8019b24:	08023b58 	.word	0x08023b58
 8019b28:	080199f9 	.word	0x080199f9
 8019b2c:	08023bd4 	.word	0x08023bd4
 8019b30:	08024734 	.word	0x08024734
 8019b34:	0802472c 	.word	0x0802472c
 8019b38:	08024728 	.word	0x08024728

08019b3c <__cxa_bad_typeid>:
 8019b3c:	b508      	push	{r3, lr}
 8019b3e:	2004      	movs	r0, #4
 8019b40:	f7fe fe9a 	bl	8018878 <__cxa_allocate_exception>
 8019b44:	4b02      	ldr	r3, [pc, #8]	; (8019b50 <__cxa_bad_typeid+0x14>)
 8019b46:	4a03      	ldr	r2, [pc, #12]	; (8019b54 <__cxa_bad_typeid+0x18>)
 8019b48:	4903      	ldr	r1, [pc, #12]	; (8019b58 <__cxa_bad_typeid+0x1c>)
 8019b4a:	6003      	str	r3, [r0, #0]
 8019b4c:	f7ff fbcc 	bl	80192e8 <__cxa_throw>
 8019b50:	080247a4 	.word	0x080247a4
 8019b54:	08019b65 	.word	0x08019b65
 8019b58:	08024780 	.word	0x08024780

08019b5c <_ZNKSt10bad_typeid4whatEv>:
 8019b5c:	4800      	ldr	r0, [pc, #0]	; (8019b60 <_ZNKSt10bad_typeid4whatEv+0x4>)
 8019b5e:	4770      	bx	lr
 8019b60:	08024770 	.word	0x08024770

08019b64 <_ZNSt10bad_typeidD1Ev>:
 8019b64:	b510      	push	{r4, lr}
 8019b66:	4b03      	ldr	r3, [pc, #12]	; (8019b74 <_ZNSt10bad_typeidD1Ev+0x10>)
 8019b68:	6003      	str	r3, [r0, #0]
 8019b6a:	4604      	mov	r4, r0
 8019b6c:	f7ff f80c 	bl	8018b88 <_ZNSt9exceptionD1Ev>
 8019b70:	4620      	mov	r0, r4
 8019b72:	bd10      	pop	{r4, pc}
 8019b74:	080247a4 	.word	0x080247a4

08019b78 <_ZNSt10bad_typeidD0Ev>:
 8019b78:	b510      	push	{r4, lr}
 8019b7a:	4b05      	ldr	r3, [pc, #20]	; (8019b90 <_ZNSt10bad_typeidD0Ev+0x18>)
 8019b7c:	6003      	str	r3, [r0, #0]
 8019b7e:	4604      	mov	r4, r0
 8019b80:	f7ff f802 	bl	8018b88 <_ZNSt9exceptionD1Ev>
 8019b84:	4620      	mov	r0, r4
 8019b86:	2104      	movs	r1, #4
 8019b88:	f7fe fe04 	bl	8018794 <_ZdlPvj>
 8019b8c:	4620      	mov	r0, r4
 8019b8e:	bd10      	pop	{r4, pc}
 8019b90:	080247a4 	.word	0x080247a4

08019b94 <abort>:
 8019b94:	b508      	push	{r3, lr}
 8019b96:	2006      	movs	r0, #6
 8019b98:	f001 ffce 	bl	801bb38 <raise>
 8019b9c:	2001      	movs	r0, #1
 8019b9e:	f7f3 ff23 	bl	800d9e8 <_exit>

08019ba2 <atof>:
 8019ba2:	2100      	movs	r1, #0
 8019ba4:	f000 bf04 	b.w	801a9b0 <strtod>

08019ba8 <atoi>:
 8019ba8:	220a      	movs	r2, #10
 8019baa:	2100      	movs	r1, #0
 8019bac:	f000 bf8e 	b.w	801aacc <strtol>

08019bb0 <malloc>:
 8019bb0:	4b02      	ldr	r3, [pc, #8]	; (8019bbc <malloc+0xc>)
 8019bb2:	4601      	mov	r1, r0
 8019bb4:	6818      	ldr	r0, [r3, #0]
 8019bb6:	f000 b82b 	b.w	8019c10 <_malloc_r>
 8019bba:	bf00      	nop
 8019bbc:	200001f8 	.word	0x200001f8

08019bc0 <free>:
 8019bc0:	4b02      	ldr	r3, [pc, #8]	; (8019bcc <free+0xc>)
 8019bc2:	4601      	mov	r1, r0
 8019bc4:	6818      	ldr	r0, [r3, #0]
 8019bc6:	f002 bef5 	b.w	801c9b4 <_free_r>
 8019bca:	bf00      	nop
 8019bcc:	200001f8 	.word	0x200001f8

08019bd0 <sbrk_aligned>:
 8019bd0:	b570      	push	{r4, r5, r6, lr}
 8019bd2:	4e0e      	ldr	r6, [pc, #56]	; (8019c0c <sbrk_aligned+0x3c>)
 8019bd4:	460c      	mov	r4, r1
 8019bd6:	6831      	ldr	r1, [r6, #0]
 8019bd8:	4605      	mov	r5, r0
 8019bda:	b911      	cbnz	r1, 8019be2 <sbrk_aligned+0x12>
 8019bdc:	f002 f800 	bl	801bbe0 <_sbrk_r>
 8019be0:	6030      	str	r0, [r6, #0]
 8019be2:	4621      	mov	r1, r4
 8019be4:	4628      	mov	r0, r5
 8019be6:	f001 fffb 	bl	801bbe0 <_sbrk_r>
 8019bea:	1c43      	adds	r3, r0, #1
 8019bec:	d00a      	beq.n	8019c04 <sbrk_aligned+0x34>
 8019bee:	1cc4      	adds	r4, r0, #3
 8019bf0:	f024 0403 	bic.w	r4, r4, #3
 8019bf4:	42a0      	cmp	r0, r4
 8019bf6:	d007      	beq.n	8019c08 <sbrk_aligned+0x38>
 8019bf8:	1a21      	subs	r1, r4, r0
 8019bfa:	4628      	mov	r0, r5
 8019bfc:	f001 fff0 	bl	801bbe0 <_sbrk_r>
 8019c00:	3001      	adds	r0, #1
 8019c02:	d101      	bne.n	8019c08 <sbrk_aligned+0x38>
 8019c04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019c08:	4620      	mov	r0, r4
 8019c0a:	bd70      	pop	{r4, r5, r6, pc}
 8019c0c:	20001728 	.word	0x20001728

08019c10 <_malloc_r>:
 8019c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c14:	1ccd      	adds	r5, r1, #3
 8019c16:	f025 0503 	bic.w	r5, r5, #3
 8019c1a:	3508      	adds	r5, #8
 8019c1c:	2d0c      	cmp	r5, #12
 8019c1e:	bf38      	it	cc
 8019c20:	250c      	movcc	r5, #12
 8019c22:	2d00      	cmp	r5, #0
 8019c24:	4607      	mov	r7, r0
 8019c26:	db01      	blt.n	8019c2c <_malloc_r+0x1c>
 8019c28:	42a9      	cmp	r1, r5
 8019c2a:	d905      	bls.n	8019c38 <_malloc_r+0x28>
 8019c2c:	230c      	movs	r3, #12
 8019c2e:	603b      	str	r3, [r7, #0]
 8019c30:	2600      	movs	r6, #0
 8019c32:	4630      	mov	r0, r6
 8019c34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8019d0c <_malloc_r+0xfc>
 8019c3c:	f000 f868 	bl	8019d10 <__malloc_lock>
 8019c40:	f8d8 3000 	ldr.w	r3, [r8]
 8019c44:	461c      	mov	r4, r3
 8019c46:	bb5c      	cbnz	r4, 8019ca0 <_malloc_r+0x90>
 8019c48:	4629      	mov	r1, r5
 8019c4a:	4638      	mov	r0, r7
 8019c4c:	f7ff ffc0 	bl	8019bd0 <sbrk_aligned>
 8019c50:	1c43      	adds	r3, r0, #1
 8019c52:	4604      	mov	r4, r0
 8019c54:	d155      	bne.n	8019d02 <_malloc_r+0xf2>
 8019c56:	f8d8 4000 	ldr.w	r4, [r8]
 8019c5a:	4626      	mov	r6, r4
 8019c5c:	2e00      	cmp	r6, #0
 8019c5e:	d145      	bne.n	8019cec <_malloc_r+0xdc>
 8019c60:	2c00      	cmp	r4, #0
 8019c62:	d048      	beq.n	8019cf6 <_malloc_r+0xe6>
 8019c64:	6823      	ldr	r3, [r4, #0]
 8019c66:	4631      	mov	r1, r6
 8019c68:	4638      	mov	r0, r7
 8019c6a:	eb04 0903 	add.w	r9, r4, r3
 8019c6e:	f001 ffb7 	bl	801bbe0 <_sbrk_r>
 8019c72:	4581      	cmp	r9, r0
 8019c74:	d13f      	bne.n	8019cf6 <_malloc_r+0xe6>
 8019c76:	6821      	ldr	r1, [r4, #0]
 8019c78:	1a6d      	subs	r5, r5, r1
 8019c7a:	4629      	mov	r1, r5
 8019c7c:	4638      	mov	r0, r7
 8019c7e:	f7ff ffa7 	bl	8019bd0 <sbrk_aligned>
 8019c82:	3001      	adds	r0, #1
 8019c84:	d037      	beq.n	8019cf6 <_malloc_r+0xe6>
 8019c86:	6823      	ldr	r3, [r4, #0]
 8019c88:	442b      	add	r3, r5
 8019c8a:	6023      	str	r3, [r4, #0]
 8019c8c:	f8d8 3000 	ldr.w	r3, [r8]
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	d038      	beq.n	8019d06 <_malloc_r+0xf6>
 8019c94:	685a      	ldr	r2, [r3, #4]
 8019c96:	42a2      	cmp	r2, r4
 8019c98:	d12b      	bne.n	8019cf2 <_malloc_r+0xe2>
 8019c9a:	2200      	movs	r2, #0
 8019c9c:	605a      	str	r2, [r3, #4]
 8019c9e:	e00f      	b.n	8019cc0 <_malloc_r+0xb0>
 8019ca0:	6822      	ldr	r2, [r4, #0]
 8019ca2:	1b52      	subs	r2, r2, r5
 8019ca4:	d41f      	bmi.n	8019ce6 <_malloc_r+0xd6>
 8019ca6:	2a0b      	cmp	r2, #11
 8019ca8:	d917      	bls.n	8019cda <_malloc_r+0xca>
 8019caa:	1961      	adds	r1, r4, r5
 8019cac:	42a3      	cmp	r3, r4
 8019cae:	6025      	str	r5, [r4, #0]
 8019cb0:	bf18      	it	ne
 8019cb2:	6059      	strne	r1, [r3, #4]
 8019cb4:	6863      	ldr	r3, [r4, #4]
 8019cb6:	bf08      	it	eq
 8019cb8:	f8c8 1000 	streq.w	r1, [r8]
 8019cbc:	5162      	str	r2, [r4, r5]
 8019cbe:	604b      	str	r3, [r1, #4]
 8019cc0:	4638      	mov	r0, r7
 8019cc2:	f104 060b 	add.w	r6, r4, #11
 8019cc6:	f000 f829 	bl	8019d1c <__malloc_unlock>
 8019cca:	f026 0607 	bic.w	r6, r6, #7
 8019cce:	1d23      	adds	r3, r4, #4
 8019cd0:	1af2      	subs	r2, r6, r3
 8019cd2:	d0ae      	beq.n	8019c32 <_malloc_r+0x22>
 8019cd4:	1b9b      	subs	r3, r3, r6
 8019cd6:	50a3      	str	r3, [r4, r2]
 8019cd8:	e7ab      	b.n	8019c32 <_malloc_r+0x22>
 8019cda:	42a3      	cmp	r3, r4
 8019cdc:	6862      	ldr	r2, [r4, #4]
 8019cde:	d1dd      	bne.n	8019c9c <_malloc_r+0x8c>
 8019ce0:	f8c8 2000 	str.w	r2, [r8]
 8019ce4:	e7ec      	b.n	8019cc0 <_malloc_r+0xb0>
 8019ce6:	4623      	mov	r3, r4
 8019ce8:	6864      	ldr	r4, [r4, #4]
 8019cea:	e7ac      	b.n	8019c46 <_malloc_r+0x36>
 8019cec:	4634      	mov	r4, r6
 8019cee:	6876      	ldr	r6, [r6, #4]
 8019cf0:	e7b4      	b.n	8019c5c <_malloc_r+0x4c>
 8019cf2:	4613      	mov	r3, r2
 8019cf4:	e7cc      	b.n	8019c90 <_malloc_r+0x80>
 8019cf6:	230c      	movs	r3, #12
 8019cf8:	603b      	str	r3, [r7, #0]
 8019cfa:	4638      	mov	r0, r7
 8019cfc:	f000 f80e 	bl	8019d1c <__malloc_unlock>
 8019d00:	e797      	b.n	8019c32 <_malloc_r+0x22>
 8019d02:	6025      	str	r5, [r4, #0]
 8019d04:	e7dc      	b.n	8019cc0 <_malloc_r+0xb0>
 8019d06:	605b      	str	r3, [r3, #4]
 8019d08:	deff      	udf	#255	; 0xff
 8019d0a:	bf00      	nop
 8019d0c:	20001724 	.word	0x20001724

08019d10 <__malloc_lock>:
 8019d10:	4801      	ldr	r0, [pc, #4]	; (8019d18 <__malloc_lock+0x8>)
 8019d12:	f001 bfb2 	b.w	801bc7a <__retarget_lock_acquire_recursive>
 8019d16:	bf00      	nop
 8019d18:	2000186c 	.word	0x2000186c

08019d1c <__malloc_unlock>:
 8019d1c:	4801      	ldr	r0, [pc, #4]	; (8019d24 <__malloc_unlock+0x8>)
 8019d1e:	f001 bfad 	b.w	801bc7c <__retarget_lock_release_recursive>
 8019d22:	bf00      	nop
 8019d24:	2000186c 	.word	0x2000186c

08019d28 <realloc>:
 8019d28:	4b02      	ldr	r3, [pc, #8]	; (8019d34 <realloc+0xc>)
 8019d2a:	460a      	mov	r2, r1
 8019d2c:	4601      	mov	r1, r0
 8019d2e:	6818      	ldr	r0, [r3, #0]
 8019d30:	f000 b802 	b.w	8019d38 <_realloc_r>
 8019d34:	200001f8 	.word	0x200001f8

08019d38 <_realloc_r>:
 8019d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d3c:	4680      	mov	r8, r0
 8019d3e:	4614      	mov	r4, r2
 8019d40:	460e      	mov	r6, r1
 8019d42:	b921      	cbnz	r1, 8019d4e <_realloc_r+0x16>
 8019d44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019d48:	4611      	mov	r1, r2
 8019d4a:	f7ff bf61 	b.w	8019c10 <_malloc_r>
 8019d4e:	b92a      	cbnz	r2, 8019d5c <_realloc_r+0x24>
 8019d50:	f002 fe30 	bl	801c9b4 <_free_r>
 8019d54:	4625      	mov	r5, r4
 8019d56:	4628      	mov	r0, r5
 8019d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d5c:	f003 fe8d 	bl	801da7a <_malloc_usable_size_r>
 8019d60:	4284      	cmp	r4, r0
 8019d62:	4607      	mov	r7, r0
 8019d64:	d802      	bhi.n	8019d6c <_realloc_r+0x34>
 8019d66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019d6a:	d812      	bhi.n	8019d92 <_realloc_r+0x5a>
 8019d6c:	4621      	mov	r1, r4
 8019d6e:	4640      	mov	r0, r8
 8019d70:	f7ff ff4e 	bl	8019c10 <_malloc_r>
 8019d74:	4605      	mov	r5, r0
 8019d76:	2800      	cmp	r0, #0
 8019d78:	d0ed      	beq.n	8019d56 <_realloc_r+0x1e>
 8019d7a:	42bc      	cmp	r4, r7
 8019d7c:	4622      	mov	r2, r4
 8019d7e:	4631      	mov	r1, r6
 8019d80:	bf28      	it	cs
 8019d82:	463a      	movcs	r2, r7
 8019d84:	f001 ff83 	bl	801bc8e <memcpy>
 8019d88:	4631      	mov	r1, r6
 8019d8a:	4640      	mov	r0, r8
 8019d8c:	f002 fe12 	bl	801c9b4 <_free_r>
 8019d90:	e7e1      	b.n	8019d56 <_realloc_r+0x1e>
 8019d92:	4635      	mov	r5, r6
 8019d94:	e7df      	b.n	8019d56 <_realloc_r+0x1e>

08019d96 <sulp>:
 8019d96:	b570      	push	{r4, r5, r6, lr}
 8019d98:	4604      	mov	r4, r0
 8019d9a:	460d      	mov	r5, r1
 8019d9c:	ec45 4b10 	vmov	d0, r4, r5
 8019da0:	4616      	mov	r6, r2
 8019da2:	f003 fd29 	bl	801d7f8 <__ulp>
 8019da6:	ec51 0b10 	vmov	r0, r1, d0
 8019daa:	b17e      	cbz	r6, 8019dcc <sulp+0x36>
 8019dac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8019db0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8019db4:	2b00      	cmp	r3, #0
 8019db6:	dd09      	ble.n	8019dcc <sulp+0x36>
 8019db8:	051b      	lsls	r3, r3, #20
 8019dba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8019dbe:	2400      	movs	r4, #0
 8019dc0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8019dc4:	4622      	mov	r2, r4
 8019dc6:	462b      	mov	r3, r5
 8019dc8:	f7ec fbfe 	bl	80065c8 <__aeabi_dmul>
 8019dcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08019dd0 <_strtod_l>:
 8019dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dd4:	ed2d 8b02 	vpush	{d8}
 8019dd8:	b09b      	sub	sp, #108	; 0x6c
 8019dda:	4604      	mov	r4, r0
 8019ddc:	9213      	str	r2, [sp, #76]	; 0x4c
 8019dde:	2200      	movs	r2, #0
 8019de0:	9216      	str	r2, [sp, #88]	; 0x58
 8019de2:	460d      	mov	r5, r1
 8019de4:	f04f 0800 	mov.w	r8, #0
 8019de8:	f04f 0900 	mov.w	r9, #0
 8019dec:	460a      	mov	r2, r1
 8019dee:	9215      	str	r2, [sp, #84]	; 0x54
 8019df0:	7811      	ldrb	r1, [r2, #0]
 8019df2:	292b      	cmp	r1, #43	; 0x2b
 8019df4:	d04c      	beq.n	8019e90 <_strtod_l+0xc0>
 8019df6:	d83a      	bhi.n	8019e6e <_strtod_l+0x9e>
 8019df8:	290d      	cmp	r1, #13
 8019dfa:	d834      	bhi.n	8019e66 <_strtod_l+0x96>
 8019dfc:	2908      	cmp	r1, #8
 8019dfe:	d834      	bhi.n	8019e6a <_strtod_l+0x9a>
 8019e00:	2900      	cmp	r1, #0
 8019e02:	d03d      	beq.n	8019e80 <_strtod_l+0xb0>
 8019e04:	2200      	movs	r2, #0
 8019e06:	920a      	str	r2, [sp, #40]	; 0x28
 8019e08:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8019e0a:	7832      	ldrb	r2, [r6, #0]
 8019e0c:	2a30      	cmp	r2, #48	; 0x30
 8019e0e:	f040 80b4 	bne.w	8019f7a <_strtod_l+0x1aa>
 8019e12:	7872      	ldrb	r2, [r6, #1]
 8019e14:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8019e18:	2a58      	cmp	r2, #88	; 0x58
 8019e1a:	d170      	bne.n	8019efe <_strtod_l+0x12e>
 8019e1c:	9302      	str	r3, [sp, #8]
 8019e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019e20:	9301      	str	r3, [sp, #4]
 8019e22:	ab16      	add	r3, sp, #88	; 0x58
 8019e24:	9300      	str	r3, [sp, #0]
 8019e26:	4a8e      	ldr	r2, [pc, #568]	; (801a060 <_strtod_l+0x290>)
 8019e28:	ab17      	add	r3, sp, #92	; 0x5c
 8019e2a:	a915      	add	r1, sp, #84	; 0x54
 8019e2c:	4620      	mov	r0, r4
 8019e2e:	f002 fe75 	bl	801cb1c <__gethex>
 8019e32:	f010 070f 	ands.w	r7, r0, #15
 8019e36:	4605      	mov	r5, r0
 8019e38:	d005      	beq.n	8019e46 <_strtod_l+0x76>
 8019e3a:	2f06      	cmp	r7, #6
 8019e3c:	d12a      	bne.n	8019e94 <_strtod_l+0xc4>
 8019e3e:	3601      	adds	r6, #1
 8019e40:	2300      	movs	r3, #0
 8019e42:	9615      	str	r6, [sp, #84]	; 0x54
 8019e44:	930a      	str	r3, [sp, #40]	; 0x28
 8019e46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	f040 857f 	bne.w	801a94c <_strtod_l+0xb7c>
 8019e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019e50:	b1db      	cbz	r3, 8019e8a <_strtod_l+0xba>
 8019e52:	4642      	mov	r2, r8
 8019e54:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8019e58:	ec43 2b10 	vmov	d0, r2, r3
 8019e5c:	b01b      	add	sp, #108	; 0x6c
 8019e5e:	ecbd 8b02 	vpop	{d8}
 8019e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e66:	2920      	cmp	r1, #32
 8019e68:	d1cc      	bne.n	8019e04 <_strtod_l+0x34>
 8019e6a:	3201      	adds	r2, #1
 8019e6c:	e7bf      	b.n	8019dee <_strtod_l+0x1e>
 8019e6e:	292d      	cmp	r1, #45	; 0x2d
 8019e70:	d1c8      	bne.n	8019e04 <_strtod_l+0x34>
 8019e72:	2101      	movs	r1, #1
 8019e74:	910a      	str	r1, [sp, #40]	; 0x28
 8019e76:	1c51      	adds	r1, r2, #1
 8019e78:	9115      	str	r1, [sp, #84]	; 0x54
 8019e7a:	7852      	ldrb	r2, [r2, #1]
 8019e7c:	2a00      	cmp	r2, #0
 8019e7e:	d1c3      	bne.n	8019e08 <_strtod_l+0x38>
 8019e80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019e82:	9515      	str	r5, [sp, #84]	; 0x54
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	f040 855f 	bne.w	801a948 <_strtod_l+0xb78>
 8019e8a:	4642      	mov	r2, r8
 8019e8c:	464b      	mov	r3, r9
 8019e8e:	e7e3      	b.n	8019e58 <_strtod_l+0x88>
 8019e90:	2100      	movs	r1, #0
 8019e92:	e7ef      	b.n	8019e74 <_strtod_l+0xa4>
 8019e94:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019e96:	b13a      	cbz	r2, 8019ea8 <_strtod_l+0xd8>
 8019e98:	2135      	movs	r1, #53	; 0x35
 8019e9a:	a818      	add	r0, sp, #96	; 0x60
 8019e9c:	f003 fda9 	bl	801d9f2 <__copybits>
 8019ea0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019ea2:	4620      	mov	r0, r4
 8019ea4:	f003 f97c 	bl	801d1a0 <_Bfree>
 8019ea8:	3f01      	subs	r7, #1
 8019eaa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8019eac:	2f04      	cmp	r7, #4
 8019eae:	d806      	bhi.n	8019ebe <_strtod_l+0xee>
 8019eb0:	e8df f007 	tbb	[pc, r7]
 8019eb4:	201d0314 	.word	0x201d0314
 8019eb8:	14          	.byte	0x14
 8019eb9:	00          	.byte	0x00
 8019eba:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8019ebe:	05e9      	lsls	r1, r5, #23
 8019ec0:	bf48      	it	mi
 8019ec2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8019ec6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019eca:	0d1b      	lsrs	r3, r3, #20
 8019ecc:	051b      	lsls	r3, r3, #20
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d1b9      	bne.n	8019e46 <_strtod_l+0x76>
 8019ed2:	f001 fea7 	bl	801bc24 <__errno>
 8019ed6:	2322      	movs	r3, #34	; 0x22
 8019ed8:	6003      	str	r3, [r0, #0]
 8019eda:	e7b4      	b.n	8019e46 <_strtod_l+0x76>
 8019edc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8019ee0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8019ee4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8019ee8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8019eec:	e7e7      	b.n	8019ebe <_strtod_l+0xee>
 8019eee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801a068 <_strtod_l+0x298>
 8019ef2:	e7e4      	b.n	8019ebe <_strtod_l+0xee>
 8019ef4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8019ef8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8019efc:	e7df      	b.n	8019ebe <_strtod_l+0xee>
 8019efe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019f00:	1c5a      	adds	r2, r3, #1
 8019f02:	9215      	str	r2, [sp, #84]	; 0x54
 8019f04:	785b      	ldrb	r3, [r3, #1]
 8019f06:	2b30      	cmp	r3, #48	; 0x30
 8019f08:	d0f9      	beq.n	8019efe <_strtod_l+0x12e>
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	d09b      	beq.n	8019e46 <_strtod_l+0x76>
 8019f0e:	2301      	movs	r3, #1
 8019f10:	f04f 0a00 	mov.w	sl, #0
 8019f14:	9304      	str	r3, [sp, #16]
 8019f16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019f18:	930b      	str	r3, [sp, #44]	; 0x2c
 8019f1a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8019f1e:	46d3      	mov	fp, sl
 8019f20:	220a      	movs	r2, #10
 8019f22:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019f24:	7806      	ldrb	r6, [r0, #0]
 8019f26:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8019f2a:	b2d9      	uxtb	r1, r3
 8019f2c:	2909      	cmp	r1, #9
 8019f2e:	d926      	bls.n	8019f7e <_strtod_l+0x1ae>
 8019f30:	494c      	ldr	r1, [pc, #304]	; (801a064 <_strtod_l+0x294>)
 8019f32:	2201      	movs	r2, #1
 8019f34:	f001 fd9b 	bl	801ba6e <strncmp>
 8019f38:	2800      	cmp	r0, #0
 8019f3a:	d030      	beq.n	8019f9e <_strtod_l+0x1ce>
 8019f3c:	2000      	movs	r0, #0
 8019f3e:	4632      	mov	r2, r6
 8019f40:	9005      	str	r0, [sp, #20]
 8019f42:	465e      	mov	r6, fp
 8019f44:	4603      	mov	r3, r0
 8019f46:	2a65      	cmp	r2, #101	; 0x65
 8019f48:	d001      	beq.n	8019f4e <_strtod_l+0x17e>
 8019f4a:	2a45      	cmp	r2, #69	; 0x45
 8019f4c:	d113      	bne.n	8019f76 <_strtod_l+0x1a6>
 8019f4e:	b91e      	cbnz	r6, 8019f58 <_strtod_l+0x188>
 8019f50:	9a04      	ldr	r2, [sp, #16]
 8019f52:	4302      	orrs	r2, r0
 8019f54:	d094      	beq.n	8019e80 <_strtod_l+0xb0>
 8019f56:	2600      	movs	r6, #0
 8019f58:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8019f5a:	1c6a      	adds	r2, r5, #1
 8019f5c:	9215      	str	r2, [sp, #84]	; 0x54
 8019f5e:	786a      	ldrb	r2, [r5, #1]
 8019f60:	2a2b      	cmp	r2, #43	; 0x2b
 8019f62:	d074      	beq.n	801a04e <_strtod_l+0x27e>
 8019f64:	2a2d      	cmp	r2, #45	; 0x2d
 8019f66:	d078      	beq.n	801a05a <_strtod_l+0x28a>
 8019f68:	f04f 0c00 	mov.w	ip, #0
 8019f6c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8019f70:	2909      	cmp	r1, #9
 8019f72:	d97f      	bls.n	801a074 <_strtod_l+0x2a4>
 8019f74:	9515      	str	r5, [sp, #84]	; 0x54
 8019f76:	2700      	movs	r7, #0
 8019f78:	e09e      	b.n	801a0b8 <_strtod_l+0x2e8>
 8019f7a:	2300      	movs	r3, #0
 8019f7c:	e7c8      	b.n	8019f10 <_strtod_l+0x140>
 8019f7e:	f1bb 0f08 	cmp.w	fp, #8
 8019f82:	bfd8      	it	le
 8019f84:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8019f86:	f100 0001 	add.w	r0, r0, #1
 8019f8a:	bfda      	itte	le
 8019f8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8019f90:	9309      	strle	r3, [sp, #36]	; 0x24
 8019f92:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8019f96:	f10b 0b01 	add.w	fp, fp, #1
 8019f9a:	9015      	str	r0, [sp, #84]	; 0x54
 8019f9c:	e7c1      	b.n	8019f22 <_strtod_l+0x152>
 8019f9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019fa0:	1c5a      	adds	r2, r3, #1
 8019fa2:	9215      	str	r2, [sp, #84]	; 0x54
 8019fa4:	785a      	ldrb	r2, [r3, #1]
 8019fa6:	f1bb 0f00 	cmp.w	fp, #0
 8019faa:	d037      	beq.n	801a01c <_strtod_l+0x24c>
 8019fac:	9005      	str	r0, [sp, #20]
 8019fae:	465e      	mov	r6, fp
 8019fb0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8019fb4:	2b09      	cmp	r3, #9
 8019fb6:	d912      	bls.n	8019fde <_strtod_l+0x20e>
 8019fb8:	2301      	movs	r3, #1
 8019fba:	e7c4      	b.n	8019f46 <_strtod_l+0x176>
 8019fbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019fbe:	1c5a      	adds	r2, r3, #1
 8019fc0:	9215      	str	r2, [sp, #84]	; 0x54
 8019fc2:	785a      	ldrb	r2, [r3, #1]
 8019fc4:	3001      	adds	r0, #1
 8019fc6:	2a30      	cmp	r2, #48	; 0x30
 8019fc8:	d0f8      	beq.n	8019fbc <_strtod_l+0x1ec>
 8019fca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8019fce:	2b08      	cmp	r3, #8
 8019fd0:	f200 84c1 	bhi.w	801a956 <_strtod_l+0xb86>
 8019fd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019fd6:	9005      	str	r0, [sp, #20]
 8019fd8:	2000      	movs	r0, #0
 8019fda:	930b      	str	r3, [sp, #44]	; 0x2c
 8019fdc:	4606      	mov	r6, r0
 8019fde:	3a30      	subs	r2, #48	; 0x30
 8019fe0:	f100 0301 	add.w	r3, r0, #1
 8019fe4:	d014      	beq.n	801a010 <_strtod_l+0x240>
 8019fe6:	9905      	ldr	r1, [sp, #20]
 8019fe8:	4419      	add	r1, r3
 8019fea:	9105      	str	r1, [sp, #20]
 8019fec:	4633      	mov	r3, r6
 8019fee:	eb00 0c06 	add.w	ip, r0, r6
 8019ff2:	210a      	movs	r1, #10
 8019ff4:	4563      	cmp	r3, ip
 8019ff6:	d113      	bne.n	801a020 <_strtod_l+0x250>
 8019ff8:	1833      	adds	r3, r6, r0
 8019ffa:	2b08      	cmp	r3, #8
 8019ffc:	f106 0601 	add.w	r6, r6, #1
 801a000:	4406      	add	r6, r0
 801a002:	dc1a      	bgt.n	801a03a <_strtod_l+0x26a>
 801a004:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a006:	230a      	movs	r3, #10
 801a008:	fb03 2301 	mla	r3, r3, r1, r2
 801a00c:	9309      	str	r3, [sp, #36]	; 0x24
 801a00e:	2300      	movs	r3, #0
 801a010:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a012:	1c51      	adds	r1, r2, #1
 801a014:	9115      	str	r1, [sp, #84]	; 0x54
 801a016:	7852      	ldrb	r2, [r2, #1]
 801a018:	4618      	mov	r0, r3
 801a01a:	e7c9      	b.n	8019fb0 <_strtod_l+0x1e0>
 801a01c:	4658      	mov	r0, fp
 801a01e:	e7d2      	b.n	8019fc6 <_strtod_l+0x1f6>
 801a020:	2b08      	cmp	r3, #8
 801a022:	f103 0301 	add.w	r3, r3, #1
 801a026:	dc03      	bgt.n	801a030 <_strtod_l+0x260>
 801a028:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801a02a:	434f      	muls	r7, r1
 801a02c:	9709      	str	r7, [sp, #36]	; 0x24
 801a02e:	e7e1      	b.n	8019ff4 <_strtod_l+0x224>
 801a030:	2b10      	cmp	r3, #16
 801a032:	bfd8      	it	le
 801a034:	fb01 fa0a 	mulle.w	sl, r1, sl
 801a038:	e7dc      	b.n	8019ff4 <_strtod_l+0x224>
 801a03a:	2e10      	cmp	r6, #16
 801a03c:	bfdc      	itt	le
 801a03e:	230a      	movle	r3, #10
 801a040:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801a044:	e7e3      	b.n	801a00e <_strtod_l+0x23e>
 801a046:	2300      	movs	r3, #0
 801a048:	9305      	str	r3, [sp, #20]
 801a04a:	2301      	movs	r3, #1
 801a04c:	e780      	b.n	8019f50 <_strtod_l+0x180>
 801a04e:	f04f 0c00 	mov.w	ip, #0
 801a052:	1caa      	adds	r2, r5, #2
 801a054:	9215      	str	r2, [sp, #84]	; 0x54
 801a056:	78aa      	ldrb	r2, [r5, #2]
 801a058:	e788      	b.n	8019f6c <_strtod_l+0x19c>
 801a05a:	f04f 0c01 	mov.w	ip, #1
 801a05e:	e7f8      	b.n	801a052 <_strtod_l+0x282>
 801a060:	080247b4 	.word	0x080247b4
 801a064:	080247b0 	.word	0x080247b0
 801a068:	7ff00000 	.word	0x7ff00000
 801a06c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a06e:	1c51      	adds	r1, r2, #1
 801a070:	9115      	str	r1, [sp, #84]	; 0x54
 801a072:	7852      	ldrb	r2, [r2, #1]
 801a074:	2a30      	cmp	r2, #48	; 0x30
 801a076:	d0f9      	beq.n	801a06c <_strtod_l+0x29c>
 801a078:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801a07c:	2908      	cmp	r1, #8
 801a07e:	f63f af7a 	bhi.w	8019f76 <_strtod_l+0x1a6>
 801a082:	3a30      	subs	r2, #48	; 0x30
 801a084:	9208      	str	r2, [sp, #32]
 801a086:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a088:	920c      	str	r2, [sp, #48]	; 0x30
 801a08a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a08c:	1c57      	adds	r7, r2, #1
 801a08e:	9715      	str	r7, [sp, #84]	; 0x54
 801a090:	7852      	ldrb	r2, [r2, #1]
 801a092:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801a096:	f1be 0f09 	cmp.w	lr, #9
 801a09a:	d938      	bls.n	801a10e <_strtod_l+0x33e>
 801a09c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a09e:	1a7f      	subs	r7, r7, r1
 801a0a0:	2f08      	cmp	r7, #8
 801a0a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801a0a6:	dc03      	bgt.n	801a0b0 <_strtod_l+0x2e0>
 801a0a8:	9908      	ldr	r1, [sp, #32]
 801a0aa:	428f      	cmp	r7, r1
 801a0ac:	bfa8      	it	ge
 801a0ae:	460f      	movge	r7, r1
 801a0b0:	f1bc 0f00 	cmp.w	ip, #0
 801a0b4:	d000      	beq.n	801a0b8 <_strtod_l+0x2e8>
 801a0b6:	427f      	negs	r7, r7
 801a0b8:	2e00      	cmp	r6, #0
 801a0ba:	d14f      	bne.n	801a15c <_strtod_l+0x38c>
 801a0bc:	9904      	ldr	r1, [sp, #16]
 801a0be:	4301      	orrs	r1, r0
 801a0c0:	f47f aec1 	bne.w	8019e46 <_strtod_l+0x76>
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	f47f aedb 	bne.w	8019e80 <_strtod_l+0xb0>
 801a0ca:	2a69      	cmp	r2, #105	; 0x69
 801a0cc:	d029      	beq.n	801a122 <_strtod_l+0x352>
 801a0ce:	dc26      	bgt.n	801a11e <_strtod_l+0x34e>
 801a0d0:	2a49      	cmp	r2, #73	; 0x49
 801a0d2:	d026      	beq.n	801a122 <_strtod_l+0x352>
 801a0d4:	2a4e      	cmp	r2, #78	; 0x4e
 801a0d6:	f47f aed3 	bne.w	8019e80 <_strtod_l+0xb0>
 801a0da:	499b      	ldr	r1, [pc, #620]	; (801a348 <_strtod_l+0x578>)
 801a0dc:	a815      	add	r0, sp, #84	; 0x54
 801a0de:	f002 ff5d 	bl	801cf9c <__match>
 801a0e2:	2800      	cmp	r0, #0
 801a0e4:	f43f aecc 	beq.w	8019e80 <_strtod_l+0xb0>
 801a0e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a0ea:	781b      	ldrb	r3, [r3, #0]
 801a0ec:	2b28      	cmp	r3, #40	; 0x28
 801a0ee:	d12f      	bne.n	801a150 <_strtod_l+0x380>
 801a0f0:	4996      	ldr	r1, [pc, #600]	; (801a34c <_strtod_l+0x57c>)
 801a0f2:	aa18      	add	r2, sp, #96	; 0x60
 801a0f4:	a815      	add	r0, sp, #84	; 0x54
 801a0f6:	f002 ff65 	bl	801cfc4 <__hexnan>
 801a0fa:	2805      	cmp	r0, #5
 801a0fc:	d128      	bne.n	801a150 <_strtod_l+0x380>
 801a0fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a100:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801a104:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801a108:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801a10c:	e69b      	b.n	8019e46 <_strtod_l+0x76>
 801a10e:	9f08      	ldr	r7, [sp, #32]
 801a110:	210a      	movs	r1, #10
 801a112:	fb01 2107 	mla	r1, r1, r7, r2
 801a116:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801a11a:	9208      	str	r2, [sp, #32]
 801a11c:	e7b5      	b.n	801a08a <_strtod_l+0x2ba>
 801a11e:	2a6e      	cmp	r2, #110	; 0x6e
 801a120:	e7d9      	b.n	801a0d6 <_strtod_l+0x306>
 801a122:	498b      	ldr	r1, [pc, #556]	; (801a350 <_strtod_l+0x580>)
 801a124:	a815      	add	r0, sp, #84	; 0x54
 801a126:	f002 ff39 	bl	801cf9c <__match>
 801a12a:	2800      	cmp	r0, #0
 801a12c:	f43f aea8 	beq.w	8019e80 <_strtod_l+0xb0>
 801a130:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a132:	4988      	ldr	r1, [pc, #544]	; (801a354 <_strtod_l+0x584>)
 801a134:	3b01      	subs	r3, #1
 801a136:	a815      	add	r0, sp, #84	; 0x54
 801a138:	9315      	str	r3, [sp, #84]	; 0x54
 801a13a:	f002 ff2f 	bl	801cf9c <__match>
 801a13e:	b910      	cbnz	r0, 801a146 <_strtod_l+0x376>
 801a140:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a142:	3301      	adds	r3, #1
 801a144:	9315      	str	r3, [sp, #84]	; 0x54
 801a146:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801a364 <_strtod_l+0x594>
 801a14a:	f04f 0800 	mov.w	r8, #0
 801a14e:	e67a      	b.n	8019e46 <_strtod_l+0x76>
 801a150:	4881      	ldr	r0, [pc, #516]	; (801a358 <_strtod_l+0x588>)
 801a152:	f001 fdad 	bl	801bcb0 <nan>
 801a156:	ec59 8b10 	vmov	r8, r9, d0
 801a15a:	e674      	b.n	8019e46 <_strtod_l+0x76>
 801a15c:	9b05      	ldr	r3, [sp, #20]
 801a15e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a160:	1afb      	subs	r3, r7, r3
 801a162:	f1bb 0f00 	cmp.w	fp, #0
 801a166:	bf08      	it	eq
 801a168:	46b3      	moveq	fp, r6
 801a16a:	2e10      	cmp	r6, #16
 801a16c:	9308      	str	r3, [sp, #32]
 801a16e:	4635      	mov	r5, r6
 801a170:	bfa8      	it	ge
 801a172:	2510      	movge	r5, #16
 801a174:	f7ec f9ae 	bl	80064d4 <__aeabi_ui2d>
 801a178:	2e09      	cmp	r6, #9
 801a17a:	4680      	mov	r8, r0
 801a17c:	4689      	mov	r9, r1
 801a17e:	dd13      	ble.n	801a1a8 <_strtod_l+0x3d8>
 801a180:	4b76      	ldr	r3, [pc, #472]	; (801a35c <_strtod_l+0x58c>)
 801a182:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a186:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801a18a:	f7ec fa1d 	bl	80065c8 <__aeabi_dmul>
 801a18e:	4680      	mov	r8, r0
 801a190:	4650      	mov	r0, sl
 801a192:	4689      	mov	r9, r1
 801a194:	f7ec f99e 	bl	80064d4 <__aeabi_ui2d>
 801a198:	4602      	mov	r2, r0
 801a19a:	460b      	mov	r3, r1
 801a19c:	4640      	mov	r0, r8
 801a19e:	4649      	mov	r1, r9
 801a1a0:	f7ec f85c 	bl	800625c <__adddf3>
 801a1a4:	4680      	mov	r8, r0
 801a1a6:	4689      	mov	r9, r1
 801a1a8:	2e0f      	cmp	r6, #15
 801a1aa:	dc38      	bgt.n	801a21e <_strtod_l+0x44e>
 801a1ac:	9b08      	ldr	r3, [sp, #32]
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	f43f ae49 	beq.w	8019e46 <_strtod_l+0x76>
 801a1b4:	dd24      	ble.n	801a200 <_strtod_l+0x430>
 801a1b6:	2b16      	cmp	r3, #22
 801a1b8:	dc0b      	bgt.n	801a1d2 <_strtod_l+0x402>
 801a1ba:	4968      	ldr	r1, [pc, #416]	; (801a35c <_strtod_l+0x58c>)
 801a1bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801a1c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a1c4:	4642      	mov	r2, r8
 801a1c6:	464b      	mov	r3, r9
 801a1c8:	f7ec f9fe 	bl	80065c8 <__aeabi_dmul>
 801a1cc:	4680      	mov	r8, r0
 801a1ce:	4689      	mov	r9, r1
 801a1d0:	e639      	b.n	8019e46 <_strtod_l+0x76>
 801a1d2:	9a08      	ldr	r2, [sp, #32]
 801a1d4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 801a1d8:	4293      	cmp	r3, r2
 801a1da:	db20      	blt.n	801a21e <_strtod_l+0x44e>
 801a1dc:	4c5f      	ldr	r4, [pc, #380]	; (801a35c <_strtod_l+0x58c>)
 801a1de:	f1c6 060f 	rsb	r6, r6, #15
 801a1e2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801a1e6:	4642      	mov	r2, r8
 801a1e8:	464b      	mov	r3, r9
 801a1ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a1ee:	f7ec f9eb 	bl	80065c8 <__aeabi_dmul>
 801a1f2:	9b08      	ldr	r3, [sp, #32]
 801a1f4:	1b9e      	subs	r6, r3, r6
 801a1f6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801a1fa:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a1fe:	e7e3      	b.n	801a1c8 <_strtod_l+0x3f8>
 801a200:	9b08      	ldr	r3, [sp, #32]
 801a202:	3316      	adds	r3, #22
 801a204:	db0b      	blt.n	801a21e <_strtod_l+0x44e>
 801a206:	9b05      	ldr	r3, [sp, #20]
 801a208:	1bdf      	subs	r7, r3, r7
 801a20a:	4b54      	ldr	r3, [pc, #336]	; (801a35c <_strtod_l+0x58c>)
 801a20c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801a210:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a214:	4640      	mov	r0, r8
 801a216:	4649      	mov	r1, r9
 801a218:	f7ec fb00 	bl	800681c <__aeabi_ddiv>
 801a21c:	e7d6      	b.n	801a1cc <_strtod_l+0x3fc>
 801a21e:	9b08      	ldr	r3, [sp, #32]
 801a220:	1b75      	subs	r5, r6, r5
 801a222:	441d      	add	r5, r3
 801a224:	2d00      	cmp	r5, #0
 801a226:	dd70      	ble.n	801a30a <_strtod_l+0x53a>
 801a228:	f015 030f 	ands.w	r3, r5, #15
 801a22c:	d00a      	beq.n	801a244 <_strtod_l+0x474>
 801a22e:	494b      	ldr	r1, [pc, #300]	; (801a35c <_strtod_l+0x58c>)
 801a230:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801a234:	4642      	mov	r2, r8
 801a236:	464b      	mov	r3, r9
 801a238:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a23c:	f7ec f9c4 	bl	80065c8 <__aeabi_dmul>
 801a240:	4680      	mov	r8, r0
 801a242:	4689      	mov	r9, r1
 801a244:	f035 050f 	bics.w	r5, r5, #15
 801a248:	d04d      	beq.n	801a2e6 <_strtod_l+0x516>
 801a24a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801a24e:	dd22      	ble.n	801a296 <_strtod_l+0x4c6>
 801a250:	2500      	movs	r5, #0
 801a252:	46ab      	mov	fp, r5
 801a254:	9509      	str	r5, [sp, #36]	; 0x24
 801a256:	9505      	str	r5, [sp, #20]
 801a258:	2322      	movs	r3, #34	; 0x22
 801a25a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801a364 <_strtod_l+0x594>
 801a25e:	6023      	str	r3, [r4, #0]
 801a260:	f04f 0800 	mov.w	r8, #0
 801a264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a266:	2b00      	cmp	r3, #0
 801a268:	f43f aded 	beq.w	8019e46 <_strtod_l+0x76>
 801a26c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a26e:	4620      	mov	r0, r4
 801a270:	f002 ff96 	bl	801d1a0 <_Bfree>
 801a274:	9905      	ldr	r1, [sp, #20]
 801a276:	4620      	mov	r0, r4
 801a278:	f002 ff92 	bl	801d1a0 <_Bfree>
 801a27c:	4659      	mov	r1, fp
 801a27e:	4620      	mov	r0, r4
 801a280:	f002 ff8e 	bl	801d1a0 <_Bfree>
 801a284:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a286:	4620      	mov	r0, r4
 801a288:	f002 ff8a 	bl	801d1a0 <_Bfree>
 801a28c:	4629      	mov	r1, r5
 801a28e:	4620      	mov	r0, r4
 801a290:	f002 ff86 	bl	801d1a0 <_Bfree>
 801a294:	e5d7      	b.n	8019e46 <_strtod_l+0x76>
 801a296:	4b32      	ldr	r3, [pc, #200]	; (801a360 <_strtod_l+0x590>)
 801a298:	9304      	str	r3, [sp, #16]
 801a29a:	2300      	movs	r3, #0
 801a29c:	112d      	asrs	r5, r5, #4
 801a29e:	4640      	mov	r0, r8
 801a2a0:	4649      	mov	r1, r9
 801a2a2:	469a      	mov	sl, r3
 801a2a4:	2d01      	cmp	r5, #1
 801a2a6:	dc21      	bgt.n	801a2ec <_strtod_l+0x51c>
 801a2a8:	b10b      	cbz	r3, 801a2ae <_strtod_l+0x4de>
 801a2aa:	4680      	mov	r8, r0
 801a2ac:	4689      	mov	r9, r1
 801a2ae:	492c      	ldr	r1, [pc, #176]	; (801a360 <_strtod_l+0x590>)
 801a2b0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801a2b4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801a2b8:	4642      	mov	r2, r8
 801a2ba:	464b      	mov	r3, r9
 801a2bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a2c0:	f7ec f982 	bl	80065c8 <__aeabi_dmul>
 801a2c4:	4b27      	ldr	r3, [pc, #156]	; (801a364 <_strtod_l+0x594>)
 801a2c6:	460a      	mov	r2, r1
 801a2c8:	400b      	ands	r3, r1
 801a2ca:	4927      	ldr	r1, [pc, #156]	; (801a368 <_strtod_l+0x598>)
 801a2cc:	428b      	cmp	r3, r1
 801a2ce:	4680      	mov	r8, r0
 801a2d0:	d8be      	bhi.n	801a250 <_strtod_l+0x480>
 801a2d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801a2d6:	428b      	cmp	r3, r1
 801a2d8:	bf86      	itte	hi
 801a2da:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801a36c <_strtod_l+0x59c>
 801a2de:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 801a2e2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801a2e6:	2300      	movs	r3, #0
 801a2e8:	9304      	str	r3, [sp, #16]
 801a2ea:	e07b      	b.n	801a3e4 <_strtod_l+0x614>
 801a2ec:	07ea      	lsls	r2, r5, #31
 801a2ee:	d505      	bpl.n	801a2fc <_strtod_l+0x52c>
 801a2f0:	9b04      	ldr	r3, [sp, #16]
 801a2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2f6:	f7ec f967 	bl	80065c8 <__aeabi_dmul>
 801a2fa:	2301      	movs	r3, #1
 801a2fc:	9a04      	ldr	r2, [sp, #16]
 801a2fe:	3208      	adds	r2, #8
 801a300:	f10a 0a01 	add.w	sl, sl, #1
 801a304:	106d      	asrs	r5, r5, #1
 801a306:	9204      	str	r2, [sp, #16]
 801a308:	e7cc      	b.n	801a2a4 <_strtod_l+0x4d4>
 801a30a:	d0ec      	beq.n	801a2e6 <_strtod_l+0x516>
 801a30c:	426d      	negs	r5, r5
 801a30e:	f015 020f 	ands.w	r2, r5, #15
 801a312:	d00a      	beq.n	801a32a <_strtod_l+0x55a>
 801a314:	4b11      	ldr	r3, [pc, #68]	; (801a35c <_strtod_l+0x58c>)
 801a316:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a31a:	4640      	mov	r0, r8
 801a31c:	4649      	mov	r1, r9
 801a31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a322:	f7ec fa7b 	bl	800681c <__aeabi_ddiv>
 801a326:	4680      	mov	r8, r0
 801a328:	4689      	mov	r9, r1
 801a32a:	112d      	asrs	r5, r5, #4
 801a32c:	d0db      	beq.n	801a2e6 <_strtod_l+0x516>
 801a32e:	2d1f      	cmp	r5, #31
 801a330:	dd1e      	ble.n	801a370 <_strtod_l+0x5a0>
 801a332:	2500      	movs	r5, #0
 801a334:	46ab      	mov	fp, r5
 801a336:	9509      	str	r5, [sp, #36]	; 0x24
 801a338:	9505      	str	r5, [sp, #20]
 801a33a:	2322      	movs	r3, #34	; 0x22
 801a33c:	f04f 0800 	mov.w	r8, #0
 801a340:	f04f 0900 	mov.w	r9, #0
 801a344:	6023      	str	r3, [r4, #0]
 801a346:	e78d      	b.n	801a264 <_strtod_l+0x494>
 801a348:	08024916 	.word	0x08024916
 801a34c:	080247c8 	.word	0x080247c8
 801a350:	0802490e 	.word	0x0802490e
 801a354:	08024948 	.word	0x08024948
 801a358:	08024bd8 	.word	0x08024bd8
 801a35c:	08024ab8 	.word	0x08024ab8
 801a360:	08024a90 	.word	0x08024a90
 801a364:	7ff00000 	.word	0x7ff00000
 801a368:	7ca00000 	.word	0x7ca00000
 801a36c:	7fefffff 	.word	0x7fefffff
 801a370:	f015 0310 	ands.w	r3, r5, #16
 801a374:	bf18      	it	ne
 801a376:	236a      	movne	r3, #106	; 0x6a
 801a378:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801a71c <_strtod_l+0x94c>
 801a37c:	9304      	str	r3, [sp, #16]
 801a37e:	4640      	mov	r0, r8
 801a380:	4649      	mov	r1, r9
 801a382:	2300      	movs	r3, #0
 801a384:	07ea      	lsls	r2, r5, #31
 801a386:	d504      	bpl.n	801a392 <_strtod_l+0x5c2>
 801a388:	e9da 2300 	ldrd	r2, r3, [sl]
 801a38c:	f7ec f91c 	bl	80065c8 <__aeabi_dmul>
 801a390:	2301      	movs	r3, #1
 801a392:	106d      	asrs	r5, r5, #1
 801a394:	f10a 0a08 	add.w	sl, sl, #8
 801a398:	d1f4      	bne.n	801a384 <_strtod_l+0x5b4>
 801a39a:	b10b      	cbz	r3, 801a3a0 <_strtod_l+0x5d0>
 801a39c:	4680      	mov	r8, r0
 801a39e:	4689      	mov	r9, r1
 801a3a0:	9b04      	ldr	r3, [sp, #16]
 801a3a2:	b1bb      	cbz	r3, 801a3d4 <_strtod_l+0x604>
 801a3a4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801a3a8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	4649      	mov	r1, r9
 801a3b0:	dd10      	ble.n	801a3d4 <_strtod_l+0x604>
 801a3b2:	2b1f      	cmp	r3, #31
 801a3b4:	f340 811e 	ble.w	801a5f4 <_strtod_l+0x824>
 801a3b8:	2b34      	cmp	r3, #52	; 0x34
 801a3ba:	bfde      	ittt	le
 801a3bc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 801a3c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801a3c4:	4093      	lslle	r3, r2
 801a3c6:	f04f 0800 	mov.w	r8, #0
 801a3ca:	bfcc      	ite	gt
 801a3cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801a3d0:	ea03 0901 	andle.w	r9, r3, r1
 801a3d4:	2200      	movs	r2, #0
 801a3d6:	2300      	movs	r3, #0
 801a3d8:	4640      	mov	r0, r8
 801a3da:	4649      	mov	r1, r9
 801a3dc:	f7ec fb5c 	bl	8006a98 <__aeabi_dcmpeq>
 801a3e0:	2800      	cmp	r0, #0
 801a3e2:	d1a6      	bne.n	801a332 <_strtod_l+0x562>
 801a3e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a3e6:	9300      	str	r3, [sp, #0]
 801a3e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a3ea:	4633      	mov	r3, r6
 801a3ec:	465a      	mov	r2, fp
 801a3ee:	4620      	mov	r0, r4
 801a3f0:	f002 ff3e 	bl	801d270 <__s2b>
 801a3f4:	9009      	str	r0, [sp, #36]	; 0x24
 801a3f6:	2800      	cmp	r0, #0
 801a3f8:	f43f af2a 	beq.w	801a250 <_strtod_l+0x480>
 801a3fc:	9a08      	ldr	r2, [sp, #32]
 801a3fe:	9b05      	ldr	r3, [sp, #20]
 801a400:	2a00      	cmp	r2, #0
 801a402:	eba3 0307 	sub.w	r3, r3, r7
 801a406:	bfa8      	it	ge
 801a408:	2300      	movge	r3, #0
 801a40a:	930c      	str	r3, [sp, #48]	; 0x30
 801a40c:	2500      	movs	r5, #0
 801a40e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801a412:	9312      	str	r3, [sp, #72]	; 0x48
 801a414:	46ab      	mov	fp, r5
 801a416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a418:	4620      	mov	r0, r4
 801a41a:	6859      	ldr	r1, [r3, #4]
 801a41c:	f002 fe80 	bl	801d120 <_Balloc>
 801a420:	9005      	str	r0, [sp, #20]
 801a422:	2800      	cmp	r0, #0
 801a424:	f43f af18 	beq.w	801a258 <_strtod_l+0x488>
 801a428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a42a:	691a      	ldr	r2, [r3, #16]
 801a42c:	3202      	adds	r2, #2
 801a42e:	f103 010c 	add.w	r1, r3, #12
 801a432:	0092      	lsls	r2, r2, #2
 801a434:	300c      	adds	r0, #12
 801a436:	f001 fc2a 	bl	801bc8e <memcpy>
 801a43a:	ec49 8b10 	vmov	d0, r8, r9
 801a43e:	aa18      	add	r2, sp, #96	; 0x60
 801a440:	a917      	add	r1, sp, #92	; 0x5c
 801a442:	4620      	mov	r0, r4
 801a444:	f003 fa48 	bl	801d8d8 <__d2b>
 801a448:	ec49 8b18 	vmov	d8, r8, r9
 801a44c:	9016      	str	r0, [sp, #88]	; 0x58
 801a44e:	2800      	cmp	r0, #0
 801a450:	f43f af02 	beq.w	801a258 <_strtod_l+0x488>
 801a454:	2101      	movs	r1, #1
 801a456:	4620      	mov	r0, r4
 801a458:	f002 ffa2 	bl	801d3a0 <__i2b>
 801a45c:	4683      	mov	fp, r0
 801a45e:	2800      	cmp	r0, #0
 801a460:	f43f aefa 	beq.w	801a258 <_strtod_l+0x488>
 801a464:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801a466:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a468:	2e00      	cmp	r6, #0
 801a46a:	bfab      	itete	ge
 801a46c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801a46e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 801a470:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801a472:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801a476:	bfac      	ite	ge
 801a478:	eb06 0a03 	addge.w	sl, r6, r3
 801a47c:	1b9f      	sublt	r7, r3, r6
 801a47e:	9b04      	ldr	r3, [sp, #16]
 801a480:	1af6      	subs	r6, r6, r3
 801a482:	4416      	add	r6, r2
 801a484:	4ba0      	ldr	r3, [pc, #640]	; (801a708 <_strtod_l+0x938>)
 801a486:	3e01      	subs	r6, #1
 801a488:	429e      	cmp	r6, r3
 801a48a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801a48e:	f280 80c4 	bge.w	801a61a <_strtod_l+0x84a>
 801a492:	1b9b      	subs	r3, r3, r6
 801a494:	2b1f      	cmp	r3, #31
 801a496:	eba2 0203 	sub.w	r2, r2, r3
 801a49a:	f04f 0101 	mov.w	r1, #1
 801a49e:	f300 80b0 	bgt.w	801a602 <_strtod_l+0x832>
 801a4a2:	fa01 f303 	lsl.w	r3, r1, r3
 801a4a6:	930e      	str	r3, [sp, #56]	; 0x38
 801a4a8:	2300      	movs	r3, #0
 801a4aa:	930d      	str	r3, [sp, #52]	; 0x34
 801a4ac:	eb0a 0602 	add.w	r6, sl, r2
 801a4b0:	9b04      	ldr	r3, [sp, #16]
 801a4b2:	45b2      	cmp	sl, r6
 801a4b4:	4417      	add	r7, r2
 801a4b6:	441f      	add	r7, r3
 801a4b8:	4653      	mov	r3, sl
 801a4ba:	bfa8      	it	ge
 801a4bc:	4633      	movge	r3, r6
 801a4be:	42bb      	cmp	r3, r7
 801a4c0:	bfa8      	it	ge
 801a4c2:	463b      	movge	r3, r7
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	bfc2      	ittt	gt
 801a4c8:	1af6      	subgt	r6, r6, r3
 801a4ca:	1aff      	subgt	r7, r7, r3
 801a4cc:	ebaa 0a03 	subgt.w	sl, sl, r3
 801a4d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	dd17      	ble.n	801a506 <_strtod_l+0x736>
 801a4d6:	4659      	mov	r1, fp
 801a4d8:	461a      	mov	r2, r3
 801a4da:	4620      	mov	r0, r4
 801a4dc:	f003 f820 	bl	801d520 <__pow5mult>
 801a4e0:	4683      	mov	fp, r0
 801a4e2:	2800      	cmp	r0, #0
 801a4e4:	f43f aeb8 	beq.w	801a258 <_strtod_l+0x488>
 801a4e8:	4601      	mov	r1, r0
 801a4ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a4ec:	4620      	mov	r0, r4
 801a4ee:	f002 ff6d 	bl	801d3cc <__multiply>
 801a4f2:	900b      	str	r0, [sp, #44]	; 0x2c
 801a4f4:	2800      	cmp	r0, #0
 801a4f6:	f43f aeaf 	beq.w	801a258 <_strtod_l+0x488>
 801a4fa:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a4fc:	4620      	mov	r0, r4
 801a4fe:	f002 fe4f 	bl	801d1a0 <_Bfree>
 801a502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a504:	9316      	str	r3, [sp, #88]	; 0x58
 801a506:	2e00      	cmp	r6, #0
 801a508:	f300 808c 	bgt.w	801a624 <_strtod_l+0x854>
 801a50c:	9b08      	ldr	r3, [sp, #32]
 801a50e:	2b00      	cmp	r3, #0
 801a510:	dd08      	ble.n	801a524 <_strtod_l+0x754>
 801a512:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a514:	9905      	ldr	r1, [sp, #20]
 801a516:	4620      	mov	r0, r4
 801a518:	f003 f802 	bl	801d520 <__pow5mult>
 801a51c:	9005      	str	r0, [sp, #20]
 801a51e:	2800      	cmp	r0, #0
 801a520:	f43f ae9a 	beq.w	801a258 <_strtod_l+0x488>
 801a524:	2f00      	cmp	r7, #0
 801a526:	dd08      	ble.n	801a53a <_strtod_l+0x76a>
 801a528:	9905      	ldr	r1, [sp, #20]
 801a52a:	463a      	mov	r2, r7
 801a52c:	4620      	mov	r0, r4
 801a52e:	f003 f851 	bl	801d5d4 <__lshift>
 801a532:	9005      	str	r0, [sp, #20]
 801a534:	2800      	cmp	r0, #0
 801a536:	f43f ae8f 	beq.w	801a258 <_strtod_l+0x488>
 801a53a:	f1ba 0f00 	cmp.w	sl, #0
 801a53e:	dd08      	ble.n	801a552 <_strtod_l+0x782>
 801a540:	4659      	mov	r1, fp
 801a542:	4652      	mov	r2, sl
 801a544:	4620      	mov	r0, r4
 801a546:	f003 f845 	bl	801d5d4 <__lshift>
 801a54a:	4683      	mov	fp, r0
 801a54c:	2800      	cmp	r0, #0
 801a54e:	f43f ae83 	beq.w	801a258 <_strtod_l+0x488>
 801a552:	9a05      	ldr	r2, [sp, #20]
 801a554:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a556:	4620      	mov	r0, r4
 801a558:	f003 f8c4 	bl	801d6e4 <__mdiff>
 801a55c:	4605      	mov	r5, r0
 801a55e:	2800      	cmp	r0, #0
 801a560:	f43f ae7a 	beq.w	801a258 <_strtod_l+0x488>
 801a564:	68c3      	ldr	r3, [r0, #12]
 801a566:	930b      	str	r3, [sp, #44]	; 0x2c
 801a568:	2300      	movs	r3, #0
 801a56a:	60c3      	str	r3, [r0, #12]
 801a56c:	4659      	mov	r1, fp
 801a56e:	f003 f89d 	bl	801d6ac <__mcmp>
 801a572:	2800      	cmp	r0, #0
 801a574:	da60      	bge.n	801a638 <_strtod_l+0x868>
 801a576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a578:	ea53 0308 	orrs.w	r3, r3, r8
 801a57c:	f040 8084 	bne.w	801a688 <_strtod_l+0x8b8>
 801a580:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a584:	2b00      	cmp	r3, #0
 801a586:	d17f      	bne.n	801a688 <_strtod_l+0x8b8>
 801a588:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a58c:	0d1b      	lsrs	r3, r3, #20
 801a58e:	051b      	lsls	r3, r3, #20
 801a590:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801a594:	d978      	bls.n	801a688 <_strtod_l+0x8b8>
 801a596:	696b      	ldr	r3, [r5, #20]
 801a598:	b913      	cbnz	r3, 801a5a0 <_strtod_l+0x7d0>
 801a59a:	692b      	ldr	r3, [r5, #16]
 801a59c:	2b01      	cmp	r3, #1
 801a59e:	dd73      	ble.n	801a688 <_strtod_l+0x8b8>
 801a5a0:	4629      	mov	r1, r5
 801a5a2:	2201      	movs	r2, #1
 801a5a4:	4620      	mov	r0, r4
 801a5a6:	f003 f815 	bl	801d5d4 <__lshift>
 801a5aa:	4659      	mov	r1, fp
 801a5ac:	4605      	mov	r5, r0
 801a5ae:	f003 f87d 	bl	801d6ac <__mcmp>
 801a5b2:	2800      	cmp	r0, #0
 801a5b4:	dd68      	ble.n	801a688 <_strtod_l+0x8b8>
 801a5b6:	9904      	ldr	r1, [sp, #16]
 801a5b8:	4a54      	ldr	r2, [pc, #336]	; (801a70c <_strtod_l+0x93c>)
 801a5ba:	464b      	mov	r3, r9
 801a5bc:	2900      	cmp	r1, #0
 801a5be:	f000 8084 	beq.w	801a6ca <_strtod_l+0x8fa>
 801a5c2:	ea02 0109 	and.w	r1, r2, r9
 801a5c6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801a5ca:	dc7e      	bgt.n	801a6ca <_strtod_l+0x8fa>
 801a5cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801a5d0:	f77f aeb3 	ble.w	801a33a <_strtod_l+0x56a>
 801a5d4:	4b4e      	ldr	r3, [pc, #312]	; (801a710 <_strtod_l+0x940>)
 801a5d6:	4640      	mov	r0, r8
 801a5d8:	4649      	mov	r1, r9
 801a5da:	2200      	movs	r2, #0
 801a5dc:	f7eb fff4 	bl	80065c8 <__aeabi_dmul>
 801a5e0:	4b4a      	ldr	r3, [pc, #296]	; (801a70c <_strtod_l+0x93c>)
 801a5e2:	400b      	ands	r3, r1
 801a5e4:	4680      	mov	r8, r0
 801a5e6:	4689      	mov	r9, r1
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	f47f ae3f 	bne.w	801a26c <_strtod_l+0x49c>
 801a5ee:	2322      	movs	r3, #34	; 0x22
 801a5f0:	6023      	str	r3, [r4, #0]
 801a5f2:	e63b      	b.n	801a26c <_strtod_l+0x49c>
 801a5f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a5f8:	fa02 f303 	lsl.w	r3, r2, r3
 801a5fc:	ea03 0808 	and.w	r8, r3, r8
 801a600:	e6e8      	b.n	801a3d4 <_strtod_l+0x604>
 801a602:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801a606:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801a60a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801a60e:	36e2      	adds	r6, #226	; 0xe2
 801a610:	fa01 f306 	lsl.w	r3, r1, r6
 801a614:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 801a618:	e748      	b.n	801a4ac <_strtod_l+0x6dc>
 801a61a:	2100      	movs	r1, #0
 801a61c:	2301      	movs	r3, #1
 801a61e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801a622:	e743      	b.n	801a4ac <_strtod_l+0x6dc>
 801a624:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a626:	4632      	mov	r2, r6
 801a628:	4620      	mov	r0, r4
 801a62a:	f002 ffd3 	bl	801d5d4 <__lshift>
 801a62e:	9016      	str	r0, [sp, #88]	; 0x58
 801a630:	2800      	cmp	r0, #0
 801a632:	f47f af6b 	bne.w	801a50c <_strtod_l+0x73c>
 801a636:	e60f      	b.n	801a258 <_strtod_l+0x488>
 801a638:	46ca      	mov	sl, r9
 801a63a:	d171      	bne.n	801a720 <_strtod_l+0x950>
 801a63c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a63e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a642:	b352      	cbz	r2, 801a69a <_strtod_l+0x8ca>
 801a644:	4a33      	ldr	r2, [pc, #204]	; (801a714 <_strtod_l+0x944>)
 801a646:	4293      	cmp	r3, r2
 801a648:	d12a      	bne.n	801a6a0 <_strtod_l+0x8d0>
 801a64a:	9b04      	ldr	r3, [sp, #16]
 801a64c:	4641      	mov	r1, r8
 801a64e:	b1fb      	cbz	r3, 801a690 <_strtod_l+0x8c0>
 801a650:	4b2e      	ldr	r3, [pc, #184]	; (801a70c <_strtod_l+0x93c>)
 801a652:	ea09 0303 	and.w	r3, r9, r3
 801a656:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801a65a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a65e:	d81a      	bhi.n	801a696 <_strtod_l+0x8c6>
 801a660:	0d1b      	lsrs	r3, r3, #20
 801a662:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a666:	fa02 f303 	lsl.w	r3, r2, r3
 801a66a:	4299      	cmp	r1, r3
 801a66c:	d118      	bne.n	801a6a0 <_strtod_l+0x8d0>
 801a66e:	4b2a      	ldr	r3, [pc, #168]	; (801a718 <_strtod_l+0x948>)
 801a670:	459a      	cmp	sl, r3
 801a672:	d102      	bne.n	801a67a <_strtod_l+0x8aa>
 801a674:	3101      	adds	r1, #1
 801a676:	f43f adef 	beq.w	801a258 <_strtod_l+0x488>
 801a67a:	4b24      	ldr	r3, [pc, #144]	; (801a70c <_strtod_l+0x93c>)
 801a67c:	ea0a 0303 	and.w	r3, sl, r3
 801a680:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801a684:	f04f 0800 	mov.w	r8, #0
 801a688:	9b04      	ldr	r3, [sp, #16]
 801a68a:	2b00      	cmp	r3, #0
 801a68c:	d1a2      	bne.n	801a5d4 <_strtod_l+0x804>
 801a68e:	e5ed      	b.n	801a26c <_strtod_l+0x49c>
 801a690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a694:	e7e9      	b.n	801a66a <_strtod_l+0x89a>
 801a696:	4613      	mov	r3, r2
 801a698:	e7e7      	b.n	801a66a <_strtod_l+0x89a>
 801a69a:	ea53 0308 	orrs.w	r3, r3, r8
 801a69e:	d08a      	beq.n	801a5b6 <_strtod_l+0x7e6>
 801a6a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a6a2:	b1e3      	cbz	r3, 801a6de <_strtod_l+0x90e>
 801a6a4:	ea13 0f0a 	tst.w	r3, sl
 801a6a8:	d0ee      	beq.n	801a688 <_strtod_l+0x8b8>
 801a6aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a6ac:	9a04      	ldr	r2, [sp, #16]
 801a6ae:	4640      	mov	r0, r8
 801a6b0:	4649      	mov	r1, r9
 801a6b2:	b1c3      	cbz	r3, 801a6e6 <_strtod_l+0x916>
 801a6b4:	f7ff fb6f 	bl	8019d96 <sulp>
 801a6b8:	4602      	mov	r2, r0
 801a6ba:	460b      	mov	r3, r1
 801a6bc:	ec51 0b18 	vmov	r0, r1, d8
 801a6c0:	f7eb fdcc 	bl	800625c <__adddf3>
 801a6c4:	4680      	mov	r8, r0
 801a6c6:	4689      	mov	r9, r1
 801a6c8:	e7de      	b.n	801a688 <_strtod_l+0x8b8>
 801a6ca:	4013      	ands	r3, r2
 801a6cc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801a6d0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801a6d4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801a6d8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801a6dc:	e7d4      	b.n	801a688 <_strtod_l+0x8b8>
 801a6de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a6e0:	ea13 0f08 	tst.w	r3, r8
 801a6e4:	e7e0      	b.n	801a6a8 <_strtod_l+0x8d8>
 801a6e6:	f7ff fb56 	bl	8019d96 <sulp>
 801a6ea:	4602      	mov	r2, r0
 801a6ec:	460b      	mov	r3, r1
 801a6ee:	ec51 0b18 	vmov	r0, r1, d8
 801a6f2:	f7eb fdb1 	bl	8006258 <__aeabi_dsub>
 801a6f6:	2200      	movs	r2, #0
 801a6f8:	2300      	movs	r3, #0
 801a6fa:	4680      	mov	r8, r0
 801a6fc:	4689      	mov	r9, r1
 801a6fe:	f7ec f9cb 	bl	8006a98 <__aeabi_dcmpeq>
 801a702:	2800      	cmp	r0, #0
 801a704:	d0c0      	beq.n	801a688 <_strtod_l+0x8b8>
 801a706:	e618      	b.n	801a33a <_strtod_l+0x56a>
 801a708:	fffffc02 	.word	0xfffffc02
 801a70c:	7ff00000 	.word	0x7ff00000
 801a710:	39500000 	.word	0x39500000
 801a714:	000fffff 	.word	0x000fffff
 801a718:	7fefffff 	.word	0x7fefffff
 801a71c:	080247e0 	.word	0x080247e0
 801a720:	4659      	mov	r1, fp
 801a722:	4628      	mov	r0, r5
 801a724:	f003 f932 	bl	801d98c <__ratio>
 801a728:	ec57 6b10 	vmov	r6, r7, d0
 801a72c:	ee10 0a10 	vmov	r0, s0
 801a730:	2200      	movs	r2, #0
 801a732:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a736:	4639      	mov	r1, r7
 801a738:	f7ec f9c2 	bl	8006ac0 <__aeabi_dcmple>
 801a73c:	2800      	cmp	r0, #0
 801a73e:	d071      	beq.n	801a824 <_strtod_l+0xa54>
 801a740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a742:	2b00      	cmp	r3, #0
 801a744:	d17c      	bne.n	801a840 <_strtod_l+0xa70>
 801a746:	f1b8 0f00 	cmp.w	r8, #0
 801a74a:	d15a      	bne.n	801a802 <_strtod_l+0xa32>
 801a74c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a750:	2b00      	cmp	r3, #0
 801a752:	d15d      	bne.n	801a810 <_strtod_l+0xa40>
 801a754:	4b90      	ldr	r3, [pc, #576]	; (801a998 <_strtod_l+0xbc8>)
 801a756:	2200      	movs	r2, #0
 801a758:	4630      	mov	r0, r6
 801a75a:	4639      	mov	r1, r7
 801a75c:	f7ec f9a6 	bl	8006aac <__aeabi_dcmplt>
 801a760:	2800      	cmp	r0, #0
 801a762:	d15c      	bne.n	801a81e <_strtod_l+0xa4e>
 801a764:	4630      	mov	r0, r6
 801a766:	4639      	mov	r1, r7
 801a768:	4b8c      	ldr	r3, [pc, #560]	; (801a99c <_strtod_l+0xbcc>)
 801a76a:	2200      	movs	r2, #0
 801a76c:	f7eb ff2c 	bl	80065c8 <__aeabi_dmul>
 801a770:	4606      	mov	r6, r0
 801a772:	460f      	mov	r7, r1
 801a774:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801a778:	9606      	str	r6, [sp, #24]
 801a77a:	9307      	str	r3, [sp, #28]
 801a77c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a780:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801a784:	4b86      	ldr	r3, [pc, #536]	; (801a9a0 <_strtod_l+0xbd0>)
 801a786:	ea0a 0303 	and.w	r3, sl, r3
 801a78a:	930d      	str	r3, [sp, #52]	; 0x34
 801a78c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a78e:	4b85      	ldr	r3, [pc, #532]	; (801a9a4 <_strtod_l+0xbd4>)
 801a790:	429a      	cmp	r2, r3
 801a792:	f040 8090 	bne.w	801a8b6 <_strtod_l+0xae6>
 801a796:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801a79a:	ec49 8b10 	vmov	d0, r8, r9
 801a79e:	f003 f82b 	bl	801d7f8 <__ulp>
 801a7a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a7a6:	ec51 0b10 	vmov	r0, r1, d0
 801a7aa:	f7eb ff0d 	bl	80065c8 <__aeabi_dmul>
 801a7ae:	4642      	mov	r2, r8
 801a7b0:	464b      	mov	r3, r9
 801a7b2:	f7eb fd53 	bl	800625c <__adddf3>
 801a7b6:	460b      	mov	r3, r1
 801a7b8:	4979      	ldr	r1, [pc, #484]	; (801a9a0 <_strtod_l+0xbd0>)
 801a7ba:	4a7b      	ldr	r2, [pc, #492]	; (801a9a8 <_strtod_l+0xbd8>)
 801a7bc:	4019      	ands	r1, r3
 801a7be:	4291      	cmp	r1, r2
 801a7c0:	4680      	mov	r8, r0
 801a7c2:	d944      	bls.n	801a84e <_strtod_l+0xa7e>
 801a7c4:	ee18 2a90 	vmov	r2, s17
 801a7c8:	4b78      	ldr	r3, [pc, #480]	; (801a9ac <_strtod_l+0xbdc>)
 801a7ca:	429a      	cmp	r2, r3
 801a7cc:	d104      	bne.n	801a7d8 <_strtod_l+0xa08>
 801a7ce:	ee18 3a10 	vmov	r3, s16
 801a7d2:	3301      	adds	r3, #1
 801a7d4:	f43f ad40 	beq.w	801a258 <_strtod_l+0x488>
 801a7d8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801a9ac <_strtod_l+0xbdc>
 801a7dc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801a7e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a7e2:	4620      	mov	r0, r4
 801a7e4:	f002 fcdc 	bl	801d1a0 <_Bfree>
 801a7e8:	9905      	ldr	r1, [sp, #20]
 801a7ea:	4620      	mov	r0, r4
 801a7ec:	f002 fcd8 	bl	801d1a0 <_Bfree>
 801a7f0:	4659      	mov	r1, fp
 801a7f2:	4620      	mov	r0, r4
 801a7f4:	f002 fcd4 	bl	801d1a0 <_Bfree>
 801a7f8:	4629      	mov	r1, r5
 801a7fa:	4620      	mov	r0, r4
 801a7fc:	f002 fcd0 	bl	801d1a0 <_Bfree>
 801a800:	e609      	b.n	801a416 <_strtod_l+0x646>
 801a802:	f1b8 0f01 	cmp.w	r8, #1
 801a806:	d103      	bne.n	801a810 <_strtod_l+0xa40>
 801a808:	f1b9 0f00 	cmp.w	r9, #0
 801a80c:	f43f ad95 	beq.w	801a33a <_strtod_l+0x56a>
 801a810:	ed9f 7b55 	vldr	d7, [pc, #340]	; 801a968 <_strtod_l+0xb98>
 801a814:	4f60      	ldr	r7, [pc, #384]	; (801a998 <_strtod_l+0xbc8>)
 801a816:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a81a:	2600      	movs	r6, #0
 801a81c:	e7ae      	b.n	801a77c <_strtod_l+0x9ac>
 801a81e:	4f5f      	ldr	r7, [pc, #380]	; (801a99c <_strtod_l+0xbcc>)
 801a820:	2600      	movs	r6, #0
 801a822:	e7a7      	b.n	801a774 <_strtod_l+0x9a4>
 801a824:	4b5d      	ldr	r3, [pc, #372]	; (801a99c <_strtod_l+0xbcc>)
 801a826:	4630      	mov	r0, r6
 801a828:	4639      	mov	r1, r7
 801a82a:	2200      	movs	r2, #0
 801a82c:	f7eb fecc 	bl	80065c8 <__aeabi_dmul>
 801a830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a832:	4606      	mov	r6, r0
 801a834:	460f      	mov	r7, r1
 801a836:	2b00      	cmp	r3, #0
 801a838:	d09c      	beq.n	801a774 <_strtod_l+0x9a4>
 801a83a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801a83e:	e79d      	b.n	801a77c <_strtod_l+0x9ac>
 801a840:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 801a970 <_strtod_l+0xba0>
 801a844:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a848:	ec57 6b17 	vmov	r6, r7, d7
 801a84c:	e796      	b.n	801a77c <_strtod_l+0x9ac>
 801a84e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801a852:	9b04      	ldr	r3, [sp, #16]
 801a854:	46ca      	mov	sl, r9
 801a856:	2b00      	cmp	r3, #0
 801a858:	d1c2      	bne.n	801a7e0 <_strtod_l+0xa10>
 801a85a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a85e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a860:	0d1b      	lsrs	r3, r3, #20
 801a862:	051b      	lsls	r3, r3, #20
 801a864:	429a      	cmp	r2, r3
 801a866:	d1bb      	bne.n	801a7e0 <_strtod_l+0xa10>
 801a868:	4630      	mov	r0, r6
 801a86a:	4639      	mov	r1, r7
 801a86c:	f7ec f9bc 	bl	8006be8 <__aeabi_d2lz>
 801a870:	f7eb fe7c 	bl	800656c <__aeabi_l2d>
 801a874:	4602      	mov	r2, r0
 801a876:	460b      	mov	r3, r1
 801a878:	4630      	mov	r0, r6
 801a87a:	4639      	mov	r1, r7
 801a87c:	f7eb fcec 	bl	8006258 <__aeabi_dsub>
 801a880:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a882:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a886:	ea43 0308 	orr.w	r3, r3, r8
 801a88a:	4313      	orrs	r3, r2
 801a88c:	4606      	mov	r6, r0
 801a88e:	460f      	mov	r7, r1
 801a890:	d054      	beq.n	801a93c <_strtod_l+0xb6c>
 801a892:	a339      	add	r3, pc, #228	; (adr r3, 801a978 <_strtod_l+0xba8>)
 801a894:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a898:	f7ec f908 	bl	8006aac <__aeabi_dcmplt>
 801a89c:	2800      	cmp	r0, #0
 801a89e:	f47f ace5 	bne.w	801a26c <_strtod_l+0x49c>
 801a8a2:	a337      	add	r3, pc, #220	; (adr r3, 801a980 <_strtod_l+0xbb0>)
 801a8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8a8:	4630      	mov	r0, r6
 801a8aa:	4639      	mov	r1, r7
 801a8ac:	f7ec f91c 	bl	8006ae8 <__aeabi_dcmpgt>
 801a8b0:	2800      	cmp	r0, #0
 801a8b2:	d095      	beq.n	801a7e0 <_strtod_l+0xa10>
 801a8b4:	e4da      	b.n	801a26c <_strtod_l+0x49c>
 801a8b6:	9b04      	ldr	r3, [sp, #16]
 801a8b8:	b333      	cbz	r3, 801a908 <_strtod_l+0xb38>
 801a8ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a8bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801a8c0:	d822      	bhi.n	801a908 <_strtod_l+0xb38>
 801a8c2:	a331      	add	r3, pc, #196	; (adr r3, 801a988 <_strtod_l+0xbb8>)
 801a8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8c8:	4630      	mov	r0, r6
 801a8ca:	4639      	mov	r1, r7
 801a8cc:	f7ec f8f8 	bl	8006ac0 <__aeabi_dcmple>
 801a8d0:	b1a0      	cbz	r0, 801a8fc <_strtod_l+0xb2c>
 801a8d2:	4639      	mov	r1, r7
 801a8d4:	4630      	mov	r0, r6
 801a8d6:	f7ec f94f 	bl	8006b78 <__aeabi_d2uiz>
 801a8da:	2801      	cmp	r0, #1
 801a8dc:	bf38      	it	cc
 801a8de:	2001      	movcc	r0, #1
 801a8e0:	f7eb fdf8 	bl	80064d4 <__aeabi_ui2d>
 801a8e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a8e6:	4606      	mov	r6, r0
 801a8e8:	460f      	mov	r7, r1
 801a8ea:	bb23      	cbnz	r3, 801a936 <_strtod_l+0xb66>
 801a8ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a8f0:	9010      	str	r0, [sp, #64]	; 0x40
 801a8f2:	9311      	str	r3, [sp, #68]	; 0x44
 801a8f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801a8f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801a8fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a8fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a900:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801a904:	1a9b      	subs	r3, r3, r2
 801a906:	930f      	str	r3, [sp, #60]	; 0x3c
 801a908:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801a90c:	eeb0 0a48 	vmov.f32	s0, s16
 801a910:	eef0 0a68 	vmov.f32	s1, s17
 801a914:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801a918:	f002 ff6e 	bl	801d7f8 <__ulp>
 801a91c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801a920:	ec53 2b10 	vmov	r2, r3, d0
 801a924:	f7eb fe50 	bl	80065c8 <__aeabi_dmul>
 801a928:	ec53 2b18 	vmov	r2, r3, d8
 801a92c:	f7eb fc96 	bl	800625c <__adddf3>
 801a930:	4680      	mov	r8, r0
 801a932:	4689      	mov	r9, r1
 801a934:	e78d      	b.n	801a852 <_strtod_l+0xa82>
 801a936:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801a93a:	e7db      	b.n	801a8f4 <_strtod_l+0xb24>
 801a93c:	a314      	add	r3, pc, #80	; (adr r3, 801a990 <_strtod_l+0xbc0>)
 801a93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a942:	f7ec f8b3 	bl	8006aac <__aeabi_dcmplt>
 801a946:	e7b3      	b.n	801a8b0 <_strtod_l+0xae0>
 801a948:	2300      	movs	r3, #0
 801a94a:	930a      	str	r3, [sp, #40]	; 0x28
 801a94c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a94e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a950:	6013      	str	r3, [r2, #0]
 801a952:	f7ff ba7c 	b.w	8019e4e <_strtod_l+0x7e>
 801a956:	2a65      	cmp	r2, #101	; 0x65
 801a958:	f43f ab75 	beq.w	801a046 <_strtod_l+0x276>
 801a95c:	2a45      	cmp	r2, #69	; 0x45
 801a95e:	f43f ab72 	beq.w	801a046 <_strtod_l+0x276>
 801a962:	2301      	movs	r3, #1
 801a964:	f7ff bbaa 	b.w	801a0bc <_strtod_l+0x2ec>
 801a968:	00000000 	.word	0x00000000
 801a96c:	bff00000 	.word	0xbff00000
 801a970:	00000000 	.word	0x00000000
 801a974:	3ff00000 	.word	0x3ff00000
 801a978:	94a03595 	.word	0x94a03595
 801a97c:	3fdfffff 	.word	0x3fdfffff
 801a980:	35afe535 	.word	0x35afe535
 801a984:	3fe00000 	.word	0x3fe00000
 801a988:	ffc00000 	.word	0xffc00000
 801a98c:	41dfffff 	.word	0x41dfffff
 801a990:	94a03595 	.word	0x94a03595
 801a994:	3fcfffff 	.word	0x3fcfffff
 801a998:	3ff00000 	.word	0x3ff00000
 801a99c:	3fe00000 	.word	0x3fe00000
 801a9a0:	7ff00000 	.word	0x7ff00000
 801a9a4:	7fe00000 	.word	0x7fe00000
 801a9a8:	7c9fffff 	.word	0x7c9fffff
 801a9ac:	7fefffff 	.word	0x7fefffff

0801a9b0 <strtod>:
 801a9b0:	460a      	mov	r2, r1
 801a9b2:	4601      	mov	r1, r0
 801a9b4:	4802      	ldr	r0, [pc, #8]	; (801a9c0 <strtod+0x10>)
 801a9b6:	4b03      	ldr	r3, [pc, #12]	; (801a9c4 <strtod+0x14>)
 801a9b8:	6800      	ldr	r0, [r0, #0]
 801a9ba:	f7ff ba09 	b.w	8019dd0 <_strtod_l>
 801a9be:	bf00      	nop
 801a9c0:	200001f8 	.word	0x200001f8
 801a9c4:	20000040 	.word	0x20000040

0801a9c8 <_strtol_l.constprop.0>:
 801a9c8:	2b01      	cmp	r3, #1
 801a9ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a9ce:	d001      	beq.n	801a9d4 <_strtol_l.constprop.0+0xc>
 801a9d0:	2b24      	cmp	r3, #36	; 0x24
 801a9d2:	d906      	bls.n	801a9e2 <_strtol_l.constprop.0+0x1a>
 801a9d4:	f001 f926 	bl	801bc24 <__errno>
 801a9d8:	2316      	movs	r3, #22
 801a9da:	6003      	str	r3, [r0, #0]
 801a9dc:	2000      	movs	r0, #0
 801a9de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a9e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801aac8 <_strtol_l.constprop.0+0x100>
 801a9e6:	460d      	mov	r5, r1
 801a9e8:	462e      	mov	r6, r5
 801a9ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a9ee:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801a9f2:	f017 0708 	ands.w	r7, r7, #8
 801a9f6:	d1f7      	bne.n	801a9e8 <_strtol_l.constprop.0+0x20>
 801a9f8:	2c2d      	cmp	r4, #45	; 0x2d
 801a9fa:	d132      	bne.n	801aa62 <_strtol_l.constprop.0+0x9a>
 801a9fc:	782c      	ldrb	r4, [r5, #0]
 801a9fe:	2701      	movs	r7, #1
 801aa00:	1cb5      	adds	r5, r6, #2
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d05b      	beq.n	801aabe <_strtol_l.constprop.0+0xf6>
 801aa06:	2b10      	cmp	r3, #16
 801aa08:	d109      	bne.n	801aa1e <_strtol_l.constprop.0+0x56>
 801aa0a:	2c30      	cmp	r4, #48	; 0x30
 801aa0c:	d107      	bne.n	801aa1e <_strtol_l.constprop.0+0x56>
 801aa0e:	782c      	ldrb	r4, [r5, #0]
 801aa10:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801aa14:	2c58      	cmp	r4, #88	; 0x58
 801aa16:	d14d      	bne.n	801aab4 <_strtol_l.constprop.0+0xec>
 801aa18:	786c      	ldrb	r4, [r5, #1]
 801aa1a:	2310      	movs	r3, #16
 801aa1c:	3502      	adds	r5, #2
 801aa1e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801aa22:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801aa26:	f04f 0e00 	mov.w	lr, #0
 801aa2a:	fbb8 f9f3 	udiv	r9, r8, r3
 801aa2e:	4676      	mov	r6, lr
 801aa30:	fb03 8a19 	mls	sl, r3, r9, r8
 801aa34:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801aa38:	f1bc 0f09 	cmp.w	ip, #9
 801aa3c:	d816      	bhi.n	801aa6c <_strtol_l.constprop.0+0xa4>
 801aa3e:	4664      	mov	r4, ip
 801aa40:	42a3      	cmp	r3, r4
 801aa42:	dd24      	ble.n	801aa8e <_strtol_l.constprop.0+0xc6>
 801aa44:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 801aa48:	d008      	beq.n	801aa5c <_strtol_l.constprop.0+0x94>
 801aa4a:	45b1      	cmp	r9, r6
 801aa4c:	d31c      	bcc.n	801aa88 <_strtol_l.constprop.0+0xc0>
 801aa4e:	d101      	bne.n	801aa54 <_strtol_l.constprop.0+0x8c>
 801aa50:	45a2      	cmp	sl, r4
 801aa52:	db19      	blt.n	801aa88 <_strtol_l.constprop.0+0xc0>
 801aa54:	fb06 4603 	mla	r6, r6, r3, r4
 801aa58:	f04f 0e01 	mov.w	lr, #1
 801aa5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801aa60:	e7e8      	b.n	801aa34 <_strtol_l.constprop.0+0x6c>
 801aa62:	2c2b      	cmp	r4, #43	; 0x2b
 801aa64:	bf04      	itt	eq
 801aa66:	782c      	ldrbeq	r4, [r5, #0]
 801aa68:	1cb5      	addeq	r5, r6, #2
 801aa6a:	e7ca      	b.n	801aa02 <_strtol_l.constprop.0+0x3a>
 801aa6c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801aa70:	f1bc 0f19 	cmp.w	ip, #25
 801aa74:	d801      	bhi.n	801aa7a <_strtol_l.constprop.0+0xb2>
 801aa76:	3c37      	subs	r4, #55	; 0x37
 801aa78:	e7e2      	b.n	801aa40 <_strtol_l.constprop.0+0x78>
 801aa7a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801aa7e:	f1bc 0f19 	cmp.w	ip, #25
 801aa82:	d804      	bhi.n	801aa8e <_strtol_l.constprop.0+0xc6>
 801aa84:	3c57      	subs	r4, #87	; 0x57
 801aa86:	e7db      	b.n	801aa40 <_strtol_l.constprop.0+0x78>
 801aa88:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 801aa8c:	e7e6      	b.n	801aa5c <_strtol_l.constprop.0+0x94>
 801aa8e:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 801aa92:	d105      	bne.n	801aaa0 <_strtol_l.constprop.0+0xd8>
 801aa94:	2322      	movs	r3, #34	; 0x22
 801aa96:	6003      	str	r3, [r0, #0]
 801aa98:	4646      	mov	r6, r8
 801aa9a:	b942      	cbnz	r2, 801aaae <_strtol_l.constprop.0+0xe6>
 801aa9c:	4630      	mov	r0, r6
 801aa9e:	e79e      	b.n	801a9de <_strtol_l.constprop.0+0x16>
 801aaa0:	b107      	cbz	r7, 801aaa4 <_strtol_l.constprop.0+0xdc>
 801aaa2:	4276      	negs	r6, r6
 801aaa4:	2a00      	cmp	r2, #0
 801aaa6:	d0f9      	beq.n	801aa9c <_strtol_l.constprop.0+0xd4>
 801aaa8:	f1be 0f00 	cmp.w	lr, #0
 801aaac:	d000      	beq.n	801aab0 <_strtol_l.constprop.0+0xe8>
 801aaae:	1e69      	subs	r1, r5, #1
 801aab0:	6011      	str	r1, [r2, #0]
 801aab2:	e7f3      	b.n	801aa9c <_strtol_l.constprop.0+0xd4>
 801aab4:	2430      	movs	r4, #48	; 0x30
 801aab6:	2b00      	cmp	r3, #0
 801aab8:	d1b1      	bne.n	801aa1e <_strtol_l.constprop.0+0x56>
 801aaba:	2308      	movs	r3, #8
 801aabc:	e7af      	b.n	801aa1e <_strtol_l.constprop.0+0x56>
 801aabe:	2c30      	cmp	r4, #48	; 0x30
 801aac0:	d0a5      	beq.n	801aa0e <_strtol_l.constprop.0+0x46>
 801aac2:	230a      	movs	r3, #10
 801aac4:	e7ab      	b.n	801aa1e <_strtol_l.constprop.0+0x56>
 801aac6:	bf00      	nop
 801aac8:	08024809 	.word	0x08024809

0801aacc <strtol>:
 801aacc:	4613      	mov	r3, r2
 801aace:	460a      	mov	r2, r1
 801aad0:	4601      	mov	r1, r0
 801aad2:	4802      	ldr	r0, [pc, #8]	; (801aadc <strtol+0x10>)
 801aad4:	6800      	ldr	r0, [r0, #0]
 801aad6:	f7ff bf77 	b.w	801a9c8 <_strtol_l.constprop.0>
 801aada:	bf00      	nop
 801aadc:	200001f8 	.word	0x200001f8

0801aae0 <__cvt>:
 801aae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aae4:	ec55 4b10 	vmov	r4, r5, d0
 801aae8:	2d00      	cmp	r5, #0
 801aaea:	460e      	mov	r6, r1
 801aaec:	4619      	mov	r1, r3
 801aaee:	462b      	mov	r3, r5
 801aaf0:	bfbb      	ittet	lt
 801aaf2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801aaf6:	461d      	movlt	r5, r3
 801aaf8:	2300      	movge	r3, #0
 801aafa:	232d      	movlt	r3, #45	; 0x2d
 801aafc:	700b      	strb	r3, [r1, #0]
 801aafe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ab00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801ab04:	4691      	mov	r9, r2
 801ab06:	f023 0820 	bic.w	r8, r3, #32
 801ab0a:	bfbc      	itt	lt
 801ab0c:	4622      	movlt	r2, r4
 801ab0e:	4614      	movlt	r4, r2
 801ab10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801ab14:	d005      	beq.n	801ab22 <__cvt+0x42>
 801ab16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801ab1a:	d100      	bne.n	801ab1e <__cvt+0x3e>
 801ab1c:	3601      	adds	r6, #1
 801ab1e:	2102      	movs	r1, #2
 801ab20:	e000      	b.n	801ab24 <__cvt+0x44>
 801ab22:	2103      	movs	r1, #3
 801ab24:	ab03      	add	r3, sp, #12
 801ab26:	9301      	str	r3, [sp, #4]
 801ab28:	ab02      	add	r3, sp, #8
 801ab2a:	9300      	str	r3, [sp, #0]
 801ab2c:	ec45 4b10 	vmov	d0, r4, r5
 801ab30:	4653      	mov	r3, sl
 801ab32:	4632      	mov	r2, r6
 801ab34:	f001 f94c 	bl	801bdd0 <_dtoa_r>
 801ab38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801ab3c:	4607      	mov	r7, r0
 801ab3e:	d102      	bne.n	801ab46 <__cvt+0x66>
 801ab40:	f019 0f01 	tst.w	r9, #1
 801ab44:	d022      	beq.n	801ab8c <__cvt+0xac>
 801ab46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801ab4a:	eb07 0906 	add.w	r9, r7, r6
 801ab4e:	d110      	bne.n	801ab72 <__cvt+0x92>
 801ab50:	783b      	ldrb	r3, [r7, #0]
 801ab52:	2b30      	cmp	r3, #48	; 0x30
 801ab54:	d10a      	bne.n	801ab6c <__cvt+0x8c>
 801ab56:	2200      	movs	r2, #0
 801ab58:	2300      	movs	r3, #0
 801ab5a:	4620      	mov	r0, r4
 801ab5c:	4629      	mov	r1, r5
 801ab5e:	f7eb ff9b 	bl	8006a98 <__aeabi_dcmpeq>
 801ab62:	b918      	cbnz	r0, 801ab6c <__cvt+0x8c>
 801ab64:	f1c6 0601 	rsb	r6, r6, #1
 801ab68:	f8ca 6000 	str.w	r6, [sl]
 801ab6c:	f8da 3000 	ldr.w	r3, [sl]
 801ab70:	4499      	add	r9, r3
 801ab72:	2200      	movs	r2, #0
 801ab74:	2300      	movs	r3, #0
 801ab76:	4620      	mov	r0, r4
 801ab78:	4629      	mov	r1, r5
 801ab7a:	f7eb ff8d 	bl	8006a98 <__aeabi_dcmpeq>
 801ab7e:	b108      	cbz	r0, 801ab84 <__cvt+0xa4>
 801ab80:	f8cd 900c 	str.w	r9, [sp, #12]
 801ab84:	2230      	movs	r2, #48	; 0x30
 801ab86:	9b03      	ldr	r3, [sp, #12]
 801ab88:	454b      	cmp	r3, r9
 801ab8a:	d307      	bcc.n	801ab9c <__cvt+0xbc>
 801ab8c:	9b03      	ldr	r3, [sp, #12]
 801ab8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ab90:	1bdb      	subs	r3, r3, r7
 801ab92:	4638      	mov	r0, r7
 801ab94:	6013      	str	r3, [r2, #0]
 801ab96:	b004      	add	sp, #16
 801ab98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab9c:	1c59      	adds	r1, r3, #1
 801ab9e:	9103      	str	r1, [sp, #12]
 801aba0:	701a      	strb	r2, [r3, #0]
 801aba2:	e7f0      	b.n	801ab86 <__cvt+0xa6>

0801aba4 <__exponent>:
 801aba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801aba6:	4603      	mov	r3, r0
 801aba8:	2900      	cmp	r1, #0
 801abaa:	bfb8      	it	lt
 801abac:	4249      	neglt	r1, r1
 801abae:	f803 2b02 	strb.w	r2, [r3], #2
 801abb2:	bfb4      	ite	lt
 801abb4:	222d      	movlt	r2, #45	; 0x2d
 801abb6:	222b      	movge	r2, #43	; 0x2b
 801abb8:	2909      	cmp	r1, #9
 801abba:	7042      	strb	r2, [r0, #1]
 801abbc:	dd2a      	ble.n	801ac14 <__exponent+0x70>
 801abbe:	f10d 0207 	add.w	r2, sp, #7
 801abc2:	4617      	mov	r7, r2
 801abc4:	260a      	movs	r6, #10
 801abc6:	4694      	mov	ip, r2
 801abc8:	fb91 f5f6 	sdiv	r5, r1, r6
 801abcc:	fb06 1415 	mls	r4, r6, r5, r1
 801abd0:	3430      	adds	r4, #48	; 0x30
 801abd2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801abd6:	460c      	mov	r4, r1
 801abd8:	2c63      	cmp	r4, #99	; 0x63
 801abda:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801abde:	4629      	mov	r1, r5
 801abe0:	dcf1      	bgt.n	801abc6 <__exponent+0x22>
 801abe2:	3130      	adds	r1, #48	; 0x30
 801abe4:	f1ac 0402 	sub.w	r4, ip, #2
 801abe8:	f802 1c01 	strb.w	r1, [r2, #-1]
 801abec:	1c41      	adds	r1, r0, #1
 801abee:	4622      	mov	r2, r4
 801abf0:	42ba      	cmp	r2, r7
 801abf2:	d30a      	bcc.n	801ac0a <__exponent+0x66>
 801abf4:	f10d 0209 	add.w	r2, sp, #9
 801abf8:	eba2 020c 	sub.w	r2, r2, ip
 801abfc:	42bc      	cmp	r4, r7
 801abfe:	bf88      	it	hi
 801ac00:	2200      	movhi	r2, #0
 801ac02:	4413      	add	r3, r2
 801ac04:	1a18      	subs	r0, r3, r0
 801ac06:	b003      	add	sp, #12
 801ac08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac0a:	f812 5b01 	ldrb.w	r5, [r2], #1
 801ac0e:	f801 5f01 	strb.w	r5, [r1, #1]!
 801ac12:	e7ed      	b.n	801abf0 <__exponent+0x4c>
 801ac14:	2330      	movs	r3, #48	; 0x30
 801ac16:	3130      	adds	r1, #48	; 0x30
 801ac18:	7083      	strb	r3, [r0, #2]
 801ac1a:	70c1      	strb	r1, [r0, #3]
 801ac1c:	1d03      	adds	r3, r0, #4
 801ac1e:	e7f1      	b.n	801ac04 <__exponent+0x60>

0801ac20 <_printf_float>:
 801ac20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac24:	ed2d 8b02 	vpush	{d8}
 801ac28:	b08d      	sub	sp, #52	; 0x34
 801ac2a:	460c      	mov	r4, r1
 801ac2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801ac30:	4616      	mov	r6, r2
 801ac32:	461f      	mov	r7, r3
 801ac34:	4605      	mov	r5, r0
 801ac36:	f000 ff87 	bl	801bb48 <_localeconv_r>
 801ac3a:	f8d0 a000 	ldr.w	sl, [r0]
 801ac3e:	4650      	mov	r0, sl
 801ac40:	f7eb fafe 	bl	8006240 <strlen>
 801ac44:	2300      	movs	r3, #0
 801ac46:	930a      	str	r3, [sp, #40]	; 0x28
 801ac48:	6823      	ldr	r3, [r4, #0]
 801ac4a:	9305      	str	r3, [sp, #20]
 801ac4c:	f8d8 3000 	ldr.w	r3, [r8]
 801ac50:	f894 b018 	ldrb.w	fp, [r4, #24]
 801ac54:	3307      	adds	r3, #7
 801ac56:	f023 0307 	bic.w	r3, r3, #7
 801ac5a:	f103 0208 	add.w	r2, r3, #8
 801ac5e:	f8c8 2000 	str.w	r2, [r8]
 801ac62:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ac66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801ac6a:	9307      	str	r3, [sp, #28]
 801ac6c:	f8cd 8018 	str.w	r8, [sp, #24]
 801ac70:	ee08 0a10 	vmov	s16, r0
 801ac74:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801ac78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ac7c:	4b9e      	ldr	r3, [pc, #632]	; (801aef8 <_printf_float+0x2d8>)
 801ac7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ac82:	f7eb ff3b 	bl	8006afc <__aeabi_dcmpun>
 801ac86:	bb88      	cbnz	r0, 801acec <_printf_float+0xcc>
 801ac88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ac8c:	4b9a      	ldr	r3, [pc, #616]	; (801aef8 <_printf_float+0x2d8>)
 801ac8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ac92:	f7eb ff15 	bl	8006ac0 <__aeabi_dcmple>
 801ac96:	bb48      	cbnz	r0, 801acec <_printf_float+0xcc>
 801ac98:	2200      	movs	r2, #0
 801ac9a:	2300      	movs	r3, #0
 801ac9c:	4640      	mov	r0, r8
 801ac9e:	4649      	mov	r1, r9
 801aca0:	f7eb ff04 	bl	8006aac <__aeabi_dcmplt>
 801aca4:	b110      	cbz	r0, 801acac <_printf_float+0x8c>
 801aca6:	232d      	movs	r3, #45	; 0x2d
 801aca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801acac:	4a93      	ldr	r2, [pc, #588]	; (801aefc <_printf_float+0x2dc>)
 801acae:	4b94      	ldr	r3, [pc, #592]	; (801af00 <_printf_float+0x2e0>)
 801acb0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801acb4:	bf94      	ite	ls
 801acb6:	4690      	movls	r8, r2
 801acb8:	4698      	movhi	r8, r3
 801acba:	2303      	movs	r3, #3
 801acbc:	6123      	str	r3, [r4, #16]
 801acbe:	9b05      	ldr	r3, [sp, #20]
 801acc0:	f023 0304 	bic.w	r3, r3, #4
 801acc4:	6023      	str	r3, [r4, #0]
 801acc6:	f04f 0900 	mov.w	r9, #0
 801acca:	9700      	str	r7, [sp, #0]
 801accc:	4633      	mov	r3, r6
 801acce:	aa0b      	add	r2, sp, #44	; 0x2c
 801acd0:	4621      	mov	r1, r4
 801acd2:	4628      	mov	r0, r5
 801acd4:	f000 f9da 	bl	801b08c <_printf_common>
 801acd8:	3001      	adds	r0, #1
 801acda:	f040 8090 	bne.w	801adfe <_printf_float+0x1de>
 801acde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ace2:	b00d      	add	sp, #52	; 0x34
 801ace4:	ecbd 8b02 	vpop	{d8}
 801ace8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acec:	4642      	mov	r2, r8
 801acee:	464b      	mov	r3, r9
 801acf0:	4640      	mov	r0, r8
 801acf2:	4649      	mov	r1, r9
 801acf4:	f7eb ff02 	bl	8006afc <__aeabi_dcmpun>
 801acf8:	b140      	cbz	r0, 801ad0c <_printf_float+0xec>
 801acfa:	464b      	mov	r3, r9
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	bfbc      	itt	lt
 801ad00:	232d      	movlt	r3, #45	; 0x2d
 801ad02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801ad06:	4a7f      	ldr	r2, [pc, #508]	; (801af04 <_printf_float+0x2e4>)
 801ad08:	4b7f      	ldr	r3, [pc, #508]	; (801af08 <_printf_float+0x2e8>)
 801ad0a:	e7d1      	b.n	801acb0 <_printf_float+0x90>
 801ad0c:	6863      	ldr	r3, [r4, #4]
 801ad0e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801ad12:	9206      	str	r2, [sp, #24]
 801ad14:	1c5a      	adds	r2, r3, #1
 801ad16:	d13f      	bne.n	801ad98 <_printf_float+0x178>
 801ad18:	2306      	movs	r3, #6
 801ad1a:	6063      	str	r3, [r4, #4]
 801ad1c:	9b05      	ldr	r3, [sp, #20]
 801ad1e:	6861      	ldr	r1, [r4, #4]
 801ad20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801ad24:	2300      	movs	r3, #0
 801ad26:	9303      	str	r3, [sp, #12]
 801ad28:	ab0a      	add	r3, sp, #40	; 0x28
 801ad2a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801ad2e:	ab09      	add	r3, sp, #36	; 0x24
 801ad30:	ec49 8b10 	vmov	d0, r8, r9
 801ad34:	9300      	str	r3, [sp, #0]
 801ad36:	6022      	str	r2, [r4, #0]
 801ad38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801ad3c:	4628      	mov	r0, r5
 801ad3e:	f7ff fecf 	bl	801aae0 <__cvt>
 801ad42:	9b06      	ldr	r3, [sp, #24]
 801ad44:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ad46:	2b47      	cmp	r3, #71	; 0x47
 801ad48:	4680      	mov	r8, r0
 801ad4a:	d108      	bne.n	801ad5e <_printf_float+0x13e>
 801ad4c:	1cc8      	adds	r0, r1, #3
 801ad4e:	db02      	blt.n	801ad56 <_printf_float+0x136>
 801ad50:	6863      	ldr	r3, [r4, #4]
 801ad52:	4299      	cmp	r1, r3
 801ad54:	dd41      	ble.n	801adda <_printf_float+0x1ba>
 801ad56:	f1ab 0302 	sub.w	r3, fp, #2
 801ad5a:	fa5f fb83 	uxtb.w	fp, r3
 801ad5e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801ad62:	d820      	bhi.n	801ada6 <_printf_float+0x186>
 801ad64:	3901      	subs	r1, #1
 801ad66:	465a      	mov	r2, fp
 801ad68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801ad6c:	9109      	str	r1, [sp, #36]	; 0x24
 801ad6e:	f7ff ff19 	bl	801aba4 <__exponent>
 801ad72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ad74:	1813      	adds	r3, r2, r0
 801ad76:	2a01      	cmp	r2, #1
 801ad78:	4681      	mov	r9, r0
 801ad7a:	6123      	str	r3, [r4, #16]
 801ad7c:	dc02      	bgt.n	801ad84 <_printf_float+0x164>
 801ad7e:	6822      	ldr	r2, [r4, #0]
 801ad80:	07d2      	lsls	r2, r2, #31
 801ad82:	d501      	bpl.n	801ad88 <_printf_float+0x168>
 801ad84:	3301      	adds	r3, #1
 801ad86:	6123      	str	r3, [r4, #16]
 801ad88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d09c      	beq.n	801acca <_printf_float+0xaa>
 801ad90:	232d      	movs	r3, #45	; 0x2d
 801ad92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ad96:	e798      	b.n	801acca <_printf_float+0xaa>
 801ad98:	9a06      	ldr	r2, [sp, #24]
 801ad9a:	2a47      	cmp	r2, #71	; 0x47
 801ad9c:	d1be      	bne.n	801ad1c <_printf_float+0xfc>
 801ad9e:	2b00      	cmp	r3, #0
 801ada0:	d1bc      	bne.n	801ad1c <_printf_float+0xfc>
 801ada2:	2301      	movs	r3, #1
 801ada4:	e7b9      	b.n	801ad1a <_printf_float+0xfa>
 801ada6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801adaa:	d118      	bne.n	801adde <_printf_float+0x1be>
 801adac:	2900      	cmp	r1, #0
 801adae:	6863      	ldr	r3, [r4, #4]
 801adb0:	dd0b      	ble.n	801adca <_printf_float+0x1aa>
 801adb2:	6121      	str	r1, [r4, #16]
 801adb4:	b913      	cbnz	r3, 801adbc <_printf_float+0x19c>
 801adb6:	6822      	ldr	r2, [r4, #0]
 801adb8:	07d0      	lsls	r0, r2, #31
 801adba:	d502      	bpl.n	801adc2 <_printf_float+0x1a2>
 801adbc:	3301      	adds	r3, #1
 801adbe:	440b      	add	r3, r1
 801adc0:	6123      	str	r3, [r4, #16]
 801adc2:	65a1      	str	r1, [r4, #88]	; 0x58
 801adc4:	f04f 0900 	mov.w	r9, #0
 801adc8:	e7de      	b.n	801ad88 <_printf_float+0x168>
 801adca:	b913      	cbnz	r3, 801add2 <_printf_float+0x1b2>
 801adcc:	6822      	ldr	r2, [r4, #0]
 801adce:	07d2      	lsls	r2, r2, #31
 801add0:	d501      	bpl.n	801add6 <_printf_float+0x1b6>
 801add2:	3302      	adds	r3, #2
 801add4:	e7f4      	b.n	801adc0 <_printf_float+0x1a0>
 801add6:	2301      	movs	r3, #1
 801add8:	e7f2      	b.n	801adc0 <_printf_float+0x1a0>
 801adda:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801adde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ade0:	4299      	cmp	r1, r3
 801ade2:	db05      	blt.n	801adf0 <_printf_float+0x1d0>
 801ade4:	6823      	ldr	r3, [r4, #0]
 801ade6:	6121      	str	r1, [r4, #16]
 801ade8:	07d8      	lsls	r0, r3, #31
 801adea:	d5ea      	bpl.n	801adc2 <_printf_float+0x1a2>
 801adec:	1c4b      	adds	r3, r1, #1
 801adee:	e7e7      	b.n	801adc0 <_printf_float+0x1a0>
 801adf0:	2900      	cmp	r1, #0
 801adf2:	bfd4      	ite	le
 801adf4:	f1c1 0202 	rsble	r2, r1, #2
 801adf8:	2201      	movgt	r2, #1
 801adfa:	4413      	add	r3, r2
 801adfc:	e7e0      	b.n	801adc0 <_printf_float+0x1a0>
 801adfe:	6823      	ldr	r3, [r4, #0]
 801ae00:	055a      	lsls	r2, r3, #21
 801ae02:	d407      	bmi.n	801ae14 <_printf_float+0x1f4>
 801ae04:	6923      	ldr	r3, [r4, #16]
 801ae06:	4642      	mov	r2, r8
 801ae08:	4631      	mov	r1, r6
 801ae0a:	4628      	mov	r0, r5
 801ae0c:	47b8      	blx	r7
 801ae0e:	3001      	adds	r0, #1
 801ae10:	d12c      	bne.n	801ae6c <_printf_float+0x24c>
 801ae12:	e764      	b.n	801acde <_printf_float+0xbe>
 801ae14:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801ae18:	f240 80e0 	bls.w	801afdc <_printf_float+0x3bc>
 801ae1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801ae20:	2200      	movs	r2, #0
 801ae22:	2300      	movs	r3, #0
 801ae24:	f7eb fe38 	bl	8006a98 <__aeabi_dcmpeq>
 801ae28:	2800      	cmp	r0, #0
 801ae2a:	d034      	beq.n	801ae96 <_printf_float+0x276>
 801ae2c:	4a37      	ldr	r2, [pc, #220]	; (801af0c <_printf_float+0x2ec>)
 801ae2e:	2301      	movs	r3, #1
 801ae30:	4631      	mov	r1, r6
 801ae32:	4628      	mov	r0, r5
 801ae34:	47b8      	blx	r7
 801ae36:	3001      	adds	r0, #1
 801ae38:	f43f af51 	beq.w	801acde <_printf_float+0xbe>
 801ae3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ae40:	429a      	cmp	r2, r3
 801ae42:	db02      	blt.n	801ae4a <_printf_float+0x22a>
 801ae44:	6823      	ldr	r3, [r4, #0]
 801ae46:	07d8      	lsls	r0, r3, #31
 801ae48:	d510      	bpl.n	801ae6c <_printf_float+0x24c>
 801ae4a:	ee18 3a10 	vmov	r3, s16
 801ae4e:	4652      	mov	r2, sl
 801ae50:	4631      	mov	r1, r6
 801ae52:	4628      	mov	r0, r5
 801ae54:	47b8      	blx	r7
 801ae56:	3001      	adds	r0, #1
 801ae58:	f43f af41 	beq.w	801acde <_printf_float+0xbe>
 801ae5c:	f04f 0800 	mov.w	r8, #0
 801ae60:	f104 091a 	add.w	r9, r4, #26
 801ae64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ae66:	3b01      	subs	r3, #1
 801ae68:	4543      	cmp	r3, r8
 801ae6a:	dc09      	bgt.n	801ae80 <_printf_float+0x260>
 801ae6c:	6823      	ldr	r3, [r4, #0]
 801ae6e:	079b      	lsls	r3, r3, #30
 801ae70:	f100 8107 	bmi.w	801b082 <_printf_float+0x462>
 801ae74:	68e0      	ldr	r0, [r4, #12]
 801ae76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ae78:	4298      	cmp	r0, r3
 801ae7a:	bfb8      	it	lt
 801ae7c:	4618      	movlt	r0, r3
 801ae7e:	e730      	b.n	801ace2 <_printf_float+0xc2>
 801ae80:	2301      	movs	r3, #1
 801ae82:	464a      	mov	r2, r9
 801ae84:	4631      	mov	r1, r6
 801ae86:	4628      	mov	r0, r5
 801ae88:	47b8      	blx	r7
 801ae8a:	3001      	adds	r0, #1
 801ae8c:	f43f af27 	beq.w	801acde <_printf_float+0xbe>
 801ae90:	f108 0801 	add.w	r8, r8, #1
 801ae94:	e7e6      	b.n	801ae64 <_printf_float+0x244>
 801ae96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae98:	2b00      	cmp	r3, #0
 801ae9a:	dc39      	bgt.n	801af10 <_printf_float+0x2f0>
 801ae9c:	4a1b      	ldr	r2, [pc, #108]	; (801af0c <_printf_float+0x2ec>)
 801ae9e:	2301      	movs	r3, #1
 801aea0:	4631      	mov	r1, r6
 801aea2:	4628      	mov	r0, r5
 801aea4:	47b8      	blx	r7
 801aea6:	3001      	adds	r0, #1
 801aea8:	f43f af19 	beq.w	801acde <_printf_float+0xbe>
 801aeac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801aeb0:	4313      	orrs	r3, r2
 801aeb2:	d102      	bne.n	801aeba <_printf_float+0x29a>
 801aeb4:	6823      	ldr	r3, [r4, #0]
 801aeb6:	07d9      	lsls	r1, r3, #31
 801aeb8:	d5d8      	bpl.n	801ae6c <_printf_float+0x24c>
 801aeba:	ee18 3a10 	vmov	r3, s16
 801aebe:	4652      	mov	r2, sl
 801aec0:	4631      	mov	r1, r6
 801aec2:	4628      	mov	r0, r5
 801aec4:	47b8      	blx	r7
 801aec6:	3001      	adds	r0, #1
 801aec8:	f43f af09 	beq.w	801acde <_printf_float+0xbe>
 801aecc:	f04f 0900 	mov.w	r9, #0
 801aed0:	f104 0a1a 	add.w	sl, r4, #26
 801aed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aed6:	425b      	negs	r3, r3
 801aed8:	454b      	cmp	r3, r9
 801aeda:	dc01      	bgt.n	801aee0 <_printf_float+0x2c0>
 801aedc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aede:	e792      	b.n	801ae06 <_printf_float+0x1e6>
 801aee0:	2301      	movs	r3, #1
 801aee2:	4652      	mov	r2, sl
 801aee4:	4631      	mov	r1, r6
 801aee6:	4628      	mov	r0, r5
 801aee8:	47b8      	blx	r7
 801aeea:	3001      	adds	r0, #1
 801aeec:	f43f aef7 	beq.w	801acde <_printf_float+0xbe>
 801aef0:	f109 0901 	add.w	r9, r9, #1
 801aef4:	e7ee      	b.n	801aed4 <_printf_float+0x2b4>
 801aef6:	bf00      	nop
 801aef8:	7fefffff 	.word	0x7fefffff
 801aefc:	08024909 	.word	0x08024909
 801af00:	0802490d 	.word	0x0802490d
 801af04:	08024911 	.word	0x08024911
 801af08:	08024915 	.word	0x08024915
 801af0c:	08024919 	.word	0x08024919
 801af10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801af12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801af14:	429a      	cmp	r2, r3
 801af16:	bfa8      	it	ge
 801af18:	461a      	movge	r2, r3
 801af1a:	2a00      	cmp	r2, #0
 801af1c:	4691      	mov	r9, r2
 801af1e:	dc37      	bgt.n	801af90 <_printf_float+0x370>
 801af20:	f04f 0b00 	mov.w	fp, #0
 801af24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801af28:	f104 021a 	add.w	r2, r4, #26
 801af2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801af2e:	9305      	str	r3, [sp, #20]
 801af30:	eba3 0309 	sub.w	r3, r3, r9
 801af34:	455b      	cmp	r3, fp
 801af36:	dc33      	bgt.n	801afa0 <_printf_float+0x380>
 801af38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801af3c:	429a      	cmp	r2, r3
 801af3e:	db3b      	blt.n	801afb8 <_printf_float+0x398>
 801af40:	6823      	ldr	r3, [r4, #0]
 801af42:	07da      	lsls	r2, r3, #31
 801af44:	d438      	bmi.n	801afb8 <_printf_float+0x398>
 801af46:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801af4a:	eba2 0903 	sub.w	r9, r2, r3
 801af4e:	9b05      	ldr	r3, [sp, #20]
 801af50:	1ad2      	subs	r2, r2, r3
 801af52:	4591      	cmp	r9, r2
 801af54:	bfa8      	it	ge
 801af56:	4691      	movge	r9, r2
 801af58:	f1b9 0f00 	cmp.w	r9, #0
 801af5c:	dc35      	bgt.n	801afca <_printf_float+0x3aa>
 801af5e:	f04f 0800 	mov.w	r8, #0
 801af62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801af66:	f104 0a1a 	add.w	sl, r4, #26
 801af6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801af6e:	1a9b      	subs	r3, r3, r2
 801af70:	eba3 0309 	sub.w	r3, r3, r9
 801af74:	4543      	cmp	r3, r8
 801af76:	f77f af79 	ble.w	801ae6c <_printf_float+0x24c>
 801af7a:	2301      	movs	r3, #1
 801af7c:	4652      	mov	r2, sl
 801af7e:	4631      	mov	r1, r6
 801af80:	4628      	mov	r0, r5
 801af82:	47b8      	blx	r7
 801af84:	3001      	adds	r0, #1
 801af86:	f43f aeaa 	beq.w	801acde <_printf_float+0xbe>
 801af8a:	f108 0801 	add.w	r8, r8, #1
 801af8e:	e7ec      	b.n	801af6a <_printf_float+0x34a>
 801af90:	4613      	mov	r3, r2
 801af92:	4631      	mov	r1, r6
 801af94:	4642      	mov	r2, r8
 801af96:	4628      	mov	r0, r5
 801af98:	47b8      	blx	r7
 801af9a:	3001      	adds	r0, #1
 801af9c:	d1c0      	bne.n	801af20 <_printf_float+0x300>
 801af9e:	e69e      	b.n	801acde <_printf_float+0xbe>
 801afa0:	2301      	movs	r3, #1
 801afa2:	4631      	mov	r1, r6
 801afa4:	4628      	mov	r0, r5
 801afa6:	9205      	str	r2, [sp, #20]
 801afa8:	47b8      	blx	r7
 801afaa:	3001      	adds	r0, #1
 801afac:	f43f ae97 	beq.w	801acde <_printf_float+0xbe>
 801afb0:	9a05      	ldr	r2, [sp, #20]
 801afb2:	f10b 0b01 	add.w	fp, fp, #1
 801afb6:	e7b9      	b.n	801af2c <_printf_float+0x30c>
 801afb8:	ee18 3a10 	vmov	r3, s16
 801afbc:	4652      	mov	r2, sl
 801afbe:	4631      	mov	r1, r6
 801afc0:	4628      	mov	r0, r5
 801afc2:	47b8      	blx	r7
 801afc4:	3001      	adds	r0, #1
 801afc6:	d1be      	bne.n	801af46 <_printf_float+0x326>
 801afc8:	e689      	b.n	801acde <_printf_float+0xbe>
 801afca:	9a05      	ldr	r2, [sp, #20]
 801afcc:	464b      	mov	r3, r9
 801afce:	4442      	add	r2, r8
 801afd0:	4631      	mov	r1, r6
 801afd2:	4628      	mov	r0, r5
 801afd4:	47b8      	blx	r7
 801afd6:	3001      	adds	r0, #1
 801afd8:	d1c1      	bne.n	801af5e <_printf_float+0x33e>
 801afda:	e680      	b.n	801acde <_printf_float+0xbe>
 801afdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801afde:	2a01      	cmp	r2, #1
 801afe0:	dc01      	bgt.n	801afe6 <_printf_float+0x3c6>
 801afe2:	07db      	lsls	r3, r3, #31
 801afe4:	d53a      	bpl.n	801b05c <_printf_float+0x43c>
 801afe6:	2301      	movs	r3, #1
 801afe8:	4642      	mov	r2, r8
 801afea:	4631      	mov	r1, r6
 801afec:	4628      	mov	r0, r5
 801afee:	47b8      	blx	r7
 801aff0:	3001      	adds	r0, #1
 801aff2:	f43f ae74 	beq.w	801acde <_printf_float+0xbe>
 801aff6:	ee18 3a10 	vmov	r3, s16
 801affa:	4652      	mov	r2, sl
 801affc:	4631      	mov	r1, r6
 801affe:	4628      	mov	r0, r5
 801b000:	47b8      	blx	r7
 801b002:	3001      	adds	r0, #1
 801b004:	f43f ae6b 	beq.w	801acde <_printf_float+0xbe>
 801b008:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b00c:	2200      	movs	r2, #0
 801b00e:	2300      	movs	r3, #0
 801b010:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801b014:	f7eb fd40 	bl	8006a98 <__aeabi_dcmpeq>
 801b018:	b9d8      	cbnz	r0, 801b052 <_printf_float+0x432>
 801b01a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801b01e:	f108 0201 	add.w	r2, r8, #1
 801b022:	4631      	mov	r1, r6
 801b024:	4628      	mov	r0, r5
 801b026:	47b8      	blx	r7
 801b028:	3001      	adds	r0, #1
 801b02a:	d10e      	bne.n	801b04a <_printf_float+0x42a>
 801b02c:	e657      	b.n	801acde <_printf_float+0xbe>
 801b02e:	2301      	movs	r3, #1
 801b030:	4652      	mov	r2, sl
 801b032:	4631      	mov	r1, r6
 801b034:	4628      	mov	r0, r5
 801b036:	47b8      	blx	r7
 801b038:	3001      	adds	r0, #1
 801b03a:	f43f ae50 	beq.w	801acde <_printf_float+0xbe>
 801b03e:	f108 0801 	add.w	r8, r8, #1
 801b042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b044:	3b01      	subs	r3, #1
 801b046:	4543      	cmp	r3, r8
 801b048:	dcf1      	bgt.n	801b02e <_printf_float+0x40e>
 801b04a:	464b      	mov	r3, r9
 801b04c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b050:	e6da      	b.n	801ae08 <_printf_float+0x1e8>
 801b052:	f04f 0800 	mov.w	r8, #0
 801b056:	f104 0a1a 	add.w	sl, r4, #26
 801b05a:	e7f2      	b.n	801b042 <_printf_float+0x422>
 801b05c:	2301      	movs	r3, #1
 801b05e:	4642      	mov	r2, r8
 801b060:	e7df      	b.n	801b022 <_printf_float+0x402>
 801b062:	2301      	movs	r3, #1
 801b064:	464a      	mov	r2, r9
 801b066:	4631      	mov	r1, r6
 801b068:	4628      	mov	r0, r5
 801b06a:	47b8      	blx	r7
 801b06c:	3001      	adds	r0, #1
 801b06e:	f43f ae36 	beq.w	801acde <_printf_float+0xbe>
 801b072:	f108 0801 	add.w	r8, r8, #1
 801b076:	68e3      	ldr	r3, [r4, #12]
 801b078:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b07a:	1a5b      	subs	r3, r3, r1
 801b07c:	4543      	cmp	r3, r8
 801b07e:	dcf0      	bgt.n	801b062 <_printf_float+0x442>
 801b080:	e6f8      	b.n	801ae74 <_printf_float+0x254>
 801b082:	f04f 0800 	mov.w	r8, #0
 801b086:	f104 0919 	add.w	r9, r4, #25
 801b08a:	e7f4      	b.n	801b076 <_printf_float+0x456>

0801b08c <_printf_common>:
 801b08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b090:	4616      	mov	r6, r2
 801b092:	4699      	mov	r9, r3
 801b094:	688a      	ldr	r2, [r1, #8]
 801b096:	690b      	ldr	r3, [r1, #16]
 801b098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b09c:	4293      	cmp	r3, r2
 801b09e:	bfb8      	it	lt
 801b0a0:	4613      	movlt	r3, r2
 801b0a2:	6033      	str	r3, [r6, #0]
 801b0a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b0a8:	4607      	mov	r7, r0
 801b0aa:	460c      	mov	r4, r1
 801b0ac:	b10a      	cbz	r2, 801b0b2 <_printf_common+0x26>
 801b0ae:	3301      	adds	r3, #1
 801b0b0:	6033      	str	r3, [r6, #0]
 801b0b2:	6823      	ldr	r3, [r4, #0]
 801b0b4:	0699      	lsls	r1, r3, #26
 801b0b6:	bf42      	ittt	mi
 801b0b8:	6833      	ldrmi	r3, [r6, #0]
 801b0ba:	3302      	addmi	r3, #2
 801b0bc:	6033      	strmi	r3, [r6, #0]
 801b0be:	6825      	ldr	r5, [r4, #0]
 801b0c0:	f015 0506 	ands.w	r5, r5, #6
 801b0c4:	d106      	bne.n	801b0d4 <_printf_common+0x48>
 801b0c6:	f104 0a19 	add.w	sl, r4, #25
 801b0ca:	68e3      	ldr	r3, [r4, #12]
 801b0cc:	6832      	ldr	r2, [r6, #0]
 801b0ce:	1a9b      	subs	r3, r3, r2
 801b0d0:	42ab      	cmp	r3, r5
 801b0d2:	dc26      	bgt.n	801b122 <_printf_common+0x96>
 801b0d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b0d8:	1e13      	subs	r3, r2, #0
 801b0da:	6822      	ldr	r2, [r4, #0]
 801b0dc:	bf18      	it	ne
 801b0de:	2301      	movne	r3, #1
 801b0e0:	0692      	lsls	r2, r2, #26
 801b0e2:	d42b      	bmi.n	801b13c <_printf_common+0xb0>
 801b0e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b0e8:	4649      	mov	r1, r9
 801b0ea:	4638      	mov	r0, r7
 801b0ec:	47c0      	blx	r8
 801b0ee:	3001      	adds	r0, #1
 801b0f0:	d01e      	beq.n	801b130 <_printf_common+0xa4>
 801b0f2:	6823      	ldr	r3, [r4, #0]
 801b0f4:	6922      	ldr	r2, [r4, #16]
 801b0f6:	f003 0306 	and.w	r3, r3, #6
 801b0fa:	2b04      	cmp	r3, #4
 801b0fc:	bf02      	ittt	eq
 801b0fe:	68e5      	ldreq	r5, [r4, #12]
 801b100:	6833      	ldreq	r3, [r6, #0]
 801b102:	1aed      	subeq	r5, r5, r3
 801b104:	68a3      	ldr	r3, [r4, #8]
 801b106:	bf0c      	ite	eq
 801b108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b10c:	2500      	movne	r5, #0
 801b10e:	4293      	cmp	r3, r2
 801b110:	bfc4      	itt	gt
 801b112:	1a9b      	subgt	r3, r3, r2
 801b114:	18ed      	addgt	r5, r5, r3
 801b116:	2600      	movs	r6, #0
 801b118:	341a      	adds	r4, #26
 801b11a:	42b5      	cmp	r5, r6
 801b11c:	d11a      	bne.n	801b154 <_printf_common+0xc8>
 801b11e:	2000      	movs	r0, #0
 801b120:	e008      	b.n	801b134 <_printf_common+0xa8>
 801b122:	2301      	movs	r3, #1
 801b124:	4652      	mov	r2, sl
 801b126:	4649      	mov	r1, r9
 801b128:	4638      	mov	r0, r7
 801b12a:	47c0      	blx	r8
 801b12c:	3001      	adds	r0, #1
 801b12e:	d103      	bne.n	801b138 <_printf_common+0xac>
 801b130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b138:	3501      	adds	r5, #1
 801b13a:	e7c6      	b.n	801b0ca <_printf_common+0x3e>
 801b13c:	18e1      	adds	r1, r4, r3
 801b13e:	1c5a      	adds	r2, r3, #1
 801b140:	2030      	movs	r0, #48	; 0x30
 801b142:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b146:	4422      	add	r2, r4
 801b148:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b14c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b150:	3302      	adds	r3, #2
 801b152:	e7c7      	b.n	801b0e4 <_printf_common+0x58>
 801b154:	2301      	movs	r3, #1
 801b156:	4622      	mov	r2, r4
 801b158:	4649      	mov	r1, r9
 801b15a:	4638      	mov	r0, r7
 801b15c:	47c0      	blx	r8
 801b15e:	3001      	adds	r0, #1
 801b160:	d0e6      	beq.n	801b130 <_printf_common+0xa4>
 801b162:	3601      	adds	r6, #1
 801b164:	e7d9      	b.n	801b11a <_printf_common+0x8e>
	...

0801b168 <_printf_i>:
 801b168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b16c:	7e0f      	ldrb	r7, [r1, #24]
 801b16e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b170:	2f78      	cmp	r7, #120	; 0x78
 801b172:	4691      	mov	r9, r2
 801b174:	4680      	mov	r8, r0
 801b176:	460c      	mov	r4, r1
 801b178:	469a      	mov	sl, r3
 801b17a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b17e:	d807      	bhi.n	801b190 <_printf_i+0x28>
 801b180:	2f62      	cmp	r7, #98	; 0x62
 801b182:	d80a      	bhi.n	801b19a <_printf_i+0x32>
 801b184:	2f00      	cmp	r7, #0
 801b186:	f000 80d4 	beq.w	801b332 <_printf_i+0x1ca>
 801b18a:	2f58      	cmp	r7, #88	; 0x58
 801b18c:	f000 80c0 	beq.w	801b310 <_printf_i+0x1a8>
 801b190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b194:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b198:	e03a      	b.n	801b210 <_printf_i+0xa8>
 801b19a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b19e:	2b15      	cmp	r3, #21
 801b1a0:	d8f6      	bhi.n	801b190 <_printf_i+0x28>
 801b1a2:	a101      	add	r1, pc, #4	; (adr r1, 801b1a8 <_printf_i+0x40>)
 801b1a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b1a8:	0801b201 	.word	0x0801b201
 801b1ac:	0801b215 	.word	0x0801b215
 801b1b0:	0801b191 	.word	0x0801b191
 801b1b4:	0801b191 	.word	0x0801b191
 801b1b8:	0801b191 	.word	0x0801b191
 801b1bc:	0801b191 	.word	0x0801b191
 801b1c0:	0801b215 	.word	0x0801b215
 801b1c4:	0801b191 	.word	0x0801b191
 801b1c8:	0801b191 	.word	0x0801b191
 801b1cc:	0801b191 	.word	0x0801b191
 801b1d0:	0801b191 	.word	0x0801b191
 801b1d4:	0801b319 	.word	0x0801b319
 801b1d8:	0801b241 	.word	0x0801b241
 801b1dc:	0801b2d3 	.word	0x0801b2d3
 801b1e0:	0801b191 	.word	0x0801b191
 801b1e4:	0801b191 	.word	0x0801b191
 801b1e8:	0801b33b 	.word	0x0801b33b
 801b1ec:	0801b191 	.word	0x0801b191
 801b1f0:	0801b241 	.word	0x0801b241
 801b1f4:	0801b191 	.word	0x0801b191
 801b1f8:	0801b191 	.word	0x0801b191
 801b1fc:	0801b2db 	.word	0x0801b2db
 801b200:	682b      	ldr	r3, [r5, #0]
 801b202:	1d1a      	adds	r2, r3, #4
 801b204:	681b      	ldr	r3, [r3, #0]
 801b206:	602a      	str	r2, [r5, #0]
 801b208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b20c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b210:	2301      	movs	r3, #1
 801b212:	e09f      	b.n	801b354 <_printf_i+0x1ec>
 801b214:	6820      	ldr	r0, [r4, #0]
 801b216:	682b      	ldr	r3, [r5, #0]
 801b218:	0607      	lsls	r7, r0, #24
 801b21a:	f103 0104 	add.w	r1, r3, #4
 801b21e:	6029      	str	r1, [r5, #0]
 801b220:	d501      	bpl.n	801b226 <_printf_i+0xbe>
 801b222:	681e      	ldr	r6, [r3, #0]
 801b224:	e003      	b.n	801b22e <_printf_i+0xc6>
 801b226:	0646      	lsls	r6, r0, #25
 801b228:	d5fb      	bpl.n	801b222 <_printf_i+0xba>
 801b22a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b22e:	2e00      	cmp	r6, #0
 801b230:	da03      	bge.n	801b23a <_printf_i+0xd2>
 801b232:	232d      	movs	r3, #45	; 0x2d
 801b234:	4276      	negs	r6, r6
 801b236:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b23a:	485a      	ldr	r0, [pc, #360]	; (801b3a4 <_printf_i+0x23c>)
 801b23c:	230a      	movs	r3, #10
 801b23e:	e012      	b.n	801b266 <_printf_i+0xfe>
 801b240:	682b      	ldr	r3, [r5, #0]
 801b242:	6820      	ldr	r0, [r4, #0]
 801b244:	1d19      	adds	r1, r3, #4
 801b246:	6029      	str	r1, [r5, #0]
 801b248:	0605      	lsls	r5, r0, #24
 801b24a:	d501      	bpl.n	801b250 <_printf_i+0xe8>
 801b24c:	681e      	ldr	r6, [r3, #0]
 801b24e:	e002      	b.n	801b256 <_printf_i+0xee>
 801b250:	0641      	lsls	r1, r0, #25
 801b252:	d5fb      	bpl.n	801b24c <_printf_i+0xe4>
 801b254:	881e      	ldrh	r6, [r3, #0]
 801b256:	4853      	ldr	r0, [pc, #332]	; (801b3a4 <_printf_i+0x23c>)
 801b258:	2f6f      	cmp	r7, #111	; 0x6f
 801b25a:	bf0c      	ite	eq
 801b25c:	2308      	moveq	r3, #8
 801b25e:	230a      	movne	r3, #10
 801b260:	2100      	movs	r1, #0
 801b262:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b266:	6865      	ldr	r5, [r4, #4]
 801b268:	60a5      	str	r5, [r4, #8]
 801b26a:	2d00      	cmp	r5, #0
 801b26c:	bfa2      	ittt	ge
 801b26e:	6821      	ldrge	r1, [r4, #0]
 801b270:	f021 0104 	bicge.w	r1, r1, #4
 801b274:	6021      	strge	r1, [r4, #0]
 801b276:	b90e      	cbnz	r6, 801b27c <_printf_i+0x114>
 801b278:	2d00      	cmp	r5, #0
 801b27a:	d04b      	beq.n	801b314 <_printf_i+0x1ac>
 801b27c:	4615      	mov	r5, r2
 801b27e:	fbb6 f1f3 	udiv	r1, r6, r3
 801b282:	fb03 6711 	mls	r7, r3, r1, r6
 801b286:	5dc7      	ldrb	r7, [r0, r7]
 801b288:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b28c:	4637      	mov	r7, r6
 801b28e:	42bb      	cmp	r3, r7
 801b290:	460e      	mov	r6, r1
 801b292:	d9f4      	bls.n	801b27e <_printf_i+0x116>
 801b294:	2b08      	cmp	r3, #8
 801b296:	d10b      	bne.n	801b2b0 <_printf_i+0x148>
 801b298:	6823      	ldr	r3, [r4, #0]
 801b29a:	07de      	lsls	r6, r3, #31
 801b29c:	d508      	bpl.n	801b2b0 <_printf_i+0x148>
 801b29e:	6923      	ldr	r3, [r4, #16]
 801b2a0:	6861      	ldr	r1, [r4, #4]
 801b2a2:	4299      	cmp	r1, r3
 801b2a4:	bfde      	ittt	le
 801b2a6:	2330      	movle	r3, #48	; 0x30
 801b2a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b2ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801b2b0:	1b52      	subs	r2, r2, r5
 801b2b2:	6122      	str	r2, [r4, #16]
 801b2b4:	f8cd a000 	str.w	sl, [sp]
 801b2b8:	464b      	mov	r3, r9
 801b2ba:	aa03      	add	r2, sp, #12
 801b2bc:	4621      	mov	r1, r4
 801b2be:	4640      	mov	r0, r8
 801b2c0:	f7ff fee4 	bl	801b08c <_printf_common>
 801b2c4:	3001      	adds	r0, #1
 801b2c6:	d14a      	bne.n	801b35e <_printf_i+0x1f6>
 801b2c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b2cc:	b004      	add	sp, #16
 801b2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b2d2:	6823      	ldr	r3, [r4, #0]
 801b2d4:	f043 0320 	orr.w	r3, r3, #32
 801b2d8:	6023      	str	r3, [r4, #0]
 801b2da:	4833      	ldr	r0, [pc, #204]	; (801b3a8 <_printf_i+0x240>)
 801b2dc:	2778      	movs	r7, #120	; 0x78
 801b2de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b2e2:	6823      	ldr	r3, [r4, #0]
 801b2e4:	6829      	ldr	r1, [r5, #0]
 801b2e6:	061f      	lsls	r7, r3, #24
 801b2e8:	f851 6b04 	ldr.w	r6, [r1], #4
 801b2ec:	d402      	bmi.n	801b2f4 <_printf_i+0x18c>
 801b2ee:	065f      	lsls	r7, r3, #25
 801b2f0:	bf48      	it	mi
 801b2f2:	b2b6      	uxthmi	r6, r6
 801b2f4:	07df      	lsls	r7, r3, #31
 801b2f6:	bf48      	it	mi
 801b2f8:	f043 0320 	orrmi.w	r3, r3, #32
 801b2fc:	6029      	str	r1, [r5, #0]
 801b2fe:	bf48      	it	mi
 801b300:	6023      	strmi	r3, [r4, #0]
 801b302:	b91e      	cbnz	r6, 801b30c <_printf_i+0x1a4>
 801b304:	6823      	ldr	r3, [r4, #0]
 801b306:	f023 0320 	bic.w	r3, r3, #32
 801b30a:	6023      	str	r3, [r4, #0]
 801b30c:	2310      	movs	r3, #16
 801b30e:	e7a7      	b.n	801b260 <_printf_i+0xf8>
 801b310:	4824      	ldr	r0, [pc, #144]	; (801b3a4 <_printf_i+0x23c>)
 801b312:	e7e4      	b.n	801b2de <_printf_i+0x176>
 801b314:	4615      	mov	r5, r2
 801b316:	e7bd      	b.n	801b294 <_printf_i+0x12c>
 801b318:	682b      	ldr	r3, [r5, #0]
 801b31a:	6826      	ldr	r6, [r4, #0]
 801b31c:	6961      	ldr	r1, [r4, #20]
 801b31e:	1d18      	adds	r0, r3, #4
 801b320:	6028      	str	r0, [r5, #0]
 801b322:	0635      	lsls	r5, r6, #24
 801b324:	681b      	ldr	r3, [r3, #0]
 801b326:	d501      	bpl.n	801b32c <_printf_i+0x1c4>
 801b328:	6019      	str	r1, [r3, #0]
 801b32a:	e002      	b.n	801b332 <_printf_i+0x1ca>
 801b32c:	0670      	lsls	r0, r6, #25
 801b32e:	d5fb      	bpl.n	801b328 <_printf_i+0x1c0>
 801b330:	8019      	strh	r1, [r3, #0]
 801b332:	2300      	movs	r3, #0
 801b334:	6123      	str	r3, [r4, #16]
 801b336:	4615      	mov	r5, r2
 801b338:	e7bc      	b.n	801b2b4 <_printf_i+0x14c>
 801b33a:	682b      	ldr	r3, [r5, #0]
 801b33c:	1d1a      	adds	r2, r3, #4
 801b33e:	602a      	str	r2, [r5, #0]
 801b340:	681d      	ldr	r5, [r3, #0]
 801b342:	6862      	ldr	r2, [r4, #4]
 801b344:	2100      	movs	r1, #0
 801b346:	4628      	mov	r0, r5
 801b348:	f7ea ff2a 	bl	80061a0 <memchr>
 801b34c:	b108      	cbz	r0, 801b352 <_printf_i+0x1ea>
 801b34e:	1b40      	subs	r0, r0, r5
 801b350:	6060      	str	r0, [r4, #4]
 801b352:	6863      	ldr	r3, [r4, #4]
 801b354:	6123      	str	r3, [r4, #16]
 801b356:	2300      	movs	r3, #0
 801b358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b35c:	e7aa      	b.n	801b2b4 <_printf_i+0x14c>
 801b35e:	6923      	ldr	r3, [r4, #16]
 801b360:	462a      	mov	r2, r5
 801b362:	4649      	mov	r1, r9
 801b364:	4640      	mov	r0, r8
 801b366:	47d0      	blx	sl
 801b368:	3001      	adds	r0, #1
 801b36a:	d0ad      	beq.n	801b2c8 <_printf_i+0x160>
 801b36c:	6823      	ldr	r3, [r4, #0]
 801b36e:	079b      	lsls	r3, r3, #30
 801b370:	d413      	bmi.n	801b39a <_printf_i+0x232>
 801b372:	68e0      	ldr	r0, [r4, #12]
 801b374:	9b03      	ldr	r3, [sp, #12]
 801b376:	4298      	cmp	r0, r3
 801b378:	bfb8      	it	lt
 801b37a:	4618      	movlt	r0, r3
 801b37c:	e7a6      	b.n	801b2cc <_printf_i+0x164>
 801b37e:	2301      	movs	r3, #1
 801b380:	4632      	mov	r2, r6
 801b382:	4649      	mov	r1, r9
 801b384:	4640      	mov	r0, r8
 801b386:	47d0      	blx	sl
 801b388:	3001      	adds	r0, #1
 801b38a:	d09d      	beq.n	801b2c8 <_printf_i+0x160>
 801b38c:	3501      	adds	r5, #1
 801b38e:	68e3      	ldr	r3, [r4, #12]
 801b390:	9903      	ldr	r1, [sp, #12]
 801b392:	1a5b      	subs	r3, r3, r1
 801b394:	42ab      	cmp	r3, r5
 801b396:	dcf2      	bgt.n	801b37e <_printf_i+0x216>
 801b398:	e7eb      	b.n	801b372 <_printf_i+0x20a>
 801b39a:	2500      	movs	r5, #0
 801b39c:	f104 0619 	add.w	r6, r4, #25
 801b3a0:	e7f5      	b.n	801b38e <_printf_i+0x226>
 801b3a2:	bf00      	nop
 801b3a4:	0802491b 	.word	0x0802491b
 801b3a8:	0802492c 	.word	0x0802492c

0801b3ac <std>:
 801b3ac:	2300      	movs	r3, #0
 801b3ae:	b510      	push	{r4, lr}
 801b3b0:	4604      	mov	r4, r0
 801b3b2:	e9c0 3300 	strd	r3, r3, [r0]
 801b3b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b3ba:	6083      	str	r3, [r0, #8]
 801b3bc:	8181      	strh	r1, [r0, #12]
 801b3be:	6643      	str	r3, [r0, #100]	; 0x64
 801b3c0:	81c2      	strh	r2, [r0, #14]
 801b3c2:	6183      	str	r3, [r0, #24]
 801b3c4:	4619      	mov	r1, r3
 801b3c6:	2208      	movs	r2, #8
 801b3c8:	305c      	adds	r0, #92	; 0x5c
 801b3ca:	f000 fb3b 	bl	801ba44 <memset>
 801b3ce:	4b0d      	ldr	r3, [pc, #52]	; (801b404 <std+0x58>)
 801b3d0:	6263      	str	r3, [r4, #36]	; 0x24
 801b3d2:	4b0d      	ldr	r3, [pc, #52]	; (801b408 <std+0x5c>)
 801b3d4:	62a3      	str	r3, [r4, #40]	; 0x28
 801b3d6:	4b0d      	ldr	r3, [pc, #52]	; (801b40c <std+0x60>)
 801b3d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b3da:	4b0d      	ldr	r3, [pc, #52]	; (801b410 <std+0x64>)
 801b3dc:	6323      	str	r3, [r4, #48]	; 0x30
 801b3de:	4b0d      	ldr	r3, [pc, #52]	; (801b414 <std+0x68>)
 801b3e0:	6224      	str	r4, [r4, #32]
 801b3e2:	429c      	cmp	r4, r3
 801b3e4:	d006      	beq.n	801b3f4 <std+0x48>
 801b3e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801b3ea:	4294      	cmp	r4, r2
 801b3ec:	d002      	beq.n	801b3f4 <std+0x48>
 801b3ee:	33d0      	adds	r3, #208	; 0xd0
 801b3f0:	429c      	cmp	r4, r3
 801b3f2:	d105      	bne.n	801b400 <std+0x54>
 801b3f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b3f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b3fc:	f000 bc3c 	b.w	801bc78 <__retarget_lock_init_recursive>
 801b400:	bd10      	pop	{r4, pc}
 801b402:	bf00      	nop
 801b404:	0801b875 	.word	0x0801b875
 801b408:	0801b897 	.word	0x0801b897
 801b40c:	0801b8cf 	.word	0x0801b8cf
 801b410:	0801b8f3 	.word	0x0801b8f3
 801b414:	2000172c 	.word	0x2000172c

0801b418 <stdio_exit_handler>:
 801b418:	4a02      	ldr	r2, [pc, #8]	; (801b424 <stdio_exit_handler+0xc>)
 801b41a:	4903      	ldr	r1, [pc, #12]	; (801b428 <stdio_exit_handler+0x10>)
 801b41c:	4803      	ldr	r0, [pc, #12]	; (801b42c <stdio_exit_handler+0x14>)
 801b41e:	f000 b8ef 	b.w	801b600 <_fwalk_sglue>
 801b422:	bf00      	nop
 801b424:	20000034 	.word	0x20000034
 801b428:	0801e0e9 	.word	0x0801e0e9
 801b42c:	200001ac 	.word	0x200001ac

0801b430 <cleanup_stdio>:
 801b430:	6841      	ldr	r1, [r0, #4]
 801b432:	4b0c      	ldr	r3, [pc, #48]	; (801b464 <cleanup_stdio+0x34>)
 801b434:	4299      	cmp	r1, r3
 801b436:	b510      	push	{r4, lr}
 801b438:	4604      	mov	r4, r0
 801b43a:	d001      	beq.n	801b440 <cleanup_stdio+0x10>
 801b43c:	f002 fe54 	bl	801e0e8 <_fflush_r>
 801b440:	68a1      	ldr	r1, [r4, #8]
 801b442:	4b09      	ldr	r3, [pc, #36]	; (801b468 <cleanup_stdio+0x38>)
 801b444:	4299      	cmp	r1, r3
 801b446:	d002      	beq.n	801b44e <cleanup_stdio+0x1e>
 801b448:	4620      	mov	r0, r4
 801b44a:	f002 fe4d 	bl	801e0e8 <_fflush_r>
 801b44e:	68e1      	ldr	r1, [r4, #12]
 801b450:	4b06      	ldr	r3, [pc, #24]	; (801b46c <cleanup_stdio+0x3c>)
 801b452:	4299      	cmp	r1, r3
 801b454:	d004      	beq.n	801b460 <cleanup_stdio+0x30>
 801b456:	4620      	mov	r0, r4
 801b458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b45c:	f002 be44 	b.w	801e0e8 <_fflush_r>
 801b460:	bd10      	pop	{r4, pc}
 801b462:	bf00      	nop
 801b464:	2000172c 	.word	0x2000172c
 801b468:	20001794 	.word	0x20001794
 801b46c:	200017fc 	.word	0x200017fc

0801b470 <global_stdio_init.part.0>:
 801b470:	b510      	push	{r4, lr}
 801b472:	4b0b      	ldr	r3, [pc, #44]	; (801b4a0 <global_stdio_init.part.0+0x30>)
 801b474:	4c0b      	ldr	r4, [pc, #44]	; (801b4a4 <global_stdio_init.part.0+0x34>)
 801b476:	4a0c      	ldr	r2, [pc, #48]	; (801b4a8 <global_stdio_init.part.0+0x38>)
 801b478:	601a      	str	r2, [r3, #0]
 801b47a:	4620      	mov	r0, r4
 801b47c:	2200      	movs	r2, #0
 801b47e:	2104      	movs	r1, #4
 801b480:	f7ff ff94 	bl	801b3ac <std>
 801b484:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801b488:	2201      	movs	r2, #1
 801b48a:	2109      	movs	r1, #9
 801b48c:	f7ff ff8e 	bl	801b3ac <std>
 801b490:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801b494:	2202      	movs	r2, #2
 801b496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b49a:	2112      	movs	r1, #18
 801b49c:	f7ff bf86 	b.w	801b3ac <std>
 801b4a0:	20001864 	.word	0x20001864
 801b4a4:	2000172c 	.word	0x2000172c
 801b4a8:	0801b419 	.word	0x0801b419

0801b4ac <__sfp_lock_acquire>:
 801b4ac:	4801      	ldr	r0, [pc, #4]	; (801b4b4 <__sfp_lock_acquire+0x8>)
 801b4ae:	f000 bbe4 	b.w	801bc7a <__retarget_lock_acquire_recursive>
 801b4b2:	bf00      	nop
 801b4b4:	2000186d 	.word	0x2000186d

0801b4b8 <__sfp_lock_release>:
 801b4b8:	4801      	ldr	r0, [pc, #4]	; (801b4c0 <__sfp_lock_release+0x8>)
 801b4ba:	f000 bbdf 	b.w	801bc7c <__retarget_lock_release_recursive>
 801b4be:	bf00      	nop
 801b4c0:	2000186d 	.word	0x2000186d

0801b4c4 <__sinit>:
 801b4c4:	b510      	push	{r4, lr}
 801b4c6:	4604      	mov	r4, r0
 801b4c8:	f7ff fff0 	bl	801b4ac <__sfp_lock_acquire>
 801b4cc:	6a23      	ldr	r3, [r4, #32]
 801b4ce:	b11b      	cbz	r3, 801b4d8 <__sinit+0x14>
 801b4d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b4d4:	f7ff bff0 	b.w	801b4b8 <__sfp_lock_release>
 801b4d8:	4b04      	ldr	r3, [pc, #16]	; (801b4ec <__sinit+0x28>)
 801b4da:	6223      	str	r3, [r4, #32]
 801b4dc:	4b04      	ldr	r3, [pc, #16]	; (801b4f0 <__sinit+0x2c>)
 801b4de:	681b      	ldr	r3, [r3, #0]
 801b4e0:	2b00      	cmp	r3, #0
 801b4e2:	d1f5      	bne.n	801b4d0 <__sinit+0xc>
 801b4e4:	f7ff ffc4 	bl	801b470 <global_stdio_init.part.0>
 801b4e8:	e7f2      	b.n	801b4d0 <__sinit+0xc>
 801b4ea:	bf00      	nop
 801b4ec:	0801b431 	.word	0x0801b431
 801b4f0:	20001864 	.word	0x20001864

0801b4f4 <_fputc_r>:
 801b4f4:	b570      	push	{r4, r5, r6, lr}
 801b4f6:	460e      	mov	r6, r1
 801b4f8:	4614      	mov	r4, r2
 801b4fa:	4605      	mov	r5, r0
 801b4fc:	b118      	cbz	r0, 801b506 <_fputc_r+0x12>
 801b4fe:	6a03      	ldr	r3, [r0, #32]
 801b500:	b90b      	cbnz	r3, 801b506 <_fputc_r+0x12>
 801b502:	f7ff ffdf 	bl	801b4c4 <__sinit>
 801b506:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b508:	07d8      	lsls	r0, r3, #31
 801b50a:	d405      	bmi.n	801b518 <_fputc_r+0x24>
 801b50c:	89a3      	ldrh	r3, [r4, #12]
 801b50e:	0599      	lsls	r1, r3, #22
 801b510:	d402      	bmi.n	801b518 <_fputc_r+0x24>
 801b512:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b514:	f000 fbb1 	bl	801bc7a <__retarget_lock_acquire_recursive>
 801b518:	4622      	mov	r2, r4
 801b51a:	4628      	mov	r0, r5
 801b51c:	4631      	mov	r1, r6
 801b51e:	f000 f8f9 	bl	801b714 <_putc_r>
 801b522:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b524:	07da      	lsls	r2, r3, #31
 801b526:	4605      	mov	r5, r0
 801b528:	d405      	bmi.n	801b536 <_fputc_r+0x42>
 801b52a:	89a3      	ldrh	r3, [r4, #12]
 801b52c:	059b      	lsls	r3, r3, #22
 801b52e:	d402      	bmi.n	801b536 <_fputc_r+0x42>
 801b530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b532:	f000 fba3 	bl	801bc7c <__retarget_lock_release_recursive>
 801b536:	4628      	mov	r0, r5
 801b538:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b53c <fputc>:
 801b53c:	4b02      	ldr	r3, [pc, #8]	; (801b548 <fputc+0xc>)
 801b53e:	460a      	mov	r2, r1
 801b540:	4601      	mov	r1, r0
 801b542:	6818      	ldr	r0, [r3, #0]
 801b544:	f7ff bfd6 	b.w	801b4f4 <_fputc_r>
 801b548:	200001f8 	.word	0x200001f8

0801b54c <_fputs_r>:
 801b54c:	b570      	push	{r4, r5, r6, lr}
 801b54e:	460d      	mov	r5, r1
 801b550:	4614      	mov	r4, r2
 801b552:	4606      	mov	r6, r0
 801b554:	b118      	cbz	r0, 801b55e <_fputs_r+0x12>
 801b556:	6a03      	ldr	r3, [r0, #32]
 801b558:	b90b      	cbnz	r3, 801b55e <_fputs_r+0x12>
 801b55a:	f7ff ffb3 	bl	801b4c4 <__sinit>
 801b55e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b560:	07da      	lsls	r2, r3, #31
 801b562:	d405      	bmi.n	801b570 <_fputs_r+0x24>
 801b564:	89a3      	ldrh	r3, [r4, #12]
 801b566:	059b      	lsls	r3, r3, #22
 801b568:	d402      	bmi.n	801b570 <_fputs_r+0x24>
 801b56a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b56c:	f000 fb85 	bl	801bc7a <__retarget_lock_acquire_recursive>
 801b570:	89a3      	ldrh	r3, [r4, #12]
 801b572:	0718      	lsls	r0, r3, #28
 801b574:	d511      	bpl.n	801b59a <_fputs_r+0x4e>
 801b576:	6923      	ldr	r3, [r4, #16]
 801b578:	b17b      	cbz	r3, 801b59a <_fputs_r+0x4e>
 801b57a:	3d01      	subs	r5, #1
 801b57c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 801b580:	b9e9      	cbnz	r1, 801b5be <_fputs_r+0x72>
 801b582:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801b584:	f015 0501 	ands.w	r5, r5, #1
 801b588:	d12f      	bne.n	801b5ea <_fputs_r+0x9e>
 801b58a:	89a3      	ldrh	r3, [r4, #12]
 801b58c:	0599      	lsls	r1, r3, #22
 801b58e:	d402      	bmi.n	801b596 <_fputs_r+0x4a>
 801b590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b592:	f000 fb73 	bl	801bc7c <__retarget_lock_release_recursive>
 801b596:	4628      	mov	r0, r5
 801b598:	bd70      	pop	{r4, r5, r6, pc}
 801b59a:	4621      	mov	r1, r4
 801b59c:	4630      	mov	r0, r6
 801b59e:	f000 f9e9 	bl	801b974 <__swsetup_r>
 801b5a2:	2800      	cmp	r0, #0
 801b5a4:	d0e9      	beq.n	801b57a <_fputs_r+0x2e>
 801b5a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b5a8:	07da      	lsls	r2, r3, #31
 801b5aa:	d405      	bmi.n	801b5b8 <_fputs_r+0x6c>
 801b5ac:	89a3      	ldrh	r3, [r4, #12]
 801b5ae:	059b      	lsls	r3, r3, #22
 801b5b0:	d402      	bmi.n	801b5b8 <_fputs_r+0x6c>
 801b5b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b5b4:	f000 fb62 	bl	801bc7c <__retarget_lock_release_recursive>
 801b5b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801b5bc:	e7eb      	b.n	801b596 <_fputs_r+0x4a>
 801b5be:	68a3      	ldr	r3, [r4, #8]
 801b5c0:	3b01      	subs	r3, #1
 801b5c2:	2b00      	cmp	r3, #0
 801b5c4:	60a3      	str	r3, [r4, #8]
 801b5c6:	da04      	bge.n	801b5d2 <_fputs_r+0x86>
 801b5c8:	69a2      	ldr	r2, [r4, #24]
 801b5ca:	4293      	cmp	r3, r2
 801b5cc:	db06      	blt.n	801b5dc <_fputs_r+0x90>
 801b5ce:	290a      	cmp	r1, #10
 801b5d0:	d004      	beq.n	801b5dc <_fputs_r+0x90>
 801b5d2:	6823      	ldr	r3, [r4, #0]
 801b5d4:	1c5a      	adds	r2, r3, #1
 801b5d6:	6022      	str	r2, [r4, #0]
 801b5d8:	7019      	strb	r1, [r3, #0]
 801b5da:	e7cf      	b.n	801b57c <_fputs_r+0x30>
 801b5dc:	4622      	mov	r2, r4
 801b5de:	4630      	mov	r0, r6
 801b5e0:	f000 f98b 	bl	801b8fa <__swbuf_r>
 801b5e4:	3001      	adds	r0, #1
 801b5e6:	d1c9      	bne.n	801b57c <_fputs_r+0x30>
 801b5e8:	e7dd      	b.n	801b5a6 <_fputs_r+0x5a>
 801b5ea:	460d      	mov	r5, r1
 801b5ec:	e7d3      	b.n	801b596 <_fputs_r+0x4a>
	...

0801b5f0 <fputs>:
 801b5f0:	4b02      	ldr	r3, [pc, #8]	; (801b5fc <fputs+0xc>)
 801b5f2:	460a      	mov	r2, r1
 801b5f4:	4601      	mov	r1, r0
 801b5f6:	6818      	ldr	r0, [r3, #0]
 801b5f8:	f7ff bfa8 	b.w	801b54c <_fputs_r>
 801b5fc:	200001f8 	.word	0x200001f8

0801b600 <_fwalk_sglue>:
 801b600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b604:	4607      	mov	r7, r0
 801b606:	4688      	mov	r8, r1
 801b608:	4614      	mov	r4, r2
 801b60a:	2600      	movs	r6, #0
 801b60c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b610:	f1b9 0901 	subs.w	r9, r9, #1
 801b614:	d505      	bpl.n	801b622 <_fwalk_sglue+0x22>
 801b616:	6824      	ldr	r4, [r4, #0]
 801b618:	2c00      	cmp	r4, #0
 801b61a:	d1f7      	bne.n	801b60c <_fwalk_sglue+0xc>
 801b61c:	4630      	mov	r0, r6
 801b61e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b622:	89ab      	ldrh	r3, [r5, #12]
 801b624:	2b01      	cmp	r3, #1
 801b626:	d907      	bls.n	801b638 <_fwalk_sglue+0x38>
 801b628:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b62c:	3301      	adds	r3, #1
 801b62e:	d003      	beq.n	801b638 <_fwalk_sglue+0x38>
 801b630:	4629      	mov	r1, r5
 801b632:	4638      	mov	r0, r7
 801b634:	47c0      	blx	r8
 801b636:	4306      	orrs	r6, r0
 801b638:	3568      	adds	r5, #104	; 0x68
 801b63a:	e7e9      	b.n	801b610 <_fwalk_sglue+0x10>

0801b63c <_fwrite_r>:
 801b63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b640:	9c08      	ldr	r4, [sp, #32]
 801b642:	468a      	mov	sl, r1
 801b644:	4690      	mov	r8, r2
 801b646:	fb02 f903 	mul.w	r9, r2, r3
 801b64a:	4606      	mov	r6, r0
 801b64c:	b118      	cbz	r0, 801b656 <_fwrite_r+0x1a>
 801b64e:	6a03      	ldr	r3, [r0, #32]
 801b650:	b90b      	cbnz	r3, 801b656 <_fwrite_r+0x1a>
 801b652:	f7ff ff37 	bl	801b4c4 <__sinit>
 801b656:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b658:	07dd      	lsls	r5, r3, #31
 801b65a:	d405      	bmi.n	801b668 <_fwrite_r+0x2c>
 801b65c:	89a3      	ldrh	r3, [r4, #12]
 801b65e:	0598      	lsls	r0, r3, #22
 801b660:	d402      	bmi.n	801b668 <_fwrite_r+0x2c>
 801b662:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b664:	f000 fb09 	bl	801bc7a <__retarget_lock_acquire_recursive>
 801b668:	89a3      	ldrh	r3, [r4, #12]
 801b66a:	0719      	lsls	r1, r3, #28
 801b66c:	d516      	bpl.n	801b69c <_fwrite_r+0x60>
 801b66e:	6923      	ldr	r3, [r4, #16]
 801b670:	b1a3      	cbz	r3, 801b69c <_fwrite_r+0x60>
 801b672:	2500      	movs	r5, #0
 801b674:	454d      	cmp	r5, r9
 801b676:	d01f      	beq.n	801b6b8 <_fwrite_r+0x7c>
 801b678:	68a7      	ldr	r7, [r4, #8]
 801b67a:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801b67e:	3f01      	subs	r7, #1
 801b680:	2f00      	cmp	r7, #0
 801b682:	60a7      	str	r7, [r4, #8]
 801b684:	da04      	bge.n	801b690 <_fwrite_r+0x54>
 801b686:	69a3      	ldr	r3, [r4, #24]
 801b688:	429f      	cmp	r7, r3
 801b68a:	db0f      	blt.n	801b6ac <_fwrite_r+0x70>
 801b68c:	290a      	cmp	r1, #10
 801b68e:	d00d      	beq.n	801b6ac <_fwrite_r+0x70>
 801b690:	6823      	ldr	r3, [r4, #0]
 801b692:	1c5a      	adds	r2, r3, #1
 801b694:	6022      	str	r2, [r4, #0]
 801b696:	7019      	strb	r1, [r3, #0]
 801b698:	3501      	adds	r5, #1
 801b69a:	e7eb      	b.n	801b674 <_fwrite_r+0x38>
 801b69c:	4621      	mov	r1, r4
 801b69e:	4630      	mov	r0, r6
 801b6a0:	f000 f968 	bl	801b974 <__swsetup_r>
 801b6a4:	2800      	cmp	r0, #0
 801b6a6:	d0e4      	beq.n	801b672 <_fwrite_r+0x36>
 801b6a8:	2500      	movs	r5, #0
 801b6aa:	e005      	b.n	801b6b8 <_fwrite_r+0x7c>
 801b6ac:	4622      	mov	r2, r4
 801b6ae:	4630      	mov	r0, r6
 801b6b0:	f000 f923 	bl	801b8fa <__swbuf_r>
 801b6b4:	3001      	adds	r0, #1
 801b6b6:	d1ef      	bne.n	801b698 <_fwrite_r+0x5c>
 801b6b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b6ba:	07da      	lsls	r2, r3, #31
 801b6bc:	d405      	bmi.n	801b6ca <_fwrite_r+0x8e>
 801b6be:	89a3      	ldrh	r3, [r4, #12]
 801b6c0:	059b      	lsls	r3, r3, #22
 801b6c2:	d402      	bmi.n	801b6ca <_fwrite_r+0x8e>
 801b6c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b6c6:	f000 fad9 	bl	801bc7c <__retarget_lock_release_recursive>
 801b6ca:	fbb5 f0f8 	udiv	r0, r5, r8
 801b6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801b6d4 <fwrite>:
 801b6d4:	b507      	push	{r0, r1, r2, lr}
 801b6d6:	9300      	str	r3, [sp, #0]
 801b6d8:	4613      	mov	r3, r2
 801b6da:	460a      	mov	r2, r1
 801b6dc:	4601      	mov	r1, r0
 801b6de:	4803      	ldr	r0, [pc, #12]	; (801b6ec <fwrite+0x18>)
 801b6e0:	6800      	ldr	r0, [r0, #0]
 801b6e2:	f7ff ffab 	bl	801b63c <_fwrite_r>
 801b6e6:	b003      	add	sp, #12
 801b6e8:	f85d fb04 	ldr.w	pc, [sp], #4
 801b6ec:	200001f8 	.word	0x200001f8

0801b6f0 <iprintf>:
 801b6f0:	b40f      	push	{r0, r1, r2, r3}
 801b6f2:	b507      	push	{r0, r1, r2, lr}
 801b6f4:	4906      	ldr	r1, [pc, #24]	; (801b710 <iprintf+0x20>)
 801b6f6:	ab04      	add	r3, sp, #16
 801b6f8:	6808      	ldr	r0, [r1, #0]
 801b6fa:	f853 2b04 	ldr.w	r2, [r3], #4
 801b6fe:	6881      	ldr	r1, [r0, #8]
 801b700:	9301      	str	r3, [sp, #4]
 801b702:	f002 fb51 	bl	801dda8 <_vfiprintf_r>
 801b706:	b003      	add	sp, #12
 801b708:	f85d eb04 	ldr.w	lr, [sp], #4
 801b70c:	b004      	add	sp, #16
 801b70e:	4770      	bx	lr
 801b710:	200001f8 	.word	0x200001f8

0801b714 <_putc_r>:
 801b714:	b570      	push	{r4, r5, r6, lr}
 801b716:	460d      	mov	r5, r1
 801b718:	4614      	mov	r4, r2
 801b71a:	4606      	mov	r6, r0
 801b71c:	b118      	cbz	r0, 801b726 <_putc_r+0x12>
 801b71e:	6a03      	ldr	r3, [r0, #32]
 801b720:	b90b      	cbnz	r3, 801b726 <_putc_r+0x12>
 801b722:	f7ff fecf 	bl	801b4c4 <__sinit>
 801b726:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b728:	07d8      	lsls	r0, r3, #31
 801b72a:	d405      	bmi.n	801b738 <_putc_r+0x24>
 801b72c:	89a3      	ldrh	r3, [r4, #12]
 801b72e:	0599      	lsls	r1, r3, #22
 801b730:	d402      	bmi.n	801b738 <_putc_r+0x24>
 801b732:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b734:	f000 faa1 	bl	801bc7a <__retarget_lock_acquire_recursive>
 801b738:	68a3      	ldr	r3, [r4, #8]
 801b73a:	3b01      	subs	r3, #1
 801b73c:	2b00      	cmp	r3, #0
 801b73e:	60a3      	str	r3, [r4, #8]
 801b740:	da05      	bge.n	801b74e <_putc_r+0x3a>
 801b742:	69a2      	ldr	r2, [r4, #24]
 801b744:	4293      	cmp	r3, r2
 801b746:	db12      	blt.n	801b76e <_putc_r+0x5a>
 801b748:	b2eb      	uxtb	r3, r5
 801b74a:	2b0a      	cmp	r3, #10
 801b74c:	d00f      	beq.n	801b76e <_putc_r+0x5a>
 801b74e:	6823      	ldr	r3, [r4, #0]
 801b750:	1c5a      	adds	r2, r3, #1
 801b752:	6022      	str	r2, [r4, #0]
 801b754:	701d      	strb	r5, [r3, #0]
 801b756:	b2ed      	uxtb	r5, r5
 801b758:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b75a:	07da      	lsls	r2, r3, #31
 801b75c:	d405      	bmi.n	801b76a <_putc_r+0x56>
 801b75e:	89a3      	ldrh	r3, [r4, #12]
 801b760:	059b      	lsls	r3, r3, #22
 801b762:	d402      	bmi.n	801b76a <_putc_r+0x56>
 801b764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b766:	f000 fa89 	bl	801bc7c <__retarget_lock_release_recursive>
 801b76a:	4628      	mov	r0, r5
 801b76c:	bd70      	pop	{r4, r5, r6, pc}
 801b76e:	4629      	mov	r1, r5
 801b770:	4622      	mov	r2, r4
 801b772:	4630      	mov	r0, r6
 801b774:	f000 f8c1 	bl	801b8fa <__swbuf_r>
 801b778:	4605      	mov	r5, r0
 801b77a:	e7ed      	b.n	801b758 <_putc_r+0x44>

0801b77c <_puts_r>:
 801b77c:	6a03      	ldr	r3, [r0, #32]
 801b77e:	b570      	push	{r4, r5, r6, lr}
 801b780:	6884      	ldr	r4, [r0, #8]
 801b782:	4605      	mov	r5, r0
 801b784:	460e      	mov	r6, r1
 801b786:	b90b      	cbnz	r3, 801b78c <_puts_r+0x10>
 801b788:	f7ff fe9c 	bl	801b4c4 <__sinit>
 801b78c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b78e:	07db      	lsls	r3, r3, #31
 801b790:	d405      	bmi.n	801b79e <_puts_r+0x22>
 801b792:	89a3      	ldrh	r3, [r4, #12]
 801b794:	0598      	lsls	r0, r3, #22
 801b796:	d402      	bmi.n	801b79e <_puts_r+0x22>
 801b798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b79a:	f000 fa6e 	bl	801bc7a <__retarget_lock_acquire_recursive>
 801b79e:	89a3      	ldrh	r3, [r4, #12]
 801b7a0:	0719      	lsls	r1, r3, #28
 801b7a2:	d513      	bpl.n	801b7cc <_puts_r+0x50>
 801b7a4:	6923      	ldr	r3, [r4, #16]
 801b7a6:	b18b      	cbz	r3, 801b7cc <_puts_r+0x50>
 801b7a8:	3e01      	subs	r6, #1
 801b7aa:	68a3      	ldr	r3, [r4, #8]
 801b7ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b7b0:	3b01      	subs	r3, #1
 801b7b2:	60a3      	str	r3, [r4, #8]
 801b7b4:	b9e9      	cbnz	r1, 801b7f2 <_puts_r+0x76>
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	da2e      	bge.n	801b818 <_puts_r+0x9c>
 801b7ba:	4622      	mov	r2, r4
 801b7bc:	210a      	movs	r1, #10
 801b7be:	4628      	mov	r0, r5
 801b7c0:	f000 f89b 	bl	801b8fa <__swbuf_r>
 801b7c4:	3001      	adds	r0, #1
 801b7c6:	d007      	beq.n	801b7d8 <_puts_r+0x5c>
 801b7c8:	250a      	movs	r5, #10
 801b7ca:	e007      	b.n	801b7dc <_puts_r+0x60>
 801b7cc:	4621      	mov	r1, r4
 801b7ce:	4628      	mov	r0, r5
 801b7d0:	f000 f8d0 	bl	801b974 <__swsetup_r>
 801b7d4:	2800      	cmp	r0, #0
 801b7d6:	d0e7      	beq.n	801b7a8 <_puts_r+0x2c>
 801b7d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801b7dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b7de:	07da      	lsls	r2, r3, #31
 801b7e0:	d405      	bmi.n	801b7ee <_puts_r+0x72>
 801b7e2:	89a3      	ldrh	r3, [r4, #12]
 801b7e4:	059b      	lsls	r3, r3, #22
 801b7e6:	d402      	bmi.n	801b7ee <_puts_r+0x72>
 801b7e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b7ea:	f000 fa47 	bl	801bc7c <__retarget_lock_release_recursive>
 801b7ee:	4628      	mov	r0, r5
 801b7f0:	bd70      	pop	{r4, r5, r6, pc}
 801b7f2:	2b00      	cmp	r3, #0
 801b7f4:	da04      	bge.n	801b800 <_puts_r+0x84>
 801b7f6:	69a2      	ldr	r2, [r4, #24]
 801b7f8:	429a      	cmp	r2, r3
 801b7fa:	dc06      	bgt.n	801b80a <_puts_r+0x8e>
 801b7fc:	290a      	cmp	r1, #10
 801b7fe:	d004      	beq.n	801b80a <_puts_r+0x8e>
 801b800:	6823      	ldr	r3, [r4, #0]
 801b802:	1c5a      	adds	r2, r3, #1
 801b804:	6022      	str	r2, [r4, #0]
 801b806:	7019      	strb	r1, [r3, #0]
 801b808:	e7cf      	b.n	801b7aa <_puts_r+0x2e>
 801b80a:	4622      	mov	r2, r4
 801b80c:	4628      	mov	r0, r5
 801b80e:	f000 f874 	bl	801b8fa <__swbuf_r>
 801b812:	3001      	adds	r0, #1
 801b814:	d1c9      	bne.n	801b7aa <_puts_r+0x2e>
 801b816:	e7df      	b.n	801b7d8 <_puts_r+0x5c>
 801b818:	6823      	ldr	r3, [r4, #0]
 801b81a:	250a      	movs	r5, #10
 801b81c:	1c5a      	adds	r2, r3, #1
 801b81e:	6022      	str	r2, [r4, #0]
 801b820:	701d      	strb	r5, [r3, #0]
 801b822:	e7db      	b.n	801b7dc <_puts_r+0x60>

0801b824 <puts>:
 801b824:	4b02      	ldr	r3, [pc, #8]	; (801b830 <puts+0xc>)
 801b826:	4601      	mov	r1, r0
 801b828:	6818      	ldr	r0, [r3, #0]
 801b82a:	f7ff bfa7 	b.w	801b77c <_puts_r>
 801b82e:	bf00      	nop
 801b830:	200001f8 	.word	0x200001f8

0801b834 <siprintf>:
 801b834:	b40e      	push	{r1, r2, r3}
 801b836:	b500      	push	{lr}
 801b838:	b09c      	sub	sp, #112	; 0x70
 801b83a:	ab1d      	add	r3, sp, #116	; 0x74
 801b83c:	9002      	str	r0, [sp, #8]
 801b83e:	9006      	str	r0, [sp, #24]
 801b840:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b844:	4809      	ldr	r0, [pc, #36]	; (801b86c <siprintf+0x38>)
 801b846:	9107      	str	r1, [sp, #28]
 801b848:	9104      	str	r1, [sp, #16]
 801b84a:	4909      	ldr	r1, [pc, #36]	; (801b870 <siprintf+0x3c>)
 801b84c:	f853 2b04 	ldr.w	r2, [r3], #4
 801b850:	9105      	str	r1, [sp, #20]
 801b852:	6800      	ldr	r0, [r0, #0]
 801b854:	9301      	str	r3, [sp, #4]
 801b856:	a902      	add	r1, sp, #8
 801b858:	f002 f97e 	bl	801db58 <_svfiprintf_r>
 801b85c:	9b02      	ldr	r3, [sp, #8]
 801b85e:	2200      	movs	r2, #0
 801b860:	701a      	strb	r2, [r3, #0]
 801b862:	b01c      	add	sp, #112	; 0x70
 801b864:	f85d eb04 	ldr.w	lr, [sp], #4
 801b868:	b003      	add	sp, #12
 801b86a:	4770      	bx	lr
 801b86c:	200001f8 	.word	0x200001f8
 801b870:	ffff0208 	.word	0xffff0208

0801b874 <__sread>:
 801b874:	b510      	push	{r4, lr}
 801b876:	460c      	mov	r4, r1
 801b878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b87c:	f000 f98a 	bl	801bb94 <_read_r>
 801b880:	2800      	cmp	r0, #0
 801b882:	bfab      	itete	ge
 801b884:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b886:	89a3      	ldrhlt	r3, [r4, #12]
 801b888:	181b      	addge	r3, r3, r0
 801b88a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b88e:	bfac      	ite	ge
 801b890:	6563      	strge	r3, [r4, #84]	; 0x54
 801b892:	81a3      	strhlt	r3, [r4, #12]
 801b894:	bd10      	pop	{r4, pc}

0801b896 <__swrite>:
 801b896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b89a:	461f      	mov	r7, r3
 801b89c:	898b      	ldrh	r3, [r1, #12]
 801b89e:	05db      	lsls	r3, r3, #23
 801b8a0:	4605      	mov	r5, r0
 801b8a2:	460c      	mov	r4, r1
 801b8a4:	4616      	mov	r6, r2
 801b8a6:	d505      	bpl.n	801b8b4 <__swrite+0x1e>
 801b8a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b8ac:	2302      	movs	r3, #2
 801b8ae:	2200      	movs	r2, #0
 801b8b0:	f000 f95e 	bl	801bb70 <_lseek_r>
 801b8b4:	89a3      	ldrh	r3, [r4, #12]
 801b8b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b8ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b8be:	81a3      	strh	r3, [r4, #12]
 801b8c0:	4632      	mov	r2, r6
 801b8c2:	463b      	mov	r3, r7
 801b8c4:	4628      	mov	r0, r5
 801b8c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b8ca:	f000 b999 	b.w	801bc00 <_write_r>

0801b8ce <__sseek>:
 801b8ce:	b510      	push	{r4, lr}
 801b8d0:	460c      	mov	r4, r1
 801b8d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b8d6:	f000 f94b 	bl	801bb70 <_lseek_r>
 801b8da:	1c43      	adds	r3, r0, #1
 801b8dc:	89a3      	ldrh	r3, [r4, #12]
 801b8de:	bf15      	itete	ne
 801b8e0:	6560      	strne	r0, [r4, #84]	; 0x54
 801b8e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b8e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b8ea:	81a3      	strheq	r3, [r4, #12]
 801b8ec:	bf18      	it	ne
 801b8ee:	81a3      	strhne	r3, [r4, #12]
 801b8f0:	bd10      	pop	{r4, pc}

0801b8f2 <__sclose>:
 801b8f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b8f6:	f000 b92b 	b.w	801bb50 <_close_r>

0801b8fa <__swbuf_r>:
 801b8fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8fc:	460e      	mov	r6, r1
 801b8fe:	4614      	mov	r4, r2
 801b900:	4605      	mov	r5, r0
 801b902:	b118      	cbz	r0, 801b90c <__swbuf_r+0x12>
 801b904:	6a03      	ldr	r3, [r0, #32]
 801b906:	b90b      	cbnz	r3, 801b90c <__swbuf_r+0x12>
 801b908:	f7ff fddc 	bl	801b4c4 <__sinit>
 801b90c:	69a3      	ldr	r3, [r4, #24]
 801b90e:	60a3      	str	r3, [r4, #8]
 801b910:	89a3      	ldrh	r3, [r4, #12]
 801b912:	071a      	lsls	r2, r3, #28
 801b914:	d525      	bpl.n	801b962 <__swbuf_r+0x68>
 801b916:	6923      	ldr	r3, [r4, #16]
 801b918:	b31b      	cbz	r3, 801b962 <__swbuf_r+0x68>
 801b91a:	6823      	ldr	r3, [r4, #0]
 801b91c:	6922      	ldr	r2, [r4, #16]
 801b91e:	1a98      	subs	r0, r3, r2
 801b920:	6963      	ldr	r3, [r4, #20]
 801b922:	b2f6      	uxtb	r6, r6
 801b924:	4283      	cmp	r3, r0
 801b926:	4637      	mov	r7, r6
 801b928:	dc04      	bgt.n	801b934 <__swbuf_r+0x3a>
 801b92a:	4621      	mov	r1, r4
 801b92c:	4628      	mov	r0, r5
 801b92e:	f002 fbdb 	bl	801e0e8 <_fflush_r>
 801b932:	b9e0      	cbnz	r0, 801b96e <__swbuf_r+0x74>
 801b934:	68a3      	ldr	r3, [r4, #8]
 801b936:	3b01      	subs	r3, #1
 801b938:	60a3      	str	r3, [r4, #8]
 801b93a:	6823      	ldr	r3, [r4, #0]
 801b93c:	1c5a      	adds	r2, r3, #1
 801b93e:	6022      	str	r2, [r4, #0]
 801b940:	701e      	strb	r6, [r3, #0]
 801b942:	6962      	ldr	r2, [r4, #20]
 801b944:	1c43      	adds	r3, r0, #1
 801b946:	429a      	cmp	r2, r3
 801b948:	d004      	beq.n	801b954 <__swbuf_r+0x5a>
 801b94a:	89a3      	ldrh	r3, [r4, #12]
 801b94c:	07db      	lsls	r3, r3, #31
 801b94e:	d506      	bpl.n	801b95e <__swbuf_r+0x64>
 801b950:	2e0a      	cmp	r6, #10
 801b952:	d104      	bne.n	801b95e <__swbuf_r+0x64>
 801b954:	4621      	mov	r1, r4
 801b956:	4628      	mov	r0, r5
 801b958:	f002 fbc6 	bl	801e0e8 <_fflush_r>
 801b95c:	b938      	cbnz	r0, 801b96e <__swbuf_r+0x74>
 801b95e:	4638      	mov	r0, r7
 801b960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b962:	4621      	mov	r1, r4
 801b964:	4628      	mov	r0, r5
 801b966:	f000 f805 	bl	801b974 <__swsetup_r>
 801b96a:	2800      	cmp	r0, #0
 801b96c:	d0d5      	beq.n	801b91a <__swbuf_r+0x20>
 801b96e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801b972:	e7f4      	b.n	801b95e <__swbuf_r+0x64>

0801b974 <__swsetup_r>:
 801b974:	b538      	push	{r3, r4, r5, lr}
 801b976:	4b2a      	ldr	r3, [pc, #168]	; (801ba20 <__swsetup_r+0xac>)
 801b978:	4605      	mov	r5, r0
 801b97a:	6818      	ldr	r0, [r3, #0]
 801b97c:	460c      	mov	r4, r1
 801b97e:	b118      	cbz	r0, 801b988 <__swsetup_r+0x14>
 801b980:	6a03      	ldr	r3, [r0, #32]
 801b982:	b90b      	cbnz	r3, 801b988 <__swsetup_r+0x14>
 801b984:	f7ff fd9e 	bl	801b4c4 <__sinit>
 801b988:	89a3      	ldrh	r3, [r4, #12]
 801b98a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b98e:	0718      	lsls	r0, r3, #28
 801b990:	d422      	bmi.n	801b9d8 <__swsetup_r+0x64>
 801b992:	06d9      	lsls	r1, r3, #27
 801b994:	d407      	bmi.n	801b9a6 <__swsetup_r+0x32>
 801b996:	2309      	movs	r3, #9
 801b998:	602b      	str	r3, [r5, #0]
 801b99a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b99e:	81a3      	strh	r3, [r4, #12]
 801b9a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b9a4:	e034      	b.n	801ba10 <__swsetup_r+0x9c>
 801b9a6:	0758      	lsls	r0, r3, #29
 801b9a8:	d512      	bpl.n	801b9d0 <__swsetup_r+0x5c>
 801b9aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b9ac:	b141      	cbz	r1, 801b9c0 <__swsetup_r+0x4c>
 801b9ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b9b2:	4299      	cmp	r1, r3
 801b9b4:	d002      	beq.n	801b9bc <__swsetup_r+0x48>
 801b9b6:	4628      	mov	r0, r5
 801b9b8:	f000 fffc 	bl	801c9b4 <_free_r>
 801b9bc:	2300      	movs	r3, #0
 801b9be:	6363      	str	r3, [r4, #52]	; 0x34
 801b9c0:	89a3      	ldrh	r3, [r4, #12]
 801b9c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b9c6:	81a3      	strh	r3, [r4, #12]
 801b9c8:	2300      	movs	r3, #0
 801b9ca:	6063      	str	r3, [r4, #4]
 801b9cc:	6923      	ldr	r3, [r4, #16]
 801b9ce:	6023      	str	r3, [r4, #0]
 801b9d0:	89a3      	ldrh	r3, [r4, #12]
 801b9d2:	f043 0308 	orr.w	r3, r3, #8
 801b9d6:	81a3      	strh	r3, [r4, #12]
 801b9d8:	6923      	ldr	r3, [r4, #16]
 801b9da:	b94b      	cbnz	r3, 801b9f0 <__swsetup_r+0x7c>
 801b9dc:	89a3      	ldrh	r3, [r4, #12]
 801b9de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b9e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b9e6:	d003      	beq.n	801b9f0 <__swsetup_r+0x7c>
 801b9e8:	4621      	mov	r1, r4
 801b9ea:	4628      	mov	r0, r5
 801b9ec:	f002 fbca 	bl	801e184 <__smakebuf_r>
 801b9f0:	89a0      	ldrh	r0, [r4, #12]
 801b9f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b9f6:	f010 0301 	ands.w	r3, r0, #1
 801b9fa:	d00a      	beq.n	801ba12 <__swsetup_r+0x9e>
 801b9fc:	2300      	movs	r3, #0
 801b9fe:	60a3      	str	r3, [r4, #8]
 801ba00:	6963      	ldr	r3, [r4, #20]
 801ba02:	425b      	negs	r3, r3
 801ba04:	61a3      	str	r3, [r4, #24]
 801ba06:	6923      	ldr	r3, [r4, #16]
 801ba08:	b943      	cbnz	r3, 801ba1c <__swsetup_r+0xa8>
 801ba0a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ba0e:	d1c4      	bne.n	801b99a <__swsetup_r+0x26>
 801ba10:	bd38      	pop	{r3, r4, r5, pc}
 801ba12:	0781      	lsls	r1, r0, #30
 801ba14:	bf58      	it	pl
 801ba16:	6963      	ldrpl	r3, [r4, #20]
 801ba18:	60a3      	str	r3, [r4, #8]
 801ba1a:	e7f4      	b.n	801ba06 <__swsetup_r+0x92>
 801ba1c:	2000      	movs	r0, #0
 801ba1e:	e7f7      	b.n	801ba10 <__swsetup_r+0x9c>
 801ba20:	200001f8 	.word	0x200001f8

0801ba24 <memcmp>:
 801ba24:	b510      	push	{r4, lr}
 801ba26:	3901      	subs	r1, #1
 801ba28:	4402      	add	r2, r0
 801ba2a:	4290      	cmp	r0, r2
 801ba2c:	d101      	bne.n	801ba32 <memcmp+0xe>
 801ba2e:	2000      	movs	r0, #0
 801ba30:	e005      	b.n	801ba3e <memcmp+0x1a>
 801ba32:	7803      	ldrb	r3, [r0, #0]
 801ba34:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ba38:	42a3      	cmp	r3, r4
 801ba3a:	d001      	beq.n	801ba40 <memcmp+0x1c>
 801ba3c:	1b18      	subs	r0, r3, r4
 801ba3e:	bd10      	pop	{r4, pc}
 801ba40:	3001      	adds	r0, #1
 801ba42:	e7f2      	b.n	801ba2a <memcmp+0x6>

0801ba44 <memset>:
 801ba44:	4402      	add	r2, r0
 801ba46:	4603      	mov	r3, r0
 801ba48:	4293      	cmp	r3, r2
 801ba4a:	d100      	bne.n	801ba4e <memset+0xa>
 801ba4c:	4770      	bx	lr
 801ba4e:	f803 1b01 	strb.w	r1, [r3], #1
 801ba52:	e7f9      	b.n	801ba48 <memset+0x4>

0801ba54 <strchr>:
 801ba54:	b2c9      	uxtb	r1, r1
 801ba56:	4603      	mov	r3, r0
 801ba58:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ba5c:	b11a      	cbz	r2, 801ba66 <strchr+0x12>
 801ba5e:	428a      	cmp	r2, r1
 801ba60:	d1f9      	bne.n	801ba56 <strchr+0x2>
 801ba62:	4618      	mov	r0, r3
 801ba64:	4770      	bx	lr
 801ba66:	2900      	cmp	r1, #0
 801ba68:	bf18      	it	ne
 801ba6a:	2300      	movne	r3, #0
 801ba6c:	e7f9      	b.n	801ba62 <strchr+0xe>

0801ba6e <strncmp>:
 801ba6e:	b510      	push	{r4, lr}
 801ba70:	b16a      	cbz	r2, 801ba8e <strncmp+0x20>
 801ba72:	3901      	subs	r1, #1
 801ba74:	1884      	adds	r4, r0, r2
 801ba76:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ba7a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801ba7e:	429a      	cmp	r2, r3
 801ba80:	d103      	bne.n	801ba8a <strncmp+0x1c>
 801ba82:	42a0      	cmp	r0, r4
 801ba84:	d001      	beq.n	801ba8a <strncmp+0x1c>
 801ba86:	2a00      	cmp	r2, #0
 801ba88:	d1f5      	bne.n	801ba76 <strncmp+0x8>
 801ba8a:	1ad0      	subs	r0, r2, r3
 801ba8c:	bd10      	pop	{r4, pc}
 801ba8e:	4610      	mov	r0, r2
 801ba90:	e7fc      	b.n	801ba8c <strncmp+0x1e>

0801ba92 <strncpy>:
 801ba92:	b510      	push	{r4, lr}
 801ba94:	3901      	subs	r1, #1
 801ba96:	4603      	mov	r3, r0
 801ba98:	b132      	cbz	r2, 801baa8 <strncpy+0x16>
 801ba9a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ba9e:	f803 4b01 	strb.w	r4, [r3], #1
 801baa2:	3a01      	subs	r2, #1
 801baa4:	2c00      	cmp	r4, #0
 801baa6:	d1f7      	bne.n	801ba98 <strncpy+0x6>
 801baa8:	441a      	add	r2, r3
 801baaa:	2100      	movs	r1, #0
 801baac:	4293      	cmp	r3, r2
 801baae:	d100      	bne.n	801bab2 <strncpy+0x20>
 801bab0:	bd10      	pop	{r4, pc}
 801bab2:	f803 1b01 	strb.w	r1, [r3], #1
 801bab6:	e7f9      	b.n	801baac <strncpy+0x1a>

0801bab8 <strrchr>:
 801bab8:	b513      	push	{r0, r1, r4, lr}
 801baba:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 801babe:	4603      	mov	r3, r0
 801bac0:	d110      	bne.n	801bae4 <strrchr+0x2c>
 801bac2:	b002      	add	sp, #8
 801bac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bac8:	f7ff bfc4 	b.w	801ba54 <strchr>
 801bacc:	1c43      	adds	r3, r0, #1
 801bace:	4604      	mov	r4, r0
 801bad0:	4618      	mov	r0, r3
 801bad2:	9101      	str	r1, [sp, #4]
 801bad4:	f7ff ffbe 	bl	801ba54 <strchr>
 801bad8:	9901      	ldr	r1, [sp, #4]
 801bada:	2800      	cmp	r0, #0
 801badc:	d1f6      	bne.n	801bacc <strrchr+0x14>
 801bade:	4620      	mov	r0, r4
 801bae0:	b002      	add	sp, #8
 801bae2:	bd10      	pop	{r4, pc}
 801bae4:	2400      	movs	r4, #0
 801bae6:	e7f3      	b.n	801bad0 <strrchr+0x18>

0801bae8 <_raise_r>:
 801bae8:	291f      	cmp	r1, #31
 801baea:	b538      	push	{r3, r4, r5, lr}
 801baec:	4604      	mov	r4, r0
 801baee:	460d      	mov	r5, r1
 801baf0:	d904      	bls.n	801bafc <_raise_r+0x14>
 801baf2:	2316      	movs	r3, #22
 801baf4:	6003      	str	r3, [r0, #0]
 801baf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bafa:	bd38      	pop	{r3, r4, r5, pc}
 801bafc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801bafe:	b112      	cbz	r2, 801bb06 <_raise_r+0x1e>
 801bb00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bb04:	b94b      	cbnz	r3, 801bb1a <_raise_r+0x32>
 801bb06:	4620      	mov	r0, r4
 801bb08:	f000 f868 	bl	801bbdc <_getpid_r>
 801bb0c:	462a      	mov	r2, r5
 801bb0e:	4601      	mov	r1, r0
 801bb10:	4620      	mov	r0, r4
 801bb12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bb16:	f000 b84f 	b.w	801bbb8 <_kill_r>
 801bb1a:	2b01      	cmp	r3, #1
 801bb1c:	d00a      	beq.n	801bb34 <_raise_r+0x4c>
 801bb1e:	1c59      	adds	r1, r3, #1
 801bb20:	d103      	bne.n	801bb2a <_raise_r+0x42>
 801bb22:	2316      	movs	r3, #22
 801bb24:	6003      	str	r3, [r0, #0]
 801bb26:	2001      	movs	r0, #1
 801bb28:	e7e7      	b.n	801bafa <_raise_r+0x12>
 801bb2a:	2400      	movs	r4, #0
 801bb2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801bb30:	4628      	mov	r0, r5
 801bb32:	4798      	blx	r3
 801bb34:	2000      	movs	r0, #0
 801bb36:	e7e0      	b.n	801bafa <_raise_r+0x12>

0801bb38 <raise>:
 801bb38:	4b02      	ldr	r3, [pc, #8]	; (801bb44 <raise+0xc>)
 801bb3a:	4601      	mov	r1, r0
 801bb3c:	6818      	ldr	r0, [r3, #0]
 801bb3e:	f7ff bfd3 	b.w	801bae8 <_raise_r>
 801bb42:	bf00      	nop
 801bb44:	200001f8 	.word	0x200001f8

0801bb48 <_localeconv_r>:
 801bb48:	4800      	ldr	r0, [pc, #0]	; (801bb4c <_localeconv_r+0x4>)
 801bb4a:	4770      	bx	lr
 801bb4c:	20000130 	.word	0x20000130

0801bb50 <_close_r>:
 801bb50:	b538      	push	{r3, r4, r5, lr}
 801bb52:	4d06      	ldr	r5, [pc, #24]	; (801bb6c <_close_r+0x1c>)
 801bb54:	2300      	movs	r3, #0
 801bb56:	4604      	mov	r4, r0
 801bb58:	4608      	mov	r0, r1
 801bb5a:	602b      	str	r3, [r5, #0]
 801bb5c:	f7f1 ff87 	bl	800da6e <_close>
 801bb60:	1c43      	adds	r3, r0, #1
 801bb62:	d102      	bne.n	801bb6a <_close_r+0x1a>
 801bb64:	682b      	ldr	r3, [r5, #0]
 801bb66:	b103      	cbz	r3, 801bb6a <_close_r+0x1a>
 801bb68:	6023      	str	r3, [r4, #0]
 801bb6a:	bd38      	pop	{r3, r4, r5, pc}
 801bb6c:	20001868 	.word	0x20001868

0801bb70 <_lseek_r>:
 801bb70:	b538      	push	{r3, r4, r5, lr}
 801bb72:	4d07      	ldr	r5, [pc, #28]	; (801bb90 <_lseek_r+0x20>)
 801bb74:	4604      	mov	r4, r0
 801bb76:	4608      	mov	r0, r1
 801bb78:	4611      	mov	r1, r2
 801bb7a:	2200      	movs	r2, #0
 801bb7c:	602a      	str	r2, [r5, #0]
 801bb7e:	461a      	mov	r2, r3
 801bb80:	f7f1 ff9c 	bl	800dabc <_lseek>
 801bb84:	1c43      	adds	r3, r0, #1
 801bb86:	d102      	bne.n	801bb8e <_lseek_r+0x1e>
 801bb88:	682b      	ldr	r3, [r5, #0]
 801bb8a:	b103      	cbz	r3, 801bb8e <_lseek_r+0x1e>
 801bb8c:	6023      	str	r3, [r4, #0]
 801bb8e:	bd38      	pop	{r3, r4, r5, pc}
 801bb90:	20001868 	.word	0x20001868

0801bb94 <_read_r>:
 801bb94:	b538      	push	{r3, r4, r5, lr}
 801bb96:	4d07      	ldr	r5, [pc, #28]	; (801bbb4 <_read_r+0x20>)
 801bb98:	4604      	mov	r4, r0
 801bb9a:	4608      	mov	r0, r1
 801bb9c:	4611      	mov	r1, r2
 801bb9e:	2200      	movs	r2, #0
 801bba0:	602a      	str	r2, [r5, #0]
 801bba2:	461a      	mov	r2, r3
 801bba4:	f7f1 ff2a 	bl	800d9fc <_read>
 801bba8:	1c43      	adds	r3, r0, #1
 801bbaa:	d102      	bne.n	801bbb2 <_read_r+0x1e>
 801bbac:	682b      	ldr	r3, [r5, #0]
 801bbae:	b103      	cbz	r3, 801bbb2 <_read_r+0x1e>
 801bbb0:	6023      	str	r3, [r4, #0]
 801bbb2:	bd38      	pop	{r3, r4, r5, pc}
 801bbb4:	20001868 	.word	0x20001868

0801bbb8 <_kill_r>:
 801bbb8:	b538      	push	{r3, r4, r5, lr}
 801bbba:	4d07      	ldr	r5, [pc, #28]	; (801bbd8 <_kill_r+0x20>)
 801bbbc:	2300      	movs	r3, #0
 801bbbe:	4604      	mov	r4, r0
 801bbc0:	4608      	mov	r0, r1
 801bbc2:	4611      	mov	r1, r2
 801bbc4:	602b      	str	r3, [r5, #0]
 801bbc6:	f7f1 feff 	bl	800d9c8 <_kill>
 801bbca:	1c43      	adds	r3, r0, #1
 801bbcc:	d102      	bne.n	801bbd4 <_kill_r+0x1c>
 801bbce:	682b      	ldr	r3, [r5, #0]
 801bbd0:	b103      	cbz	r3, 801bbd4 <_kill_r+0x1c>
 801bbd2:	6023      	str	r3, [r4, #0]
 801bbd4:	bd38      	pop	{r3, r4, r5, pc}
 801bbd6:	bf00      	nop
 801bbd8:	20001868 	.word	0x20001868

0801bbdc <_getpid_r>:
 801bbdc:	f7f1 beec 	b.w	800d9b8 <_getpid>

0801bbe0 <_sbrk_r>:
 801bbe0:	b538      	push	{r3, r4, r5, lr}
 801bbe2:	4d06      	ldr	r5, [pc, #24]	; (801bbfc <_sbrk_r+0x1c>)
 801bbe4:	2300      	movs	r3, #0
 801bbe6:	4604      	mov	r4, r0
 801bbe8:	4608      	mov	r0, r1
 801bbea:	602b      	str	r3, [r5, #0]
 801bbec:	f7f1 ff74 	bl	800dad8 <_sbrk>
 801bbf0:	1c43      	adds	r3, r0, #1
 801bbf2:	d102      	bne.n	801bbfa <_sbrk_r+0x1a>
 801bbf4:	682b      	ldr	r3, [r5, #0]
 801bbf6:	b103      	cbz	r3, 801bbfa <_sbrk_r+0x1a>
 801bbf8:	6023      	str	r3, [r4, #0]
 801bbfa:	bd38      	pop	{r3, r4, r5, pc}
 801bbfc:	20001868 	.word	0x20001868

0801bc00 <_write_r>:
 801bc00:	b538      	push	{r3, r4, r5, lr}
 801bc02:	4d07      	ldr	r5, [pc, #28]	; (801bc20 <_write_r+0x20>)
 801bc04:	4604      	mov	r4, r0
 801bc06:	4608      	mov	r0, r1
 801bc08:	4611      	mov	r1, r2
 801bc0a:	2200      	movs	r2, #0
 801bc0c:	602a      	str	r2, [r5, #0]
 801bc0e:	461a      	mov	r2, r3
 801bc10:	f7f1 ff11 	bl	800da36 <_write>
 801bc14:	1c43      	adds	r3, r0, #1
 801bc16:	d102      	bne.n	801bc1e <_write_r+0x1e>
 801bc18:	682b      	ldr	r3, [r5, #0]
 801bc1a:	b103      	cbz	r3, 801bc1e <_write_r+0x1e>
 801bc1c:	6023      	str	r3, [r4, #0]
 801bc1e:	bd38      	pop	{r3, r4, r5, pc}
 801bc20:	20001868 	.word	0x20001868

0801bc24 <__errno>:
 801bc24:	4b01      	ldr	r3, [pc, #4]	; (801bc2c <__errno+0x8>)
 801bc26:	6818      	ldr	r0, [r3, #0]
 801bc28:	4770      	bx	lr
 801bc2a:	bf00      	nop
 801bc2c:	200001f8 	.word	0x200001f8

0801bc30 <__libc_init_array>:
 801bc30:	b570      	push	{r4, r5, r6, lr}
 801bc32:	4d0d      	ldr	r5, [pc, #52]	; (801bc68 <__libc_init_array+0x38>)
 801bc34:	4c0d      	ldr	r4, [pc, #52]	; (801bc6c <__libc_init_array+0x3c>)
 801bc36:	1b64      	subs	r4, r4, r5
 801bc38:	10a4      	asrs	r4, r4, #2
 801bc3a:	2600      	movs	r6, #0
 801bc3c:	42a6      	cmp	r6, r4
 801bc3e:	d109      	bne.n	801bc54 <__libc_init_array+0x24>
 801bc40:	4d0b      	ldr	r5, [pc, #44]	; (801bc70 <__libc_init_array+0x40>)
 801bc42:	4c0c      	ldr	r4, [pc, #48]	; (801bc74 <__libc_init_array+0x44>)
 801bc44:	f002 fb62 	bl	801e30c <_init>
 801bc48:	1b64      	subs	r4, r4, r5
 801bc4a:	10a4      	asrs	r4, r4, #2
 801bc4c:	2600      	movs	r6, #0
 801bc4e:	42a6      	cmp	r6, r4
 801bc50:	d105      	bne.n	801bc5e <__libc_init_array+0x2e>
 801bc52:	bd70      	pop	{r4, r5, r6, pc}
 801bc54:	f855 3b04 	ldr.w	r3, [r5], #4
 801bc58:	4798      	blx	r3
 801bc5a:	3601      	adds	r6, #1
 801bc5c:	e7ee      	b.n	801bc3c <__libc_init_array+0xc>
 801bc5e:	f855 3b04 	ldr.w	r3, [r5], #4
 801bc62:	4798      	blx	r3
 801bc64:	3601      	adds	r6, #1
 801bc66:	e7f2      	b.n	801bc4e <__libc_init_array+0x1e>
 801bc68:	080258b4 	.word	0x080258b4
 801bc6c:	080258b4 	.word	0x080258b4
 801bc70:	080258b4 	.word	0x080258b4
 801bc74:	080258c0 	.word	0x080258c0

0801bc78 <__retarget_lock_init_recursive>:
 801bc78:	4770      	bx	lr

0801bc7a <__retarget_lock_acquire_recursive>:
 801bc7a:	4770      	bx	lr

0801bc7c <__retarget_lock_release_recursive>:
 801bc7c:	4770      	bx	lr

0801bc7e <strcpy>:
 801bc7e:	4603      	mov	r3, r0
 801bc80:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bc84:	f803 2b01 	strb.w	r2, [r3], #1
 801bc88:	2a00      	cmp	r2, #0
 801bc8a:	d1f9      	bne.n	801bc80 <strcpy+0x2>
 801bc8c:	4770      	bx	lr

0801bc8e <memcpy>:
 801bc8e:	440a      	add	r2, r1
 801bc90:	4291      	cmp	r1, r2
 801bc92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801bc96:	d100      	bne.n	801bc9a <memcpy+0xc>
 801bc98:	4770      	bx	lr
 801bc9a:	b510      	push	{r4, lr}
 801bc9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bca0:	f803 4f01 	strb.w	r4, [r3, #1]!
 801bca4:	4291      	cmp	r1, r2
 801bca6:	d1f9      	bne.n	801bc9c <memcpy+0xe>
 801bca8:	bd10      	pop	{r4, pc}
 801bcaa:	0000      	movs	r0, r0
 801bcac:	0000      	movs	r0, r0
	...

0801bcb0 <nan>:
 801bcb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801bcb8 <nan+0x8>
 801bcb4:	4770      	bx	lr
 801bcb6:	bf00      	nop
 801bcb8:	00000000 	.word	0x00000000
 801bcbc:	7ff80000 	.word	0x7ff80000

0801bcc0 <quorem>:
 801bcc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcc4:	6903      	ldr	r3, [r0, #16]
 801bcc6:	690c      	ldr	r4, [r1, #16]
 801bcc8:	42a3      	cmp	r3, r4
 801bcca:	4607      	mov	r7, r0
 801bccc:	db7e      	blt.n	801bdcc <quorem+0x10c>
 801bcce:	3c01      	subs	r4, #1
 801bcd0:	f101 0814 	add.w	r8, r1, #20
 801bcd4:	f100 0514 	add.w	r5, r0, #20
 801bcd8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bcdc:	9301      	str	r3, [sp, #4]
 801bcde:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801bce2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801bce6:	3301      	adds	r3, #1
 801bce8:	429a      	cmp	r2, r3
 801bcea:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801bcee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801bcf2:	fbb2 f6f3 	udiv	r6, r2, r3
 801bcf6:	d331      	bcc.n	801bd5c <quorem+0x9c>
 801bcf8:	f04f 0e00 	mov.w	lr, #0
 801bcfc:	4640      	mov	r0, r8
 801bcfe:	46ac      	mov	ip, r5
 801bd00:	46f2      	mov	sl, lr
 801bd02:	f850 2b04 	ldr.w	r2, [r0], #4
 801bd06:	b293      	uxth	r3, r2
 801bd08:	fb06 e303 	mla	r3, r6, r3, lr
 801bd0c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801bd10:	0c1a      	lsrs	r2, r3, #16
 801bd12:	b29b      	uxth	r3, r3
 801bd14:	ebaa 0303 	sub.w	r3, sl, r3
 801bd18:	f8dc a000 	ldr.w	sl, [ip]
 801bd1c:	fa13 f38a 	uxtah	r3, r3, sl
 801bd20:	fb06 220e 	mla	r2, r6, lr, r2
 801bd24:	9300      	str	r3, [sp, #0]
 801bd26:	9b00      	ldr	r3, [sp, #0]
 801bd28:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801bd2c:	b292      	uxth	r2, r2
 801bd2e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801bd32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801bd36:	f8bd 3000 	ldrh.w	r3, [sp]
 801bd3a:	4581      	cmp	r9, r0
 801bd3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bd40:	f84c 3b04 	str.w	r3, [ip], #4
 801bd44:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801bd48:	d2db      	bcs.n	801bd02 <quorem+0x42>
 801bd4a:	f855 300b 	ldr.w	r3, [r5, fp]
 801bd4e:	b92b      	cbnz	r3, 801bd5c <quorem+0x9c>
 801bd50:	9b01      	ldr	r3, [sp, #4]
 801bd52:	3b04      	subs	r3, #4
 801bd54:	429d      	cmp	r5, r3
 801bd56:	461a      	mov	r2, r3
 801bd58:	d32c      	bcc.n	801bdb4 <quorem+0xf4>
 801bd5a:	613c      	str	r4, [r7, #16]
 801bd5c:	4638      	mov	r0, r7
 801bd5e:	f001 fca5 	bl	801d6ac <__mcmp>
 801bd62:	2800      	cmp	r0, #0
 801bd64:	db22      	blt.n	801bdac <quorem+0xec>
 801bd66:	3601      	adds	r6, #1
 801bd68:	4629      	mov	r1, r5
 801bd6a:	2000      	movs	r0, #0
 801bd6c:	f858 2b04 	ldr.w	r2, [r8], #4
 801bd70:	f8d1 c000 	ldr.w	ip, [r1]
 801bd74:	b293      	uxth	r3, r2
 801bd76:	1ac3      	subs	r3, r0, r3
 801bd78:	0c12      	lsrs	r2, r2, #16
 801bd7a:	fa13 f38c 	uxtah	r3, r3, ip
 801bd7e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801bd82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801bd86:	b29b      	uxth	r3, r3
 801bd88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bd8c:	45c1      	cmp	r9, r8
 801bd8e:	f841 3b04 	str.w	r3, [r1], #4
 801bd92:	ea4f 4022 	mov.w	r0, r2, asr #16
 801bd96:	d2e9      	bcs.n	801bd6c <quorem+0xac>
 801bd98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801bd9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bda0:	b922      	cbnz	r2, 801bdac <quorem+0xec>
 801bda2:	3b04      	subs	r3, #4
 801bda4:	429d      	cmp	r5, r3
 801bda6:	461a      	mov	r2, r3
 801bda8:	d30a      	bcc.n	801bdc0 <quorem+0x100>
 801bdaa:	613c      	str	r4, [r7, #16]
 801bdac:	4630      	mov	r0, r6
 801bdae:	b003      	add	sp, #12
 801bdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdb4:	6812      	ldr	r2, [r2, #0]
 801bdb6:	3b04      	subs	r3, #4
 801bdb8:	2a00      	cmp	r2, #0
 801bdba:	d1ce      	bne.n	801bd5a <quorem+0x9a>
 801bdbc:	3c01      	subs	r4, #1
 801bdbe:	e7c9      	b.n	801bd54 <quorem+0x94>
 801bdc0:	6812      	ldr	r2, [r2, #0]
 801bdc2:	3b04      	subs	r3, #4
 801bdc4:	2a00      	cmp	r2, #0
 801bdc6:	d1f0      	bne.n	801bdaa <quorem+0xea>
 801bdc8:	3c01      	subs	r4, #1
 801bdca:	e7eb      	b.n	801bda4 <quorem+0xe4>
 801bdcc:	2000      	movs	r0, #0
 801bdce:	e7ee      	b.n	801bdae <quorem+0xee>

0801bdd0 <_dtoa_r>:
 801bdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdd4:	ed2d 8b04 	vpush	{d8-d9}
 801bdd8:	69c5      	ldr	r5, [r0, #28]
 801bdda:	b093      	sub	sp, #76	; 0x4c
 801bddc:	ed8d 0b02 	vstr	d0, [sp, #8]
 801bde0:	ec57 6b10 	vmov	r6, r7, d0
 801bde4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801bde8:	9107      	str	r1, [sp, #28]
 801bdea:	4604      	mov	r4, r0
 801bdec:	920a      	str	r2, [sp, #40]	; 0x28
 801bdee:	930d      	str	r3, [sp, #52]	; 0x34
 801bdf0:	b975      	cbnz	r5, 801be10 <_dtoa_r+0x40>
 801bdf2:	2010      	movs	r0, #16
 801bdf4:	f7fd fedc 	bl	8019bb0 <malloc>
 801bdf8:	4602      	mov	r2, r0
 801bdfa:	61e0      	str	r0, [r4, #28]
 801bdfc:	b920      	cbnz	r0, 801be08 <_dtoa_r+0x38>
 801bdfe:	4bae      	ldr	r3, [pc, #696]	; (801c0b8 <_dtoa_r+0x2e8>)
 801be00:	21ef      	movs	r1, #239	; 0xef
 801be02:	48ae      	ldr	r0, [pc, #696]	; (801c0bc <_dtoa_r+0x2ec>)
 801be04:	f002 fa36 	bl	801e274 <__assert_func>
 801be08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801be0c:	6005      	str	r5, [r0, #0]
 801be0e:	60c5      	str	r5, [r0, #12]
 801be10:	69e3      	ldr	r3, [r4, #28]
 801be12:	6819      	ldr	r1, [r3, #0]
 801be14:	b151      	cbz	r1, 801be2c <_dtoa_r+0x5c>
 801be16:	685a      	ldr	r2, [r3, #4]
 801be18:	604a      	str	r2, [r1, #4]
 801be1a:	2301      	movs	r3, #1
 801be1c:	4093      	lsls	r3, r2
 801be1e:	608b      	str	r3, [r1, #8]
 801be20:	4620      	mov	r0, r4
 801be22:	f001 f9bd 	bl	801d1a0 <_Bfree>
 801be26:	69e3      	ldr	r3, [r4, #28]
 801be28:	2200      	movs	r2, #0
 801be2a:	601a      	str	r2, [r3, #0]
 801be2c:	1e3b      	subs	r3, r7, #0
 801be2e:	bfbb      	ittet	lt
 801be30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801be34:	9303      	strlt	r3, [sp, #12]
 801be36:	2300      	movge	r3, #0
 801be38:	2201      	movlt	r2, #1
 801be3a:	bfac      	ite	ge
 801be3c:	f8c8 3000 	strge.w	r3, [r8]
 801be40:	f8c8 2000 	strlt.w	r2, [r8]
 801be44:	4b9e      	ldr	r3, [pc, #632]	; (801c0c0 <_dtoa_r+0x2f0>)
 801be46:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801be4a:	ea33 0308 	bics.w	r3, r3, r8
 801be4e:	d11b      	bne.n	801be88 <_dtoa_r+0xb8>
 801be50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801be52:	f242 730f 	movw	r3, #9999	; 0x270f
 801be56:	6013      	str	r3, [r2, #0]
 801be58:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801be5c:	4333      	orrs	r3, r6
 801be5e:	f000 8593 	beq.w	801c988 <_dtoa_r+0xbb8>
 801be62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801be64:	b963      	cbnz	r3, 801be80 <_dtoa_r+0xb0>
 801be66:	4b97      	ldr	r3, [pc, #604]	; (801c0c4 <_dtoa_r+0x2f4>)
 801be68:	e027      	b.n	801beba <_dtoa_r+0xea>
 801be6a:	4b97      	ldr	r3, [pc, #604]	; (801c0c8 <_dtoa_r+0x2f8>)
 801be6c:	9300      	str	r3, [sp, #0]
 801be6e:	3308      	adds	r3, #8
 801be70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801be72:	6013      	str	r3, [r2, #0]
 801be74:	9800      	ldr	r0, [sp, #0]
 801be76:	b013      	add	sp, #76	; 0x4c
 801be78:	ecbd 8b04 	vpop	{d8-d9}
 801be7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be80:	4b90      	ldr	r3, [pc, #576]	; (801c0c4 <_dtoa_r+0x2f4>)
 801be82:	9300      	str	r3, [sp, #0]
 801be84:	3303      	adds	r3, #3
 801be86:	e7f3      	b.n	801be70 <_dtoa_r+0xa0>
 801be88:	ed9d 7b02 	vldr	d7, [sp, #8]
 801be8c:	2200      	movs	r2, #0
 801be8e:	ec51 0b17 	vmov	r0, r1, d7
 801be92:	eeb0 8a47 	vmov.f32	s16, s14
 801be96:	eef0 8a67 	vmov.f32	s17, s15
 801be9a:	2300      	movs	r3, #0
 801be9c:	f7ea fdfc 	bl	8006a98 <__aeabi_dcmpeq>
 801bea0:	4681      	mov	r9, r0
 801bea2:	b160      	cbz	r0, 801bebe <_dtoa_r+0xee>
 801bea4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bea6:	2301      	movs	r3, #1
 801bea8:	6013      	str	r3, [r2, #0]
 801beaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801beac:	2b00      	cmp	r3, #0
 801beae:	f000 8568 	beq.w	801c982 <_dtoa_r+0xbb2>
 801beb2:	4b86      	ldr	r3, [pc, #536]	; (801c0cc <_dtoa_r+0x2fc>)
 801beb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801beb6:	6013      	str	r3, [r2, #0]
 801beb8:	3b01      	subs	r3, #1
 801beba:	9300      	str	r3, [sp, #0]
 801bebc:	e7da      	b.n	801be74 <_dtoa_r+0xa4>
 801bebe:	aa10      	add	r2, sp, #64	; 0x40
 801bec0:	a911      	add	r1, sp, #68	; 0x44
 801bec2:	4620      	mov	r0, r4
 801bec4:	eeb0 0a48 	vmov.f32	s0, s16
 801bec8:	eef0 0a68 	vmov.f32	s1, s17
 801becc:	f001 fd04 	bl	801d8d8 <__d2b>
 801bed0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801bed4:	4682      	mov	sl, r0
 801bed6:	2d00      	cmp	r5, #0
 801bed8:	d07f      	beq.n	801bfda <_dtoa_r+0x20a>
 801beda:	ee18 3a90 	vmov	r3, s17
 801bede:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bee2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801bee6:	ec51 0b18 	vmov	r0, r1, d8
 801beea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801beee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801bef2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801bef6:	4619      	mov	r1, r3
 801bef8:	2200      	movs	r2, #0
 801befa:	4b75      	ldr	r3, [pc, #468]	; (801c0d0 <_dtoa_r+0x300>)
 801befc:	f7ea f9ac 	bl	8006258 <__aeabi_dsub>
 801bf00:	a367      	add	r3, pc, #412	; (adr r3, 801c0a0 <_dtoa_r+0x2d0>)
 801bf02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf06:	f7ea fb5f 	bl	80065c8 <__aeabi_dmul>
 801bf0a:	a367      	add	r3, pc, #412	; (adr r3, 801c0a8 <_dtoa_r+0x2d8>)
 801bf0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf10:	f7ea f9a4 	bl	800625c <__adddf3>
 801bf14:	4606      	mov	r6, r0
 801bf16:	4628      	mov	r0, r5
 801bf18:	460f      	mov	r7, r1
 801bf1a:	f7ea faeb 	bl	80064f4 <__aeabi_i2d>
 801bf1e:	a364      	add	r3, pc, #400	; (adr r3, 801c0b0 <_dtoa_r+0x2e0>)
 801bf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf24:	f7ea fb50 	bl	80065c8 <__aeabi_dmul>
 801bf28:	4602      	mov	r2, r0
 801bf2a:	460b      	mov	r3, r1
 801bf2c:	4630      	mov	r0, r6
 801bf2e:	4639      	mov	r1, r7
 801bf30:	f7ea f994 	bl	800625c <__adddf3>
 801bf34:	4606      	mov	r6, r0
 801bf36:	460f      	mov	r7, r1
 801bf38:	f7ea fdf6 	bl	8006b28 <__aeabi_d2iz>
 801bf3c:	2200      	movs	r2, #0
 801bf3e:	4683      	mov	fp, r0
 801bf40:	2300      	movs	r3, #0
 801bf42:	4630      	mov	r0, r6
 801bf44:	4639      	mov	r1, r7
 801bf46:	f7ea fdb1 	bl	8006aac <__aeabi_dcmplt>
 801bf4a:	b148      	cbz	r0, 801bf60 <_dtoa_r+0x190>
 801bf4c:	4658      	mov	r0, fp
 801bf4e:	f7ea fad1 	bl	80064f4 <__aeabi_i2d>
 801bf52:	4632      	mov	r2, r6
 801bf54:	463b      	mov	r3, r7
 801bf56:	f7ea fd9f 	bl	8006a98 <__aeabi_dcmpeq>
 801bf5a:	b908      	cbnz	r0, 801bf60 <_dtoa_r+0x190>
 801bf5c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801bf60:	f1bb 0f16 	cmp.w	fp, #22
 801bf64:	d857      	bhi.n	801c016 <_dtoa_r+0x246>
 801bf66:	4b5b      	ldr	r3, [pc, #364]	; (801c0d4 <_dtoa_r+0x304>)
 801bf68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801bf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf70:	ec51 0b18 	vmov	r0, r1, d8
 801bf74:	f7ea fd9a 	bl	8006aac <__aeabi_dcmplt>
 801bf78:	2800      	cmp	r0, #0
 801bf7a:	d04e      	beq.n	801c01a <_dtoa_r+0x24a>
 801bf7c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801bf80:	2300      	movs	r3, #0
 801bf82:	930c      	str	r3, [sp, #48]	; 0x30
 801bf84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bf86:	1b5b      	subs	r3, r3, r5
 801bf88:	1e5a      	subs	r2, r3, #1
 801bf8a:	bf45      	ittet	mi
 801bf8c:	f1c3 0301 	rsbmi	r3, r3, #1
 801bf90:	9305      	strmi	r3, [sp, #20]
 801bf92:	2300      	movpl	r3, #0
 801bf94:	2300      	movmi	r3, #0
 801bf96:	9206      	str	r2, [sp, #24]
 801bf98:	bf54      	ite	pl
 801bf9a:	9305      	strpl	r3, [sp, #20]
 801bf9c:	9306      	strmi	r3, [sp, #24]
 801bf9e:	f1bb 0f00 	cmp.w	fp, #0
 801bfa2:	db3c      	blt.n	801c01e <_dtoa_r+0x24e>
 801bfa4:	9b06      	ldr	r3, [sp, #24]
 801bfa6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801bfaa:	445b      	add	r3, fp
 801bfac:	9306      	str	r3, [sp, #24]
 801bfae:	2300      	movs	r3, #0
 801bfb0:	9308      	str	r3, [sp, #32]
 801bfb2:	9b07      	ldr	r3, [sp, #28]
 801bfb4:	2b09      	cmp	r3, #9
 801bfb6:	d868      	bhi.n	801c08a <_dtoa_r+0x2ba>
 801bfb8:	2b05      	cmp	r3, #5
 801bfba:	bfc4      	itt	gt
 801bfbc:	3b04      	subgt	r3, #4
 801bfbe:	9307      	strgt	r3, [sp, #28]
 801bfc0:	9b07      	ldr	r3, [sp, #28]
 801bfc2:	f1a3 0302 	sub.w	r3, r3, #2
 801bfc6:	bfcc      	ite	gt
 801bfc8:	2500      	movgt	r5, #0
 801bfca:	2501      	movle	r5, #1
 801bfcc:	2b03      	cmp	r3, #3
 801bfce:	f200 8085 	bhi.w	801c0dc <_dtoa_r+0x30c>
 801bfd2:	e8df f003 	tbb	[pc, r3]
 801bfd6:	3b2e      	.short	0x3b2e
 801bfd8:	5839      	.short	0x5839
 801bfda:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801bfde:	441d      	add	r5, r3
 801bfe0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801bfe4:	2b20      	cmp	r3, #32
 801bfe6:	bfc1      	itttt	gt
 801bfe8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801bfec:	fa08 f803 	lslgt.w	r8, r8, r3
 801bff0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801bff4:	fa26 f303 	lsrgt.w	r3, r6, r3
 801bff8:	bfd6      	itet	le
 801bffa:	f1c3 0320 	rsble	r3, r3, #32
 801bffe:	ea48 0003 	orrgt.w	r0, r8, r3
 801c002:	fa06 f003 	lslle.w	r0, r6, r3
 801c006:	f7ea fa65 	bl	80064d4 <__aeabi_ui2d>
 801c00a:	2201      	movs	r2, #1
 801c00c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801c010:	3d01      	subs	r5, #1
 801c012:	920e      	str	r2, [sp, #56]	; 0x38
 801c014:	e76f      	b.n	801bef6 <_dtoa_r+0x126>
 801c016:	2301      	movs	r3, #1
 801c018:	e7b3      	b.n	801bf82 <_dtoa_r+0x1b2>
 801c01a:	900c      	str	r0, [sp, #48]	; 0x30
 801c01c:	e7b2      	b.n	801bf84 <_dtoa_r+0x1b4>
 801c01e:	9b05      	ldr	r3, [sp, #20]
 801c020:	eba3 030b 	sub.w	r3, r3, fp
 801c024:	9305      	str	r3, [sp, #20]
 801c026:	f1cb 0300 	rsb	r3, fp, #0
 801c02a:	9308      	str	r3, [sp, #32]
 801c02c:	2300      	movs	r3, #0
 801c02e:	930b      	str	r3, [sp, #44]	; 0x2c
 801c030:	e7bf      	b.n	801bfb2 <_dtoa_r+0x1e2>
 801c032:	2300      	movs	r3, #0
 801c034:	9309      	str	r3, [sp, #36]	; 0x24
 801c036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c038:	2b00      	cmp	r3, #0
 801c03a:	dc52      	bgt.n	801c0e2 <_dtoa_r+0x312>
 801c03c:	2301      	movs	r3, #1
 801c03e:	9301      	str	r3, [sp, #4]
 801c040:	9304      	str	r3, [sp, #16]
 801c042:	461a      	mov	r2, r3
 801c044:	920a      	str	r2, [sp, #40]	; 0x28
 801c046:	e00b      	b.n	801c060 <_dtoa_r+0x290>
 801c048:	2301      	movs	r3, #1
 801c04a:	e7f3      	b.n	801c034 <_dtoa_r+0x264>
 801c04c:	2300      	movs	r3, #0
 801c04e:	9309      	str	r3, [sp, #36]	; 0x24
 801c050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c052:	445b      	add	r3, fp
 801c054:	9301      	str	r3, [sp, #4]
 801c056:	3301      	adds	r3, #1
 801c058:	2b01      	cmp	r3, #1
 801c05a:	9304      	str	r3, [sp, #16]
 801c05c:	bfb8      	it	lt
 801c05e:	2301      	movlt	r3, #1
 801c060:	69e0      	ldr	r0, [r4, #28]
 801c062:	2100      	movs	r1, #0
 801c064:	2204      	movs	r2, #4
 801c066:	f102 0614 	add.w	r6, r2, #20
 801c06a:	429e      	cmp	r6, r3
 801c06c:	d93d      	bls.n	801c0ea <_dtoa_r+0x31a>
 801c06e:	6041      	str	r1, [r0, #4]
 801c070:	4620      	mov	r0, r4
 801c072:	f001 f855 	bl	801d120 <_Balloc>
 801c076:	9000      	str	r0, [sp, #0]
 801c078:	2800      	cmp	r0, #0
 801c07a:	d139      	bne.n	801c0f0 <_dtoa_r+0x320>
 801c07c:	4b16      	ldr	r3, [pc, #88]	; (801c0d8 <_dtoa_r+0x308>)
 801c07e:	4602      	mov	r2, r0
 801c080:	f240 11af 	movw	r1, #431	; 0x1af
 801c084:	e6bd      	b.n	801be02 <_dtoa_r+0x32>
 801c086:	2301      	movs	r3, #1
 801c088:	e7e1      	b.n	801c04e <_dtoa_r+0x27e>
 801c08a:	2501      	movs	r5, #1
 801c08c:	2300      	movs	r3, #0
 801c08e:	9307      	str	r3, [sp, #28]
 801c090:	9509      	str	r5, [sp, #36]	; 0x24
 801c092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c096:	9301      	str	r3, [sp, #4]
 801c098:	9304      	str	r3, [sp, #16]
 801c09a:	2200      	movs	r2, #0
 801c09c:	2312      	movs	r3, #18
 801c09e:	e7d1      	b.n	801c044 <_dtoa_r+0x274>
 801c0a0:	636f4361 	.word	0x636f4361
 801c0a4:	3fd287a7 	.word	0x3fd287a7
 801c0a8:	8b60c8b3 	.word	0x8b60c8b3
 801c0ac:	3fc68a28 	.word	0x3fc68a28
 801c0b0:	509f79fb 	.word	0x509f79fb
 801c0b4:	3fd34413 	.word	0x3fd34413
 801c0b8:	08024952 	.word	0x08024952
 801c0bc:	08024969 	.word	0x08024969
 801c0c0:	7ff00000 	.word	0x7ff00000
 801c0c4:	0802494e 	.word	0x0802494e
 801c0c8:	08024945 	.word	0x08024945
 801c0cc:	0802491a 	.word	0x0802491a
 801c0d0:	3ff80000 	.word	0x3ff80000
 801c0d4:	08024ab8 	.word	0x08024ab8
 801c0d8:	080249c1 	.word	0x080249c1
 801c0dc:	2301      	movs	r3, #1
 801c0de:	9309      	str	r3, [sp, #36]	; 0x24
 801c0e0:	e7d7      	b.n	801c092 <_dtoa_r+0x2c2>
 801c0e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c0e4:	9301      	str	r3, [sp, #4]
 801c0e6:	9304      	str	r3, [sp, #16]
 801c0e8:	e7ba      	b.n	801c060 <_dtoa_r+0x290>
 801c0ea:	3101      	adds	r1, #1
 801c0ec:	0052      	lsls	r2, r2, #1
 801c0ee:	e7ba      	b.n	801c066 <_dtoa_r+0x296>
 801c0f0:	69e3      	ldr	r3, [r4, #28]
 801c0f2:	9a00      	ldr	r2, [sp, #0]
 801c0f4:	601a      	str	r2, [r3, #0]
 801c0f6:	9b04      	ldr	r3, [sp, #16]
 801c0f8:	2b0e      	cmp	r3, #14
 801c0fa:	f200 80a8 	bhi.w	801c24e <_dtoa_r+0x47e>
 801c0fe:	2d00      	cmp	r5, #0
 801c100:	f000 80a5 	beq.w	801c24e <_dtoa_r+0x47e>
 801c104:	f1bb 0f00 	cmp.w	fp, #0
 801c108:	dd38      	ble.n	801c17c <_dtoa_r+0x3ac>
 801c10a:	4bc0      	ldr	r3, [pc, #768]	; (801c40c <_dtoa_r+0x63c>)
 801c10c:	f00b 020f 	and.w	r2, fp, #15
 801c110:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c114:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801c118:	e9d3 6700 	ldrd	r6, r7, [r3]
 801c11c:	ea4f 182b 	mov.w	r8, fp, asr #4
 801c120:	d019      	beq.n	801c156 <_dtoa_r+0x386>
 801c122:	4bbb      	ldr	r3, [pc, #748]	; (801c410 <_dtoa_r+0x640>)
 801c124:	ec51 0b18 	vmov	r0, r1, d8
 801c128:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c12c:	f7ea fb76 	bl	800681c <__aeabi_ddiv>
 801c130:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c134:	f008 080f 	and.w	r8, r8, #15
 801c138:	2503      	movs	r5, #3
 801c13a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 801c410 <_dtoa_r+0x640>
 801c13e:	f1b8 0f00 	cmp.w	r8, #0
 801c142:	d10a      	bne.n	801c15a <_dtoa_r+0x38a>
 801c144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c148:	4632      	mov	r2, r6
 801c14a:	463b      	mov	r3, r7
 801c14c:	f7ea fb66 	bl	800681c <__aeabi_ddiv>
 801c150:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c154:	e02b      	b.n	801c1ae <_dtoa_r+0x3de>
 801c156:	2502      	movs	r5, #2
 801c158:	e7ef      	b.n	801c13a <_dtoa_r+0x36a>
 801c15a:	f018 0f01 	tst.w	r8, #1
 801c15e:	d008      	beq.n	801c172 <_dtoa_r+0x3a2>
 801c160:	4630      	mov	r0, r6
 801c162:	4639      	mov	r1, r7
 801c164:	e9d9 2300 	ldrd	r2, r3, [r9]
 801c168:	f7ea fa2e 	bl	80065c8 <__aeabi_dmul>
 801c16c:	3501      	adds	r5, #1
 801c16e:	4606      	mov	r6, r0
 801c170:	460f      	mov	r7, r1
 801c172:	ea4f 0868 	mov.w	r8, r8, asr #1
 801c176:	f109 0908 	add.w	r9, r9, #8
 801c17a:	e7e0      	b.n	801c13e <_dtoa_r+0x36e>
 801c17c:	f000 809f 	beq.w	801c2be <_dtoa_r+0x4ee>
 801c180:	f1cb 0600 	rsb	r6, fp, #0
 801c184:	4ba1      	ldr	r3, [pc, #644]	; (801c40c <_dtoa_r+0x63c>)
 801c186:	4fa2      	ldr	r7, [pc, #648]	; (801c410 <_dtoa_r+0x640>)
 801c188:	f006 020f 	and.w	r2, r6, #15
 801c18c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c190:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c194:	ec51 0b18 	vmov	r0, r1, d8
 801c198:	f7ea fa16 	bl	80065c8 <__aeabi_dmul>
 801c19c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c1a0:	1136      	asrs	r6, r6, #4
 801c1a2:	2300      	movs	r3, #0
 801c1a4:	2502      	movs	r5, #2
 801c1a6:	2e00      	cmp	r6, #0
 801c1a8:	d17e      	bne.n	801c2a8 <_dtoa_r+0x4d8>
 801c1aa:	2b00      	cmp	r3, #0
 801c1ac:	d1d0      	bne.n	801c150 <_dtoa_r+0x380>
 801c1ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c1b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	f000 8084 	beq.w	801c2c2 <_dtoa_r+0x4f2>
 801c1ba:	4b96      	ldr	r3, [pc, #600]	; (801c414 <_dtoa_r+0x644>)
 801c1bc:	2200      	movs	r2, #0
 801c1be:	4640      	mov	r0, r8
 801c1c0:	4649      	mov	r1, r9
 801c1c2:	f7ea fc73 	bl	8006aac <__aeabi_dcmplt>
 801c1c6:	2800      	cmp	r0, #0
 801c1c8:	d07b      	beq.n	801c2c2 <_dtoa_r+0x4f2>
 801c1ca:	9b04      	ldr	r3, [sp, #16]
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	d078      	beq.n	801c2c2 <_dtoa_r+0x4f2>
 801c1d0:	9b01      	ldr	r3, [sp, #4]
 801c1d2:	2b00      	cmp	r3, #0
 801c1d4:	dd39      	ble.n	801c24a <_dtoa_r+0x47a>
 801c1d6:	4b90      	ldr	r3, [pc, #576]	; (801c418 <_dtoa_r+0x648>)
 801c1d8:	2200      	movs	r2, #0
 801c1da:	4640      	mov	r0, r8
 801c1dc:	4649      	mov	r1, r9
 801c1de:	f7ea f9f3 	bl	80065c8 <__aeabi_dmul>
 801c1e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c1e6:	9e01      	ldr	r6, [sp, #4]
 801c1e8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801c1ec:	3501      	adds	r5, #1
 801c1ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801c1f2:	4628      	mov	r0, r5
 801c1f4:	f7ea f97e 	bl	80064f4 <__aeabi_i2d>
 801c1f8:	4642      	mov	r2, r8
 801c1fa:	464b      	mov	r3, r9
 801c1fc:	f7ea f9e4 	bl	80065c8 <__aeabi_dmul>
 801c200:	4b86      	ldr	r3, [pc, #536]	; (801c41c <_dtoa_r+0x64c>)
 801c202:	2200      	movs	r2, #0
 801c204:	f7ea f82a 	bl	800625c <__adddf3>
 801c208:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801c20c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c210:	9303      	str	r3, [sp, #12]
 801c212:	2e00      	cmp	r6, #0
 801c214:	d158      	bne.n	801c2c8 <_dtoa_r+0x4f8>
 801c216:	4b82      	ldr	r3, [pc, #520]	; (801c420 <_dtoa_r+0x650>)
 801c218:	2200      	movs	r2, #0
 801c21a:	4640      	mov	r0, r8
 801c21c:	4649      	mov	r1, r9
 801c21e:	f7ea f81b 	bl	8006258 <__aeabi_dsub>
 801c222:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c226:	4680      	mov	r8, r0
 801c228:	4689      	mov	r9, r1
 801c22a:	f7ea fc5d 	bl	8006ae8 <__aeabi_dcmpgt>
 801c22e:	2800      	cmp	r0, #0
 801c230:	f040 8296 	bne.w	801c760 <_dtoa_r+0x990>
 801c234:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801c238:	4640      	mov	r0, r8
 801c23a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c23e:	4649      	mov	r1, r9
 801c240:	f7ea fc34 	bl	8006aac <__aeabi_dcmplt>
 801c244:	2800      	cmp	r0, #0
 801c246:	f040 8289 	bne.w	801c75c <_dtoa_r+0x98c>
 801c24a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801c24e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c250:	2b00      	cmp	r3, #0
 801c252:	f2c0 814e 	blt.w	801c4f2 <_dtoa_r+0x722>
 801c256:	f1bb 0f0e 	cmp.w	fp, #14
 801c25a:	f300 814a 	bgt.w	801c4f2 <_dtoa_r+0x722>
 801c25e:	4b6b      	ldr	r3, [pc, #428]	; (801c40c <_dtoa_r+0x63c>)
 801c260:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c264:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c26a:	2b00      	cmp	r3, #0
 801c26c:	f280 80dc 	bge.w	801c428 <_dtoa_r+0x658>
 801c270:	9b04      	ldr	r3, [sp, #16]
 801c272:	2b00      	cmp	r3, #0
 801c274:	f300 80d8 	bgt.w	801c428 <_dtoa_r+0x658>
 801c278:	f040 826f 	bne.w	801c75a <_dtoa_r+0x98a>
 801c27c:	4b68      	ldr	r3, [pc, #416]	; (801c420 <_dtoa_r+0x650>)
 801c27e:	2200      	movs	r2, #0
 801c280:	4640      	mov	r0, r8
 801c282:	4649      	mov	r1, r9
 801c284:	f7ea f9a0 	bl	80065c8 <__aeabi_dmul>
 801c288:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c28c:	f7ea fc22 	bl	8006ad4 <__aeabi_dcmpge>
 801c290:	9e04      	ldr	r6, [sp, #16]
 801c292:	4637      	mov	r7, r6
 801c294:	2800      	cmp	r0, #0
 801c296:	f040 8245 	bne.w	801c724 <_dtoa_r+0x954>
 801c29a:	9d00      	ldr	r5, [sp, #0]
 801c29c:	2331      	movs	r3, #49	; 0x31
 801c29e:	f805 3b01 	strb.w	r3, [r5], #1
 801c2a2:	f10b 0b01 	add.w	fp, fp, #1
 801c2a6:	e241      	b.n	801c72c <_dtoa_r+0x95c>
 801c2a8:	07f2      	lsls	r2, r6, #31
 801c2aa:	d505      	bpl.n	801c2b8 <_dtoa_r+0x4e8>
 801c2ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c2b0:	f7ea f98a 	bl	80065c8 <__aeabi_dmul>
 801c2b4:	3501      	adds	r5, #1
 801c2b6:	2301      	movs	r3, #1
 801c2b8:	1076      	asrs	r6, r6, #1
 801c2ba:	3708      	adds	r7, #8
 801c2bc:	e773      	b.n	801c1a6 <_dtoa_r+0x3d6>
 801c2be:	2502      	movs	r5, #2
 801c2c0:	e775      	b.n	801c1ae <_dtoa_r+0x3de>
 801c2c2:	9e04      	ldr	r6, [sp, #16]
 801c2c4:	465f      	mov	r7, fp
 801c2c6:	e792      	b.n	801c1ee <_dtoa_r+0x41e>
 801c2c8:	9900      	ldr	r1, [sp, #0]
 801c2ca:	4b50      	ldr	r3, [pc, #320]	; (801c40c <_dtoa_r+0x63c>)
 801c2cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c2d0:	4431      	add	r1, r6
 801c2d2:	9102      	str	r1, [sp, #8]
 801c2d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c2d6:	eeb0 9a47 	vmov.f32	s18, s14
 801c2da:	eef0 9a67 	vmov.f32	s19, s15
 801c2de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801c2e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c2e6:	2900      	cmp	r1, #0
 801c2e8:	d044      	beq.n	801c374 <_dtoa_r+0x5a4>
 801c2ea:	494e      	ldr	r1, [pc, #312]	; (801c424 <_dtoa_r+0x654>)
 801c2ec:	2000      	movs	r0, #0
 801c2ee:	f7ea fa95 	bl	800681c <__aeabi_ddiv>
 801c2f2:	ec53 2b19 	vmov	r2, r3, d9
 801c2f6:	f7e9 ffaf 	bl	8006258 <__aeabi_dsub>
 801c2fa:	9d00      	ldr	r5, [sp, #0]
 801c2fc:	ec41 0b19 	vmov	d9, r0, r1
 801c300:	4649      	mov	r1, r9
 801c302:	4640      	mov	r0, r8
 801c304:	f7ea fc10 	bl	8006b28 <__aeabi_d2iz>
 801c308:	4606      	mov	r6, r0
 801c30a:	f7ea f8f3 	bl	80064f4 <__aeabi_i2d>
 801c30e:	4602      	mov	r2, r0
 801c310:	460b      	mov	r3, r1
 801c312:	4640      	mov	r0, r8
 801c314:	4649      	mov	r1, r9
 801c316:	f7e9 ff9f 	bl	8006258 <__aeabi_dsub>
 801c31a:	3630      	adds	r6, #48	; 0x30
 801c31c:	f805 6b01 	strb.w	r6, [r5], #1
 801c320:	ec53 2b19 	vmov	r2, r3, d9
 801c324:	4680      	mov	r8, r0
 801c326:	4689      	mov	r9, r1
 801c328:	f7ea fbc0 	bl	8006aac <__aeabi_dcmplt>
 801c32c:	2800      	cmp	r0, #0
 801c32e:	d164      	bne.n	801c3fa <_dtoa_r+0x62a>
 801c330:	4642      	mov	r2, r8
 801c332:	464b      	mov	r3, r9
 801c334:	4937      	ldr	r1, [pc, #220]	; (801c414 <_dtoa_r+0x644>)
 801c336:	2000      	movs	r0, #0
 801c338:	f7e9 ff8e 	bl	8006258 <__aeabi_dsub>
 801c33c:	ec53 2b19 	vmov	r2, r3, d9
 801c340:	f7ea fbb4 	bl	8006aac <__aeabi_dcmplt>
 801c344:	2800      	cmp	r0, #0
 801c346:	f040 80b6 	bne.w	801c4b6 <_dtoa_r+0x6e6>
 801c34a:	9b02      	ldr	r3, [sp, #8]
 801c34c:	429d      	cmp	r5, r3
 801c34e:	f43f af7c 	beq.w	801c24a <_dtoa_r+0x47a>
 801c352:	4b31      	ldr	r3, [pc, #196]	; (801c418 <_dtoa_r+0x648>)
 801c354:	ec51 0b19 	vmov	r0, r1, d9
 801c358:	2200      	movs	r2, #0
 801c35a:	f7ea f935 	bl	80065c8 <__aeabi_dmul>
 801c35e:	4b2e      	ldr	r3, [pc, #184]	; (801c418 <_dtoa_r+0x648>)
 801c360:	ec41 0b19 	vmov	d9, r0, r1
 801c364:	2200      	movs	r2, #0
 801c366:	4640      	mov	r0, r8
 801c368:	4649      	mov	r1, r9
 801c36a:	f7ea f92d 	bl	80065c8 <__aeabi_dmul>
 801c36e:	4680      	mov	r8, r0
 801c370:	4689      	mov	r9, r1
 801c372:	e7c5      	b.n	801c300 <_dtoa_r+0x530>
 801c374:	ec51 0b17 	vmov	r0, r1, d7
 801c378:	f7ea f926 	bl	80065c8 <__aeabi_dmul>
 801c37c:	9b02      	ldr	r3, [sp, #8]
 801c37e:	9d00      	ldr	r5, [sp, #0]
 801c380:	930f      	str	r3, [sp, #60]	; 0x3c
 801c382:	ec41 0b19 	vmov	d9, r0, r1
 801c386:	4649      	mov	r1, r9
 801c388:	4640      	mov	r0, r8
 801c38a:	f7ea fbcd 	bl	8006b28 <__aeabi_d2iz>
 801c38e:	4606      	mov	r6, r0
 801c390:	f7ea f8b0 	bl	80064f4 <__aeabi_i2d>
 801c394:	3630      	adds	r6, #48	; 0x30
 801c396:	4602      	mov	r2, r0
 801c398:	460b      	mov	r3, r1
 801c39a:	4640      	mov	r0, r8
 801c39c:	4649      	mov	r1, r9
 801c39e:	f7e9 ff5b 	bl	8006258 <__aeabi_dsub>
 801c3a2:	f805 6b01 	strb.w	r6, [r5], #1
 801c3a6:	9b02      	ldr	r3, [sp, #8]
 801c3a8:	429d      	cmp	r5, r3
 801c3aa:	4680      	mov	r8, r0
 801c3ac:	4689      	mov	r9, r1
 801c3ae:	f04f 0200 	mov.w	r2, #0
 801c3b2:	d124      	bne.n	801c3fe <_dtoa_r+0x62e>
 801c3b4:	4b1b      	ldr	r3, [pc, #108]	; (801c424 <_dtoa_r+0x654>)
 801c3b6:	ec51 0b19 	vmov	r0, r1, d9
 801c3ba:	f7e9 ff4f 	bl	800625c <__adddf3>
 801c3be:	4602      	mov	r2, r0
 801c3c0:	460b      	mov	r3, r1
 801c3c2:	4640      	mov	r0, r8
 801c3c4:	4649      	mov	r1, r9
 801c3c6:	f7ea fb8f 	bl	8006ae8 <__aeabi_dcmpgt>
 801c3ca:	2800      	cmp	r0, #0
 801c3cc:	d173      	bne.n	801c4b6 <_dtoa_r+0x6e6>
 801c3ce:	ec53 2b19 	vmov	r2, r3, d9
 801c3d2:	4914      	ldr	r1, [pc, #80]	; (801c424 <_dtoa_r+0x654>)
 801c3d4:	2000      	movs	r0, #0
 801c3d6:	f7e9 ff3f 	bl	8006258 <__aeabi_dsub>
 801c3da:	4602      	mov	r2, r0
 801c3dc:	460b      	mov	r3, r1
 801c3de:	4640      	mov	r0, r8
 801c3e0:	4649      	mov	r1, r9
 801c3e2:	f7ea fb63 	bl	8006aac <__aeabi_dcmplt>
 801c3e6:	2800      	cmp	r0, #0
 801c3e8:	f43f af2f 	beq.w	801c24a <_dtoa_r+0x47a>
 801c3ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801c3ee:	1e6b      	subs	r3, r5, #1
 801c3f0:	930f      	str	r3, [sp, #60]	; 0x3c
 801c3f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c3f6:	2b30      	cmp	r3, #48	; 0x30
 801c3f8:	d0f8      	beq.n	801c3ec <_dtoa_r+0x61c>
 801c3fa:	46bb      	mov	fp, r7
 801c3fc:	e04a      	b.n	801c494 <_dtoa_r+0x6c4>
 801c3fe:	4b06      	ldr	r3, [pc, #24]	; (801c418 <_dtoa_r+0x648>)
 801c400:	f7ea f8e2 	bl	80065c8 <__aeabi_dmul>
 801c404:	4680      	mov	r8, r0
 801c406:	4689      	mov	r9, r1
 801c408:	e7bd      	b.n	801c386 <_dtoa_r+0x5b6>
 801c40a:	bf00      	nop
 801c40c:	08024ab8 	.word	0x08024ab8
 801c410:	08024a90 	.word	0x08024a90
 801c414:	3ff00000 	.word	0x3ff00000
 801c418:	40240000 	.word	0x40240000
 801c41c:	401c0000 	.word	0x401c0000
 801c420:	40140000 	.word	0x40140000
 801c424:	3fe00000 	.word	0x3fe00000
 801c428:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801c42c:	9d00      	ldr	r5, [sp, #0]
 801c42e:	4642      	mov	r2, r8
 801c430:	464b      	mov	r3, r9
 801c432:	4630      	mov	r0, r6
 801c434:	4639      	mov	r1, r7
 801c436:	f7ea f9f1 	bl	800681c <__aeabi_ddiv>
 801c43a:	f7ea fb75 	bl	8006b28 <__aeabi_d2iz>
 801c43e:	9001      	str	r0, [sp, #4]
 801c440:	f7ea f858 	bl	80064f4 <__aeabi_i2d>
 801c444:	4642      	mov	r2, r8
 801c446:	464b      	mov	r3, r9
 801c448:	f7ea f8be 	bl	80065c8 <__aeabi_dmul>
 801c44c:	4602      	mov	r2, r0
 801c44e:	460b      	mov	r3, r1
 801c450:	4630      	mov	r0, r6
 801c452:	4639      	mov	r1, r7
 801c454:	f7e9 ff00 	bl	8006258 <__aeabi_dsub>
 801c458:	9e01      	ldr	r6, [sp, #4]
 801c45a:	9f04      	ldr	r7, [sp, #16]
 801c45c:	3630      	adds	r6, #48	; 0x30
 801c45e:	f805 6b01 	strb.w	r6, [r5], #1
 801c462:	9e00      	ldr	r6, [sp, #0]
 801c464:	1bae      	subs	r6, r5, r6
 801c466:	42b7      	cmp	r7, r6
 801c468:	4602      	mov	r2, r0
 801c46a:	460b      	mov	r3, r1
 801c46c:	d134      	bne.n	801c4d8 <_dtoa_r+0x708>
 801c46e:	f7e9 fef5 	bl	800625c <__adddf3>
 801c472:	4642      	mov	r2, r8
 801c474:	464b      	mov	r3, r9
 801c476:	4606      	mov	r6, r0
 801c478:	460f      	mov	r7, r1
 801c47a:	f7ea fb35 	bl	8006ae8 <__aeabi_dcmpgt>
 801c47e:	b9c8      	cbnz	r0, 801c4b4 <_dtoa_r+0x6e4>
 801c480:	4642      	mov	r2, r8
 801c482:	464b      	mov	r3, r9
 801c484:	4630      	mov	r0, r6
 801c486:	4639      	mov	r1, r7
 801c488:	f7ea fb06 	bl	8006a98 <__aeabi_dcmpeq>
 801c48c:	b110      	cbz	r0, 801c494 <_dtoa_r+0x6c4>
 801c48e:	9b01      	ldr	r3, [sp, #4]
 801c490:	07db      	lsls	r3, r3, #31
 801c492:	d40f      	bmi.n	801c4b4 <_dtoa_r+0x6e4>
 801c494:	4651      	mov	r1, sl
 801c496:	4620      	mov	r0, r4
 801c498:	f000 fe82 	bl	801d1a0 <_Bfree>
 801c49c:	2300      	movs	r3, #0
 801c49e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c4a0:	702b      	strb	r3, [r5, #0]
 801c4a2:	f10b 0301 	add.w	r3, fp, #1
 801c4a6:	6013      	str	r3, [r2, #0]
 801c4a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c4aa:	2b00      	cmp	r3, #0
 801c4ac:	f43f ace2 	beq.w	801be74 <_dtoa_r+0xa4>
 801c4b0:	601d      	str	r5, [r3, #0]
 801c4b2:	e4df      	b.n	801be74 <_dtoa_r+0xa4>
 801c4b4:	465f      	mov	r7, fp
 801c4b6:	462b      	mov	r3, r5
 801c4b8:	461d      	mov	r5, r3
 801c4ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c4be:	2a39      	cmp	r2, #57	; 0x39
 801c4c0:	d106      	bne.n	801c4d0 <_dtoa_r+0x700>
 801c4c2:	9a00      	ldr	r2, [sp, #0]
 801c4c4:	429a      	cmp	r2, r3
 801c4c6:	d1f7      	bne.n	801c4b8 <_dtoa_r+0x6e8>
 801c4c8:	9900      	ldr	r1, [sp, #0]
 801c4ca:	2230      	movs	r2, #48	; 0x30
 801c4cc:	3701      	adds	r7, #1
 801c4ce:	700a      	strb	r2, [r1, #0]
 801c4d0:	781a      	ldrb	r2, [r3, #0]
 801c4d2:	3201      	adds	r2, #1
 801c4d4:	701a      	strb	r2, [r3, #0]
 801c4d6:	e790      	b.n	801c3fa <_dtoa_r+0x62a>
 801c4d8:	4ba3      	ldr	r3, [pc, #652]	; (801c768 <_dtoa_r+0x998>)
 801c4da:	2200      	movs	r2, #0
 801c4dc:	f7ea f874 	bl	80065c8 <__aeabi_dmul>
 801c4e0:	2200      	movs	r2, #0
 801c4e2:	2300      	movs	r3, #0
 801c4e4:	4606      	mov	r6, r0
 801c4e6:	460f      	mov	r7, r1
 801c4e8:	f7ea fad6 	bl	8006a98 <__aeabi_dcmpeq>
 801c4ec:	2800      	cmp	r0, #0
 801c4ee:	d09e      	beq.n	801c42e <_dtoa_r+0x65e>
 801c4f0:	e7d0      	b.n	801c494 <_dtoa_r+0x6c4>
 801c4f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c4f4:	2a00      	cmp	r2, #0
 801c4f6:	f000 80ca 	beq.w	801c68e <_dtoa_r+0x8be>
 801c4fa:	9a07      	ldr	r2, [sp, #28]
 801c4fc:	2a01      	cmp	r2, #1
 801c4fe:	f300 80ad 	bgt.w	801c65c <_dtoa_r+0x88c>
 801c502:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c504:	2a00      	cmp	r2, #0
 801c506:	f000 80a5 	beq.w	801c654 <_dtoa_r+0x884>
 801c50a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c50e:	9e08      	ldr	r6, [sp, #32]
 801c510:	9d05      	ldr	r5, [sp, #20]
 801c512:	9a05      	ldr	r2, [sp, #20]
 801c514:	441a      	add	r2, r3
 801c516:	9205      	str	r2, [sp, #20]
 801c518:	9a06      	ldr	r2, [sp, #24]
 801c51a:	2101      	movs	r1, #1
 801c51c:	441a      	add	r2, r3
 801c51e:	4620      	mov	r0, r4
 801c520:	9206      	str	r2, [sp, #24]
 801c522:	f000 ff3d 	bl	801d3a0 <__i2b>
 801c526:	4607      	mov	r7, r0
 801c528:	b165      	cbz	r5, 801c544 <_dtoa_r+0x774>
 801c52a:	9b06      	ldr	r3, [sp, #24]
 801c52c:	2b00      	cmp	r3, #0
 801c52e:	dd09      	ble.n	801c544 <_dtoa_r+0x774>
 801c530:	42ab      	cmp	r3, r5
 801c532:	9a05      	ldr	r2, [sp, #20]
 801c534:	bfa8      	it	ge
 801c536:	462b      	movge	r3, r5
 801c538:	1ad2      	subs	r2, r2, r3
 801c53a:	9205      	str	r2, [sp, #20]
 801c53c:	9a06      	ldr	r2, [sp, #24]
 801c53e:	1aed      	subs	r5, r5, r3
 801c540:	1ad3      	subs	r3, r2, r3
 801c542:	9306      	str	r3, [sp, #24]
 801c544:	9b08      	ldr	r3, [sp, #32]
 801c546:	b1f3      	cbz	r3, 801c586 <_dtoa_r+0x7b6>
 801c548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c54a:	2b00      	cmp	r3, #0
 801c54c:	f000 80a3 	beq.w	801c696 <_dtoa_r+0x8c6>
 801c550:	2e00      	cmp	r6, #0
 801c552:	dd10      	ble.n	801c576 <_dtoa_r+0x7a6>
 801c554:	4639      	mov	r1, r7
 801c556:	4632      	mov	r2, r6
 801c558:	4620      	mov	r0, r4
 801c55a:	f000 ffe1 	bl	801d520 <__pow5mult>
 801c55e:	4652      	mov	r2, sl
 801c560:	4601      	mov	r1, r0
 801c562:	4607      	mov	r7, r0
 801c564:	4620      	mov	r0, r4
 801c566:	f000 ff31 	bl	801d3cc <__multiply>
 801c56a:	4651      	mov	r1, sl
 801c56c:	4680      	mov	r8, r0
 801c56e:	4620      	mov	r0, r4
 801c570:	f000 fe16 	bl	801d1a0 <_Bfree>
 801c574:	46c2      	mov	sl, r8
 801c576:	9b08      	ldr	r3, [sp, #32]
 801c578:	1b9a      	subs	r2, r3, r6
 801c57a:	d004      	beq.n	801c586 <_dtoa_r+0x7b6>
 801c57c:	4651      	mov	r1, sl
 801c57e:	4620      	mov	r0, r4
 801c580:	f000 ffce 	bl	801d520 <__pow5mult>
 801c584:	4682      	mov	sl, r0
 801c586:	2101      	movs	r1, #1
 801c588:	4620      	mov	r0, r4
 801c58a:	f000 ff09 	bl	801d3a0 <__i2b>
 801c58e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c590:	2b00      	cmp	r3, #0
 801c592:	4606      	mov	r6, r0
 801c594:	f340 8081 	ble.w	801c69a <_dtoa_r+0x8ca>
 801c598:	461a      	mov	r2, r3
 801c59a:	4601      	mov	r1, r0
 801c59c:	4620      	mov	r0, r4
 801c59e:	f000 ffbf 	bl	801d520 <__pow5mult>
 801c5a2:	9b07      	ldr	r3, [sp, #28]
 801c5a4:	2b01      	cmp	r3, #1
 801c5a6:	4606      	mov	r6, r0
 801c5a8:	dd7a      	ble.n	801c6a0 <_dtoa_r+0x8d0>
 801c5aa:	f04f 0800 	mov.w	r8, #0
 801c5ae:	6933      	ldr	r3, [r6, #16]
 801c5b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801c5b4:	6918      	ldr	r0, [r3, #16]
 801c5b6:	f000 fea5 	bl	801d304 <__hi0bits>
 801c5ba:	f1c0 0020 	rsb	r0, r0, #32
 801c5be:	9b06      	ldr	r3, [sp, #24]
 801c5c0:	4418      	add	r0, r3
 801c5c2:	f010 001f 	ands.w	r0, r0, #31
 801c5c6:	f000 8094 	beq.w	801c6f2 <_dtoa_r+0x922>
 801c5ca:	f1c0 0320 	rsb	r3, r0, #32
 801c5ce:	2b04      	cmp	r3, #4
 801c5d0:	f340 8085 	ble.w	801c6de <_dtoa_r+0x90e>
 801c5d4:	9b05      	ldr	r3, [sp, #20]
 801c5d6:	f1c0 001c 	rsb	r0, r0, #28
 801c5da:	4403      	add	r3, r0
 801c5dc:	9305      	str	r3, [sp, #20]
 801c5de:	9b06      	ldr	r3, [sp, #24]
 801c5e0:	4403      	add	r3, r0
 801c5e2:	4405      	add	r5, r0
 801c5e4:	9306      	str	r3, [sp, #24]
 801c5e6:	9b05      	ldr	r3, [sp, #20]
 801c5e8:	2b00      	cmp	r3, #0
 801c5ea:	dd05      	ble.n	801c5f8 <_dtoa_r+0x828>
 801c5ec:	4651      	mov	r1, sl
 801c5ee:	461a      	mov	r2, r3
 801c5f0:	4620      	mov	r0, r4
 801c5f2:	f000 ffef 	bl	801d5d4 <__lshift>
 801c5f6:	4682      	mov	sl, r0
 801c5f8:	9b06      	ldr	r3, [sp, #24]
 801c5fa:	2b00      	cmp	r3, #0
 801c5fc:	dd05      	ble.n	801c60a <_dtoa_r+0x83a>
 801c5fe:	4631      	mov	r1, r6
 801c600:	461a      	mov	r2, r3
 801c602:	4620      	mov	r0, r4
 801c604:	f000 ffe6 	bl	801d5d4 <__lshift>
 801c608:	4606      	mov	r6, r0
 801c60a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c60c:	2b00      	cmp	r3, #0
 801c60e:	d072      	beq.n	801c6f6 <_dtoa_r+0x926>
 801c610:	4631      	mov	r1, r6
 801c612:	4650      	mov	r0, sl
 801c614:	f001 f84a 	bl	801d6ac <__mcmp>
 801c618:	2800      	cmp	r0, #0
 801c61a:	da6c      	bge.n	801c6f6 <_dtoa_r+0x926>
 801c61c:	2300      	movs	r3, #0
 801c61e:	4651      	mov	r1, sl
 801c620:	220a      	movs	r2, #10
 801c622:	4620      	mov	r0, r4
 801c624:	f000 fdde 	bl	801d1e4 <__multadd>
 801c628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c62a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801c62e:	4682      	mov	sl, r0
 801c630:	2b00      	cmp	r3, #0
 801c632:	f000 81b0 	beq.w	801c996 <_dtoa_r+0xbc6>
 801c636:	2300      	movs	r3, #0
 801c638:	4639      	mov	r1, r7
 801c63a:	220a      	movs	r2, #10
 801c63c:	4620      	mov	r0, r4
 801c63e:	f000 fdd1 	bl	801d1e4 <__multadd>
 801c642:	9b01      	ldr	r3, [sp, #4]
 801c644:	2b00      	cmp	r3, #0
 801c646:	4607      	mov	r7, r0
 801c648:	f300 8096 	bgt.w	801c778 <_dtoa_r+0x9a8>
 801c64c:	9b07      	ldr	r3, [sp, #28]
 801c64e:	2b02      	cmp	r3, #2
 801c650:	dc59      	bgt.n	801c706 <_dtoa_r+0x936>
 801c652:	e091      	b.n	801c778 <_dtoa_r+0x9a8>
 801c654:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c656:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801c65a:	e758      	b.n	801c50e <_dtoa_r+0x73e>
 801c65c:	9b04      	ldr	r3, [sp, #16]
 801c65e:	1e5e      	subs	r6, r3, #1
 801c660:	9b08      	ldr	r3, [sp, #32]
 801c662:	42b3      	cmp	r3, r6
 801c664:	bfbf      	itttt	lt
 801c666:	9b08      	ldrlt	r3, [sp, #32]
 801c668:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801c66a:	9608      	strlt	r6, [sp, #32]
 801c66c:	1af3      	sublt	r3, r6, r3
 801c66e:	bfb4      	ite	lt
 801c670:	18d2      	addlt	r2, r2, r3
 801c672:	1b9e      	subge	r6, r3, r6
 801c674:	9b04      	ldr	r3, [sp, #16]
 801c676:	bfbc      	itt	lt
 801c678:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801c67a:	2600      	movlt	r6, #0
 801c67c:	2b00      	cmp	r3, #0
 801c67e:	bfb7      	itett	lt
 801c680:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801c684:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 801c688:	1a9d      	sublt	r5, r3, r2
 801c68a:	2300      	movlt	r3, #0
 801c68c:	e741      	b.n	801c512 <_dtoa_r+0x742>
 801c68e:	9e08      	ldr	r6, [sp, #32]
 801c690:	9d05      	ldr	r5, [sp, #20]
 801c692:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801c694:	e748      	b.n	801c528 <_dtoa_r+0x758>
 801c696:	9a08      	ldr	r2, [sp, #32]
 801c698:	e770      	b.n	801c57c <_dtoa_r+0x7ac>
 801c69a:	9b07      	ldr	r3, [sp, #28]
 801c69c:	2b01      	cmp	r3, #1
 801c69e:	dc19      	bgt.n	801c6d4 <_dtoa_r+0x904>
 801c6a0:	9b02      	ldr	r3, [sp, #8]
 801c6a2:	b9bb      	cbnz	r3, 801c6d4 <_dtoa_r+0x904>
 801c6a4:	9b03      	ldr	r3, [sp, #12]
 801c6a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c6aa:	b99b      	cbnz	r3, 801c6d4 <_dtoa_r+0x904>
 801c6ac:	9b03      	ldr	r3, [sp, #12]
 801c6ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c6b2:	0d1b      	lsrs	r3, r3, #20
 801c6b4:	051b      	lsls	r3, r3, #20
 801c6b6:	b183      	cbz	r3, 801c6da <_dtoa_r+0x90a>
 801c6b8:	9b05      	ldr	r3, [sp, #20]
 801c6ba:	3301      	adds	r3, #1
 801c6bc:	9305      	str	r3, [sp, #20]
 801c6be:	9b06      	ldr	r3, [sp, #24]
 801c6c0:	3301      	adds	r3, #1
 801c6c2:	9306      	str	r3, [sp, #24]
 801c6c4:	f04f 0801 	mov.w	r8, #1
 801c6c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c6ca:	2b00      	cmp	r3, #0
 801c6cc:	f47f af6f 	bne.w	801c5ae <_dtoa_r+0x7de>
 801c6d0:	2001      	movs	r0, #1
 801c6d2:	e774      	b.n	801c5be <_dtoa_r+0x7ee>
 801c6d4:	f04f 0800 	mov.w	r8, #0
 801c6d8:	e7f6      	b.n	801c6c8 <_dtoa_r+0x8f8>
 801c6da:	4698      	mov	r8, r3
 801c6dc:	e7f4      	b.n	801c6c8 <_dtoa_r+0x8f8>
 801c6de:	d082      	beq.n	801c5e6 <_dtoa_r+0x816>
 801c6e0:	9a05      	ldr	r2, [sp, #20]
 801c6e2:	331c      	adds	r3, #28
 801c6e4:	441a      	add	r2, r3
 801c6e6:	9205      	str	r2, [sp, #20]
 801c6e8:	9a06      	ldr	r2, [sp, #24]
 801c6ea:	441a      	add	r2, r3
 801c6ec:	441d      	add	r5, r3
 801c6ee:	9206      	str	r2, [sp, #24]
 801c6f0:	e779      	b.n	801c5e6 <_dtoa_r+0x816>
 801c6f2:	4603      	mov	r3, r0
 801c6f4:	e7f4      	b.n	801c6e0 <_dtoa_r+0x910>
 801c6f6:	9b04      	ldr	r3, [sp, #16]
 801c6f8:	2b00      	cmp	r3, #0
 801c6fa:	dc37      	bgt.n	801c76c <_dtoa_r+0x99c>
 801c6fc:	9b07      	ldr	r3, [sp, #28]
 801c6fe:	2b02      	cmp	r3, #2
 801c700:	dd34      	ble.n	801c76c <_dtoa_r+0x99c>
 801c702:	9b04      	ldr	r3, [sp, #16]
 801c704:	9301      	str	r3, [sp, #4]
 801c706:	9b01      	ldr	r3, [sp, #4]
 801c708:	b963      	cbnz	r3, 801c724 <_dtoa_r+0x954>
 801c70a:	4631      	mov	r1, r6
 801c70c:	2205      	movs	r2, #5
 801c70e:	4620      	mov	r0, r4
 801c710:	f000 fd68 	bl	801d1e4 <__multadd>
 801c714:	4601      	mov	r1, r0
 801c716:	4606      	mov	r6, r0
 801c718:	4650      	mov	r0, sl
 801c71a:	f000 ffc7 	bl	801d6ac <__mcmp>
 801c71e:	2800      	cmp	r0, #0
 801c720:	f73f adbb 	bgt.w	801c29a <_dtoa_r+0x4ca>
 801c724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c726:	9d00      	ldr	r5, [sp, #0]
 801c728:	ea6f 0b03 	mvn.w	fp, r3
 801c72c:	f04f 0800 	mov.w	r8, #0
 801c730:	4631      	mov	r1, r6
 801c732:	4620      	mov	r0, r4
 801c734:	f000 fd34 	bl	801d1a0 <_Bfree>
 801c738:	2f00      	cmp	r7, #0
 801c73a:	f43f aeab 	beq.w	801c494 <_dtoa_r+0x6c4>
 801c73e:	f1b8 0f00 	cmp.w	r8, #0
 801c742:	d005      	beq.n	801c750 <_dtoa_r+0x980>
 801c744:	45b8      	cmp	r8, r7
 801c746:	d003      	beq.n	801c750 <_dtoa_r+0x980>
 801c748:	4641      	mov	r1, r8
 801c74a:	4620      	mov	r0, r4
 801c74c:	f000 fd28 	bl	801d1a0 <_Bfree>
 801c750:	4639      	mov	r1, r7
 801c752:	4620      	mov	r0, r4
 801c754:	f000 fd24 	bl	801d1a0 <_Bfree>
 801c758:	e69c      	b.n	801c494 <_dtoa_r+0x6c4>
 801c75a:	2600      	movs	r6, #0
 801c75c:	4637      	mov	r7, r6
 801c75e:	e7e1      	b.n	801c724 <_dtoa_r+0x954>
 801c760:	46bb      	mov	fp, r7
 801c762:	4637      	mov	r7, r6
 801c764:	e599      	b.n	801c29a <_dtoa_r+0x4ca>
 801c766:	bf00      	nop
 801c768:	40240000 	.word	0x40240000
 801c76c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c76e:	2b00      	cmp	r3, #0
 801c770:	f000 80c8 	beq.w	801c904 <_dtoa_r+0xb34>
 801c774:	9b04      	ldr	r3, [sp, #16]
 801c776:	9301      	str	r3, [sp, #4]
 801c778:	2d00      	cmp	r5, #0
 801c77a:	dd05      	ble.n	801c788 <_dtoa_r+0x9b8>
 801c77c:	4639      	mov	r1, r7
 801c77e:	462a      	mov	r2, r5
 801c780:	4620      	mov	r0, r4
 801c782:	f000 ff27 	bl	801d5d4 <__lshift>
 801c786:	4607      	mov	r7, r0
 801c788:	f1b8 0f00 	cmp.w	r8, #0
 801c78c:	d05b      	beq.n	801c846 <_dtoa_r+0xa76>
 801c78e:	6879      	ldr	r1, [r7, #4]
 801c790:	4620      	mov	r0, r4
 801c792:	f000 fcc5 	bl	801d120 <_Balloc>
 801c796:	4605      	mov	r5, r0
 801c798:	b928      	cbnz	r0, 801c7a6 <_dtoa_r+0x9d6>
 801c79a:	4b83      	ldr	r3, [pc, #524]	; (801c9a8 <_dtoa_r+0xbd8>)
 801c79c:	4602      	mov	r2, r0
 801c79e:	f240 21ef 	movw	r1, #751	; 0x2ef
 801c7a2:	f7ff bb2e 	b.w	801be02 <_dtoa_r+0x32>
 801c7a6:	693a      	ldr	r2, [r7, #16]
 801c7a8:	3202      	adds	r2, #2
 801c7aa:	0092      	lsls	r2, r2, #2
 801c7ac:	f107 010c 	add.w	r1, r7, #12
 801c7b0:	300c      	adds	r0, #12
 801c7b2:	f7ff fa6c 	bl	801bc8e <memcpy>
 801c7b6:	2201      	movs	r2, #1
 801c7b8:	4629      	mov	r1, r5
 801c7ba:	4620      	mov	r0, r4
 801c7bc:	f000 ff0a 	bl	801d5d4 <__lshift>
 801c7c0:	9b00      	ldr	r3, [sp, #0]
 801c7c2:	3301      	adds	r3, #1
 801c7c4:	9304      	str	r3, [sp, #16]
 801c7c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c7ca:	4413      	add	r3, r2
 801c7cc:	9308      	str	r3, [sp, #32]
 801c7ce:	9b02      	ldr	r3, [sp, #8]
 801c7d0:	f003 0301 	and.w	r3, r3, #1
 801c7d4:	46b8      	mov	r8, r7
 801c7d6:	9306      	str	r3, [sp, #24]
 801c7d8:	4607      	mov	r7, r0
 801c7da:	9b04      	ldr	r3, [sp, #16]
 801c7dc:	4631      	mov	r1, r6
 801c7de:	3b01      	subs	r3, #1
 801c7e0:	4650      	mov	r0, sl
 801c7e2:	9301      	str	r3, [sp, #4]
 801c7e4:	f7ff fa6c 	bl	801bcc0 <quorem>
 801c7e8:	4641      	mov	r1, r8
 801c7ea:	9002      	str	r0, [sp, #8]
 801c7ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801c7f0:	4650      	mov	r0, sl
 801c7f2:	f000 ff5b 	bl	801d6ac <__mcmp>
 801c7f6:	463a      	mov	r2, r7
 801c7f8:	9005      	str	r0, [sp, #20]
 801c7fa:	4631      	mov	r1, r6
 801c7fc:	4620      	mov	r0, r4
 801c7fe:	f000 ff71 	bl	801d6e4 <__mdiff>
 801c802:	68c2      	ldr	r2, [r0, #12]
 801c804:	4605      	mov	r5, r0
 801c806:	bb02      	cbnz	r2, 801c84a <_dtoa_r+0xa7a>
 801c808:	4601      	mov	r1, r0
 801c80a:	4650      	mov	r0, sl
 801c80c:	f000 ff4e 	bl	801d6ac <__mcmp>
 801c810:	4602      	mov	r2, r0
 801c812:	4629      	mov	r1, r5
 801c814:	4620      	mov	r0, r4
 801c816:	9209      	str	r2, [sp, #36]	; 0x24
 801c818:	f000 fcc2 	bl	801d1a0 <_Bfree>
 801c81c:	9b07      	ldr	r3, [sp, #28]
 801c81e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c820:	9d04      	ldr	r5, [sp, #16]
 801c822:	ea43 0102 	orr.w	r1, r3, r2
 801c826:	9b06      	ldr	r3, [sp, #24]
 801c828:	4319      	orrs	r1, r3
 801c82a:	d110      	bne.n	801c84e <_dtoa_r+0xa7e>
 801c82c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801c830:	d029      	beq.n	801c886 <_dtoa_r+0xab6>
 801c832:	9b05      	ldr	r3, [sp, #20]
 801c834:	2b00      	cmp	r3, #0
 801c836:	dd02      	ble.n	801c83e <_dtoa_r+0xa6e>
 801c838:	9b02      	ldr	r3, [sp, #8]
 801c83a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801c83e:	9b01      	ldr	r3, [sp, #4]
 801c840:	f883 9000 	strb.w	r9, [r3]
 801c844:	e774      	b.n	801c730 <_dtoa_r+0x960>
 801c846:	4638      	mov	r0, r7
 801c848:	e7ba      	b.n	801c7c0 <_dtoa_r+0x9f0>
 801c84a:	2201      	movs	r2, #1
 801c84c:	e7e1      	b.n	801c812 <_dtoa_r+0xa42>
 801c84e:	9b05      	ldr	r3, [sp, #20]
 801c850:	2b00      	cmp	r3, #0
 801c852:	db04      	blt.n	801c85e <_dtoa_r+0xa8e>
 801c854:	9907      	ldr	r1, [sp, #28]
 801c856:	430b      	orrs	r3, r1
 801c858:	9906      	ldr	r1, [sp, #24]
 801c85a:	430b      	orrs	r3, r1
 801c85c:	d120      	bne.n	801c8a0 <_dtoa_r+0xad0>
 801c85e:	2a00      	cmp	r2, #0
 801c860:	dded      	ble.n	801c83e <_dtoa_r+0xa6e>
 801c862:	4651      	mov	r1, sl
 801c864:	2201      	movs	r2, #1
 801c866:	4620      	mov	r0, r4
 801c868:	f000 feb4 	bl	801d5d4 <__lshift>
 801c86c:	4631      	mov	r1, r6
 801c86e:	4682      	mov	sl, r0
 801c870:	f000 ff1c 	bl	801d6ac <__mcmp>
 801c874:	2800      	cmp	r0, #0
 801c876:	dc03      	bgt.n	801c880 <_dtoa_r+0xab0>
 801c878:	d1e1      	bne.n	801c83e <_dtoa_r+0xa6e>
 801c87a:	f019 0f01 	tst.w	r9, #1
 801c87e:	d0de      	beq.n	801c83e <_dtoa_r+0xa6e>
 801c880:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801c884:	d1d8      	bne.n	801c838 <_dtoa_r+0xa68>
 801c886:	9a01      	ldr	r2, [sp, #4]
 801c888:	2339      	movs	r3, #57	; 0x39
 801c88a:	7013      	strb	r3, [r2, #0]
 801c88c:	462b      	mov	r3, r5
 801c88e:	461d      	mov	r5, r3
 801c890:	3b01      	subs	r3, #1
 801c892:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c896:	2a39      	cmp	r2, #57	; 0x39
 801c898:	d06c      	beq.n	801c974 <_dtoa_r+0xba4>
 801c89a:	3201      	adds	r2, #1
 801c89c:	701a      	strb	r2, [r3, #0]
 801c89e:	e747      	b.n	801c730 <_dtoa_r+0x960>
 801c8a0:	2a00      	cmp	r2, #0
 801c8a2:	dd07      	ble.n	801c8b4 <_dtoa_r+0xae4>
 801c8a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801c8a8:	d0ed      	beq.n	801c886 <_dtoa_r+0xab6>
 801c8aa:	9a01      	ldr	r2, [sp, #4]
 801c8ac:	f109 0301 	add.w	r3, r9, #1
 801c8b0:	7013      	strb	r3, [r2, #0]
 801c8b2:	e73d      	b.n	801c730 <_dtoa_r+0x960>
 801c8b4:	9b04      	ldr	r3, [sp, #16]
 801c8b6:	9a08      	ldr	r2, [sp, #32]
 801c8b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 801c8bc:	4293      	cmp	r3, r2
 801c8be:	d043      	beq.n	801c948 <_dtoa_r+0xb78>
 801c8c0:	4651      	mov	r1, sl
 801c8c2:	2300      	movs	r3, #0
 801c8c4:	220a      	movs	r2, #10
 801c8c6:	4620      	mov	r0, r4
 801c8c8:	f000 fc8c 	bl	801d1e4 <__multadd>
 801c8cc:	45b8      	cmp	r8, r7
 801c8ce:	4682      	mov	sl, r0
 801c8d0:	f04f 0300 	mov.w	r3, #0
 801c8d4:	f04f 020a 	mov.w	r2, #10
 801c8d8:	4641      	mov	r1, r8
 801c8da:	4620      	mov	r0, r4
 801c8dc:	d107      	bne.n	801c8ee <_dtoa_r+0xb1e>
 801c8de:	f000 fc81 	bl	801d1e4 <__multadd>
 801c8e2:	4680      	mov	r8, r0
 801c8e4:	4607      	mov	r7, r0
 801c8e6:	9b04      	ldr	r3, [sp, #16]
 801c8e8:	3301      	adds	r3, #1
 801c8ea:	9304      	str	r3, [sp, #16]
 801c8ec:	e775      	b.n	801c7da <_dtoa_r+0xa0a>
 801c8ee:	f000 fc79 	bl	801d1e4 <__multadd>
 801c8f2:	4639      	mov	r1, r7
 801c8f4:	4680      	mov	r8, r0
 801c8f6:	2300      	movs	r3, #0
 801c8f8:	220a      	movs	r2, #10
 801c8fa:	4620      	mov	r0, r4
 801c8fc:	f000 fc72 	bl	801d1e4 <__multadd>
 801c900:	4607      	mov	r7, r0
 801c902:	e7f0      	b.n	801c8e6 <_dtoa_r+0xb16>
 801c904:	9b04      	ldr	r3, [sp, #16]
 801c906:	9301      	str	r3, [sp, #4]
 801c908:	9d00      	ldr	r5, [sp, #0]
 801c90a:	4631      	mov	r1, r6
 801c90c:	4650      	mov	r0, sl
 801c90e:	f7ff f9d7 	bl	801bcc0 <quorem>
 801c912:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801c916:	9b00      	ldr	r3, [sp, #0]
 801c918:	f805 9b01 	strb.w	r9, [r5], #1
 801c91c:	1aea      	subs	r2, r5, r3
 801c91e:	9b01      	ldr	r3, [sp, #4]
 801c920:	4293      	cmp	r3, r2
 801c922:	dd07      	ble.n	801c934 <_dtoa_r+0xb64>
 801c924:	4651      	mov	r1, sl
 801c926:	2300      	movs	r3, #0
 801c928:	220a      	movs	r2, #10
 801c92a:	4620      	mov	r0, r4
 801c92c:	f000 fc5a 	bl	801d1e4 <__multadd>
 801c930:	4682      	mov	sl, r0
 801c932:	e7ea      	b.n	801c90a <_dtoa_r+0xb3a>
 801c934:	9b01      	ldr	r3, [sp, #4]
 801c936:	2b00      	cmp	r3, #0
 801c938:	bfc8      	it	gt
 801c93a:	461d      	movgt	r5, r3
 801c93c:	9b00      	ldr	r3, [sp, #0]
 801c93e:	bfd8      	it	le
 801c940:	2501      	movle	r5, #1
 801c942:	441d      	add	r5, r3
 801c944:	f04f 0800 	mov.w	r8, #0
 801c948:	4651      	mov	r1, sl
 801c94a:	2201      	movs	r2, #1
 801c94c:	4620      	mov	r0, r4
 801c94e:	f000 fe41 	bl	801d5d4 <__lshift>
 801c952:	4631      	mov	r1, r6
 801c954:	4682      	mov	sl, r0
 801c956:	f000 fea9 	bl	801d6ac <__mcmp>
 801c95a:	2800      	cmp	r0, #0
 801c95c:	dc96      	bgt.n	801c88c <_dtoa_r+0xabc>
 801c95e:	d102      	bne.n	801c966 <_dtoa_r+0xb96>
 801c960:	f019 0f01 	tst.w	r9, #1
 801c964:	d192      	bne.n	801c88c <_dtoa_r+0xabc>
 801c966:	462b      	mov	r3, r5
 801c968:	461d      	mov	r5, r3
 801c96a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c96e:	2a30      	cmp	r2, #48	; 0x30
 801c970:	d0fa      	beq.n	801c968 <_dtoa_r+0xb98>
 801c972:	e6dd      	b.n	801c730 <_dtoa_r+0x960>
 801c974:	9a00      	ldr	r2, [sp, #0]
 801c976:	429a      	cmp	r2, r3
 801c978:	d189      	bne.n	801c88e <_dtoa_r+0xabe>
 801c97a:	f10b 0b01 	add.w	fp, fp, #1
 801c97e:	2331      	movs	r3, #49	; 0x31
 801c980:	e796      	b.n	801c8b0 <_dtoa_r+0xae0>
 801c982:	4b0a      	ldr	r3, [pc, #40]	; (801c9ac <_dtoa_r+0xbdc>)
 801c984:	f7ff ba99 	b.w	801beba <_dtoa_r+0xea>
 801c988:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c98a:	2b00      	cmp	r3, #0
 801c98c:	f47f aa6d 	bne.w	801be6a <_dtoa_r+0x9a>
 801c990:	4b07      	ldr	r3, [pc, #28]	; (801c9b0 <_dtoa_r+0xbe0>)
 801c992:	f7ff ba92 	b.w	801beba <_dtoa_r+0xea>
 801c996:	9b01      	ldr	r3, [sp, #4]
 801c998:	2b00      	cmp	r3, #0
 801c99a:	dcb5      	bgt.n	801c908 <_dtoa_r+0xb38>
 801c99c:	9b07      	ldr	r3, [sp, #28]
 801c99e:	2b02      	cmp	r3, #2
 801c9a0:	f73f aeb1 	bgt.w	801c706 <_dtoa_r+0x936>
 801c9a4:	e7b0      	b.n	801c908 <_dtoa_r+0xb38>
 801c9a6:	bf00      	nop
 801c9a8:	080249c1 	.word	0x080249c1
 801c9ac:	08024919 	.word	0x08024919
 801c9b0:	08024945 	.word	0x08024945

0801c9b4 <_free_r>:
 801c9b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c9b6:	2900      	cmp	r1, #0
 801c9b8:	d044      	beq.n	801ca44 <_free_r+0x90>
 801c9ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c9be:	9001      	str	r0, [sp, #4]
 801c9c0:	2b00      	cmp	r3, #0
 801c9c2:	f1a1 0404 	sub.w	r4, r1, #4
 801c9c6:	bfb8      	it	lt
 801c9c8:	18e4      	addlt	r4, r4, r3
 801c9ca:	f7fd f9a1 	bl	8019d10 <__malloc_lock>
 801c9ce:	4a1e      	ldr	r2, [pc, #120]	; (801ca48 <_free_r+0x94>)
 801c9d0:	9801      	ldr	r0, [sp, #4]
 801c9d2:	6813      	ldr	r3, [r2, #0]
 801c9d4:	b933      	cbnz	r3, 801c9e4 <_free_r+0x30>
 801c9d6:	6063      	str	r3, [r4, #4]
 801c9d8:	6014      	str	r4, [r2, #0]
 801c9da:	b003      	add	sp, #12
 801c9dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c9e0:	f7fd b99c 	b.w	8019d1c <__malloc_unlock>
 801c9e4:	42a3      	cmp	r3, r4
 801c9e6:	d908      	bls.n	801c9fa <_free_r+0x46>
 801c9e8:	6825      	ldr	r5, [r4, #0]
 801c9ea:	1961      	adds	r1, r4, r5
 801c9ec:	428b      	cmp	r3, r1
 801c9ee:	bf01      	itttt	eq
 801c9f0:	6819      	ldreq	r1, [r3, #0]
 801c9f2:	685b      	ldreq	r3, [r3, #4]
 801c9f4:	1949      	addeq	r1, r1, r5
 801c9f6:	6021      	streq	r1, [r4, #0]
 801c9f8:	e7ed      	b.n	801c9d6 <_free_r+0x22>
 801c9fa:	461a      	mov	r2, r3
 801c9fc:	685b      	ldr	r3, [r3, #4]
 801c9fe:	b10b      	cbz	r3, 801ca04 <_free_r+0x50>
 801ca00:	42a3      	cmp	r3, r4
 801ca02:	d9fa      	bls.n	801c9fa <_free_r+0x46>
 801ca04:	6811      	ldr	r1, [r2, #0]
 801ca06:	1855      	adds	r5, r2, r1
 801ca08:	42a5      	cmp	r5, r4
 801ca0a:	d10b      	bne.n	801ca24 <_free_r+0x70>
 801ca0c:	6824      	ldr	r4, [r4, #0]
 801ca0e:	4421      	add	r1, r4
 801ca10:	1854      	adds	r4, r2, r1
 801ca12:	42a3      	cmp	r3, r4
 801ca14:	6011      	str	r1, [r2, #0]
 801ca16:	d1e0      	bne.n	801c9da <_free_r+0x26>
 801ca18:	681c      	ldr	r4, [r3, #0]
 801ca1a:	685b      	ldr	r3, [r3, #4]
 801ca1c:	6053      	str	r3, [r2, #4]
 801ca1e:	440c      	add	r4, r1
 801ca20:	6014      	str	r4, [r2, #0]
 801ca22:	e7da      	b.n	801c9da <_free_r+0x26>
 801ca24:	d902      	bls.n	801ca2c <_free_r+0x78>
 801ca26:	230c      	movs	r3, #12
 801ca28:	6003      	str	r3, [r0, #0]
 801ca2a:	e7d6      	b.n	801c9da <_free_r+0x26>
 801ca2c:	6825      	ldr	r5, [r4, #0]
 801ca2e:	1961      	adds	r1, r4, r5
 801ca30:	428b      	cmp	r3, r1
 801ca32:	bf04      	itt	eq
 801ca34:	6819      	ldreq	r1, [r3, #0]
 801ca36:	685b      	ldreq	r3, [r3, #4]
 801ca38:	6063      	str	r3, [r4, #4]
 801ca3a:	bf04      	itt	eq
 801ca3c:	1949      	addeq	r1, r1, r5
 801ca3e:	6021      	streq	r1, [r4, #0]
 801ca40:	6054      	str	r4, [r2, #4]
 801ca42:	e7ca      	b.n	801c9da <_free_r+0x26>
 801ca44:	b003      	add	sp, #12
 801ca46:	bd30      	pop	{r4, r5, pc}
 801ca48:	20001724 	.word	0x20001724

0801ca4c <rshift>:
 801ca4c:	6903      	ldr	r3, [r0, #16]
 801ca4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801ca52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ca56:	ea4f 1261 	mov.w	r2, r1, asr #5
 801ca5a:	f100 0414 	add.w	r4, r0, #20
 801ca5e:	dd45      	ble.n	801caec <rshift+0xa0>
 801ca60:	f011 011f 	ands.w	r1, r1, #31
 801ca64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801ca68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801ca6c:	d10c      	bne.n	801ca88 <rshift+0x3c>
 801ca6e:	f100 0710 	add.w	r7, r0, #16
 801ca72:	4629      	mov	r1, r5
 801ca74:	42b1      	cmp	r1, r6
 801ca76:	d334      	bcc.n	801cae2 <rshift+0x96>
 801ca78:	1a9b      	subs	r3, r3, r2
 801ca7a:	009b      	lsls	r3, r3, #2
 801ca7c:	1eea      	subs	r2, r5, #3
 801ca7e:	4296      	cmp	r6, r2
 801ca80:	bf38      	it	cc
 801ca82:	2300      	movcc	r3, #0
 801ca84:	4423      	add	r3, r4
 801ca86:	e015      	b.n	801cab4 <rshift+0x68>
 801ca88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801ca8c:	f1c1 0820 	rsb	r8, r1, #32
 801ca90:	40cf      	lsrs	r7, r1
 801ca92:	f105 0e04 	add.w	lr, r5, #4
 801ca96:	46a1      	mov	r9, r4
 801ca98:	4576      	cmp	r6, lr
 801ca9a:	46f4      	mov	ip, lr
 801ca9c:	d815      	bhi.n	801caca <rshift+0x7e>
 801ca9e:	1a9a      	subs	r2, r3, r2
 801caa0:	0092      	lsls	r2, r2, #2
 801caa2:	3a04      	subs	r2, #4
 801caa4:	3501      	adds	r5, #1
 801caa6:	42ae      	cmp	r6, r5
 801caa8:	bf38      	it	cc
 801caaa:	2200      	movcc	r2, #0
 801caac:	18a3      	adds	r3, r4, r2
 801caae:	50a7      	str	r7, [r4, r2]
 801cab0:	b107      	cbz	r7, 801cab4 <rshift+0x68>
 801cab2:	3304      	adds	r3, #4
 801cab4:	1b1a      	subs	r2, r3, r4
 801cab6:	42a3      	cmp	r3, r4
 801cab8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801cabc:	bf08      	it	eq
 801cabe:	2300      	moveq	r3, #0
 801cac0:	6102      	str	r2, [r0, #16]
 801cac2:	bf08      	it	eq
 801cac4:	6143      	streq	r3, [r0, #20]
 801cac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801caca:	f8dc c000 	ldr.w	ip, [ip]
 801cace:	fa0c fc08 	lsl.w	ip, ip, r8
 801cad2:	ea4c 0707 	orr.w	r7, ip, r7
 801cad6:	f849 7b04 	str.w	r7, [r9], #4
 801cada:	f85e 7b04 	ldr.w	r7, [lr], #4
 801cade:	40cf      	lsrs	r7, r1
 801cae0:	e7da      	b.n	801ca98 <rshift+0x4c>
 801cae2:	f851 cb04 	ldr.w	ip, [r1], #4
 801cae6:	f847 cf04 	str.w	ip, [r7, #4]!
 801caea:	e7c3      	b.n	801ca74 <rshift+0x28>
 801caec:	4623      	mov	r3, r4
 801caee:	e7e1      	b.n	801cab4 <rshift+0x68>

0801caf0 <__hexdig_fun>:
 801caf0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801caf4:	2b09      	cmp	r3, #9
 801caf6:	d802      	bhi.n	801cafe <__hexdig_fun+0xe>
 801caf8:	3820      	subs	r0, #32
 801cafa:	b2c0      	uxtb	r0, r0
 801cafc:	4770      	bx	lr
 801cafe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801cb02:	2b05      	cmp	r3, #5
 801cb04:	d801      	bhi.n	801cb0a <__hexdig_fun+0x1a>
 801cb06:	3847      	subs	r0, #71	; 0x47
 801cb08:	e7f7      	b.n	801cafa <__hexdig_fun+0xa>
 801cb0a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801cb0e:	2b05      	cmp	r3, #5
 801cb10:	d801      	bhi.n	801cb16 <__hexdig_fun+0x26>
 801cb12:	3827      	subs	r0, #39	; 0x27
 801cb14:	e7f1      	b.n	801cafa <__hexdig_fun+0xa>
 801cb16:	2000      	movs	r0, #0
 801cb18:	4770      	bx	lr
	...

0801cb1c <__gethex>:
 801cb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb20:	4617      	mov	r7, r2
 801cb22:	680a      	ldr	r2, [r1, #0]
 801cb24:	b085      	sub	sp, #20
 801cb26:	f102 0b02 	add.w	fp, r2, #2
 801cb2a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801cb2e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801cb32:	4681      	mov	r9, r0
 801cb34:	468a      	mov	sl, r1
 801cb36:	9302      	str	r3, [sp, #8]
 801cb38:	32fe      	adds	r2, #254	; 0xfe
 801cb3a:	eb02 030b 	add.w	r3, r2, fp
 801cb3e:	46d8      	mov	r8, fp
 801cb40:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801cb44:	9301      	str	r3, [sp, #4]
 801cb46:	2830      	cmp	r0, #48	; 0x30
 801cb48:	d0f7      	beq.n	801cb3a <__gethex+0x1e>
 801cb4a:	f7ff ffd1 	bl	801caf0 <__hexdig_fun>
 801cb4e:	4604      	mov	r4, r0
 801cb50:	2800      	cmp	r0, #0
 801cb52:	d138      	bne.n	801cbc6 <__gethex+0xaa>
 801cb54:	49a7      	ldr	r1, [pc, #668]	; (801cdf4 <__gethex+0x2d8>)
 801cb56:	2201      	movs	r2, #1
 801cb58:	4640      	mov	r0, r8
 801cb5a:	f7fe ff88 	bl	801ba6e <strncmp>
 801cb5e:	4606      	mov	r6, r0
 801cb60:	2800      	cmp	r0, #0
 801cb62:	d169      	bne.n	801cc38 <__gethex+0x11c>
 801cb64:	f898 0001 	ldrb.w	r0, [r8, #1]
 801cb68:	465d      	mov	r5, fp
 801cb6a:	f7ff ffc1 	bl	801caf0 <__hexdig_fun>
 801cb6e:	2800      	cmp	r0, #0
 801cb70:	d064      	beq.n	801cc3c <__gethex+0x120>
 801cb72:	465a      	mov	r2, fp
 801cb74:	7810      	ldrb	r0, [r2, #0]
 801cb76:	2830      	cmp	r0, #48	; 0x30
 801cb78:	4690      	mov	r8, r2
 801cb7a:	f102 0201 	add.w	r2, r2, #1
 801cb7e:	d0f9      	beq.n	801cb74 <__gethex+0x58>
 801cb80:	f7ff ffb6 	bl	801caf0 <__hexdig_fun>
 801cb84:	2301      	movs	r3, #1
 801cb86:	fab0 f480 	clz	r4, r0
 801cb8a:	0964      	lsrs	r4, r4, #5
 801cb8c:	465e      	mov	r6, fp
 801cb8e:	9301      	str	r3, [sp, #4]
 801cb90:	4642      	mov	r2, r8
 801cb92:	4615      	mov	r5, r2
 801cb94:	3201      	adds	r2, #1
 801cb96:	7828      	ldrb	r0, [r5, #0]
 801cb98:	f7ff ffaa 	bl	801caf0 <__hexdig_fun>
 801cb9c:	2800      	cmp	r0, #0
 801cb9e:	d1f8      	bne.n	801cb92 <__gethex+0x76>
 801cba0:	4994      	ldr	r1, [pc, #592]	; (801cdf4 <__gethex+0x2d8>)
 801cba2:	2201      	movs	r2, #1
 801cba4:	4628      	mov	r0, r5
 801cba6:	f7fe ff62 	bl	801ba6e <strncmp>
 801cbaa:	b978      	cbnz	r0, 801cbcc <__gethex+0xb0>
 801cbac:	b946      	cbnz	r6, 801cbc0 <__gethex+0xa4>
 801cbae:	1c6e      	adds	r6, r5, #1
 801cbb0:	4632      	mov	r2, r6
 801cbb2:	4615      	mov	r5, r2
 801cbb4:	3201      	adds	r2, #1
 801cbb6:	7828      	ldrb	r0, [r5, #0]
 801cbb8:	f7ff ff9a 	bl	801caf0 <__hexdig_fun>
 801cbbc:	2800      	cmp	r0, #0
 801cbbe:	d1f8      	bne.n	801cbb2 <__gethex+0x96>
 801cbc0:	1b73      	subs	r3, r6, r5
 801cbc2:	009e      	lsls	r6, r3, #2
 801cbc4:	e004      	b.n	801cbd0 <__gethex+0xb4>
 801cbc6:	2400      	movs	r4, #0
 801cbc8:	4626      	mov	r6, r4
 801cbca:	e7e1      	b.n	801cb90 <__gethex+0x74>
 801cbcc:	2e00      	cmp	r6, #0
 801cbce:	d1f7      	bne.n	801cbc0 <__gethex+0xa4>
 801cbd0:	782b      	ldrb	r3, [r5, #0]
 801cbd2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801cbd6:	2b50      	cmp	r3, #80	; 0x50
 801cbd8:	d13d      	bne.n	801cc56 <__gethex+0x13a>
 801cbda:	786b      	ldrb	r3, [r5, #1]
 801cbdc:	2b2b      	cmp	r3, #43	; 0x2b
 801cbde:	d02f      	beq.n	801cc40 <__gethex+0x124>
 801cbe0:	2b2d      	cmp	r3, #45	; 0x2d
 801cbe2:	d031      	beq.n	801cc48 <__gethex+0x12c>
 801cbe4:	1c69      	adds	r1, r5, #1
 801cbe6:	f04f 0b00 	mov.w	fp, #0
 801cbea:	7808      	ldrb	r0, [r1, #0]
 801cbec:	f7ff ff80 	bl	801caf0 <__hexdig_fun>
 801cbf0:	1e42      	subs	r2, r0, #1
 801cbf2:	b2d2      	uxtb	r2, r2
 801cbf4:	2a18      	cmp	r2, #24
 801cbf6:	d82e      	bhi.n	801cc56 <__gethex+0x13a>
 801cbf8:	f1a0 0210 	sub.w	r2, r0, #16
 801cbfc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801cc00:	f7ff ff76 	bl	801caf0 <__hexdig_fun>
 801cc04:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 801cc08:	fa5f fc8c 	uxtb.w	ip, ip
 801cc0c:	f1bc 0f18 	cmp.w	ip, #24
 801cc10:	d91d      	bls.n	801cc4e <__gethex+0x132>
 801cc12:	f1bb 0f00 	cmp.w	fp, #0
 801cc16:	d000      	beq.n	801cc1a <__gethex+0xfe>
 801cc18:	4252      	negs	r2, r2
 801cc1a:	4416      	add	r6, r2
 801cc1c:	f8ca 1000 	str.w	r1, [sl]
 801cc20:	b1dc      	cbz	r4, 801cc5a <__gethex+0x13e>
 801cc22:	9b01      	ldr	r3, [sp, #4]
 801cc24:	2b00      	cmp	r3, #0
 801cc26:	bf14      	ite	ne
 801cc28:	f04f 0800 	movne.w	r8, #0
 801cc2c:	f04f 0806 	moveq.w	r8, #6
 801cc30:	4640      	mov	r0, r8
 801cc32:	b005      	add	sp, #20
 801cc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc38:	4645      	mov	r5, r8
 801cc3a:	4626      	mov	r6, r4
 801cc3c:	2401      	movs	r4, #1
 801cc3e:	e7c7      	b.n	801cbd0 <__gethex+0xb4>
 801cc40:	f04f 0b00 	mov.w	fp, #0
 801cc44:	1ca9      	adds	r1, r5, #2
 801cc46:	e7d0      	b.n	801cbea <__gethex+0xce>
 801cc48:	f04f 0b01 	mov.w	fp, #1
 801cc4c:	e7fa      	b.n	801cc44 <__gethex+0x128>
 801cc4e:	230a      	movs	r3, #10
 801cc50:	fb03 0002 	mla	r0, r3, r2, r0
 801cc54:	e7d0      	b.n	801cbf8 <__gethex+0xdc>
 801cc56:	4629      	mov	r1, r5
 801cc58:	e7e0      	b.n	801cc1c <__gethex+0x100>
 801cc5a:	eba5 0308 	sub.w	r3, r5, r8
 801cc5e:	3b01      	subs	r3, #1
 801cc60:	4621      	mov	r1, r4
 801cc62:	2b07      	cmp	r3, #7
 801cc64:	dc0a      	bgt.n	801cc7c <__gethex+0x160>
 801cc66:	4648      	mov	r0, r9
 801cc68:	f000 fa5a 	bl	801d120 <_Balloc>
 801cc6c:	4604      	mov	r4, r0
 801cc6e:	b940      	cbnz	r0, 801cc82 <__gethex+0x166>
 801cc70:	4b61      	ldr	r3, [pc, #388]	; (801cdf8 <__gethex+0x2dc>)
 801cc72:	4602      	mov	r2, r0
 801cc74:	21e4      	movs	r1, #228	; 0xe4
 801cc76:	4861      	ldr	r0, [pc, #388]	; (801cdfc <__gethex+0x2e0>)
 801cc78:	f001 fafc 	bl	801e274 <__assert_func>
 801cc7c:	3101      	adds	r1, #1
 801cc7e:	105b      	asrs	r3, r3, #1
 801cc80:	e7ef      	b.n	801cc62 <__gethex+0x146>
 801cc82:	f100 0a14 	add.w	sl, r0, #20
 801cc86:	2300      	movs	r3, #0
 801cc88:	495a      	ldr	r1, [pc, #360]	; (801cdf4 <__gethex+0x2d8>)
 801cc8a:	f8cd a004 	str.w	sl, [sp, #4]
 801cc8e:	469b      	mov	fp, r3
 801cc90:	45a8      	cmp	r8, r5
 801cc92:	d342      	bcc.n	801cd1a <__gethex+0x1fe>
 801cc94:	9801      	ldr	r0, [sp, #4]
 801cc96:	f840 bb04 	str.w	fp, [r0], #4
 801cc9a:	eba0 000a 	sub.w	r0, r0, sl
 801cc9e:	1080      	asrs	r0, r0, #2
 801cca0:	6120      	str	r0, [r4, #16]
 801cca2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801cca6:	4658      	mov	r0, fp
 801cca8:	f000 fb2c 	bl	801d304 <__hi0bits>
 801ccac:	683d      	ldr	r5, [r7, #0]
 801ccae:	eba8 0000 	sub.w	r0, r8, r0
 801ccb2:	42a8      	cmp	r0, r5
 801ccb4:	dd59      	ble.n	801cd6a <__gethex+0x24e>
 801ccb6:	eba0 0805 	sub.w	r8, r0, r5
 801ccba:	4641      	mov	r1, r8
 801ccbc:	4620      	mov	r0, r4
 801ccbe:	f000 febb 	bl	801da38 <__any_on>
 801ccc2:	4683      	mov	fp, r0
 801ccc4:	b1b8      	cbz	r0, 801ccf6 <__gethex+0x1da>
 801ccc6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 801ccca:	1159      	asrs	r1, r3, #5
 801cccc:	f003 021f 	and.w	r2, r3, #31
 801ccd0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801ccd4:	f04f 0b01 	mov.w	fp, #1
 801ccd8:	fa0b f202 	lsl.w	r2, fp, r2
 801ccdc:	420a      	tst	r2, r1
 801ccde:	d00a      	beq.n	801ccf6 <__gethex+0x1da>
 801cce0:	455b      	cmp	r3, fp
 801cce2:	dd06      	ble.n	801ccf2 <__gethex+0x1d6>
 801cce4:	f1a8 0102 	sub.w	r1, r8, #2
 801cce8:	4620      	mov	r0, r4
 801ccea:	f000 fea5 	bl	801da38 <__any_on>
 801ccee:	2800      	cmp	r0, #0
 801ccf0:	d138      	bne.n	801cd64 <__gethex+0x248>
 801ccf2:	f04f 0b02 	mov.w	fp, #2
 801ccf6:	4641      	mov	r1, r8
 801ccf8:	4620      	mov	r0, r4
 801ccfa:	f7ff fea7 	bl	801ca4c <rshift>
 801ccfe:	4446      	add	r6, r8
 801cd00:	68bb      	ldr	r3, [r7, #8]
 801cd02:	42b3      	cmp	r3, r6
 801cd04:	da41      	bge.n	801cd8a <__gethex+0x26e>
 801cd06:	4621      	mov	r1, r4
 801cd08:	4648      	mov	r0, r9
 801cd0a:	f000 fa49 	bl	801d1a0 <_Bfree>
 801cd0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cd10:	2300      	movs	r3, #0
 801cd12:	6013      	str	r3, [r2, #0]
 801cd14:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801cd18:	e78a      	b.n	801cc30 <__gethex+0x114>
 801cd1a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801cd1e:	2a2e      	cmp	r2, #46	; 0x2e
 801cd20:	d014      	beq.n	801cd4c <__gethex+0x230>
 801cd22:	2b20      	cmp	r3, #32
 801cd24:	d106      	bne.n	801cd34 <__gethex+0x218>
 801cd26:	9b01      	ldr	r3, [sp, #4]
 801cd28:	f843 bb04 	str.w	fp, [r3], #4
 801cd2c:	f04f 0b00 	mov.w	fp, #0
 801cd30:	9301      	str	r3, [sp, #4]
 801cd32:	465b      	mov	r3, fp
 801cd34:	7828      	ldrb	r0, [r5, #0]
 801cd36:	9303      	str	r3, [sp, #12]
 801cd38:	f7ff feda 	bl	801caf0 <__hexdig_fun>
 801cd3c:	9b03      	ldr	r3, [sp, #12]
 801cd3e:	f000 000f 	and.w	r0, r0, #15
 801cd42:	4098      	lsls	r0, r3
 801cd44:	ea4b 0b00 	orr.w	fp, fp, r0
 801cd48:	3304      	adds	r3, #4
 801cd4a:	e7a1      	b.n	801cc90 <__gethex+0x174>
 801cd4c:	45a8      	cmp	r8, r5
 801cd4e:	d8e8      	bhi.n	801cd22 <__gethex+0x206>
 801cd50:	2201      	movs	r2, #1
 801cd52:	4628      	mov	r0, r5
 801cd54:	9303      	str	r3, [sp, #12]
 801cd56:	f7fe fe8a 	bl	801ba6e <strncmp>
 801cd5a:	4926      	ldr	r1, [pc, #152]	; (801cdf4 <__gethex+0x2d8>)
 801cd5c:	9b03      	ldr	r3, [sp, #12]
 801cd5e:	2800      	cmp	r0, #0
 801cd60:	d1df      	bne.n	801cd22 <__gethex+0x206>
 801cd62:	e795      	b.n	801cc90 <__gethex+0x174>
 801cd64:	f04f 0b03 	mov.w	fp, #3
 801cd68:	e7c5      	b.n	801ccf6 <__gethex+0x1da>
 801cd6a:	da0b      	bge.n	801cd84 <__gethex+0x268>
 801cd6c:	eba5 0800 	sub.w	r8, r5, r0
 801cd70:	4621      	mov	r1, r4
 801cd72:	4642      	mov	r2, r8
 801cd74:	4648      	mov	r0, r9
 801cd76:	f000 fc2d 	bl	801d5d4 <__lshift>
 801cd7a:	eba6 0608 	sub.w	r6, r6, r8
 801cd7e:	4604      	mov	r4, r0
 801cd80:	f100 0a14 	add.w	sl, r0, #20
 801cd84:	f04f 0b00 	mov.w	fp, #0
 801cd88:	e7ba      	b.n	801cd00 <__gethex+0x1e4>
 801cd8a:	687b      	ldr	r3, [r7, #4]
 801cd8c:	42b3      	cmp	r3, r6
 801cd8e:	dd73      	ble.n	801ce78 <__gethex+0x35c>
 801cd90:	1b9e      	subs	r6, r3, r6
 801cd92:	42b5      	cmp	r5, r6
 801cd94:	dc34      	bgt.n	801ce00 <__gethex+0x2e4>
 801cd96:	68fb      	ldr	r3, [r7, #12]
 801cd98:	2b02      	cmp	r3, #2
 801cd9a:	d023      	beq.n	801cde4 <__gethex+0x2c8>
 801cd9c:	2b03      	cmp	r3, #3
 801cd9e:	d025      	beq.n	801cdec <__gethex+0x2d0>
 801cda0:	2b01      	cmp	r3, #1
 801cda2:	d115      	bne.n	801cdd0 <__gethex+0x2b4>
 801cda4:	42b5      	cmp	r5, r6
 801cda6:	d113      	bne.n	801cdd0 <__gethex+0x2b4>
 801cda8:	2d01      	cmp	r5, #1
 801cdaa:	d10b      	bne.n	801cdc4 <__gethex+0x2a8>
 801cdac:	9a02      	ldr	r2, [sp, #8]
 801cdae:	687b      	ldr	r3, [r7, #4]
 801cdb0:	6013      	str	r3, [r2, #0]
 801cdb2:	2301      	movs	r3, #1
 801cdb4:	6123      	str	r3, [r4, #16]
 801cdb6:	f8ca 3000 	str.w	r3, [sl]
 801cdba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cdbc:	f04f 0862 	mov.w	r8, #98	; 0x62
 801cdc0:	601c      	str	r4, [r3, #0]
 801cdc2:	e735      	b.n	801cc30 <__gethex+0x114>
 801cdc4:	1e69      	subs	r1, r5, #1
 801cdc6:	4620      	mov	r0, r4
 801cdc8:	f000 fe36 	bl	801da38 <__any_on>
 801cdcc:	2800      	cmp	r0, #0
 801cdce:	d1ed      	bne.n	801cdac <__gethex+0x290>
 801cdd0:	4621      	mov	r1, r4
 801cdd2:	4648      	mov	r0, r9
 801cdd4:	f000 f9e4 	bl	801d1a0 <_Bfree>
 801cdd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cdda:	2300      	movs	r3, #0
 801cddc:	6013      	str	r3, [r2, #0]
 801cdde:	f04f 0850 	mov.w	r8, #80	; 0x50
 801cde2:	e725      	b.n	801cc30 <__gethex+0x114>
 801cde4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cde6:	2b00      	cmp	r3, #0
 801cde8:	d1f2      	bne.n	801cdd0 <__gethex+0x2b4>
 801cdea:	e7df      	b.n	801cdac <__gethex+0x290>
 801cdec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cdee:	2b00      	cmp	r3, #0
 801cdf0:	d1dc      	bne.n	801cdac <__gethex+0x290>
 801cdf2:	e7ed      	b.n	801cdd0 <__gethex+0x2b4>
 801cdf4:	080247b0 	.word	0x080247b0
 801cdf8:	080249c1 	.word	0x080249c1
 801cdfc:	080249d2 	.word	0x080249d2
 801ce00:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 801ce04:	f1bb 0f00 	cmp.w	fp, #0
 801ce08:	d133      	bne.n	801ce72 <__gethex+0x356>
 801ce0a:	f1b8 0f00 	cmp.w	r8, #0
 801ce0e:	d004      	beq.n	801ce1a <__gethex+0x2fe>
 801ce10:	4641      	mov	r1, r8
 801ce12:	4620      	mov	r0, r4
 801ce14:	f000 fe10 	bl	801da38 <__any_on>
 801ce18:	4683      	mov	fp, r0
 801ce1a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801ce1e:	2301      	movs	r3, #1
 801ce20:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801ce24:	f008 081f 	and.w	r8, r8, #31
 801ce28:	fa03 f308 	lsl.w	r3, r3, r8
 801ce2c:	4213      	tst	r3, r2
 801ce2e:	4631      	mov	r1, r6
 801ce30:	4620      	mov	r0, r4
 801ce32:	bf18      	it	ne
 801ce34:	f04b 0b02 	orrne.w	fp, fp, #2
 801ce38:	1bad      	subs	r5, r5, r6
 801ce3a:	f7ff fe07 	bl	801ca4c <rshift>
 801ce3e:	687e      	ldr	r6, [r7, #4]
 801ce40:	f04f 0802 	mov.w	r8, #2
 801ce44:	f1bb 0f00 	cmp.w	fp, #0
 801ce48:	d04a      	beq.n	801cee0 <__gethex+0x3c4>
 801ce4a:	68fb      	ldr	r3, [r7, #12]
 801ce4c:	2b02      	cmp	r3, #2
 801ce4e:	d016      	beq.n	801ce7e <__gethex+0x362>
 801ce50:	2b03      	cmp	r3, #3
 801ce52:	d018      	beq.n	801ce86 <__gethex+0x36a>
 801ce54:	2b01      	cmp	r3, #1
 801ce56:	d109      	bne.n	801ce6c <__gethex+0x350>
 801ce58:	f01b 0f02 	tst.w	fp, #2
 801ce5c:	d006      	beq.n	801ce6c <__gethex+0x350>
 801ce5e:	f8da 3000 	ldr.w	r3, [sl]
 801ce62:	ea4b 0b03 	orr.w	fp, fp, r3
 801ce66:	f01b 0f01 	tst.w	fp, #1
 801ce6a:	d10f      	bne.n	801ce8c <__gethex+0x370>
 801ce6c:	f048 0810 	orr.w	r8, r8, #16
 801ce70:	e036      	b.n	801cee0 <__gethex+0x3c4>
 801ce72:	f04f 0b01 	mov.w	fp, #1
 801ce76:	e7d0      	b.n	801ce1a <__gethex+0x2fe>
 801ce78:	f04f 0801 	mov.w	r8, #1
 801ce7c:	e7e2      	b.n	801ce44 <__gethex+0x328>
 801ce7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ce80:	f1c3 0301 	rsb	r3, r3, #1
 801ce84:	930f      	str	r3, [sp, #60]	; 0x3c
 801ce86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ce88:	2b00      	cmp	r3, #0
 801ce8a:	d0ef      	beq.n	801ce6c <__gethex+0x350>
 801ce8c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ce90:	f104 0214 	add.w	r2, r4, #20
 801ce94:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801ce98:	9301      	str	r3, [sp, #4]
 801ce9a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801ce9e:	2300      	movs	r3, #0
 801cea0:	4694      	mov	ip, r2
 801cea2:	f852 1b04 	ldr.w	r1, [r2], #4
 801cea6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 801ceaa:	d01e      	beq.n	801ceea <__gethex+0x3ce>
 801ceac:	3101      	adds	r1, #1
 801ceae:	f8cc 1000 	str.w	r1, [ip]
 801ceb2:	f1b8 0f02 	cmp.w	r8, #2
 801ceb6:	f104 0214 	add.w	r2, r4, #20
 801ceba:	d13d      	bne.n	801cf38 <__gethex+0x41c>
 801cebc:	683b      	ldr	r3, [r7, #0]
 801cebe:	3b01      	subs	r3, #1
 801cec0:	42ab      	cmp	r3, r5
 801cec2:	d10b      	bne.n	801cedc <__gethex+0x3c0>
 801cec4:	1169      	asrs	r1, r5, #5
 801cec6:	2301      	movs	r3, #1
 801cec8:	f005 051f 	and.w	r5, r5, #31
 801cecc:	fa03 f505 	lsl.w	r5, r3, r5
 801ced0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ced4:	421d      	tst	r5, r3
 801ced6:	bf18      	it	ne
 801ced8:	f04f 0801 	movne.w	r8, #1
 801cedc:	f048 0820 	orr.w	r8, r8, #32
 801cee0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cee2:	601c      	str	r4, [r3, #0]
 801cee4:	9b02      	ldr	r3, [sp, #8]
 801cee6:	601e      	str	r6, [r3, #0]
 801cee8:	e6a2      	b.n	801cc30 <__gethex+0x114>
 801ceea:	4290      	cmp	r0, r2
 801ceec:	f842 3c04 	str.w	r3, [r2, #-4]
 801cef0:	d8d6      	bhi.n	801cea0 <__gethex+0x384>
 801cef2:	68a2      	ldr	r2, [r4, #8]
 801cef4:	4593      	cmp	fp, r2
 801cef6:	db17      	blt.n	801cf28 <__gethex+0x40c>
 801cef8:	6861      	ldr	r1, [r4, #4]
 801cefa:	4648      	mov	r0, r9
 801cefc:	3101      	adds	r1, #1
 801cefe:	f000 f90f 	bl	801d120 <_Balloc>
 801cf02:	4682      	mov	sl, r0
 801cf04:	b918      	cbnz	r0, 801cf0e <__gethex+0x3f2>
 801cf06:	4b1b      	ldr	r3, [pc, #108]	; (801cf74 <__gethex+0x458>)
 801cf08:	4602      	mov	r2, r0
 801cf0a:	2184      	movs	r1, #132	; 0x84
 801cf0c:	e6b3      	b.n	801cc76 <__gethex+0x15a>
 801cf0e:	6922      	ldr	r2, [r4, #16]
 801cf10:	3202      	adds	r2, #2
 801cf12:	f104 010c 	add.w	r1, r4, #12
 801cf16:	0092      	lsls	r2, r2, #2
 801cf18:	300c      	adds	r0, #12
 801cf1a:	f7fe feb8 	bl	801bc8e <memcpy>
 801cf1e:	4621      	mov	r1, r4
 801cf20:	4648      	mov	r0, r9
 801cf22:	f000 f93d 	bl	801d1a0 <_Bfree>
 801cf26:	4654      	mov	r4, sl
 801cf28:	6922      	ldr	r2, [r4, #16]
 801cf2a:	1c51      	adds	r1, r2, #1
 801cf2c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801cf30:	6121      	str	r1, [r4, #16]
 801cf32:	2101      	movs	r1, #1
 801cf34:	6151      	str	r1, [r2, #20]
 801cf36:	e7bc      	b.n	801ceb2 <__gethex+0x396>
 801cf38:	6921      	ldr	r1, [r4, #16]
 801cf3a:	4559      	cmp	r1, fp
 801cf3c:	dd0b      	ble.n	801cf56 <__gethex+0x43a>
 801cf3e:	2101      	movs	r1, #1
 801cf40:	4620      	mov	r0, r4
 801cf42:	f7ff fd83 	bl	801ca4c <rshift>
 801cf46:	68bb      	ldr	r3, [r7, #8]
 801cf48:	3601      	adds	r6, #1
 801cf4a:	42b3      	cmp	r3, r6
 801cf4c:	f6ff aedb 	blt.w	801cd06 <__gethex+0x1ea>
 801cf50:	f04f 0801 	mov.w	r8, #1
 801cf54:	e7c2      	b.n	801cedc <__gethex+0x3c0>
 801cf56:	f015 051f 	ands.w	r5, r5, #31
 801cf5a:	d0f9      	beq.n	801cf50 <__gethex+0x434>
 801cf5c:	9b01      	ldr	r3, [sp, #4]
 801cf5e:	441a      	add	r2, r3
 801cf60:	f1c5 0520 	rsb	r5, r5, #32
 801cf64:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801cf68:	f000 f9cc 	bl	801d304 <__hi0bits>
 801cf6c:	42a8      	cmp	r0, r5
 801cf6e:	dbe6      	blt.n	801cf3e <__gethex+0x422>
 801cf70:	e7ee      	b.n	801cf50 <__gethex+0x434>
 801cf72:	bf00      	nop
 801cf74:	080249c1 	.word	0x080249c1

0801cf78 <L_shift>:
 801cf78:	f1c2 0208 	rsb	r2, r2, #8
 801cf7c:	0092      	lsls	r2, r2, #2
 801cf7e:	b570      	push	{r4, r5, r6, lr}
 801cf80:	f1c2 0620 	rsb	r6, r2, #32
 801cf84:	6843      	ldr	r3, [r0, #4]
 801cf86:	6804      	ldr	r4, [r0, #0]
 801cf88:	fa03 f506 	lsl.w	r5, r3, r6
 801cf8c:	432c      	orrs	r4, r5
 801cf8e:	40d3      	lsrs	r3, r2
 801cf90:	6004      	str	r4, [r0, #0]
 801cf92:	f840 3f04 	str.w	r3, [r0, #4]!
 801cf96:	4288      	cmp	r0, r1
 801cf98:	d3f4      	bcc.n	801cf84 <L_shift+0xc>
 801cf9a:	bd70      	pop	{r4, r5, r6, pc}

0801cf9c <__match>:
 801cf9c:	b530      	push	{r4, r5, lr}
 801cf9e:	6803      	ldr	r3, [r0, #0]
 801cfa0:	3301      	adds	r3, #1
 801cfa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cfa6:	b914      	cbnz	r4, 801cfae <__match+0x12>
 801cfa8:	6003      	str	r3, [r0, #0]
 801cfaa:	2001      	movs	r0, #1
 801cfac:	bd30      	pop	{r4, r5, pc}
 801cfae:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cfb2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801cfb6:	2d19      	cmp	r5, #25
 801cfb8:	bf98      	it	ls
 801cfba:	3220      	addls	r2, #32
 801cfbc:	42a2      	cmp	r2, r4
 801cfbe:	d0f0      	beq.n	801cfa2 <__match+0x6>
 801cfc0:	2000      	movs	r0, #0
 801cfc2:	e7f3      	b.n	801cfac <__match+0x10>

0801cfc4 <__hexnan>:
 801cfc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfc8:	680b      	ldr	r3, [r1, #0]
 801cfca:	6801      	ldr	r1, [r0, #0]
 801cfcc:	115e      	asrs	r6, r3, #5
 801cfce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801cfd2:	f013 031f 	ands.w	r3, r3, #31
 801cfd6:	b087      	sub	sp, #28
 801cfd8:	bf18      	it	ne
 801cfda:	3604      	addne	r6, #4
 801cfdc:	2500      	movs	r5, #0
 801cfde:	1f37      	subs	r7, r6, #4
 801cfe0:	4682      	mov	sl, r0
 801cfe2:	4690      	mov	r8, r2
 801cfe4:	9301      	str	r3, [sp, #4]
 801cfe6:	f846 5c04 	str.w	r5, [r6, #-4]
 801cfea:	46b9      	mov	r9, r7
 801cfec:	463c      	mov	r4, r7
 801cfee:	9502      	str	r5, [sp, #8]
 801cff0:	46ab      	mov	fp, r5
 801cff2:	784a      	ldrb	r2, [r1, #1]
 801cff4:	1c4b      	adds	r3, r1, #1
 801cff6:	9303      	str	r3, [sp, #12]
 801cff8:	b342      	cbz	r2, 801d04c <__hexnan+0x88>
 801cffa:	4610      	mov	r0, r2
 801cffc:	9105      	str	r1, [sp, #20]
 801cffe:	9204      	str	r2, [sp, #16]
 801d000:	f7ff fd76 	bl	801caf0 <__hexdig_fun>
 801d004:	2800      	cmp	r0, #0
 801d006:	d14f      	bne.n	801d0a8 <__hexnan+0xe4>
 801d008:	9a04      	ldr	r2, [sp, #16]
 801d00a:	9905      	ldr	r1, [sp, #20]
 801d00c:	2a20      	cmp	r2, #32
 801d00e:	d818      	bhi.n	801d042 <__hexnan+0x7e>
 801d010:	9b02      	ldr	r3, [sp, #8]
 801d012:	459b      	cmp	fp, r3
 801d014:	dd13      	ble.n	801d03e <__hexnan+0x7a>
 801d016:	454c      	cmp	r4, r9
 801d018:	d206      	bcs.n	801d028 <__hexnan+0x64>
 801d01a:	2d07      	cmp	r5, #7
 801d01c:	dc04      	bgt.n	801d028 <__hexnan+0x64>
 801d01e:	462a      	mov	r2, r5
 801d020:	4649      	mov	r1, r9
 801d022:	4620      	mov	r0, r4
 801d024:	f7ff ffa8 	bl	801cf78 <L_shift>
 801d028:	4544      	cmp	r4, r8
 801d02a:	d950      	bls.n	801d0ce <__hexnan+0x10a>
 801d02c:	2300      	movs	r3, #0
 801d02e:	f1a4 0904 	sub.w	r9, r4, #4
 801d032:	f844 3c04 	str.w	r3, [r4, #-4]
 801d036:	f8cd b008 	str.w	fp, [sp, #8]
 801d03a:	464c      	mov	r4, r9
 801d03c:	461d      	mov	r5, r3
 801d03e:	9903      	ldr	r1, [sp, #12]
 801d040:	e7d7      	b.n	801cff2 <__hexnan+0x2e>
 801d042:	2a29      	cmp	r2, #41	; 0x29
 801d044:	d155      	bne.n	801d0f2 <__hexnan+0x12e>
 801d046:	3102      	adds	r1, #2
 801d048:	f8ca 1000 	str.w	r1, [sl]
 801d04c:	f1bb 0f00 	cmp.w	fp, #0
 801d050:	d04f      	beq.n	801d0f2 <__hexnan+0x12e>
 801d052:	454c      	cmp	r4, r9
 801d054:	d206      	bcs.n	801d064 <__hexnan+0xa0>
 801d056:	2d07      	cmp	r5, #7
 801d058:	dc04      	bgt.n	801d064 <__hexnan+0xa0>
 801d05a:	462a      	mov	r2, r5
 801d05c:	4649      	mov	r1, r9
 801d05e:	4620      	mov	r0, r4
 801d060:	f7ff ff8a 	bl	801cf78 <L_shift>
 801d064:	4544      	cmp	r4, r8
 801d066:	d934      	bls.n	801d0d2 <__hexnan+0x10e>
 801d068:	f1a8 0204 	sub.w	r2, r8, #4
 801d06c:	4623      	mov	r3, r4
 801d06e:	f853 1b04 	ldr.w	r1, [r3], #4
 801d072:	f842 1f04 	str.w	r1, [r2, #4]!
 801d076:	429f      	cmp	r7, r3
 801d078:	d2f9      	bcs.n	801d06e <__hexnan+0xaa>
 801d07a:	1b3b      	subs	r3, r7, r4
 801d07c:	f023 0303 	bic.w	r3, r3, #3
 801d080:	3304      	adds	r3, #4
 801d082:	3e03      	subs	r6, #3
 801d084:	3401      	adds	r4, #1
 801d086:	42a6      	cmp	r6, r4
 801d088:	bf38      	it	cc
 801d08a:	2304      	movcc	r3, #4
 801d08c:	4443      	add	r3, r8
 801d08e:	2200      	movs	r2, #0
 801d090:	f843 2b04 	str.w	r2, [r3], #4
 801d094:	429f      	cmp	r7, r3
 801d096:	d2fb      	bcs.n	801d090 <__hexnan+0xcc>
 801d098:	683b      	ldr	r3, [r7, #0]
 801d09a:	b91b      	cbnz	r3, 801d0a4 <__hexnan+0xe0>
 801d09c:	4547      	cmp	r7, r8
 801d09e:	d126      	bne.n	801d0ee <__hexnan+0x12a>
 801d0a0:	2301      	movs	r3, #1
 801d0a2:	603b      	str	r3, [r7, #0]
 801d0a4:	2005      	movs	r0, #5
 801d0a6:	e025      	b.n	801d0f4 <__hexnan+0x130>
 801d0a8:	3501      	adds	r5, #1
 801d0aa:	2d08      	cmp	r5, #8
 801d0ac:	f10b 0b01 	add.w	fp, fp, #1
 801d0b0:	dd06      	ble.n	801d0c0 <__hexnan+0xfc>
 801d0b2:	4544      	cmp	r4, r8
 801d0b4:	d9c3      	bls.n	801d03e <__hexnan+0x7a>
 801d0b6:	2300      	movs	r3, #0
 801d0b8:	f844 3c04 	str.w	r3, [r4, #-4]
 801d0bc:	2501      	movs	r5, #1
 801d0be:	3c04      	subs	r4, #4
 801d0c0:	6822      	ldr	r2, [r4, #0]
 801d0c2:	f000 000f 	and.w	r0, r0, #15
 801d0c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801d0ca:	6020      	str	r0, [r4, #0]
 801d0cc:	e7b7      	b.n	801d03e <__hexnan+0x7a>
 801d0ce:	2508      	movs	r5, #8
 801d0d0:	e7b5      	b.n	801d03e <__hexnan+0x7a>
 801d0d2:	9b01      	ldr	r3, [sp, #4]
 801d0d4:	2b00      	cmp	r3, #0
 801d0d6:	d0df      	beq.n	801d098 <__hexnan+0xd4>
 801d0d8:	f1c3 0320 	rsb	r3, r3, #32
 801d0dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d0e0:	40da      	lsrs	r2, r3
 801d0e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801d0e6:	4013      	ands	r3, r2
 801d0e8:	f846 3c04 	str.w	r3, [r6, #-4]
 801d0ec:	e7d4      	b.n	801d098 <__hexnan+0xd4>
 801d0ee:	3f04      	subs	r7, #4
 801d0f0:	e7d2      	b.n	801d098 <__hexnan+0xd4>
 801d0f2:	2004      	movs	r0, #4
 801d0f4:	b007      	add	sp, #28
 801d0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d0fa <__ascii_mbtowc>:
 801d0fa:	b082      	sub	sp, #8
 801d0fc:	b901      	cbnz	r1, 801d100 <__ascii_mbtowc+0x6>
 801d0fe:	a901      	add	r1, sp, #4
 801d100:	b142      	cbz	r2, 801d114 <__ascii_mbtowc+0x1a>
 801d102:	b14b      	cbz	r3, 801d118 <__ascii_mbtowc+0x1e>
 801d104:	7813      	ldrb	r3, [r2, #0]
 801d106:	600b      	str	r3, [r1, #0]
 801d108:	7812      	ldrb	r2, [r2, #0]
 801d10a:	1e10      	subs	r0, r2, #0
 801d10c:	bf18      	it	ne
 801d10e:	2001      	movne	r0, #1
 801d110:	b002      	add	sp, #8
 801d112:	4770      	bx	lr
 801d114:	4610      	mov	r0, r2
 801d116:	e7fb      	b.n	801d110 <__ascii_mbtowc+0x16>
 801d118:	f06f 0001 	mvn.w	r0, #1
 801d11c:	e7f8      	b.n	801d110 <__ascii_mbtowc+0x16>
	...

0801d120 <_Balloc>:
 801d120:	b570      	push	{r4, r5, r6, lr}
 801d122:	69c6      	ldr	r6, [r0, #28]
 801d124:	4604      	mov	r4, r0
 801d126:	460d      	mov	r5, r1
 801d128:	b976      	cbnz	r6, 801d148 <_Balloc+0x28>
 801d12a:	2010      	movs	r0, #16
 801d12c:	f7fc fd40 	bl	8019bb0 <malloc>
 801d130:	4602      	mov	r2, r0
 801d132:	61e0      	str	r0, [r4, #28]
 801d134:	b920      	cbnz	r0, 801d140 <_Balloc+0x20>
 801d136:	4b18      	ldr	r3, [pc, #96]	; (801d198 <_Balloc+0x78>)
 801d138:	4818      	ldr	r0, [pc, #96]	; (801d19c <_Balloc+0x7c>)
 801d13a:	216b      	movs	r1, #107	; 0x6b
 801d13c:	f001 f89a 	bl	801e274 <__assert_func>
 801d140:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d144:	6006      	str	r6, [r0, #0]
 801d146:	60c6      	str	r6, [r0, #12]
 801d148:	69e6      	ldr	r6, [r4, #28]
 801d14a:	68f3      	ldr	r3, [r6, #12]
 801d14c:	b183      	cbz	r3, 801d170 <_Balloc+0x50>
 801d14e:	69e3      	ldr	r3, [r4, #28]
 801d150:	68db      	ldr	r3, [r3, #12]
 801d152:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d156:	b9b8      	cbnz	r0, 801d188 <_Balloc+0x68>
 801d158:	2101      	movs	r1, #1
 801d15a:	fa01 f605 	lsl.w	r6, r1, r5
 801d15e:	1d72      	adds	r2, r6, #5
 801d160:	0092      	lsls	r2, r2, #2
 801d162:	4620      	mov	r0, r4
 801d164:	f001 f8a4 	bl	801e2b0 <_calloc_r>
 801d168:	b160      	cbz	r0, 801d184 <_Balloc+0x64>
 801d16a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d16e:	e00e      	b.n	801d18e <_Balloc+0x6e>
 801d170:	2221      	movs	r2, #33	; 0x21
 801d172:	2104      	movs	r1, #4
 801d174:	4620      	mov	r0, r4
 801d176:	f001 f89b 	bl	801e2b0 <_calloc_r>
 801d17a:	69e3      	ldr	r3, [r4, #28]
 801d17c:	60f0      	str	r0, [r6, #12]
 801d17e:	68db      	ldr	r3, [r3, #12]
 801d180:	2b00      	cmp	r3, #0
 801d182:	d1e4      	bne.n	801d14e <_Balloc+0x2e>
 801d184:	2000      	movs	r0, #0
 801d186:	bd70      	pop	{r4, r5, r6, pc}
 801d188:	6802      	ldr	r2, [r0, #0]
 801d18a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d18e:	2300      	movs	r3, #0
 801d190:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d194:	e7f7      	b.n	801d186 <_Balloc+0x66>
 801d196:	bf00      	nop
 801d198:	08024952 	.word	0x08024952
 801d19c:	08024a32 	.word	0x08024a32

0801d1a0 <_Bfree>:
 801d1a0:	b570      	push	{r4, r5, r6, lr}
 801d1a2:	69c6      	ldr	r6, [r0, #28]
 801d1a4:	4605      	mov	r5, r0
 801d1a6:	460c      	mov	r4, r1
 801d1a8:	b976      	cbnz	r6, 801d1c8 <_Bfree+0x28>
 801d1aa:	2010      	movs	r0, #16
 801d1ac:	f7fc fd00 	bl	8019bb0 <malloc>
 801d1b0:	4602      	mov	r2, r0
 801d1b2:	61e8      	str	r0, [r5, #28]
 801d1b4:	b920      	cbnz	r0, 801d1c0 <_Bfree+0x20>
 801d1b6:	4b09      	ldr	r3, [pc, #36]	; (801d1dc <_Bfree+0x3c>)
 801d1b8:	4809      	ldr	r0, [pc, #36]	; (801d1e0 <_Bfree+0x40>)
 801d1ba:	218f      	movs	r1, #143	; 0x8f
 801d1bc:	f001 f85a 	bl	801e274 <__assert_func>
 801d1c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d1c4:	6006      	str	r6, [r0, #0]
 801d1c6:	60c6      	str	r6, [r0, #12]
 801d1c8:	b13c      	cbz	r4, 801d1da <_Bfree+0x3a>
 801d1ca:	69eb      	ldr	r3, [r5, #28]
 801d1cc:	6862      	ldr	r2, [r4, #4]
 801d1ce:	68db      	ldr	r3, [r3, #12]
 801d1d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d1d4:	6021      	str	r1, [r4, #0]
 801d1d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d1da:	bd70      	pop	{r4, r5, r6, pc}
 801d1dc:	08024952 	.word	0x08024952
 801d1e0:	08024a32 	.word	0x08024a32

0801d1e4 <__multadd>:
 801d1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d1e8:	690d      	ldr	r5, [r1, #16]
 801d1ea:	4607      	mov	r7, r0
 801d1ec:	460c      	mov	r4, r1
 801d1ee:	461e      	mov	r6, r3
 801d1f0:	f101 0c14 	add.w	ip, r1, #20
 801d1f4:	2000      	movs	r0, #0
 801d1f6:	f8dc 3000 	ldr.w	r3, [ip]
 801d1fa:	b299      	uxth	r1, r3
 801d1fc:	fb02 6101 	mla	r1, r2, r1, r6
 801d200:	0c1e      	lsrs	r6, r3, #16
 801d202:	0c0b      	lsrs	r3, r1, #16
 801d204:	fb02 3306 	mla	r3, r2, r6, r3
 801d208:	b289      	uxth	r1, r1
 801d20a:	3001      	adds	r0, #1
 801d20c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801d210:	4285      	cmp	r5, r0
 801d212:	f84c 1b04 	str.w	r1, [ip], #4
 801d216:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801d21a:	dcec      	bgt.n	801d1f6 <__multadd+0x12>
 801d21c:	b30e      	cbz	r6, 801d262 <__multadd+0x7e>
 801d21e:	68a3      	ldr	r3, [r4, #8]
 801d220:	42ab      	cmp	r3, r5
 801d222:	dc19      	bgt.n	801d258 <__multadd+0x74>
 801d224:	6861      	ldr	r1, [r4, #4]
 801d226:	4638      	mov	r0, r7
 801d228:	3101      	adds	r1, #1
 801d22a:	f7ff ff79 	bl	801d120 <_Balloc>
 801d22e:	4680      	mov	r8, r0
 801d230:	b928      	cbnz	r0, 801d23e <__multadd+0x5a>
 801d232:	4602      	mov	r2, r0
 801d234:	4b0c      	ldr	r3, [pc, #48]	; (801d268 <__multadd+0x84>)
 801d236:	480d      	ldr	r0, [pc, #52]	; (801d26c <__multadd+0x88>)
 801d238:	21ba      	movs	r1, #186	; 0xba
 801d23a:	f001 f81b 	bl	801e274 <__assert_func>
 801d23e:	6922      	ldr	r2, [r4, #16]
 801d240:	3202      	adds	r2, #2
 801d242:	f104 010c 	add.w	r1, r4, #12
 801d246:	0092      	lsls	r2, r2, #2
 801d248:	300c      	adds	r0, #12
 801d24a:	f7fe fd20 	bl	801bc8e <memcpy>
 801d24e:	4621      	mov	r1, r4
 801d250:	4638      	mov	r0, r7
 801d252:	f7ff ffa5 	bl	801d1a0 <_Bfree>
 801d256:	4644      	mov	r4, r8
 801d258:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d25c:	3501      	adds	r5, #1
 801d25e:	615e      	str	r6, [r3, #20]
 801d260:	6125      	str	r5, [r4, #16]
 801d262:	4620      	mov	r0, r4
 801d264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d268:	080249c1 	.word	0x080249c1
 801d26c:	08024a32 	.word	0x08024a32

0801d270 <__s2b>:
 801d270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d274:	460c      	mov	r4, r1
 801d276:	4615      	mov	r5, r2
 801d278:	461f      	mov	r7, r3
 801d27a:	2209      	movs	r2, #9
 801d27c:	3308      	adds	r3, #8
 801d27e:	4606      	mov	r6, r0
 801d280:	fb93 f3f2 	sdiv	r3, r3, r2
 801d284:	2100      	movs	r1, #0
 801d286:	2201      	movs	r2, #1
 801d288:	429a      	cmp	r2, r3
 801d28a:	db09      	blt.n	801d2a0 <__s2b+0x30>
 801d28c:	4630      	mov	r0, r6
 801d28e:	f7ff ff47 	bl	801d120 <_Balloc>
 801d292:	b940      	cbnz	r0, 801d2a6 <__s2b+0x36>
 801d294:	4602      	mov	r2, r0
 801d296:	4b19      	ldr	r3, [pc, #100]	; (801d2fc <__s2b+0x8c>)
 801d298:	4819      	ldr	r0, [pc, #100]	; (801d300 <__s2b+0x90>)
 801d29a:	21d3      	movs	r1, #211	; 0xd3
 801d29c:	f000 ffea 	bl	801e274 <__assert_func>
 801d2a0:	0052      	lsls	r2, r2, #1
 801d2a2:	3101      	adds	r1, #1
 801d2a4:	e7f0      	b.n	801d288 <__s2b+0x18>
 801d2a6:	9b08      	ldr	r3, [sp, #32]
 801d2a8:	6143      	str	r3, [r0, #20]
 801d2aa:	2d09      	cmp	r5, #9
 801d2ac:	f04f 0301 	mov.w	r3, #1
 801d2b0:	6103      	str	r3, [r0, #16]
 801d2b2:	dd16      	ble.n	801d2e2 <__s2b+0x72>
 801d2b4:	f104 0909 	add.w	r9, r4, #9
 801d2b8:	46c8      	mov	r8, r9
 801d2ba:	442c      	add	r4, r5
 801d2bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 801d2c0:	4601      	mov	r1, r0
 801d2c2:	3b30      	subs	r3, #48	; 0x30
 801d2c4:	220a      	movs	r2, #10
 801d2c6:	4630      	mov	r0, r6
 801d2c8:	f7ff ff8c 	bl	801d1e4 <__multadd>
 801d2cc:	45a0      	cmp	r8, r4
 801d2ce:	d1f5      	bne.n	801d2bc <__s2b+0x4c>
 801d2d0:	f1a5 0408 	sub.w	r4, r5, #8
 801d2d4:	444c      	add	r4, r9
 801d2d6:	1b2d      	subs	r5, r5, r4
 801d2d8:	1963      	adds	r3, r4, r5
 801d2da:	42bb      	cmp	r3, r7
 801d2dc:	db04      	blt.n	801d2e8 <__s2b+0x78>
 801d2de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d2e2:	340a      	adds	r4, #10
 801d2e4:	2509      	movs	r5, #9
 801d2e6:	e7f6      	b.n	801d2d6 <__s2b+0x66>
 801d2e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d2ec:	4601      	mov	r1, r0
 801d2ee:	3b30      	subs	r3, #48	; 0x30
 801d2f0:	220a      	movs	r2, #10
 801d2f2:	4630      	mov	r0, r6
 801d2f4:	f7ff ff76 	bl	801d1e4 <__multadd>
 801d2f8:	e7ee      	b.n	801d2d8 <__s2b+0x68>
 801d2fa:	bf00      	nop
 801d2fc:	080249c1 	.word	0x080249c1
 801d300:	08024a32 	.word	0x08024a32

0801d304 <__hi0bits>:
 801d304:	0c03      	lsrs	r3, r0, #16
 801d306:	041b      	lsls	r3, r3, #16
 801d308:	b9d3      	cbnz	r3, 801d340 <__hi0bits+0x3c>
 801d30a:	0400      	lsls	r0, r0, #16
 801d30c:	2310      	movs	r3, #16
 801d30e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801d312:	bf04      	itt	eq
 801d314:	0200      	lsleq	r0, r0, #8
 801d316:	3308      	addeq	r3, #8
 801d318:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d31c:	bf04      	itt	eq
 801d31e:	0100      	lsleq	r0, r0, #4
 801d320:	3304      	addeq	r3, #4
 801d322:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d326:	bf04      	itt	eq
 801d328:	0080      	lsleq	r0, r0, #2
 801d32a:	3302      	addeq	r3, #2
 801d32c:	2800      	cmp	r0, #0
 801d32e:	db05      	blt.n	801d33c <__hi0bits+0x38>
 801d330:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801d334:	f103 0301 	add.w	r3, r3, #1
 801d338:	bf08      	it	eq
 801d33a:	2320      	moveq	r3, #32
 801d33c:	4618      	mov	r0, r3
 801d33e:	4770      	bx	lr
 801d340:	2300      	movs	r3, #0
 801d342:	e7e4      	b.n	801d30e <__hi0bits+0xa>

0801d344 <__lo0bits>:
 801d344:	6803      	ldr	r3, [r0, #0]
 801d346:	f013 0207 	ands.w	r2, r3, #7
 801d34a:	d00c      	beq.n	801d366 <__lo0bits+0x22>
 801d34c:	07d9      	lsls	r1, r3, #31
 801d34e:	d422      	bmi.n	801d396 <__lo0bits+0x52>
 801d350:	079a      	lsls	r2, r3, #30
 801d352:	bf49      	itett	mi
 801d354:	085b      	lsrmi	r3, r3, #1
 801d356:	089b      	lsrpl	r3, r3, #2
 801d358:	6003      	strmi	r3, [r0, #0]
 801d35a:	2201      	movmi	r2, #1
 801d35c:	bf5c      	itt	pl
 801d35e:	6003      	strpl	r3, [r0, #0]
 801d360:	2202      	movpl	r2, #2
 801d362:	4610      	mov	r0, r2
 801d364:	4770      	bx	lr
 801d366:	b299      	uxth	r1, r3
 801d368:	b909      	cbnz	r1, 801d36e <__lo0bits+0x2a>
 801d36a:	0c1b      	lsrs	r3, r3, #16
 801d36c:	2210      	movs	r2, #16
 801d36e:	b2d9      	uxtb	r1, r3
 801d370:	b909      	cbnz	r1, 801d376 <__lo0bits+0x32>
 801d372:	3208      	adds	r2, #8
 801d374:	0a1b      	lsrs	r3, r3, #8
 801d376:	0719      	lsls	r1, r3, #28
 801d378:	bf04      	itt	eq
 801d37a:	091b      	lsreq	r3, r3, #4
 801d37c:	3204      	addeq	r2, #4
 801d37e:	0799      	lsls	r1, r3, #30
 801d380:	bf04      	itt	eq
 801d382:	089b      	lsreq	r3, r3, #2
 801d384:	3202      	addeq	r2, #2
 801d386:	07d9      	lsls	r1, r3, #31
 801d388:	d403      	bmi.n	801d392 <__lo0bits+0x4e>
 801d38a:	085b      	lsrs	r3, r3, #1
 801d38c:	f102 0201 	add.w	r2, r2, #1
 801d390:	d003      	beq.n	801d39a <__lo0bits+0x56>
 801d392:	6003      	str	r3, [r0, #0]
 801d394:	e7e5      	b.n	801d362 <__lo0bits+0x1e>
 801d396:	2200      	movs	r2, #0
 801d398:	e7e3      	b.n	801d362 <__lo0bits+0x1e>
 801d39a:	2220      	movs	r2, #32
 801d39c:	e7e1      	b.n	801d362 <__lo0bits+0x1e>
	...

0801d3a0 <__i2b>:
 801d3a0:	b510      	push	{r4, lr}
 801d3a2:	460c      	mov	r4, r1
 801d3a4:	2101      	movs	r1, #1
 801d3a6:	f7ff febb 	bl	801d120 <_Balloc>
 801d3aa:	4602      	mov	r2, r0
 801d3ac:	b928      	cbnz	r0, 801d3ba <__i2b+0x1a>
 801d3ae:	4b05      	ldr	r3, [pc, #20]	; (801d3c4 <__i2b+0x24>)
 801d3b0:	4805      	ldr	r0, [pc, #20]	; (801d3c8 <__i2b+0x28>)
 801d3b2:	f240 1145 	movw	r1, #325	; 0x145
 801d3b6:	f000 ff5d 	bl	801e274 <__assert_func>
 801d3ba:	2301      	movs	r3, #1
 801d3bc:	6144      	str	r4, [r0, #20]
 801d3be:	6103      	str	r3, [r0, #16]
 801d3c0:	bd10      	pop	{r4, pc}
 801d3c2:	bf00      	nop
 801d3c4:	080249c1 	.word	0x080249c1
 801d3c8:	08024a32 	.word	0x08024a32

0801d3cc <__multiply>:
 801d3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3d0:	4691      	mov	r9, r2
 801d3d2:	690a      	ldr	r2, [r1, #16]
 801d3d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d3d8:	429a      	cmp	r2, r3
 801d3da:	bfb8      	it	lt
 801d3dc:	460b      	movlt	r3, r1
 801d3de:	460c      	mov	r4, r1
 801d3e0:	bfbc      	itt	lt
 801d3e2:	464c      	movlt	r4, r9
 801d3e4:	4699      	movlt	r9, r3
 801d3e6:	6927      	ldr	r7, [r4, #16]
 801d3e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801d3ec:	68a3      	ldr	r3, [r4, #8]
 801d3ee:	6861      	ldr	r1, [r4, #4]
 801d3f0:	eb07 060a 	add.w	r6, r7, sl
 801d3f4:	42b3      	cmp	r3, r6
 801d3f6:	b085      	sub	sp, #20
 801d3f8:	bfb8      	it	lt
 801d3fa:	3101      	addlt	r1, #1
 801d3fc:	f7ff fe90 	bl	801d120 <_Balloc>
 801d400:	b930      	cbnz	r0, 801d410 <__multiply+0x44>
 801d402:	4602      	mov	r2, r0
 801d404:	4b44      	ldr	r3, [pc, #272]	; (801d518 <__multiply+0x14c>)
 801d406:	4845      	ldr	r0, [pc, #276]	; (801d51c <__multiply+0x150>)
 801d408:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801d40c:	f000 ff32 	bl	801e274 <__assert_func>
 801d410:	f100 0514 	add.w	r5, r0, #20
 801d414:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801d418:	462b      	mov	r3, r5
 801d41a:	2200      	movs	r2, #0
 801d41c:	4543      	cmp	r3, r8
 801d41e:	d321      	bcc.n	801d464 <__multiply+0x98>
 801d420:	f104 0314 	add.w	r3, r4, #20
 801d424:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801d428:	f109 0314 	add.w	r3, r9, #20
 801d42c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801d430:	9202      	str	r2, [sp, #8]
 801d432:	1b3a      	subs	r2, r7, r4
 801d434:	3a15      	subs	r2, #21
 801d436:	f022 0203 	bic.w	r2, r2, #3
 801d43a:	3204      	adds	r2, #4
 801d43c:	f104 0115 	add.w	r1, r4, #21
 801d440:	428f      	cmp	r7, r1
 801d442:	bf38      	it	cc
 801d444:	2204      	movcc	r2, #4
 801d446:	9201      	str	r2, [sp, #4]
 801d448:	9a02      	ldr	r2, [sp, #8]
 801d44a:	9303      	str	r3, [sp, #12]
 801d44c:	429a      	cmp	r2, r3
 801d44e:	d80c      	bhi.n	801d46a <__multiply+0x9e>
 801d450:	2e00      	cmp	r6, #0
 801d452:	dd03      	ble.n	801d45c <__multiply+0x90>
 801d454:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d458:	2b00      	cmp	r3, #0
 801d45a:	d05b      	beq.n	801d514 <__multiply+0x148>
 801d45c:	6106      	str	r6, [r0, #16]
 801d45e:	b005      	add	sp, #20
 801d460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d464:	f843 2b04 	str.w	r2, [r3], #4
 801d468:	e7d8      	b.n	801d41c <__multiply+0x50>
 801d46a:	f8b3 a000 	ldrh.w	sl, [r3]
 801d46e:	f1ba 0f00 	cmp.w	sl, #0
 801d472:	d024      	beq.n	801d4be <__multiply+0xf2>
 801d474:	f104 0e14 	add.w	lr, r4, #20
 801d478:	46a9      	mov	r9, r5
 801d47a:	f04f 0c00 	mov.w	ip, #0
 801d47e:	f85e 2b04 	ldr.w	r2, [lr], #4
 801d482:	f8d9 1000 	ldr.w	r1, [r9]
 801d486:	fa1f fb82 	uxth.w	fp, r2
 801d48a:	b289      	uxth	r1, r1
 801d48c:	fb0a 110b 	mla	r1, sl, fp, r1
 801d490:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801d494:	f8d9 2000 	ldr.w	r2, [r9]
 801d498:	4461      	add	r1, ip
 801d49a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d49e:	fb0a c20b 	mla	r2, sl, fp, ip
 801d4a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801d4a6:	b289      	uxth	r1, r1
 801d4a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d4ac:	4577      	cmp	r7, lr
 801d4ae:	f849 1b04 	str.w	r1, [r9], #4
 801d4b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d4b6:	d8e2      	bhi.n	801d47e <__multiply+0xb2>
 801d4b8:	9a01      	ldr	r2, [sp, #4]
 801d4ba:	f845 c002 	str.w	ip, [r5, r2]
 801d4be:	9a03      	ldr	r2, [sp, #12]
 801d4c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d4c4:	3304      	adds	r3, #4
 801d4c6:	f1b9 0f00 	cmp.w	r9, #0
 801d4ca:	d021      	beq.n	801d510 <__multiply+0x144>
 801d4cc:	6829      	ldr	r1, [r5, #0]
 801d4ce:	f104 0c14 	add.w	ip, r4, #20
 801d4d2:	46ae      	mov	lr, r5
 801d4d4:	f04f 0a00 	mov.w	sl, #0
 801d4d8:	f8bc b000 	ldrh.w	fp, [ip]
 801d4dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801d4e0:	fb09 220b 	mla	r2, r9, fp, r2
 801d4e4:	4452      	add	r2, sl
 801d4e6:	b289      	uxth	r1, r1
 801d4e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d4ec:	f84e 1b04 	str.w	r1, [lr], #4
 801d4f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 801d4f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d4f8:	f8be 1000 	ldrh.w	r1, [lr]
 801d4fc:	fb09 110a 	mla	r1, r9, sl, r1
 801d500:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801d504:	4567      	cmp	r7, ip
 801d506:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d50a:	d8e5      	bhi.n	801d4d8 <__multiply+0x10c>
 801d50c:	9a01      	ldr	r2, [sp, #4]
 801d50e:	50a9      	str	r1, [r5, r2]
 801d510:	3504      	adds	r5, #4
 801d512:	e799      	b.n	801d448 <__multiply+0x7c>
 801d514:	3e01      	subs	r6, #1
 801d516:	e79b      	b.n	801d450 <__multiply+0x84>
 801d518:	080249c1 	.word	0x080249c1
 801d51c:	08024a32 	.word	0x08024a32

0801d520 <__pow5mult>:
 801d520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d524:	4615      	mov	r5, r2
 801d526:	f012 0203 	ands.w	r2, r2, #3
 801d52a:	4606      	mov	r6, r0
 801d52c:	460f      	mov	r7, r1
 801d52e:	d007      	beq.n	801d540 <__pow5mult+0x20>
 801d530:	4c25      	ldr	r4, [pc, #148]	; (801d5c8 <__pow5mult+0xa8>)
 801d532:	3a01      	subs	r2, #1
 801d534:	2300      	movs	r3, #0
 801d536:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d53a:	f7ff fe53 	bl	801d1e4 <__multadd>
 801d53e:	4607      	mov	r7, r0
 801d540:	10ad      	asrs	r5, r5, #2
 801d542:	d03d      	beq.n	801d5c0 <__pow5mult+0xa0>
 801d544:	69f4      	ldr	r4, [r6, #28]
 801d546:	b97c      	cbnz	r4, 801d568 <__pow5mult+0x48>
 801d548:	2010      	movs	r0, #16
 801d54a:	f7fc fb31 	bl	8019bb0 <malloc>
 801d54e:	4602      	mov	r2, r0
 801d550:	61f0      	str	r0, [r6, #28]
 801d552:	b928      	cbnz	r0, 801d560 <__pow5mult+0x40>
 801d554:	4b1d      	ldr	r3, [pc, #116]	; (801d5cc <__pow5mult+0xac>)
 801d556:	481e      	ldr	r0, [pc, #120]	; (801d5d0 <__pow5mult+0xb0>)
 801d558:	f240 11b3 	movw	r1, #435	; 0x1b3
 801d55c:	f000 fe8a 	bl	801e274 <__assert_func>
 801d560:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d564:	6004      	str	r4, [r0, #0]
 801d566:	60c4      	str	r4, [r0, #12]
 801d568:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801d56c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d570:	b94c      	cbnz	r4, 801d586 <__pow5mult+0x66>
 801d572:	f240 2171 	movw	r1, #625	; 0x271
 801d576:	4630      	mov	r0, r6
 801d578:	f7ff ff12 	bl	801d3a0 <__i2b>
 801d57c:	2300      	movs	r3, #0
 801d57e:	f8c8 0008 	str.w	r0, [r8, #8]
 801d582:	4604      	mov	r4, r0
 801d584:	6003      	str	r3, [r0, #0]
 801d586:	f04f 0900 	mov.w	r9, #0
 801d58a:	07eb      	lsls	r3, r5, #31
 801d58c:	d50a      	bpl.n	801d5a4 <__pow5mult+0x84>
 801d58e:	4639      	mov	r1, r7
 801d590:	4622      	mov	r2, r4
 801d592:	4630      	mov	r0, r6
 801d594:	f7ff ff1a 	bl	801d3cc <__multiply>
 801d598:	4639      	mov	r1, r7
 801d59a:	4680      	mov	r8, r0
 801d59c:	4630      	mov	r0, r6
 801d59e:	f7ff fdff 	bl	801d1a0 <_Bfree>
 801d5a2:	4647      	mov	r7, r8
 801d5a4:	106d      	asrs	r5, r5, #1
 801d5a6:	d00b      	beq.n	801d5c0 <__pow5mult+0xa0>
 801d5a8:	6820      	ldr	r0, [r4, #0]
 801d5aa:	b938      	cbnz	r0, 801d5bc <__pow5mult+0x9c>
 801d5ac:	4622      	mov	r2, r4
 801d5ae:	4621      	mov	r1, r4
 801d5b0:	4630      	mov	r0, r6
 801d5b2:	f7ff ff0b 	bl	801d3cc <__multiply>
 801d5b6:	6020      	str	r0, [r4, #0]
 801d5b8:	f8c0 9000 	str.w	r9, [r0]
 801d5bc:	4604      	mov	r4, r0
 801d5be:	e7e4      	b.n	801d58a <__pow5mult+0x6a>
 801d5c0:	4638      	mov	r0, r7
 801d5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d5c6:	bf00      	nop
 801d5c8:	08024b80 	.word	0x08024b80
 801d5cc:	08024952 	.word	0x08024952
 801d5d0:	08024a32 	.word	0x08024a32

0801d5d4 <__lshift>:
 801d5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d5d8:	460c      	mov	r4, r1
 801d5da:	6849      	ldr	r1, [r1, #4]
 801d5dc:	6923      	ldr	r3, [r4, #16]
 801d5de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d5e2:	68a3      	ldr	r3, [r4, #8]
 801d5e4:	4607      	mov	r7, r0
 801d5e6:	4691      	mov	r9, r2
 801d5e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d5ec:	f108 0601 	add.w	r6, r8, #1
 801d5f0:	42b3      	cmp	r3, r6
 801d5f2:	db0b      	blt.n	801d60c <__lshift+0x38>
 801d5f4:	4638      	mov	r0, r7
 801d5f6:	f7ff fd93 	bl	801d120 <_Balloc>
 801d5fa:	4605      	mov	r5, r0
 801d5fc:	b948      	cbnz	r0, 801d612 <__lshift+0x3e>
 801d5fe:	4602      	mov	r2, r0
 801d600:	4b28      	ldr	r3, [pc, #160]	; (801d6a4 <__lshift+0xd0>)
 801d602:	4829      	ldr	r0, [pc, #164]	; (801d6a8 <__lshift+0xd4>)
 801d604:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801d608:	f000 fe34 	bl	801e274 <__assert_func>
 801d60c:	3101      	adds	r1, #1
 801d60e:	005b      	lsls	r3, r3, #1
 801d610:	e7ee      	b.n	801d5f0 <__lshift+0x1c>
 801d612:	2300      	movs	r3, #0
 801d614:	f100 0114 	add.w	r1, r0, #20
 801d618:	f100 0210 	add.w	r2, r0, #16
 801d61c:	4618      	mov	r0, r3
 801d61e:	4553      	cmp	r3, sl
 801d620:	db33      	blt.n	801d68a <__lshift+0xb6>
 801d622:	6920      	ldr	r0, [r4, #16]
 801d624:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d628:	f104 0314 	add.w	r3, r4, #20
 801d62c:	f019 091f 	ands.w	r9, r9, #31
 801d630:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d634:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d638:	d02b      	beq.n	801d692 <__lshift+0xbe>
 801d63a:	f1c9 0e20 	rsb	lr, r9, #32
 801d63e:	468a      	mov	sl, r1
 801d640:	2200      	movs	r2, #0
 801d642:	6818      	ldr	r0, [r3, #0]
 801d644:	fa00 f009 	lsl.w	r0, r0, r9
 801d648:	4310      	orrs	r0, r2
 801d64a:	f84a 0b04 	str.w	r0, [sl], #4
 801d64e:	f853 2b04 	ldr.w	r2, [r3], #4
 801d652:	459c      	cmp	ip, r3
 801d654:	fa22 f20e 	lsr.w	r2, r2, lr
 801d658:	d8f3      	bhi.n	801d642 <__lshift+0x6e>
 801d65a:	ebac 0304 	sub.w	r3, ip, r4
 801d65e:	3b15      	subs	r3, #21
 801d660:	f023 0303 	bic.w	r3, r3, #3
 801d664:	3304      	adds	r3, #4
 801d666:	f104 0015 	add.w	r0, r4, #21
 801d66a:	4584      	cmp	ip, r0
 801d66c:	bf38      	it	cc
 801d66e:	2304      	movcc	r3, #4
 801d670:	50ca      	str	r2, [r1, r3]
 801d672:	b10a      	cbz	r2, 801d678 <__lshift+0xa4>
 801d674:	f108 0602 	add.w	r6, r8, #2
 801d678:	3e01      	subs	r6, #1
 801d67a:	4638      	mov	r0, r7
 801d67c:	612e      	str	r6, [r5, #16]
 801d67e:	4621      	mov	r1, r4
 801d680:	f7ff fd8e 	bl	801d1a0 <_Bfree>
 801d684:	4628      	mov	r0, r5
 801d686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d68a:	f842 0f04 	str.w	r0, [r2, #4]!
 801d68e:	3301      	adds	r3, #1
 801d690:	e7c5      	b.n	801d61e <__lshift+0x4a>
 801d692:	3904      	subs	r1, #4
 801d694:	f853 2b04 	ldr.w	r2, [r3], #4
 801d698:	f841 2f04 	str.w	r2, [r1, #4]!
 801d69c:	459c      	cmp	ip, r3
 801d69e:	d8f9      	bhi.n	801d694 <__lshift+0xc0>
 801d6a0:	e7ea      	b.n	801d678 <__lshift+0xa4>
 801d6a2:	bf00      	nop
 801d6a4:	080249c1 	.word	0x080249c1
 801d6a8:	08024a32 	.word	0x08024a32

0801d6ac <__mcmp>:
 801d6ac:	b530      	push	{r4, r5, lr}
 801d6ae:	6902      	ldr	r2, [r0, #16]
 801d6b0:	690c      	ldr	r4, [r1, #16]
 801d6b2:	1b12      	subs	r2, r2, r4
 801d6b4:	d10e      	bne.n	801d6d4 <__mcmp+0x28>
 801d6b6:	f100 0314 	add.w	r3, r0, #20
 801d6ba:	3114      	adds	r1, #20
 801d6bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d6c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d6c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d6c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d6cc:	42a5      	cmp	r5, r4
 801d6ce:	d003      	beq.n	801d6d8 <__mcmp+0x2c>
 801d6d0:	d305      	bcc.n	801d6de <__mcmp+0x32>
 801d6d2:	2201      	movs	r2, #1
 801d6d4:	4610      	mov	r0, r2
 801d6d6:	bd30      	pop	{r4, r5, pc}
 801d6d8:	4283      	cmp	r3, r0
 801d6da:	d3f3      	bcc.n	801d6c4 <__mcmp+0x18>
 801d6dc:	e7fa      	b.n	801d6d4 <__mcmp+0x28>
 801d6de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d6e2:	e7f7      	b.n	801d6d4 <__mcmp+0x28>

0801d6e4 <__mdiff>:
 801d6e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6e8:	460c      	mov	r4, r1
 801d6ea:	4606      	mov	r6, r0
 801d6ec:	4611      	mov	r1, r2
 801d6ee:	4620      	mov	r0, r4
 801d6f0:	4690      	mov	r8, r2
 801d6f2:	f7ff ffdb 	bl	801d6ac <__mcmp>
 801d6f6:	1e05      	subs	r5, r0, #0
 801d6f8:	d110      	bne.n	801d71c <__mdiff+0x38>
 801d6fa:	4629      	mov	r1, r5
 801d6fc:	4630      	mov	r0, r6
 801d6fe:	f7ff fd0f 	bl	801d120 <_Balloc>
 801d702:	b930      	cbnz	r0, 801d712 <__mdiff+0x2e>
 801d704:	4b3a      	ldr	r3, [pc, #232]	; (801d7f0 <__mdiff+0x10c>)
 801d706:	4602      	mov	r2, r0
 801d708:	f240 2137 	movw	r1, #567	; 0x237
 801d70c:	4839      	ldr	r0, [pc, #228]	; (801d7f4 <__mdiff+0x110>)
 801d70e:	f000 fdb1 	bl	801e274 <__assert_func>
 801d712:	2301      	movs	r3, #1
 801d714:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d718:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d71c:	bfa4      	itt	ge
 801d71e:	4643      	movge	r3, r8
 801d720:	46a0      	movge	r8, r4
 801d722:	4630      	mov	r0, r6
 801d724:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d728:	bfa6      	itte	ge
 801d72a:	461c      	movge	r4, r3
 801d72c:	2500      	movge	r5, #0
 801d72e:	2501      	movlt	r5, #1
 801d730:	f7ff fcf6 	bl	801d120 <_Balloc>
 801d734:	b920      	cbnz	r0, 801d740 <__mdiff+0x5c>
 801d736:	4b2e      	ldr	r3, [pc, #184]	; (801d7f0 <__mdiff+0x10c>)
 801d738:	4602      	mov	r2, r0
 801d73a:	f240 2145 	movw	r1, #581	; 0x245
 801d73e:	e7e5      	b.n	801d70c <__mdiff+0x28>
 801d740:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801d744:	6926      	ldr	r6, [r4, #16]
 801d746:	60c5      	str	r5, [r0, #12]
 801d748:	f104 0914 	add.w	r9, r4, #20
 801d74c:	f108 0514 	add.w	r5, r8, #20
 801d750:	f100 0e14 	add.w	lr, r0, #20
 801d754:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801d758:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801d75c:	f108 0210 	add.w	r2, r8, #16
 801d760:	46f2      	mov	sl, lr
 801d762:	2100      	movs	r1, #0
 801d764:	f859 3b04 	ldr.w	r3, [r9], #4
 801d768:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d76c:	fa11 f88b 	uxtah	r8, r1, fp
 801d770:	b299      	uxth	r1, r3
 801d772:	0c1b      	lsrs	r3, r3, #16
 801d774:	eba8 0801 	sub.w	r8, r8, r1
 801d778:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d77c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d780:	fa1f f888 	uxth.w	r8, r8
 801d784:	1419      	asrs	r1, r3, #16
 801d786:	454e      	cmp	r6, r9
 801d788:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d78c:	f84a 3b04 	str.w	r3, [sl], #4
 801d790:	d8e8      	bhi.n	801d764 <__mdiff+0x80>
 801d792:	1b33      	subs	r3, r6, r4
 801d794:	3b15      	subs	r3, #21
 801d796:	f023 0303 	bic.w	r3, r3, #3
 801d79a:	3304      	adds	r3, #4
 801d79c:	3415      	adds	r4, #21
 801d79e:	42a6      	cmp	r6, r4
 801d7a0:	bf38      	it	cc
 801d7a2:	2304      	movcc	r3, #4
 801d7a4:	441d      	add	r5, r3
 801d7a6:	4473      	add	r3, lr
 801d7a8:	469e      	mov	lr, r3
 801d7aa:	462e      	mov	r6, r5
 801d7ac:	4566      	cmp	r6, ip
 801d7ae:	d30e      	bcc.n	801d7ce <__mdiff+0xea>
 801d7b0:	f10c 0203 	add.w	r2, ip, #3
 801d7b4:	1b52      	subs	r2, r2, r5
 801d7b6:	f022 0203 	bic.w	r2, r2, #3
 801d7ba:	3d03      	subs	r5, #3
 801d7bc:	45ac      	cmp	ip, r5
 801d7be:	bf38      	it	cc
 801d7c0:	2200      	movcc	r2, #0
 801d7c2:	4413      	add	r3, r2
 801d7c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801d7c8:	b17a      	cbz	r2, 801d7ea <__mdiff+0x106>
 801d7ca:	6107      	str	r7, [r0, #16]
 801d7cc:	e7a4      	b.n	801d718 <__mdiff+0x34>
 801d7ce:	f856 8b04 	ldr.w	r8, [r6], #4
 801d7d2:	fa11 f288 	uxtah	r2, r1, r8
 801d7d6:	1414      	asrs	r4, r2, #16
 801d7d8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801d7dc:	b292      	uxth	r2, r2
 801d7de:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801d7e2:	f84e 2b04 	str.w	r2, [lr], #4
 801d7e6:	1421      	asrs	r1, r4, #16
 801d7e8:	e7e0      	b.n	801d7ac <__mdiff+0xc8>
 801d7ea:	3f01      	subs	r7, #1
 801d7ec:	e7ea      	b.n	801d7c4 <__mdiff+0xe0>
 801d7ee:	bf00      	nop
 801d7f0:	080249c1 	.word	0x080249c1
 801d7f4:	08024a32 	.word	0x08024a32

0801d7f8 <__ulp>:
 801d7f8:	b082      	sub	sp, #8
 801d7fa:	ed8d 0b00 	vstr	d0, [sp]
 801d7fe:	9a01      	ldr	r2, [sp, #4]
 801d800:	4b0f      	ldr	r3, [pc, #60]	; (801d840 <__ulp+0x48>)
 801d802:	4013      	ands	r3, r2
 801d804:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801d808:	2b00      	cmp	r3, #0
 801d80a:	dc08      	bgt.n	801d81e <__ulp+0x26>
 801d80c:	425b      	negs	r3, r3
 801d80e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801d812:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d816:	da04      	bge.n	801d822 <__ulp+0x2a>
 801d818:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801d81c:	4113      	asrs	r3, r2
 801d81e:	2200      	movs	r2, #0
 801d820:	e008      	b.n	801d834 <__ulp+0x3c>
 801d822:	f1a2 0314 	sub.w	r3, r2, #20
 801d826:	2b1e      	cmp	r3, #30
 801d828:	bfda      	itte	le
 801d82a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801d82e:	40da      	lsrle	r2, r3
 801d830:	2201      	movgt	r2, #1
 801d832:	2300      	movs	r3, #0
 801d834:	4619      	mov	r1, r3
 801d836:	4610      	mov	r0, r2
 801d838:	ec41 0b10 	vmov	d0, r0, r1
 801d83c:	b002      	add	sp, #8
 801d83e:	4770      	bx	lr
 801d840:	7ff00000 	.word	0x7ff00000

0801d844 <__b2d>:
 801d844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d848:	6906      	ldr	r6, [r0, #16]
 801d84a:	f100 0814 	add.w	r8, r0, #20
 801d84e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801d852:	1f37      	subs	r7, r6, #4
 801d854:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d858:	4610      	mov	r0, r2
 801d85a:	f7ff fd53 	bl	801d304 <__hi0bits>
 801d85e:	f1c0 0320 	rsb	r3, r0, #32
 801d862:	280a      	cmp	r0, #10
 801d864:	600b      	str	r3, [r1, #0]
 801d866:	491b      	ldr	r1, [pc, #108]	; (801d8d4 <__b2d+0x90>)
 801d868:	dc15      	bgt.n	801d896 <__b2d+0x52>
 801d86a:	f1c0 0c0b 	rsb	ip, r0, #11
 801d86e:	fa22 f30c 	lsr.w	r3, r2, ip
 801d872:	45b8      	cmp	r8, r7
 801d874:	ea43 0501 	orr.w	r5, r3, r1
 801d878:	bf34      	ite	cc
 801d87a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d87e:	2300      	movcs	r3, #0
 801d880:	3015      	adds	r0, #21
 801d882:	fa02 f000 	lsl.w	r0, r2, r0
 801d886:	fa23 f30c 	lsr.w	r3, r3, ip
 801d88a:	4303      	orrs	r3, r0
 801d88c:	461c      	mov	r4, r3
 801d88e:	ec45 4b10 	vmov	d0, r4, r5
 801d892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d896:	45b8      	cmp	r8, r7
 801d898:	bf3a      	itte	cc
 801d89a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d89e:	f1a6 0708 	subcc.w	r7, r6, #8
 801d8a2:	2300      	movcs	r3, #0
 801d8a4:	380b      	subs	r0, #11
 801d8a6:	d012      	beq.n	801d8ce <__b2d+0x8a>
 801d8a8:	f1c0 0120 	rsb	r1, r0, #32
 801d8ac:	fa23 f401 	lsr.w	r4, r3, r1
 801d8b0:	4082      	lsls	r2, r0
 801d8b2:	4322      	orrs	r2, r4
 801d8b4:	4547      	cmp	r7, r8
 801d8b6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801d8ba:	bf8c      	ite	hi
 801d8bc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801d8c0:	2200      	movls	r2, #0
 801d8c2:	4083      	lsls	r3, r0
 801d8c4:	40ca      	lsrs	r2, r1
 801d8c6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801d8ca:	4313      	orrs	r3, r2
 801d8cc:	e7de      	b.n	801d88c <__b2d+0x48>
 801d8ce:	ea42 0501 	orr.w	r5, r2, r1
 801d8d2:	e7db      	b.n	801d88c <__b2d+0x48>
 801d8d4:	3ff00000 	.word	0x3ff00000

0801d8d8 <__d2b>:
 801d8d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d8dc:	460f      	mov	r7, r1
 801d8de:	2101      	movs	r1, #1
 801d8e0:	ec59 8b10 	vmov	r8, r9, d0
 801d8e4:	4616      	mov	r6, r2
 801d8e6:	f7ff fc1b 	bl	801d120 <_Balloc>
 801d8ea:	4604      	mov	r4, r0
 801d8ec:	b930      	cbnz	r0, 801d8fc <__d2b+0x24>
 801d8ee:	4602      	mov	r2, r0
 801d8f0:	4b24      	ldr	r3, [pc, #144]	; (801d984 <__d2b+0xac>)
 801d8f2:	4825      	ldr	r0, [pc, #148]	; (801d988 <__d2b+0xb0>)
 801d8f4:	f240 310f 	movw	r1, #783	; 0x30f
 801d8f8:	f000 fcbc 	bl	801e274 <__assert_func>
 801d8fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d900:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d904:	bb2d      	cbnz	r5, 801d952 <__d2b+0x7a>
 801d906:	9301      	str	r3, [sp, #4]
 801d908:	f1b8 0300 	subs.w	r3, r8, #0
 801d90c:	d026      	beq.n	801d95c <__d2b+0x84>
 801d90e:	4668      	mov	r0, sp
 801d910:	9300      	str	r3, [sp, #0]
 801d912:	f7ff fd17 	bl	801d344 <__lo0bits>
 801d916:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d91a:	b1e8      	cbz	r0, 801d958 <__d2b+0x80>
 801d91c:	f1c0 0320 	rsb	r3, r0, #32
 801d920:	fa02 f303 	lsl.w	r3, r2, r3
 801d924:	430b      	orrs	r3, r1
 801d926:	40c2      	lsrs	r2, r0
 801d928:	6163      	str	r3, [r4, #20]
 801d92a:	9201      	str	r2, [sp, #4]
 801d92c:	9b01      	ldr	r3, [sp, #4]
 801d92e:	61a3      	str	r3, [r4, #24]
 801d930:	2b00      	cmp	r3, #0
 801d932:	bf14      	ite	ne
 801d934:	2202      	movne	r2, #2
 801d936:	2201      	moveq	r2, #1
 801d938:	6122      	str	r2, [r4, #16]
 801d93a:	b1bd      	cbz	r5, 801d96c <__d2b+0x94>
 801d93c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d940:	4405      	add	r5, r0
 801d942:	603d      	str	r5, [r7, #0]
 801d944:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d948:	6030      	str	r0, [r6, #0]
 801d94a:	4620      	mov	r0, r4
 801d94c:	b003      	add	sp, #12
 801d94e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d952:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d956:	e7d6      	b.n	801d906 <__d2b+0x2e>
 801d958:	6161      	str	r1, [r4, #20]
 801d95a:	e7e7      	b.n	801d92c <__d2b+0x54>
 801d95c:	a801      	add	r0, sp, #4
 801d95e:	f7ff fcf1 	bl	801d344 <__lo0bits>
 801d962:	9b01      	ldr	r3, [sp, #4]
 801d964:	6163      	str	r3, [r4, #20]
 801d966:	3020      	adds	r0, #32
 801d968:	2201      	movs	r2, #1
 801d96a:	e7e5      	b.n	801d938 <__d2b+0x60>
 801d96c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d970:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d974:	6038      	str	r0, [r7, #0]
 801d976:	6918      	ldr	r0, [r3, #16]
 801d978:	f7ff fcc4 	bl	801d304 <__hi0bits>
 801d97c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d980:	e7e2      	b.n	801d948 <__d2b+0x70>
 801d982:	bf00      	nop
 801d984:	080249c1 	.word	0x080249c1
 801d988:	08024a32 	.word	0x08024a32

0801d98c <__ratio>:
 801d98c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d990:	4688      	mov	r8, r1
 801d992:	4669      	mov	r1, sp
 801d994:	4681      	mov	r9, r0
 801d996:	f7ff ff55 	bl	801d844 <__b2d>
 801d99a:	a901      	add	r1, sp, #4
 801d99c:	4640      	mov	r0, r8
 801d99e:	ec55 4b10 	vmov	r4, r5, d0
 801d9a2:	f7ff ff4f 	bl	801d844 <__b2d>
 801d9a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d9aa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801d9ae:	eba3 0c02 	sub.w	ip, r3, r2
 801d9b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d9b6:	1a9b      	subs	r3, r3, r2
 801d9b8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801d9bc:	ec51 0b10 	vmov	r0, r1, d0
 801d9c0:	2b00      	cmp	r3, #0
 801d9c2:	bfd6      	itet	le
 801d9c4:	460a      	movle	r2, r1
 801d9c6:	462a      	movgt	r2, r5
 801d9c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d9cc:	468b      	mov	fp, r1
 801d9ce:	462f      	mov	r7, r5
 801d9d0:	bfd4      	ite	le
 801d9d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801d9d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d9da:	4620      	mov	r0, r4
 801d9dc:	ee10 2a10 	vmov	r2, s0
 801d9e0:	465b      	mov	r3, fp
 801d9e2:	4639      	mov	r1, r7
 801d9e4:	f7e8 ff1a 	bl	800681c <__aeabi_ddiv>
 801d9e8:	ec41 0b10 	vmov	d0, r0, r1
 801d9ec:	b003      	add	sp, #12
 801d9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d9f2 <__copybits>:
 801d9f2:	3901      	subs	r1, #1
 801d9f4:	b570      	push	{r4, r5, r6, lr}
 801d9f6:	1149      	asrs	r1, r1, #5
 801d9f8:	6914      	ldr	r4, [r2, #16]
 801d9fa:	3101      	adds	r1, #1
 801d9fc:	f102 0314 	add.w	r3, r2, #20
 801da00:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801da04:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801da08:	1f05      	subs	r5, r0, #4
 801da0a:	42a3      	cmp	r3, r4
 801da0c:	d30c      	bcc.n	801da28 <__copybits+0x36>
 801da0e:	1aa3      	subs	r3, r4, r2
 801da10:	3b11      	subs	r3, #17
 801da12:	f023 0303 	bic.w	r3, r3, #3
 801da16:	3211      	adds	r2, #17
 801da18:	42a2      	cmp	r2, r4
 801da1a:	bf88      	it	hi
 801da1c:	2300      	movhi	r3, #0
 801da1e:	4418      	add	r0, r3
 801da20:	2300      	movs	r3, #0
 801da22:	4288      	cmp	r0, r1
 801da24:	d305      	bcc.n	801da32 <__copybits+0x40>
 801da26:	bd70      	pop	{r4, r5, r6, pc}
 801da28:	f853 6b04 	ldr.w	r6, [r3], #4
 801da2c:	f845 6f04 	str.w	r6, [r5, #4]!
 801da30:	e7eb      	b.n	801da0a <__copybits+0x18>
 801da32:	f840 3b04 	str.w	r3, [r0], #4
 801da36:	e7f4      	b.n	801da22 <__copybits+0x30>

0801da38 <__any_on>:
 801da38:	f100 0214 	add.w	r2, r0, #20
 801da3c:	6900      	ldr	r0, [r0, #16]
 801da3e:	114b      	asrs	r3, r1, #5
 801da40:	4298      	cmp	r0, r3
 801da42:	b510      	push	{r4, lr}
 801da44:	db11      	blt.n	801da6a <__any_on+0x32>
 801da46:	dd0a      	ble.n	801da5e <__any_on+0x26>
 801da48:	f011 011f 	ands.w	r1, r1, #31
 801da4c:	d007      	beq.n	801da5e <__any_on+0x26>
 801da4e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801da52:	fa24 f001 	lsr.w	r0, r4, r1
 801da56:	fa00 f101 	lsl.w	r1, r0, r1
 801da5a:	428c      	cmp	r4, r1
 801da5c:	d10b      	bne.n	801da76 <__any_on+0x3e>
 801da5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801da62:	4293      	cmp	r3, r2
 801da64:	d803      	bhi.n	801da6e <__any_on+0x36>
 801da66:	2000      	movs	r0, #0
 801da68:	bd10      	pop	{r4, pc}
 801da6a:	4603      	mov	r3, r0
 801da6c:	e7f7      	b.n	801da5e <__any_on+0x26>
 801da6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801da72:	2900      	cmp	r1, #0
 801da74:	d0f5      	beq.n	801da62 <__any_on+0x2a>
 801da76:	2001      	movs	r0, #1
 801da78:	e7f6      	b.n	801da68 <__any_on+0x30>

0801da7a <_malloc_usable_size_r>:
 801da7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801da7e:	1f18      	subs	r0, r3, #4
 801da80:	2b00      	cmp	r3, #0
 801da82:	bfbc      	itt	lt
 801da84:	580b      	ldrlt	r3, [r1, r0]
 801da86:	18c0      	addlt	r0, r0, r3
 801da88:	4770      	bx	lr

0801da8a <__ascii_wctomb>:
 801da8a:	b149      	cbz	r1, 801daa0 <__ascii_wctomb+0x16>
 801da8c:	2aff      	cmp	r2, #255	; 0xff
 801da8e:	bf85      	ittet	hi
 801da90:	238a      	movhi	r3, #138	; 0x8a
 801da92:	6003      	strhi	r3, [r0, #0]
 801da94:	700a      	strbls	r2, [r1, #0]
 801da96:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801da9a:	bf98      	it	ls
 801da9c:	2001      	movls	r0, #1
 801da9e:	4770      	bx	lr
 801daa0:	4608      	mov	r0, r1
 801daa2:	4770      	bx	lr

0801daa4 <__ssputs_r>:
 801daa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801daa8:	688e      	ldr	r6, [r1, #8]
 801daaa:	461f      	mov	r7, r3
 801daac:	42be      	cmp	r6, r7
 801daae:	680b      	ldr	r3, [r1, #0]
 801dab0:	4682      	mov	sl, r0
 801dab2:	460c      	mov	r4, r1
 801dab4:	4690      	mov	r8, r2
 801dab6:	d82c      	bhi.n	801db12 <__ssputs_r+0x6e>
 801dab8:	898a      	ldrh	r2, [r1, #12]
 801daba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801dabe:	d026      	beq.n	801db0e <__ssputs_r+0x6a>
 801dac0:	6965      	ldr	r5, [r4, #20]
 801dac2:	6909      	ldr	r1, [r1, #16]
 801dac4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dac8:	eba3 0901 	sub.w	r9, r3, r1
 801dacc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801dad0:	1c7b      	adds	r3, r7, #1
 801dad2:	444b      	add	r3, r9
 801dad4:	106d      	asrs	r5, r5, #1
 801dad6:	429d      	cmp	r5, r3
 801dad8:	bf38      	it	cc
 801dada:	461d      	movcc	r5, r3
 801dadc:	0553      	lsls	r3, r2, #21
 801dade:	d527      	bpl.n	801db30 <__ssputs_r+0x8c>
 801dae0:	4629      	mov	r1, r5
 801dae2:	f7fc f895 	bl	8019c10 <_malloc_r>
 801dae6:	4606      	mov	r6, r0
 801dae8:	b360      	cbz	r0, 801db44 <__ssputs_r+0xa0>
 801daea:	6921      	ldr	r1, [r4, #16]
 801daec:	464a      	mov	r2, r9
 801daee:	f7fe f8ce 	bl	801bc8e <memcpy>
 801daf2:	89a3      	ldrh	r3, [r4, #12]
 801daf4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801daf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dafc:	81a3      	strh	r3, [r4, #12]
 801dafe:	6126      	str	r6, [r4, #16]
 801db00:	6165      	str	r5, [r4, #20]
 801db02:	444e      	add	r6, r9
 801db04:	eba5 0509 	sub.w	r5, r5, r9
 801db08:	6026      	str	r6, [r4, #0]
 801db0a:	60a5      	str	r5, [r4, #8]
 801db0c:	463e      	mov	r6, r7
 801db0e:	42be      	cmp	r6, r7
 801db10:	d900      	bls.n	801db14 <__ssputs_r+0x70>
 801db12:	463e      	mov	r6, r7
 801db14:	6820      	ldr	r0, [r4, #0]
 801db16:	4632      	mov	r2, r6
 801db18:	4641      	mov	r1, r8
 801db1a:	f000 fb6f 	bl	801e1fc <memmove>
 801db1e:	68a3      	ldr	r3, [r4, #8]
 801db20:	1b9b      	subs	r3, r3, r6
 801db22:	60a3      	str	r3, [r4, #8]
 801db24:	6823      	ldr	r3, [r4, #0]
 801db26:	4433      	add	r3, r6
 801db28:	6023      	str	r3, [r4, #0]
 801db2a:	2000      	movs	r0, #0
 801db2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801db30:	462a      	mov	r2, r5
 801db32:	f7fc f901 	bl	8019d38 <_realloc_r>
 801db36:	4606      	mov	r6, r0
 801db38:	2800      	cmp	r0, #0
 801db3a:	d1e0      	bne.n	801dafe <__ssputs_r+0x5a>
 801db3c:	6921      	ldr	r1, [r4, #16]
 801db3e:	4650      	mov	r0, sl
 801db40:	f7fe ff38 	bl	801c9b4 <_free_r>
 801db44:	230c      	movs	r3, #12
 801db46:	f8ca 3000 	str.w	r3, [sl]
 801db4a:	89a3      	ldrh	r3, [r4, #12]
 801db4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801db50:	81a3      	strh	r3, [r4, #12]
 801db52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801db56:	e7e9      	b.n	801db2c <__ssputs_r+0x88>

0801db58 <_svfiprintf_r>:
 801db58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db5c:	4698      	mov	r8, r3
 801db5e:	898b      	ldrh	r3, [r1, #12]
 801db60:	061b      	lsls	r3, r3, #24
 801db62:	b09d      	sub	sp, #116	; 0x74
 801db64:	4607      	mov	r7, r0
 801db66:	460d      	mov	r5, r1
 801db68:	4614      	mov	r4, r2
 801db6a:	d50e      	bpl.n	801db8a <_svfiprintf_r+0x32>
 801db6c:	690b      	ldr	r3, [r1, #16]
 801db6e:	b963      	cbnz	r3, 801db8a <_svfiprintf_r+0x32>
 801db70:	2140      	movs	r1, #64	; 0x40
 801db72:	f7fc f84d 	bl	8019c10 <_malloc_r>
 801db76:	6028      	str	r0, [r5, #0]
 801db78:	6128      	str	r0, [r5, #16]
 801db7a:	b920      	cbnz	r0, 801db86 <_svfiprintf_r+0x2e>
 801db7c:	230c      	movs	r3, #12
 801db7e:	603b      	str	r3, [r7, #0]
 801db80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801db84:	e0d0      	b.n	801dd28 <_svfiprintf_r+0x1d0>
 801db86:	2340      	movs	r3, #64	; 0x40
 801db88:	616b      	str	r3, [r5, #20]
 801db8a:	2300      	movs	r3, #0
 801db8c:	9309      	str	r3, [sp, #36]	; 0x24
 801db8e:	2320      	movs	r3, #32
 801db90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801db94:	f8cd 800c 	str.w	r8, [sp, #12]
 801db98:	2330      	movs	r3, #48	; 0x30
 801db9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801dd40 <_svfiprintf_r+0x1e8>
 801db9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801dba2:	f04f 0901 	mov.w	r9, #1
 801dba6:	4623      	mov	r3, r4
 801dba8:	469a      	mov	sl, r3
 801dbaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dbae:	b10a      	cbz	r2, 801dbb4 <_svfiprintf_r+0x5c>
 801dbb0:	2a25      	cmp	r2, #37	; 0x25
 801dbb2:	d1f9      	bne.n	801dba8 <_svfiprintf_r+0x50>
 801dbb4:	ebba 0b04 	subs.w	fp, sl, r4
 801dbb8:	d00b      	beq.n	801dbd2 <_svfiprintf_r+0x7a>
 801dbba:	465b      	mov	r3, fp
 801dbbc:	4622      	mov	r2, r4
 801dbbe:	4629      	mov	r1, r5
 801dbc0:	4638      	mov	r0, r7
 801dbc2:	f7ff ff6f 	bl	801daa4 <__ssputs_r>
 801dbc6:	3001      	adds	r0, #1
 801dbc8:	f000 80a9 	beq.w	801dd1e <_svfiprintf_r+0x1c6>
 801dbcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dbce:	445a      	add	r2, fp
 801dbd0:	9209      	str	r2, [sp, #36]	; 0x24
 801dbd2:	f89a 3000 	ldrb.w	r3, [sl]
 801dbd6:	2b00      	cmp	r3, #0
 801dbd8:	f000 80a1 	beq.w	801dd1e <_svfiprintf_r+0x1c6>
 801dbdc:	2300      	movs	r3, #0
 801dbde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801dbe2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dbe6:	f10a 0a01 	add.w	sl, sl, #1
 801dbea:	9304      	str	r3, [sp, #16]
 801dbec:	9307      	str	r3, [sp, #28]
 801dbee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801dbf2:	931a      	str	r3, [sp, #104]	; 0x68
 801dbf4:	4654      	mov	r4, sl
 801dbf6:	2205      	movs	r2, #5
 801dbf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dbfc:	4850      	ldr	r0, [pc, #320]	; (801dd40 <_svfiprintf_r+0x1e8>)
 801dbfe:	f7e8 facf 	bl	80061a0 <memchr>
 801dc02:	9a04      	ldr	r2, [sp, #16]
 801dc04:	b9d8      	cbnz	r0, 801dc3e <_svfiprintf_r+0xe6>
 801dc06:	06d0      	lsls	r0, r2, #27
 801dc08:	bf44      	itt	mi
 801dc0a:	2320      	movmi	r3, #32
 801dc0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dc10:	0711      	lsls	r1, r2, #28
 801dc12:	bf44      	itt	mi
 801dc14:	232b      	movmi	r3, #43	; 0x2b
 801dc16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dc1a:	f89a 3000 	ldrb.w	r3, [sl]
 801dc1e:	2b2a      	cmp	r3, #42	; 0x2a
 801dc20:	d015      	beq.n	801dc4e <_svfiprintf_r+0xf6>
 801dc22:	9a07      	ldr	r2, [sp, #28]
 801dc24:	4654      	mov	r4, sl
 801dc26:	2000      	movs	r0, #0
 801dc28:	f04f 0c0a 	mov.w	ip, #10
 801dc2c:	4621      	mov	r1, r4
 801dc2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dc32:	3b30      	subs	r3, #48	; 0x30
 801dc34:	2b09      	cmp	r3, #9
 801dc36:	d94d      	bls.n	801dcd4 <_svfiprintf_r+0x17c>
 801dc38:	b1b0      	cbz	r0, 801dc68 <_svfiprintf_r+0x110>
 801dc3a:	9207      	str	r2, [sp, #28]
 801dc3c:	e014      	b.n	801dc68 <_svfiprintf_r+0x110>
 801dc3e:	eba0 0308 	sub.w	r3, r0, r8
 801dc42:	fa09 f303 	lsl.w	r3, r9, r3
 801dc46:	4313      	orrs	r3, r2
 801dc48:	9304      	str	r3, [sp, #16]
 801dc4a:	46a2      	mov	sl, r4
 801dc4c:	e7d2      	b.n	801dbf4 <_svfiprintf_r+0x9c>
 801dc4e:	9b03      	ldr	r3, [sp, #12]
 801dc50:	1d19      	adds	r1, r3, #4
 801dc52:	681b      	ldr	r3, [r3, #0]
 801dc54:	9103      	str	r1, [sp, #12]
 801dc56:	2b00      	cmp	r3, #0
 801dc58:	bfbb      	ittet	lt
 801dc5a:	425b      	neglt	r3, r3
 801dc5c:	f042 0202 	orrlt.w	r2, r2, #2
 801dc60:	9307      	strge	r3, [sp, #28]
 801dc62:	9307      	strlt	r3, [sp, #28]
 801dc64:	bfb8      	it	lt
 801dc66:	9204      	strlt	r2, [sp, #16]
 801dc68:	7823      	ldrb	r3, [r4, #0]
 801dc6a:	2b2e      	cmp	r3, #46	; 0x2e
 801dc6c:	d10c      	bne.n	801dc88 <_svfiprintf_r+0x130>
 801dc6e:	7863      	ldrb	r3, [r4, #1]
 801dc70:	2b2a      	cmp	r3, #42	; 0x2a
 801dc72:	d134      	bne.n	801dcde <_svfiprintf_r+0x186>
 801dc74:	9b03      	ldr	r3, [sp, #12]
 801dc76:	1d1a      	adds	r2, r3, #4
 801dc78:	681b      	ldr	r3, [r3, #0]
 801dc7a:	9203      	str	r2, [sp, #12]
 801dc7c:	2b00      	cmp	r3, #0
 801dc7e:	bfb8      	it	lt
 801dc80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801dc84:	3402      	adds	r4, #2
 801dc86:	9305      	str	r3, [sp, #20]
 801dc88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801dd50 <_svfiprintf_r+0x1f8>
 801dc8c:	7821      	ldrb	r1, [r4, #0]
 801dc8e:	2203      	movs	r2, #3
 801dc90:	4650      	mov	r0, sl
 801dc92:	f7e8 fa85 	bl	80061a0 <memchr>
 801dc96:	b138      	cbz	r0, 801dca8 <_svfiprintf_r+0x150>
 801dc98:	9b04      	ldr	r3, [sp, #16]
 801dc9a:	eba0 000a 	sub.w	r0, r0, sl
 801dc9e:	2240      	movs	r2, #64	; 0x40
 801dca0:	4082      	lsls	r2, r0
 801dca2:	4313      	orrs	r3, r2
 801dca4:	3401      	adds	r4, #1
 801dca6:	9304      	str	r3, [sp, #16]
 801dca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dcac:	4825      	ldr	r0, [pc, #148]	; (801dd44 <_svfiprintf_r+0x1ec>)
 801dcae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801dcb2:	2206      	movs	r2, #6
 801dcb4:	f7e8 fa74 	bl	80061a0 <memchr>
 801dcb8:	2800      	cmp	r0, #0
 801dcba:	d038      	beq.n	801dd2e <_svfiprintf_r+0x1d6>
 801dcbc:	4b22      	ldr	r3, [pc, #136]	; (801dd48 <_svfiprintf_r+0x1f0>)
 801dcbe:	bb1b      	cbnz	r3, 801dd08 <_svfiprintf_r+0x1b0>
 801dcc0:	9b03      	ldr	r3, [sp, #12]
 801dcc2:	3307      	adds	r3, #7
 801dcc4:	f023 0307 	bic.w	r3, r3, #7
 801dcc8:	3308      	adds	r3, #8
 801dcca:	9303      	str	r3, [sp, #12]
 801dccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dcce:	4433      	add	r3, r6
 801dcd0:	9309      	str	r3, [sp, #36]	; 0x24
 801dcd2:	e768      	b.n	801dba6 <_svfiprintf_r+0x4e>
 801dcd4:	fb0c 3202 	mla	r2, ip, r2, r3
 801dcd8:	460c      	mov	r4, r1
 801dcda:	2001      	movs	r0, #1
 801dcdc:	e7a6      	b.n	801dc2c <_svfiprintf_r+0xd4>
 801dcde:	2300      	movs	r3, #0
 801dce0:	3401      	adds	r4, #1
 801dce2:	9305      	str	r3, [sp, #20]
 801dce4:	4619      	mov	r1, r3
 801dce6:	f04f 0c0a 	mov.w	ip, #10
 801dcea:	4620      	mov	r0, r4
 801dcec:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dcf0:	3a30      	subs	r2, #48	; 0x30
 801dcf2:	2a09      	cmp	r2, #9
 801dcf4:	d903      	bls.n	801dcfe <_svfiprintf_r+0x1a6>
 801dcf6:	2b00      	cmp	r3, #0
 801dcf8:	d0c6      	beq.n	801dc88 <_svfiprintf_r+0x130>
 801dcfa:	9105      	str	r1, [sp, #20]
 801dcfc:	e7c4      	b.n	801dc88 <_svfiprintf_r+0x130>
 801dcfe:	fb0c 2101 	mla	r1, ip, r1, r2
 801dd02:	4604      	mov	r4, r0
 801dd04:	2301      	movs	r3, #1
 801dd06:	e7f0      	b.n	801dcea <_svfiprintf_r+0x192>
 801dd08:	ab03      	add	r3, sp, #12
 801dd0a:	9300      	str	r3, [sp, #0]
 801dd0c:	462a      	mov	r2, r5
 801dd0e:	4b0f      	ldr	r3, [pc, #60]	; (801dd4c <_svfiprintf_r+0x1f4>)
 801dd10:	a904      	add	r1, sp, #16
 801dd12:	4638      	mov	r0, r7
 801dd14:	f7fc ff84 	bl	801ac20 <_printf_float>
 801dd18:	1c42      	adds	r2, r0, #1
 801dd1a:	4606      	mov	r6, r0
 801dd1c:	d1d6      	bne.n	801dccc <_svfiprintf_r+0x174>
 801dd1e:	89ab      	ldrh	r3, [r5, #12]
 801dd20:	065b      	lsls	r3, r3, #25
 801dd22:	f53f af2d 	bmi.w	801db80 <_svfiprintf_r+0x28>
 801dd26:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dd28:	b01d      	add	sp, #116	; 0x74
 801dd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd2e:	ab03      	add	r3, sp, #12
 801dd30:	9300      	str	r3, [sp, #0]
 801dd32:	462a      	mov	r2, r5
 801dd34:	4b05      	ldr	r3, [pc, #20]	; (801dd4c <_svfiprintf_r+0x1f4>)
 801dd36:	a904      	add	r1, sp, #16
 801dd38:	4638      	mov	r0, r7
 801dd3a:	f7fd fa15 	bl	801b168 <_printf_i>
 801dd3e:	e7eb      	b.n	801dd18 <_svfiprintf_r+0x1c0>
 801dd40:	08024b8c 	.word	0x08024b8c
 801dd44:	08024b96 	.word	0x08024b96
 801dd48:	0801ac21 	.word	0x0801ac21
 801dd4c:	0801daa5 	.word	0x0801daa5
 801dd50:	08024b92 	.word	0x08024b92

0801dd54 <__sfputc_r>:
 801dd54:	6893      	ldr	r3, [r2, #8]
 801dd56:	3b01      	subs	r3, #1
 801dd58:	2b00      	cmp	r3, #0
 801dd5a:	b410      	push	{r4}
 801dd5c:	6093      	str	r3, [r2, #8]
 801dd5e:	da08      	bge.n	801dd72 <__sfputc_r+0x1e>
 801dd60:	6994      	ldr	r4, [r2, #24]
 801dd62:	42a3      	cmp	r3, r4
 801dd64:	db01      	blt.n	801dd6a <__sfputc_r+0x16>
 801dd66:	290a      	cmp	r1, #10
 801dd68:	d103      	bne.n	801dd72 <__sfputc_r+0x1e>
 801dd6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dd6e:	f7fd bdc4 	b.w	801b8fa <__swbuf_r>
 801dd72:	6813      	ldr	r3, [r2, #0]
 801dd74:	1c58      	adds	r0, r3, #1
 801dd76:	6010      	str	r0, [r2, #0]
 801dd78:	7019      	strb	r1, [r3, #0]
 801dd7a:	4608      	mov	r0, r1
 801dd7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dd80:	4770      	bx	lr

0801dd82 <__sfputs_r>:
 801dd82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd84:	4606      	mov	r6, r0
 801dd86:	460f      	mov	r7, r1
 801dd88:	4614      	mov	r4, r2
 801dd8a:	18d5      	adds	r5, r2, r3
 801dd8c:	42ac      	cmp	r4, r5
 801dd8e:	d101      	bne.n	801dd94 <__sfputs_r+0x12>
 801dd90:	2000      	movs	r0, #0
 801dd92:	e007      	b.n	801dda4 <__sfputs_r+0x22>
 801dd94:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dd98:	463a      	mov	r2, r7
 801dd9a:	4630      	mov	r0, r6
 801dd9c:	f7ff ffda 	bl	801dd54 <__sfputc_r>
 801dda0:	1c43      	adds	r3, r0, #1
 801dda2:	d1f3      	bne.n	801dd8c <__sfputs_r+0xa>
 801dda4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801dda8 <_vfiprintf_r>:
 801dda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddac:	460d      	mov	r5, r1
 801ddae:	b09d      	sub	sp, #116	; 0x74
 801ddb0:	4614      	mov	r4, r2
 801ddb2:	4698      	mov	r8, r3
 801ddb4:	4606      	mov	r6, r0
 801ddb6:	b118      	cbz	r0, 801ddc0 <_vfiprintf_r+0x18>
 801ddb8:	6a03      	ldr	r3, [r0, #32]
 801ddba:	b90b      	cbnz	r3, 801ddc0 <_vfiprintf_r+0x18>
 801ddbc:	f7fd fb82 	bl	801b4c4 <__sinit>
 801ddc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ddc2:	07d9      	lsls	r1, r3, #31
 801ddc4:	d405      	bmi.n	801ddd2 <_vfiprintf_r+0x2a>
 801ddc6:	89ab      	ldrh	r3, [r5, #12]
 801ddc8:	059a      	lsls	r2, r3, #22
 801ddca:	d402      	bmi.n	801ddd2 <_vfiprintf_r+0x2a>
 801ddcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ddce:	f7fd ff54 	bl	801bc7a <__retarget_lock_acquire_recursive>
 801ddd2:	89ab      	ldrh	r3, [r5, #12]
 801ddd4:	071b      	lsls	r3, r3, #28
 801ddd6:	d501      	bpl.n	801dddc <_vfiprintf_r+0x34>
 801ddd8:	692b      	ldr	r3, [r5, #16]
 801ddda:	b99b      	cbnz	r3, 801de04 <_vfiprintf_r+0x5c>
 801dddc:	4629      	mov	r1, r5
 801ddde:	4630      	mov	r0, r6
 801dde0:	f7fd fdc8 	bl	801b974 <__swsetup_r>
 801dde4:	b170      	cbz	r0, 801de04 <_vfiprintf_r+0x5c>
 801dde6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dde8:	07dc      	lsls	r4, r3, #31
 801ddea:	d504      	bpl.n	801ddf6 <_vfiprintf_r+0x4e>
 801ddec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ddf0:	b01d      	add	sp, #116	; 0x74
 801ddf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddf6:	89ab      	ldrh	r3, [r5, #12]
 801ddf8:	0598      	lsls	r0, r3, #22
 801ddfa:	d4f7      	bmi.n	801ddec <_vfiprintf_r+0x44>
 801ddfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ddfe:	f7fd ff3d 	bl	801bc7c <__retarget_lock_release_recursive>
 801de02:	e7f3      	b.n	801ddec <_vfiprintf_r+0x44>
 801de04:	2300      	movs	r3, #0
 801de06:	9309      	str	r3, [sp, #36]	; 0x24
 801de08:	2320      	movs	r3, #32
 801de0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801de0e:	f8cd 800c 	str.w	r8, [sp, #12]
 801de12:	2330      	movs	r3, #48	; 0x30
 801de14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801dfc8 <_vfiprintf_r+0x220>
 801de18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801de1c:	f04f 0901 	mov.w	r9, #1
 801de20:	4623      	mov	r3, r4
 801de22:	469a      	mov	sl, r3
 801de24:	f813 2b01 	ldrb.w	r2, [r3], #1
 801de28:	b10a      	cbz	r2, 801de2e <_vfiprintf_r+0x86>
 801de2a:	2a25      	cmp	r2, #37	; 0x25
 801de2c:	d1f9      	bne.n	801de22 <_vfiprintf_r+0x7a>
 801de2e:	ebba 0b04 	subs.w	fp, sl, r4
 801de32:	d00b      	beq.n	801de4c <_vfiprintf_r+0xa4>
 801de34:	465b      	mov	r3, fp
 801de36:	4622      	mov	r2, r4
 801de38:	4629      	mov	r1, r5
 801de3a:	4630      	mov	r0, r6
 801de3c:	f7ff ffa1 	bl	801dd82 <__sfputs_r>
 801de40:	3001      	adds	r0, #1
 801de42:	f000 80a9 	beq.w	801df98 <_vfiprintf_r+0x1f0>
 801de46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801de48:	445a      	add	r2, fp
 801de4a:	9209      	str	r2, [sp, #36]	; 0x24
 801de4c:	f89a 3000 	ldrb.w	r3, [sl]
 801de50:	2b00      	cmp	r3, #0
 801de52:	f000 80a1 	beq.w	801df98 <_vfiprintf_r+0x1f0>
 801de56:	2300      	movs	r3, #0
 801de58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801de5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801de60:	f10a 0a01 	add.w	sl, sl, #1
 801de64:	9304      	str	r3, [sp, #16]
 801de66:	9307      	str	r3, [sp, #28]
 801de68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801de6c:	931a      	str	r3, [sp, #104]	; 0x68
 801de6e:	4654      	mov	r4, sl
 801de70:	2205      	movs	r2, #5
 801de72:	f814 1b01 	ldrb.w	r1, [r4], #1
 801de76:	4854      	ldr	r0, [pc, #336]	; (801dfc8 <_vfiprintf_r+0x220>)
 801de78:	f7e8 f992 	bl	80061a0 <memchr>
 801de7c:	9a04      	ldr	r2, [sp, #16]
 801de7e:	b9d8      	cbnz	r0, 801deb8 <_vfiprintf_r+0x110>
 801de80:	06d1      	lsls	r1, r2, #27
 801de82:	bf44      	itt	mi
 801de84:	2320      	movmi	r3, #32
 801de86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801de8a:	0713      	lsls	r3, r2, #28
 801de8c:	bf44      	itt	mi
 801de8e:	232b      	movmi	r3, #43	; 0x2b
 801de90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801de94:	f89a 3000 	ldrb.w	r3, [sl]
 801de98:	2b2a      	cmp	r3, #42	; 0x2a
 801de9a:	d015      	beq.n	801dec8 <_vfiprintf_r+0x120>
 801de9c:	9a07      	ldr	r2, [sp, #28]
 801de9e:	4654      	mov	r4, sl
 801dea0:	2000      	movs	r0, #0
 801dea2:	f04f 0c0a 	mov.w	ip, #10
 801dea6:	4621      	mov	r1, r4
 801dea8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801deac:	3b30      	subs	r3, #48	; 0x30
 801deae:	2b09      	cmp	r3, #9
 801deb0:	d94d      	bls.n	801df4e <_vfiprintf_r+0x1a6>
 801deb2:	b1b0      	cbz	r0, 801dee2 <_vfiprintf_r+0x13a>
 801deb4:	9207      	str	r2, [sp, #28]
 801deb6:	e014      	b.n	801dee2 <_vfiprintf_r+0x13a>
 801deb8:	eba0 0308 	sub.w	r3, r0, r8
 801debc:	fa09 f303 	lsl.w	r3, r9, r3
 801dec0:	4313      	orrs	r3, r2
 801dec2:	9304      	str	r3, [sp, #16]
 801dec4:	46a2      	mov	sl, r4
 801dec6:	e7d2      	b.n	801de6e <_vfiprintf_r+0xc6>
 801dec8:	9b03      	ldr	r3, [sp, #12]
 801deca:	1d19      	adds	r1, r3, #4
 801decc:	681b      	ldr	r3, [r3, #0]
 801dece:	9103      	str	r1, [sp, #12]
 801ded0:	2b00      	cmp	r3, #0
 801ded2:	bfbb      	ittet	lt
 801ded4:	425b      	neglt	r3, r3
 801ded6:	f042 0202 	orrlt.w	r2, r2, #2
 801deda:	9307      	strge	r3, [sp, #28]
 801dedc:	9307      	strlt	r3, [sp, #28]
 801dede:	bfb8      	it	lt
 801dee0:	9204      	strlt	r2, [sp, #16]
 801dee2:	7823      	ldrb	r3, [r4, #0]
 801dee4:	2b2e      	cmp	r3, #46	; 0x2e
 801dee6:	d10c      	bne.n	801df02 <_vfiprintf_r+0x15a>
 801dee8:	7863      	ldrb	r3, [r4, #1]
 801deea:	2b2a      	cmp	r3, #42	; 0x2a
 801deec:	d134      	bne.n	801df58 <_vfiprintf_r+0x1b0>
 801deee:	9b03      	ldr	r3, [sp, #12]
 801def0:	1d1a      	adds	r2, r3, #4
 801def2:	681b      	ldr	r3, [r3, #0]
 801def4:	9203      	str	r2, [sp, #12]
 801def6:	2b00      	cmp	r3, #0
 801def8:	bfb8      	it	lt
 801defa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801defe:	3402      	adds	r4, #2
 801df00:	9305      	str	r3, [sp, #20]
 801df02:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801dfd8 <_vfiprintf_r+0x230>
 801df06:	7821      	ldrb	r1, [r4, #0]
 801df08:	2203      	movs	r2, #3
 801df0a:	4650      	mov	r0, sl
 801df0c:	f7e8 f948 	bl	80061a0 <memchr>
 801df10:	b138      	cbz	r0, 801df22 <_vfiprintf_r+0x17a>
 801df12:	9b04      	ldr	r3, [sp, #16]
 801df14:	eba0 000a 	sub.w	r0, r0, sl
 801df18:	2240      	movs	r2, #64	; 0x40
 801df1a:	4082      	lsls	r2, r0
 801df1c:	4313      	orrs	r3, r2
 801df1e:	3401      	adds	r4, #1
 801df20:	9304      	str	r3, [sp, #16]
 801df22:	f814 1b01 	ldrb.w	r1, [r4], #1
 801df26:	4829      	ldr	r0, [pc, #164]	; (801dfcc <_vfiprintf_r+0x224>)
 801df28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801df2c:	2206      	movs	r2, #6
 801df2e:	f7e8 f937 	bl	80061a0 <memchr>
 801df32:	2800      	cmp	r0, #0
 801df34:	d03f      	beq.n	801dfb6 <_vfiprintf_r+0x20e>
 801df36:	4b26      	ldr	r3, [pc, #152]	; (801dfd0 <_vfiprintf_r+0x228>)
 801df38:	bb1b      	cbnz	r3, 801df82 <_vfiprintf_r+0x1da>
 801df3a:	9b03      	ldr	r3, [sp, #12]
 801df3c:	3307      	adds	r3, #7
 801df3e:	f023 0307 	bic.w	r3, r3, #7
 801df42:	3308      	adds	r3, #8
 801df44:	9303      	str	r3, [sp, #12]
 801df46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df48:	443b      	add	r3, r7
 801df4a:	9309      	str	r3, [sp, #36]	; 0x24
 801df4c:	e768      	b.n	801de20 <_vfiprintf_r+0x78>
 801df4e:	fb0c 3202 	mla	r2, ip, r2, r3
 801df52:	460c      	mov	r4, r1
 801df54:	2001      	movs	r0, #1
 801df56:	e7a6      	b.n	801dea6 <_vfiprintf_r+0xfe>
 801df58:	2300      	movs	r3, #0
 801df5a:	3401      	adds	r4, #1
 801df5c:	9305      	str	r3, [sp, #20]
 801df5e:	4619      	mov	r1, r3
 801df60:	f04f 0c0a 	mov.w	ip, #10
 801df64:	4620      	mov	r0, r4
 801df66:	f810 2b01 	ldrb.w	r2, [r0], #1
 801df6a:	3a30      	subs	r2, #48	; 0x30
 801df6c:	2a09      	cmp	r2, #9
 801df6e:	d903      	bls.n	801df78 <_vfiprintf_r+0x1d0>
 801df70:	2b00      	cmp	r3, #0
 801df72:	d0c6      	beq.n	801df02 <_vfiprintf_r+0x15a>
 801df74:	9105      	str	r1, [sp, #20]
 801df76:	e7c4      	b.n	801df02 <_vfiprintf_r+0x15a>
 801df78:	fb0c 2101 	mla	r1, ip, r1, r2
 801df7c:	4604      	mov	r4, r0
 801df7e:	2301      	movs	r3, #1
 801df80:	e7f0      	b.n	801df64 <_vfiprintf_r+0x1bc>
 801df82:	ab03      	add	r3, sp, #12
 801df84:	9300      	str	r3, [sp, #0]
 801df86:	462a      	mov	r2, r5
 801df88:	4b12      	ldr	r3, [pc, #72]	; (801dfd4 <_vfiprintf_r+0x22c>)
 801df8a:	a904      	add	r1, sp, #16
 801df8c:	4630      	mov	r0, r6
 801df8e:	f7fc fe47 	bl	801ac20 <_printf_float>
 801df92:	4607      	mov	r7, r0
 801df94:	1c78      	adds	r0, r7, #1
 801df96:	d1d6      	bne.n	801df46 <_vfiprintf_r+0x19e>
 801df98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801df9a:	07d9      	lsls	r1, r3, #31
 801df9c:	d405      	bmi.n	801dfaa <_vfiprintf_r+0x202>
 801df9e:	89ab      	ldrh	r3, [r5, #12]
 801dfa0:	059a      	lsls	r2, r3, #22
 801dfa2:	d402      	bmi.n	801dfaa <_vfiprintf_r+0x202>
 801dfa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dfa6:	f7fd fe69 	bl	801bc7c <__retarget_lock_release_recursive>
 801dfaa:	89ab      	ldrh	r3, [r5, #12]
 801dfac:	065b      	lsls	r3, r3, #25
 801dfae:	f53f af1d 	bmi.w	801ddec <_vfiprintf_r+0x44>
 801dfb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dfb4:	e71c      	b.n	801ddf0 <_vfiprintf_r+0x48>
 801dfb6:	ab03      	add	r3, sp, #12
 801dfb8:	9300      	str	r3, [sp, #0]
 801dfba:	462a      	mov	r2, r5
 801dfbc:	4b05      	ldr	r3, [pc, #20]	; (801dfd4 <_vfiprintf_r+0x22c>)
 801dfbe:	a904      	add	r1, sp, #16
 801dfc0:	4630      	mov	r0, r6
 801dfc2:	f7fd f8d1 	bl	801b168 <_printf_i>
 801dfc6:	e7e4      	b.n	801df92 <_vfiprintf_r+0x1ea>
 801dfc8:	08024b8c 	.word	0x08024b8c
 801dfcc:	08024b96 	.word	0x08024b96
 801dfd0:	0801ac21 	.word	0x0801ac21
 801dfd4:	0801dd83 	.word	0x0801dd83
 801dfd8:	08024b92 	.word	0x08024b92

0801dfdc <__sflush_r>:
 801dfdc:	898a      	ldrh	r2, [r1, #12]
 801dfde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dfe2:	4605      	mov	r5, r0
 801dfe4:	0710      	lsls	r0, r2, #28
 801dfe6:	460c      	mov	r4, r1
 801dfe8:	d458      	bmi.n	801e09c <__sflush_r+0xc0>
 801dfea:	684b      	ldr	r3, [r1, #4]
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	dc05      	bgt.n	801dffc <__sflush_r+0x20>
 801dff0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801dff2:	2b00      	cmp	r3, #0
 801dff4:	dc02      	bgt.n	801dffc <__sflush_r+0x20>
 801dff6:	2000      	movs	r0, #0
 801dff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dffc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dffe:	2e00      	cmp	r6, #0
 801e000:	d0f9      	beq.n	801dff6 <__sflush_r+0x1a>
 801e002:	2300      	movs	r3, #0
 801e004:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e008:	682f      	ldr	r7, [r5, #0]
 801e00a:	6a21      	ldr	r1, [r4, #32]
 801e00c:	602b      	str	r3, [r5, #0]
 801e00e:	d032      	beq.n	801e076 <__sflush_r+0x9a>
 801e010:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e012:	89a3      	ldrh	r3, [r4, #12]
 801e014:	075a      	lsls	r2, r3, #29
 801e016:	d505      	bpl.n	801e024 <__sflush_r+0x48>
 801e018:	6863      	ldr	r3, [r4, #4]
 801e01a:	1ac0      	subs	r0, r0, r3
 801e01c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e01e:	b10b      	cbz	r3, 801e024 <__sflush_r+0x48>
 801e020:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e022:	1ac0      	subs	r0, r0, r3
 801e024:	2300      	movs	r3, #0
 801e026:	4602      	mov	r2, r0
 801e028:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e02a:	6a21      	ldr	r1, [r4, #32]
 801e02c:	4628      	mov	r0, r5
 801e02e:	47b0      	blx	r6
 801e030:	1c43      	adds	r3, r0, #1
 801e032:	89a3      	ldrh	r3, [r4, #12]
 801e034:	d106      	bne.n	801e044 <__sflush_r+0x68>
 801e036:	6829      	ldr	r1, [r5, #0]
 801e038:	291d      	cmp	r1, #29
 801e03a:	d82b      	bhi.n	801e094 <__sflush_r+0xb8>
 801e03c:	4a29      	ldr	r2, [pc, #164]	; (801e0e4 <__sflush_r+0x108>)
 801e03e:	410a      	asrs	r2, r1
 801e040:	07d6      	lsls	r6, r2, #31
 801e042:	d427      	bmi.n	801e094 <__sflush_r+0xb8>
 801e044:	2200      	movs	r2, #0
 801e046:	6062      	str	r2, [r4, #4]
 801e048:	04d9      	lsls	r1, r3, #19
 801e04a:	6922      	ldr	r2, [r4, #16]
 801e04c:	6022      	str	r2, [r4, #0]
 801e04e:	d504      	bpl.n	801e05a <__sflush_r+0x7e>
 801e050:	1c42      	adds	r2, r0, #1
 801e052:	d101      	bne.n	801e058 <__sflush_r+0x7c>
 801e054:	682b      	ldr	r3, [r5, #0]
 801e056:	b903      	cbnz	r3, 801e05a <__sflush_r+0x7e>
 801e058:	6560      	str	r0, [r4, #84]	; 0x54
 801e05a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e05c:	602f      	str	r7, [r5, #0]
 801e05e:	2900      	cmp	r1, #0
 801e060:	d0c9      	beq.n	801dff6 <__sflush_r+0x1a>
 801e062:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e066:	4299      	cmp	r1, r3
 801e068:	d002      	beq.n	801e070 <__sflush_r+0x94>
 801e06a:	4628      	mov	r0, r5
 801e06c:	f7fe fca2 	bl	801c9b4 <_free_r>
 801e070:	2000      	movs	r0, #0
 801e072:	6360      	str	r0, [r4, #52]	; 0x34
 801e074:	e7c0      	b.n	801dff8 <__sflush_r+0x1c>
 801e076:	2301      	movs	r3, #1
 801e078:	4628      	mov	r0, r5
 801e07a:	47b0      	blx	r6
 801e07c:	1c41      	adds	r1, r0, #1
 801e07e:	d1c8      	bne.n	801e012 <__sflush_r+0x36>
 801e080:	682b      	ldr	r3, [r5, #0]
 801e082:	2b00      	cmp	r3, #0
 801e084:	d0c5      	beq.n	801e012 <__sflush_r+0x36>
 801e086:	2b1d      	cmp	r3, #29
 801e088:	d001      	beq.n	801e08e <__sflush_r+0xb2>
 801e08a:	2b16      	cmp	r3, #22
 801e08c:	d101      	bne.n	801e092 <__sflush_r+0xb6>
 801e08e:	602f      	str	r7, [r5, #0]
 801e090:	e7b1      	b.n	801dff6 <__sflush_r+0x1a>
 801e092:	89a3      	ldrh	r3, [r4, #12]
 801e094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e098:	81a3      	strh	r3, [r4, #12]
 801e09a:	e7ad      	b.n	801dff8 <__sflush_r+0x1c>
 801e09c:	690f      	ldr	r7, [r1, #16]
 801e09e:	2f00      	cmp	r7, #0
 801e0a0:	d0a9      	beq.n	801dff6 <__sflush_r+0x1a>
 801e0a2:	0793      	lsls	r3, r2, #30
 801e0a4:	680e      	ldr	r6, [r1, #0]
 801e0a6:	bf08      	it	eq
 801e0a8:	694b      	ldreq	r3, [r1, #20]
 801e0aa:	600f      	str	r7, [r1, #0]
 801e0ac:	bf18      	it	ne
 801e0ae:	2300      	movne	r3, #0
 801e0b0:	eba6 0807 	sub.w	r8, r6, r7
 801e0b4:	608b      	str	r3, [r1, #8]
 801e0b6:	f1b8 0f00 	cmp.w	r8, #0
 801e0ba:	dd9c      	ble.n	801dff6 <__sflush_r+0x1a>
 801e0bc:	6a21      	ldr	r1, [r4, #32]
 801e0be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e0c0:	4643      	mov	r3, r8
 801e0c2:	463a      	mov	r2, r7
 801e0c4:	4628      	mov	r0, r5
 801e0c6:	47b0      	blx	r6
 801e0c8:	2800      	cmp	r0, #0
 801e0ca:	dc06      	bgt.n	801e0da <__sflush_r+0xfe>
 801e0cc:	89a3      	ldrh	r3, [r4, #12]
 801e0ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e0d2:	81a3      	strh	r3, [r4, #12]
 801e0d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e0d8:	e78e      	b.n	801dff8 <__sflush_r+0x1c>
 801e0da:	4407      	add	r7, r0
 801e0dc:	eba8 0800 	sub.w	r8, r8, r0
 801e0e0:	e7e9      	b.n	801e0b6 <__sflush_r+0xda>
 801e0e2:	bf00      	nop
 801e0e4:	dfbffffe 	.word	0xdfbffffe

0801e0e8 <_fflush_r>:
 801e0e8:	b538      	push	{r3, r4, r5, lr}
 801e0ea:	690b      	ldr	r3, [r1, #16]
 801e0ec:	4605      	mov	r5, r0
 801e0ee:	460c      	mov	r4, r1
 801e0f0:	b913      	cbnz	r3, 801e0f8 <_fflush_r+0x10>
 801e0f2:	2500      	movs	r5, #0
 801e0f4:	4628      	mov	r0, r5
 801e0f6:	bd38      	pop	{r3, r4, r5, pc}
 801e0f8:	b118      	cbz	r0, 801e102 <_fflush_r+0x1a>
 801e0fa:	6a03      	ldr	r3, [r0, #32]
 801e0fc:	b90b      	cbnz	r3, 801e102 <_fflush_r+0x1a>
 801e0fe:	f7fd f9e1 	bl	801b4c4 <__sinit>
 801e102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e106:	2b00      	cmp	r3, #0
 801e108:	d0f3      	beq.n	801e0f2 <_fflush_r+0xa>
 801e10a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e10c:	07d0      	lsls	r0, r2, #31
 801e10e:	d404      	bmi.n	801e11a <_fflush_r+0x32>
 801e110:	0599      	lsls	r1, r3, #22
 801e112:	d402      	bmi.n	801e11a <_fflush_r+0x32>
 801e114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e116:	f7fd fdb0 	bl	801bc7a <__retarget_lock_acquire_recursive>
 801e11a:	4628      	mov	r0, r5
 801e11c:	4621      	mov	r1, r4
 801e11e:	f7ff ff5d 	bl	801dfdc <__sflush_r>
 801e122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e124:	07da      	lsls	r2, r3, #31
 801e126:	4605      	mov	r5, r0
 801e128:	d4e4      	bmi.n	801e0f4 <_fflush_r+0xc>
 801e12a:	89a3      	ldrh	r3, [r4, #12]
 801e12c:	059b      	lsls	r3, r3, #22
 801e12e:	d4e1      	bmi.n	801e0f4 <_fflush_r+0xc>
 801e130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e132:	f7fd fda3 	bl	801bc7c <__retarget_lock_release_recursive>
 801e136:	e7dd      	b.n	801e0f4 <_fflush_r+0xc>

0801e138 <__swhatbuf_r>:
 801e138:	b570      	push	{r4, r5, r6, lr}
 801e13a:	460c      	mov	r4, r1
 801e13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e140:	2900      	cmp	r1, #0
 801e142:	b096      	sub	sp, #88	; 0x58
 801e144:	4615      	mov	r5, r2
 801e146:	461e      	mov	r6, r3
 801e148:	da0d      	bge.n	801e166 <__swhatbuf_r+0x2e>
 801e14a:	89a3      	ldrh	r3, [r4, #12]
 801e14c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801e150:	f04f 0100 	mov.w	r1, #0
 801e154:	bf0c      	ite	eq
 801e156:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801e15a:	2340      	movne	r3, #64	; 0x40
 801e15c:	2000      	movs	r0, #0
 801e15e:	6031      	str	r1, [r6, #0]
 801e160:	602b      	str	r3, [r5, #0]
 801e162:	b016      	add	sp, #88	; 0x58
 801e164:	bd70      	pop	{r4, r5, r6, pc}
 801e166:	466a      	mov	r2, sp
 801e168:	f000 f862 	bl	801e230 <_fstat_r>
 801e16c:	2800      	cmp	r0, #0
 801e16e:	dbec      	blt.n	801e14a <__swhatbuf_r+0x12>
 801e170:	9901      	ldr	r1, [sp, #4]
 801e172:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801e176:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801e17a:	4259      	negs	r1, r3
 801e17c:	4159      	adcs	r1, r3
 801e17e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e182:	e7eb      	b.n	801e15c <__swhatbuf_r+0x24>

0801e184 <__smakebuf_r>:
 801e184:	898b      	ldrh	r3, [r1, #12]
 801e186:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e188:	079d      	lsls	r5, r3, #30
 801e18a:	4606      	mov	r6, r0
 801e18c:	460c      	mov	r4, r1
 801e18e:	d507      	bpl.n	801e1a0 <__smakebuf_r+0x1c>
 801e190:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e194:	6023      	str	r3, [r4, #0]
 801e196:	6123      	str	r3, [r4, #16]
 801e198:	2301      	movs	r3, #1
 801e19a:	6163      	str	r3, [r4, #20]
 801e19c:	b002      	add	sp, #8
 801e19e:	bd70      	pop	{r4, r5, r6, pc}
 801e1a0:	ab01      	add	r3, sp, #4
 801e1a2:	466a      	mov	r2, sp
 801e1a4:	f7ff ffc8 	bl	801e138 <__swhatbuf_r>
 801e1a8:	9900      	ldr	r1, [sp, #0]
 801e1aa:	4605      	mov	r5, r0
 801e1ac:	4630      	mov	r0, r6
 801e1ae:	f7fb fd2f 	bl	8019c10 <_malloc_r>
 801e1b2:	b948      	cbnz	r0, 801e1c8 <__smakebuf_r+0x44>
 801e1b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e1b8:	059a      	lsls	r2, r3, #22
 801e1ba:	d4ef      	bmi.n	801e19c <__smakebuf_r+0x18>
 801e1bc:	f023 0303 	bic.w	r3, r3, #3
 801e1c0:	f043 0302 	orr.w	r3, r3, #2
 801e1c4:	81a3      	strh	r3, [r4, #12]
 801e1c6:	e7e3      	b.n	801e190 <__smakebuf_r+0xc>
 801e1c8:	89a3      	ldrh	r3, [r4, #12]
 801e1ca:	6020      	str	r0, [r4, #0]
 801e1cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e1d0:	81a3      	strh	r3, [r4, #12]
 801e1d2:	9b00      	ldr	r3, [sp, #0]
 801e1d4:	6163      	str	r3, [r4, #20]
 801e1d6:	9b01      	ldr	r3, [sp, #4]
 801e1d8:	6120      	str	r0, [r4, #16]
 801e1da:	b15b      	cbz	r3, 801e1f4 <__smakebuf_r+0x70>
 801e1dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e1e0:	4630      	mov	r0, r6
 801e1e2:	f000 f837 	bl	801e254 <_isatty_r>
 801e1e6:	b128      	cbz	r0, 801e1f4 <__smakebuf_r+0x70>
 801e1e8:	89a3      	ldrh	r3, [r4, #12]
 801e1ea:	f023 0303 	bic.w	r3, r3, #3
 801e1ee:	f043 0301 	orr.w	r3, r3, #1
 801e1f2:	81a3      	strh	r3, [r4, #12]
 801e1f4:	89a3      	ldrh	r3, [r4, #12]
 801e1f6:	431d      	orrs	r5, r3
 801e1f8:	81a5      	strh	r5, [r4, #12]
 801e1fa:	e7cf      	b.n	801e19c <__smakebuf_r+0x18>

0801e1fc <memmove>:
 801e1fc:	4288      	cmp	r0, r1
 801e1fe:	b510      	push	{r4, lr}
 801e200:	eb01 0402 	add.w	r4, r1, r2
 801e204:	d902      	bls.n	801e20c <memmove+0x10>
 801e206:	4284      	cmp	r4, r0
 801e208:	4623      	mov	r3, r4
 801e20a:	d807      	bhi.n	801e21c <memmove+0x20>
 801e20c:	1e43      	subs	r3, r0, #1
 801e20e:	42a1      	cmp	r1, r4
 801e210:	d008      	beq.n	801e224 <memmove+0x28>
 801e212:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e216:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e21a:	e7f8      	b.n	801e20e <memmove+0x12>
 801e21c:	4402      	add	r2, r0
 801e21e:	4601      	mov	r1, r0
 801e220:	428a      	cmp	r2, r1
 801e222:	d100      	bne.n	801e226 <memmove+0x2a>
 801e224:	bd10      	pop	{r4, pc}
 801e226:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e22a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e22e:	e7f7      	b.n	801e220 <memmove+0x24>

0801e230 <_fstat_r>:
 801e230:	b538      	push	{r3, r4, r5, lr}
 801e232:	4d07      	ldr	r5, [pc, #28]	; (801e250 <_fstat_r+0x20>)
 801e234:	2300      	movs	r3, #0
 801e236:	4604      	mov	r4, r0
 801e238:	4608      	mov	r0, r1
 801e23a:	4611      	mov	r1, r2
 801e23c:	602b      	str	r3, [r5, #0]
 801e23e:	f7ef fc22 	bl	800da86 <_fstat>
 801e242:	1c43      	adds	r3, r0, #1
 801e244:	d102      	bne.n	801e24c <_fstat_r+0x1c>
 801e246:	682b      	ldr	r3, [r5, #0]
 801e248:	b103      	cbz	r3, 801e24c <_fstat_r+0x1c>
 801e24a:	6023      	str	r3, [r4, #0]
 801e24c:	bd38      	pop	{r3, r4, r5, pc}
 801e24e:	bf00      	nop
 801e250:	20001868 	.word	0x20001868

0801e254 <_isatty_r>:
 801e254:	b538      	push	{r3, r4, r5, lr}
 801e256:	4d06      	ldr	r5, [pc, #24]	; (801e270 <_isatty_r+0x1c>)
 801e258:	2300      	movs	r3, #0
 801e25a:	4604      	mov	r4, r0
 801e25c:	4608      	mov	r0, r1
 801e25e:	602b      	str	r3, [r5, #0]
 801e260:	f7ef fc21 	bl	800daa6 <_isatty>
 801e264:	1c43      	adds	r3, r0, #1
 801e266:	d102      	bne.n	801e26e <_isatty_r+0x1a>
 801e268:	682b      	ldr	r3, [r5, #0]
 801e26a:	b103      	cbz	r3, 801e26e <_isatty_r+0x1a>
 801e26c:	6023      	str	r3, [r4, #0]
 801e26e:	bd38      	pop	{r3, r4, r5, pc}
 801e270:	20001868 	.word	0x20001868

0801e274 <__assert_func>:
 801e274:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e276:	4614      	mov	r4, r2
 801e278:	461a      	mov	r2, r3
 801e27a:	4b09      	ldr	r3, [pc, #36]	; (801e2a0 <__assert_func+0x2c>)
 801e27c:	681b      	ldr	r3, [r3, #0]
 801e27e:	4605      	mov	r5, r0
 801e280:	68d8      	ldr	r0, [r3, #12]
 801e282:	b14c      	cbz	r4, 801e298 <__assert_func+0x24>
 801e284:	4b07      	ldr	r3, [pc, #28]	; (801e2a4 <__assert_func+0x30>)
 801e286:	9100      	str	r1, [sp, #0]
 801e288:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e28c:	4906      	ldr	r1, [pc, #24]	; (801e2a8 <__assert_func+0x34>)
 801e28e:	462b      	mov	r3, r5
 801e290:	f000 f824 	bl	801e2dc <fiprintf>
 801e294:	f7fb fc7e 	bl	8019b94 <abort>
 801e298:	4b04      	ldr	r3, [pc, #16]	; (801e2ac <__assert_func+0x38>)
 801e29a:	461c      	mov	r4, r3
 801e29c:	e7f3      	b.n	801e286 <__assert_func+0x12>
 801e29e:	bf00      	nop
 801e2a0:	200001f8 	.word	0x200001f8
 801e2a4:	08024b9d 	.word	0x08024b9d
 801e2a8:	08024baa 	.word	0x08024baa
 801e2ac:	08024bd8 	.word	0x08024bd8

0801e2b0 <_calloc_r>:
 801e2b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e2b2:	fba1 2402 	umull	r2, r4, r1, r2
 801e2b6:	b94c      	cbnz	r4, 801e2cc <_calloc_r+0x1c>
 801e2b8:	4611      	mov	r1, r2
 801e2ba:	9201      	str	r2, [sp, #4]
 801e2bc:	f7fb fca8 	bl	8019c10 <_malloc_r>
 801e2c0:	9a01      	ldr	r2, [sp, #4]
 801e2c2:	4605      	mov	r5, r0
 801e2c4:	b930      	cbnz	r0, 801e2d4 <_calloc_r+0x24>
 801e2c6:	4628      	mov	r0, r5
 801e2c8:	b003      	add	sp, #12
 801e2ca:	bd30      	pop	{r4, r5, pc}
 801e2cc:	220c      	movs	r2, #12
 801e2ce:	6002      	str	r2, [r0, #0]
 801e2d0:	2500      	movs	r5, #0
 801e2d2:	e7f8      	b.n	801e2c6 <_calloc_r+0x16>
 801e2d4:	4621      	mov	r1, r4
 801e2d6:	f7fd fbb5 	bl	801ba44 <memset>
 801e2da:	e7f4      	b.n	801e2c6 <_calloc_r+0x16>

0801e2dc <fiprintf>:
 801e2dc:	b40e      	push	{r1, r2, r3}
 801e2de:	b503      	push	{r0, r1, lr}
 801e2e0:	4601      	mov	r1, r0
 801e2e2:	ab03      	add	r3, sp, #12
 801e2e4:	4805      	ldr	r0, [pc, #20]	; (801e2fc <fiprintf+0x20>)
 801e2e6:	f853 2b04 	ldr.w	r2, [r3], #4
 801e2ea:	6800      	ldr	r0, [r0, #0]
 801e2ec:	9301      	str	r3, [sp, #4]
 801e2ee:	f7ff fd5b 	bl	801dda8 <_vfiprintf_r>
 801e2f2:	b002      	add	sp, #8
 801e2f4:	f85d eb04 	ldr.w	lr, [sp], #4
 801e2f8:	b003      	add	sp, #12
 801e2fa:	4770      	bx	lr
 801e2fc:	200001f8 	.word	0x200001f8

0801e300 <_Unwind_GetDataRelBase>:
 801e300:	b508      	push	{r3, lr}
 801e302:	f7fb fc47 	bl	8019b94 <abort>

0801e306 <_Unwind_GetTextRelBase>:
 801e306:	b508      	push	{r3, lr}
 801e308:	f7ff fffa 	bl	801e300 <_Unwind_GetDataRelBase>

0801e30c <_init>:
 801e30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e30e:	bf00      	nop
 801e310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e312:	bc08      	pop	{r3}
 801e314:	469e      	mov	lr, r3
 801e316:	4770      	bx	lr

0801e318 <_fini>:
 801e318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e31a:	bf00      	nop
 801e31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e31e:	bc08      	pop	{r3}
 801e320:	469e      	mov	lr, r3
 801e322:	4770      	bx	lr

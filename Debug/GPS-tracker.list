
GPS-tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000308c  08007e30  08007e30  00017e30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aebc  0800aebc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800aebc  0800aebc  0001aebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aec4  0800aec4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aec4  0800aec4  0001aec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aec8  0800aec8  0001aec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800aecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          000002f8  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004dc  200004dc  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013435  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002d6b  00000000  00000000  0003368c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001060  00000000  00000000  000363f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000caf  00000000  00000000  00037458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000263ce  00000000  00000000  00038107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013f4f  00000000  00000000  0005e4d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d336d  00000000  00000000  00072424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000056b4  00000000  00000000  00145794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0014ae48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e14 	.word	0x08007e14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08007e14 	.word	0x08007e14

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <_ZN9GpsParserC1Ev>:
#ifndef __GPS_PARSER_H
#define __GPS_PARSER_H

#include "main.h"

class GpsParser
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a1c      	ldr	r2, [pc, #112]	; (8000f48 <_ZN9GpsParserC1Ev+0x84>)
 8000ed8:	7812      	ldrb	r2, [r2, #0]
 8000eda:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
 8000ede:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a18      	ldr	r2, [pc, #96]	; (8000f4c <_ZN9GpsParserC1Ev+0x88>)
 8000eec:	7812      	ldrb	r2, [r2, #0]
 8000eee:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 8000ef2:	f203 1309 	addw	r3, r3, #265	; 0x109
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	f8c3 200f 	str.w	r2, [r3, #15]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a11      	ldr	r2, [pc, #68]	; (8000f4c <_ZN9GpsParserC1Ev+0x88>)
 8000f08:	7812      	ldrb	r2, [r2, #0]
 8000f0a:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
 8000f0e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	f8c3 200f 	str.w	r2, [r3, #15]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	08007e30 	.word	0x08007e30
 8000f4c:	08007e3c 	.word	0x08007e3c

08000f50 <applicationMain>:

#define GPS_BUFFER_SIZE 128
uint8_t GPS_BUFFER[GPS_BUFFER_SIZE];

void applicationMain(UART_HandleTypeDef huart1)
{
 8000f50:	b084      	sub	sp, #16
 8000f52:	b5b0      	push	{r4, r5, r7, lr}
 8000f54:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 8000f58:	af4c      	add	r7, sp, #304	; 0x130
 8000f5a:	f507 74a8 	add.w	r4, r7, #336	; 0x150
 8000f5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	GpsParser gpsParser;
 8000f62:	f107 0308 	add.w	r3, r7, #8
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ffac 	bl	8000ec4 <_ZN9GpsParserC1Ev>
	UI ui;
 8000f6c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000f70:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
	ui.init();
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 fa3a 	bl	80013f4 <_ZN2UI4initEv>

	while(1) {
		memset(GPS_BUFFER, 0, GPS_BUFFER_SIZE);
 8000f80:	2280      	movs	r2, #128	; 0x80
 8000f82:	2100      	movs	r1, #0
 8000f84:	481b      	ldr	r0, [pc, #108]	; (8000ff4 <applicationMain+0xa4>)
 8000f86:	f004 ff75 	bl	8005e74 <memset>
		HAL_UART_Receive(&huart1, GPS_BUFFER, GPS_BUFFER_SIZE, 100);
 8000f8a:	2364      	movs	r3, #100	; 0x64
 8000f8c:	2280      	movs	r2, #128	; 0x80
 8000f8e:	4919      	ldr	r1, [pc, #100]	; (8000ff4 <applicationMain+0xa4>)
 8000f90:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8000f94:	f002 feec 	bl	8003d70 <HAL_UART_Receive>

		//TODO refactor
		uint8_t size = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
		while (size < GPS_BUFFER_SIZE && GPS_BUFFER[size] != 0) {
 8000f9e:	e004      	b.n	8000faa <applicationMain+0x5a>
			++size;
 8000fa0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
		while (size < GPS_BUFFER_SIZE && GPS_BUFFER[size] != 0) {
 8000faa:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db05      	blt.n	8000fbe <applicationMain+0x6e>
 8000fb2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8000fb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ff4 <applicationMain+0xa4>)
 8000fb8:	5cd3      	ldrb	r3, [r2, r3]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1f0      	bne.n	8000fa0 <applicationMain+0x50>
		}

		gpsParser.addData(GPS_BUFFER, size);
 8000fbe:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8000fc2:	f107 0308 	add.w	r3, r7, #8
 8000fc6:	490b      	ldr	r1, [pc, #44]	; (8000ff4 <applicationMain+0xa4>)
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f879 	bl	80010c0 <_ZN9GpsParser7addDataEPhh>

		ui.refresh(gpsParser);
 8000fce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000fd2:	f5a3 749c 	sub.w	r4, r3, #312	; 0x138
 8000fd6:	1d3d      	adds	r5, r7, #4
 8000fd8:	4668      	mov	r0, sp
 8000fda:	f104 030c 	add.w	r3, r4, #12
 8000fde:	f240 1229 	movw	r2, #297	; 0x129
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f004 fff5 	bl	8005fd2 <memcpy>
 8000fe8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000fec:	4628      	mov	r0, r5
 8000fee:	f000 fa63 	bl	80014b8 <_ZN2UI7refreshE9GpsParser>
	}
 8000ff2:	e7c5      	b.n	8000f80 <applicationMain+0x30>
 8000ff4:	20000200 	.word	0x20000200

08000ff8 <_ZN9GpsParser18isContaisValidDataEv>:
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

bool GpsParser::isContaisValidData()
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	return fixQuality > 0;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 8001006:	2b00      	cmp	r3, #0
 8001008:	bf14      	ite	ne
 800100a:	2301      	movne	r3, #1
 800100c:	2300      	moveq	r3, #0
 800100e:	b2db      	uxtb	r3, r3
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <_ZN9GpsParser10getTimeUtcEv>:

const char* GpsParser::getTimeUtc()
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	return timeUtc;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	33ff      	adds	r3, #255	; 0xff
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <_ZN9GpsParser19getSatellitesNumberEv>:

uint8_t GpsParser::getSatellitesNumber()
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	return satellitesNumber;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
}
 8001042:	4618      	mov	r0, r3
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <_ZN9GpsParser18getIsReceivingDataEv>:

bool GpsParser::getIsReceivingData()
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
	return isReceivingData;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
}
 800105c:	4618      	mov	r0, r3
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <_ZN9GpsParser11getLocationEv>:

const char* GpsParser::getLocation()
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b095      	sub	sp, #84	; 0x54
 800106c:	af02      	add	r7, sp, #8
 800106e:	6078      	str	r0, [r7, #4]
	char location[latitudeAndLongitudeMaxSize*2+2+10]; //TODO is it bad return this variable outside????
	char longitudeEorWString[2] = {longitudeEorW, 0};
 8001070:	2300      	movs	r3, #0
 8001072:	823b      	strh	r3, [r7, #16]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800107a:	743b      	strb	r3, [r7, #16]
	char latitudeNorSString[2] = {latitudeNorS, 0};
 800107c:	2300      	movs	r3, #0
 800107e:	81bb      	strh	r3, [r7, #12]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8001086:	733b      	strb	r3, [r7, #12]

	sprintf(location, "%s%s,%s%s", longitude, longitudeEorWString, latitude, latitudeNorSString);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f203 111d 	addw	r1, r3, #285	; 0x11d
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001094:	f107 0410 	add.w	r4, r7, #16
 8001098:	f107 0014 	add.w	r0, r7, #20
 800109c:	f107 020c 	add.w	r2, r7, #12
 80010a0:	9201      	str	r2, [sp, #4]
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	4623      	mov	r3, r4
 80010a6:	460a      	mov	r2, r1
 80010a8:	4903      	ldr	r1, [pc, #12]	; (80010b8 <_ZN9GpsParser11getLocationEv+0x50>)
 80010aa:	f004 fdeb 	bl	8005c84 <siprintf>

	return "4532583";
 80010ae:	4b03      	ldr	r3, [pc, #12]	; (80010bc <_ZN9GpsParser11getLocationEv+0x54>)
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	374c      	adds	r7, #76	; 0x4c
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd90      	pop	{r4, r7, pc}
 80010b8:	08007e50 	.word	0x08007e50
 80010bc:	08007e5c 	.word	0x08007e5c

080010c0 <_ZN9GpsParser7addDataEPhh>:

void GpsParser::addData(uint8_t *data, uint8_t size)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	4613      	mov	r3, r2
 80010cc:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < size; i++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	e033      	b.n	800113c <_ZN9GpsParser7addDataEPhh+0x7c>
	{
		if (data[i] == '$') {
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	4413      	add	r3, r2
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b24      	cmp	r3, #36	; 0x24
 80010de:	d110      	bne.n	8001102 <_ZN9GpsParser7addDataEPhh+0x42>
			isReceivingData = true;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
			parseDataNmeaSentence();
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f000 f831 	bl	8001150 <_ZN9GpsParser21parseDataNmeaSentenceEv>
			bufferSize = 0;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
			memset(buffer, 0, maxBufferSize);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	22fe      	movs	r2, #254	; 0xfe
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f004 feb9 	bl	8005e74 <memset>
		}

		buffer[bufferSize] = data[i];
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	68ba      	ldr	r2, [r7, #8]
 8001106:	4413      	add	r3, r2
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	f892 20fe 	ldrb.w	r2, [r2, #254]	; 0xfe
 800110e:	7819      	ldrb	r1, [r3, #0]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	5499      	strb	r1, [r3, r2]
		++bufferSize;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800111a:	3301      	adds	r3, #1
 800111c:	b2da      	uxtb	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe

		//buffer overflow should not happen. If will then clear buffer
		if (bufferSize >= maxBufferSize) {
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800112a:	2bfd      	cmp	r3, #253	; 0xfd
 800112c:	d903      	bls.n	8001136 <_ZN9GpsParser7addDataEPhh+0x76>
			bufferSize = 0;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
	for (int i = 0; i < size; i++)
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3301      	adds	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	429a      	cmp	r2, r3
 8001142:	dbc7      	blt.n	80010d4 <_ZN9GpsParser7addDataEPhh+0x14>
		}
	}
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <_ZN9GpsParser21parseDataNmeaSentenceEv>:


void GpsParser::parseDataNmeaSentence()
{
 8001150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001154:	b08f      	sub	sp, #60	; 0x3c
 8001156:	af00      	add	r7, sp, #0
 8001158:	60f8      	str	r0, [r7, #12]
	char nmeaSentenceName[7] = {0, 0, 0, 0, 0, 0, 0};
 800115a:	4aa3      	ldr	r2, [pc, #652]	; (80013e8 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x298>)
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001164:	6018      	str	r0, [r3, #0]
 8001166:	3304      	adds	r3, #4
 8001168:	8019      	strh	r1, [r3, #0]
 800116a:	3302      	adds	r3, #2
 800116c:	0c0a      	lsrs	r2, r1, #16
 800116e:	701a      	strb	r2, [r3, #0]
	strncpy(nmeaSentenceName, (const char *)buffer, 6);
 8001170:	68f9      	ldr	r1, [r7, #12]
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	2206      	movs	r2, #6
 8001178:	4618      	mov	r0, r3
 800117a:	f004 fe90 	bl	8005e9e <strncpy>

	if (strcmp(nmeaSentenceName, "$GPGGA") == 0)
 800117e:	f107 0310 	add.w	r3, r7, #16
 8001182:	499a      	ldr	r1, [pc, #616]	; (80013ec <_ZN9GpsParser21parseDataNmeaSentenceEv+0x29c>)
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f823 	bl	80001d0 <strcmp>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	f040 8126 	bne.w	80013de <_ZN9GpsParser21parseDataNmeaSentenceEv+0x28e>
			}

			nmeaSentenceSectionNumber++;
			parseBufferStart += nmeaSentenceSectionLen + 1;
		}
	}
 8001192:	466b      	mov	r3, sp
 8001194:	60bb      	str	r3, [r7, #8]
		char parseBuffer[bufferSize + 1];
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800119c:	1c59      	adds	r1, r3, #1
 800119e:	1e4b      	subs	r3, r1, #1
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011a2:	460a      	mov	r2, r1
 80011a4:	2300      	movs	r3, #0
 80011a6:	603a      	str	r2, [r7, #0]
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	f04f 0300 	mov.w	r3, #0
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	00c3      	lsls	r3, r0, #3
 80011b6:	6838      	ldr	r0, [r7, #0]
 80011b8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011bc:	6838      	ldr	r0, [r7, #0]
 80011be:	00c2      	lsls	r2, r0, #3
 80011c0:	460a      	mov	r2, r1
 80011c2:	2300      	movs	r3, #0
 80011c4:	4692      	mov	sl, r2
 80011c6:	469b      	mov	fp, r3
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	f04f 0300 	mov.w	r3, #0
 80011d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80011d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80011d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80011dc:	460b      	mov	r3, r1
 80011de:	3307      	adds	r3, #7
 80011e0:	08db      	lsrs	r3, r3, #3
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	ebad 0d03 	sub.w	sp, sp, r3
 80011e8:	466b      	mov	r3, sp
 80011ea:	3300      	adds	r3, #0
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
		strncpy(parseBuffer, (const char *)buffer, bufferSize);
 80011ee:	68f9      	ldr	r1, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80011f6:	461a      	mov	r2, r3
 80011f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011fa:	f004 fe50 	bl	8005e9e <strncpy>
		parseBuffer[bufferSize] = '\0';
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8001204:	461a      	mov	r2, r3
 8001206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001208:	2100      	movs	r1, #0
 800120a:	5499      	strb	r1, [r3, r2]
		char* parseBufferStart = parseBuffer;
 800120c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120e:	637b      	str	r3, [r7, #52]	; 0x34
		uint8_t nmeaSentenceSectionNumber = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		}
 8001216:	466b      	mov	r3, sp
 8001218:	461e      	mov	r6, r3
			char* delimiterPosition = strchr(parseBufferStart, ',');
 800121a:	212c      	movs	r1, #44	; 0x2c
 800121c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800121e:	f004 fe31 	bl	8005e84 <strchr>
 8001222:	6278      	str	r0, [r7, #36]	; 0x24
			const size_t nmeaSentenceSectionLen = delimiterPosition != NULL ? delimiterPosition - parseBufferStart : strlen(parseBufferStart);
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <_ZN9GpsParser21parseDataNmeaSentenceEv+0xe2>
 800122a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800122c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	e003      	b.n	800123a <_ZN9GpsParser21parseDataNmeaSentenceEv+0xea>
 8001232:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001234:	f7ff f82c 	bl	8000290 <strlen>
 8001238:	4603      	mov	r3, r0
 800123a:	623b      	str	r3, [r7, #32]
			char nmeaSentenceSection[nmeaSentenceSectionLen+1];
 800123c:	6a3b      	ldr	r3, [r7, #32]
 800123e:	3301      	adds	r3, #1
 8001240:	3b01      	subs	r3, #1
 8001242:	61fb      	str	r3, [r7, #28]
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	3301      	adds	r3, #1
 8001248:	2200      	movs	r2, #0
 800124a:	461c      	mov	r4, r3
 800124c:	4615      	mov	r5, r2
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	f04f 0300 	mov.w	r3, #0
 8001256:	00eb      	lsls	r3, r5, #3
 8001258:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800125c:	00e2      	lsls	r2, r4, #3
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	3301      	adds	r3, #1
 8001262:	2200      	movs	r2, #0
 8001264:	4698      	mov	r8, r3
 8001266:	4691      	mov	r9, r2
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	f04f 0300 	mov.w	r3, #0
 8001270:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001274:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001278:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	3301      	adds	r3, #1
 8001280:	3307      	adds	r3, #7
 8001282:	08db      	lsrs	r3, r3, #3
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	ebad 0d03 	sub.w	sp, sp, r3
 800128a:	466b      	mov	r3, sp
 800128c:	3300      	adds	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
			nmeaSentenceSection[nmeaSentenceSectionLen] = '\0';
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	6a3b      	ldr	r3, [r7, #32]
 8001294:	4413      	add	r3, r2
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
			memcpy(nmeaSentenceSection, parseBufferStart, nmeaSentenceSectionLen);
 800129a:	6a3a      	ldr	r2, [r7, #32]
 800129c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800129e:	69b8      	ldr	r0, [r7, #24]
 80012a0:	f004 fe97 	bl	8005fd2 <memcpy>
			if (nmeaSentenceSectionNumber == 1 && nmeaSentenceSectionLen >= 8)
 80012a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d12b      	bne.n	8001304 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x1b4>
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	2b07      	cmp	r3, #7
 80012b0:	d928      	bls.n	8001304 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x1b4>
				strncpy(this->timeUtc, nmeaSentenceSection, 2);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	33ff      	adds	r3, #255	; 0xff
 80012b6:	2202      	movs	r2, #2
 80012b8:	69b9      	ldr	r1, [r7, #24]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f004 fdef 	bl	8005e9e <strncpy>
				strncpy((this->timeUtc+2), ":", 2);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	33ff      	adds	r3, #255	; 0xff
 80012c4:	3302      	adds	r3, #2
 80012c6:	494a      	ldr	r1, [pc, #296]	; (80013f0 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x2a0>)
 80012c8:	461a      	mov	r2, r3
 80012ca:	460b      	mov	r3, r1
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	8013      	strh	r3, [r2, #0]
				strncpy((this->timeUtc+3), nmeaSentenceSection+2, 2);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	33ff      	adds	r3, #255	; 0xff
 80012d4:	1cd8      	adds	r0, r3, #3
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	3302      	adds	r3, #2
 80012da:	2202      	movs	r2, #2
 80012dc:	4619      	mov	r1, r3
 80012de:	f004 fdde 	bl	8005e9e <strncpy>
				strncpy((this->timeUtc+5), ":", 2);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	33ff      	adds	r3, #255	; 0xff
 80012e6:	3305      	adds	r3, #5
 80012e8:	4941      	ldr	r1, [pc, #260]	; (80013f0 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x2a0>)
 80012ea:	461a      	mov	r2, r3
 80012ec:	460b      	mov	r3, r1
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	8013      	strh	r3, [r2, #0]
				strncpy((this->timeUtc+6), nmeaSentenceSection+4, 2);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	33ff      	adds	r3, #255	; 0xff
 80012f6:	1d98      	adds	r0, r3, #6
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	3304      	adds	r3, #4
 80012fc:	2202      	movs	r2, #2
 80012fe:	4619      	mov	r1, r3
 8001300:	f004 fdcd 	bl	8005e9e <strncpy>
			if (nmeaSentenceSectionNumber == 2 && nmeaSentenceSectionLen > 0 && nmeaSentenceSectionLen < latitudeAndLongitudeMaxSize)
 8001304:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001308:	2b02      	cmp	r3, #2
 800130a:	d10d      	bne.n	8001328 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x1d8>
 800130c:	6a3b      	ldr	r3, [r7, #32]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00a      	beq.n	8001328 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x1d8>
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	2b13      	cmp	r3, #19
 8001316:	d807      	bhi.n	8001328 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x1d8>
				strncpy(this->latitude, nmeaSentenceSection, nmeaSentenceSectionLen);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800131e:	6a3a      	ldr	r2, [r7, #32]
 8001320:	69b9      	ldr	r1, [r7, #24]
 8001322:	4618      	mov	r0, r3
 8001324:	f004 fdbb 	bl	8005e9e <strncpy>
			if (nmeaSentenceSectionNumber == 3 && nmeaSentenceSectionLen == 1)
 8001328:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800132c:	2b03      	cmp	r3, #3
 800132e:	d107      	bne.n	8001340 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x1f0>
 8001330:	6a3b      	ldr	r3, [r7, #32]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d104      	bne.n	8001340 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x1f0>
				this->latitudeNorS = nmeaSentenceSection[0];
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	781a      	ldrb	r2, [r3, #0]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
			if (nmeaSentenceSectionNumber == 4 && nmeaSentenceSectionLen > 0 && nmeaSentenceSectionLen < latitudeAndLongitudeMaxSize)
 8001340:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001344:	2b04      	cmp	r3, #4
 8001346:	d10d      	bne.n	8001364 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x214>
 8001348:	6a3b      	ldr	r3, [r7, #32]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00a      	beq.n	8001364 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x214>
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	2b13      	cmp	r3, #19
 8001352:	d807      	bhi.n	8001364 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x214>
				strncpy(this->longitude, nmeaSentenceSection, nmeaSentenceSectionLen);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f203 131d 	addw	r3, r3, #285	; 0x11d
 800135a:	6a3a      	ldr	r2, [r7, #32]
 800135c:	69b9      	ldr	r1, [r7, #24]
 800135e:	4618      	mov	r0, r3
 8001360:	f004 fd9d 	bl	8005e9e <strncpy>
			if (nmeaSentenceSectionNumber == 5 && nmeaSentenceSectionLen == 1)
 8001364:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001368:	2b05      	cmp	r3, #5
 800136a:	d107      	bne.n	800137c <_ZN9GpsParser21parseDataNmeaSentenceEv+0x22c>
 800136c:	6a3b      	ldr	r3, [r7, #32]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d104      	bne.n	800137c <_ZN9GpsParser21parseDataNmeaSentenceEv+0x22c>
				this->longitudeEorW = nmeaSentenceSection[0];
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	781a      	ldrb	r2, [r3, #0]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
			if (nmeaSentenceSectionNumber == 6 && nmeaSentenceSectionLen > 0)
 800137c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001380:	2b06      	cmp	r3, #6
 8001382:	d10a      	bne.n	800139a <_ZN9GpsParser21parseDataNmeaSentenceEv+0x24a>
 8001384:	6a3b      	ldr	r3, [r7, #32]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d007      	beq.n	800139a <_ZN9GpsParser21parseDataNmeaSentenceEv+0x24a>
				fixQuality = atoi(nmeaSentenceSection);
 800138a:	69b8      	ldr	r0, [r7, #24]
 800138c:	f003 fda0 	bl	8004ed0 <atoi>
 8001390:	4603      	mov	r3, r0
 8001392:	b2da      	uxtb	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
			if (nmeaSentenceSectionNumber == 7 && nmeaSentenceSectionLen > 0)
 800139a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800139e:	2b07      	cmp	r3, #7
 80013a0:	d10a      	bne.n	80013b8 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x268>
 80013a2:	6a3b      	ldr	r3, [r7, #32]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d007      	beq.n	80013b8 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x268>
				satellitesNumber = atoi(nmeaSentenceSection);
 80013a8:	69b8      	ldr	r0, [r7, #24]
 80013aa:	f003 fd91 	bl	8004ed0 <atoi>
 80013ae:	4603      	mov	r3, r0
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
			if (delimiterPosition == NULL)
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d103      	bne.n	80013c6 <_ZN9GpsParser21parseDataNmeaSentenceEv+0x276>
				break;
 80013be:	46b5      	mov	sp, r6
 80013c0:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 80013c4:	e00b      	b.n	80013de <_ZN9GpsParser21parseDataNmeaSentenceEv+0x28e>
			nmeaSentenceSectionNumber++;
 80013c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013ca:	3301      	adds	r3, #1
 80013cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			parseBufferStart += nmeaSentenceSectionLen + 1;
 80013d0:	6a3b      	ldr	r3, [r7, #32]
 80013d2:	3301      	adds	r3, #1
 80013d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013d6:	4413      	add	r3, r2
 80013d8:	637b      	str	r3, [r7, #52]	; 0x34
 80013da:	46b5      	mov	sp, r6
		}
 80013dc:	e71b      	b.n	8001216 <_ZN9GpsParser21parseDataNmeaSentenceEv+0xc6>
}
 80013de:	bf00      	nop
 80013e0:	373c      	adds	r7, #60	; 0x3c
 80013e2:	46bd      	mov	sp, r7
 80013e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013e8:	08007e70 	.word	0x08007e70
 80013ec:	08007e64 	.word	0x08007e64
 80013f0:	08007e6c 	.word	0x08007e6c

080013f4 <_ZN2UI4initEv>:
#include "ui.h"


void UI::init()
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	6078      	str	r0, [r7, #4]
	DEV_Module_Init();
 80013fc:	f003 f892 	bl	8004524 <_Z15DEV_Module_Initv>
	LCD_2IN_SetBackLight(100);
 8001400:	2064      	movs	r0, #100	; 0x64
 8001402:	f003 fd55 	bl	8004eb0 <_Z20LCD_2IN_SetBackLightt>
	LCD_2IN_Init();
 8001406:	f003 fb9b 	bl	8004b40 <_Z12LCD_2IN_Initv>
	LCD_2IN_Clear(GREEN);
 800140a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800140e:	f003 fd07 	bl	8004e20 <_Z13LCD_2IN_Cleart>

	Paint_NewImage(LCD_2IN_WIDTH,LCD_2IN_HEIGHT, ROTATE_90, WHITE);
 8001412:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001416:	225a      	movs	r2, #90	; 0x5a
 8001418:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800141c:	20f0      	movs	r0, #240	; 0xf0
 800141e:	f003 f89d 	bl	800455c <_Z14Paint_NewImagetttt>

	Paint_SetClearFuntion(LCD_2IN_Clear);
 8001422:	481e      	ldr	r0, [pc, #120]	; (800149c <_ZN2UI4initEv+0xa8>)
 8001424:	f003 f8e6 	bl	80045f4 <_Z21Paint_SetClearFuntionPFvtE>
	Paint_SetDisplayFuntion(LCD_2IN_DrawPaint);
 8001428:	481d      	ldr	r0, [pc, #116]	; (80014a0 <_ZN2UI4initEv+0xac>)
 800142a:	f003 f8f3 	bl	8004614 <_Z23Paint_SetDisplayFuntionPFvtttE>

	Paint_Clear(BLACK);
 800142e:	2000      	movs	r0, #0
 8001430:	f003 f9e4 	bl	80047fc <_Z11Paint_Cleart>
	Paint_SetRotate(ROTATE_270);
 8001434:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8001438:	f003 f8fc 	bl	8004634 <_Z15Paint_SetRotatet>

	Paint_DrawString_EN (5, 10, "time:", &Font20, BLACK, YELLOW);
 800143c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	2300      	movs	r3, #0
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <_ZN2UI4initEv+0xb0>)
 8001448:	4a17      	ldr	r2, [pc, #92]	; (80014a8 <_ZN2UI4initEv+0xb4>)
 800144a:	210a      	movs	r1, #10
 800144c:	2005      	movs	r0, #5
 800144e:	f003 fa93 	bl	8004978 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>
	Paint_DrawString_EN (5, 34, "loc.:", &Font20, BLACK, YELLOW);
 8001452:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	2300      	movs	r3, #0
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <_ZN2UI4initEv+0xb0>)
 800145e:	4a13      	ldr	r2, [pc, #76]	; (80014ac <_ZN2UI4initEv+0xb8>)
 8001460:	2122      	movs	r1, #34	; 0x22
 8001462:	2005      	movs	r0, #5
 8001464:	f003 fa88 	bl	8004978 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>
	Paint_DrawString_EN (5, 58, "sat.:", &Font20, BLACK, YELLOW);
 8001468:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800146c:	9301      	str	r3, [sp, #4]
 800146e:	2300      	movs	r3, #0
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <_ZN2UI4initEv+0xb0>)
 8001474:	4a0e      	ldr	r2, [pc, #56]	; (80014b0 <_ZN2UI4initEv+0xbc>)
 8001476:	213a      	movs	r1, #58	; 0x3a
 8001478:	2005      	movs	r0, #5
 800147a:	f003 fa7d 	bl	8004978 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>
	Paint_DrawString_EN (5, 82, "storage:", &Font20, BLACK, YELLOW);
 800147e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	2300      	movs	r3, #0
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <_ZN2UI4initEv+0xb0>)
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <_ZN2UI4initEv+0xc0>)
 800148c:	2152      	movs	r1, #82	; 0x52
 800148e:	2005      	movs	r0, #5
 8001490:	f003 fa72 	bl	8004978 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	08004e21 	.word	0x08004e21
 80014a0:	08004e81 	.word	0x08004e81
 80014a4:	2000000c 	.word	0x2000000c
 80014a8:	08007e78 	.word	0x08007e78
 80014ac:	08007e80 	.word	0x08007e80
 80014b0:	08007e88 	.word	0x08007e88
 80014b4:	08007e90 	.word	0x08007e90

080014b8 <_ZN2UI7refreshE9GpsParser>:

void UI::refresh(GpsParser gpsParser)
{
 80014b8:	b084      	sub	sp, #16
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b0ce      	sub	sp, #312	; 0x138
 80014be:	af4c      	add	r7, sp, #304	; 0x130
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	f107 0014 	add.w	r0, r7, #20
 80014c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	printGpsData(gpsParser);
 80014ca:	4668      	mov	r0, sp
 80014cc:	f107 0320 	add.w	r3, r7, #32
 80014d0:	f240 1229 	movw	r2, #297	; 0x129
 80014d4:	4619      	mov	r1, r3
 80014d6:	f004 fd7c 	bl	8005fd2 <memcpy>
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 f80b 	bl	80014fc <_ZN2UI12printGpsDataE9GpsParser>
	printStorageData();
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 f8a4 	bl	8001634 <_ZN2UI16printStorageDataEv>
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014f6:	b004      	add	sp, #16
 80014f8:	4770      	bx	lr
	...

080014fc <_ZN2UI12printGpsDataE9GpsParser>:

void UI::printGpsData(GpsParser gpsParser)
{
 80014fc:	b084      	sub	sp, #16
 80014fe:	b580      	push	{r7, lr}
 8001500:	b092      	sub	sp, #72	; 0x48
 8001502:	af02      	add	r7, sp, #8
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800150a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	char outputBuffer[50];

	if (!gpsParser.isContaisValidData()) {
 800150e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fd70 	bl	8000ff8 <_ZN9GpsParser18isContaisValidDataEv>
 8001518:	4603      	mov	r3, r0
 800151a:	f083 0301 	eor.w	r3, r3, #1
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b00      	cmp	r3, #0
 8001522:	d034      	beq.n	800158e <_ZN2UI12printGpsDataE9GpsParser+0x92>
		if (++searchGpsProgressCounter % 2 != 0) {
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	b2da      	uxtb	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	701a      	strb	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b00      	cmp	r3, #0
 800153a:	bf14      	ite	ne
 800153c:	2301      	movne	r3, #1
 800153e:	2300      	moveq	r3, #0
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d017      	beq.n	8001576 <_ZN2UI12printGpsDataE9GpsParser+0x7a>
			Paint_DrawString_EN (260, 10, "GPS", &Font24, BLACK, gpsParser.getIsReceivingData() ? CYAN : RED);
 8001546:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fd7f 	bl	800104e <_ZN9GpsParser18getIsReceivingDataEv>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d002      	beq.n	800155c <_ZN2UI12printGpsDataE9GpsParser+0x60>
 8001556:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800155a:	e001      	b.n	8001560 <_ZN2UI12printGpsDataE9GpsParser+0x64>
 800155c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	2300      	movs	r3, #0
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	4b2f      	ldr	r3, [pc, #188]	; (8001624 <_ZN2UI12printGpsDataE9GpsParser+0x128>)
 8001568:	4a2f      	ldr	r2, [pc, #188]	; (8001628 <_ZN2UI12printGpsDataE9GpsParser+0x12c>)
 800156a:	210a      	movs	r1, #10
 800156c:	f44f 7082 	mov.w	r0, #260	; 0x104
 8001570:	f003 fa02 	bl	8004978 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>
		else
		{
			Paint_DrawString_EN (260, 10, "GPS", &Font24, BLACK, BLACK);
		}

		return;
 8001574:	e050      	b.n	8001618 <_ZN2UI12printGpsDataE9GpsParser+0x11c>
			Paint_DrawString_EN (260, 10, "GPS", &Font24, BLACK, BLACK);
 8001576:	2300      	movs	r3, #0
 8001578:	9301      	str	r3, [sp, #4]
 800157a:	2300      	movs	r3, #0
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	4b29      	ldr	r3, [pc, #164]	; (8001624 <_ZN2UI12printGpsDataE9GpsParser+0x128>)
 8001580:	4a29      	ldr	r2, [pc, #164]	; (8001628 <_ZN2UI12printGpsDataE9GpsParser+0x12c>)
 8001582:	210a      	movs	r1, #10
 8001584:	f44f 7082 	mov.w	r0, #260	; 0x104
 8001588:	f003 f9f6 	bl	8004978 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>
 800158c:	e044      	b.n	8001618 <_ZN2UI12printGpsDataE9GpsParser+0x11c>
	}

	//TODO update screen only when there is changes
	Paint_DrawString_EN (260, 10, "GPS", &Font24, BLACK, GREEN);
 800158e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	2300      	movs	r3, #0
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	4b22      	ldr	r3, [pc, #136]	; (8001624 <_ZN2UI12printGpsDataE9GpsParser+0x128>)
 800159a:	4a23      	ldr	r2, [pc, #140]	; (8001628 <_ZN2UI12printGpsDataE9GpsParser+0x12c>)
 800159c:	210a      	movs	r1, #10
 800159e:	f44f 7082 	mov.w	r0, #260	; 0x104
 80015a2:	f003 f9e9 	bl	8004978 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>

	Paint_DrawString_EN (80, 10, gpsParser.getTimeUtc(), &Font20, BLACK, YELLOW);
 80015a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fd36 	bl	800101c <_ZN9GpsParser10getTimeUtcEv>
 80015b0:	4602      	mov	r2, r0
 80015b2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80015b6:	9301      	str	r3, [sp, #4]
 80015b8:	2300      	movs	r3, #0
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <_ZN2UI12printGpsDataE9GpsParser+0x130>)
 80015be:	210a      	movs	r1, #10
 80015c0:	2050      	movs	r0, #80	; 0x50
 80015c2:	f003 f9d9 	bl	8004978 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>

	Paint_DrawString_EN (80, 34, gpsParser.getLocation(), &Font20, BLACK, YELLOW);
 80015c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fd4c 	bl	8001068 <_ZN9GpsParser11getLocationEv>
 80015d0:	4602      	mov	r2, r0
 80015d2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	2300      	movs	r3, #0
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <_ZN2UI12printGpsDataE9GpsParser+0x130>)
 80015de:	2122      	movs	r1, #34	; 0x22
 80015e0:	2050      	movs	r0, #80	; 0x50
 80015e2:	f003 f9c9 	bl	8004978 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>

	sprintf(outputBuffer, "%d", gpsParser.getSatellitesNumber());
 80015e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fd22 	bl	8001034 <_ZN9GpsParser19getSatellitesNumberEv>
 80015f0:	4603      	mov	r3, r0
 80015f2:	461a      	mov	r2, r3
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	490d      	ldr	r1, [pc, #52]	; (8001630 <_ZN2UI12printGpsDataE9GpsParser+0x134>)
 80015fa:	4618      	mov	r0, r3
 80015fc:	f004 fb42 	bl	8005c84 <siprintf>
	Paint_DrawString_EN (80, 58, outputBuffer, &Font20, BLACK, YELLOW);
 8001600:	f107 020c 	add.w	r2, r7, #12
 8001604:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001608:	9301      	str	r3, [sp, #4]
 800160a:	2300      	movs	r3, #0
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	4b07      	ldr	r3, [pc, #28]	; (800162c <_ZN2UI12printGpsDataE9GpsParser+0x130>)
 8001610:	213a      	movs	r1, #58	; 0x3a
 8001612:	2050      	movs	r0, #80	; 0x50
 8001614:	f003 f9b0 	bl	8004978 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>
}
 8001618:	3740      	adds	r7, #64	; 0x40
 800161a:	46bd      	mov	sp, r7
 800161c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001620:	b004      	add	sp, #16
 8001622:	4770      	bx	lr
 8001624:	20000014 	.word	0x20000014
 8001628:	08007e9c 	.word	0x08007e9c
 800162c:	2000000c 	.word	0x2000000c
 8001630:	08007ea0 	.word	0x08007ea0

08001634 <_ZN2UI16printStorageDataEv>:

void UI::printStorageData()
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b092      	sub	sp, #72	; 0x48
 8001638:	af02      	add	r7, sp, #8
 800163a:	6078      	str	r0, [r7, #4]
	char outputBuffer[50];

	Paint_DrawString_EN (120, 82, "10GB/1GB", &Font20, BLACK, YELLOW);
 800163c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001640:	9301      	str	r3, [sp, #4]
 8001642:	2300      	movs	r3, #0
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	4b05      	ldr	r3, [pc, #20]	; (800165c <_ZN2UI16printStorageDataEv+0x28>)
 8001648:	4a05      	ldr	r2, [pc, #20]	; (8001660 <_ZN2UI16printStorageDataEv+0x2c>)
 800164a:	2152      	movs	r1, #82	; 0x52
 800164c:	2078      	movs	r0, #120	; 0x78
 800164e:	f003 f993 	bl	8004978 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>
}
 8001652:	bf00      	nop
 8001654:	3740      	adds	r7, #64	; 0x40
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000000c 	.word	0x2000000c
 8001660:	08007ea4 	.word	0x08007ea4

08001664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001666:	b08f      	sub	sp, #60	; 0x3c
 8001668:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800166a:	f000 fbe7 	bl	8001e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800166e:	f000 f81d 	bl	80016ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001672:	f000 f93f 	bl	80018f4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001676:	f000 f913 	bl	80018a0 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800167a:	f000 f881 	bl	8001780 <MX_SPI1_Init>
  MX_TIM3_Init();
 800167e:	f000 f8b5 	bl	80017ec <MX_TIM3_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  applicationMain(huart1);
 8001682:	4e09      	ldr	r6, [pc, #36]	; (80016a8 <main+0x44>)
 8001684:	466d      	mov	r5, sp
 8001686:	f106 0410 	add.w	r4, r6, #16
 800168a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800168c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800168e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001696:	e894 0003 	ldmia.w	r4, {r0, r1}
 800169a:	e885 0003 	stmia.w	r5, {r0, r1}
 800169e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80016a2:	f7ff fc55 	bl	8000f50 <applicationMain>
//	Paint_DrawString_EN (5, 34, "loc.: ", &Font20, BLACK, YELLOW);
//	Paint_DrawString_EN (5, 58, "sat.: ", &Font20, BLACK, YELLOW);
//	Paint_DrawString_EN (5, 82, "storage: 10GB/1GB", &Font20, BLACK, YELLOW);


  while (1)
 80016a6:	e7fe      	b.n	80016a6 <main+0x42>
 80016a8:	20000320 	.word	0x20000320

080016ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b094      	sub	sp, #80	; 0x50
 80016b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b2:	f107 0320 	add.w	r3, r7, #32
 80016b6:	2230      	movs	r2, #48	; 0x30
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f004 fbda 	bl	8005e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	4b28      	ldr	r3, [pc, #160]	; (8001778 <SystemClock_Config+0xcc>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	4a27      	ldr	r2, [pc, #156]	; (8001778 <SystemClock_Config+0xcc>)
 80016da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016de:	6413      	str	r3, [r2, #64]	; 0x40
 80016e0:	4b25      	ldr	r3, [pc, #148]	; (8001778 <SystemClock_Config+0xcc>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ec:	2300      	movs	r3, #0
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	4b22      	ldr	r3, [pc, #136]	; (800177c <SystemClock_Config+0xd0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a21      	ldr	r2, [pc, #132]	; (800177c <SystemClock_Config+0xd0>)
 80016f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	4b1f      	ldr	r3, [pc, #124]	; (800177c <SystemClock_Config+0xd0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001708:	2301      	movs	r3, #1
 800170a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800170c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001712:	2302      	movs	r3, #2
 8001714:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001716:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800171a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800171c:	2304      	movs	r3, #4
 800171e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001720:	23a8      	movs	r3, #168	; 0xa8
 8001722:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001724:	2302      	movs	r3, #2
 8001726:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001728:	2304      	movs	r3, #4
 800172a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800172c:	f107 0320 	add.w	r3, r7, #32
 8001730:	4618      	mov	r0, r3
 8001732:	f000 feb5 	bl	80024a0 <HAL_RCC_OscConfig>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800173c:	f000 f938 	bl	80019b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001740:	230f      	movs	r3, #15
 8001742:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001744:	2302      	movs	r3, #2
 8001746:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800174c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001750:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001756:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	2105      	movs	r1, #5
 800175e:	4618      	mov	r0, r3
 8001760:	f001 f916 	bl	8002990 <HAL_RCC_ClockConfig>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800176a:	f000 f921 	bl	80019b0 <Error_Handler>
  }
}
 800176e:	bf00      	nop
 8001770:	3750      	adds	r7, #80	; 0x50
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800
 800177c:	40007000 	.word	0x40007000

08001780 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001784:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <MX_SPI1_Init+0x64>)
 8001786:	4a18      	ldr	r2, [pc, #96]	; (80017e8 <MX_SPI1_Init+0x68>)
 8001788:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <MX_SPI1_Init+0x64>)
 800178c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001790:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <MX_SPI1_Init+0x64>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <MX_SPI1_Init+0x64>)
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017b4:	2208      	movs	r2, #8
 80017b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017b8:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017c4:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017cc:	220a      	movs	r2, #10
 80017ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017d0:	4804      	ldr	r0, [pc, #16]	; (80017e4 <MX_SPI1_Init+0x64>)
 80017d2:	f001 fafd 	bl	8002dd0 <HAL_SPI_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017dc:	f000 f8e8 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000280 	.word	0x20000280
 80017e8:	40013000 	.word	0x40013000

080017ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f2:	f107 0320 	add.w	r3, r7, #32
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]
 800180a:	615a      	str	r2, [r3, #20]
 800180c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800180e:	4b22      	ldr	r3, [pc, #136]	; (8001898 <MX_TIM3_Init+0xac>)
 8001810:	4a22      	ldr	r2, [pc, #136]	; (800189c <MX_TIM3_Init+0xb0>)
 8001812:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001814:	4b20      	ldr	r3, [pc, #128]	; (8001898 <MX_TIM3_Init+0xac>)
 8001816:	2253      	movs	r2, #83	; 0x53
 8001818:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181a:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <MX_TIM3_Init+0xac>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001820:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <MX_TIM3_Init+0xac>)
 8001822:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001826:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001828:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <MX_TIM3_Init+0xac>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <MX_TIM3_Init+0xac>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001834:	4818      	ldr	r0, [pc, #96]	; (8001898 <MX_TIM3_Init+0xac>)
 8001836:	f001 fd73 	bl	8003320 <HAL_TIM_PWM_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001840:	f000 f8b6 	bl	80019b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800184c:	f107 0320 	add.w	r3, r7, #32
 8001850:	4619      	mov	r1, r3
 8001852:	4811      	ldr	r0, [pc, #68]	; (8001898 <MX_TIM3_Init+0xac>)
 8001854:	f002 f9c0 	bl	8003bd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800185e:	f000 f8a7 	bl	80019b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001862:	2360      	movs	r3, #96	; 0x60
 8001864:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	2204      	movs	r2, #4
 8001876:	4619      	mov	r1, r3
 8001878:	4807      	ldr	r0, [pc, #28]	; (8001898 <MX_TIM3_Init+0xac>)
 800187a:	f001 fe69 	bl	8003550 <HAL_TIM_PWM_ConfigChannel>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001884:	f000 f894 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001888:	4803      	ldr	r0, [pc, #12]	; (8001898 <MX_TIM3_Init+0xac>)
 800188a:	f000 f929 	bl	8001ae0 <HAL_TIM_MspPostInit>

}
 800188e:	bf00      	nop
 8001890:	3728      	adds	r7, #40	; 0x28
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200002d8 	.word	0x200002d8
 800189c:	40000400 	.word	0x40000400

080018a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <MX_USART1_UART_Init+0x50>)
 80018a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018c6:	220c      	movs	r2, #12
 80018c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018d8:	f002 f9fa 	bl	8003cd0 <HAL_UART_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018e2:	f000 f865 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000320 	.word	0x20000320
 80018f0:	40011000 	.word	0x40011000

080018f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	; 0x28
 80018f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]
 8001908:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	4b26      	ldr	r3, [pc, #152]	; (80019a8 <MX_GPIO_Init+0xb4>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a25      	ldr	r2, [pc, #148]	; (80019a8 <MX_GPIO_Init+0xb4>)
 8001914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <MX_GPIO_Init+0xb4>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <MX_GPIO_Init+0xb4>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a1e      	ldr	r2, [pc, #120]	; (80019a8 <MX_GPIO_Init+0xb4>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <MX_GPIO_Init+0xb4>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <MX_GPIO_Init+0xb4>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a17      	ldr	r2, [pc, #92]	; (80019a8 <MX_GPIO_Init+0xb4>)
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <MX_GPIO_Init+0xb4>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_GPIO_Init+0xb4>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a10      	ldr	r2, [pc, #64]	; (80019a8 <MX_GPIO_Init+0xb4>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <MX_GPIO_Init+0xb4>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_SET);
 800197a:	2201      	movs	r2, #1
 800197c:	21e0      	movs	r1, #224	; 0xe0
 800197e:	480b      	ldr	r0, [pc, #44]	; (80019ac <MX_GPIO_Init+0xb8>)
 8001980:	f000 fd74 	bl	800246c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 8001984:	23e0      	movs	r3, #224	; 0xe0
 8001986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001988:	2301      	movs	r3, #1
 800198a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4619      	mov	r1, r3
 800199a:	4804      	ldr	r0, [pc, #16]	; (80019ac <MX_GPIO_Init+0xb8>)
 800199c:	f000 fbca 	bl	8002134 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019a0:	bf00      	nop
 80019a2:	3728      	adds	r7, #40	; 0x28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020400 	.word	0x40020400

080019b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b4:	b672      	cpsid	i
}
 80019b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <Error_Handler+0x8>
	...

080019bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <HAL_MspInit+0x4c>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	4a0f      	ldr	r2, [pc, #60]	; (8001a08 <HAL_MspInit+0x4c>)
 80019cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d0:	6453      	str	r3, [r2, #68]	; 0x44
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <HAL_MspInit+0x4c>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	603b      	str	r3, [r7, #0]
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_MspInit+0x4c>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	4a08      	ldr	r2, [pc, #32]	; (8001a08 <HAL_MspInit+0x4c>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ec:	6413      	str	r3, [r2, #64]	; 0x40
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_MspInit+0x4c>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800

08001a0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a19      	ldr	r2, [pc, #100]	; (8001a90 <HAL_SPI_MspInit+0x84>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d12b      	bne.n	8001a86 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <HAL_SPI_MspInit+0x88>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	4a17      	ldr	r2, [pc, #92]	; (8001a94 <HAL_SPI_MspInit+0x88>)
 8001a38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <HAL_SPI_MspInit+0x88>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <HAL_SPI_MspInit+0x88>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a10      	ldr	r2, [pc, #64]	; (8001a94 <HAL_SPI_MspInit+0x88>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_SPI_MspInit+0x88>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a66:	23e0      	movs	r3, #224	; 0xe0
 8001a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a72:	2303      	movs	r3, #3
 8001a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a76:	2305      	movs	r3, #5
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <HAL_SPI_MspInit+0x8c>)
 8001a82:	f000 fb57 	bl	8002134 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a86:	bf00      	nop
 8001a88:	3728      	adds	r7, #40	; 0x28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40013000 	.word	0x40013000
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020000 	.word	0x40020000

08001a9c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d10d      	bne.n	8001aca <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_TIM_PWM_MspInit+0x40>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a09      	ldr	r2, [pc, #36]	; (8001adc <HAL_TIM_PWM_MspInit+0x40>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b07      	ldr	r3, [pc, #28]	; (8001adc <HAL_TIM_PWM_MspInit+0x40>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001aca:	bf00      	nop
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40000400 	.word	0x40000400
 8001adc:	40023800 	.word	0x40023800

08001ae0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <HAL_TIM_MspPostInit+0x68>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d11d      	bne.n	8001b3e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <HAL_TIM_MspPostInit+0x6c>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a10      	ldr	r2, [pc, #64]	; (8001b4c <HAL_TIM_MspPostInit+0x6c>)
 8001b0c:	f043 0304 	orr.w	r3, r3, #4
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <HAL_TIM_MspPostInit+0x6c>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b32:	f107 030c 	add.w	r3, r7, #12
 8001b36:	4619      	mov	r1, r3
 8001b38:	4805      	ldr	r0, [pc, #20]	; (8001b50 <HAL_TIM_MspPostInit+0x70>)
 8001b3a:	f000 fafb 	bl	8002134 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b3e:	bf00      	nop
 8001b40:	3720      	adds	r7, #32
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40000400 	.word	0x40000400
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020800 	.word	0x40020800

08001b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	; 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a19      	ldr	r2, [pc, #100]	; (8001bd8 <HAL_UART_MspInit+0x84>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d12c      	bne.n	8001bd0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <HAL_UART_MspInit+0x88>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	4a17      	ldr	r2, [pc, #92]	; (8001bdc <HAL_UART_MspInit+0x88>)
 8001b80:	f043 0310 	orr.w	r3, r3, #16
 8001b84:	6453      	str	r3, [r2, #68]	; 0x44
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_UART_MspInit+0x88>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <HAL_UART_MspInit+0x88>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a10      	ldr	r2, [pc, #64]	; (8001bdc <HAL_UART_MspInit+0x88>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <HAL_UART_MspInit+0x88>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8001bae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bc0:	2307      	movs	r3, #7
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4805      	ldr	r0, [pc, #20]	; (8001be0 <HAL_UART_MspInit+0x8c>)
 8001bcc:	f000 fab2 	bl	8002134 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bd0:	bf00      	nop
 8001bd2:	3728      	adds	r7, #40	; 0x28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40011000 	.word	0x40011000
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40020000 	.word	0x40020000

08001be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001be8:	e7fe      	b.n	8001be8 <NMI_Handler+0x4>

08001bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bee:	e7fe      	b.n	8001bee <HardFault_Handler+0x4>

08001bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <MemManage_Handler+0x4>

08001bf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfa:	e7fe      	b.n	8001bfa <BusFault_Handler+0x4>

08001bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <UsageFault_Handler+0x4>

08001c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c30:	f000 f956 	bl	8001ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return 1;
 8001c3c:	2301      	movs	r3, #1
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <_kill>:

int _kill(int pid, int sig)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c52:	f004 f991 	bl	8005f78 <__errno>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2216      	movs	r2, #22
 8001c5a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <_exit>:

void _exit (int status)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ffe7 	bl	8001c48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c7a:	e7fe      	b.n	8001c7a <_exit+0x12>

08001c7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	e00a      	b.n	8001ca4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c8e:	f3af 8000 	nop.w
 8001c92:	4601      	mov	r1, r0
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	60ba      	str	r2, [r7, #8]
 8001c9a:	b2ca      	uxtb	r2, r1
 8001c9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	dbf0      	blt.n	8001c8e <_read+0x12>
  }

  return len;
 8001cac:	687b      	ldr	r3, [r7, #4]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	e009      	b.n	8001cdc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	60ba      	str	r2, [r7, #8]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	dbf1      	blt.n	8001cc8 <_write+0x12>
  }
  return len;
 8001ce4:	687b      	ldr	r3, [r7, #4]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <_close>:

int _close(int file)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d16:	605a      	str	r2, [r3, #4]
  return 0;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <_isatty>:

int _isatty(int file)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d2e:	2301      	movs	r3, #1
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d60:	4a14      	ldr	r2, [pc, #80]	; (8001db4 <_sbrk+0x5c>)
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <_sbrk+0x60>)
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d6c:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <_sbrk+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d102      	bne.n	8001d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <_sbrk+0x64>)
 8001d76:	4a12      	ldr	r2, [pc, #72]	; (8001dc0 <_sbrk+0x68>)
 8001d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <_sbrk+0x64>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d207      	bcs.n	8001d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d88:	f004 f8f6 	bl	8005f78 <__errno>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	220c      	movs	r2, #12
 8001d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d96:	e009      	b.n	8001dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d9e:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <_sbrk+0x64>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	4a05      	ldr	r2, [pc, #20]	; (8001dbc <_sbrk+0x64>)
 8001da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001daa:	68fb      	ldr	r3, [r7, #12]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20020000 	.word	0x20020000
 8001db8:	00000400 	.word	0x00000400
 8001dbc:	20000368 	.word	0x20000368
 8001dc0:	200004e0 	.word	0x200004e0

08001dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <SystemInit+0x20>)
 8001dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dce:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <SystemInit+0x20>)
 8001dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001dec:	f7ff ffea 	bl	8001dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001df0:	480c      	ldr	r0, [pc, #48]	; (8001e24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001df2:	490d      	ldr	r1, [pc, #52]	; (8001e28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001df4:	4a0d      	ldr	r2, [pc, #52]	; (8001e2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df8:	e002      	b.n	8001e00 <LoopCopyDataInit>

08001dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfe:	3304      	adds	r3, #4

08001e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e04:	d3f9      	bcc.n	8001dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e08:	4c0a      	ldr	r4, [pc, #40]	; (8001e34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e0c:	e001      	b.n	8001e12 <LoopFillZerobss>

08001e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e10:	3204      	adds	r2, #4

08001e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e14:	d3fb      	bcc.n	8001e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e16:	f004 f8b5 	bl	8005f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e1a:	f7ff fc23 	bl	8001664 <main>
  bx  lr    
 8001e1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e28:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001e2c:	0800aecc 	.word	0x0800aecc
  ldr r2, =_sbss
 8001e30:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001e34:	200004dc 	.word	0x200004dc

08001e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <ADC_IRQHandler>
	...

08001e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e40:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <HAL_Init+0x40>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0d      	ldr	r2, [pc, #52]	; (8001e7c <HAL_Init+0x40>)
 8001e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_Init+0x40>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <HAL_Init+0x40>)
 8001e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_Init+0x40>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a07      	ldr	r2, [pc, #28]	; (8001e7c <HAL_Init+0x40>)
 8001e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e64:	2003      	movs	r0, #3
 8001e66:	f000 f931 	bl	80020cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e6a:	200f      	movs	r0, #15
 8001e6c:	f000 f808 	bl	8001e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e70:	f7ff fda4 	bl	80019bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023c00 	.word	0x40023c00

08001e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_InitTick+0x54>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_InitTick+0x58>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	4619      	mov	r1, r3
 8001e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 f93b 	bl	800211a <HAL_SYSTICK_Config>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e00e      	b.n	8001ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b0f      	cmp	r3, #15
 8001eb2:	d80a      	bhi.n	8001eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ebc:	f000 f911 	bl	80020e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ec0:	4a06      	ldr	r2, [pc, #24]	; (8001edc <HAL_InitTick+0x5c>)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e000      	b.n	8001ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	20000008 	.word	0x20000008
 8001edc:	20000004 	.word	0x20000004

08001ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_IncTick+0x20>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_IncTick+0x24>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <HAL_IncTick+0x24>)
 8001ef2:	6013      	str	r3, [r2, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	20000008 	.word	0x20000008
 8001f04:	2000036c 	.word	0x2000036c

08001f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <HAL_GetTick+0x14>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	2000036c 	.word	0x2000036c

08001f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f28:	f7ff ffee 	bl	8001f08 <HAL_GetTick>
 8001f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f38:	d005      	beq.n	8001f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_Delay+0x44>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4413      	add	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f46:	bf00      	nop
 8001f48:	f7ff ffde 	bl	8001f08 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d8f7      	bhi.n	8001f48 <HAL_Delay+0x28>
  {
  }
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000008 	.word	0x20000008

08001f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f84:	4013      	ands	r3, r2
 8001f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9a:	4a04      	ldr	r2, [pc, #16]	; (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	60d3      	str	r3, [r2, #12]
}
 8001fa0:	bf00      	nop
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb4:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	f003 0307 	and.w	r3, r3, #7
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	6039      	str	r1, [r7, #0]
 8001fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	db0a      	blt.n	8001ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	490c      	ldr	r1, [pc, #48]	; (8002018 <__NVIC_SetPriority+0x4c>)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	0112      	lsls	r2, r2, #4
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	440b      	add	r3, r1
 8001ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff4:	e00a      	b.n	800200c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4908      	ldr	r1, [pc, #32]	; (800201c <__NVIC_SetPriority+0x50>)
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	3b04      	subs	r3, #4
 8002004:	0112      	lsls	r2, r2, #4
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	440b      	add	r3, r1
 800200a:	761a      	strb	r2, [r3, #24]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000e100 	.word	0xe000e100
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002020:	b480      	push	{r7}
 8002022:	b089      	sub	sp, #36	; 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f1c3 0307 	rsb	r3, r3, #7
 800203a:	2b04      	cmp	r3, #4
 800203c:	bf28      	it	cs
 800203e:	2304      	movcs	r3, #4
 8002040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3304      	adds	r3, #4
 8002046:	2b06      	cmp	r3, #6
 8002048:	d902      	bls.n	8002050 <NVIC_EncodePriority+0x30>
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3b03      	subs	r3, #3
 800204e:	e000      	b.n	8002052 <NVIC_EncodePriority+0x32>
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43da      	mvns	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	401a      	ands	r2, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002068:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	43d9      	mvns	r1, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	4313      	orrs	r3, r2
         );
}
 800207a:	4618      	mov	r0, r3
 800207c:	3724      	adds	r7, #36	; 0x24
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3b01      	subs	r3, #1
 8002094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002098:	d301      	bcc.n	800209e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209a:	2301      	movs	r3, #1
 800209c:	e00f      	b.n	80020be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <SysTick_Config+0x40>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020a6:	210f      	movs	r1, #15
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020ac:	f7ff ff8e 	bl	8001fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <SysTick_Config+0x40>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <SysTick_Config+0x40>)
 80020b8:	2207      	movs	r2, #7
 80020ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	e000e010 	.word	0xe000e010

080020cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ff47 	bl	8001f68 <__NVIC_SetPriorityGrouping>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f4:	f7ff ff5c 	bl	8001fb0 <__NVIC_GetPriorityGrouping>
 80020f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68b9      	ldr	r1, [r7, #8]
 80020fe:	6978      	ldr	r0, [r7, #20]
 8002100:	f7ff ff8e 	bl	8002020 <NVIC_EncodePriority>
 8002104:	4602      	mov	r2, r0
 8002106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff5d 	bl	8001fcc <__NVIC_SetPriority>
}
 8002112:	bf00      	nop
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ffb0 	bl	8002088 <SysTick_Config>
 8002128:	4603      	mov	r3, r0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	; 0x24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002146:	2300      	movs	r3, #0
 8002148:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
 800214e:	e16b      	b.n	8002428 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002150:	2201      	movs	r2, #1
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	429a      	cmp	r2, r3
 800216a:	f040 815a 	bne.w	8002422 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	2b01      	cmp	r3, #1
 8002178:	d005      	beq.n	8002186 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002182:	2b02      	cmp	r3, #2
 8002184:	d130      	bne.n	80021e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	2203      	movs	r2, #3
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021bc:	2201      	movs	r2, #1
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 0201 	and.w	r2, r3, #1
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d017      	beq.n	8002224 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	2203      	movs	r2, #3
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 0303 	and.w	r3, r3, #3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d123      	bne.n	8002278 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	08da      	lsrs	r2, r3, #3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3208      	adds	r2, #8
 8002238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800223c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	220f      	movs	r2, #15
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	691a      	ldr	r2, [r3, #16]
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	08da      	lsrs	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3208      	adds	r2, #8
 8002272:	69b9      	ldr	r1, [r7, #24]
 8002274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	2203      	movs	r2, #3
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0203 	and.w	r2, r3, #3
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 80b4 	beq.w	8002422 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	4b60      	ldr	r3, [pc, #384]	; (8002440 <HAL_GPIO_Init+0x30c>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	4a5f      	ldr	r2, [pc, #380]	; (8002440 <HAL_GPIO_Init+0x30c>)
 80022c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ca:	4b5d      	ldr	r3, [pc, #372]	; (8002440 <HAL_GPIO_Init+0x30c>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022d6:	4a5b      	ldr	r2, [pc, #364]	; (8002444 <HAL_GPIO_Init+0x310>)
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	089b      	lsrs	r3, r3, #2
 80022dc:	3302      	adds	r3, #2
 80022de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	220f      	movs	r2, #15
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a52      	ldr	r2, [pc, #328]	; (8002448 <HAL_GPIO_Init+0x314>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d02b      	beq.n	800235a <HAL_GPIO_Init+0x226>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a51      	ldr	r2, [pc, #324]	; (800244c <HAL_GPIO_Init+0x318>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d025      	beq.n	8002356 <HAL_GPIO_Init+0x222>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a50      	ldr	r2, [pc, #320]	; (8002450 <HAL_GPIO_Init+0x31c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d01f      	beq.n	8002352 <HAL_GPIO_Init+0x21e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4f      	ldr	r2, [pc, #316]	; (8002454 <HAL_GPIO_Init+0x320>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d019      	beq.n	800234e <HAL_GPIO_Init+0x21a>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a4e      	ldr	r2, [pc, #312]	; (8002458 <HAL_GPIO_Init+0x324>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d013      	beq.n	800234a <HAL_GPIO_Init+0x216>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a4d      	ldr	r2, [pc, #308]	; (800245c <HAL_GPIO_Init+0x328>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00d      	beq.n	8002346 <HAL_GPIO_Init+0x212>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a4c      	ldr	r2, [pc, #304]	; (8002460 <HAL_GPIO_Init+0x32c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d007      	beq.n	8002342 <HAL_GPIO_Init+0x20e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a4b      	ldr	r2, [pc, #300]	; (8002464 <HAL_GPIO_Init+0x330>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d101      	bne.n	800233e <HAL_GPIO_Init+0x20a>
 800233a:	2307      	movs	r3, #7
 800233c:	e00e      	b.n	800235c <HAL_GPIO_Init+0x228>
 800233e:	2308      	movs	r3, #8
 8002340:	e00c      	b.n	800235c <HAL_GPIO_Init+0x228>
 8002342:	2306      	movs	r3, #6
 8002344:	e00a      	b.n	800235c <HAL_GPIO_Init+0x228>
 8002346:	2305      	movs	r3, #5
 8002348:	e008      	b.n	800235c <HAL_GPIO_Init+0x228>
 800234a:	2304      	movs	r3, #4
 800234c:	e006      	b.n	800235c <HAL_GPIO_Init+0x228>
 800234e:	2303      	movs	r3, #3
 8002350:	e004      	b.n	800235c <HAL_GPIO_Init+0x228>
 8002352:	2302      	movs	r3, #2
 8002354:	e002      	b.n	800235c <HAL_GPIO_Init+0x228>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <HAL_GPIO_Init+0x228>
 800235a:	2300      	movs	r3, #0
 800235c:	69fa      	ldr	r2, [r7, #28]
 800235e:	f002 0203 	and.w	r2, r2, #3
 8002362:	0092      	lsls	r2, r2, #2
 8002364:	4093      	lsls	r3, r2
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800236c:	4935      	ldr	r1, [pc, #212]	; (8002444 <HAL_GPIO_Init+0x310>)
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	089b      	lsrs	r3, r3, #2
 8002372:	3302      	adds	r3, #2
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800237a:	4b3b      	ldr	r3, [pc, #236]	; (8002468 <HAL_GPIO_Init+0x334>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800239e:	4a32      	ldr	r2, [pc, #200]	; (8002468 <HAL_GPIO_Init+0x334>)
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023a4:	4b30      	ldr	r3, [pc, #192]	; (8002468 <HAL_GPIO_Init+0x334>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023c8:	4a27      	ldr	r2, [pc, #156]	; (8002468 <HAL_GPIO_Init+0x334>)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023ce:	4b26      	ldr	r3, [pc, #152]	; (8002468 <HAL_GPIO_Init+0x334>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023f2:	4a1d      	ldr	r2, [pc, #116]	; (8002468 <HAL_GPIO_Init+0x334>)
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023f8:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <HAL_GPIO_Init+0x334>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800241c:	4a12      	ldr	r2, [pc, #72]	; (8002468 <HAL_GPIO_Init+0x334>)
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3301      	adds	r3, #1
 8002426:	61fb      	str	r3, [r7, #28]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	2b0f      	cmp	r3, #15
 800242c:	f67f ae90 	bls.w	8002150 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	3724      	adds	r7, #36	; 0x24
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800
 8002444:	40013800 	.word	0x40013800
 8002448:	40020000 	.word	0x40020000
 800244c:	40020400 	.word	0x40020400
 8002450:	40020800 	.word	0x40020800
 8002454:	40020c00 	.word	0x40020c00
 8002458:	40021000 	.word	0x40021000
 800245c:	40021400 	.word	0x40021400
 8002460:	40021800 	.word	0x40021800
 8002464:	40021c00 	.word	0x40021c00
 8002468:	40013c00 	.word	0x40013c00

0800246c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	807b      	strh	r3, [r7, #2]
 8002478:	4613      	mov	r3, r2
 800247a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800247c:	787b      	ldrb	r3, [r7, #1]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002482:	887a      	ldrh	r2, [r7, #2]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002488:	e003      	b.n	8002492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800248a:	887b      	ldrh	r3, [r7, #2]
 800248c:	041a      	lsls	r2, r3, #16
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	619a      	str	r2, [r3, #24]
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e267      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d075      	beq.n	80025aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024be:	4b88      	ldr	r3, [pc, #544]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d00c      	beq.n	80024e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ca:	4b85      	ldr	r3, [pc, #532]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d112      	bne.n	80024fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d6:	4b82      	ldr	r3, [pc, #520]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024e2:	d10b      	bne.n	80024fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e4:	4b7e      	ldr	r3, [pc, #504]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d05b      	beq.n	80025a8 <HAL_RCC_OscConfig+0x108>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d157      	bne.n	80025a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e242      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002504:	d106      	bne.n	8002514 <HAL_RCC_OscConfig+0x74>
 8002506:	4b76      	ldr	r3, [pc, #472]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a75      	ldr	r2, [pc, #468]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 800250c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	e01d      	b.n	8002550 <HAL_RCC_OscConfig+0xb0>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800251c:	d10c      	bne.n	8002538 <HAL_RCC_OscConfig+0x98>
 800251e:	4b70      	ldr	r3, [pc, #448]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a6f      	ldr	r2, [pc, #444]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 8002524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	4b6d      	ldr	r3, [pc, #436]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a6c      	ldr	r2, [pc, #432]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 8002530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	e00b      	b.n	8002550 <HAL_RCC_OscConfig+0xb0>
 8002538:	4b69      	ldr	r3, [pc, #420]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a68      	ldr	r2, [pc, #416]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 800253e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	4b66      	ldr	r3, [pc, #408]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a65      	ldr	r2, [pc, #404]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 800254a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800254e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d013      	beq.n	8002580 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002558:	f7ff fcd6 	bl	8001f08 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002560:	f7ff fcd2 	bl	8001f08 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b64      	cmp	r3, #100	; 0x64
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e207      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	4b5b      	ldr	r3, [pc, #364]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0xc0>
 800257e:	e014      	b.n	80025aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7ff fcc2 	bl	8001f08 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002588:	f7ff fcbe 	bl	8001f08 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	; 0x64
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e1f3      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259a:	4b51      	ldr	r3, [pc, #324]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0xe8>
 80025a6:	e000      	b.n	80025aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d063      	beq.n	800267e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025b6:	4b4a      	ldr	r3, [pc, #296]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00b      	beq.n	80025da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c2:	4b47      	ldr	r3, [pc, #284]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d11c      	bne.n	8002608 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ce:	4b44      	ldr	r3, [pc, #272]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d116      	bne.n	8002608 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025da:	4b41      	ldr	r3, [pc, #260]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d005      	beq.n	80025f2 <HAL_RCC_OscConfig+0x152>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d001      	beq.n	80025f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e1c7      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f2:	4b3b      	ldr	r3, [pc, #236]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4937      	ldr	r1, [pc, #220]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002606:	e03a      	b.n	800267e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d020      	beq.n	8002652 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002610:	4b34      	ldr	r3, [pc, #208]	; (80026e4 <HAL_RCC_OscConfig+0x244>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002616:	f7ff fc77 	bl	8001f08 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800261e:	f7ff fc73 	bl	8001f08 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e1a8      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002630:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263c:	4b28      	ldr	r3, [pc, #160]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4925      	ldr	r1, [pc, #148]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 800264c:	4313      	orrs	r3, r2
 800264e:	600b      	str	r3, [r1, #0]
 8002650:	e015      	b.n	800267e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002652:	4b24      	ldr	r3, [pc, #144]	; (80026e4 <HAL_RCC_OscConfig+0x244>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7ff fc56 	bl	8001f08 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002660:	f7ff fc52 	bl	8001f08 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e187      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002672:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d036      	beq.n	80026f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d016      	beq.n	80026c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <HAL_RCC_OscConfig+0x248>)
 8002694:	2201      	movs	r2, #1
 8002696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002698:	f7ff fc36 	bl	8001f08 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a0:	f7ff fc32 	bl	8001f08 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e167      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b2:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <HAL_RCC_OscConfig+0x240>)
 80026b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x200>
 80026be:	e01b      	b.n	80026f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <HAL_RCC_OscConfig+0x248>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c6:	f7ff fc1f 	bl	8001f08 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026cc:	e00e      	b.n	80026ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ce:	f7ff fc1b 	bl	8001f08 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d907      	bls.n	80026ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e150      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
 80026e0:	40023800 	.word	0x40023800
 80026e4:	42470000 	.word	0x42470000
 80026e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ec:	4b88      	ldr	r3, [pc, #544]	; (8002910 <HAL_RCC_OscConfig+0x470>)
 80026ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1ea      	bne.n	80026ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 8097 	beq.w	8002834 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002706:	2300      	movs	r3, #0
 8002708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800270a:	4b81      	ldr	r3, [pc, #516]	; (8002910 <HAL_RCC_OscConfig+0x470>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10f      	bne.n	8002736 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	4b7d      	ldr	r3, [pc, #500]	; (8002910 <HAL_RCC_OscConfig+0x470>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	4a7c      	ldr	r2, [pc, #496]	; (8002910 <HAL_RCC_OscConfig+0x470>)
 8002720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002724:	6413      	str	r3, [r2, #64]	; 0x40
 8002726:	4b7a      	ldr	r3, [pc, #488]	; (8002910 <HAL_RCC_OscConfig+0x470>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002732:	2301      	movs	r3, #1
 8002734:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002736:	4b77      	ldr	r3, [pc, #476]	; (8002914 <HAL_RCC_OscConfig+0x474>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273e:	2b00      	cmp	r3, #0
 8002740:	d118      	bne.n	8002774 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002742:	4b74      	ldr	r3, [pc, #464]	; (8002914 <HAL_RCC_OscConfig+0x474>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a73      	ldr	r2, [pc, #460]	; (8002914 <HAL_RCC_OscConfig+0x474>)
 8002748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800274c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274e:	f7ff fbdb 	bl	8001f08 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002756:	f7ff fbd7 	bl	8001f08 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e10c      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002768:	4b6a      	ldr	r3, [pc, #424]	; (8002914 <HAL_RCC_OscConfig+0x474>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d106      	bne.n	800278a <HAL_RCC_OscConfig+0x2ea>
 800277c:	4b64      	ldr	r3, [pc, #400]	; (8002910 <HAL_RCC_OscConfig+0x470>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002780:	4a63      	ldr	r2, [pc, #396]	; (8002910 <HAL_RCC_OscConfig+0x470>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	6713      	str	r3, [r2, #112]	; 0x70
 8002788:	e01c      	b.n	80027c4 <HAL_RCC_OscConfig+0x324>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b05      	cmp	r3, #5
 8002790:	d10c      	bne.n	80027ac <HAL_RCC_OscConfig+0x30c>
 8002792:	4b5f      	ldr	r3, [pc, #380]	; (8002910 <HAL_RCC_OscConfig+0x470>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	4a5e      	ldr	r2, [pc, #376]	; (8002910 <HAL_RCC_OscConfig+0x470>)
 8002798:	f043 0304 	orr.w	r3, r3, #4
 800279c:	6713      	str	r3, [r2, #112]	; 0x70
 800279e:	4b5c      	ldr	r3, [pc, #368]	; (8002910 <HAL_RCC_OscConfig+0x470>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	4a5b      	ldr	r2, [pc, #364]	; (8002910 <HAL_RCC_OscConfig+0x470>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6713      	str	r3, [r2, #112]	; 0x70
 80027aa:	e00b      	b.n	80027c4 <HAL_RCC_OscConfig+0x324>
 80027ac:	4b58      	ldr	r3, [pc, #352]	; (8002910 <HAL_RCC_OscConfig+0x470>)
 80027ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b0:	4a57      	ldr	r2, [pc, #348]	; (8002910 <HAL_RCC_OscConfig+0x470>)
 80027b2:	f023 0301 	bic.w	r3, r3, #1
 80027b6:	6713      	str	r3, [r2, #112]	; 0x70
 80027b8:	4b55      	ldr	r3, [pc, #340]	; (8002910 <HAL_RCC_OscConfig+0x470>)
 80027ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027bc:	4a54      	ldr	r2, [pc, #336]	; (8002910 <HAL_RCC_OscConfig+0x470>)
 80027be:	f023 0304 	bic.w	r3, r3, #4
 80027c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d015      	beq.n	80027f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027cc:	f7ff fb9c 	bl	8001f08 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d2:	e00a      	b.n	80027ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d4:	f7ff fb98 	bl	8001f08 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e0cb      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ea:	4b49      	ldr	r3, [pc, #292]	; (8002910 <HAL_RCC_OscConfig+0x470>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0ee      	beq.n	80027d4 <HAL_RCC_OscConfig+0x334>
 80027f6:	e014      	b.n	8002822 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f8:	f7ff fb86 	bl	8001f08 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fe:	e00a      	b.n	8002816 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002800:	f7ff fb82 	bl	8001f08 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	f241 3288 	movw	r2, #5000	; 0x1388
 800280e:	4293      	cmp	r3, r2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e0b5      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002816:	4b3e      	ldr	r3, [pc, #248]	; (8002910 <HAL_RCC_OscConfig+0x470>)
 8002818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1ee      	bne.n	8002800 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002822:	7dfb      	ldrb	r3, [r7, #23]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d105      	bne.n	8002834 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002828:	4b39      	ldr	r3, [pc, #228]	; (8002910 <HAL_RCC_OscConfig+0x470>)
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	4a38      	ldr	r2, [pc, #224]	; (8002910 <HAL_RCC_OscConfig+0x470>)
 800282e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002832:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 80a1 	beq.w	8002980 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800283e:	4b34      	ldr	r3, [pc, #208]	; (8002910 <HAL_RCC_OscConfig+0x470>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b08      	cmp	r3, #8
 8002848:	d05c      	beq.n	8002904 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d141      	bne.n	80028d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002852:	4b31      	ldr	r3, [pc, #196]	; (8002918 <HAL_RCC_OscConfig+0x478>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7ff fb56 	bl	8001f08 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002860:	f7ff fb52 	bl	8001f08 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e087      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002872:	4b27      	ldr	r3, [pc, #156]	; (8002910 <HAL_RCC_OscConfig+0x470>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69da      	ldr	r2, [r3, #28]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	019b      	lsls	r3, r3, #6
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	085b      	lsrs	r3, r3, #1
 8002896:	3b01      	subs	r3, #1
 8002898:	041b      	lsls	r3, r3, #16
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	061b      	lsls	r3, r3, #24
 80028a2:	491b      	ldr	r1, [pc, #108]	; (8002910 <HAL_RCC_OscConfig+0x470>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a8:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <HAL_RCC_OscConfig+0x478>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ae:	f7ff fb2b 	bl	8001f08 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b6:	f7ff fb27 	bl	8001f08 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e05c      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c8:	4b11      	ldr	r3, [pc, #68]	; (8002910 <HAL_RCC_OscConfig+0x470>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0f0      	beq.n	80028b6 <HAL_RCC_OscConfig+0x416>
 80028d4:	e054      	b.n	8002980 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <HAL_RCC_OscConfig+0x478>)
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028dc:	f7ff fb14 	bl	8001f08 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e4:	f7ff fb10 	bl	8001f08 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e045      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f6:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_RCC_OscConfig+0x470>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x444>
 8002902:	e03d      	b.n	8002980 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d107      	bne.n	800291c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e038      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
 8002910:	40023800 	.word	0x40023800
 8002914:	40007000 	.word	0x40007000
 8002918:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800291c:	4b1b      	ldr	r3, [pc, #108]	; (800298c <HAL_RCC_OscConfig+0x4ec>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d028      	beq.n	800297c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002934:	429a      	cmp	r2, r3
 8002936:	d121      	bne.n	800297c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002942:	429a      	cmp	r2, r3
 8002944:	d11a      	bne.n	800297c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800294c:	4013      	ands	r3, r2
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002952:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002954:	4293      	cmp	r3, r2
 8002956:	d111      	bne.n	800297c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002962:	085b      	lsrs	r3, r3, #1
 8002964:	3b01      	subs	r3, #1
 8002966:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d107      	bne.n	800297c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002976:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002978:	429a      	cmp	r2, r3
 800297a:	d001      	beq.n	8002980 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40023800 	.word	0x40023800

08002990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0cc      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a4:	4b68      	ldr	r3, [pc, #416]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d90c      	bls.n	80029cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	4b65      	ldr	r3, [pc, #404]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ba:	4b63      	ldr	r3, [pc, #396]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d001      	beq.n	80029cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0b8      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d020      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e4:	4b59      	ldr	r3, [pc, #356]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	4a58      	ldr	r2, [pc, #352]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029fc:	4b53      	ldr	r3, [pc, #332]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4a52      	ldr	r2, [pc, #328]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a08:	4b50      	ldr	r3, [pc, #320]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	494d      	ldr	r1, [pc, #308]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d044      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d107      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2e:	4b47      	ldr	r3, [pc, #284]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d119      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e07f      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d003      	beq.n	8002a4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d107      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4e:	4b3f      	ldr	r3, [pc, #252]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d109      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e06f      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5e:	4b3b      	ldr	r3, [pc, #236]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e067      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a6e:	4b37      	ldr	r3, [pc, #220]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f023 0203 	bic.w	r2, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	4934      	ldr	r1, [pc, #208]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a80:	f7ff fa42 	bl	8001f08 <HAL_GetTick>
 8002a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a86:	e00a      	b.n	8002a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a88:	f7ff fa3e 	bl	8001f08 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e04f      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9e:	4b2b      	ldr	r3, [pc, #172]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 020c 	and.w	r2, r3, #12
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d1eb      	bne.n	8002a88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab0:	4b25      	ldr	r3, [pc, #148]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d20c      	bcs.n	8002ad8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002abe:	4b22      	ldr	r3, [pc, #136]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac6:	4b20      	ldr	r3, [pc, #128]	; (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e032      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d008      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae4:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4916      	ldr	r1, [pc, #88]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d009      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b02:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	490e      	ldr	r1, [pc, #56]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b16:	f000 f821 	bl	8002b5c <HAL_RCC_GetSysClockFreq>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	091b      	lsrs	r3, r3, #4
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	490a      	ldr	r1, [pc, #40]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 8002b28:	5ccb      	ldrb	r3, [r1, r3]
 8002b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2e:	4a09      	ldr	r2, [pc, #36]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <HAL_RCC_ClockConfig+0x1c8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff f9a2 	bl	8001e80 <HAL_InitTick>

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40023c00 	.word	0x40023c00
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	080081a4 	.word	0x080081a4
 8002b54:	20000000 	.word	0x20000000
 8002b58:	20000004 	.word	0x20000004

08002b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b60:	b094      	sub	sp, #80	; 0x50
 8002b62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	647b      	str	r3, [r7, #68]	; 0x44
 8002b68:	2300      	movs	r3, #0
 8002b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b74:	4b79      	ldr	r3, [pc, #484]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 030c 	and.w	r3, r3, #12
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d00d      	beq.n	8002b9c <HAL_RCC_GetSysClockFreq+0x40>
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	f200 80e1 	bhi.w	8002d48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <HAL_RCC_GetSysClockFreq+0x34>
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d003      	beq.n	8002b96 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b8e:	e0db      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b90:	4b73      	ldr	r3, [pc, #460]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b92:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b94:	e0db      	b.n	8002d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b96:	4b73      	ldr	r3, [pc, #460]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b9a:	e0d8      	b.n	8002d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b9c:	4b6f      	ldr	r3, [pc, #444]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ba4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ba6:	4b6d      	ldr	r3, [pc, #436]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d063      	beq.n	8002c7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb2:	4b6a      	ldr	r3, [pc, #424]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	099b      	lsrs	r3, r3, #6
 8002bb8:	2200      	movs	r2, #0
 8002bba:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc4:	633b      	str	r3, [r7, #48]	; 0x30
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	637b      	str	r3, [r7, #52]	; 0x34
 8002bca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bce:	4622      	mov	r2, r4
 8002bd0:	462b      	mov	r3, r5
 8002bd2:	f04f 0000 	mov.w	r0, #0
 8002bd6:	f04f 0100 	mov.w	r1, #0
 8002bda:	0159      	lsls	r1, r3, #5
 8002bdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002be0:	0150      	lsls	r0, r2, #5
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4621      	mov	r1, r4
 8002be8:	1a51      	subs	r1, r2, r1
 8002bea:	6139      	str	r1, [r7, #16]
 8002bec:	4629      	mov	r1, r5
 8002bee:	eb63 0301 	sbc.w	r3, r3, r1
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	f04f 0300 	mov.w	r3, #0
 8002bfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c00:	4659      	mov	r1, fp
 8002c02:	018b      	lsls	r3, r1, #6
 8002c04:	4651      	mov	r1, sl
 8002c06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c0a:	4651      	mov	r1, sl
 8002c0c:	018a      	lsls	r2, r1, #6
 8002c0e:	4651      	mov	r1, sl
 8002c10:	ebb2 0801 	subs.w	r8, r2, r1
 8002c14:	4659      	mov	r1, fp
 8002c16:	eb63 0901 	sbc.w	r9, r3, r1
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c2e:	4690      	mov	r8, r2
 8002c30:	4699      	mov	r9, r3
 8002c32:	4623      	mov	r3, r4
 8002c34:	eb18 0303 	adds.w	r3, r8, r3
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	462b      	mov	r3, r5
 8002c3c:	eb49 0303 	adc.w	r3, r9, r3
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c4e:	4629      	mov	r1, r5
 8002c50:	024b      	lsls	r3, r1, #9
 8002c52:	4621      	mov	r1, r4
 8002c54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c58:	4621      	mov	r1, r4
 8002c5a:	024a      	lsls	r2, r1, #9
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c62:	2200      	movs	r2, #0
 8002c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c6c:	f7fd ffac 	bl	8000bc8 <__aeabi_uldivmod>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4613      	mov	r3, r2
 8002c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c78:	e058      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c7a:	4b38      	ldr	r3, [pc, #224]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	099b      	lsrs	r3, r3, #6
 8002c80:	2200      	movs	r2, #0
 8002c82:	4618      	mov	r0, r3
 8002c84:	4611      	mov	r1, r2
 8002c86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c8a:	623b      	str	r3, [r7, #32]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c94:	4642      	mov	r2, r8
 8002c96:	464b      	mov	r3, r9
 8002c98:	f04f 0000 	mov.w	r0, #0
 8002c9c:	f04f 0100 	mov.w	r1, #0
 8002ca0:	0159      	lsls	r1, r3, #5
 8002ca2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ca6:	0150      	lsls	r0, r2, #5
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4641      	mov	r1, r8
 8002cae:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cb2:	4649      	mov	r1, r9
 8002cb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ccc:	ebb2 040a 	subs.w	r4, r2, sl
 8002cd0:	eb63 050b 	sbc.w	r5, r3, fp
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	00eb      	lsls	r3, r5, #3
 8002cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ce2:	00e2      	lsls	r2, r4, #3
 8002ce4:	4614      	mov	r4, r2
 8002ce6:	461d      	mov	r5, r3
 8002ce8:	4643      	mov	r3, r8
 8002cea:	18e3      	adds	r3, r4, r3
 8002cec:	603b      	str	r3, [r7, #0]
 8002cee:	464b      	mov	r3, r9
 8002cf0:	eb45 0303 	adc.w	r3, r5, r3
 8002cf4:	607b      	str	r3, [r7, #4]
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d02:	4629      	mov	r1, r5
 8002d04:	028b      	lsls	r3, r1, #10
 8002d06:	4621      	mov	r1, r4
 8002d08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d0c:	4621      	mov	r1, r4
 8002d0e:	028a      	lsls	r2, r1, #10
 8002d10:	4610      	mov	r0, r2
 8002d12:	4619      	mov	r1, r3
 8002d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d16:	2200      	movs	r2, #0
 8002d18:	61bb      	str	r3, [r7, #24]
 8002d1a:	61fa      	str	r2, [r7, #28]
 8002d1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d20:	f7fd ff52 	bl	8000bc8 <__aeabi_uldivmod>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4613      	mov	r3, r2
 8002d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	0c1b      	lsrs	r3, r3, #16
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	3301      	adds	r3, #1
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d46:	e002      	b.n	8002d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d48:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3750      	adds	r7, #80	; 0x50
 8002d54:	46bd      	mov	sp, r7
 8002d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	00f42400 	.word	0x00f42400
 8002d64:	007a1200 	.word	0x007a1200

08002d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d6c:	4b03      	ldr	r3, [pc, #12]	; (8002d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	20000000 	.word	0x20000000

08002d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d84:	f7ff fff0 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	0a9b      	lsrs	r3, r3, #10
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	4903      	ldr	r1, [pc, #12]	; (8002da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d96:	5ccb      	ldrb	r3, [r1, r3]
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40023800 	.word	0x40023800
 8002da4:	080081b4 	.word	0x080081b4

08002da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dac:	f7ff ffdc 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8002db0:	4602      	mov	r2, r0
 8002db2:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	0b5b      	lsrs	r3, r3, #13
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	4903      	ldr	r1, [pc, #12]	; (8002dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dbe:	5ccb      	ldrb	r3, [r1, r3]
 8002dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	080081b4 	.word	0x080081b4

08002dd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e07b      	b.n	8002eda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d108      	bne.n	8002dfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002df2:	d009      	beq.n	8002e08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	61da      	str	r2, [r3, #28]
 8002dfa:	e005      	b.n	8002e08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7fe fdf2 	bl	8001a0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	431a      	orrs	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8c:	ea42 0103 	orr.w	r1, r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	0c1b      	lsrs	r3, r3, #16
 8002ea6:	f003 0104 	and.w	r1, r3, #4
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	f003 0210 	and.w	r2, r3, #16
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	69da      	ldr	r2, [r3, #28]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ec8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b088      	sub	sp, #32
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	603b      	str	r3, [r7, #0]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_SPI_Transmit+0x22>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e12d      	b.n	8003160 <HAL_SPI_Transmit+0x27e>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f0c:	f7fe fffc 	bl	8001f08 <HAL_GetTick>
 8002f10:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f12:	88fb      	ldrh	r3, [r7, #6]
 8002f14:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d002      	beq.n	8002f28 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f22:	2302      	movs	r3, #2
 8002f24:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f26:	e116      	b.n	8003156 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <HAL_SPI_Transmit+0x52>
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d102      	bne.n	8002f3a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f38:	e10d      	b.n	8003156 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	88fa      	ldrh	r2, [r7, #6]
 8002f52:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	88fa      	ldrh	r2, [r7, #6]
 8002f58:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f80:	d10f      	bne.n	8002fa2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fa0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fac:	2b40      	cmp	r3, #64	; 0x40
 8002fae:	d007      	beq.n	8002fc0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fc8:	d14f      	bne.n	800306a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <HAL_SPI_Transmit+0xf6>
 8002fd2:	8afb      	ldrh	r3, [r7, #22]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d142      	bne.n	800305e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	881a      	ldrh	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	1c9a      	adds	r2, r3, #2
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ffc:	e02f      	b.n	800305e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b02      	cmp	r3, #2
 800300a:	d112      	bne.n	8003032 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003010:	881a      	ldrh	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301c:	1c9a      	adds	r2, r3, #2
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003026:	b29b      	uxth	r3, r3
 8003028:	3b01      	subs	r3, #1
 800302a:	b29a      	uxth	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003030:	e015      	b.n	800305e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003032:	f7fe ff69 	bl	8001f08 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d803      	bhi.n	800304a <HAL_SPI_Transmit+0x168>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003048:	d102      	bne.n	8003050 <HAL_SPI_Transmit+0x16e>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d106      	bne.n	800305e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800305c:	e07b      	b.n	8003156 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003062:	b29b      	uxth	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1ca      	bne.n	8002ffe <HAL_SPI_Transmit+0x11c>
 8003068:	e050      	b.n	800310c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <HAL_SPI_Transmit+0x196>
 8003072:	8afb      	ldrh	r3, [r7, #22]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d144      	bne.n	8003102 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	330c      	adds	r3, #12
 8003082:	7812      	ldrb	r2, [r2, #0]
 8003084:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b01      	subs	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800309e:	e030      	b.n	8003102 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d113      	bne.n	80030d6 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	330c      	adds	r3, #12
 80030b8:	7812      	ldrb	r2, [r2, #0]
 80030ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80030d4:	e015      	b.n	8003102 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030d6:	f7fe ff17 	bl	8001f08 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d803      	bhi.n	80030ee <HAL_SPI_Transmit+0x20c>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030ec:	d102      	bne.n	80030f4 <HAL_SPI_Transmit+0x212>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d106      	bne.n	8003102 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003100:	e029      	b.n	8003156 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003106:	b29b      	uxth	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1c9      	bne.n	80030a0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	6839      	ldr	r1, [r7, #0]
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 f8b1 	bl	8003278 <SPI_EndRxTxTransaction>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2220      	movs	r2, #32
 8003120:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10a      	bne.n	8003140 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800312a:	2300      	movs	r3, #0
 800312c:	613b      	str	r3, [r7, #16]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	613b      	str	r3, [r7, #16]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	77fb      	strb	r3, [r7, #31]
 800314c:	e003      	b.n	8003156 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800315e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3720      	adds	r7, #32
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	4613      	mov	r3, r2
 8003176:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003178:	f7fe fec6 	bl	8001f08 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	4413      	add	r3, r2
 8003186:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003188:	f7fe febe 	bl	8001f08 <HAL_GetTick>
 800318c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800318e:	4b39      	ldr	r3, [pc, #228]	; (8003274 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	015b      	lsls	r3, r3, #5
 8003194:	0d1b      	lsrs	r3, r3, #20
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	fb02 f303 	mul.w	r3, r2, r3
 800319c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800319e:	e054      	b.n	800324a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031a6:	d050      	beq.n	800324a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031a8:	f7fe feae 	bl	8001f08 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d902      	bls.n	80031be <SPI_WaitFlagStateUntilTimeout+0x56>
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d13d      	bne.n	800323a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031d6:	d111      	bne.n	80031fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031e0:	d004      	beq.n	80031ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ea:	d107      	bne.n	80031fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003204:	d10f      	bne.n	8003226 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003224:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e017      	b.n	800326a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	3b01      	subs	r3, #1
 8003248:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4013      	ands	r3, r2
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	429a      	cmp	r2, r3
 8003258:	bf0c      	ite	eq
 800325a:	2301      	moveq	r3, #1
 800325c:	2300      	movne	r3, #0
 800325e:	b2db      	uxtb	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	429a      	cmp	r2, r3
 8003266:	d19b      	bne.n	80031a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3720      	adds	r7, #32
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000000 	.word	0x20000000

08003278 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af02      	add	r7, sp, #8
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2201      	movs	r2, #1
 800328c:	2102      	movs	r1, #2
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f7ff ff6a 	bl	8003168 <SPI_WaitFlagStateUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d007      	beq.n	80032aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329e:	f043 0220 	orr.w	r2, r3, #32
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e032      	b.n	8003310 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80032aa:	4b1b      	ldr	r3, [pc, #108]	; (8003318 <SPI_EndRxTxTransaction+0xa0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a1b      	ldr	r2, [pc, #108]	; (800331c <SPI_EndRxTxTransaction+0xa4>)
 80032b0:	fba2 2303 	umull	r2, r3, r2, r3
 80032b4:	0d5b      	lsrs	r3, r3, #21
 80032b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032ba:	fb02 f303 	mul.w	r3, r2, r3
 80032be:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032c8:	d112      	bne.n	80032f0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2200      	movs	r2, #0
 80032d2:	2180      	movs	r1, #128	; 0x80
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f7ff ff47 	bl	8003168 <SPI_WaitFlagStateUntilTimeout>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d016      	beq.n	800330e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e4:	f043 0220 	orr.w	r2, r3, #32
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e00f      	b.n	8003310 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	3b01      	subs	r3, #1
 80032fa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003306:	2b80      	cmp	r3, #128	; 0x80
 8003308:	d0f2      	beq.n	80032f0 <SPI_EndRxTxTransaction+0x78>
 800330a:	e000      	b.n	800330e <SPI_EndRxTxTransaction+0x96>
        break;
 800330c:	bf00      	nop
  }

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20000000 	.word	0x20000000
 800331c:	165e9f81 	.word	0x165e9f81

08003320 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e041      	b.n	80033b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fe fba8 	bl	8001a9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3304      	adds	r3, #4
 800335c:	4619      	mov	r1, r3
 800335e:	4610      	mov	r0, r2
 8003360:	f000 f9b8 	bl	80036d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d109      	bne.n	80033e4 <HAL_TIM_PWM_Start+0x24>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b01      	cmp	r3, #1
 80033da:	bf14      	ite	ne
 80033dc:	2301      	movne	r3, #1
 80033de:	2300      	moveq	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	e022      	b.n	800342a <HAL_TIM_PWM_Start+0x6a>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d109      	bne.n	80033fe <HAL_TIM_PWM_Start+0x3e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	bf14      	ite	ne
 80033f6:	2301      	movne	r3, #1
 80033f8:	2300      	moveq	r3, #0
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	e015      	b.n	800342a <HAL_TIM_PWM_Start+0x6a>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b08      	cmp	r3, #8
 8003402:	d109      	bne.n	8003418 <HAL_TIM_PWM_Start+0x58>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	bf14      	ite	ne
 8003410:	2301      	movne	r3, #1
 8003412:	2300      	moveq	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	e008      	b.n	800342a <HAL_TIM_PWM_Start+0x6a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b01      	cmp	r3, #1
 8003422:	bf14      	ite	ne
 8003424:	2301      	movne	r3, #1
 8003426:	2300      	moveq	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e07c      	b.n	800352c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d104      	bne.n	8003442 <HAL_TIM_PWM_Start+0x82>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003440:	e013      	b.n	800346a <HAL_TIM_PWM_Start+0xaa>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b04      	cmp	r3, #4
 8003446:	d104      	bne.n	8003452 <HAL_TIM_PWM_Start+0x92>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003450:	e00b      	b.n	800346a <HAL_TIM_PWM_Start+0xaa>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b08      	cmp	r3, #8
 8003456:	d104      	bne.n	8003462 <HAL_TIM_PWM_Start+0xa2>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003460:	e003      	b.n	800346a <HAL_TIM_PWM_Start+0xaa>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2202      	movs	r2, #2
 8003466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2201      	movs	r2, #1
 8003470:	6839      	ldr	r1, [r7, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fb8a 	bl	8003b8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a2d      	ldr	r2, [pc, #180]	; (8003534 <HAL_TIM_PWM_Start+0x174>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d004      	beq.n	800348c <HAL_TIM_PWM_Start+0xcc>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a2c      	ldr	r2, [pc, #176]	; (8003538 <HAL_TIM_PWM_Start+0x178>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d101      	bne.n	8003490 <HAL_TIM_PWM_Start+0xd0>
 800348c:	2301      	movs	r3, #1
 800348e:	e000      	b.n	8003492 <HAL_TIM_PWM_Start+0xd2>
 8003490:	2300      	movs	r3, #0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d007      	beq.n	80034a6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a22      	ldr	r2, [pc, #136]	; (8003534 <HAL_TIM_PWM_Start+0x174>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d022      	beq.n	80034f6 <HAL_TIM_PWM_Start+0x136>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b8:	d01d      	beq.n	80034f6 <HAL_TIM_PWM_Start+0x136>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a1f      	ldr	r2, [pc, #124]	; (800353c <HAL_TIM_PWM_Start+0x17c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d018      	beq.n	80034f6 <HAL_TIM_PWM_Start+0x136>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a1d      	ldr	r2, [pc, #116]	; (8003540 <HAL_TIM_PWM_Start+0x180>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d013      	beq.n	80034f6 <HAL_TIM_PWM_Start+0x136>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1c      	ldr	r2, [pc, #112]	; (8003544 <HAL_TIM_PWM_Start+0x184>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d00e      	beq.n	80034f6 <HAL_TIM_PWM_Start+0x136>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a16      	ldr	r2, [pc, #88]	; (8003538 <HAL_TIM_PWM_Start+0x178>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d009      	beq.n	80034f6 <HAL_TIM_PWM_Start+0x136>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a18      	ldr	r2, [pc, #96]	; (8003548 <HAL_TIM_PWM_Start+0x188>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d004      	beq.n	80034f6 <HAL_TIM_PWM_Start+0x136>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a16      	ldr	r2, [pc, #88]	; (800354c <HAL_TIM_PWM_Start+0x18c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d111      	bne.n	800351a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2b06      	cmp	r3, #6
 8003506:	d010      	beq.n	800352a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003518:	e007      	b.n	800352a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0201 	orr.w	r2, r2, #1
 8003528:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40010000 	.word	0x40010000
 8003538:	40010400 	.word	0x40010400
 800353c:	40000400 	.word	0x40000400
 8003540:	40000800 	.word	0x40000800
 8003544:	40000c00 	.word	0x40000c00
 8003548:	40014000 	.word	0x40014000
 800354c:	40001800 	.word	0x40001800

08003550 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800356a:	2302      	movs	r3, #2
 800356c:	e0ae      	b.n	80036cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b0c      	cmp	r3, #12
 800357a:	f200 809f 	bhi.w	80036bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800357e:	a201      	add	r2, pc, #4	; (adr r2, 8003584 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003584:	080035b9 	.word	0x080035b9
 8003588:	080036bd 	.word	0x080036bd
 800358c:	080036bd 	.word	0x080036bd
 8003590:	080036bd 	.word	0x080036bd
 8003594:	080035f9 	.word	0x080035f9
 8003598:	080036bd 	.word	0x080036bd
 800359c:	080036bd 	.word	0x080036bd
 80035a0:	080036bd 	.word	0x080036bd
 80035a4:	0800363b 	.word	0x0800363b
 80035a8:	080036bd 	.word	0x080036bd
 80035ac:	080036bd 	.word	0x080036bd
 80035b0:	080036bd 	.word	0x080036bd
 80035b4:	0800367b 	.word	0x0800367b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68b9      	ldr	r1, [r7, #8]
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 f934 	bl	800382c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0208 	orr.w	r2, r2, #8
 80035d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0204 	bic.w	r2, r2, #4
 80035e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6999      	ldr	r1, [r3, #24]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	619a      	str	r2, [r3, #24]
      break;
 80035f6:	e064      	b.n	80036c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 f984 	bl	800390c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003612:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699a      	ldr	r2, [r3, #24]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003622:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6999      	ldr	r1, [r3, #24]
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	021a      	lsls	r2, r3, #8
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	619a      	str	r2, [r3, #24]
      break;
 8003638:	e043      	b.n	80036c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68b9      	ldr	r1, [r7, #8]
 8003640:	4618      	mov	r0, r3
 8003642:	f000 f9d9 	bl	80039f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69da      	ldr	r2, [r3, #28]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0208 	orr.w	r2, r2, #8
 8003654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69da      	ldr	r2, [r3, #28]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0204 	bic.w	r2, r2, #4
 8003664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69d9      	ldr	r1, [r3, #28]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	61da      	str	r2, [r3, #28]
      break;
 8003678:	e023      	b.n	80036c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68b9      	ldr	r1, [r7, #8]
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fa2d 	bl	8003ae0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69da      	ldr	r2, [r3, #28]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003694:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69da      	ldr	r2, [r3, #28]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69d9      	ldr	r1, [r3, #28]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	021a      	lsls	r2, r3, #8
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	61da      	str	r2, [r3, #28]
      break;
 80036ba:	e002      	b.n	80036c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	75fb      	strb	r3, [r7, #23]
      break;
 80036c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a46      	ldr	r2, [pc, #280]	; (8003800 <TIM_Base_SetConfig+0x12c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d013      	beq.n	8003714 <TIM_Base_SetConfig+0x40>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f2:	d00f      	beq.n	8003714 <TIM_Base_SetConfig+0x40>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a43      	ldr	r2, [pc, #268]	; (8003804 <TIM_Base_SetConfig+0x130>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d00b      	beq.n	8003714 <TIM_Base_SetConfig+0x40>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a42      	ldr	r2, [pc, #264]	; (8003808 <TIM_Base_SetConfig+0x134>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d007      	beq.n	8003714 <TIM_Base_SetConfig+0x40>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a41      	ldr	r2, [pc, #260]	; (800380c <TIM_Base_SetConfig+0x138>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d003      	beq.n	8003714 <TIM_Base_SetConfig+0x40>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a40      	ldr	r2, [pc, #256]	; (8003810 <TIM_Base_SetConfig+0x13c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d108      	bne.n	8003726 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a35      	ldr	r2, [pc, #212]	; (8003800 <TIM_Base_SetConfig+0x12c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d02b      	beq.n	8003786 <TIM_Base_SetConfig+0xb2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003734:	d027      	beq.n	8003786 <TIM_Base_SetConfig+0xb2>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a32      	ldr	r2, [pc, #200]	; (8003804 <TIM_Base_SetConfig+0x130>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d023      	beq.n	8003786 <TIM_Base_SetConfig+0xb2>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a31      	ldr	r2, [pc, #196]	; (8003808 <TIM_Base_SetConfig+0x134>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d01f      	beq.n	8003786 <TIM_Base_SetConfig+0xb2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a30      	ldr	r2, [pc, #192]	; (800380c <TIM_Base_SetConfig+0x138>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d01b      	beq.n	8003786 <TIM_Base_SetConfig+0xb2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a2f      	ldr	r2, [pc, #188]	; (8003810 <TIM_Base_SetConfig+0x13c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d017      	beq.n	8003786 <TIM_Base_SetConfig+0xb2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a2e      	ldr	r2, [pc, #184]	; (8003814 <TIM_Base_SetConfig+0x140>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d013      	beq.n	8003786 <TIM_Base_SetConfig+0xb2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a2d      	ldr	r2, [pc, #180]	; (8003818 <TIM_Base_SetConfig+0x144>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d00f      	beq.n	8003786 <TIM_Base_SetConfig+0xb2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a2c      	ldr	r2, [pc, #176]	; (800381c <TIM_Base_SetConfig+0x148>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d00b      	beq.n	8003786 <TIM_Base_SetConfig+0xb2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a2b      	ldr	r2, [pc, #172]	; (8003820 <TIM_Base_SetConfig+0x14c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d007      	beq.n	8003786 <TIM_Base_SetConfig+0xb2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a2a      	ldr	r2, [pc, #168]	; (8003824 <TIM_Base_SetConfig+0x150>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d003      	beq.n	8003786 <TIM_Base_SetConfig+0xb2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a29      	ldr	r2, [pc, #164]	; (8003828 <TIM_Base_SetConfig+0x154>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d108      	bne.n	8003798 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800378c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4313      	orrs	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a10      	ldr	r2, [pc, #64]	; (8003800 <TIM_Base_SetConfig+0x12c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d003      	beq.n	80037cc <TIM_Base_SetConfig+0xf8>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a12      	ldr	r2, [pc, #72]	; (8003810 <TIM_Base_SetConfig+0x13c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d103      	bne.n	80037d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d105      	bne.n	80037f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f023 0201 	bic.w	r2, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	611a      	str	r2, [r3, #16]
  }
}
 80037f2:	bf00      	nop
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40010000 	.word	0x40010000
 8003804:	40000400 	.word	0x40000400
 8003808:	40000800 	.word	0x40000800
 800380c:	40000c00 	.word	0x40000c00
 8003810:	40010400 	.word	0x40010400
 8003814:	40014000 	.word	0x40014000
 8003818:	40014400 	.word	0x40014400
 800381c:	40014800 	.word	0x40014800
 8003820:	40001800 	.word	0x40001800
 8003824:	40001c00 	.word	0x40001c00
 8003828:	40002000 	.word	0x40002000

0800382c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	f023 0201 	bic.w	r2, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0303 	bic.w	r3, r3, #3
 8003862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f023 0302 	bic.w	r3, r3, #2
 8003874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a20      	ldr	r2, [pc, #128]	; (8003904 <TIM_OC1_SetConfig+0xd8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d003      	beq.n	8003890 <TIM_OC1_SetConfig+0x64>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a1f      	ldr	r2, [pc, #124]	; (8003908 <TIM_OC1_SetConfig+0xdc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d10c      	bne.n	80038aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f023 0308 	bic.w	r3, r3, #8
 8003896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	4313      	orrs	r3, r2
 80038a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f023 0304 	bic.w	r3, r3, #4
 80038a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a15      	ldr	r2, [pc, #84]	; (8003904 <TIM_OC1_SetConfig+0xd8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d003      	beq.n	80038ba <TIM_OC1_SetConfig+0x8e>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a14      	ldr	r2, [pc, #80]	; (8003908 <TIM_OC1_SetConfig+0xdc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d111      	bne.n	80038de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	621a      	str	r2, [r3, #32]
}
 80038f8:	bf00      	nop
 80038fa:	371c      	adds	r7, #28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	40010000 	.word	0x40010000
 8003908:	40010400 	.word	0x40010400

0800390c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	f023 0210 	bic.w	r2, r3, #16
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800393a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	021b      	lsls	r3, r3, #8
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4313      	orrs	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f023 0320 	bic.w	r3, r3, #32
 8003956:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a22      	ldr	r2, [pc, #136]	; (80039f0 <TIM_OC2_SetConfig+0xe4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d003      	beq.n	8003974 <TIM_OC2_SetConfig+0x68>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a21      	ldr	r2, [pc, #132]	; (80039f4 <TIM_OC2_SetConfig+0xe8>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d10d      	bne.n	8003990 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800397a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800398e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a17      	ldr	r2, [pc, #92]	; (80039f0 <TIM_OC2_SetConfig+0xe4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d003      	beq.n	80039a0 <TIM_OC2_SetConfig+0x94>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a16      	ldr	r2, [pc, #88]	; (80039f4 <TIM_OC2_SetConfig+0xe8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d113      	bne.n	80039c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	621a      	str	r2, [r3, #32]
}
 80039e2:	bf00      	nop
 80039e4:	371c      	adds	r7, #28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40010000 	.word	0x40010000
 80039f4:	40010400 	.word	0x40010400

080039f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0303 	bic.w	r3, r3, #3
 8003a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	021b      	lsls	r3, r3, #8
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a21      	ldr	r2, [pc, #132]	; (8003ad8 <TIM_OC3_SetConfig+0xe0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d003      	beq.n	8003a5e <TIM_OC3_SetConfig+0x66>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a20      	ldr	r2, [pc, #128]	; (8003adc <TIM_OC3_SetConfig+0xe4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d10d      	bne.n	8003a7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	021b      	lsls	r3, r3, #8
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a16      	ldr	r2, [pc, #88]	; (8003ad8 <TIM_OC3_SetConfig+0xe0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d003      	beq.n	8003a8a <TIM_OC3_SetConfig+0x92>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a15      	ldr	r2, [pc, #84]	; (8003adc <TIM_OC3_SetConfig+0xe4>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d113      	bne.n	8003ab2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	621a      	str	r2, [r3, #32]
}
 8003acc:	bf00      	nop
 8003ace:	371c      	adds	r7, #28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	40010000 	.word	0x40010000
 8003adc:	40010400 	.word	0x40010400

08003ae0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	021b      	lsls	r3, r3, #8
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	031b      	lsls	r3, r3, #12
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a12      	ldr	r2, [pc, #72]	; (8003b84 <TIM_OC4_SetConfig+0xa4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d003      	beq.n	8003b48 <TIM_OC4_SetConfig+0x68>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a11      	ldr	r2, [pc, #68]	; (8003b88 <TIM_OC4_SetConfig+0xa8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d109      	bne.n	8003b5c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	019b      	lsls	r3, r3, #6
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	621a      	str	r2, [r3, #32]
}
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40010000 	.word	0x40010000
 8003b88:	40010400 	.word	0x40010400

08003b8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f003 031f 	and.w	r3, r3, #31
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6a1a      	ldr	r2, [r3, #32]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	43db      	mvns	r3, r3
 8003bae:	401a      	ands	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a1a      	ldr	r2, [r3, #32]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f003 031f 	and.w	r3, r3, #31
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	621a      	str	r2, [r3, #32]
}
 8003bca:	bf00      	nop
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
	...

08003bd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e05a      	b.n	8003ca6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a21      	ldr	r2, [pc, #132]	; (8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d022      	beq.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c3c:	d01d      	beq.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a1d      	ldr	r2, [pc, #116]	; (8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d018      	beq.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a1b      	ldr	r2, [pc, #108]	; (8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d013      	beq.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a1a      	ldr	r2, [pc, #104]	; (8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d00e      	beq.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a18      	ldr	r2, [pc, #96]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d009      	beq.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a17      	ldr	r2, [pc, #92]	; (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d004      	beq.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a15      	ldr	r2, [pc, #84]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d10c      	bne.n	8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	40010000 	.word	0x40010000
 8003cb8:	40000400 	.word	0x40000400
 8003cbc:	40000800 	.word	0x40000800
 8003cc0:	40000c00 	.word	0x40000c00
 8003cc4:	40010400 	.word	0x40010400
 8003cc8:	40014000 	.word	0x40014000
 8003ccc:	40001800 	.word	0x40001800

08003cd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e042      	b.n	8003d68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fd ff2c 	bl	8001b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2224      	movs	r2, #36	; 0x24
 8003d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f97f 	bl	8004018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695a      	ldr	r2, [r3, #20]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08a      	sub	sp, #40	; 0x28
 8003d74:	af02      	add	r7, sp, #8
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	f040 8081 	bne.w	8003e94 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <HAL_UART_Receive+0x2e>
 8003d98:	88fb      	ldrh	r3, [r7, #6]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e079      	b.n	8003e96 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2222      	movs	r2, #34	; 0x22
 8003dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003db6:	f7fe f8a7 	bl	8001f08 <HAL_GetTick>
 8003dba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	88fa      	ldrh	r2, [r7, #6]
 8003dc0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	88fa      	ldrh	r2, [r7, #6]
 8003dc6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd0:	d108      	bne.n	8003de4 <HAL_UART_Receive+0x74>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d104      	bne.n	8003de4 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	61bb      	str	r3, [r7, #24]
 8003de2:	e003      	b.n	8003dec <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003dec:	e047      	b.n	8003e7e <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2200      	movs	r2, #0
 8003df6:	2120      	movs	r1, #32
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 f850 	bl	8003e9e <UART_WaitOnFlagUntilTimeout>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d005      	beq.n	8003e10 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e042      	b.n	8003e96 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10c      	bne.n	8003e30 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	3302      	adds	r3, #2
 8003e2c:	61bb      	str	r3, [r7, #24]
 8003e2e:	e01f      	b.n	8003e70 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e38:	d007      	beq.n	8003e4a <HAL_UART_Receive+0xda>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10a      	bne.n	8003e58 <HAL_UART_Receive+0xe8>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d106      	bne.n	8003e58 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	701a      	strb	r2, [r3, #0]
 8003e56:	e008      	b.n	8003e6a <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1b2      	bne.n	8003dee <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	e000      	b.n	8003e96 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003e94:	2302      	movs	r3, #2
  }
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3720      	adds	r7, #32
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b086      	sub	sp, #24
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	60f8      	str	r0, [r7, #12]
 8003ea6:	60b9      	str	r1, [r7, #8]
 8003ea8:	603b      	str	r3, [r7, #0]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eae:	e03b      	b.n	8003f28 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eb6:	d037      	beq.n	8003f28 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb8:	f7fe f826 	bl	8001f08 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	6a3a      	ldr	r2, [r7, #32]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d302      	bcc.n	8003ece <UART_WaitOnFlagUntilTimeout+0x30>
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e03a      	b.n	8003f48 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d023      	beq.n	8003f28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b80      	cmp	r3, #128	; 0x80
 8003ee4:	d020      	beq.n	8003f28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2b40      	cmp	r3, #64	; 0x40
 8003eea:	d01d      	beq.n	8003f28 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d116      	bne.n	8003f28 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f81d 	bl	8003f50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2208      	movs	r2, #8
 8003f1a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e00f      	b.n	8003f48 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	4013      	ands	r3, r2
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	bf0c      	ite	eq
 8003f38:	2301      	moveq	r3, #1
 8003f3a:	2300      	movne	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	461a      	mov	r2, r3
 8003f40:	79fb      	ldrb	r3, [r7, #7]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d0b4      	beq.n	8003eb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b095      	sub	sp, #84	; 0x54
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	330c      	adds	r3, #12
 8003f5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	330c      	adds	r3, #12
 8003f76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f78:	643a      	str	r2, [r7, #64]	; 0x40
 8003f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f80:	e841 2300 	strex	r3, r2, [r1]
 8003f84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e5      	bne.n	8003f58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3314      	adds	r3, #20
 8003f92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	e853 3f00 	ldrex	r3, [r3]
 8003f9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f023 0301 	bic.w	r3, r3, #1
 8003fa2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3314      	adds	r3, #20
 8003faa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fb4:	e841 2300 	strex	r3, r2, [r1]
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1e5      	bne.n	8003f8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d119      	bne.n	8003ffc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	330c      	adds	r3, #12
 8003fce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	e853 3f00 	ldrex	r3, [r3]
 8003fd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f023 0310 	bic.w	r3, r3, #16
 8003fde:	647b      	str	r3, [r7, #68]	; 0x44
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	330c      	adds	r3, #12
 8003fe6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fe8:	61ba      	str	r2, [r7, #24]
 8003fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fec:	6979      	ldr	r1, [r7, #20]
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	e841 2300 	strex	r3, r2, [r1]
 8003ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e5      	bne.n	8003fc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	631a      	str	r2, [r3, #48]	; 0x30
}
 800400a:	bf00      	nop
 800400c:	3754      	adds	r7, #84	; 0x54
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
	...

08004018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800401c:	b0c0      	sub	sp, #256	; 0x100
 800401e:	af00      	add	r7, sp, #0
 8004020:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004034:	68d9      	ldr	r1, [r3, #12]
 8004036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	ea40 0301 	orr.w	r3, r0, r1
 8004040:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	431a      	orrs	r2, r3
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	431a      	orrs	r2, r3
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004070:	f021 010c 	bic.w	r1, r1, #12
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800407e:	430b      	orrs	r3, r1
 8004080:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800408e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004092:	6999      	ldr	r1, [r3, #24]
 8004094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	ea40 0301 	orr.w	r3, r0, r1
 800409e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	4b8f      	ldr	r3, [pc, #572]	; (80042e4 <UART_SetConfig+0x2cc>)
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d005      	beq.n	80040b8 <UART_SetConfig+0xa0>
 80040ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4b8d      	ldr	r3, [pc, #564]	; (80042e8 <UART_SetConfig+0x2d0>)
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d104      	bne.n	80040c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040b8:	f7fe fe76 	bl	8002da8 <HAL_RCC_GetPCLK2Freq>
 80040bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040c0:	e003      	b.n	80040ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040c2:	f7fe fe5d 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 80040c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d4:	f040 810c 	bne.w	80042f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040dc:	2200      	movs	r2, #0
 80040de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80040e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80040ea:	4622      	mov	r2, r4
 80040ec:	462b      	mov	r3, r5
 80040ee:	1891      	adds	r1, r2, r2
 80040f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80040f2:	415b      	adcs	r3, r3
 80040f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040fa:	4621      	mov	r1, r4
 80040fc:	eb12 0801 	adds.w	r8, r2, r1
 8004100:	4629      	mov	r1, r5
 8004102:	eb43 0901 	adc.w	r9, r3, r1
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	f04f 0300 	mov.w	r3, #0
 800410e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004112:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004116:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800411a:	4690      	mov	r8, r2
 800411c:	4699      	mov	r9, r3
 800411e:	4623      	mov	r3, r4
 8004120:	eb18 0303 	adds.w	r3, r8, r3
 8004124:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004128:	462b      	mov	r3, r5
 800412a:	eb49 0303 	adc.w	r3, r9, r3
 800412e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800413e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004142:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004146:	460b      	mov	r3, r1
 8004148:	18db      	adds	r3, r3, r3
 800414a:	653b      	str	r3, [r7, #80]	; 0x50
 800414c:	4613      	mov	r3, r2
 800414e:	eb42 0303 	adc.w	r3, r2, r3
 8004152:	657b      	str	r3, [r7, #84]	; 0x54
 8004154:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004158:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800415c:	f7fc fd34 	bl	8000bc8 <__aeabi_uldivmod>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	4b61      	ldr	r3, [pc, #388]	; (80042ec <UART_SetConfig+0x2d4>)
 8004166:	fba3 2302 	umull	r2, r3, r3, r2
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	011c      	lsls	r4, r3, #4
 800416e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004172:	2200      	movs	r2, #0
 8004174:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004178:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800417c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004180:	4642      	mov	r2, r8
 8004182:	464b      	mov	r3, r9
 8004184:	1891      	adds	r1, r2, r2
 8004186:	64b9      	str	r1, [r7, #72]	; 0x48
 8004188:	415b      	adcs	r3, r3
 800418a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800418c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004190:	4641      	mov	r1, r8
 8004192:	eb12 0a01 	adds.w	sl, r2, r1
 8004196:	4649      	mov	r1, r9
 8004198:	eb43 0b01 	adc.w	fp, r3, r1
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	f04f 0300 	mov.w	r3, #0
 80041a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041b0:	4692      	mov	sl, r2
 80041b2:	469b      	mov	fp, r3
 80041b4:	4643      	mov	r3, r8
 80041b6:	eb1a 0303 	adds.w	r3, sl, r3
 80041ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041be:	464b      	mov	r3, r9
 80041c0:	eb4b 0303 	adc.w	r3, fp, r3
 80041c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80041d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041dc:	460b      	mov	r3, r1
 80041de:	18db      	adds	r3, r3, r3
 80041e0:	643b      	str	r3, [r7, #64]	; 0x40
 80041e2:	4613      	mov	r3, r2
 80041e4:	eb42 0303 	adc.w	r3, r2, r3
 80041e8:	647b      	str	r3, [r7, #68]	; 0x44
 80041ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041f2:	f7fc fce9 	bl	8000bc8 <__aeabi_uldivmod>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4611      	mov	r1, r2
 80041fc:	4b3b      	ldr	r3, [pc, #236]	; (80042ec <UART_SetConfig+0x2d4>)
 80041fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	2264      	movs	r2, #100	; 0x64
 8004206:	fb02 f303 	mul.w	r3, r2, r3
 800420a:	1acb      	subs	r3, r1, r3
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004212:	4b36      	ldr	r3, [pc, #216]	; (80042ec <UART_SetConfig+0x2d4>)
 8004214:	fba3 2302 	umull	r2, r3, r3, r2
 8004218:	095b      	lsrs	r3, r3, #5
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004220:	441c      	add	r4, r3
 8004222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004226:	2200      	movs	r2, #0
 8004228:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800422c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004230:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004234:	4642      	mov	r2, r8
 8004236:	464b      	mov	r3, r9
 8004238:	1891      	adds	r1, r2, r2
 800423a:	63b9      	str	r1, [r7, #56]	; 0x38
 800423c:	415b      	adcs	r3, r3
 800423e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004240:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004244:	4641      	mov	r1, r8
 8004246:	1851      	adds	r1, r2, r1
 8004248:	6339      	str	r1, [r7, #48]	; 0x30
 800424a:	4649      	mov	r1, r9
 800424c:	414b      	adcs	r3, r1
 800424e:	637b      	str	r3, [r7, #52]	; 0x34
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800425c:	4659      	mov	r1, fp
 800425e:	00cb      	lsls	r3, r1, #3
 8004260:	4651      	mov	r1, sl
 8004262:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004266:	4651      	mov	r1, sl
 8004268:	00ca      	lsls	r2, r1, #3
 800426a:	4610      	mov	r0, r2
 800426c:	4619      	mov	r1, r3
 800426e:	4603      	mov	r3, r0
 8004270:	4642      	mov	r2, r8
 8004272:	189b      	adds	r3, r3, r2
 8004274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004278:	464b      	mov	r3, r9
 800427a:	460a      	mov	r2, r1
 800427c:	eb42 0303 	adc.w	r3, r2, r3
 8004280:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004290:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004294:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004298:	460b      	mov	r3, r1
 800429a:	18db      	adds	r3, r3, r3
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28
 800429e:	4613      	mov	r3, r2
 80042a0:	eb42 0303 	adc.w	r3, r2, r3
 80042a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042ae:	f7fc fc8b 	bl	8000bc8 <__aeabi_uldivmod>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	4b0d      	ldr	r3, [pc, #52]	; (80042ec <UART_SetConfig+0x2d4>)
 80042b8:	fba3 1302 	umull	r1, r3, r3, r2
 80042bc:	095b      	lsrs	r3, r3, #5
 80042be:	2164      	movs	r1, #100	; 0x64
 80042c0:	fb01 f303 	mul.w	r3, r1, r3
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	3332      	adds	r3, #50	; 0x32
 80042ca:	4a08      	ldr	r2, [pc, #32]	; (80042ec <UART_SetConfig+0x2d4>)
 80042cc:	fba2 2303 	umull	r2, r3, r2, r3
 80042d0:	095b      	lsrs	r3, r3, #5
 80042d2:	f003 0207 	and.w	r2, r3, #7
 80042d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4422      	add	r2, r4
 80042de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042e0:	e106      	b.n	80044f0 <UART_SetConfig+0x4d8>
 80042e2:	bf00      	nop
 80042e4:	40011000 	.word	0x40011000
 80042e8:	40011400 	.word	0x40011400
 80042ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042f4:	2200      	movs	r2, #0
 80042f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80042fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004302:	4642      	mov	r2, r8
 8004304:	464b      	mov	r3, r9
 8004306:	1891      	adds	r1, r2, r2
 8004308:	6239      	str	r1, [r7, #32]
 800430a:	415b      	adcs	r3, r3
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
 800430e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004312:	4641      	mov	r1, r8
 8004314:	1854      	adds	r4, r2, r1
 8004316:	4649      	mov	r1, r9
 8004318:	eb43 0501 	adc.w	r5, r3, r1
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	00eb      	lsls	r3, r5, #3
 8004326:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800432a:	00e2      	lsls	r2, r4, #3
 800432c:	4614      	mov	r4, r2
 800432e:	461d      	mov	r5, r3
 8004330:	4643      	mov	r3, r8
 8004332:	18e3      	adds	r3, r4, r3
 8004334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004338:	464b      	mov	r3, r9
 800433a:	eb45 0303 	adc.w	r3, r5, r3
 800433e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800434e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800435e:	4629      	mov	r1, r5
 8004360:	008b      	lsls	r3, r1, #2
 8004362:	4621      	mov	r1, r4
 8004364:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004368:	4621      	mov	r1, r4
 800436a:	008a      	lsls	r2, r1, #2
 800436c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004370:	f7fc fc2a 	bl	8000bc8 <__aeabi_uldivmod>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4b60      	ldr	r3, [pc, #384]	; (80044fc <UART_SetConfig+0x4e4>)
 800437a:	fba3 2302 	umull	r2, r3, r3, r2
 800437e:	095b      	lsrs	r3, r3, #5
 8004380:	011c      	lsls	r4, r3, #4
 8004382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004386:	2200      	movs	r2, #0
 8004388:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800438c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004390:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004394:	4642      	mov	r2, r8
 8004396:	464b      	mov	r3, r9
 8004398:	1891      	adds	r1, r2, r2
 800439a:	61b9      	str	r1, [r7, #24]
 800439c:	415b      	adcs	r3, r3
 800439e:	61fb      	str	r3, [r7, #28]
 80043a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043a4:	4641      	mov	r1, r8
 80043a6:	1851      	adds	r1, r2, r1
 80043a8:	6139      	str	r1, [r7, #16]
 80043aa:	4649      	mov	r1, r9
 80043ac:	414b      	adcs	r3, r1
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043bc:	4659      	mov	r1, fp
 80043be:	00cb      	lsls	r3, r1, #3
 80043c0:	4651      	mov	r1, sl
 80043c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043c6:	4651      	mov	r1, sl
 80043c8:	00ca      	lsls	r2, r1, #3
 80043ca:	4610      	mov	r0, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	4603      	mov	r3, r0
 80043d0:	4642      	mov	r2, r8
 80043d2:	189b      	adds	r3, r3, r2
 80043d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043d8:	464b      	mov	r3, r9
 80043da:	460a      	mov	r2, r1
 80043dc:	eb42 0303 	adc.w	r3, r2, r3
 80043e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80043ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80043fc:	4649      	mov	r1, r9
 80043fe:	008b      	lsls	r3, r1, #2
 8004400:	4641      	mov	r1, r8
 8004402:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004406:	4641      	mov	r1, r8
 8004408:	008a      	lsls	r2, r1, #2
 800440a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800440e:	f7fc fbdb 	bl	8000bc8 <__aeabi_uldivmod>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4611      	mov	r1, r2
 8004418:	4b38      	ldr	r3, [pc, #224]	; (80044fc <UART_SetConfig+0x4e4>)
 800441a:	fba3 2301 	umull	r2, r3, r3, r1
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	2264      	movs	r2, #100	; 0x64
 8004422:	fb02 f303 	mul.w	r3, r2, r3
 8004426:	1acb      	subs	r3, r1, r3
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	3332      	adds	r3, #50	; 0x32
 800442c:	4a33      	ldr	r2, [pc, #204]	; (80044fc <UART_SetConfig+0x4e4>)
 800442e:	fba2 2303 	umull	r2, r3, r2, r3
 8004432:	095b      	lsrs	r3, r3, #5
 8004434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004438:	441c      	add	r4, r3
 800443a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800443e:	2200      	movs	r2, #0
 8004440:	673b      	str	r3, [r7, #112]	; 0x70
 8004442:	677a      	str	r2, [r7, #116]	; 0x74
 8004444:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004448:	4642      	mov	r2, r8
 800444a:	464b      	mov	r3, r9
 800444c:	1891      	adds	r1, r2, r2
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	415b      	adcs	r3, r3
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004458:	4641      	mov	r1, r8
 800445a:	1851      	adds	r1, r2, r1
 800445c:	6039      	str	r1, [r7, #0]
 800445e:	4649      	mov	r1, r9
 8004460:	414b      	adcs	r3, r1
 8004462:	607b      	str	r3, [r7, #4]
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004470:	4659      	mov	r1, fp
 8004472:	00cb      	lsls	r3, r1, #3
 8004474:	4651      	mov	r1, sl
 8004476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800447a:	4651      	mov	r1, sl
 800447c:	00ca      	lsls	r2, r1, #3
 800447e:	4610      	mov	r0, r2
 8004480:	4619      	mov	r1, r3
 8004482:	4603      	mov	r3, r0
 8004484:	4642      	mov	r2, r8
 8004486:	189b      	adds	r3, r3, r2
 8004488:	66bb      	str	r3, [r7, #104]	; 0x68
 800448a:	464b      	mov	r3, r9
 800448c:	460a      	mov	r2, r1
 800448e:	eb42 0303 	adc.w	r3, r2, r3
 8004492:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	663b      	str	r3, [r7, #96]	; 0x60
 800449e:	667a      	str	r2, [r7, #100]	; 0x64
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80044ac:	4649      	mov	r1, r9
 80044ae:	008b      	lsls	r3, r1, #2
 80044b0:	4641      	mov	r1, r8
 80044b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044b6:	4641      	mov	r1, r8
 80044b8:	008a      	lsls	r2, r1, #2
 80044ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044be:	f7fc fb83 	bl	8000bc8 <__aeabi_uldivmod>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4b0d      	ldr	r3, [pc, #52]	; (80044fc <UART_SetConfig+0x4e4>)
 80044c8:	fba3 1302 	umull	r1, r3, r3, r2
 80044cc:	095b      	lsrs	r3, r3, #5
 80044ce:	2164      	movs	r1, #100	; 0x64
 80044d0:	fb01 f303 	mul.w	r3, r1, r3
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	3332      	adds	r3, #50	; 0x32
 80044da:	4a08      	ldr	r2, [pc, #32]	; (80044fc <UART_SetConfig+0x4e4>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	f003 020f 	and.w	r2, r3, #15
 80044e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4422      	add	r2, r4
 80044ee:	609a      	str	r2, [r3, #8]
}
 80044f0:	bf00      	nop
 80044f2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044f6:	46bd      	mov	sp, r7
 80044f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044fc:	51eb851f 	.word	0x51eb851f

08004500 <_Z13DEV_SPI_WRiteh>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	4603      	mov	r3, r0
 8004508:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&_dat, 1, 500);
 800450a:	1df9      	adds	r1, r7, #7
 800450c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004510:	2201      	movs	r2, #1
 8004512:	4803      	ldr	r0, [pc, #12]	; (8004520 <_Z13DEV_SPI_WRiteh+0x20>)
 8004514:	f7fe fce5 	bl	8002ee2 <HAL_SPI_Transmit>
}
 8004518:	bf00      	nop
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	20000280 	.word	0x20000280

08004524 <_Z15DEV_Module_Initv>:

int DEV_Module_Init(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 8004528:	2201      	movs	r2, #1
 800452a:	2120      	movs	r1, #32
 800452c:	4809      	ldr	r0, [pc, #36]	; (8004554 <_Z15DEV_Module_Initv+0x30>)
 800452e:	f7fd ff9d 	bl	800246c <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8004532:	2201      	movs	r2, #1
 8004534:	2180      	movs	r1, #128	; 0x80
 8004536:	4807      	ldr	r0, [pc, #28]	; (8004554 <_Z15DEV_Module_Initv+0x30>)
 8004538:	f7fd ff98 	bl	800246c <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 800453c:	2201      	movs	r2, #1
 800453e:	2140      	movs	r1, #64	; 0x40
 8004540:	4804      	ldr	r0, [pc, #16]	; (8004554 <_Z15DEV_Module_Initv+0x30>)
 8004542:	f7fd ff93 	bl	800246c <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8004546:	2104      	movs	r1, #4
 8004548:	4803      	ldr	r0, [pc, #12]	; (8004558 <_Z15DEV_Module_Initv+0x34>)
 800454a:	f7fe ff39 	bl	80033c0 <HAL_TIM_PWM_Start>
		return 0;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40020400 	.word	0x40020400
 8004558:	200002d8 	.word	0x200002d8

0800455c <_Z14Paint_NewImagetttt>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 800455c:	b590      	push	{r4, r7, lr}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	4604      	mov	r4, r0
 8004564:	4608      	mov	r0, r1
 8004566:	4611      	mov	r1, r2
 8004568:	461a      	mov	r2, r3
 800456a:	4623      	mov	r3, r4
 800456c:	80fb      	strh	r3, [r7, #6]
 800456e:	4603      	mov	r3, r0
 8004570:	80bb      	strh	r3, [r7, #4]
 8004572:	460b      	mov	r3, r1
 8004574:	807b      	strh	r3, [r7, #2]
 8004576:	4613      	mov	r3, r2
 8004578:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 800457a:	4a1c      	ldr	r2, [pc, #112]	; (80045ec <_Z14Paint_NewImagetttt+0x90>)
 800457c:	88fb      	ldrh	r3, [r7, #6]
 800457e:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8004580:	4a1a      	ldr	r2, [pc, #104]	; (80045ec <_Z14Paint_NewImagetttt+0x90>)
 8004582:	88bb      	ldrh	r3, [r7, #4]
 8004584:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8004586:	4a19      	ldr	r2, [pc, #100]	; (80045ec <_Z14Paint_NewImagetttt+0x90>)
 8004588:	883b      	ldrh	r3, [r7, #0]
 800458a:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 800458c:	4a17      	ldr	r2, [pc, #92]	; (80045ec <_Z14Paint_NewImagetttt+0x90>)
 800458e:	88fb      	ldrh	r3, [r7, #6]
 8004590:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8004592:	4a16      	ldr	r2, [pc, #88]	; (80045ec <_Z14Paint_NewImagetttt+0x90>)
 8004594:	88bb      	ldrh	r3, [r7, #4]
 8004596:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 8004598:	4b14      	ldr	r3, [pc, #80]	; (80045ec <_Z14Paint_NewImagetttt+0x90>)
 800459a:	8a5b      	ldrh	r3, [r3, #18]
 800459c:	b29b      	uxth	r3, r3
 800459e:	4619      	mov	r1, r3
 80045a0:	4b12      	ldr	r3, [pc, #72]	; (80045ec <_Z14Paint_NewImagetttt+0x90>)
 80045a2:	8a9b      	ldrh	r3, [r3, #20]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	461a      	mov	r2, r3
 80045a8:	4811      	ldr	r0, [pc, #68]	; (80045f0 <_Z14Paint_NewImagetttt+0x94>)
 80045aa:	f001 fafd 	bl	8005ba8 <iprintf>
   
    Paint.Rotate = Rotate;
 80045ae:	4a0f      	ldr	r2, [pc, #60]	; (80045ec <_Z14Paint_NewImagetttt+0x90>)
 80045b0:	887b      	ldrh	r3, [r7, #2]
 80045b2:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 80045b4:	4b0d      	ldr	r3, [pc, #52]	; (80045ec <_Z14Paint_NewImagetttt+0x90>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 80045ba:	887b      	ldrh	r3, [r7, #2]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d002      	beq.n	80045c6 <_Z14Paint_NewImagetttt+0x6a>
 80045c0:	887b      	ldrh	r3, [r7, #2]
 80045c2:	2bb4      	cmp	r3, #180	; 0xb4
 80045c4:	d106      	bne.n	80045d4 <_Z14Paint_NewImagetttt+0x78>
        Paint.Width = Width;
 80045c6:	4a09      	ldr	r2, [pc, #36]	; (80045ec <_Z14Paint_NewImagetttt+0x90>)
 80045c8:	88fb      	ldrh	r3, [r7, #6]
 80045ca:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 80045cc:	4a07      	ldr	r2, [pc, #28]	; (80045ec <_Z14Paint_NewImagetttt+0x90>)
 80045ce:	88bb      	ldrh	r3, [r7, #4]
 80045d0:	80d3      	strh	r3, [r2, #6]
 80045d2:	e006      	b.n	80045e2 <_Z14Paint_NewImagetttt+0x86>
    } else {
        Paint.Width = Height;
 80045d4:	4a05      	ldr	r2, [pc, #20]	; (80045ec <_Z14Paint_NewImagetttt+0x90>)
 80045d6:	88bb      	ldrh	r3, [r7, #4]
 80045d8:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 80045da:	4a04      	ldr	r2, [pc, #16]	; (80045ec <_Z14Paint_NewImagetttt+0x90>)
 80045dc:	88fb      	ldrh	r3, [r7, #6]
 80045de:	80d3      	strh	r3, [r2, #6]
    }
}
 80045e0:	bf00      	nop
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd90      	pop	{r4, r7, pc}
 80045ea:	bf00      	nop
 80045ec:	20000370 	.word	0x20000370
 80045f0:	08007eb0 	.word	0x08007eb0

080045f4 <_Z21Paint_SetClearFuntionPFvtE>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 80045fc:	4a04      	ldr	r2, [pc, #16]	; (8004610 <_Z21Paint_SetClearFuntionPFvtE+0x1c>)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6013      	str	r3, [r2, #0]
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	2000038c 	.word	0x2000038c

08004614 <_Z23Paint_SetDisplayFuntionPFvtttE>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 800461c:	4a04      	ldr	r2, [pc, #16]	; (8004630 <_Z23Paint_SetDisplayFuntionPFvtttE+0x1c>)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6013      	str	r3, [r2, #0]
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	20000388 	.word	0x20000388

08004634 <_Z15Paint_SetRotatet>:
function:	Select Image Rotate
parameter:
    Rotate   :   0,90,180,270
******************************************************************************/
void Paint_SetRotate(UWORD Rotate)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	80fb      	strh	r3, [r7, #6]
    if(Rotate == ROTATE_0 || Rotate == ROTATE_90 || Rotate == ROTATE_180 || Rotate == ROTATE_270) {
 800463e:	88fb      	ldrh	r3, [r7, #6]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d009      	beq.n	8004658 <_Z15Paint_SetRotatet+0x24>
 8004644:	88fb      	ldrh	r3, [r7, #6]
 8004646:	2b5a      	cmp	r3, #90	; 0x5a
 8004648:	d006      	beq.n	8004658 <_Z15Paint_SetRotatet+0x24>
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	2bb4      	cmp	r3, #180	; 0xb4
 800464e:	d003      	beq.n	8004658 <_Z15Paint_SetRotatet+0x24>
 8004650:	88fb      	ldrh	r3, [r7, #6]
 8004652:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8004656:	d108      	bne.n	800466a <_Z15Paint_SetRotatet+0x36>
        Debug("Set image Rotate %d\r\n", Rotate);
 8004658:	88fb      	ldrh	r3, [r7, #6]
 800465a:	4619      	mov	r1, r3
 800465c:	4807      	ldr	r0, [pc, #28]	; (800467c <_Z15Paint_SetRotatet+0x48>)
 800465e:	f001 faa3 	bl	8005ba8 <iprintf>
        Paint.Rotate = Rotate;
 8004662:	4a07      	ldr	r2, [pc, #28]	; (8004680 <_Z15Paint_SetRotatet+0x4c>)
 8004664:	88fb      	ldrh	r3, [r7, #6]
 8004666:	81d3      	strh	r3, [r2, #14]
 8004668:	e003      	b.n	8004672 <_Z15Paint_SetRotatet+0x3e>
    } else {
        Debug("rotate = 0, 90, 180, 270\r\n");
 800466a:	4806      	ldr	r0, [pc, #24]	; (8004684 <_Z15Paint_SetRotatet+0x50>)
 800466c:	f001 fb02 	bl	8005c74 <puts>
      //  exit(0);
    }
}
 8004670:	bf00      	nop
 8004672:	bf00      	nop
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	08007ed4 	.word	0x08007ed4
 8004680:	20000370 	.word	0x20000370
 8004684:	08007ef4 	.word	0x08007ef4

08004688 <_Z14Paint_SetPixelttt>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	80fb      	strh	r3, [r7, #6]
 8004692:	460b      	mov	r3, r1
 8004694:	80bb      	strh	r3, [r7, #4]
 8004696:	4613      	mov	r3, r2
 8004698:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800469a:	4b55      	ldr	r3, [pc, #340]	; (80047f0 <_Z14Paint_SetPixelttt+0x168>)
 800469c:	889b      	ldrh	r3, [r3, #4]
 800469e:	b29b      	uxth	r3, r3
 80046a0:	88fa      	ldrh	r2, [r7, #6]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d805      	bhi.n	80046b2 <_Z14Paint_SetPixelttt+0x2a>
 80046a6:	4b52      	ldr	r3, [pc, #328]	; (80047f0 <_Z14Paint_SetPixelttt+0x168>)
 80046a8:	88db      	ldrh	r3, [r3, #6]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	88ba      	ldrh	r2, [r7, #4]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d901      	bls.n	80046b6 <_Z14Paint_SetPixelttt+0x2e>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <_Z14Paint_SetPixelttt+0x30>
 80046b6:	2300      	movs	r3, #0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <_Z14Paint_SetPixelttt+0x3c>
        Debug("Exceeding display boundaries\r\n");
 80046bc:	484d      	ldr	r0, [pc, #308]	; (80047f4 <_Z14Paint_SetPixelttt+0x16c>)
 80046be:	f001 fad9 	bl	8005c74 <puts>
        return;
 80046c2:	e092      	b.n	80047ea <_Z14Paint_SetPixelttt+0x162>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 80046c4:	4b4a      	ldr	r3, [pc, #296]	; (80047f0 <_Z14Paint_SetPixelttt+0x168>)
 80046c6:	89db      	ldrh	r3, [r3, #14]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80046ce:	d02e      	beq.n	800472e <_Z14Paint_SetPixelttt+0xa6>
 80046d0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80046d4:	f300 8086 	bgt.w	80047e4 <_Z14Paint_SetPixelttt+0x15c>
 80046d8:	2bb4      	cmp	r3, #180	; 0xb4
 80046da:	d017      	beq.n	800470c <_Z14Paint_SetPixelttt+0x84>
 80046dc:	2bb4      	cmp	r3, #180	; 0xb4
 80046de:	f300 8081 	bgt.w	80047e4 <_Z14Paint_SetPixelttt+0x15c>
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <_Z14Paint_SetPixelttt+0x64>
 80046e6:	2b5a      	cmp	r3, #90	; 0x5a
 80046e8:	d005      	beq.n	80046f6 <_Z14Paint_SetPixelttt+0x6e>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 80046ea:	e07b      	b.n	80047e4 <_Z14Paint_SetPixelttt+0x15c>
        X = Xpoint;
 80046ec:	88fb      	ldrh	r3, [r7, #6]
 80046ee:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 80046f0:	88bb      	ldrh	r3, [r7, #4]
 80046f2:	81bb      	strh	r3, [r7, #12]
        break;
 80046f4:	e026      	b.n	8004744 <_Z14Paint_SetPixelttt+0xbc>
        X = Paint.WidthMemory - Ypoint - 1;
 80046f6:	4b3e      	ldr	r3, [pc, #248]	; (80047f0 <_Z14Paint_SetPixelttt+0x168>)
 80046f8:	891b      	ldrh	r3, [r3, #8]
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	88bb      	ldrh	r3, [r7, #4]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8004706:	88fb      	ldrh	r3, [r7, #6]
 8004708:	81bb      	strh	r3, [r7, #12]
        break;
 800470a:	e01b      	b.n	8004744 <_Z14Paint_SetPixelttt+0xbc>
        X = Paint.WidthMemory - Xpoint - 1;
 800470c:	4b38      	ldr	r3, [pc, #224]	; (80047f0 <_Z14Paint_SetPixelttt+0x168>)
 800470e:	891b      	ldrh	r3, [r3, #8]
 8004710:	b29a      	uxth	r2, r3
 8004712:	88fb      	ldrh	r3, [r7, #6]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 800471c:	4b34      	ldr	r3, [pc, #208]	; (80047f0 <_Z14Paint_SetPixelttt+0x168>)
 800471e:	895b      	ldrh	r3, [r3, #10]
 8004720:	b29a      	uxth	r2, r3
 8004722:	88bb      	ldrh	r3, [r7, #4]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	b29b      	uxth	r3, r3
 8004728:	3b01      	subs	r3, #1
 800472a:	81bb      	strh	r3, [r7, #12]
        break;
 800472c:	e00a      	b.n	8004744 <_Z14Paint_SetPixelttt+0xbc>
        X = Ypoint;
 800472e:	88bb      	ldrh	r3, [r7, #4]
 8004730:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8004732:	4b2f      	ldr	r3, [pc, #188]	; (80047f0 <_Z14Paint_SetPixelttt+0x168>)
 8004734:	895b      	ldrh	r3, [r3, #10]
 8004736:	b29a      	uxth	r2, r3
 8004738:	88fb      	ldrh	r3, [r7, #6]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	81bb      	strh	r3, [r7, #12]
        break;
 8004742:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8004744:	4b2a      	ldr	r3, [pc, #168]	; (80047f0 <_Z14Paint_SetPixelttt+0x168>)
 8004746:	8a1b      	ldrh	r3, [r3, #16]
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b03      	cmp	r3, #3
 800474c:	d84c      	bhi.n	80047e8 <_Z14Paint_SetPixelttt+0x160>
 800474e:	a201      	add	r2, pc, #4	; (adr r2, 8004754 <_Z14Paint_SetPixelttt+0xcc>)
 8004750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004754:	080047ab 	.word	0x080047ab
 8004758:	08004765 	.word	0x08004765
 800475c:	08004777 	.word	0x08004777
 8004760:	08004789 	.word	0x08004789
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8004764:	4b22      	ldr	r3, [pc, #136]	; (80047f0 <_Z14Paint_SetPixelttt+0x168>)
 8004766:	891b      	ldrh	r3, [r3, #8]
 8004768:	b29a      	uxth	r2, r3
 800476a:	89fb      	ldrh	r3, [r7, #14]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	b29b      	uxth	r3, r3
 8004770:	3b01      	subs	r3, #1
 8004772:	81fb      	strh	r3, [r7, #14]
        break;
 8004774:	e01a      	b.n	80047ac <_Z14Paint_SetPixelttt+0x124>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8004776:	4b1e      	ldr	r3, [pc, #120]	; (80047f0 <_Z14Paint_SetPixelttt+0x168>)
 8004778:	895b      	ldrh	r3, [r3, #10]
 800477a:	b29a      	uxth	r2, r3
 800477c:	89bb      	ldrh	r3, [r7, #12]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	b29b      	uxth	r3, r3
 8004782:	3b01      	subs	r3, #1
 8004784:	81bb      	strh	r3, [r7, #12]
        break;
 8004786:	e011      	b.n	80047ac <_Z14Paint_SetPixelttt+0x124>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8004788:	4b19      	ldr	r3, [pc, #100]	; (80047f0 <_Z14Paint_SetPixelttt+0x168>)
 800478a:	891b      	ldrh	r3, [r3, #8]
 800478c:	b29a      	uxth	r2, r3
 800478e:	89fb      	ldrh	r3, [r7, #14]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	b29b      	uxth	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8004798:	4b15      	ldr	r3, [pc, #84]	; (80047f0 <_Z14Paint_SetPixelttt+0x168>)
 800479a:	895b      	ldrh	r3, [r3, #10]
 800479c:	b29a      	uxth	r2, r3
 800479e:	89bb      	ldrh	r3, [r7, #12]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	3b01      	subs	r3, #1
 80047a6:	81bb      	strh	r3, [r7, #12]
        break;
 80047a8:	e000      	b.n	80047ac <_Z14Paint_SetPixelttt+0x124>
        break;
 80047aa:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 80047ac:	4b10      	ldr	r3, [pc, #64]	; (80047f0 <_Z14Paint_SetPixelttt+0x168>)
 80047ae:	891b      	ldrh	r3, [r3, #8]
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	89fa      	ldrh	r2, [r7, #14]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d805      	bhi.n	80047c4 <_Z14Paint_SetPixelttt+0x13c>
 80047b8:	4b0d      	ldr	r3, [pc, #52]	; (80047f0 <_Z14Paint_SetPixelttt+0x168>)
 80047ba:	895b      	ldrh	r3, [r3, #10]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	89ba      	ldrh	r2, [r7, #12]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d901      	bls.n	80047c8 <_Z14Paint_SetPixelttt+0x140>
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <_Z14Paint_SetPixelttt+0x142>
 80047c8:	2300      	movs	r3, #0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <_Z14Paint_SetPixelttt+0x14e>
        Debug("Exceeding display boundaries\r\n");
 80047ce:	4809      	ldr	r0, [pc, #36]	; (80047f4 <_Z14Paint_SetPixelttt+0x16c>)
 80047d0:	f001 fa50 	bl	8005c74 <puts>
        return;
 80047d4:	e009      	b.n	80047ea <_Z14Paint_SetPixelttt+0x162>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 80047d6:	4b08      	ldr	r3, [pc, #32]	; (80047f8 <_Z14Paint_SetPixelttt+0x170>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	887a      	ldrh	r2, [r7, #2]
 80047dc:	89b9      	ldrh	r1, [r7, #12]
 80047de:	89f8      	ldrh	r0, [r7, #14]
 80047e0:	4798      	blx	r3
 80047e2:	e002      	b.n	80047ea <_Z14Paint_SetPixelttt+0x162>
        return;
 80047e4:	bf00      	nop
 80047e6:	e000      	b.n	80047ea <_Z14Paint_SetPixelttt+0x162>
        return;
 80047e8:	bf00      	nop
}
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	20000370 	.word	0x20000370
 80047f4:	08007fb0 	.word	0x08007fb0
 80047f8:	20000388 	.word	0x20000388

080047fc <_Z11Paint_Cleart>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	4603      	mov	r3, r0
 8004804:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 8004806:	4b04      	ldr	r3, [pc, #16]	; (8004818 <_Z11Paint_Cleart+0x1c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	88fa      	ldrh	r2, [r7, #6]
 800480c:	4610      	mov	r0, r2
 800480e:	4798      	blx	r3
}
 8004810:	bf00      	nop
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	2000038c 	.word	0x2000038c

0800481c <_Z14Paint_DrawCharttcP6_tFonttt>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af00      	add	r7, sp, #0
 8004822:	607b      	str	r3, [r7, #4]
 8004824:	4603      	mov	r3, r0
 8004826:	81fb      	strh	r3, [r7, #14]
 8004828:	460b      	mov	r3, r1
 800482a:	81bb      	strh	r3, [r7, #12]
 800482c:	4613      	mov	r3, r2
 800482e:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8004830:	4b4f      	ldr	r3, [pc, #316]	; (8004970 <_Z14Paint_DrawCharttcP6_tFonttt+0x154>)
 8004832:	889b      	ldrh	r3, [r3, #4]
 8004834:	b29b      	uxth	r3, r3
 8004836:	89fa      	ldrh	r2, [r7, #14]
 8004838:	429a      	cmp	r2, r3
 800483a:	d805      	bhi.n	8004848 <_Z14Paint_DrawCharttcP6_tFonttt+0x2c>
 800483c:	4b4c      	ldr	r3, [pc, #304]	; (8004970 <_Z14Paint_DrawCharttcP6_tFonttt+0x154>)
 800483e:	88db      	ldrh	r3, [r3, #6]
 8004840:	b29b      	uxth	r3, r3
 8004842:	89ba      	ldrh	r2, [r7, #12]
 8004844:	429a      	cmp	r2, r3
 8004846:	d901      	bls.n	800484c <_Z14Paint_DrawCharttcP6_tFonttt+0x30>
 8004848:	2301      	movs	r3, #1
 800484a:	e000      	b.n	800484e <_Z14Paint_DrawCharttcP6_tFonttt+0x32>
 800484c:	2300      	movs	r3, #0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <_Z14Paint_DrawCharttcP6_tFonttt+0x3e>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8004852:	4848      	ldr	r0, [pc, #288]	; (8004974 <_Z14Paint_DrawCharttcP6_tFonttt+0x158>)
 8004854:	f001 fa0e 	bl	8005c74 <puts>
        return;
 8004858:	e086      	b.n	8004968 <_Z14Paint_DrawCharttcP6_tFonttt+0x14c>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 800485a:	7afb      	ldrb	r3, [r7, #11]
 800485c:	3b20      	subs	r3, #32
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	88d2      	ldrh	r2, [r2, #6]
 8004862:	fb02 f303 	mul.w	r3, r2, r3
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	8892      	ldrh	r2, [r2, #4]
 800486a:	08d2      	lsrs	r2, r2, #3
 800486c:	b292      	uxth	r2, r2
 800486e:	4611      	mov	r1, r2
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	8892      	ldrh	r2, [r2, #4]
 8004874:	f002 0207 	and.w	r2, r2, #7
 8004878:	2a00      	cmp	r2, #0
 800487a:	d001      	beq.n	8004880 <_Z14Paint_DrawCharttcP6_tFonttt+0x64>
 800487c:	2201      	movs	r2, #1
 800487e:	e000      	b.n	8004882 <_Z14Paint_DrawCharttcP6_tFonttt+0x66>
 8004880:	2200      	movs	r2, #0
 8004882:	440a      	add	r2, r1
 8004884:	fb02 f303 	mul.w	r3, r2, r3
 8004888:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	4413      	add	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8004894:	2300      	movs	r3, #0
 8004896:	83fb      	strh	r3, [r7, #30]
 8004898:	e061      	b.n	800495e <_Z14Paint_DrawCharttcP6_tFonttt+0x142>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800489a:	2300      	movs	r3, #0
 800489c:	83bb      	strh	r3, [r7, #28]
 800489e:	e04d      	b.n	800493c <_Z14Paint_DrawCharttcP6_tFonttt+0x120>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80048a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80048a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d118      	bne.n	80048dc <_Z14Paint_DrawCharttcP6_tFonttt+0xc0>
                if (*ptr & (0x80 >> (Column % 8)))
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	4619      	mov	r1, r3
 80048b0:	8bbb      	ldrh	r3, [r7, #28]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	2280      	movs	r2, #128	; 0x80
 80048b8:	fa42 f303 	asr.w	r3, r2, r3
 80048bc:	400b      	ands	r3, r1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d031      	beq.n	8004926 <_Z14Paint_DrawCharttcP6_tFonttt+0x10a>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80048c2:	89fa      	ldrh	r2, [r7, #14]
 80048c4:	8bbb      	ldrh	r3, [r7, #28]
 80048c6:	4413      	add	r3, r2
 80048c8:	b298      	uxth	r0, r3
 80048ca:	89ba      	ldrh	r2, [r7, #12]
 80048cc:	8bfb      	ldrh	r3, [r7, #30]
 80048ce:	4413      	add	r3, r2
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80048d4:	4619      	mov	r1, r3
 80048d6:	f7ff fed7 	bl	8004688 <_Z14Paint_SetPixelttt>
 80048da:	e024      	b.n	8004926 <_Z14Paint_DrawCharttcP6_tFonttt+0x10a>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	4619      	mov	r1, r3
 80048e2:	8bbb      	ldrh	r3, [r7, #28]
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	2280      	movs	r2, #128	; 0x80
 80048ea:	fa42 f303 	asr.w	r3, r2, r3
 80048ee:	400b      	ands	r3, r1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00c      	beq.n	800490e <_Z14Paint_DrawCharttcP6_tFonttt+0xf2>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80048f4:	89fa      	ldrh	r2, [r7, #14]
 80048f6:	8bbb      	ldrh	r3, [r7, #28]
 80048f8:	4413      	add	r3, r2
 80048fa:	b298      	uxth	r0, r3
 80048fc:	89ba      	ldrh	r2, [r7, #12]
 80048fe:	8bfb      	ldrh	r3, [r7, #30]
 8004900:	4413      	add	r3, r2
 8004902:	b29b      	uxth	r3, r3
 8004904:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004906:	4619      	mov	r1, r3
 8004908:	f7ff febe 	bl	8004688 <_Z14Paint_SetPixelttt>
 800490c:	e00b      	b.n	8004926 <_Z14Paint_DrawCharttcP6_tFonttt+0x10a>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800490e:	89fa      	ldrh	r2, [r7, #14]
 8004910:	8bbb      	ldrh	r3, [r7, #28]
 8004912:	4413      	add	r3, r2
 8004914:	b298      	uxth	r0, r3
 8004916:	89ba      	ldrh	r2, [r7, #12]
 8004918:	8bfb      	ldrh	r3, [r7, #30]
 800491a:	4413      	add	r3, r2
 800491c:	b29b      	uxth	r3, r3
 800491e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004920:	4619      	mov	r1, r3
 8004922:	f7ff feb1 	bl	8004688 <_Z14Paint_SetPixelttt>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8004926:	8bbb      	ldrh	r3, [r7, #28]
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	2b07      	cmp	r3, #7
 800492e:	d102      	bne.n	8004936 <_Z14Paint_DrawCharttcP6_tFonttt+0x11a>
                ptr++;
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	3301      	adds	r3, #1
 8004934:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8004936:	8bbb      	ldrh	r3, [r7, #28]
 8004938:	3301      	adds	r3, #1
 800493a:	83bb      	strh	r3, [r7, #28]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	889b      	ldrh	r3, [r3, #4]
 8004940:	8bba      	ldrh	r2, [r7, #28]
 8004942:	429a      	cmp	r2, r3
 8004944:	d3ac      	bcc.n	80048a0 <_Z14Paint_DrawCharttcP6_tFonttt+0x84>
        }// Write a line
        if (Font->Width % 8 != 0)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	889b      	ldrh	r3, [r3, #4]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <_Z14Paint_DrawCharttcP6_tFonttt+0x13c>
            ptr++;
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	3301      	adds	r3, #1
 8004956:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8004958:	8bfb      	ldrh	r3, [r7, #30]
 800495a:	3301      	adds	r3, #1
 800495c:	83fb      	strh	r3, [r7, #30]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	88db      	ldrh	r3, [r3, #6]
 8004962:	8bfa      	ldrh	r2, [r7, #30]
 8004964:	429a      	cmp	r2, r3
 8004966:	d398      	bcc.n	800489a <_Z14Paint_DrawCharttcP6_tFonttt+0x7e>
    }// Write all
}
 8004968:	3720      	adds	r7, #32
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	20000370 	.word	0x20000370
 8004974:	080080cc 	.word	0x080080cc

08004978 <_Z19Paint_DrawString_ENttPKcP6_tFonttt>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af02      	add	r7, sp, #8
 800497e:	60ba      	str	r2, [r7, #8]
 8004980:	607b      	str	r3, [r7, #4]
 8004982:	4603      	mov	r3, r0
 8004984:	81fb      	strh	r3, [r7, #14]
 8004986:	460b      	mov	r3, r1
 8004988:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 800498a:	89fb      	ldrh	r3, [r7, #14]
 800498c:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 800498e:	89bb      	ldrh	r3, [r7, #12]
 8004990:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8004992:	4b2b      	ldr	r3, [pc, #172]	; (8004a40 <_Z19Paint_DrawString_ENttPKcP6_tFonttt+0xc8>)
 8004994:	889b      	ldrh	r3, [r3, #4]
 8004996:	b29b      	uxth	r3, r3
 8004998:	89fa      	ldrh	r2, [r7, #14]
 800499a:	429a      	cmp	r2, r3
 800499c:	d805      	bhi.n	80049aa <_Z19Paint_DrawString_ENttPKcP6_tFonttt+0x32>
 800499e:	4b28      	ldr	r3, [pc, #160]	; (8004a40 <_Z19Paint_DrawString_ENttPKcP6_tFonttt+0xc8>)
 80049a0:	88db      	ldrh	r3, [r3, #6]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	89ba      	ldrh	r2, [r7, #12]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d901      	bls.n	80049ae <_Z19Paint_DrawString_ENttPKcP6_tFonttt+0x36>
 80049aa:	2301      	movs	r3, #1
 80049ac:	e000      	b.n	80049b0 <_Z19Paint_DrawString_ENttPKcP6_tFonttt+0x38>
 80049ae:	2300      	movs	r3, #0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d03d      	beq.n	8004a30 <_Z19Paint_DrawString_ENttPKcP6_tFonttt+0xb8>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 80049b4:	4823      	ldr	r0, [pc, #140]	; (8004a44 <_Z19Paint_DrawString_ENttPKcP6_tFonttt+0xcc>)
 80049b6:	f001 f95d 	bl	8005c74 <puts>
        return;
 80049ba:	e03d      	b.n	8004a38 <_Z19Paint_DrawString_ENttPKcP6_tFonttt+0xc0>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 80049bc:	8afb      	ldrh	r3, [r7, #22]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	8892      	ldrh	r2, [r2, #4]
 80049c2:	4413      	add	r3, r2
 80049c4:	4a1e      	ldr	r2, [pc, #120]	; (8004a40 <_Z19Paint_DrawString_ENttPKcP6_tFonttt+0xc8>)
 80049c6:	8892      	ldrh	r2, [r2, #4]
 80049c8:	b292      	uxth	r2, r2
 80049ca:	4293      	cmp	r3, r2
 80049cc:	bfcc      	ite	gt
 80049ce:	2301      	movgt	r3, #1
 80049d0:	2300      	movle	r3, #0
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d006      	beq.n	80049e6 <_Z19Paint_DrawString_ENttPKcP6_tFonttt+0x6e>
            Xpoint = Xstart;
 80049d8:	89fb      	ldrh	r3, [r7, #14]
 80049da:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	88da      	ldrh	r2, [r3, #6]
 80049e0:	8abb      	ldrh	r3, [r7, #20]
 80049e2:	4413      	add	r3, r2
 80049e4:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 80049e6:	8abb      	ldrh	r3, [r7, #20]
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	88d2      	ldrh	r2, [r2, #6]
 80049ec:	4413      	add	r3, r2
 80049ee:	4a14      	ldr	r2, [pc, #80]	; (8004a40 <_Z19Paint_DrawString_ENttPKcP6_tFonttt+0xc8>)
 80049f0:	88d2      	ldrh	r2, [r2, #6]
 80049f2:	b292      	uxth	r2, r2
 80049f4:	4293      	cmp	r3, r2
 80049f6:	bfcc      	ite	gt
 80049f8:	2301      	movgt	r3, #1
 80049fa:	2300      	movle	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <_Z19Paint_DrawString_ENttPKcP6_tFonttt+0x92>
            Xpoint = Xstart;
 8004a02:	89fb      	ldrh	r3, [r7, #14]
 8004a04:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8004a06:	89bb      	ldrh	r3, [r7, #12]
 8004a08:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	781a      	ldrb	r2, [r3, #0]
 8004a0e:	8ab9      	ldrh	r1, [r7, #20]
 8004a10:	8af8      	ldrh	r0, [r7, #22]
 8004a12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a14:	9301      	str	r3, [sp, #4]
 8004a16:	8c3b      	ldrh	r3, [r7, #32]
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f7ff fefe 	bl	800481c <_Z14Paint_DrawCharttcP6_tFonttt>

        //The next character of the address
        pString ++;
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	3301      	adds	r3, #1
 8004a24:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	889a      	ldrh	r2, [r3, #4]
 8004a2a:	8afb      	ldrh	r3, [r7, #22]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1c1      	bne.n	80049bc <_Z19Paint_DrawString_ENttPKcP6_tFonttt+0x44>
    }
}
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20000370 	.word	0x20000370
 8004a44:	0800810c 	.word	0x0800810c

08004a48 <_ZL13LCD_2IN_Resetv>:
/*******************************************************************************
function:
	Hardware reset
*******************************************************************************/
static void LCD_2IN_Reset(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
	LCD_2IN_RST_1;
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	2140      	movs	r1, #64	; 0x40
 8004a50:	480b      	ldr	r0, [pc, #44]	; (8004a80 <_ZL13LCD_2IN_Resetv+0x38>)
 8004a52:	f7fd fd0b 	bl	800246c <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 8004a56:	2064      	movs	r0, #100	; 0x64
 8004a58:	f7fd fa62 	bl	8001f20 <HAL_Delay>
	LCD_2IN_RST_0;
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2140      	movs	r1, #64	; 0x40
 8004a60:	4807      	ldr	r0, [pc, #28]	; (8004a80 <_ZL13LCD_2IN_Resetv+0x38>)
 8004a62:	f7fd fd03 	bl	800246c <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 8004a66:	2064      	movs	r0, #100	; 0x64
 8004a68:	f7fd fa5a 	bl	8001f20 <HAL_Delay>
	LCD_2IN_RST_1;
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	2140      	movs	r1, #64	; 0x40
 8004a70:	4803      	ldr	r0, [pc, #12]	; (8004a80 <_ZL13LCD_2IN_Resetv+0x38>)
 8004a72:	f7fd fcfb 	bl	800246c <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 8004a76:	2064      	movs	r0, #100	; 0x64
 8004a78:	f7fd fa52 	bl	8001f20 <HAL_Delay>
}
 8004a7c:	bf00      	nop
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40020400 	.word	0x40020400

08004a84 <_ZL21LCD_2IN_Write_Commandh>:
/*******************************************************************************
function:
		Write data and commands
*******************************************************************************/
static void LCD_2IN_Write_Command(UBYTE data)	 
{	
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	71fb      	strb	r3, [r7, #7]
	LCD_2IN_CS_0;
 8004a8e:	2200      	movs	r2, #0
 8004a90:	2180      	movs	r1, #128	; 0x80
 8004a92:	4808      	ldr	r0, [pc, #32]	; (8004ab4 <_ZL21LCD_2IN_Write_Commandh+0x30>)
 8004a94:	f7fd fcea 	bl	800246c <HAL_GPIO_WritePin>
	LCD_2IN_DC_0;
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2120      	movs	r1, #32
 8004a9c:	4805      	ldr	r0, [pc, #20]	; (8004ab4 <_ZL21LCD_2IN_Write_Commandh+0x30>)
 8004a9e:	f7fd fce5 	bl	800246c <HAL_GPIO_WritePin>
	DEV_SPI_WRITE(data);
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff fd2b 	bl	8004500 <_Z13DEV_SPI_WRiteh>
}
 8004aaa:	bf00      	nop
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40020400 	.word	0x40020400

08004ab8 <_ZL22LCD_2IN_WriteData_Byteh>:

static void LCD_2IN_WriteData_Byte(UBYTE data) 
{	
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	4603      	mov	r3, r0
 8004ac0:	71fb      	strb	r3, [r7, #7]
	LCD_2IN_CS_0;
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2180      	movs	r1, #128	; 0x80
 8004ac6:	480a      	ldr	r0, [pc, #40]	; (8004af0 <_ZL22LCD_2IN_WriteData_Byteh+0x38>)
 8004ac8:	f7fd fcd0 	bl	800246c <HAL_GPIO_WritePin>
	LCD_2IN_DC_1;
 8004acc:	2201      	movs	r2, #1
 8004ace:	2120      	movs	r1, #32
 8004ad0:	4807      	ldr	r0, [pc, #28]	; (8004af0 <_ZL22LCD_2IN_WriteData_Byteh+0x38>)
 8004ad2:	f7fd fccb 	bl	800246c <HAL_GPIO_WritePin>
	DEV_SPI_WRITE(data);  
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7ff fd11 	bl	8004500 <_Z13DEV_SPI_WRiteh>
	LCD_2IN_CS_1;
 8004ade:	2201      	movs	r2, #1
 8004ae0:	2180      	movs	r1, #128	; 0x80
 8004ae2:	4803      	ldr	r0, [pc, #12]	; (8004af0 <_ZL22LCD_2IN_WriteData_Byteh+0x38>)
 8004ae4:	f7fd fcc2 	bl	800246c <HAL_GPIO_WritePin>
}  
 8004ae8:	bf00      	nop
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40020400 	.word	0x40020400

08004af4 <_Z22LCD_2IN_WriteData_Wordt>:

void LCD_2IN_WriteData_Word(UWORD data)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	80fb      	strh	r3, [r7, #6]
	LCD_2IN_CS_0;
 8004afe:	2200      	movs	r2, #0
 8004b00:	2180      	movs	r1, #128	; 0x80
 8004b02:	480e      	ldr	r0, [pc, #56]	; (8004b3c <_Z22LCD_2IN_WriteData_Wordt+0x48>)
 8004b04:	f7fd fcb2 	bl	800246c <HAL_GPIO_WritePin>
	LCD_2IN_DC_1;
 8004b08:	2201      	movs	r2, #1
 8004b0a:	2120      	movs	r1, #32
 8004b0c:	480b      	ldr	r0, [pc, #44]	; (8004b3c <_Z22LCD_2IN_WriteData_Wordt+0x48>)
 8004b0e:	f7fd fcad 	bl	800246c <HAL_GPIO_WritePin>
	DEV_SPI_WRITE((data>>8) & 0xff);
 8004b12:	88fb      	ldrh	r3, [r7, #6]
 8004b14:	0a1b      	lsrs	r3, r3, #8
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7ff fcf0 	bl	8004500 <_Z13DEV_SPI_WRiteh>
	DEV_SPI_WRITE(data);
 8004b20:	88fb      	ldrh	r3, [r7, #6]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff fceb 	bl	8004500 <_Z13DEV_SPI_WRiteh>
	LCD_2IN_CS_1;
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	2180      	movs	r1, #128	; 0x80
 8004b2e:	4803      	ldr	r0, [pc, #12]	; (8004b3c <_Z22LCD_2IN_WriteData_Wordt+0x48>)
 8004b30:	f7fd fc9c 	bl	800246c <HAL_GPIO_WritePin>
}	  
 8004b34:	bf00      	nop
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40020400 	.word	0x40020400

08004b40 <_Z12LCD_2IN_Initv>:
/******************************************************************************
function:	
		Common register initialization
******************************************************************************/
void LCD_2IN_Init(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
	LCD_2IN_Reset();
 8004b44:	f7ff ff80 	bl	8004a48 <_ZL13LCD_2IN_Resetv>

	LCD_2IN_Write_Command(0x36);
 8004b48:	2036      	movs	r0, #54	; 0x36
 8004b4a:	f7ff ff9b 	bl	8004a84 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0x00); 
 8004b4e:	2000      	movs	r0, #0
 8004b50:	f7ff ffb2 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0x3A); 
 8004b54:	203a      	movs	r0, #58	; 0x3a
 8004b56:	f7ff ff95 	bl	8004a84 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0x05);
 8004b5a:	2005      	movs	r0, #5
 8004b5c:	f7ff ffac 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0x21); 
 8004b60:	2021      	movs	r0, #33	; 0x21
 8004b62:	f7ff ff8f 	bl	8004a84 <_ZL21LCD_2IN_Write_Commandh>

	LCD_2IN_Write_Command(0x2A);
 8004b66:	202a      	movs	r0, #42	; 0x2a
 8004b68:	f7ff ff8c 	bl	8004a84 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0x00);
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	f7ff ffa3 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x00);
 8004b72:	2000      	movs	r0, #0
 8004b74:	f7ff ffa0 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x01);
 8004b78:	2001      	movs	r0, #1
 8004b7a:	f7ff ff9d 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x3F);
 8004b7e:	203f      	movs	r0, #63	; 0x3f
 8004b80:	f7ff ff9a 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0x2B);
 8004b84:	202b      	movs	r0, #43	; 0x2b
 8004b86:	f7ff ff7d 	bl	8004a84 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0x00);
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	f7ff ff94 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x00);
 8004b90:	2000      	movs	r0, #0
 8004b92:	f7ff ff91 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x00);
 8004b96:	2000      	movs	r0, #0
 8004b98:	f7ff ff8e 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0xEF);
 8004b9c:	20ef      	movs	r0, #239	; 0xef
 8004b9e:	f7ff ff8b 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0xB2);
 8004ba2:	20b2      	movs	r0, #178	; 0xb2
 8004ba4:	f7ff ff6e 	bl	8004a84 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0x0C);
 8004ba8:	200c      	movs	r0, #12
 8004baa:	f7ff ff85 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x0C);
 8004bae:	200c      	movs	r0, #12
 8004bb0:	f7ff ff82 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x00);
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	f7ff ff7f 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x33);
 8004bba:	2033      	movs	r0, #51	; 0x33
 8004bbc:	f7ff ff7c 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x33);
 8004bc0:	2033      	movs	r0, #51	; 0x33
 8004bc2:	f7ff ff79 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0xB7);
 8004bc6:	20b7      	movs	r0, #183	; 0xb7
 8004bc8:	f7ff ff5c 	bl	8004a84 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0x35); 
 8004bcc:	2035      	movs	r0, #53	; 0x35
 8004bce:	f7ff ff73 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0xBB);
 8004bd2:	20bb      	movs	r0, #187	; 0xbb
 8004bd4:	f7ff ff56 	bl	8004a84 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0x1F);
 8004bd8:	201f      	movs	r0, #31
 8004bda:	f7ff ff6d 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0xC0);
 8004bde:	20c0      	movs	r0, #192	; 0xc0
 8004be0:	f7ff ff50 	bl	8004a84 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0x2C);
 8004be4:	202c      	movs	r0, #44	; 0x2c
 8004be6:	f7ff ff67 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0xC2);
 8004bea:	20c2      	movs	r0, #194	; 0xc2
 8004bec:	f7ff ff4a 	bl	8004a84 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0x01);
 8004bf0:	2001      	movs	r0, #1
 8004bf2:	f7ff ff61 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0xC3);
 8004bf6:	20c3      	movs	r0, #195	; 0xc3
 8004bf8:	f7ff ff44 	bl	8004a84 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0x12);   
 8004bfc:	2012      	movs	r0, #18
 8004bfe:	f7ff ff5b 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0xC4);
 8004c02:	20c4      	movs	r0, #196	; 0xc4
 8004c04:	f7ff ff3e 	bl	8004a84 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0x20);
 8004c08:	2020      	movs	r0, #32
 8004c0a:	f7ff ff55 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0xC6);
 8004c0e:	20c6      	movs	r0, #198	; 0xc6
 8004c10:	f7ff ff38 	bl	8004a84 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0x0F); 
 8004c14:	200f      	movs	r0, #15
 8004c16:	f7ff ff4f 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0xD0);
 8004c1a:	20d0      	movs	r0, #208	; 0xd0
 8004c1c:	f7ff ff32 	bl	8004a84 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0xA4);
 8004c20:	20a4      	movs	r0, #164	; 0xa4
 8004c22:	f7ff ff49 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0xA1);
 8004c26:	20a1      	movs	r0, #161	; 0xa1
 8004c28:	f7ff ff46 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0xE0);
 8004c2c:	20e0      	movs	r0, #224	; 0xe0
 8004c2e:	f7ff ff29 	bl	8004a84 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0xD0);
 8004c32:	20d0      	movs	r0, #208	; 0xd0
 8004c34:	f7ff ff40 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x08);
 8004c38:	2008      	movs	r0, #8
 8004c3a:	f7ff ff3d 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x11);
 8004c3e:	2011      	movs	r0, #17
 8004c40:	f7ff ff3a 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x08);
 8004c44:	2008      	movs	r0, #8
 8004c46:	f7ff ff37 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x0C);
 8004c4a:	200c      	movs	r0, #12
 8004c4c:	f7ff ff34 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x15);
 8004c50:	2015      	movs	r0, #21
 8004c52:	f7ff ff31 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x39);
 8004c56:	2039      	movs	r0, #57	; 0x39
 8004c58:	f7ff ff2e 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x33);
 8004c5c:	2033      	movs	r0, #51	; 0x33
 8004c5e:	f7ff ff2b 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x50);
 8004c62:	2050      	movs	r0, #80	; 0x50
 8004c64:	f7ff ff28 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x36);
 8004c68:	2036      	movs	r0, #54	; 0x36
 8004c6a:	f7ff ff25 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x13);
 8004c6e:	2013      	movs	r0, #19
 8004c70:	f7ff ff22 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x14);
 8004c74:	2014      	movs	r0, #20
 8004c76:	f7ff ff1f 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x29);
 8004c7a:	2029      	movs	r0, #41	; 0x29
 8004c7c:	f7ff ff1c 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x2D);
 8004c80:	202d      	movs	r0, #45	; 0x2d
 8004c82:	f7ff ff19 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0xE1);
 8004c86:	20e1      	movs	r0, #225	; 0xe1
 8004c88:	f7ff fefc 	bl	8004a84 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(0xD0);
 8004c8c:	20d0      	movs	r0, #208	; 0xd0
 8004c8e:	f7ff ff13 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x08);
 8004c92:	2008      	movs	r0, #8
 8004c94:	f7ff ff10 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x10);
 8004c98:	2010      	movs	r0, #16
 8004c9a:	f7ff ff0d 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x08);
 8004c9e:	2008      	movs	r0, #8
 8004ca0:	f7ff ff0a 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x06);
 8004ca4:	2006      	movs	r0, #6
 8004ca6:	f7ff ff07 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x06);
 8004caa:	2006      	movs	r0, #6
 8004cac:	f7ff ff04 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x39);
 8004cb0:	2039      	movs	r0, #57	; 0x39
 8004cb2:	f7ff ff01 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x44);
 8004cb6:	2044      	movs	r0, #68	; 0x44
 8004cb8:	f7ff fefe 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x51);
 8004cbc:	2051      	movs	r0, #81	; 0x51
 8004cbe:	f7ff fefb 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x0B);
 8004cc2:	200b      	movs	r0, #11
 8004cc4:	f7ff fef8 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x16);
 8004cc8:	2016      	movs	r0, #22
 8004cca:	f7ff fef5 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x14);
 8004cce:	2014      	movs	r0, #20
 8004cd0:	f7ff fef2 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x2F);
 8004cd4:	202f      	movs	r0, #47	; 0x2f
 8004cd6:	f7ff feef 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(0x31);
 8004cda:	2031      	movs	r0, #49	; 0x31
 8004cdc:	f7ff feec 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_Write_Command(0x21);
 8004ce0:	2021      	movs	r0, #33	; 0x21
 8004ce2:	f7ff fecf 	bl	8004a84 <_ZL21LCD_2IN_Write_Commandh>

	LCD_2IN_Write_Command(0x11);
 8004ce6:	2011      	movs	r0, #17
 8004ce8:	f7ff fecc 	bl	8004a84 <_ZL21LCD_2IN_Write_Commandh>

	LCD_2IN_Write_Command(0x29);
 8004cec:	2029      	movs	r0, #41	; 0x29
 8004cee:	f7ff fec9 	bl	8004a84 <_ZL21LCD_2IN_Write_Commandh>
}
 8004cf2:	bf00      	nop
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <_Z17LCD_2IN_SetWindowtttt>:
	  Ystart:	Start UWORD y coordinate
	  Xend  :	End UWORD coordinates
	  Yend  :	End UWORD coordinatesen
******************************************************************************/
void LCD_2IN_SetWindow(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD  Yend)
{ 
 8004cf6:	b590      	push	{r4, r7, lr}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	4604      	mov	r4, r0
 8004cfe:	4608      	mov	r0, r1
 8004d00:	4611      	mov	r1, r2
 8004d02:	461a      	mov	r2, r3
 8004d04:	4623      	mov	r3, r4
 8004d06:	80fb      	strh	r3, [r7, #6]
 8004d08:	4603      	mov	r3, r0
 8004d0a:	80bb      	strh	r3, [r7, #4]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	807b      	strh	r3, [r7, #2]
 8004d10:	4613      	mov	r3, r2
 8004d12:	803b      	strh	r3, [r7, #0]
	LCD_2IN_Write_Command(0x2a);
 8004d14:	202a      	movs	r0, #42	; 0x2a
 8004d16:	f7ff feb5 	bl	8004a84 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(Xstart >>8);
 8004d1a:	88fb      	ldrh	r3, [r7, #6]
 8004d1c:	0a1b      	lsrs	r3, r3, #8
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7ff fec8 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(Xstart & 0xff);
 8004d28:	88fb      	ldrh	r3, [r7, #6]
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff fec3 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte((Xend - 1) >> 8);
 8004d32:	887b      	ldrh	r3, [r7, #2]
 8004d34:	3b01      	subs	r3, #1
 8004d36:	121b      	asrs	r3, r3, #8
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff febc 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte((Xend - 1) & 0xff);
 8004d40:	887b      	ldrh	r3, [r7, #2]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff feb5 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0x2b);
 8004d4e:	202b      	movs	r0, #43	; 0x2b
 8004d50:	f7ff fe98 	bl	8004a84 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(Ystart >>8);
 8004d54:	88bb      	ldrh	r3, [r7, #4]
 8004d56:	0a1b      	lsrs	r3, r3, #8
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff feab 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(Ystart & 0xff);
 8004d62:	88bb      	ldrh	r3, [r7, #4]
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff fea6 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte((Yend - 1) >> 8);
 8004d6c:	883b      	ldrh	r3, [r7, #0]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	121b      	asrs	r3, r3, #8
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7ff fe9f 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte((Yend - 1) & 0xff);
 8004d7a:	883b      	ldrh	r3, [r7, #0]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7ff fe98 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0x2C);
 8004d88:	202c      	movs	r0, #44	; 0x2c
 8004d8a:	f7ff fe7b 	bl	8004a84 <_ZL21LCD_2IN_Write_Commandh>
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd90      	pop	{r4, r7, pc}

08004d96 <_Z17LCD_2IN_SetCursortt>:
	  Xstart: 	Start UWORD x coordinate
	  Ystart:	Start UWORD y coordinate

******************************************************************************/
void LCD_2IN_SetCursor(UWORD X, UWORD Y)
{ 
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b082      	sub	sp, #8
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	460a      	mov	r2, r1
 8004da0:	80fb      	strh	r3, [r7, #6]
 8004da2:	4613      	mov	r3, r2
 8004da4:	80bb      	strh	r3, [r7, #4]
	LCD_2IN_Write_Command(0x2a);
 8004da6:	202a      	movs	r0, #42	; 0x2a
 8004da8:	f7ff fe6c 	bl	8004a84 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(X >> 8);
 8004dac:	88fb      	ldrh	r3, [r7, #6]
 8004dae:	0a1b      	lsrs	r3, r3, #8
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7ff fe7f 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(X);
 8004dba:	88fb      	ldrh	r3, [r7, #6]
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7ff fe7a 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(X >> 8);
 8004dc4:	88fb      	ldrh	r3, [r7, #6]
 8004dc6:	0a1b      	lsrs	r3, r3, #8
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff fe73 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(X);
 8004dd2:	88fb      	ldrh	r3, [r7, #6]
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff fe6e 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0x2b);
 8004ddc:	202b      	movs	r0, #43	; 0x2b
 8004dde:	f7ff fe51 	bl	8004a84 <_ZL21LCD_2IN_Write_Commandh>
	LCD_2IN_WriteData_Byte(Y >> 8);
 8004de2:	88bb      	ldrh	r3, [r7, #4]
 8004de4:	0a1b      	lsrs	r3, r3, #8
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7ff fe64 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(Y);
 8004df0:	88bb      	ldrh	r3, [r7, #4]
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff fe5f 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(Y >> 8);
 8004dfa:	88bb      	ldrh	r3, [r7, #4]
 8004dfc:	0a1b      	lsrs	r3, r3, #8
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff fe58 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>
	LCD_2IN_WriteData_Byte(Y);
 8004e08:	88bb      	ldrh	r3, [r7, #4]
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7ff fe53 	bl	8004ab8 <_ZL22LCD_2IN_WriteData_Byteh>

	LCD_2IN_Write_Command(0x2C);
 8004e12:	202c      	movs	r0, #44	; 0x2c
 8004e14:	f7ff fe36 	bl	8004a84 <_ZL21LCD_2IN_Write_Commandh>
}
 8004e18:	bf00      	nop
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <_Z13LCD_2IN_Cleart>:
function:	Clear screen function, refresh the screen to a certain color
parameter	:
	  Color :		The color you want to clear all the screen
******************************************************************************/
void LCD_2IN_Clear(UWORD Color)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	4603      	mov	r3, r0
 8004e28:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_2IN_SetWindow(0, 0, LCD_2IN_WIDTH, LCD_2IN_HEIGHT);
 8004e2a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004e2e:	22f0      	movs	r2, #240	; 0xf0
 8004e30:	2100      	movs	r1, #0
 8004e32:	2000      	movs	r0, #0
 8004e34:	f7ff ff5f 	bl	8004cf6 <_Z17LCD_2IN_SetWindowtttt>

	DEV_Digital_Write(DEV_DC_PIN, 1);
 8004e38:	2201      	movs	r2, #1
 8004e3a:	2120      	movs	r1, #32
 8004e3c:	480f      	ldr	r0, [pc, #60]	; (8004e7c <_Z13LCD_2IN_Cleart+0x5c>)
 8004e3e:	f7fd fb15 	bl	800246c <HAL_GPIO_WritePin>
	for(i = 0; i < LCD_2IN_WIDTH; i++){
 8004e42:	2300      	movs	r3, #0
 8004e44:	81fb      	strh	r3, [r7, #14]
 8004e46:	e010      	b.n	8004e6a <_Z13LCD_2IN_Cleart+0x4a>
		for(j = 0; j < LCD_2IN_HEIGHT; j++){
 8004e48:	2300      	movs	r3, #0
 8004e4a:	81bb      	strh	r3, [r7, #12]
 8004e4c:	e006      	b.n	8004e5c <_Z13LCD_2IN_Cleart+0x3c>
			LCD_2IN_WriteData_Word(Color);
 8004e4e:	88fb      	ldrh	r3, [r7, #6]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7ff fe4f 	bl	8004af4 <_Z22LCD_2IN_WriteData_Wordt>
		for(j = 0; j < LCD_2IN_HEIGHT; j++){
 8004e56:	89bb      	ldrh	r3, [r7, #12]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	81bb      	strh	r3, [r7, #12]
 8004e5c:	89bb      	ldrh	r3, [r7, #12]
 8004e5e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004e62:	d3f4      	bcc.n	8004e4e <_Z13LCD_2IN_Cleart+0x2e>
	for(i = 0; i < LCD_2IN_WIDTH; i++){
 8004e64:	89fb      	ldrh	r3, [r7, #14]
 8004e66:	3301      	adds	r3, #1
 8004e68:	81fb      	strh	r3, [r7, #14]
 8004e6a:	89fb      	ldrh	r3, [r7, #14]
 8004e6c:	2bef      	cmp	r3, #239	; 0xef
 8004e6e:	d9eb      	bls.n	8004e48 <_Z13LCD_2IN_Cleart+0x28>
		}
	 }
}
 8004e70:	bf00      	nop
 8004e72:	bf00      	nop
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	40020400 	.word	0x40020400

08004e80 <_Z17LCD_2IN_DrawPaintttt>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_2IN_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	4603      	mov	r3, r0
 8004e88:	80fb      	strh	r3, [r7, #6]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	80bb      	strh	r3, [r7, #4]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	807b      	strh	r3, [r7, #2]
	LCD_2IN_SetCursor(x, y);
 8004e92:	88ba      	ldrh	r2, [r7, #4]
 8004e94:	88fb      	ldrh	r3, [r7, #6]
 8004e96:	4611      	mov	r1, r2
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7ff ff7c 	bl	8004d96 <_Z17LCD_2IN_SetCursortt>
	LCD_2IN_WriteData_Word(Color); 	    
 8004e9e:	887b      	ldrh	r3, [r7, #2]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff fe27 	bl	8004af4 <_Z22LCD_2IN_WriteData_Wordt>
}
 8004ea6:	bf00      	nop
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <_Z20LCD_2IN_SetBackLightt>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_2IN_SetBackLight(UWORD Value)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	80fb      	strh	r3, [r7, #6]
	DEV_Set_PWM(Value);
 8004eba:	4a04      	ldr	r2, [pc, #16]	; (8004ecc <_Z20LCD_2IN_SetBackLightt+0x1c>)
 8004ebc:	88fb      	ldrh	r3, [r7, #6]
 8004ebe:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	40000400 	.word	0x40000400

08004ed0 <atoi>:
 8004ed0:	220a      	movs	r2, #10
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	f000 b936 	b.w	8005144 <strtol>

08004ed8 <malloc>:
 8004ed8:	4b02      	ldr	r3, [pc, #8]	; (8004ee4 <malloc+0xc>)
 8004eda:	4601      	mov	r1, r0
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	f000 b823 	b.w	8004f28 <_malloc_r>
 8004ee2:	bf00      	nop
 8004ee4:	20000074 	.word	0x20000074

08004ee8 <sbrk_aligned>:
 8004ee8:	b570      	push	{r4, r5, r6, lr}
 8004eea:	4e0e      	ldr	r6, [pc, #56]	; (8004f24 <sbrk_aligned+0x3c>)
 8004eec:	460c      	mov	r4, r1
 8004eee:	6831      	ldr	r1, [r6, #0]
 8004ef0:	4605      	mov	r5, r0
 8004ef2:	b911      	cbnz	r1, 8004efa <sbrk_aligned+0x12>
 8004ef4:	f001 f81e 	bl	8005f34 <_sbrk_r>
 8004ef8:	6030      	str	r0, [r6, #0]
 8004efa:	4621      	mov	r1, r4
 8004efc:	4628      	mov	r0, r5
 8004efe:	f001 f819 	bl	8005f34 <_sbrk_r>
 8004f02:	1c43      	adds	r3, r0, #1
 8004f04:	d00a      	beq.n	8004f1c <sbrk_aligned+0x34>
 8004f06:	1cc4      	adds	r4, r0, #3
 8004f08:	f024 0403 	bic.w	r4, r4, #3
 8004f0c:	42a0      	cmp	r0, r4
 8004f0e:	d007      	beq.n	8004f20 <sbrk_aligned+0x38>
 8004f10:	1a21      	subs	r1, r4, r0
 8004f12:	4628      	mov	r0, r5
 8004f14:	f001 f80e 	bl	8005f34 <_sbrk_r>
 8004f18:	3001      	adds	r0, #1
 8004f1a:	d101      	bne.n	8004f20 <sbrk_aligned+0x38>
 8004f1c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004f20:	4620      	mov	r0, r4
 8004f22:	bd70      	pop	{r4, r5, r6, pc}
 8004f24:	20000394 	.word	0x20000394

08004f28 <_malloc_r>:
 8004f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f2c:	1ccd      	adds	r5, r1, #3
 8004f2e:	f025 0503 	bic.w	r5, r5, #3
 8004f32:	3508      	adds	r5, #8
 8004f34:	2d0c      	cmp	r5, #12
 8004f36:	bf38      	it	cc
 8004f38:	250c      	movcc	r5, #12
 8004f3a:	2d00      	cmp	r5, #0
 8004f3c:	4607      	mov	r7, r0
 8004f3e:	db01      	blt.n	8004f44 <_malloc_r+0x1c>
 8004f40:	42a9      	cmp	r1, r5
 8004f42:	d905      	bls.n	8004f50 <_malloc_r+0x28>
 8004f44:	230c      	movs	r3, #12
 8004f46:	603b      	str	r3, [r7, #0]
 8004f48:	2600      	movs	r6, #0
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005024 <_malloc_r+0xfc>
 8004f54:	f000 f868 	bl	8005028 <__malloc_lock>
 8004f58:	f8d8 3000 	ldr.w	r3, [r8]
 8004f5c:	461c      	mov	r4, r3
 8004f5e:	bb5c      	cbnz	r4, 8004fb8 <_malloc_r+0x90>
 8004f60:	4629      	mov	r1, r5
 8004f62:	4638      	mov	r0, r7
 8004f64:	f7ff ffc0 	bl	8004ee8 <sbrk_aligned>
 8004f68:	1c43      	adds	r3, r0, #1
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	d155      	bne.n	800501a <_malloc_r+0xf2>
 8004f6e:	f8d8 4000 	ldr.w	r4, [r8]
 8004f72:	4626      	mov	r6, r4
 8004f74:	2e00      	cmp	r6, #0
 8004f76:	d145      	bne.n	8005004 <_malloc_r+0xdc>
 8004f78:	2c00      	cmp	r4, #0
 8004f7a:	d048      	beq.n	800500e <_malloc_r+0xe6>
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	4631      	mov	r1, r6
 8004f80:	4638      	mov	r0, r7
 8004f82:	eb04 0903 	add.w	r9, r4, r3
 8004f86:	f000 ffd5 	bl	8005f34 <_sbrk_r>
 8004f8a:	4581      	cmp	r9, r0
 8004f8c:	d13f      	bne.n	800500e <_malloc_r+0xe6>
 8004f8e:	6821      	ldr	r1, [r4, #0]
 8004f90:	1a6d      	subs	r5, r5, r1
 8004f92:	4629      	mov	r1, r5
 8004f94:	4638      	mov	r0, r7
 8004f96:	f7ff ffa7 	bl	8004ee8 <sbrk_aligned>
 8004f9a:	3001      	adds	r0, #1
 8004f9c:	d037      	beq.n	800500e <_malloc_r+0xe6>
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	442b      	add	r3, r5
 8004fa2:	6023      	str	r3, [r4, #0]
 8004fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d038      	beq.n	800501e <_malloc_r+0xf6>
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	42a2      	cmp	r2, r4
 8004fb0:	d12b      	bne.n	800500a <_malloc_r+0xe2>
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	605a      	str	r2, [r3, #4]
 8004fb6:	e00f      	b.n	8004fd8 <_malloc_r+0xb0>
 8004fb8:	6822      	ldr	r2, [r4, #0]
 8004fba:	1b52      	subs	r2, r2, r5
 8004fbc:	d41f      	bmi.n	8004ffe <_malloc_r+0xd6>
 8004fbe:	2a0b      	cmp	r2, #11
 8004fc0:	d917      	bls.n	8004ff2 <_malloc_r+0xca>
 8004fc2:	1961      	adds	r1, r4, r5
 8004fc4:	42a3      	cmp	r3, r4
 8004fc6:	6025      	str	r5, [r4, #0]
 8004fc8:	bf18      	it	ne
 8004fca:	6059      	strne	r1, [r3, #4]
 8004fcc:	6863      	ldr	r3, [r4, #4]
 8004fce:	bf08      	it	eq
 8004fd0:	f8c8 1000 	streq.w	r1, [r8]
 8004fd4:	5162      	str	r2, [r4, r5]
 8004fd6:	604b      	str	r3, [r1, #4]
 8004fd8:	4638      	mov	r0, r7
 8004fda:	f104 060b 	add.w	r6, r4, #11
 8004fde:	f000 f829 	bl	8005034 <__malloc_unlock>
 8004fe2:	f026 0607 	bic.w	r6, r6, #7
 8004fe6:	1d23      	adds	r3, r4, #4
 8004fe8:	1af2      	subs	r2, r6, r3
 8004fea:	d0ae      	beq.n	8004f4a <_malloc_r+0x22>
 8004fec:	1b9b      	subs	r3, r3, r6
 8004fee:	50a3      	str	r3, [r4, r2]
 8004ff0:	e7ab      	b.n	8004f4a <_malloc_r+0x22>
 8004ff2:	42a3      	cmp	r3, r4
 8004ff4:	6862      	ldr	r2, [r4, #4]
 8004ff6:	d1dd      	bne.n	8004fb4 <_malloc_r+0x8c>
 8004ff8:	f8c8 2000 	str.w	r2, [r8]
 8004ffc:	e7ec      	b.n	8004fd8 <_malloc_r+0xb0>
 8004ffe:	4623      	mov	r3, r4
 8005000:	6864      	ldr	r4, [r4, #4]
 8005002:	e7ac      	b.n	8004f5e <_malloc_r+0x36>
 8005004:	4634      	mov	r4, r6
 8005006:	6876      	ldr	r6, [r6, #4]
 8005008:	e7b4      	b.n	8004f74 <_malloc_r+0x4c>
 800500a:	4613      	mov	r3, r2
 800500c:	e7cc      	b.n	8004fa8 <_malloc_r+0x80>
 800500e:	230c      	movs	r3, #12
 8005010:	603b      	str	r3, [r7, #0]
 8005012:	4638      	mov	r0, r7
 8005014:	f000 f80e 	bl	8005034 <__malloc_unlock>
 8005018:	e797      	b.n	8004f4a <_malloc_r+0x22>
 800501a:	6025      	str	r5, [r4, #0]
 800501c:	e7dc      	b.n	8004fd8 <_malloc_r+0xb0>
 800501e:	605b      	str	r3, [r3, #4]
 8005020:	deff      	udf	#255	; 0xff
 8005022:	bf00      	nop
 8005024:	20000390 	.word	0x20000390

08005028 <__malloc_lock>:
 8005028:	4801      	ldr	r0, [pc, #4]	; (8005030 <__malloc_lock+0x8>)
 800502a:	f000 bfd0 	b.w	8005fce <__retarget_lock_acquire_recursive>
 800502e:	bf00      	nop
 8005030:	200004d8 	.word	0x200004d8

08005034 <__malloc_unlock>:
 8005034:	4801      	ldr	r0, [pc, #4]	; (800503c <__malloc_unlock+0x8>)
 8005036:	f000 bfcb 	b.w	8005fd0 <__retarget_lock_release_recursive>
 800503a:	bf00      	nop
 800503c:	200004d8 	.word	0x200004d8

08005040 <_strtol_l.constprop.0>:
 8005040:	2b01      	cmp	r3, #1
 8005042:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005046:	d001      	beq.n	800504c <_strtol_l.constprop.0+0xc>
 8005048:	2b24      	cmp	r3, #36	; 0x24
 800504a:	d906      	bls.n	800505a <_strtol_l.constprop.0+0x1a>
 800504c:	f000 ff94 	bl	8005f78 <__errno>
 8005050:	2316      	movs	r3, #22
 8005052:	6003      	str	r3, [r0, #0]
 8005054:	2000      	movs	r0, #0
 8005056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800505a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005140 <_strtol_l.constprop.0+0x100>
 800505e:	460d      	mov	r5, r1
 8005060:	462e      	mov	r6, r5
 8005062:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005066:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800506a:	f017 0708 	ands.w	r7, r7, #8
 800506e:	d1f7      	bne.n	8005060 <_strtol_l.constprop.0+0x20>
 8005070:	2c2d      	cmp	r4, #45	; 0x2d
 8005072:	d132      	bne.n	80050da <_strtol_l.constprop.0+0x9a>
 8005074:	782c      	ldrb	r4, [r5, #0]
 8005076:	2701      	movs	r7, #1
 8005078:	1cb5      	adds	r5, r6, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d05b      	beq.n	8005136 <_strtol_l.constprop.0+0xf6>
 800507e:	2b10      	cmp	r3, #16
 8005080:	d109      	bne.n	8005096 <_strtol_l.constprop.0+0x56>
 8005082:	2c30      	cmp	r4, #48	; 0x30
 8005084:	d107      	bne.n	8005096 <_strtol_l.constprop.0+0x56>
 8005086:	782c      	ldrb	r4, [r5, #0]
 8005088:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800508c:	2c58      	cmp	r4, #88	; 0x58
 800508e:	d14d      	bne.n	800512c <_strtol_l.constprop.0+0xec>
 8005090:	786c      	ldrb	r4, [r5, #1]
 8005092:	2310      	movs	r3, #16
 8005094:	3502      	adds	r5, #2
 8005096:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800509a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800509e:	f04f 0e00 	mov.w	lr, #0
 80050a2:	fbb8 f9f3 	udiv	r9, r8, r3
 80050a6:	4676      	mov	r6, lr
 80050a8:	fb03 8a19 	mls	sl, r3, r9, r8
 80050ac:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80050b0:	f1bc 0f09 	cmp.w	ip, #9
 80050b4:	d816      	bhi.n	80050e4 <_strtol_l.constprop.0+0xa4>
 80050b6:	4664      	mov	r4, ip
 80050b8:	42a3      	cmp	r3, r4
 80050ba:	dd24      	ble.n	8005106 <_strtol_l.constprop.0+0xc6>
 80050bc:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80050c0:	d008      	beq.n	80050d4 <_strtol_l.constprop.0+0x94>
 80050c2:	45b1      	cmp	r9, r6
 80050c4:	d31c      	bcc.n	8005100 <_strtol_l.constprop.0+0xc0>
 80050c6:	d101      	bne.n	80050cc <_strtol_l.constprop.0+0x8c>
 80050c8:	45a2      	cmp	sl, r4
 80050ca:	db19      	blt.n	8005100 <_strtol_l.constprop.0+0xc0>
 80050cc:	fb06 4603 	mla	r6, r6, r3, r4
 80050d0:	f04f 0e01 	mov.w	lr, #1
 80050d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80050d8:	e7e8      	b.n	80050ac <_strtol_l.constprop.0+0x6c>
 80050da:	2c2b      	cmp	r4, #43	; 0x2b
 80050dc:	bf04      	itt	eq
 80050de:	782c      	ldrbeq	r4, [r5, #0]
 80050e0:	1cb5      	addeq	r5, r6, #2
 80050e2:	e7ca      	b.n	800507a <_strtol_l.constprop.0+0x3a>
 80050e4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80050e8:	f1bc 0f19 	cmp.w	ip, #25
 80050ec:	d801      	bhi.n	80050f2 <_strtol_l.constprop.0+0xb2>
 80050ee:	3c37      	subs	r4, #55	; 0x37
 80050f0:	e7e2      	b.n	80050b8 <_strtol_l.constprop.0+0x78>
 80050f2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80050f6:	f1bc 0f19 	cmp.w	ip, #25
 80050fa:	d804      	bhi.n	8005106 <_strtol_l.constprop.0+0xc6>
 80050fc:	3c57      	subs	r4, #87	; 0x57
 80050fe:	e7db      	b.n	80050b8 <_strtol_l.constprop.0+0x78>
 8005100:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8005104:	e7e6      	b.n	80050d4 <_strtol_l.constprop.0+0x94>
 8005106:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800510a:	d105      	bne.n	8005118 <_strtol_l.constprop.0+0xd8>
 800510c:	2322      	movs	r3, #34	; 0x22
 800510e:	6003      	str	r3, [r0, #0]
 8005110:	4646      	mov	r6, r8
 8005112:	b942      	cbnz	r2, 8005126 <_strtol_l.constprop.0+0xe6>
 8005114:	4630      	mov	r0, r6
 8005116:	e79e      	b.n	8005056 <_strtol_l.constprop.0+0x16>
 8005118:	b107      	cbz	r7, 800511c <_strtol_l.constprop.0+0xdc>
 800511a:	4276      	negs	r6, r6
 800511c:	2a00      	cmp	r2, #0
 800511e:	d0f9      	beq.n	8005114 <_strtol_l.constprop.0+0xd4>
 8005120:	f1be 0f00 	cmp.w	lr, #0
 8005124:	d000      	beq.n	8005128 <_strtol_l.constprop.0+0xe8>
 8005126:	1e69      	subs	r1, r5, #1
 8005128:	6011      	str	r1, [r2, #0]
 800512a:	e7f3      	b.n	8005114 <_strtol_l.constprop.0+0xd4>
 800512c:	2430      	movs	r4, #48	; 0x30
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1b1      	bne.n	8005096 <_strtol_l.constprop.0+0x56>
 8005132:	2308      	movs	r3, #8
 8005134:	e7af      	b.n	8005096 <_strtol_l.constprop.0+0x56>
 8005136:	2c30      	cmp	r4, #48	; 0x30
 8005138:	d0a5      	beq.n	8005086 <_strtol_l.constprop.0+0x46>
 800513a:	230a      	movs	r3, #10
 800513c:	e7ab      	b.n	8005096 <_strtol_l.constprop.0+0x56>
 800513e:	bf00      	nop
 8005140:	0800ab4d 	.word	0x0800ab4d

08005144 <strtol>:
 8005144:	4613      	mov	r3, r2
 8005146:	460a      	mov	r2, r1
 8005148:	4601      	mov	r1, r0
 800514a:	4802      	ldr	r0, [pc, #8]	; (8005154 <strtol+0x10>)
 800514c:	6800      	ldr	r0, [r0, #0]
 800514e:	f7ff bf77 	b.w	8005040 <_strtol_l.constprop.0>
 8005152:	bf00      	nop
 8005154:	20000074 	.word	0x20000074

08005158 <__cvt>:
 8005158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800515c:	ec55 4b10 	vmov	r4, r5, d0
 8005160:	2d00      	cmp	r5, #0
 8005162:	460e      	mov	r6, r1
 8005164:	4619      	mov	r1, r3
 8005166:	462b      	mov	r3, r5
 8005168:	bfbb      	ittet	lt
 800516a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800516e:	461d      	movlt	r5, r3
 8005170:	2300      	movge	r3, #0
 8005172:	232d      	movlt	r3, #45	; 0x2d
 8005174:	700b      	strb	r3, [r1, #0]
 8005176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005178:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800517c:	4691      	mov	r9, r2
 800517e:	f023 0820 	bic.w	r8, r3, #32
 8005182:	bfbc      	itt	lt
 8005184:	4622      	movlt	r2, r4
 8005186:	4614      	movlt	r4, r2
 8005188:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800518c:	d005      	beq.n	800519a <__cvt+0x42>
 800518e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005192:	d100      	bne.n	8005196 <__cvt+0x3e>
 8005194:	3601      	adds	r6, #1
 8005196:	2102      	movs	r1, #2
 8005198:	e000      	b.n	800519c <__cvt+0x44>
 800519a:	2103      	movs	r1, #3
 800519c:	ab03      	add	r3, sp, #12
 800519e:	9301      	str	r3, [sp, #4]
 80051a0:	ab02      	add	r3, sp, #8
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	ec45 4b10 	vmov	d0, r4, r5
 80051a8:	4653      	mov	r3, sl
 80051aa:	4632      	mov	r2, r6
 80051ac:	f000 ffa8 	bl	8006100 <_dtoa_r>
 80051b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80051b4:	4607      	mov	r7, r0
 80051b6:	d102      	bne.n	80051be <__cvt+0x66>
 80051b8:	f019 0f01 	tst.w	r9, #1
 80051bc:	d022      	beq.n	8005204 <__cvt+0xac>
 80051be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051c2:	eb07 0906 	add.w	r9, r7, r6
 80051c6:	d110      	bne.n	80051ea <__cvt+0x92>
 80051c8:	783b      	ldrb	r3, [r7, #0]
 80051ca:	2b30      	cmp	r3, #48	; 0x30
 80051cc:	d10a      	bne.n	80051e4 <__cvt+0x8c>
 80051ce:	2200      	movs	r2, #0
 80051d0:	2300      	movs	r3, #0
 80051d2:	4620      	mov	r0, r4
 80051d4:	4629      	mov	r1, r5
 80051d6:	f7fb fc87 	bl	8000ae8 <__aeabi_dcmpeq>
 80051da:	b918      	cbnz	r0, 80051e4 <__cvt+0x8c>
 80051dc:	f1c6 0601 	rsb	r6, r6, #1
 80051e0:	f8ca 6000 	str.w	r6, [sl]
 80051e4:	f8da 3000 	ldr.w	r3, [sl]
 80051e8:	4499      	add	r9, r3
 80051ea:	2200      	movs	r2, #0
 80051ec:	2300      	movs	r3, #0
 80051ee:	4620      	mov	r0, r4
 80051f0:	4629      	mov	r1, r5
 80051f2:	f7fb fc79 	bl	8000ae8 <__aeabi_dcmpeq>
 80051f6:	b108      	cbz	r0, 80051fc <__cvt+0xa4>
 80051f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80051fc:	2230      	movs	r2, #48	; 0x30
 80051fe:	9b03      	ldr	r3, [sp, #12]
 8005200:	454b      	cmp	r3, r9
 8005202:	d307      	bcc.n	8005214 <__cvt+0xbc>
 8005204:	9b03      	ldr	r3, [sp, #12]
 8005206:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005208:	1bdb      	subs	r3, r3, r7
 800520a:	4638      	mov	r0, r7
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	b004      	add	sp, #16
 8005210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005214:	1c59      	adds	r1, r3, #1
 8005216:	9103      	str	r1, [sp, #12]
 8005218:	701a      	strb	r2, [r3, #0]
 800521a:	e7f0      	b.n	80051fe <__cvt+0xa6>

0800521c <__exponent>:
 800521c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800521e:	4603      	mov	r3, r0
 8005220:	2900      	cmp	r1, #0
 8005222:	bfb8      	it	lt
 8005224:	4249      	neglt	r1, r1
 8005226:	f803 2b02 	strb.w	r2, [r3], #2
 800522a:	bfb4      	ite	lt
 800522c:	222d      	movlt	r2, #45	; 0x2d
 800522e:	222b      	movge	r2, #43	; 0x2b
 8005230:	2909      	cmp	r1, #9
 8005232:	7042      	strb	r2, [r0, #1]
 8005234:	dd2a      	ble.n	800528c <__exponent+0x70>
 8005236:	f10d 0207 	add.w	r2, sp, #7
 800523a:	4617      	mov	r7, r2
 800523c:	260a      	movs	r6, #10
 800523e:	4694      	mov	ip, r2
 8005240:	fb91 f5f6 	sdiv	r5, r1, r6
 8005244:	fb06 1415 	mls	r4, r6, r5, r1
 8005248:	3430      	adds	r4, #48	; 0x30
 800524a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800524e:	460c      	mov	r4, r1
 8005250:	2c63      	cmp	r4, #99	; 0x63
 8005252:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005256:	4629      	mov	r1, r5
 8005258:	dcf1      	bgt.n	800523e <__exponent+0x22>
 800525a:	3130      	adds	r1, #48	; 0x30
 800525c:	f1ac 0402 	sub.w	r4, ip, #2
 8005260:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005264:	1c41      	adds	r1, r0, #1
 8005266:	4622      	mov	r2, r4
 8005268:	42ba      	cmp	r2, r7
 800526a:	d30a      	bcc.n	8005282 <__exponent+0x66>
 800526c:	f10d 0209 	add.w	r2, sp, #9
 8005270:	eba2 020c 	sub.w	r2, r2, ip
 8005274:	42bc      	cmp	r4, r7
 8005276:	bf88      	it	hi
 8005278:	2200      	movhi	r2, #0
 800527a:	4413      	add	r3, r2
 800527c:	1a18      	subs	r0, r3, r0
 800527e:	b003      	add	sp, #12
 8005280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005282:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005286:	f801 5f01 	strb.w	r5, [r1, #1]!
 800528a:	e7ed      	b.n	8005268 <__exponent+0x4c>
 800528c:	2330      	movs	r3, #48	; 0x30
 800528e:	3130      	adds	r1, #48	; 0x30
 8005290:	7083      	strb	r3, [r0, #2]
 8005292:	70c1      	strb	r1, [r0, #3]
 8005294:	1d03      	adds	r3, r0, #4
 8005296:	e7f1      	b.n	800527c <__exponent+0x60>

08005298 <_printf_float>:
 8005298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529c:	ed2d 8b02 	vpush	{d8}
 80052a0:	b08d      	sub	sp, #52	; 0x34
 80052a2:	460c      	mov	r4, r1
 80052a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80052a8:	4616      	mov	r6, r2
 80052aa:	461f      	mov	r7, r3
 80052ac:	4605      	mov	r5, r0
 80052ae:	f000 fe09 	bl	8005ec4 <_localeconv_r>
 80052b2:	f8d0 a000 	ldr.w	sl, [r0]
 80052b6:	4650      	mov	r0, sl
 80052b8:	f7fa ffea 	bl	8000290 <strlen>
 80052bc:	2300      	movs	r3, #0
 80052be:	930a      	str	r3, [sp, #40]	; 0x28
 80052c0:	6823      	ldr	r3, [r4, #0]
 80052c2:	9305      	str	r3, [sp, #20]
 80052c4:	f8d8 3000 	ldr.w	r3, [r8]
 80052c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80052cc:	3307      	adds	r3, #7
 80052ce:	f023 0307 	bic.w	r3, r3, #7
 80052d2:	f103 0208 	add.w	r2, r3, #8
 80052d6:	f8c8 2000 	str.w	r2, [r8]
 80052da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80052de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80052e2:	9307      	str	r3, [sp, #28]
 80052e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80052e8:	ee08 0a10 	vmov	s16, r0
 80052ec:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80052f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80052f4:	4b9e      	ldr	r3, [pc, #632]	; (8005570 <_printf_float+0x2d8>)
 80052f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052fa:	f7fb fc27 	bl	8000b4c <__aeabi_dcmpun>
 80052fe:	bb88      	cbnz	r0, 8005364 <_printf_float+0xcc>
 8005300:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005304:	4b9a      	ldr	r3, [pc, #616]	; (8005570 <_printf_float+0x2d8>)
 8005306:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800530a:	f7fb fc01 	bl	8000b10 <__aeabi_dcmple>
 800530e:	bb48      	cbnz	r0, 8005364 <_printf_float+0xcc>
 8005310:	2200      	movs	r2, #0
 8005312:	2300      	movs	r3, #0
 8005314:	4640      	mov	r0, r8
 8005316:	4649      	mov	r1, r9
 8005318:	f7fb fbf0 	bl	8000afc <__aeabi_dcmplt>
 800531c:	b110      	cbz	r0, 8005324 <_printf_float+0x8c>
 800531e:	232d      	movs	r3, #45	; 0x2d
 8005320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005324:	4a93      	ldr	r2, [pc, #588]	; (8005574 <_printf_float+0x2dc>)
 8005326:	4b94      	ldr	r3, [pc, #592]	; (8005578 <_printf_float+0x2e0>)
 8005328:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800532c:	bf94      	ite	ls
 800532e:	4690      	movls	r8, r2
 8005330:	4698      	movhi	r8, r3
 8005332:	2303      	movs	r3, #3
 8005334:	6123      	str	r3, [r4, #16]
 8005336:	9b05      	ldr	r3, [sp, #20]
 8005338:	f023 0304 	bic.w	r3, r3, #4
 800533c:	6023      	str	r3, [r4, #0]
 800533e:	f04f 0900 	mov.w	r9, #0
 8005342:	9700      	str	r7, [sp, #0]
 8005344:	4633      	mov	r3, r6
 8005346:	aa0b      	add	r2, sp, #44	; 0x2c
 8005348:	4621      	mov	r1, r4
 800534a:	4628      	mov	r0, r5
 800534c:	f000 f9da 	bl	8005704 <_printf_common>
 8005350:	3001      	adds	r0, #1
 8005352:	f040 8090 	bne.w	8005476 <_printf_float+0x1de>
 8005356:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800535a:	b00d      	add	sp, #52	; 0x34
 800535c:	ecbd 8b02 	vpop	{d8}
 8005360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005364:	4642      	mov	r2, r8
 8005366:	464b      	mov	r3, r9
 8005368:	4640      	mov	r0, r8
 800536a:	4649      	mov	r1, r9
 800536c:	f7fb fbee 	bl	8000b4c <__aeabi_dcmpun>
 8005370:	b140      	cbz	r0, 8005384 <_printf_float+0xec>
 8005372:	464b      	mov	r3, r9
 8005374:	2b00      	cmp	r3, #0
 8005376:	bfbc      	itt	lt
 8005378:	232d      	movlt	r3, #45	; 0x2d
 800537a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800537e:	4a7f      	ldr	r2, [pc, #508]	; (800557c <_printf_float+0x2e4>)
 8005380:	4b7f      	ldr	r3, [pc, #508]	; (8005580 <_printf_float+0x2e8>)
 8005382:	e7d1      	b.n	8005328 <_printf_float+0x90>
 8005384:	6863      	ldr	r3, [r4, #4]
 8005386:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800538a:	9206      	str	r2, [sp, #24]
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	d13f      	bne.n	8005410 <_printf_float+0x178>
 8005390:	2306      	movs	r3, #6
 8005392:	6063      	str	r3, [r4, #4]
 8005394:	9b05      	ldr	r3, [sp, #20]
 8005396:	6861      	ldr	r1, [r4, #4]
 8005398:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800539c:	2300      	movs	r3, #0
 800539e:	9303      	str	r3, [sp, #12]
 80053a0:	ab0a      	add	r3, sp, #40	; 0x28
 80053a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80053a6:	ab09      	add	r3, sp, #36	; 0x24
 80053a8:	ec49 8b10 	vmov	d0, r8, r9
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	6022      	str	r2, [r4, #0]
 80053b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80053b4:	4628      	mov	r0, r5
 80053b6:	f7ff fecf 	bl	8005158 <__cvt>
 80053ba:	9b06      	ldr	r3, [sp, #24]
 80053bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053be:	2b47      	cmp	r3, #71	; 0x47
 80053c0:	4680      	mov	r8, r0
 80053c2:	d108      	bne.n	80053d6 <_printf_float+0x13e>
 80053c4:	1cc8      	adds	r0, r1, #3
 80053c6:	db02      	blt.n	80053ce <_printf_float+0x136>
 80053c8:	6863      	ldr	r3, [r4, #4]
 80053ca:	4299      	cmp	r1, r3
 80053cc:	dd41      	ble.n	8005452 <_printf_float+0x1ba>
 80053ce:	f1ab 0302 	sub.w	r3, fp, #2
 80053d2:	fa5f fb83 	uxtb.w	fp, r3
 80053d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80053da:	d820      	bhi.n	800541e <_printf_float+0x186>
 80053dc:	3901      	subs	r1, #1
 80053de:	465a      	mov	r2, fp
 80053e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80053e4:	9109      	str	r1, [sp, #36]	; 0x24
 80053e6:	f7ff ff19 	bl	800521c <__exponent>
 80053ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053ec:	1813      	adds	r3, r2, r0
 80053ee:	2a01      	cmp	r2, #1
 80053f0:	4681      	mov	r9, r0
 80053f2:	6123      	str	r3, [r4, #16]
 80053f4:	dc02      	bgt.n	80053fc <_printf_float+0x164>
 80053f6:	6822      	ldr	r2, [r4, #0]
 80053f8:	07d2      	lsls	r2, r2, #31
 80053fa:	d501      	bpl.n	8005400 <_printf_float+0x168>
 80053fc:	3301      	adds	r3, #1
 80053fe:	6123      	str	r3, [r4, #16]
 8005400:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005404:	2b00      	cmp	r3, #0
 8005406:	d09c      	beq.n	8005342 <_printf_float+0xaa>
 8005408:	232d      	movs	r3, #45	; 0x2d
 800540a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800540e:	e798      	b.n	8005342 <_printf_float+0xaa>
 8005410:	9a06      	ldr	r2, [sp, #24]
 8005412:	2a47      	cmp	r2, #71	; 0x47
 8005414:	d1be      	bne.n	8005394 <_printf_float+0xfc>
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1bc      	bne.n	8005394 <_printf_float+0xfc>
 800541a:	2301      	movs	r3, #1
 800541c:	e7b9      	b.n	8005392 <_printf_float+0xfa>
 800541e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005422:	d118      	bne.n	8005456 <_printf_float+0x1be>
 8005424:	2900      	cmp	r1, #0
 8005426:	6863      	ldr	r3, [r4, #4]
 8005428:	dd0b      	ble.n	8005442 <_printf_float+0x1aa>
 800542a:	6121      	str	r1, [r4, #16]
 800542c:	b913      	cbnz	r3, 8005434 <_printf_float+0x19c>
 800542e:	6822      	ldr	r2, [r4, #0]
 8005430:	07d0      	lsls	r0, r2, #31
 8005432:	d502      	bpl.n	800543a <_printf_float+0x1a2>
 8005434:	3301      	adds	r3, #1
 8005436:	440b      	add	r3, r1
 8005438:	6123      	str	r3, [r4, #16]
 800543a:	65a1      	str	r1, [r4, #88]	; 0x58
 800543c:	f04f 0900 	mov.w	r9, #0
 8005440:	e7de      	b.n	8005400 <_printf_float+0x168>
 8005442:	b913      	cbnz	r3, 800544a <_printf_float+0x1b2>
 8005444:	6822      	ldr	r2, [r4, #0]
 8005446:	07d2      	lsls	r2, r2, #31
 8005448:	d501      	bpl.n	800544e <_printf_float+0x1b6>
 800544a:	3302      	adds	r3, #2
 800544c:	e7f4      	b.n	8005438 <_printf_float+0x1a0>
 800544e:	2301      	movs	r3, #1
 8005450:	e7f2      	b.n	8005438 <_printf_float+0x1a0>
 8005452:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005458:	4299      	cmp	r1, r3
 800545a:	db05      	blt.n	8005468 <_printf_float+0x1d0>
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	6121      	str	r1, [r4, #16]
 8005460:	07d8      	lsls	r0, r3, #31
 8005462:	d5ea      	bpl.n	800543a <_printf_float+0x1a2>
 8005464:	1c4b      	adds	r3, r1, #1
 8005466:	e7e7      	b.n	8005438 <_printf_float+0x1a0>
 8005468:	2900      	cmp	r1, #0
 800546a:	bfd4      	ite	le
 800546c:	f1c1 0202 	rsble	r2, r1, #2
 8005470:	2201      	movgt	r2, #1
 8005472:	4413      	add	r3, r2
 8005474:	e7e0      	b.n	8005438 <_printf_float+0x1a0>
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	055a      	lsls	r2, r3, #21
 800547a:	d407      	bmi.n	800548c <_printf_float+0x1f4>
 800547c:	6923      	ldr	r3, [r4, #16]
 800547e:	4642      	mov	r2, r8
 8005480:	4631      	mov	r1, r6
 8005482:	4628      	mov	r0, r5
 8005484:	47b8      	blx	r7
 8005486:	3001      	adds	r0, #1
 8005488:	d12c      	bne.n	80054e4 <_printf_float+0x24c>
 800548a:	e764      	b.n	8005356 <_printf_float+0xbe>
 800548c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005490:	f240 80e0 	bls.w	8005654 <_printf_float+0x3bc>
 8005494:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005498:	2200      	movs	r2, #0
 800549a:	2300      	movs	r3, #0
 800549c:	f7fb fb24 	bl	8000ae8 <__aeabi_dcmpeq>
 80054a0:	2800      	cmp	r0, #0
 80054a2:	d034      	beq.n	800550e <_printf_float+0x276>
 80054a4:	4a37      	ldr	r2, [pc, #220]	; (8005584 <_printf_float+0x2ec>)
 80054a6:	2301      	movs	r3, #1
 80054a8:	4631      	mov	r1, r6
 80054aa:	4628      	mov	r0, r5
 80054ac:	47b8      	blx	r7
 80054ae:	3001      	adds	r0, #1
 80054b0:	f43f af51 	beq.w	8005356 <_printf_float+0xbe>
 80054b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054b8:	429a      	cmp	r2, r3
 80054ba:	db02      	blt.n	80054c2 <_printf_float+0x22a>
 80054bc:	6823      	ldr	r3, [r4, #0]
 80054be:	07d8      	lsls	r0, r3, #31
 80054c0:	d510      	bpl.n	80054e4 <_printf_float+0x24c>
 80054c2:	ee18 3a10 	vmov	r3, s16
 80054c6:	4652      	mov	r2, sl
 80054c8:	4631      	mov	r1, r6
 80054ca:	4628      	mov	r0, r5
 80054cc:	47b8      	blx	r7
 80054ce:	3001      	adds	r0, #1
 80054d0:	f43f af41 	beq.w	8005356 <_printf_float+0xbe>
 80054d4:	f04f 0800 	mov.w	r8, #0
 80054d8:	f104 091a 	add.w	r9, r4, #26
 80054dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054de:	3b01      	subs	r3, #1
 80054e0:	4543      	cmp	r3, r8
 80054e2:	dc09      	bgt.n	80054f8 <_printf_float+0x260>
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	079b      	lsls	r3, r3, #30
 80054e8:	f100 8107 	bmi.w	80056fa <_printf_float+0x462>
 80054ec:	68e0      	ldr	r0, [r4, #12]
 80054ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054f0:	4298      	cmp	r0, r3
 80054f2:	bfb8      	it	lt
 80054f4:	4618      	movlt	r0, r3
 80054f6:	e730      	b.n	800535a <_printf_float+0xc2>
 80054f8:	2301      	movs	r3, #1
 80054fa:	464a      	mov	r2, r9
 80054fc:	4631      	mov	r1, r6
 80054fe:	4628      	mov	r0, r5
 8005500:	47b8      	blx	r7
 8005502:	3001      	adds	r0, #1
 8005504:	f43f af27 	beq.w	8005356 <_printf_float+0xbe>
 8005508:	f108 0801 	add.w	r8, r8, #1
 800550c:	e7e6      	b.n	80054dc <_printf_float+0x244>
 800550e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005510:	2b00      	cmp	r3, #0
 8005512:	dc39      	bgt.n	8005588 <_printf_float+0x2f0>
 8005514:	4a1b      	ldr	r2, [pc, #108]	; (8005584 <_printf_float+0x2ec>)
 8005516:	2301      	movs	r3, #1
 8005518:	4631      	mov	r1, r6
 800551a:	4628      	mov	r0, r5
 800551c:	47b8      	blx	r7
 800551e:	3001      	adds	r0, #1
 8005520:	f43f af19 	beq.w	8005356 <_printf_float+0xbe>
 8005524:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005528:	4313      	orrs	r3, r2
 800552a:	d102      	bne.n	8005532 <_printf_float+0x29a>
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	07d9      	lsls	r1, r3, #31
 8005530:	d5d8      	bpl.n	80054e4 <_printf_float+0x24c>
 8005532:	ee18 3a10 	vmov	r3, s16
 8005536:	4652      	mov	r2, sl
 8005538:	4631      	mov	r1, r6
 800553a:	4628      	mov	r0, r5
 800553c:	47b8      	blx	r7
 800553e:	3001      	adds	r0, #1
 8005540:	f43f af09 	beq.w	8005356 <_printf_float+0xbe>
 8005544:	f04f 0900 	mov.w	r9, #0
 8005548:	f104 0a1a 	add.w	sl, r4, #26
 800554c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800554e:	425b      	negs	r3, r3
 8005550:	454b      	cmp	r3, r9
 8005552:	dc01      	bgt.n	8005558 <_printf_float+0x2c0>
 8005554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005556:	e792      	b.n	800547e <_printf_float+0x1e6>
 8005558:	2301      	movs	r3, #1
 800555a:	4652      	mov	r2, sl
 800555c:	4631      	mov	r1, r6
 800555e:	4628      	mov	r0, r5
 8005560:	47b8      	blx	r7
 8005562:	3001      	adds	r0, #1
 8005564:	f43f aef7 	beq.w	8005356 <_printf_float+0xbe>
 8005568:	f109 0901 	add.w	r9, r9, #1
 800556c:	e7ee      	b.n	800554c <_printf_float+0x2b4>
 800556e:	bf00      	nop
 8005570:	7fefffff 	.word	0x7fefffff
 8005574:	0800ac4d 	.word	0x0800ac4d
 8005578:	0800ac51 	.word	0x0800ac51
 800557c:	0800ac55 	.word	0x0800ac55
 8005580:	0800ac59 	.word	0x0800ac59
 8005584:	0800ac5d 	.word	0x0800ac5d
 8005588:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800558a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800558c:	429a      	cmp	r2, r3
 800558e:	bfa8      	it	ge
 8005590:	461a      	movge	r2, r3
 8005592:	2a00      	cmp	r2, #0
 8005594:	4691      	mov	r9, r2
 8005596:	dc37      	bgt.n	8005608 <_printf_float+0x370>
 8005598:	f04f 0b00 	mov.w	fp, #0
 800559c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055a0:	f104 021a 	add.w	r2, r4, #26
 80055a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055a6:	9305      	str	r3, [sp, #20]
 80055a8:	eba3 0309 	sub.w	r3, r3, r9
 80055ac:	455b      	cmp	r3, fp
 80055ae:	dc33      	bgt.n	8005618 <_printf_float+0x380>
 80055b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055b4:	429a      	cmp	r2, r3
 80055b6:	db3b      	blt.n	8005630 <_printf_float+0x398>
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	07da      	lsls	r2, r3, #31
 80055bc:	d438      	bmi.n	8005630 <_printf_float+0x398>
 80055be:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80055c2:	eba2 0903 	sub.w	r9, r2, r3
 80055c6:	9b05      	ldr	r3, [sp, #20]
 80055c8:	1ad2      	subs	r2, r2, r3
 80055ca:	4591      	cmp	r9, r2
 80055cc:	bfa8      	it	ge
 80055ce:	4691      	movge	r9, r2
 80055d0:	f1b9 0f00 	cmp.w	r9, #0
 80055d4:	dc35      	bgt.n	8005642 <_printf_float+0x3aa>
 80055d6:	f04f 0800 	mov.w	r8, #0
 80055da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055de:	f104 0a1a 	add.w	sl, r4, #26
 80055e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055e6:	1a9b      	subs	r3, r3, r2
 80055e8:	eba3 0309 	sub.w	r3, r3, r9
 80055ec:	4543      	cmp	r3, r8
 80055ee:	f77f af79 	ble.w	80054e4 <_printf_float+0x24c>
 80055f2:	2301      	movs	r3, #1
 80055f4:	4652      	mov	r2, sl
 80055f6:	4631      	mov	r1, r6
 80055f8:	4628      	mov	r0, r5
 80055fa:	47b8      	blx	r7
 80055fc:	3001      	adds	r0, #1
 80055fe:	f43f aeaa 	beq.w	8005356 <_printf_float+0xbe>
 8005602:	f108 0801 	add.w	r8, r8, #1
 8005606:	e7ec      	b.n	80055e2 <_printf_float+0x34a>
 8005608:	4613      	mov	r3, r2
 800560a:	4631      	mov	r1, r6
 800560c:	4642      	mov	r2, r8
 800560e:	4628      	mov	r0, r5
 8005610:	47b8      	blx	r7
 8005612:	3001      	adds	r0, #1
 8005614:	d1c0      	bne.n	8005598 <_printf_float+0x300>
 8005616:	e69e      	b.n	8005356 <_printf_float+0xbe>
 8005618:	2301      	movs	r3, #1
 800561a:	4631      	mov	r1, r6
 800561c:	4628      	mov	r0, r5
 800561e:	9205      	str	r2, [sp, #20]
 8005620:	47b8      	blx	r7
 8005622:	3001      	adds	r0, #1
 8005624:	f43f ae97 	beq.w	8005356 <_printf_float+0xbe>
 8005628:	9a05      	ldr	r2, [sp, #20]
 800562a:	f10b 0b01 	add.w	fp, fp, #1
 800562e:	e7b9      	b.n	80055a4 <_printf_float+0x30c>
 8005630:	ee18 3a10 	vmov	r3, s16
 8005634:	4652      	mov	r2, sl
 8005636:	4631      	mov	r1, r6
 8005638:	4628      	mov	r0, r5
 800563a:	47b8      	blx	r7
 800563c:	3001      	adds	r0, #1
 800563e:	d1be      	bne.n	80055be <_printf_float+0x326>
 8005640:	e689      	b.n	8005356 <_printf_float+0xbe>
 8005642:	9a05      	ldr	r2, [sp, #20]
 8005644:	464b      	mov	r3, r9
 8005646:	4442      	add	r2, r8
 8005648:	4631      	mov	r1, r6
 800564a:	4628      	mov	r0, r5
 800564c:	47b8      	blx	r7
 800564e:	3001      	adds	r0, #1
 8005650:	d1c1      	bne.n	80055d6 <_printf_float+0x33e>
 8005652:	e680      	b.n	8005356 <_printf_float+0xbe>
 8005654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005656:	2a01      	cmp	r2, #1
 8005658:	dc01      	bgt.n	800565e <_printf_float+0x3c6>
 800565a:	07db      	lsls	r3, r3, #31
 800565c:	d53a      	bpl.n	80056d4 <_printf_float+0x43c>
 800565e:	2301      	movs	r3, #1
 8005660:	4642      	mov	r2, r8
 8005662:	4631      	mov	r1, r6
 8005664:	4628      	mov	r0, r5
 8005666:	47b8      	blx	r7
 8005668:	3001      	adds	r0, #1
 800566a:	f43f ae74 	beq.w	8005356 <_printf_float+0xbe>
 800566e:	ee18 3a10 	vmov	r3, s16
 8005672:	4652      	mov	r2, sl
 8005674:	4631      	mov	r1, r6
 8005676:	4628      	mov	r0, r5
 8005678:	47b8      	blx	r7
 800567a:	3001      	adds	r0, #1
 800567c:	f43f ae6b 	beq.w	8005356 <_printf_float+0xbe>
 8005680:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005684:	2200      	movs	r2, #0
 8005686:	2300      	movs	r3, #0
 8005688:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800568c:	f7fb fa2c 	bl	8000ae8 <__aeabi_dcmpeq>
 8005690:	b9d8      	cbnz	r0, 80056ca <_printf_float+0x432>
 8005692:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005696:	f108 0201 	add.w	r2, r8, #1
 800569a:	4631      	mov	r1, r6
 800569c:	4628      	mov	r0, r5
 800569e:	47b8      	blx	r7
 80056a0:	3001      	adds	r0, #1
 80056a2:	d10e      	bne.n	80056c2 <_printf_float+0x42a>
 80056a4:	e657      	b.n	8005356 <_printf_float+0xbe>
 80056a6:	2301      	movs	r3, #1
 80056a8:	4652      	mov	r2, sl
 80056aa:	4631      	mov	r1, r6
 80056ac:	4628      	mov	r0, r5
 80056ae:	47b8      	blx	r7
 80056b0:	3001      	adds	r0, #1
 80056b2:	f43f ae50 	beq.w	8005356 <_printf_float+0xbe>
 80056b6:	f108 0801 	add.w	r8, r8, #1
 80056ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056bc:	3b01      	subs	r3, #1
 80056be:	4543      	cmp	r3, r8
 80056c0:	dcf1      	bgt.n	80056a6 <_printf_float+0x40e>
 80056c2:	464b      	mov	r3, r9
 80056c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80056c8:	e6da      	b.n	8005480 <_printf_float+0x1e8>
 80056ca:	f04f 0800 	mov.w	r8, #0
 80056ce:	f104 0a1a 	add.w	sl, r4, #26
 80056d2:	e7f2      	b.n	80056ba <_printf_float+0x422>
 80056d4:	2301      	movs	r3, #1
 80056d6:	4642      	mov	r2, r8
 80056d8:	e7df      	b.n	800569a <_printf_float+0x402>
 80056da:	2301      	movs	r3, #1
 80056dc:	464a      	mov	r2, r9
 80056de:	4631      	mov	r1, r6
 80056e0:	4628      	mov	r0, r5
 80056e2:	47b8      	blx	r7
 80056e4:	3001      	adds	r0, #1
 80056e6:	f43f ae36 	beq.w	8005356 <_printf_float+0xbe>
 80056ea:	f108 0801 	add.w	r8, r8, #1
 80056ee:	68e3      	ldr	r3, [r4, #12]
 80056f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056f2:	1a5b      	subs	r3, r3, r1
 80056f4:	4543      	cmp	r3, r8
 80056f6:	dcf0      	bgt.n	80056da <_printf_float+0x442>
 80056f8:	e6f8      	b.n	80054ec <_printf_float+0x254>
 80056fa:	f04f 0800 	mov.w	r8, #0
 80056fe:	f104 0919 	add.w	r9, r4, #25
 8005702:	e7f4      	b.n	80056ee <_printf_float+0x456>

08005704 <_printf_common>:
 8005704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005708:	4616      	mov	r6, r2
 800570a:	4699      	mov	r9, r3
 800570c:	688a      	ldr	r2, [r1, #8]
 800570e:	690b      	ldr	r3, [r1, #16]
 8005710:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005714:	4293      	cmp	r3, r2
 8005716:	bfb8      	it	lt
 8005718:	4613      	movlt	r3, r2
 800571a:	6033      	str	r3, [r6, #0]
 800571c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005720:	4607      	mov	r7, r0
 8005722:	460c      	mov	r4, r1
 8005724:	b10a      	cbz	r2, 800572a <_printf_common+0x26>
 8005726:	3301      	adds	r3, #1
 8005728:	6033      	str	r3, [r6, #0]
 800572a:	6823      	ldr	r3, [r4, #0]
 800572c:	0699      	lsls	r1, r3, #26
 800572e:	bf42      	ittt	mi
 8005730:	6833      	ldrmi	r3, [r6, #0]
 8005732:	3302      	addmi	r3, #2
 8005734:	6033      	strmi	r3, [r6, #0]
 8005736:	6825      	ldr	r5, [r4, #0]
 8005738:	f015 0506 	ands.w	r5, r5, #6
 800573c:	d106      	bne.n	800574c <_printf_common+0x48>
 800573e:	f104 0a19 	add.w	sl, r4, #25
 8005742:	68e3      	ldr	r3, [r4, #12]
 8005744:	6832      	ldr	r2, [r6, #0]
 8005746:	1a9b      	subs	r3, r3, r2
 8005748:	42ab      	cmp	r3, r5
 800574a:	dc26      	bgt.n	800579a <_printf_common+0x96>
 800574c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005750:	1e13      	subs	r3, r2, #0
 8005752:	6822      	ldr	r2, [r4, #0]
 8005754:	bf18      	it	ne
 8005756:	2301      	movne	r3, #1
 8005758:	0692      	lsls	r2, r2, #26
 800575a:	d42b      	bmi.n	80057b4 <_printf_common+0xb0>
 800575c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005760:	4649      	mov	r1, r9
 8005762:	4638      	mov	r0, r7
 8005764:	47c0      	blx	r8
 8005766:	3001      	adds	r0, #1
 8005768:	d01e      	beq.n	80057a8 <_printf_common+0xa4>
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	6922      	ldr	r2, [r4, #16]
 800576e:	f003 0306 	and.w	r3, r3, #6
 8005772:	2b04      	cmp	r3, #4
 8005774:	bf02      	ittt	eq
 8005776:	68e5      	ldreq	r5, [r4, #12]
 8005778:	6833      	ldreq	r3, [r6, #0]
 800577a:	1aed      	subeq	r5, r5, r3
 800577c:	68a3      	ldr	r3, [r4, #8]
 800577e:	bf0c      	ite	eq
 8005780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005784:	2500      	movne	r5, #0
 8005786:	4293      	cmp	r3, r2
 8005788:	bfc4      	itt	gt
 800578a:	1a9b      	subgt	r3, r3, r2
 800578c:	18ed      	addgt	r5, r5, r3
 800578e:	2600      	movs	r6, #0
 8005790:	341a      	adds	r4, #26
 8005792:	42b5      	cmp	r5, r6
 8005794:	d11a      	bne.n	80057cc <_printf_common+0xc8>
 8005796:	2000      	movs	r0, #0
 8005798:	e008      	b.n	80057ac <_printf_common+0xa8>
 800579a:	2301      	movs	r3, #1
 800579c:	4652      	mov	r2, sl
 800579e:	4649      	mov	r1, r9
 80057a0:	4638      	mov	r0, r7
 80057a2:	47c0      	blx	r8
 80057a4:	3001      	adds	r0, #1
 80057a6:	d103      	bne.n	80057b0 <_printf_common+0xac>
 80057a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b0:	3501      	adds	r5, #1
 80057b2:	e7c6      	b.n	8005742 <_printf_common+0x3e>
 80057b4:	18e1      	adds	r1, r4, r3
 80057b6:	1c5a      	adds	r2, r3, #1
 80057b8:	2030      	movs	r0, #48	; 0x30
 80057ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057be:	4422      	add	r2, r4
 80057c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057c8:	3302      	adds	r3, #2
 80057ca:	e7c7      	b.n	800575c <_printf_common+0x58>
 80057cc:	2301      	movs	r3, #1
 80057ce:	4622      	mov	r2, r4
 80057d0:	4649      	mov	r1, r9
 80057d2:	4638      	mov	r0, r7
 80057d4:	47c0      	blx	r8
 80057d6:	3001      	adds	r0, #1
 80057d8:	d0e6      	beq.n	80057a8 <_printf_common+0xa4>
 80057da:	3601      	adds	r6, #1
 80057dc:	e7d9      	b.n	8005792 <_printf_common+0x8e>
	...

080057e0 <_printf_i>:
 80057e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057e4:	7e0f      	ldrb	r7, [r1, #24]
 80057e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057e8:	2f78      	cmp	r7, #120	; 0x78
 80057ea:	4691      	mov	r9, r2
 80057ec:	4680      	mov	r8, r0
 80057ee:	460c      	mov	r4, r1
 80057f0:	469a      	mov	sl, r3
 80057f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057f6:	d807      	bhi.n	8005808 <_printf_i+0x28>
 80057f8:	2f62      	cmp	r7, #98	; 0x62
 80057fa:	d80a      	bhi.n	8005812 <_printf_i+0x32>
 80057fc:	2f00      	cmp	r7, #0
 80057fe:	f000 80d4 	beq.w	80059aa <_printf_i+0x1ca>
 8005802:	2f58      	cmp	r7, #88	; 0x58
 8005804:	f000 80c0 	beq.w	8005988 <_printf_i+0x1a8>
 8005808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800580c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005810:	e03a      	b.n	8005888 <_printf_i+0xa8>
 8005812:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005816:	2b15      	cmp	r3, #21
 8005818:	d8f6      	bhi.n	8005808 <_printf_i+0x28>
 800581a:	a101      	add	r1, pc, #4	; (adr r1, 8005820 <_printf_i+0x40>)
 800581c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005820:	08005879 	.word	0x08005879
 8005824:	0800588d 	.word	0x0800588d
 8005828:	08005809 	.word	0x08005809
 800582c:	08005809 	.word	0x08005809
 8005830:	08005809 	.word	0x08005809
 8005834:	08005809 	.word	0x08005809
 8005838:	0800588d 	.word	0x0800588d
 800583c:	08005809 	.word	0x08005809
 8005840:	08005809 	.word	0x08005809
 8005844:	08005809 	.word	0x08005809
 8005848:	08005809 	.word	0x08005809
 800584c:	08005991 	.word	0x08005991
 8005850:	080058b9 	.word	0x080058b9
 8005854:	0800594b 	.word	0x0800594b
 8005858:	08005809 	.word	0x08005809
 800585c:	08005809 	.word	0x08005809
 8005860:	080059b3 	.word	0x080059b3
 8005864:	08005809 	.word	0x08005809
 8005868:	080058b9 	.word	0x080058b9
 800586c:	08005809 	.word	0x08005809
 8005870:	08005809 	.word	0x08005809
 8005874:	08005953 	.word	0x08005953
 8005878:	682b      	ldr	r3, [r5, #0]
 800587a:	1d1a      	adds	r2, r3, #4
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	602a      	str	r2, [r5, #0]
 8005880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005884:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005888:	2301      	movs	r3, #1
 800588a:	e09f      	b.n	80059cc <_printf_i+0x1ec>
 800588c:	6820      	ldr	r0, [r4, #0]
 800588e:	682b      	ldr	r3, [r5, #0]
 8005890:	0607      	lsls	r7, r0, #24
 8005892:	f103 0104 	add.w	r1, r3, #4
 8005896:	6029      	str	r1, [r5, #0]
 8005898:	d501      	bpl.n	800589e <_printf_i+0xbe>
 800589a:	681e      	ldr	r6, [r3, #0]
 800589c:	e003      	b.n	80058a6 <_printf_i+0xc6>
 800589e:	0646      	lsls	r6, r0, #25
 80058a0:	d5fb      	bpl.n	800589a <_printf_i+0xba>
 80058a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80058a6:	2e00      	cmp	r6, #0
 80058a8:	da03      	bge.n	80058b2 <_printf_i+0xd2>
 80058aa:	232d      	movs	r3, #45	; 0x2d
 80058ac:	4276      	negs	r6, r6
 80058ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058b2:	485a      	ldr	r0, [pc, #360]	; (8005a1c <_printf_i+0x23c>)
 80058b4:	230a      	movs	r3, #10
 80058b6:	e012      	b.n	80058de <_printf_i+0xfe>
 80058b8:	682b      	ldr	r3, [r5, #0]
 80058ba:	6820      	ldr	r0, [r4, #0]
 80058bc:	1d19      	adds	r1, r3, #4
 80058be:	6029      	str	r1, [r5, #0]
 80058c0:	0605      	lsls	r5, r0, #24
 80058c2:	d501      	bpl.n	80058c8 <_printf_i+0xe8>
 80058c4:	681e      	ldr	r6, [r3, #0]
 80058c6:	e002      	b.n	80058ce <_printf_i+0xee>
 80058c8:	0641      	lsls	r1, r0, #25
 80058ca:	d5fb      	bpl.n	80058c4 <_printf_i+0xe4>
 80058cc:	881e      	ldrh	r6, [r3, #0]
 80058ce:	4853      	ldr	r0, [pc, #332]	; (8005a1c <_printf_i+0x23c>)
 80058d0:	2f6f      	cmp	r7, #111	; 0x6f
 80058d2:	bf0c      	ite	eq
 80058d4:	2308      	moveq	r3, #8
 80058d6:	230a      	movne	r3, #10
 80058d8:	2100      	movs	r1, #0
 80058da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058de:	6865      	ldr	r5, [r4, #4]
 80058e0:	60a5      	str	r5, [r4, #8]
 80058e2:	2d00      	cmp	r5, #0
 80058e4:	bfa2      	ittt	ge
 80058e6:	6821      	ldrge	r1, [r4, #0]
 80058e8:	f021 0104 	bicge.w	r1, r1, #4
 80058ec:	6021      	strge	r1, [r4, #0]
 80058ee:	b90e      	cbnz	r6, 80058f4 <_printf_i+0x114>
 80058f0:	2d00      	cmp	r5, #0
 80058f2:	d04b      	beq.n	800598c <_printf_i+0x1ac>
 80058f4:	4615      	mov	r5, r2
 80058f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80058fa:	fb03 6711 	mls	r7, r3, r1, r6
 80058fe:	5dc7      	ldrb	r7, [r0, r7]
 8005900:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005904:	4637      	mov	r7, r6
 8005906:	42bb      	cmp	r3, r7
 8005908:	460e      	mov	r6, r1
 800590a:	d9f4      	bls.n	80058f6 <_printf_i+0x116>
 800590c:	2b08      	cmp	r3, #8
 800590e:	d10b      	bne.n	8005928 <_printf_i+0x148>
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	07de      	lsls	r6, r3, #31
 8005914:	d508      	bpl.n	8005928 <_printf_i+0x148>
 8005916:	6923      	ldr	r3, [r4, #16]
 8005918:	6861      	ldr	r1, [r4, #4]
 800591a:	4299      	cmp	r1, r3
 800591c:	bfde      	ittt	le
 800591e:	2330      	movle	r3, #48	; 0x30
 8005920:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005924:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005928:	1b52      	subs	r2, r2, r5
 800592a:	6122      	str	r2, [r4, #16]
 800592c:	f8cd a000 	str.w	sl, [sp]
 8005930:	464b      	mov	r3, r9
 8005932:	aa03      	add	r2, sp, #12
 8005934:	4621      	mov	r1, r4
 8005936:	4640      	mov	r0, r8
 8005938:	f7ff fee4 	bl	8005704 <_printf_common>
 800593c:	3001      	adds	r0, #1
 800593e:	d14a      	bne.n	80059d6 <_printf_i+0x1f6>
 8005940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005944:	b004      	add	sp, #16
 8005946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	f043 0320 	orr.w	r3, r3, #32
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	4833      	ldr	r0, [pc, #204]	; (8005a20 <_printf_i+0x240>)
 8005954:	2778      	movs	r7, #120	; 0x78
 8005956:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	6829      	ldr	r1, [r5, #0]
 800595e:	061f      	lsls	r7, r3, #24
 8005960:	f851 6b04 	ldr.w	r6, [r1], #4
 8005964:	d402      	bmi.n	800596c <_printf_i+0x18c>
 8005966:	065f      	lsls	r7, r3, #25
 8005968:	bf48      	it	mi
 800596a:	b2b6      	uxthmi	r6, r6
 800596c:	07df      	lsls	r7, r3, #31
 800596e:	bf48      	it	mi
 8005970:	f043 0320 	orrmi.w	r3, r3, #32
 8005974:	6029      	str	r1, [r5, #0]
 8005976:	bf48      	it	mi
 8005978:	6023      	strmi	r3, [r4, #0]
 800597a:	b91e      	cbnz	r6, 8005984 <_printf_i+0x1a4>
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	f023 0320 	bic.w	r3, r3, #32
 8005982:	6023      	str	r3, [r4, #0]
 8005984:	2310      	movs	r3, #16
 8005986:	e7a7      	b.n	80058d8 <_printf_i+0xf8>
 8005988:	4824      	ldr	r0, [pc, #144]	; (8005a1c <_printf_i+0x23c>)
 800598a:	e7e4      	b.n	8005956 <_printf_i+0x176>
 800598c:	4615      	mov	r5, r2
 800598e:	e7bd      	b.n	800590c <_printf_i+0x12c>
 8005990:	682b      	ldr	r3, [r5, #0]
 8005992:	6826      	ldr	r6, [r4, #0]
 8005994:	6961      	ldr	r1, [r4, #20]
 8005996:	1d18      	adds	r0, r3, #4
 8005998:	6028      	str	r0, [r5, #0]
 800599a:	0635      	lsls	r5, r6, #24
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	d501      	bpl.n	80059a4 <_printf_i+0x1c4>
 80059a0:	6019      	str	r1, [r3, #0]
 80059a2:	e002      	b.n	80059aa <_printf_i+0x1ca>
 80059a4:	0670      	lsls	r0, r6, #25
 80059a6:	d5fb      	bpl.n	80059a0 <_printf_i+0x1c0>
 80059a8:	8019      	strh	r1, [r3, #0]
 80059aa:	2300      	movs	r3, #0
 80059ac:	6123      	str	r3, [r4, #16]
 80059ae:	4615      	mov	r5, r2
 80059b0:	e7bc      	b.n	800592c <_printf_i+0x14c>
 80059b2:	682b      	ldr	r3, [r5, #0]
 80059b4:	1d1a      	adds	r2, r3, #4
 80059b6:	602a      	str	r2, [r5, #0]
 80059b8:	681d      	ldr	r5, [r3, #0]
 80059ba:	6862      	ldr	r2, [r4, #4]
 80059bc:	2100      	movs	r1, #0
 80059be:	4628      	mov	r0, r5
 80059c0:	f7fa fc16 	bl	80001f0 <memchr>
 80059c4:	b108      	cbz	r0, 80059ca <_printf_i+0x1ea>
 80059c6:	1b40      	subs	r0, r0, r5
 80059c8:	6060      	str	r0, [r4, #4]
 80059ca:	6863      	ldr	r3, [r4, #4]
 80059cc:	6123      	str	r3, [r4, #16]
 80059ce:	2300      	movs	r3, #0
 80059d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059d4:	e7aa      	b.n	800592c <_printf_i+0x14c>
 80059d6:	6923      	ldr	r3, [r4, #16]
 80059d8:	462a      	mov	r2, r5
 80059da:	4649      	mov	r1, r9
 80059dc:	4640      	mov	r0, r8
 80059de:	47d0      	blx	sl
 80059e0:	3001      	adds	r0, #1
 80059e2:	d0ad      	beq.n	8005940 <_printf_i+0x160>
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	079b      	lsls	r3, r3, #30
 80059e8:	d413      	bmi.n	8005a12 <_printf_i+0x232>
 80059ea:	68e0      	ldr	r0, [r4, #12]
 80059ec:	9b03      	ldr	r3, [sp, #12]
 80059ee:	4298      	cmp	r0, r3
 80059f0:	bfb8      	it	lt
 80059f2:	4618      	movlt	r0, r3
 80059f4:	e7a6      	b.n	8005944 <_printf_i+0x164>
 80059f6:	2301      	movs	r3, #1
 80059f8:	4632      	mov	r2, r6
 80059fa:	4649      	mov	r1, r9
 80059fc:	4640      	mov	r0, r8
 80059fe:	47d0      	blx	sl
 8005a00:	3001      	adds	r0, #1
 8005a02:	d09d      	beq.n	8005940 <_printf_i+0x160>
 8005a04:	3501      	adds	r5, #1
 8005a06:	68e3      	ldr	r3, [r4, #12]
 8005a08:	9903      	ldr	r1, [sp, #12]
 8005a0a:	1a5b      	subs	r3, r3, r1
 8005a0c:	42ab      	cmp	r3, r5
 8005a0e:	dcf2      	bgt.n	80059f6 <_printf_i+0x216>
 8005a10:	e7eb      	b.n	80059ea <_printf_i+0x20a>
 8005a12:	2500      	movs	r5, #0
 8005a14:	f104 0619 	add.w	r6, r4, #25
 8005a18:	e7f5      	b.n	8005a06 <_printf_i+0x226>
 8005a1a:	bf00      	nop
 8005a1c:	0800ac5f 	.word	0x0800ac5f
 8005a20:	0800ac70 	.word	0x0800ac70

08005a24 <std>:
 8005a24:	2300      	movs	r3, #0
 8005a26:	b510      	push	{r4, lr}
 8005a28:	4604      	mov	r4, r0
 8005a2a:	e9c0 3300 	strd	r3, r3, [r0]
 8005a2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a32:	6083      	str	r3, [r0, #8]
 8005a34:	8181      	strh	r1, [r0, #12]
 8005a36:	6643      	str	r3, [r0, #100]	; 0x64
 8005a38:	81c2      	strh	r2, [r0, #14]
 8005a3a:	6183      	str	r3, [r0, #24]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	2208      	movs	r2, #8
 8005a40:	305c      	adds	r0, #92	; 0x5c
 8005a42:	f000 fa17 	bl	8005e74 <memset>
 8005a46:	4b0d      	ldr	r3, [pc, #52]	; (8005a7c <std+0x58>)
 8005a48:	6263      	str	r3, [r4, #36]	; 0x24
 8005a4a:	4b0d      	ldr	r3, [pc, #52]	; (8005a80 <std+0x5c>)
 8005a4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a4e:	4b0d      	ldr	r3, [pc, #52]	; (8005a84 <std+0x60>)
 8005a50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a52:	4b0d      	ldr	r3, [pc, #52]	; (8005a88 <std+0x64>)
 8005a54:	6323      	str	r3, [r4, #48]	; 0x30
 8005a56:	4b0d      	ldr	r3, [pc, #52]	; (8005a8c <std+0x68>)
 8005a58:	6224      	str	r4, [r4, #32]
 8005a5a:	429c      	cmp	r4, r3
 8005a5c:	d006      	beq.n	8005a6c <std+0x48>
 8005a5e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005a62:	4294      	cmp	r4, r2
 8005a64:	d002      	beq.n	8005a6c <std+0x48>
 8005a66:	33d0      	adds	r3, #208	; 0xd0
 8005a68:	429c      	cmp	r4, r3
 8005a6a:	d105      	bne.n	8005a78 <std+0x54>
 8005a6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a74:	f000 baaa 	b.w	8005fcc <__retarget_lock_init_recursive>
 8005a78:	bd10      	pop	{r4, pc}
 8005a7a:	bf00      	nop
 8005a7c:	08005cc5 	.word	0x08005cc5
 8005a80:	08005ce7 	.word	0x08005ce7
 8005a84:	08005d1f 	.word	0x08005d1f
 8005a88:	08005d43 	.word	0x08005d43
 8005a8c:	20000398 	.word	0x20000398

08005a90 <stdio_exit_handler>:
 8005a90:	4a02      	ldr	r2, [pc, #8]	; (8005a9c <stdio_exit_handler+0xc>)
 8005a92:	4903      	ldr	r1, [pc, #12]	; (8005aa0 <stdio_exit_handler+0x10>)
 8005a94:	4803      	ldr	r0, [pc, #12]	; (8005aa4 <stdio_exit_handler+0x14>)
 8005a96:	f000 b869 	b.w	8005b6c <_fwalk_sglue>
 8005a9a:	bf00      	nop
 8005a9c:	2000001c 	.word	0x2000001c
 8005aa0:	08007ab9 	.word	0x08007ab9
 8005aa4:	20000028 	.word	0x20000028

08005aa8 <cleanup_stdio>:
 8005aa8:	6841      	ldr	r1, [r0, #4]
 8005aaa:	4b0c      	ldr	r3, [pc, #48]	; (8005adc <cleanup_stdio+0x34>)
 8005aac:	4299      	cmp	r1, r3
 8005aae:	b510      	push	{r4, lr}
 8005ab0:	4604      	mov	r4, r0
 8005ab2:	d001      	beq.n	8005ab8 <cleanup_stdio+0x10>
 8005ab4:	f002 f800 	bl	8007ab8 <_fflush_r>
 8005ab8:	68a1      	ldr	r1, [r4, #8]
 8005aba:	4b09      	ldr	r3, [pc, #36]	; (8005ae0 <cleanup_stdio+0x38>)
 8005abc:	4299      	cmp	r1, r3
 8005abe:	d002      	beq.n	8005ac6 <cleanup_stdio+0x1e>
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f001 fff9 	bl	8007ab8 <_fflush_r>
 8005ac6:	68e1      	ldr	r1, [r4, #12]
 8005ac8:	4b06      	ldr	r3, [pc, #24]	; (8005ae4 <cleanup_stdio+0x3c>)
 8005aca:	4299      	cmp	r1, r3
 8005acc:	d004      	beq.n	8005ad8 <cleanup_stdio+0x30>
 8005ace:	4620      	mov	r0, r4
 8005ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ad4:	f001 bff0 	b.w	8007ab8 <_fflush_r>
 8005ad8:	bd10      	pop	{r4, pc}
 8005ada:	bf00      	nop
 8005adc:	20000398 	.word	0x20000398
 8005ae0:	20000400 	.word	0x20000400
 8005ae4:	20000468 	.word	0x20000468

08005ae8 <global_stdio_init.part.0>:
 8005ae8:	b510      	push	{r4, lr}
 8005aea:	4b0b      	ldr	r3, [pc, #44]	; (8005b18 <global_stdio_init.part.0+0x30>)
 8005aec:	4c0b      	ldr	r4, [pc, #44]	; (8005b1c <global_stdio_init.part.0+0x34>)
 8005aee:	4a0c      	ldr	r2, [pc, #48]	; (8005b20 <global_stdio_init.part.0+0x38>)
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	4620      	mov	r0, r4
 8005af4:	2200      	movs	r2, #0
 8005af6:	2104      	movs	r1, #4
 8005af8:	f7ff ff94 	bl	8005a24 <std>
 8005afc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005b00:	2201      	movs	r2, #1
 8005b02:	2109      	movs	r1, #9
 8005b04:	f7ff ff8e 	bl	8005a24 <std>
 8005b08:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b12:	2112      	movs	r1, #18
 8005b14:	f7ff bf86 	b.w	8005a24 <std>
 8005b18:	200004d0 	.word	0x200004d0
 8005b1c:	20000398 	.word	0x20000398
 8005b20:	08005a91 	.word	0x08005a91

08005b24 <__sfp_lock_acquire>:
 8005b24:	4801      	ldr	r0, [pc, #4]	; (8005b2c <__sfp_lock_acquire+0x8>)
 8005b26:	f000 ba52 	b.w	8005fce <__retarget_lock_acquire_recursive>
 8005b2a:	bf00      	nop
 8005b2c:	200004d9 	.word	0x200004d9

08005b30 <__sfp_lock_release>:
 8005b30:	4801      	ldr	r0, [pc, #4]	; (8005b38 <__sfp_lock_release+0x8>)
 8005b32:	f000 ba4d 	b.w	8005fd0 <__retarget_lock_release_recursive>
 8005b36:	bf00      	nop
 8005b38:	200004d9 	.word	0x200004d9

08005b3c <__sinit>:
 8005b3c:	b510      	push	{r4, lr}
 8005b3e:	4604      	mov	r4, r0
 8005b40:	f7ff fff0 	bl	8005b24 <__sfp_lock_acquire>
 8005b44:	6a23      	ldr	r3, [r4, #32]
 8005b46:	b11b      	cbz	r3, 8005b50 <__sinit+0x14>
 8005b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b4c:	f7ff bff0 	b.w	8005b30 <__sfp_lock_release>
 8005b50:	4b04      	ldr	r3, [pc, #16]	; (8005b64 <__sinit+0x28>)
 8005b52:	6223      	str	r3, [r4, #32]
 8005b54:	4b04      	ldr	r3, [pc, #16]	; (8005b68 <__sinit+0x2c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1f5      	bne.n	8005b48 <__sinit+0xc>
 8005b5c:	f7ff ffc4 	bl	8005ae8 <global_stdio_init.part.0>
 8005b60:	e7f2      	b.n	8005b48 <__sinit+0xc>
 8005b62:	bf00      	nop
 8005b64:	08005aa9 	.word	0x08005aa9
 8005b68:	200004d0 	.word	0x200004d0

08005b6c <_fwalk_sglue>:
 8005b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b70:	4607      	mov	r7, r0
 8005b72:	4688      	mov	r8, r1
 8005b74:	4614      	mov	r4, r2
 8005b76:	2600      	movs	r6, #0
 8005b78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b7c:	f1b9 0901 	subs.w	r9, r9, #1
 8005b80:	d505      	bpl.n	8005b8e <_fwalk_sglue+0x22>
 8005b82:	6824      	ldr	r4, [r4, #0]
 8005b84:	2c00      	cmp	r4, #0
 8005b86:	d1f7      	bne.n	8005b78 <_fwalk_sglue+0xc>
 8005b88:	4630      	mov	r0, r6
 8005b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b8e:	89ab      	ldrh	r3, [r5, #12]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d907      	bls.n	8005ba4 <_fwalk_sglue+0x38>
 8005b94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	d003      	beq.n	8005ba4 <_fwalk_sglue+0x38>
 8005b9c:	4629      	mov	r1, r5
 8005b9e:	4638      	mov	r0, r7
 8005ba0:	47c0      	blx	r8
 8005ba2:	4306      	orrs	r6, r0
 8005ba4:	3568      	adds	r5, #104	; 0x68
 8005ba6:	e7e9      	b.n	8005b7c <_fwalk_sglue+0x10>

08005ba8 <iprintf>:
 8005ba8:	b40f      	push	{r0, r1, r2, r3}
 8005baa:	b507      	push	{r0, r1, r2, lr}
 8005bac:	4906      	ldr	r1, [pc, #24]	; (8005bc8 <iprintf+0x20>)
 8005bae:	ab04      	add	r3, sp, #16
 8005bb0:	6808      	ldr	r0, [r1, #0]
 8005bb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bb6:	6881      	ldr	r1, [r0, #8]
 8005bb8:	9301      	str	r3, [sp, #4]
 8005bba:	f001 fddd 	bl	8007778 <_vfiprintf_r>
 8005bbe:	b003      	add	sp, #12
 8005bc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bc4:	b004      	add	sp, #16
 8005bc6:	4770      	bx	lr
 8005bc8:	20000074 	.word	0x20000074

08005bcc <_puts_r>:
 8005bcc:	6a03      	ldr	r3, [r0, #32]
 8005bce:	b570      	push	{r4, r5, r6, lr}
 8005bd0:	6884      	ldr	r4, [r0, #8]
 8005bd2:	4605      	mov	r5, r0
 8005bd4:	460e      	mov	r6, r1
 8005bd6:	b90b      	cbnz	r3, 8005bdc <_puts_r+0x10>
 8005bd8:	f7ff ffb0 	bl	8005b3c <__sinit>
 8005bdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bde:	07db      	lsls	r3, r3, #31
 8005be0:	d405      	bmi.n	8005bee <_puts_r+0x22>
 8005be2:	89a3      	ldrh	r3, [r4, #12]
 8005be4:	0598      	lsls	r0, r3, #22
 8005be6:	d402      	bmi.n	8005bee <_puts_r+0x22>
 8005be8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bea:	f000 f9f0 	bl	8005fce <__retarget_lock_acquire_recursive>
 8005bee:	89a3      	ldrh	r3, [r4, #12]
 8005bf0:	0719      	lsls	r1, r3, #28
 8005bf2:	d513      	bpl.n	8005c1c <_puts_r+0x50>
 8005bf4:	6923      	ldr	r3, [r4, #16]
 8005bf6:	b18b      	cbz	r3, 8005c1c <_puts_r+0x50>
 8005bf8:	3e01      	subs	r6, #1
 8005bfa:	68a3      	ldr	r3, [r4, #8]
 8005bfc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c00:	3b01      	subs	r3, #1
 8005c02:	60a3      	str	r3, [r4, #8]
 8005c04:	b9e9      	cbnz	r1, 8005c42 <_puts_r+0x76>
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	da2e      	bge.n	8005c68 <_puts_r+0x9c>
 8005c0a:	4622      	mov	r2, r4
 8005c0c:	210a      	movs	r1, #10
 8005c0e:	4628      	mov	r0, r5
 8005c10:	f000 f89b 	bl	8005d4a <__swbuf_r>
 8005c14:	3001      	adds	r0, #1
 8005c16:	d007      	beq.n	8005c28 <_puts_r+0x5c>
 8005c18:	250a      	movs	r5, #10
 8005c1a:	e007      	b.n	8005c2c <_puts_r+0x60>
 8005c1c:	4621      	mov	r1, r4
 8005c1e:	4628      	mov	r0, r5
 8005c20:	f000 f8d0 	bl	8005dc4 <__swsetup_r>
 8005c24:	2800      	cmp	r0, #0
 8005c26:	d0e7      	beq.n	8005bf8 <_puts_r+0x2c>
 8005c28:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005c2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c2e:	07da      	lsls	r2, r3, #31
 8005c30:	d405      	bmi.n	8005c3e <_puts_r+0x72>
 8005c32:	89a3      	ldrh	r3, [r4, #12]
 8005c34:	059b      	lsls	r3, r3, #22
 8005c36:	d402      	bmi.n	8005c3e <_puts_r+0x72>
 8005c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c3a:	f000 f9c9 	bl	8005fd0 <__retarget_lock_release_recursive>
 8005c3e:	4628      	mov	r0, r5
 8005c40:	bd70      	pop	{r4, r5, r6, pc}
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	da04      	bge.n	8005c50 <_puts_r+0x84>
 8005c46:	69a2      	ldr	r2, [r4, #24]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	dc06      	bgt.n	8005c5a <_puts_r+0x8e>
 8005c4c:	290a      	cmp	r1, #10
 8005c4e:	d004      	beq.n	8005c5a <_puts_r+0x8e>
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	6022      	str	r2, [r4, #0]
 8005c56:	7019      	strb	r1, [r3, #0]
 8005c58:	e7cf      	b.n	8005bfa <_puts_r+0x2e>
 8005c5a:	4622      	mov	r2, r4
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	f000 f874 	bl	8005d4a <__swbuf_r>
 8005c62:	3001      	adds	r0, #1
 8005c64:	d1c9      	bne.n	8005bfa <_puts_r+0x2e>
 8005c66:	e7df      	b.n	8005c28 <_puts_r+0x5c>
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	250a      	movs	r5, #10
 8005c6c:	1c5a      	adds	r2, r3, #1
 8005c6e:	6022      	str	r2, [r4, #0]
 8005c70:	701d      	strb	r5, [r3, #0]
 8005c72:	e7db      	b.n	8005c2c <_puts_r+0x60>

08005c74 <puts>:
 8005c74:	4b02      	ldr	r3, [pc, #8]	; (8005c80 <puts+0xc>)
 8005c76:	4601      	mov	r1, r0
 8005c78:	6818      	ldr	r0, [r3, #0]
 8005c7a:	f7ff bfa7 	b.w	8005bcc <_puts_r>
 8005c7e:	bf00      	nop
 8005c80:	20000074 	.word	0x20000074

08005c84 <siprintf>:
 8005c84:	b40e      	push	{r1, r2, r3}
 8005c86:	b500      	push	{lr}
 8005c88:	b09c      	sub	sp, #112	; 0x70
 8005c8a:	ab1d      	add	r3, sp, #116	; 0x74
 8005c8c:	9002      	str	r0, [sp, #8]
 8005c8e:	9006      	str	r0, [sp, #24]
 8005c90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c94:	4809      	ldr	r0, [pc, #36]	; (8005cbc <siprintf+0x38>)
 8005c96:	9107      	str	r1, [sp, #28]
 8005c98:	9104      	str	r1, [sp, #16]
 8005c9a:	4909      	ldr	r1, [pc, #36]	; (8005cc0 <siprintf+0x3c>)
 8005c9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ca0:	9105      	str	r1, [sp, #20]
 8005ca2:	6800      	ldr	r0, [r0, #0]
 8005ca4:	9301      	str	r3, [sp, #4]
 8005ca6:	a902      	add	r1, sp, #8
 8005ca8:	f001 fc3e 	bl	8007528 <_svfiprintf_r>
 8005cac:	9b02      	ldr	r3, [sp, #8]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	b01c      	add	sp, #112	; 0x70
 8005cb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cb8:	b003      	add	sp, #12
 8005cba:	4770      	bx	lr
 8005cbc:	20000074 	.word	0x20000074
 8005cc0:	ffff0208 	.word	0xffff0208

08005cc4 <__sread>:
 8005cc4:	b510      	push	{r4, lr}
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ccc:	f000 f920 	bl	8005f10 <_read_r>
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	bfab      	itete	ge
 8005cd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005cd6:	89a3      	ldrhlt	r3, [r4, #12]
 8005cd8:	181b      	addge	r3, r3, r0
 8005cda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005cde:	bfac      	ite	ge
 8005ce0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ce2:	81a3      	strhlt	r3, [r4, #12]
 8005ce4:	bd10      	pop	{r4, pc}

08005ce6 <__swrite>:
 8005ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cea:	461f      	mov	r7, r3
 8005cec:	898b      	ldrh	r3, [r1, #12]
 8005cee:	05db      	lsls	r3, r3, #23
 8005cf0:	4605      	mov	r5, r0
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	4616      	mov	r6, r2
 8005cf6:	d505      	bpl.n	8005d04 <__swrite+0x1e>
 8005cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f000 f8f4 	bl	8005eec <_lseek_r>
 8005d04:	89a3      	ldrh	r3, [r4, #12]
 8005d06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d0e:	81a3      	strh	r3, [r4, #12]
 8005d10:	4632      	mov	r2, r6
 8005d12:	463b      	mov	r3, r7
 8005d14:	4628      	mov	r0, r5
 8005d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d1a:	f000 b91b 	b.w	8005f54 <_write_r>

08005d1e <__sseek>:
 8005d1e:	b510      	push	{r4, lr}
 8005d20:	460c      	mov	r4, r1
 8005d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d26:	f000 f8e1 	bl	8005eec <_lseek_r>
 8005d2a:	1c43      	adds	r3, r0, #1
 8005d2c:	89a3      	ldrh	r3, [r4, #12]
 8005d2e:	bf15      	itete	ne
 8005d30:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d3a:	81a3      	strheq	r3, [r4, #12]
 8005d3c:	bf18      	it	ne
 8005d3e:	81a3      	strhne	r3, [r4, #12]
 8005d40:	bd10      	pop	{r4, pc}

08005d42 <__sclose>:
 8005d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d46:	f000 b8c1 	b.w	8005ecc <_close_r>

08005d4a <__swbuf_r>:
 8005d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4c:	460e      	mov	r6, r1
 8005d4e:	4614      	mov	r4, r2
 8005d50:	4605      	mov	r5, r0
 8005d52:	b118      	cbz	r0, 8005d5c <__swbuf_r+0x12>
 8005d54:	6a03      	ldr	r3, [r0, #32]
 8005d56:	b90b      	cbnz	r3, 8005d5c <__swbuf_r+0x12>
 8005d58:	f7ff fef0 	bl	8005b3c <__sinit>
 8005d5c:	69a3      	ldr	r3, [r4, #24]
 8005d5e:	60a3      	str	r3, [r4, #8]
 8005d60:	89a3      	ldrh	r3, [r4, #12]
 8005d62:	071a      	lsls	r2, r3, #28
 8005d64:	d525      	bpl.n	8005db2 <__swbuf_r+0x68>
 8005d66:	6923      	ldr	r3, [r4, #16]
 8005d68:	b31b      	cbz	r3, 8005db2 <__swbuf_r+0x68>
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	6922      	ldr	r2, [r4, #16]
 8005d6e:	1a98      	subs	r0, r3, r2
 8005d70:	6963      	ldr	r3, [r4, #20]
 8005d72:	b2f6      	uxtb	r6, r6
 8005d74:	4283      	cmp	r3, r0
 8005d76:	4637      	mov	r7, r6
 8005d78:	dc04      	bgt.n	8005d84 <__swbuf_r+0x3a>
 8005d7a:	4621      	mov	r1, r4
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	f001 fe9b 	bl	8007ab8 <_fflush_r>
 8005d82:	b9e0      	cbnz	r0, 8005dbe <__swbuf_r+0x74>
 8005d84:	68a3      	ldr	r3, [r4, #8]
 8005d86:	3b01      	subs	r3, #1
 8005d88:	60a3      	str	r3, [r4, #8]
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	6022      	str	r2, [r4, #0]
 8005d90:	701e      	strb	r6, [r3, #0]
 8005d92:	6962      	ldr	r2, [r4, #20]
 8005d94:	1c43      	adds	r3, r0, #1
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d004      	beq.n	8005da4 <__swbuf_r+0x5a>
 8005d9a:	89a3      	ldrh	r3, [r4, #12]
 8005d9c:	07db      	lsls	r3, r3, #31
 8005d9e:	d506      	bpl.n	8005dae <__swbuf_r+0x64>
 8005da0:	2e0a      	cmp	r6, #10
 8005da2:	d104      	bne.n	8005dae <__swbuf_r+0x64>
 8005da4:	4621      	mov	r1, r4
 8005da6:	4628      	mov	r0, r5
 8005da8:	f001 fe86 	bl	8007ab8 <_fflush_r>
 8005dac:	b938      	cbnz	r0, 8005dbe <__swbuf_r+0x74>
 8005dae:	4638      	mov	r0, r7
 8005db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005db2:	4621      	mov	r1, r4
 8005db4:	4628      	mov	r0, r5
 8005db6:	f000 f805 	bl	8005dc4 <__swsetup_r>
 8005dba:	2800      	cmp	r0, #0
 8005dbc:	d0d5      	beq.n	8005d6a <__swbuf_r+0x20>
 8005dbe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005dc2:	e7f4      	b.n	8005dae <__swbuf_r+0x64>

08005dc4 <__swsetup_r>:
 8005dc4:	b538      	push	{r3, r4, r5, lr}
 8005dc6:	4b2a      	ldr	r3, [pc, #168]	; (8005e70 <__swsetup_r+0xac>)
 8005dc8:	4605      	mov	r5, r0
 8005dca:	6818      	ldr	r0, [r3, #0]
 8005dcc:	460c      	mov	r4, r1
 8005dce:	b118      	cbz	r0, 8005dd8 <__swsetup_r+0x14>
 8005dd0:	6a03      	ldr	r3, [r0, #32]
 8005dd2:	b90b      	cbnz	r3, 8005dd8 <__swsetup_r+0x14>
 8005dd4:	f7ff feb2 	bl	8005b3c <__sinit>
 8005dd8:	89a3      	ldrh	r3, [r4, #12]
 8005dda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005dde:	0718      	lsls	r0, r3, #28
 8005de0:	d422      	bmi.n	8005e28 <__swsetup_r+0x64>
 8005de2:	06d9      	lsls	r1, r3, #27
 8005de4:	d407      	bmi.n	8005df6 <__swsetup_r+0x32>
 8005de6:	2309      	movs	r3, #9
 8005de8:	602b      	str	r3, [r5, #0]
 8005dea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005dee:	81a3      	strh	r3, [r4, #12]
 8005df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005df4:	e034      	b.n	8005e60 <__swsetup_r+0x9c>
 8005df6:	0758      	lsls	r0, r3, #29
 8005df8:	d512      	bpl.n	8005e20 <__swsetup_r+0x5c>
 8005dfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dfc:	b141      	cbz	r1, 8005e10 <__swsetup_r+0x4c>
 8005dfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e02:	4299      	cmp	r1, r3
 8005e04:	d002      	beq.n	8005e0c <__swsetup_r+0x48>
 8005e06:	4628      	mov	r0, r5
 8005e08:	f000 ff6c 	bl	8006ce4 <_free_r>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	6363      	str	r3, [r4, #52]	; 0x34
 8005e10:	89a3      	ldrh	r3, [r4, #12]
 8005e12:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e16:	81a3      	strh	r3, [r4, #12]
 8005e18:	2300      	movs	r3, #0
 8005e1a:	6063      	str	r3, [r4, #4]
 8005e1c:	6923      	ldr	r3, [r4, #16]
 8005e1e:	6023      	str	r3, [r4, #0]
 8005e20:	89a3      	ldrh	r3, [r4, #12]
 8005e22:	f043 0308 	orr.w	r3, r3, #8
 8005e26:	81a3      	strh	r3, [r4, #12]
 8005e28:	6923      	ldr	r3, [r4, #16]
 8005e2a:	b94b      	cbnz	r3, 8005e40 <__swsetup_r+0x7c>
 8005e2c:	89a3      	ldrh	r3, [r4, #12]
 8005e2e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e36:	d003      	beq.n	8005e40 <__swsetup_r+0x7c>
 8005e38:	4621      	mov	r1, r4
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	f001 fe8a 	bl	8007b54 <__smakebuf_r>
 8005e40:	89a0      	ldrh	r0, [r4, #12]
 8005e42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e46:	f010 0301 	ands.w	r3, r0, #1
 8005e4a:	d00a      	beq.n	8005e62 <__swsetup_r+0x9e>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60a3      	str	r3, [r4, #8]
 8005e50:	6963      	ldr	r3, [r4, #20]
 8005e52:	425b      	negs	r3, r3
 8005e54:	61a3      	str	r3, [r4, #24]
 8005e56:	6923      	ldr	r3, [r4, #16]
 8005e58:	b943      	cbnz	r3, 8005e6c <__swsetup_r+0xa8>
 8005e5a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e5e:	d1c4      	bne.n	8005dea <__swsetup_r+0x26>
 8005e60:	bd38      	pop	{r3, r4, r5, pc}
 8005e62:	0781      	lsls	r1, r0, #30
 8005e64:	bf58      	it	pl
 8005e66:	6963      	ldrpl	r3, [r4, #20]
 8005e68:	60a3      	str	r3, [r4, #8]
 8005e6a:	e7f4      	b.n	8005e56 <__swsetup_r+0x92>
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	e7f7      	b.n	8005e60 <__swsetup_r+0x9c>
 8005e70:	20000074 	.word	0x20000074

08005e74 <memset>:
 8005e74:	4402      	add	r2, r0
 8005e76:	4603      	mov	r3, r0
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d100      	bne.n	8005e7e <memset+0xa>
 8005e7c:	4770      	bx	lr
 8005e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e82:	e7f9      	b.n	8005e78 <memset+0x4>

08005e84 <strchr>:
 8005e84:	b2c9      	uxtb	r1, r1
 8005e86:	4603      	mov	r3, r0
 8005e88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e8c:	b11a      	cbz	r2, 8005e96 <strchr+0x12>
 8005e8e:	428a      	cmp	r2, r1
 8005e90:	d1f9      	bne.n	8005e86 <strchr+0x2>
 8005e92:	4618      	mov	r0, r3
 8005e94:	4770      	bx	lr
 8005e96:	2900      	cmp	r1, #0
 8005e98:	bf18      	it	ne
 8005e9a:	2300      	movne	r3, #0
 8005e9c:	e7f9      	b.n	8005e92 <strchr+0xe>

08005e9e <strncpy>:
 8005e9e:	b510      	push	{r4, lr}
 8005ea0:	3901      	subs	r1, #1
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	b132      	cbz	r2, 8005eb4 <strncpy+0x16>
 8005ea6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005eaa:	f803 4b01 	strb.w	r4, [r3], #1
 8005eae:	3a01      	subs	r2, #1
 8005eb0:	2c00      	cmp	r4, #0
 8005eb2:	d1f7      	bne.n	8005ea4 <strncpy+0x6>
 8005eb4:	441a      	add	r2, r3
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d100      	bne.n	8005ebe <strncpy+0x20>
 8005ebc:	bd10      	pop	{r4, pc}
 8005ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8005ec2:	e7f9      	b.n	8005eb8 <strncpy+0x1a>

08005ec4 <_localeconv_r>:
 8005ec4:	4800      	ldr	r0, [pc, #0]	; (8005ec8 <_localeconv_r+0x4>)
 8005ec6:	4770      	bx	lr
 8005ec8:	20000168 	.word	0x20000168

08005ecc <_close_r>:
 8005ecc:	b538      	push	{r3, r4, r5, lr}
 8005ece:	4d06      	ldr	r5, [pc, #24]	; (8005ee8 <_close_r+0x1c>)
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	4608      	mov	r0, r1
 8005ed6:	602b      	str	r3, [r5, #0]
 8005ed8:	f7fb ff09 	bl	8001cee <_close>
 8005edc:	1c43      	adds	r3, r0, #1
 8005ede:	d102      	bne.n	8005ee6 <_close_r+0x1a>
 8005ee0:	682b      	ldr	r3, [r5, #0]
 8005ee2:	b103      	cbz	r3, 8005ee6 <_close_r+0x1a>
 8005ee4:	6023      	str	r3, [r4, #0]
 8005ee6:	bd38      	pop	{r3, r4, r5, pc}
 8005ee8:	200004d4 	.word	0x200004d4

08005eec <_lseek_r>:
 8005eec:	b538      	push	{r3, r4, r5, lr}
 8005eee:	4d07      	ldr	r5, [pc, #28]	; (8005f0c <_lseek_r+0x20>)
 8005ef0:	4604      	mov	r4, r0
 8005ef2:	4608      	mov	r0, r1
 8005ef4:	4611      	mov	r1, r2
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	602a      	str	r2, [r5, #0]
 8005efa:	461a      	mov	r2, r3
 8005efc:	f7fb ff1e 	bl	8001d3c <_lseek>
 8005f00:	1c43      	adds	r3, r0, #1
 8005f02:	d102      	bne.n	8005f0a <_lseek_r+0x1e>
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	b103      	cbz	r3, 8005f0a <_lseek_r+0x1e>
 8005f08:	6023      	str	r3, [r4, #0]
 8005f0a:	bd38      	pop	{r3, r4, r5, pc}
 8005f0c:	200004d4 	.word	0x200004d4

08005f10 <_read_r>:
 8005f10:	b538      	push	{r3, r4, r5, lr}
 8005f12:	4d07      	ldr	r5, [pc, #28]	; (8005f30 <_read_r+0x20>)
 8005f14:	4604      	mov	r4, r0
 8005f16:	4608      	mov	r0, r1
 8005f18:	4611      	mov	r1, r2
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	602a      	str	r2, [r5, #0]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f7fb feac 	bl	8001c7c <_read>
 8005f24:	1c43      	adds	r3, r0, #1
 8005f26:	d102      	bne.n	8005f2e <_read_r+0x1e>
 8005f28:	682b      	ldr	r3, [r5, #0]
 8005f2a:	b103      	cbz	r3, 8005f2e <_read_r+0x1e>
 8005f2c:	6023      	str	r3, [r4, #0]
 8005f2e:	bd38      	pop	{r3, r4, r5, pc}
 8005f30:	200004d4 	.word	0x200004d4

08005f34 <_sbrk_r>:
 8005f34:	b538      	push	{r3, r4, r5, lr}
 8005f36:	4d06      	ldr	r5, [pc, #24]	; (8005f50 <_sbrk_r+0x1c>)
 8005f38:	2300      	movs	r3, #0
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	4608      	mov	r0, r1
 8005f3e:	602b      	str	r3, [r5, #0]
 8005f40:	f7fb ff0a 	bl	8001d58 <_sbrk>
 8005f44:	1c43      	adds	r3, r0, #1
 8005f46:	d102      	bne.n	8005f4e <_sbrk_r+0x1a>
 8005f48:	682b      	ldr	r3, [r5, #0]
 8005f4a:	b103      	cbz	r3, 8005f4e <_sbrk_r+0x1a>
 8005f4c:	6023      	str	r3, [r4, #0]
 8005f4e:	bd38      	pop	{r3, r4, r5, pc}
 8005f50:	200004d4 	.word	0x200004d4

08005f54 <_write_r>:
 8005f54:	b538      	push	{r3, r4, r5, lr}
 8005f56:	4d07      	ldr	r5, [pc, #28]	; (8005f74 <_write_r+0x20>)
 8005f58:	4604      	mov	r4, r0
 8005f5a:	4608      	mov	r0, r1
 8005f5c:	4611      	mov	r1, r2
 8005f5e:	2200      	movs	r2, #0
 8005f60:	602a      	str	r2, [r5, #0]
 8005f62:	461a      	mov	r2, r3
 8005f64:	f7fb fea7 	bl	8001cb6 <_write>
 8005f68:	1c43      	adds	r3, r0, #1
 8005f6a:	d102      	bne.n	8005f72 <_write_r+0x1e>
 8005f6c:	682b      	ldr	r3, [r5, #0]
 8005f6e:	b103      	cbz	r3, 8005f72 <_write_r+0x1e>
 8005f70:	6023      	str	r3, [r4, #0]
 8005f72:	bd38      	pop	{r3, r4, r5, pc}
 8005f74:	200004d4 	.word	0x200004d4

08005f78 <__errno>:
 8005f78:	4b01      	ldr	r3, [pc, #4]	; (8005f80 <__errno+0x8>)
 8005f7a:	6818      	ldr	r0, [r3, #0]
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	20000074 	.word	0x20000074

08005f84 <__libc_init_array>:
 8005f84:	b570      	push	{r4, r5, r6, lr}
 8005f86:	4d0d      	ldr	r5, [pc, #52]	; (8005fbc <__libc_init_array+0x38>)
 8005f88:	4c0d      	ldr	r4, [pc, #52]	; (8005fc0 <__libc_init_array+0x3c>)
 8005f8a:	1b64      	subs	r4, r4, r5
 8005f8c:	10a4      	asrs	r4, r4, #2
 8005f8e:	2600      	movs	r6, #0
 8005f90:	42a6      	cmp	r6, r4
 8005f92:	d109      	bne.n	8005fa8 <__libc_init_array+0x24>
 8005f94:	4d0b      	ldr	r5, [pc, #44]	; (8005fc4 <__libc_init_array+0x40>)
 8005f96:	4c0c      	ldr	r4, [pc, #48]	; (8005fc8 <__libc_init_array+0x44>)
 8005f98:	f001 ff3c 	bl	8007e14 <_init>
 8005f9c:	1b64      	subs	r4, r4, r5
 8005f9e:	10a4      	asrs	r4, r4, #2
 8005fa0:	2600      	movs	r6, #0
 8005fa2:	42a6      	cmp	r6, r4
 8005fa4:	d105      	bne.n	8005fb2 <__libc_init_array+0x2e>
 8005fa6:	bd70      	pop	{r4, r5, r6, pc}
 8005fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fac:	4798      	blx	r3
 8005fae:	3601      	adds	r6, #1
 8005fb0:	e7ee      	b.n	8005f90 <__libc_init_array+0xc>
 8005fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fb6:	4798      	blx	r3
 8005fb8:	3601      	adds	r6, #1
 8005fba:	e7f2      	b.n	8005fa2 <__libc_init_array+0x1e>
 8005fbc:	0800aec4 	.word	0x0800aec4
 8005fc0:	0800aec4 	.word	0x0800aec4
 8005fc4:	0800aec4 	.word	0x0800aec4
 8005fc8:	0800aec8 	.word	0x0800aec8

08005fcc <__retarget_lock_init_recursive>:
 8005fcc:	4770      	bx	lr

08005fce <__retarget_lock_acquire_recursive>:
 8005fce:	4770      	bx	lr

08005fd0 <__retarget_lock_release_recursive>:
 8005fd0:	4770      	bx	lr

08005fd2 <memcpy>:
 8005fd2:	440a      	add	r2, r1
 8005fd4:	4291      	cmp	r1, r2
 8005fd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005fda:	d100      	bne.n	8005fde <memcpy+0xc>
 8005fdc:	4770      	bx	lr
 8005fde:	b510      	push	{r4, lr}
 8005fe0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fe4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fe8:	4291      	cmp	r1, r2
 8005fea:	d1f9      	bne.n	8005fe0 <memcpy+0xe>
 8005fec:	bd10      	pop	{r4, pc}

08005fee <quorem>:
 8005fee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff2:	6903      	ldr	r3, [r0, #16]
 8005ff4:	690c      	ldr	r4, [r1, #16]
 8005ff6:	42a3      	cmp	r3, r4
 8005ff8:	4607      	mov	r7, r0
 8005ffa:	db7e      	blt.n	80060fa <quorem+0x10c>
 8005ffc:	3c01      	subs	r4, #1
 8005ffe:	f101 0814 	add.w	r8, r1, #20
 8006002:	f100 0514 	add.w	r5, r0, #20
 8006006:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800600a:	9301      	str	r3, [sp, #4]
 800600c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006010:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006014:	3301      	adds	r3, #1
 8006016:	429a      	cmp	r2, r3
 8006018:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800601c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006020:	fbb2 f6f3 	udiv	r6, r2, r3
 8006024:	d331      	bcc.n	800608a <quorem+0x9c>
 8006026:	f04f 0e00 	mov.w	lr, #0
 800602a:	4640      	mov	r0, r8
 800602c:	46ac      	mov	ip, r5
 800602e:	46f2      	mov	sl, lr
 8006030:	f850 2b04 	ldr.w	r2, [r0], #4
 8006034:	b293      	uxth	r3, r2
 8006036:	fb06 e303 	mla	r3, r6, r3, lr
 800603a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800603e:	0c1a      	lsrs	r2, r3, #16
 8006040:	b29b      	uxth	r3, r3
 8006042:	ebaa 0303 	sub.w	r3, sl, r3
 8006046:	f8dc a000 	ldr.w	sl, [ip]
 800604a:	fa13 f38a 	uxtah	r3, r3, sl
 800604e:	fb06 220e 	mla	r2, r6, lr, r2
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	9b00      	ldr	r3, [sp, #0]
 8006056:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800605a:	b292      	uxth	r2, r2
 800605c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006060:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006064:	f8bd 3000 	ldrh.w	r3, [sp]
 8006068:	4581      	cmp	r9, r0
 800606a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800606e:	f84c 3b04 	str.w	r3, [ip], #4
 8006072:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006076:	d2db      	bcs.n	8006030 <quorem+0x42>
 8006078:	f855 300b 	ldr.w	r3, [r5, fp]
 800607c:	b92b      	cbnz	r3, 800608a <quorem+0x9c>
 800607e:	9b01      	ldr	r3, [sp, #4]
 8006080:	3b04      	subs	r3, #4
 8006082:	429d      	cmp	r5, r3
 8006084:	461a      	mov	r2, r3
 8006086:	d32c      	bcc.n	80060e2 <quorem+0xf4>
 8006088:	613c      	str	r4, [r7, #16]
 800608a:	4638      	mov	r0, r7
 800608c:	f001 f8f2 	bl	8007274 <__mcmp>
 8006090:	2800      	cmp	r0, #0
 8006092:	db22      	blt.n	80060da <quorem+0xec>
 8006094:	3601      	adds	r6, #1
 8006096:	4629      	mov	r1, r5
 8006098:	2000      	movs	r0, #0
 800609a:	f858 2b04 	ldr.w	r2, [r8], #4
 800609e:	f8d1 c000 	ldr.w	ip, [r1]
 80060a2:	b293      	uxth	r3, r2
 80060a4:	1ac3      	subs	r3, r0, r3
 80060a6:	0c12      	lsrs	r2, r2, #16
 80060a8:	fa13 f38c 	uxtah	r3, r3, ip
 80060ac:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80060b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060ba:	45c1      	cmp	r9, r8
 80060bc:	f841 3b04 	str.w	r3, [r1], #4
 80060c0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80060c4:	d2e9      	bcs.n	800609a <quorem+0xac>
 80060c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060ce:	b922      	cbnz	r2, 80060da <quorem+0xec>
 80060d0:	3b04      	subs	r3, #4
 80060d2:	429d      	cmp	r5, r3
 80060d4:	461a      	mov	r2, r3
 80060d6:	d30a      	bcc.n	80060ee <quorem+0x100>
 80060d8:	613c      	str	r4, [r7, #16]
 80060da:	4630      	mov	r0, r6
 80060dc:	b003      	add	sp, #12
 80060de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060e2:	6812      	ldr	r2, [r2, #0]
 80060e4:	3b04      	subs	r3, #4
 80060e6:	2a00      	cmp	r2, #0
 80060e8:	d1ce      	bne.n	8006088 <quorem+0x9a>
 80060ea:	3c01      	subs	r4, #1
 80060ec:	e7c9      	b.n	8006082 <quorem+0x94>
 80060ee:	6812      	ldr	r2, [r2, #0]
 80060f0:	3b04      	subs	r3, #4
 80060f2:	2a00      	cmp	r2, #0
 80060f4:	d1f0      	bne.n	80060d8 <quorem+0xea>
 80060f6:	3c01      	subs	r4, #1
 80060f8:	e7eb      	b.n	80060d2 <quorem+0xe4>
 80060fa:	2000      	movs	r0, #0
 80060fc:	e7ee      	b.n	80060dc <quorem+0xee>
	...

08006100 <_dtoa_r>:
 8006100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006104:	ed2d 8b04 	vpush	{d8-d9}
 8006108:	69c5      	ldr	r5, [r0, #28]
 800610a:	b093      	sub	sp, #76	; 0x4c
 800610c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006110:	ec57 6b10 	vmov	r6, r7, d0
 8006114:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006118:	9107      	str	r1, [sp, #28]
 800611a:	4604      	mov	r4, r0
 800611c:	920a      	str	r2, [sp, #40]	; 0x28
 800611e:	930d      	str	r3, [sp, #52]	; 0x34
 8006120:	b975      	cbnz	r5, 8006140 <_dtoa_r+0x40>
 8006122:	2010      	movs	r0, #16
 8006124:	f7fe fed8 	bl	8004ed8 <malloc>
 8006128:	4602      	mov	r2, r0
 800612a:	61e0      	str	r0, [r4, #28]
 800612c:	b920      	cbnz	r0, 8006138 <_dtoa_r+0x38>
 800612e:	4bae      	ldr	r3, [pc, #696]	; (80063e8 <_dtoa_r+0x2e8>)
 8006130:	21ef      	movs	r1, #239	; 0xef
 8006132:	48ae      	ldr	r0, [pc, #696]	; (80063ec <_dtoa_r+0x2ec>)
 8006134:	f001 fd86 	bl	8007c44 <__assert_func>
 8006138:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800613c:	6005      	str	r5, [r0, #0]
 800613e:	60c5      	str	r5, [r0, #12]
 8006140:	69e3      	ldr	r3, [r4, #28]
 8006142:	6819      	ldr	r1, [r3, #0]
 8006144:	b151      	cbz	r1, 800615c <_dtoa_r+0x5c>
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	604a      	str	r2, [r1, #4]
 800614a:	2301      	movs	r3, #1
 800614c:	4093      	lsls	r3, r2
 800614e:	608b      	str	r3, [r1, #8]
 8006150:	4620      	mov	r0, r4
 8006152:	f000 fe53 	bl	8006dfc <_Bfree>
 8006156:	69e3      	ldr	r3, [r4, #28]
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	1e3b      	subs	r3, r7, #0
 800615e:	bfbb      	ittet	lt
 8006160:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006164:	9303      	strlt	r3, [sp, #12]
 8006166:	2300      	movge	r3, #0
 8006168:	2201      	movlt	r2, #1
 800616a:	bfac      	ite	ge
 800616c:	f8c8 3000 	strge.w	r3, [r8]
 8006170:	f8c8 2000 	strlt.w	r2, [r8]
 8006174:	4b9e      	ldr	r3, [pc, #632]	; (80063f0 <_dtoa_r+0x2f0>)
 8006176:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800617a:	ea33 0308 	bics.w	r3, r3, r8
 800617e:	d11b      	bne.n	80061b8 <_dtoa_r+0xb8>
 8006180:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006182:	f242 730f 	movw	r3, #9999	; 0x270f
 8006186:	6013      	str	r3, [r2, #0]
 8006188:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800618c:	4333      	orrs	r3, r6
 800618e:	f000 8593 	beq.w	8006cb8 <_dtoa_r+0xbb8>
 8006192:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006194:	b963      	cbnz	r3, 80061b0 <_dtoa_r+0xb0>
 8006196:	4b97      	ldr	r3, [pc, #604]	; (80063f4 <_dtoa_r+0x2f4>)
 8006198:	e027      	b.n	80061ea <_dtoa_r+0xea>
 800619a:	4b97      	ldr	r3, [pc, #604]	; (80063f8 <_dtoa_r+0x2f8>)
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	3308      	adds	r3, #8
 80061a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061a2:	6013      	str	r3, [r2, #0]
 80061a4:	9800      	ldr	r0, [sp, #0]
 80061a6:	b013      	add	sp, #76	; 0x4c
 80061a8:	ecbd 8b04 	vpop	{d8-d9}
 80061ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b0:	4b90      	ldr	r3, [pc, #576]	; (80063f4 <_dtoa_r+0x2f4>)
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	3303      	adds	r3, #3
 80061b6:	e7f3      	b.n	80061a0 <_dtoa_r+0xa0>
 80061b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80061bc:	2200      	movs	r2, #0
 80061be:	ec51 0b17 	vmov	r0, r1, d7
 80061c2:	eeb0 8a47 	vmov.f32	s16, s14
 80061c6:	eef0 8a67 	vmov.f32	s17, s15
 80061ca:	2300      	movs	r3, #0
 80061cc:	f7fa fc8c 	bl	8000ae8 <__aeabi_dcmpeq>
 80061d0:	4681      	mov	r9, r0
 80061d2:	b160      	cbz	r0, 80061ee <_dtoa_r+0xee>
 80061d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80061d6:	2301      	movs	r3, #1
 80061d8:	6013      	str	r3, [r2, #0]
 80061da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 8568 	beq.w	8006cb2 <_dtoa_r+0xbb2>
 80061e2:	4b86      	ldr	r3, [pc, #536]	; (80063fc <_dtoa_r+0x2fc>)
 80061e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061e6:	6013      	str	r3, [r2, #0]
 80061e8:	3b01      	subs	r3, #1
 80061ea:	9300      	str	r3, [sp, #0]
 80061ec:	e7da      	b.n	80061a4 <_dtoa_r+0xa4>
 80061ee:	aa10      	add	r2, sp, #64	; 0x40
 80061f0:	a911      	add	r1, sp, #68	; 0x44
 80061f2:	4620      	mov	r0, r4
 80061f4:	eeb0 0a48 	vmov.f32	s0, s16
 80061f8:	eef0 0a68 	vmov.f32	s1, s17
 80061fc:	f001 f8e0 	bl	80073c0 <__d2b>
 8006200:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006204:	4682      	mov	sl, r0
 8006206:	2d00      	cmp	r5, #0
 8006208:	d07f      	beq.n	800630a <_dtoa_r+0x20a>
 800620a:	ee18 3a90 	vmov	r3, s17
 800620e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006212:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006216:	ec51 0b18 	vmov	r0, r1, d8
 800621a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800621e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006222:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006226:	4619      	mov	r1, r3
 8006228:	2200      	movs	r2, #0
 800622a:	4b75      	ldr	r3, [pc, #468]	; (8006400 <_dtoa_r+0x300>)
 800622c:	f7fa f83c 	bl	80002a8 <__aeabi_dsub>
 8006230:	a367      	add	r3, pc, #412	; (adr r3, 80063d0 <_dtoa_r+0x2d0>)
 8006232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006236:	f7fa f9ef 	bl	8000618 <__aeabi_dmul>
 800623a:	a367      	add	r3, pc, #412	; (adr r3, 80063d8 <_dtoa_r+0x2d8>)
 800623c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006240:	f7fa f834 	bl	80002ac <__adddf3>
 8006244:	4606      	mov	r6, r0
 8006246:	4628      	mov	r0, r5
 8006248:	460f      	mov	r7, r1
 800624a:	f7fa f97b 	bl	8000544 <__aeabi_i2d>
 800624e:	a364      	add	r3, pc, #400	; (adr r3, 80063e0 <_dtoa_r+0x2e0>)
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	f7fa f9e0 	bl	8000618 <__aeabi_dmul>
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
 800625c:	4630      	mov	r0, r6
 800625e:	4639      	mov	r1, r7
 8006260:	f7fa f824 	bl	80002ac <__adddf3>
 8006264:	4606      	mov	r6, r0
 8006266:	460f      	mov	r7, r1
 8006268:	f7fa fc86 	bl	8000b78 <__aeabi_d2iz>
 800626c:	2200      	movs	r2, #0
 800626e:	4683      	mov	fp, r0
 8006270:	2300      	movs	r3, #0
 8006272:	4630      	mov	r0, r6
 8006274:	4639      	mov	r1, r7
 8006276:	f7fa fc41 	bl	8000afc <__aeabi_dcmplt>
 800627a:	b148      	cbz	r0, 8006290 <_dtoa_r+0x190>
 800627c:	4658      	mov	r0, fp
 800627e:	f7fa f961 	bl	8000544 <__aeabi_i2d>
 8006282:	4632      	mov	r2, r6
 8006284:	463b      	mov	r3, r7
 8006286:	f7fa fc2f 	bl	8000ae8 <__aeabi_dcmpeq>
 800628a:	b908      	cbnz	r0, 8006290 <_dtoa_r+0x190>
 800628c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006290:	f1bb 0f16 	cmp.w	fp, #22
 8006294:	d857      	bhi.n	8006346 <_dtoa_r+0x246>
 8006296:	4b5b      	ldr	r3, [pc, #364]	; (8006404 <_dtoa_r+0x304>)
 8006298:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800629c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a0:	ec51 0b18 	vmov	r0, r1, d8
 80062a4:	f7fa fc2a 	bl	8000afc <__aeabi_dcmplt>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	d04e      	beq.n	800634a <_dtoa_r+0x24a>
 80062ac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80062b0:	2300      	movs	r3, #0
 80062b2:	930c      	str	r3, [sp, #48]	; 0x30
 80062b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062b6:	1b5b      	subs	r3, r3, r5
 80062b8:	1e5a      	subs	r2, r3, #1
 80062ba:	bf45      	ittet	mi
 80062bc:	f1c3 0301 	rsbmi	r3, r3, #1
 80062c0:	9305      	strmi	r3, [sp, #20]
 80062c2:	2300      	movpl	r3, #0
 80062c4:	2300      	movmi	r3, #0
 80062c6:	9206      	str	r2, [sp, #24]
 80062c8:	bf54      	ite	pl
 80062ca:	9305      	strpl	r3, [sp, #20]
 80062cc:	9306      	strmi	r3, [sp, #24]
 80062ce:	f1bb 0f00 	cmp.w	fp, #0
 80062d2:	db3c      	blt.n	800634e <_dtoa_r+0x24e>
 80062d4:	9b06      	ldr	r3, [sp, #24]
 80062d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80062da:	445b      	add	r3, fp
 80062dc:	9306      	str	r3, [sp, #24]
 80062de:	2300      	movs	r3, #0
 80062e0:	9308      	str	r3, [sp, #32]
 80062e2:	9b07      	ldr	r3, [sp, #28]
 80062e4:	2b09      	cmp	r3, #9
 80062e6:	d868      	bhi.n	80063ba <_dtoa_r+0x2ba>
 80062e8:	2b05      	cmp	r3, #5
 80062ea:	bfc4      	itt	gt
 80062ec:	3b04      	subgt	r3, #4
 80062ee:	9307      	strgt	r3, [sp, #28]
 80062f0:	9b07      	ldr	r3, [sp, #28]
 80062f2:	f1a3 0302 	sub.w	r3, r3, #2
 80062f6:	bfcc      	ite	gt
 80062f8:	2500      	movgt	r5, #0
 80062fa:	2501      	movle	r5, #1
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	f200 8085 	bhi.w	800640c <_dtoa_r+0x30c>
 8006302:	e8df f003 	tbb	[pc, r3]
 8006306:	3b2e      	.short	0x3b2e
 8006308:	5839      	.short	0x5839
 800630a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800630e:	441d      	add	r5, r3
 8006310:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006314:	2b20      	cmp	r3, #32
 8006316:	bfc1      	itttt	gt
 8006318:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800631c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006320:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006324:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006328:	bfd6      	itet	le
 800632a:	f1c3 0320 	rsble	r3, r3, #32
 800632e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006332:	fa06 f003 	lslle.w	r0, r6, r3
 8006336:	f7fa f8f5 	bl	8000524 <__aeabi_ui2d>
 800633a:	2201      	movs	r2, #1
 800633c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006340:	3d01      	subs	r5, #1
 8006342:	920e      	str	r2, [sp, #56]	; 0x38
 8006344:	e76f      	b.n	8006226 <_dtoa_r+0x126>
 8006346:	2301      	movs	r3, #1
 8006348:	e7b3      	b.n	80062b2 <_dtoa_r+0x1b2>
 800634a:	900c      	str	r0, [sp, #48]	; 0x30
 800634c:	e7b2      	b.n	80062b4 <_dtoa_r+0x1b4>
 800634e:	9b05      	ldr	r3, [sp, #20]
 8006350:	eba3 030b 	sub.w	r3, r3, fp
 8006354:	9305      	str	r3, [sp, #20]
 8006356:	f1cb 0300 	rsb	r3, fp, #0
 800635a:	9308      	str	r3, [sp, #32]
 800635c:	2300      	movs	r3, #0
 800635e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006360:	e7bf      	b.n	80062e2 <_dtoa_r+0x1e2>
 8006362:	2300      	movs	r3, #0
 8006364:	9309      	str	r3, [sp, #36]	; 0x24
 8006366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006368:	2b00      	cmp	r3, #0
 800636a:	dc52      	bgt.n	8006412 <_dtoa_r+0x312>
 800636c:	2301      	movs	r3, #1
 800636e:	9301      	str	r3, [sp, #4]
 8006370:	9304      	str	r3, [sp, #16]
 8006372:	461a      	mov	r2, r3
 8006374:	920a      	str	r2, [sp, #40]	; 0x28
 8006376:	e00b      	b.n	8006390 <_dtoa_r+0x290>
 8006378:	2301      	movs	r3, #1
 800637a:	e7f3      	b.n	8006364 <_dtoa_r+0x264>
 800637c:	2300      	movs	r3, #0
 800637e:	9309      	str	r3, [sp, #36]	; 0x24
 8006380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006382:	445b      	add	r3, fp
 8006384:	9301      	str	r3, [sp, #4]
 8006386:	3301      	adds	r3, #1
 8006388:	2b01      	cmp	r3, #1
 800638a:	9304      	str	r3, [sp, #16]
 800638c:	bfb8      	it	lt
 800638e:	2301      	movlt	r3, #1
 8006390:	69e0      	ldr	r0, [r4, #28]
 8006392:	2100      	movs	r1, #0
 8006394:	2204      	movs	r2, #4
 8006396:	f102 0614 	add.w	r6, r2, #20
 800639a:	429e      	cmp	r6, r3
 800639c:	d93d      	bls.n	800641a <_dtoa_r+0x31a>
 800639e:	6041      	str	r1, [r0, #4]
 80063a0:	4620      	mov	r0, r4
 80063a2:	f000 fceb 	bl	8006d7c <_Balloc>
 80063a6:	9000      	str	r0, [sp, #0]
 80063a8:	2800      	cmp	r0, #0
 80063aa:	d139      	bne.n	8006420 <_dtoa_r+0x320>
 80063ac:	4b16      	ldr	r3, [pc, #88]	; (8006408 <_dtoa_r+0x308>)
 80063ae:	4602      	mov	r2, r0
 80063b0:	f240 11af 	movw	r1, #431	; 0x1af
 80063b4:	e6bd      	b.n	8006132 <_dtoa_r+0x32>
 80063b6:	2301      	movs	r3, #1
 80063b8:	e7e1      	b.n	800637e <_dtoa_r+0x27e>
 80063ba:	2501      	movs	r5, #1
 80063bc:	2300      	movs	r3, #0
 80063be:	9307      	str	r3, [sp, #28]
 80063c0:	9509      	str	r5, [sp, #36]	; 0x24
 80063c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063c6:	9301      	str	r3, [sp, #4]
 80063c8:	9304      	str	r3, [sp, #16]
 80063ca:	2200      	movs	r2, #0
 80063cc:	2312      	movs	r3, #18
 80063ce:	e7d1      	b.n	8006374 <_dtoa_r+0x274>
 80063d0:	636f4361 	.word	0x636f4361
 80063d4:	3fd287a7 	.word	0x3fd287a7
 80063d8:	8b60c8b3 	.word	0x8b60c8b3
 80063dc:	3fc68a28 	.word	0x3fc68a28
 80063e0:	509f79fb 	.word	0x509f79fb
 80063e4:	3fd34413 	.word	0x3fd34413
 80063e8:	0800ac8e 	.word	0x0800ac8e
 80063ec:	0800aca5 	.word	0x0800aca5
 80063f0:	7ff00000 	.word	0x7ff00000
 80063f4:	0800ac8a 	.word	0x0800ac8a
 80063f8:	0800ac81 	.word	0x0800ac81
 80063fc:	0800ac5e 	.word	0x0800ac5e
 8006400:	3ff80000 	.word	0x3ff80000
 8006404:	0800ad90 	.word	0x0800ad90
 8006408:	0800acfd 	.word	0x0800acfd
 800640c:	2301      	movs	r3, #1
 800640e:	9309      	str	r3, [sp, #36]	; 0x24
 8006410:	e7d7      	b.n	80063c2 <_dtoa_r+0x2c2>
 8006412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006414:	9301      	str	r3, [sp, #4]
 8006416:	9304      	str	r3, [sp, #16]
 8006418:	e7ba      	b.n	8006390 <_dtoa_r+0x290>
 800641a:	3101      	adds	r1, #1
 800641c:	0052      	lsls	r2, r2, #1
 800641e:	e7ba      	b.n	8006396 <_dtoa_r+0x296>
 8006420:	69e3      	ldr	r3, [r4, #28]
 8006422:	9a00      	ldr	r2, [sp, #0]
 8006424:	601a      	str	r2, [r3, #0]
 8006426:	9b04      	ldr	r3, [sp, #16]
 8006428:	2b0e      	cmp	r3, #14
 800642a:	f200 80a8 	bhi.w	800657e <_dtoa_r+0x47e>
 800642e:	2d00      	cmp	r5, #0
 8006430:	f000 80a5 	beq.w	800657e <_dtoa_r+0x47e>
 8006434:	f1bb 0f00 	cmp.w	fp, #0
 8006438:	dd38      	ble.n	80064ac <_dtoa_r+0x3ac>
 800643a:	4bc0      	ldr	r3, [pc, #768]	; (800673c <_dtoa_r+0x63c>)
 800643c:	f00b 020f 	and.w	r2, fp, #15
 8006440:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006444:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006448:	e9d3 6700 	ldrd	r6, r7, [r3]
 800644c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006450:	d019      	beq.n	8006486 <_dtoa_r+0x386>
 8006452:	4bbb      	ldr	r3, [pc, #748]	; (8006740 <_dtoa_r+0x640>)
 8006454:	ec51 0b18 	vmov	r0, r1, d8
 8006458:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800645c:	f7fa fa06 	bl	800086c <__aeabi_ddiv>
 8006460:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006464:	f008 080f 	and.w	r8, r8, #15
 8006468:	2503      	movs	r5, #3
 800646a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006740 <_dtoa_r+0x640>
 800646e:	f1b8 0f00 	cmp.w	r8, #0
 8006472:	d10a      	bne.n	800648a <_dtoa_r+0x38a>
 8006474:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006478:	4632      	mov	r2, r6
 800647a:	463b      	mov	r3, r7
 800647c:	f7fa f9f6 	bl	800086c <__aeabi_ddiv>
 8006480:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006484:	e02b      	b.n	80064de <_dtoa_r+0x3de>
 8006486:	2502      	movs	r5, #2
 8006488:	e7ef      	b.n	800646a <_dtoa_r+0x36a>
 800648a:	f018 0f01 	tst.w	r8, #1
 800648e:	d008      	beq.n	80064a2 <_dtoa_r+0x3a2>
 8006490:	4630      	mov	r0, r6
 8006492:	4639      	mov	r1, r7
 8006494:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006498:	f7fa f8be 	bl	8000618 <__aeabi_dmul>
 800649c:	3501      	adds	r5, #1
 800649e:	4606      	mov	r6, r0
 80064a0:	460f      	mov	r7, r1
 80064a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80064a6:	f109 0908 	add.w	r9, r9, #8
 80064aa:	e7e0      	b.n	800646e <_dtoa_r+0x36e>
 80064ac:	f000 809f 	beq.w	80065ee <_dtoa_r+0x4ee>
 80064b0:	f1cb 0600 	rsb	r6, fp, #0
 80064b4:	4ba1      	ldr	r3, [pc, #644]	; (800673c <_dtoa_r+0x63c>)
 80064b6:	4fa2      	ldr	r7, [pc, #648]	; (8006740 <_dtoa_r+0x640>)
 80064b8:	f006 020f 	and.w	r2, r6, #15
 80064bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c4:	ec51 0b18 	vmov	r0, r1, d8
 80064c8:	f7fa f8a6 	bl	8000618 <__aeabi_dmul>
 80064cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064d0:	1136      	asrs	r6, r6, #4
 80064d2:	2300      	movs	r3, #0
 80064d4:	2502      	movs	r5, #2
 80064d6:	2e00      	cmp	r6, #0
 80064d8:	d17e      	bne.n	80065d8 <_dtoa_r+0x4d8>
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1d0      	bne.n	8006480 <_dtoa_r+0x380>
 80064de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f000 8084 	beq.w	80065f2 <_dtoa_r+0x4f2>
 80064ea:	4b96      	ldr	r3, [pc, #600]	; (8006744 <_dtoa_r+0x644>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	4640      	mov	r0, r8
 80064f0:	4649      	mov	r1, r9
 80064f2:	f7fa fb03 	bl	8000afc <__aeabi_dcmplt>
 80064f6:	2800      	cmp	r0, #0
 80064f8:	d07b      	beq.n	80065f2 <_dtoa_r+0x4f2>
 80064fa:	9b04      	ldr	r3, [sp, #16]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d078      	beq.n	80065f2 <_dtoa_r+0x4f2>
 8006500:	9b01      	ldr	r3, [sp, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	dd39      	ble.n	800657a <_dtoa_r+0x47a>
 8006506:	4b90      	ldr	r3, [pc, #576]	; (8006748 <_dtoa_r+0x648>)
 8006508:	2200      	movs	r2, #0
 800650a:	4640      	mov	r0, r8
 800650c:	4649      	mov	r1, r9
 800650e:	f7fa f883 	bl	8000618 <__aeabi_dmul>
 8006512:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006516:	9e01      	ldr	r6, [sp, #4]
 8006518:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800651c:	3501      	adds	r5, #1
 800651e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006522:	4628      	mov	r0, r5
 8006524:	f7fa f80e 	bl	8000544 <__aeabi_i2d>
 8006528:	4642      	mov	r2, r8
 800652a:	464b      	mov	r3, r9
 800652c:	f7fa f874 	bl	8000618 <__aeabi_dmul>
 8006530:	4b86      	ldr	r3, [pc, #536]	; (800674c <_dtoa_r+0x64c>)
 8006532:	2200      	movs	r2, #0
 8006534:	f7f9 feba 	bl	80002ac <__adddf3>
 8006538:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800653c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006540:	9303      	str	r3, [sp, #12]
 8006542:	2e00      	cmp	r6, #0
 8006544:	d158      	bne.n	80065f8 <_dtoa_r+0x4f8>
 8006546:	4b82      	ldr	r3, [pc, #520]	; (8006750 <_dtoa_r+0x650>)
 8006548:	2200      	movs	r2, #0
 800654a:	4640      	mov	r0, r8
 800654c:	4649      	mov	r1, r9
 800654e:	f7f9 feab 	bl	80002a8 <__aeabi_dsub>
 8006552:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006556:	4680      	mov	r8, r0
 8006558:	4689      	mov	r9, r1
 800655a:	f7fa faed 	bl	8000b38 <__aeabi_dcmpgt>
 800655e:	2800      	cmp	r0, #0
 8006560:	f040 8296 	bne.w	8006a90 <_dtoa_r+0x990>
 8006564:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006568:	4640      	mov	r0, r8
 800656a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800656e:	4649      	mov	r1, r9
 8006570:	f7fa fac4 	bl	8000afc <__aeabi_dcmplt>
 8006574:	2800      	cmp	r0, #0
 8006576:	f040 8289 	bne.w	8006a8c <_dtoa_r+0x98c>
 800657a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800657e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006580:	2b00      	cmp	r3, #0
 8006582:	f2c0 814e 	blt.w	8006822 <_dtoa_r+0x722>
 8006586:	f1bb 0f0e 	cmp.w	fp, #14
 800658a:	f300 814a 	bgt.w	8006822 <_dtoa_r+0x722>
 800658e:	4b6b      	ldr	r3, [pc, #428]	; (800673c <_dtoa_r+0x63c>)
 8006590:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006594:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800659a:	2b00      	cmp	r3, #0
 800659c:	f280 80dc 	bge.w	8006758 <_dtoa_r+0x658>
 80065a0:	9b04      	ldr	r3, [sp, #16]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f300 80d8 	bgt.w	8006758 <_dtoa_r+0x658>
 80065a8:	f040 826f 	bne.w	8006a8a <_dtoa_r+0x98a>
 80065ac:	4b68      	ldr	r3, [pc, #416]	; (8006750 <_dtoa_r+0x650>)
 80065ae:	2200      	movs	r2, #0
 80065b0:	4640      	mov	r0, r8
 80065b2:	4649      	mov	r1, r9
 80065b4:	f7fa f830 	bl	8000618 <__aeabi_dmul>
 80065b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065bc:	f7fa fab2 	bl	8000b24 <__aeabi_dcmpge>
 80065c0:	9e04      	ldr	r6, [sp, #16]
 80065c2:	4637      	mov	r7, r6
 80065c4:	2800      	cmp	r0, #0
 80065c6:	f040 8245 	bne.w	8006a54 <_dtoa_r+0x954>
 80065ca:	9d00      	ldr	r5, [sp, #0]
 80065cc:	2331      	movs	r3, #49	; 0x31
 80065ce:	f805 3b01 	strb.w	r3, [r5], #1
 80065d2:	f10b 0b01 	add.w	fp, fp, #1
 80065d6:	e241      	b.n	8006a5c <_dtoa_r+0x95c>
 80065d8:	07f2      	lsls	r2, r6, #31
 80065da:	d505      	bpl.n	80065e8 <_dtoa_r+0x4e8>
 80065dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065e0:	f7fa f81a 	bl	8000618 <__aeabi_dmul>
 80065e4:	3501      	adds	r5, #1
 80065e6:	2301      	movs	r3, #1
 80065e8:	1076      	asrs	r6, r6, #1
 80065ea:	3708      	adds	r7, #8
 80065ec:	e773      	b.n	80064d6 <_dtoa_r+0x3d6>
 80065ee:	2502      	movs	r5, #2
 80065f0:	e775      	b.n	80064de <_dtoa_r+0x3de>
 80065f2:	9e04      	ldr	r6, [sp, #16]
 80065f4:	465f      	mov	r7, fp
 80065f6:	e792      	b.n	800651e <_dtoa_r+0x41e>
 80065f8:	9900      	ldr	r1, [sp, #0]
 80065fa:	4b50      	ldr	r3, [pc, #320]	; (800673c <_dtoa_r+0x63c>)
 80065fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006600:	4431      	add	r1, r6
 8006602:	9102      	str	r1, [sp, #8]
 8006604:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006606:	eeb0 9a47 	vmov.f32	s18, s14
 800660a:	eef0 9a67 	vmov.f32	s19, s15
 800660e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006612:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006616:	2900      	cmp	r1, #0
 8006618:	d044      	beq.n	80066a4 <_dtoa_r+0x5a4>
 800661a:	494e      	ldr	r1, [pc, #312]	; (8006754 <_dtoa_r+0x654>)
 800661c:	2000      	movs	r0, #0
 800661e:	f7fa f925 	bl	800086c <__aeabi_ddiv>
 8006622:	ec53 2b19 	vmov	r2, r3, d9
 8006626:	f7f9 fe3f 	bl	80002a8 <__aeabi_dsub>
 800662a:	9d00      	ldr	r5, [sp, #0]
 800662c:	ec41 0b19 	vmov	d9, r0, r1
 8006630:	4649      	mov	r1, r9
 8006632:	4640      	mov	r0, r8
 8006634:	f7fa faa0 	bl	8000b78 <__aeabi_d2iz>
 8006638:	4606      	mov	r6, r0
 800663a:	f7f9 ff83 	bl	8000544 <__aeabi_i2d>
 800663e:	4602      	mov	r2, r0
 8006640:	460b      	mov	r3, r1
 8006642:	4640      	mov	r0, r8
 8006644:	4649      	mov	r1, r9
 8006646:	f7f9 fe2f 	bl	80002a8 <__aeabi_dsub>
 800664a:	3630      	adds	r6, #48	; 0x30
 800664c:	f805 6b01 	strb.w	r6, [r5], #1
 8006650:	ec53 2b19 	vmov	r2, r3, d9
 8006654:	4680      	mov	r8, r0
 8006656:	4689      	mov	r9, r1
 8006658:	f7fa fa50 	bl	8000afc <__aeabi_dcmplt>
 800665c:	2800      	cmp	r0, #0
 800665e:	d164      	bne.n	800672a <_dtoa_r+0x62a>
 8006660:	4642      	mov	r2, r8
 8006662:	464b      	mov	r3, r9
 8006664:	4937      	ldr	r1, [pc, #220]	; (8006744 <_dtoa_r+0x644>)
 8006666:	2000      	movs	r0, #0
 8006668:	f7f9 fe1e 	bl	80002a8 <__aeabi_dsub>
 800666c:	ec53 2b19 	vmov	r2, r3, d9
 8006670:	f7fa fa44 	bl	8000afc <__aeabi_dcmplt>
 8006674:	2800      	cmp	r0, #0
 8006676:	f040 80b6 	bne.w	80067e6 <_dtoa_r+0x6e6>
 800667a:	9b02      	ldr	r3, [sp, #8]
 800667c:	429d      	cmp	r5, r3
 800667e:	f43f af7c 	beq.w	800657a <_dtoa_r+0x47a>
 8006682:	4b31      	ldr	r3, [pc, #196]	; (8006748 <_dtoa_r+0x648>)
 8006684:	ec51 0b19 	vmov	r0, r1, d9
 8006688:	2200      	movs	r2, #0
 800668a:	f7f9 ffc5 	bl	8000618 <__aeabi_dmul>
 800668e:	4b2e      	ldr	r3, [pc, #184]	; (8006748 <_dtoa_r+0x648>)
 8006690:	ec41 0b19 	vmov	d9, r0, r1
 8006694:	2200      	movs	r2, #0
 8006696:	4640      	mov	r0, r8
 8006698:	4649      	mov	r1, r9
 800669a:	f7f9 ffbd 	bl	8000618 <__aeabi_dmul>
 800669e:	4680      	mov	r8, r0
 80066a0:	4689      	mov	r9, r1
 80066a2:	e7c5      	b.n	8006630 <_dtoa_r+0x530>
 80066a4:	ec51 0b17 	vmov	r0, r1, d7
 80066a8:	f7f9 ffb6 	bl	8000618 <__aeabi_dmul>
 80066ac:	9b02      	ldr	r3, [sp, #8]
 80066ae:	9d00      	ldr	r5, [sp, #0]
 80066b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80066b2:	ec41 0b19 	vmov	d9, r0, r1
 80066b6:	4649      	mov	r1, r9
 80066b8:	4640      	mov	r0, r8
 80066ba:	f7fa fa5d 	bl	8000b78 <__aeabi_d2iz>
 80066be:	4606      	mov	r6, r0
 80066c0:	f7f9 ff40 	bl	8000544 <__aeabi_i2d>
 80066c4:	3630      	adds	r6, #48	; 0x30
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	4640      	mov	r0, r8
 80066cc:	4649      	mov	r1, r9
 80066ce:	f7f9 fdeb 	bl	80002a8 <__aeabi_dsub>
 80066d2:	f805 6b01 	strb.w	r6, [r5], #1
 80066d6:	9b02      	ldr	r3, [sp, #8]
 80066d8:	429d      	cmp	r5, r3
 80066da:	4680      	mov	r8, r0
 80066dc:	4689      	mov	r9, r1
 80066de:	f04f 0200 	mov.w	r2, #0
 80066e2:	d124      	bne.n	800672e <_dtoa_r+0x62e>
 80066e4:	4b1b      	ldr	r3, [pc, #108]	; (8006754 <_dtoa_r+0x654>)
 80066e6:	ec51 0b19 	vmov	r0, r1, d9
 80066ea:	f7f9 fddf 	bl	80002ac <__adddf3>
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	4640      	mov	r0, r8
 80066f4:	4649      	mov	r1, r9
 80066f6:	f7fa fa1f 	bl	8000b38 <__aeabi_dcmpgt>
 80066fa:	2800      	cmp	r0, #0
 80066fc:	d173      	bne.n	80067e6 <_dtoa_r+0x6e6>
 80066fe:	ec53 2b19 	vmov	r2, r3, d9
 8006702:	4914      	ldr	r1, [pc, #80]	; (8006754 <_dtoa_r+0x654>)
 8006704:	2000      	movs	r0, #0
 8006706:	f7f9 fdcf 	bl	80002a8 <__aeabi_dsub>
 800670a:	4602      	mov	r2, r0
 800670c:	460b      	mov	r3, r1
 800670e:	4640      	mov	r0, r8
 8006710:	4649      	mov	r1, r9
 8006712:	f7fa f9f3 	bl	8000afc <__aeabi_dcmplt>
 8006716:	2800      	cmp	r0, #0
 8006718:	f43f af2f 	beq.w	800657a <_dtoa_r+0x47a>
 800671c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800671e:	1e6b      	subs	r3, r5, #1
 8006720:	930f      	str	r3, [sp, #60]	; 0x3c
 8006722:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006726:	2b30      	cmp	r3, #48	; 0x30
 8006728:	d0f8      	beq.n	800671c <_dtoa_r+0x61c>
 800672a:	46bb      	mov	fp, r7
 800672c:	e04a      	b.n	80067c4 <_dtoa_r+0x6c4>
 800672e:	4b06      	ldr	r3, [pc, #24]	; (8006748 <_dtoa_r+0x648>)
 8006730:	f7f9 ff72 	bl	8000618 <__aeabi_dmul>
 8006734:	4680      	mov	r8, r0
 8006736:	4689      	mov	r9, r1
 8006738:	e7bd      	b.n	80066b6 <_dtoa_r+0x5b6>
 800673a:	bf00      	nop
 800673c:	0800ad90 	.word	0x0800ad90
 8006740:	0800ad68 	.word	0x0800ad68
 8006744:	3ff00000 	.word	0x3ff00000
 8006748:	40240000 	.word	0x40240000
 800674c:	401c0000 	.word	0x401c0000
 8006750:	40140000 	.word	0x40140000
 8006754:	3fe00000 	.word	0x3fe00000
 8006758:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800675c:	9d00      	ldr	r5, [sp, #0]
 800675e:	4642      	mov	r2, r8
 8006760:	464b      	mov	r3, r9
 8006762:	4630      	mov	r0, r6
 8006764:	4639      	mov	r1, r7
 8006766:	f7fa f881 	bl	800086c <__aeabi_ddiv>
 800676a:	f7fa fa05 	bl	8000b78 <__aeabi_d2iz>
 800676e:	9001      	str	r0, [sp, #4]
 8006770:	f7f9 fee8 	bl	8000544 <__aeabi_i2d>
 8006774:	4642      	mov	r2, r8
 8006776:	464b      	mov	r3, r9
 8006778:	f7f9 ff4e 	bl	8000618 <__aeabi_dmul>
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	4630      	mov	r0, r6
 8006782:	4639      	mov	r1, r7
 8006784:	f7f9 fd90 	bl	80002a8 <__aeabi_dsub>
 8006788:	9e01      	ldr	r6, [sp, #4]
 800678a:	9f04      	ldr	r7, [sp, #16]
 800678c:	3630      	adds	r6, #48	; 0x30
 800678e:	f805 6b01 	strb.w	r6, [r5], #1
 8006792:	9e00      	ldr	r6, [sp, #0]
 8006794:	1bae      	subs	r6, r5, r6
 8006796:	42b7      	cmp	r7, r6
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	d134      	bne.n	8006808 <_dtoa_r+0x708>
 800679e:	f7f9 fd85 	bl	80002ac <__adddf3>
 80067a2:	4642      	mov	r2, r8
 80067a4:	464b      	mov	r3, r9
 80067a6:	4606      	mov	r6, r0
 80067a8:	460f      	mov	r7, r1
 80067aa:	f7fa f9c5 	bl	8000b38 <__aeabi_dcmpgt>
 80067ae:	b9c8      	cbnz	r0, 80067e4 <_dtoa_r+0x6e4>
 80067b0:	4642      	mov	r2, r8
 80067b2:	464b      	mov	r3, r9
 80067b4:	4630      	mov	r0, r6
 80067b6:	4639      	mov	r1, r7
 80067b8:	f7fa f996 	bl	8000ae8 <__aeabi_dcmpeq>
 80067bc:	b110      	cbz	r0, 80067c4 <_dtoa_r+0x6c4>
 80067be:	9b01      	ldr	r3, [sp, #4]
 80067c0:	07db      	lsls	r3, r3, #31
 80067c2:	d40f      	bmi.n	80067e4 <_dtoa_r+0x6e4>
 80067c4:	4651      	mov	r1, sl
 80067c6:	4620      	mov	r0, r4
 80067c8:	f000 fb18 	bl	8006dfc <_Bfree>
 80067cc:	2300      	movs	r3, #0
 80067ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067d0:	702b      	strb	r3, [r5, #0]
 80067d2:	f10b 0301 	add.w	r3, fp, #1
 80067d6:	6013      	str	r3, [r2, #0]
 80067d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f43f ace2 	beq.w	80061a4 <_dtoa_r+0xa4>
 80067e0:	601d      	str	r5, [r3, #0]
 80067e2:	e4df      	b.n	80061a4 <_dtoa_r+0xa4>
 80067e4:	465f      	mov	r7, fp
 80067e6:	462b      	mov	r3, r5
 80067e8:	461d      	mov	r5, r3
 80067ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067ee:	2a39      	cmp	r2, #57	; 0x39
 80067f0:	d106      	bne.n	8006800 <_dtoa_r+0x700>
 80067f2:	9a00      	ldr	r2, [sp, #0]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d1f7      	bne.n	80067e8 <_dtoa_r+0x6e8>
 80067f8:	9900      	ldr	r1, [sp, #0]
 80067fa:	2230      	movs	r2, #48	; 0x30
 80067fc:	3701      	adds	r7, #1
 80067fe:	700a      	strb	r2, [r1, #0]
 8006800:	781a      	ldrb	r2, [r3, #0]
 8006802:	3201      	adds	r2, #1
 8006804:	701a      	strb	r2, [r3, #0]
 8006806:	e790      	b.n	800672a <_dtoa_r+0x62a>
 8006808:	4ba3      	ldr	r3, [pc, #652]	; (8006a98 <_dtoa_r+0x998>)
 800680a:	2200      	movs	r2, #0
 800680c:	f7f9 ff04 	bl	8000618 <__aeabi_dmul>
 8006810:	2200      	movs	r2, #0
 8006812:	2300      	movs	r3, #0
 8006814:	4606      	mov	r6, r0
 8006816:	460f      	mov	r7, r1
 8006818:	f7fa f966 	bl	8000ae8 <__aeabi_dcmpeq>
 800681c:	2800      	cmp	r0, #0
 800681e:	d09e      	beq.n	800675e <_dtoa_r+0x65e>
 8006820:	e7d0      	b.n	80067c4 <_dtoa_r+0x6c4>
 8006822:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006824:	2a00      	cmp	r2, #0
 8006826:	f000 80ca 	beq.w	80069be <_dtoa_r+0x8be>
 800682a:	9a07      	ldr	r2, [sp, #28]
 800682c:	2a01      	cmp	r2, #1
 800682e:	f300 80ad 	bgt.w	800698c <_dtoa_r+0x88c>
 8006832:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006834:	2a00      	cmp	r2, #0
 8006836:	f000 80a5 	beq.w	8006984 <_dtoa_r+0x884>
 800683a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800683e:	9e08      	ldr	r6, [sp, #32]
 8006840:	9d05      	ldr	r5, [sp, #20]
 8006842:	9a05      	ldr	r2, [sp, #20]
 8006844:	441a      	add	r2, r3
 8006846:	9205      	str	r2, [sp, #20]
 8006848:	9a06      	ldr	r2, [sp, #24]
 800684a:	2101      	movs	r1, #1
 800684c:	441a      	add	r2, r3
 800684e:	4620      	mov	r0, r4
 8006850:	9206      	str	r2, [sp, #24]
 8006852:	f000 fb89 	bl	8006f68 <__i2b>
 8006856:	4607      	mov	r7, r0
 8006858:	b165      	cbz	r5, 8006874 <_dtoa_r+0x774>
 800685a:	9b06      	ldr	r3, [sp, #24]
 800685c:	2b00      	cmp	r3, #0
 800685e:	dd09      	ble.n	8006874 <_dtoa_r+0x774>
 8006860:	42ab      	cmp	r3, r5
 8006862:	9a05      	ldr	r2, [sp, #20]
 8006864:	bfa8      	it	ge
 8006866:	462b      	movge	r3, r5
 8006868:	1ad2      	subs	r2, r2, r3
 800686a:	9205      	str	r2, [sp, #20]
 800686c:	9a06      	ldr	r2, [sp, #24]
 800686e:	1aed      	subs	r5, r5, r3
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	9306      	str	r3, [sp, #24]
 8006874:	9b08      	ldr	r3, [sp, #32]
 8006876:	b1f3      	cbz	r3, 80068b6 <_dtoa_r+0x7b6>
 8006878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 80a3 	beq.w	80069c6 <_dtoa_r+0x8c6>
 8006880:	2e00      	cmp	r6, #0
 8006882:	dd10      	ble.n	80068a6 <_dtoa_r+0x7a6>
 8006884:	4639      	mov	r1, r7
 8006886:	4632      	mov	r2, r6
 8006888:	4620      	mov	r0, r4
 800688a:	f000 fc2d 	bl	80070e8 <__pow5mult>
 800688e:	4652      	mov	r2, sl
 8006890:	4601      	mov	r1, r0
 8006892:	4607      	mov	r7, r0
 8006894:	4620      	mov	r0, r4
 8006896:	f000 fb7d 	bl	8006f94 <__multiply>
 800689a:	4651      	mov	r1, sl
 800689c:	4680      	mov	r8, r0
 800689e:	4620      	mov	r0, r4
 80068a0:	f000 faac 	bl	8006dfc <_Bfree>
 80068a4:	46c2      	mov	sl, r8
 80068a6:	9b08      	ldr	r3, [sp, #32]
 80068a8:	1b9a      	subs	r2, r3, r6
 80068aa:	d004      	beq.n	80068b6 <_dtoa_r+0x7b6>
 80068ac:	4651      	mov	r1, sl
 80068ae:	4620      	mov	r0, r4
 80068b0:	f000 fc1a 	bl	80070e8 <__pow5mult>
 80068b4:	4682      	mov	sl, r0
 80068b6:	2101      	movs	r1, #1
 80068b8:	4620      	mov	r0, r4
 80068ba:	f000 fb55 	bl	8006f68 <__i2b>
 80068be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	4606      	mov	r6, r0
 80068c4:	f340 8081 	ble.w	80069ca <_dtoa_r+0x8ca>
 80068c8:	461a      	mov	r2, r3
 80068ca:	4601      	mov	r1, r0
 80068cc:	4620      	mov	r0, r4
 80068ce:	f000 fc0b 	bl	80070e8 <__pow5mult>
 80068d2:	9b07      	ldr	r3, [sp, #28]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	4606      	mov	r6, r0
 80068d8:	dd7a      	ble.n	80069d0 <_dtoa_r+0x8d0>
 80068da:	f04f 0800 	mov.w	r8, #0
 80068de:	6933      	ldr	r3, [r6, #16]
 80068e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80068e4:	6918      	ldr	r0, [r3, #16]
 80068e6:	f000 faf1 	bl	8006ecc <__hi0bits>
 80068ea:	f1c0 0020 	rsb	r0, r0, #32
 80068ee:	9b06      	ldr	r3, [sp, #24]
 80068f0:	4418      	add	r0, r3
 80068f2:	f010 001f 	ands.w	r0, r0, #31
 80068f6:	f000 8094 	beq.w	8006a22 <_dtoa_r+0x922>
 80068fa:	f1c0 0320 	rsb	r3, r0, #32
 80068fe:	2b04      	cmp	r3, #4
 8006900:	f340 8085 	ble.w	8006a0e <_dtoa_r+0x90e>
 8006904:	9b05      	ldr	r3, [sp, #20]
 8006906:	f1c0 001c 	rsb	r0, r0, #28
 800690a:	4403      	add	r3, r0
 800690c:	9305      	str	r3, [sp, #20]
 800690e:	9b06      	ldr	r3, [sp, #24]
 8006910:	4403      	add	r3, r0
 8006912:	4405      	add	r5, r0
 8006914:	9306      	str	r3, [sp, #24]
 8006916:	9b05      	ldr	r3, [sp, #20]
 8006918:	2b00      	cmp	r3, #0
 800691a:	dd05      	ble.n	8006928 <_dtoa_r+0x828>
 800691c:	4651      	mov	r1, sl
 800691e:	461a      	mov	r2, r3
 8006920:	4620      	mov	r0, r4
 8006922:	f000 fc3b 	bl	800719c <__lshift>
 8006926:	4682      	mov	sl, r0
 8006928:	9b06      	ldr	r3, [sp, #24]
 800692a:	2b00      	cmp	r3, #0
 800692c:	dd05      	ble.n	800693a <_dtoa_r+0x83a>
 800692e:	4631      	mov	r1, r6
 8006930:	461a      	mov	r2, r3
 8006932:	4620      	mov	r0, r4
 8006934:	f000 fc32 	bl	800719c <__lshift>
 8006938:	4606      	mov	r6, r0
 800693a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800693c:	2b00      	cmp	r3, #0
 800693e:	d072      	beq.n	8006a26 <_dtoa_r+0x926>
 8006940:	4631      	mov	r1, r6
 8006942:	4650      	mov	r0, sl
 8006944:	f000 fc96 	bl	8007274 <__mcmp>
 8006948:	2800      	cmp	r0, #0
 800694a:	da6c      	bge.n	8006a26 <_dtoa_r+0x926>
 800694c:	2300      	movs	r3, #0
 800694e:	4651      	mov	r1, sl
 8006950:	220a      	movs	r2, #10
 8006952:	4620      	mov	r0, r4
 8006954:	f000 fa74 	bl	8006e40 <__multadd>
 8006958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800695a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800695e:	4682      	mov	sl, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 81b0 	beq.w	8006cc6 <_dtoa_r+0xbc6>
 8006966:	2300      	movs	r3, #0
 8006968:	4639      	mov	r1, r7
 800696a:	220a      	movs	r2, #10
 800696c:	4620      	mov	r0, r4
 800696e:	f000 fa67 	bl	8006e40 <__multadd>
 8006972:	9b01      	ldr	r3, [sp, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	4607      	mov	r7, r0
 8006978:	f300 8096 	bgt.w	8006aa8 <_dtoa_r+0x9a8>
 800697c:	9b07      	ldr	r3, [sp, #28]
 800697e:	2b02      	cmp	r3, #2
 8006980:	dc59      	bgt.n	8006a36 <_dtoa_r+0x936>
 8006982:	e091      	b.n	8006aa8 <_dtoa_r+0x9a8>
 8006984:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006986:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800698a:	e758      	b.n	800683e <_dtoa_r+0x73e>
 800698c:	9b04      	ldr	r3, [sp, #16]
 800698e:	1e5e      	subs	r6, r3, #1
 8006990:	9b08      	ldr	r3, [sp, #32]
 8006992:	42b3      	cmp	r3, r6
 8006994:	bfbf      	itttt	lt
 8006996:	9b08      	ldrlt	r3, [sp, #32]
 8006998:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800699a:	9608      	strlt	r6, [sp, #32]
 800699c:	1af3      	sublt	r3, r6, r3
 800699e:	bfb4      	ite	lt
 80069a0:	18d2      	addlt	r2, r2, r3
 80069a2:	1b9e      	subge	r6, r3, r6
 80069a4:	9b04      	ldr	r3, [sp, #16]
 80069a6:	bfbc      	itt	lt
 80069a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80069aa:	2600      	movlt	r6, #0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	bfb7      	itett	lt
 80069b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80069b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80069b8:	1a9d      	sublt	r5, r3, r2
 80069ba:	2300      	movlt	r3, #0
 80069bc:	e741      	b.n	8006842 <_dtoa_r+0x742>
 80069be:	9e08      	ldr	r6, [sp, #32]
 80069c0:	9d05      	ldr	r5, [sp, #20]
 80069c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80069c4:	e748      	b.n	8006858 <_dtoa_r+0x758>
 80069c6:	9a08      	ldr	r2, [sp, #32]
 80069c8:	e770      	b.n	80068ac <_dtoa_r+0x7ac>
 80069ca:	9b07      	ldr	r3, [sp, #28]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	dc19      	bgt.n	8006a04 <_dtoa_r+0x904>
 80069d0:	9b02      	ldr	r3, [sp, #8]
 80069d2:	b9bb      	cbnz	r3, 8006a04 <_dtoa_r+0x904>
 80069d4:	9b03      	ldr	r3, [sp, #12]
 80069d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069da:	b99b      	cbnz	r3, 8006a04 <_dtoa_r+0x904>
 80069dc:	9b03      	ldr	r3, [sp, #12]
 80069de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069e2:	0d1b      	lsrs	r3, r3, #20
 80069e4:	051b      	lsls	r3, r3, #20
 80069e6:	b183      	cbz	r3, 8006a0a <_dtoa_r+0x90a>
 80069e8:	9b05      	ldr	r3, [sp, #20]
 80069ea:	3301      	adds	r3, #1
 80069ec:	9305      	str	r3, [sp, #20]
 80069ee:	9b06      	ldr	r3, [sp, #24]
 80069f0:	3301      	adds	r3, #1
 80069f2:	9306      	str	r3, [sp, #24]
 80069f4:	f04f 0801 	mov.w	r8, #1
 80069f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f47f af6f 	bne.w	80068de <_dtoa_r+0x7de>
 8006a00:	2001      	movs	r0, #1
 8006a02:	e774      	b.n	80068ee <_dtoa_r+0x7ee>
 8006a04:	f04f 0800 	mov.w	r8, #0
 8006a08:	e7f6      	b.n	80069f8 <_dtoa_r+0x8f8>
 8006a0a:	4698      	mov	r8, r3
 8006a0c:	e7f4      	b.n	80069f8 <_dtoa_r+0x8f8>
 8006a0e:	d082      	beq.n	8006916 <_dtoa_r+0x816>
 8006a10:	9a05      	ldr	r2, [sp, #20]
 8006a12:	331c      	adds	r3, #28
 8006a14:	441a      	add	r2, r3
 8006a16:	9205      	str	r2, [sp, #20]
 8006a18:	9a06      	ldr	r2, [sp, #24]
 8006a1a:	441a      	add	r2, r3
 8006a1c:	441d      	add	r5, r3
 8006a1e:	9206      	str	r2, [sp, #24]
 8006a20:	e779      	b.n	8006916 <_dtoa_r+0x816>
 8006a22:	4603      	mov	r3, r0
 8006a24:	e7f4      	b.n	8006a10 <_dtoa_r+0x910>
 8006a26:	9b04      	ldr	r3, [sp, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	dc37      	bgt.n	8006a9c <_dtoa_r+0x99c>
 8006a2c:	9b07      	ldr	r3, [sp, #28]
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	dd34      	ble.n	8006a9c <_dtoa_r+0x99c>
 8006a32:	9b04      	ldr	r3, [sp, #16]
 8006a34:	9301      	str	r3, [sp, #4]
 8006a36:	9b01      	ldr	r3, [sp, #4]
 8006a38:	b963      	cbnz	r3, 8006a54 <_dtoa_r+0x954>
 8006a3a:	4631      	mov	r1, r6
 8006a3c:	2205      	movs	r2, #5
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f000 f9fe 	bl	8006e40 <__multadd>
 8006a44:	4601      	mov	r1, r0
 8006a46:	4606      	mov	r6, r0
 8006a48:	4650      	mov	r0, sl
 8006a4a:	f000 fc13 	bl	8007274 <__mcmp>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	f73f adbb 	bgt.w	80065ca <_dtoa_r+0x4ca>
 8006a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a56:	9d00      	ldr	r5, [sp, #0]
 8006a58:	ea6f 0b03 	mvn.w	fp, r3
 8006a5c:	f04f 0800 	mov.w	r8, #0
 8006a60:	4631      	mov	r1, r6
 8006a62:	4620      	mov	r0, r4
 8006a64:	f000 f9ca 	bl	8006dfc <_Bfree>
 8006a68:	2f00      	cmp	r7, #0
 8006a6a:	f43f aeab 	beq.w	80067c4 <_dtoa_r+0x6c4>
 8006a6e:	f1b8 0f00 	cmp.w	r8, #0
 8006a72:	d005      	beq.n	8006a80 <_dtoa_r+0x980>
 8006a74:	45b8      	cmp	r8, r7
 8006a76:	d003      	beq.n	8006a80 <_dtoa_r+0x980>
 8006a78:	4641      	mov	r1, r8
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	f000 f9be 	bl	8006dfc <_Bfree>
 8006a80:	4639      	mov	r1, r7
 8006a82:	4620      	mov	r0, r4
 8006a84:	f000 f9ba 	bl	8006dfc <_Bfree>
 8006a88:	e69c      	b.n	80067c4 <_dtoa_r+0x6c4>
 8006a8a:	2600      	movs	r6, #0
 8006a8c:	4637      	mov	r7, r6
 8006a8e:	e7e1      	b.n	8006a54 <_dtoa_r+0x954>
 8006a90:	46bb      	mov	fp, r7
 8006a92:	4637      	mov	r7, r6
 8006a94:	e599      	b.n	80065ca <_dtoa_r+0x4ca>
 8006a96:	bf00      	nop
 8006a98:	40240000 	.word	0x40240000
 8006a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 80c8 	beq.w	8006c34 <_dtoa_r+0xb34>
 8006aa4:	9b04      	ldr	r3, [sp, #16]
 8006aa6:	9301      	str	r3, [sp, #4]
 8006aa8:	2d00      	cmp	r5, #0
 8006aaa:	dd05      	ble.n	8006ab8 <_dtoa_r+0x9b8>
 8006aac:	4639      	mov	r1, r7
 8006aae:	462a      	mov	r2, r5
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f000 fb73 	bl	800719c <__lshift>
 8006ab6:	4607      	mov	r7, r0
 8006ab8:	f1b8 0f00 	cmp.w	r8, #0
 8006abc:	d05b      	beq.n	8006b76 <_dtoa_r+0xa76>
 8006abe:	6879      	ldr	r1, [r7, #4]
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f000 f95b 	bl	8006d7c <_Balloc>
 8006ac6:	4605      	mov	r5, r0
 8006ac8:	b928      	cbnz	r0, 8006ad6 <_dtoa_r+0x9d6>
 8006aca:	4b83      	ldr	r3, [pc, #524]	; (8006cd8 <_dtoa_r+0xbd8>)
 8006acc:	4602      	mov	r2, r0
 8006ace:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006ad2:	f7ff bb2e 	b.w	8006132 <_dtoa_r+0x32>
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	3202      	adds	r2, #2
 8006ada:	0092      	lsls	r2, r2, #2
 8006adc:	f107 010c 	add.w	r1, r7, #12
 8006ae0:	300c      	adds	r0, #12
 8006ae2:	f7ff fa76 	bl	8005fd2 <memcpy>
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	4629      	mov	r1, r5
 8006aea:	4620      	mov	r0, r4
 8006aec:	f000 fb56 	bl	800719c <__lshift>
 8006af0:	9b00      	ldr	r3, [sp, #0]
 8006af2:	3301      	adds	r3, #1
 8006af4:	9304      	str	r3, [sp, #16]
 8006af6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006afa:	4413      	add	r3, r2
 8006afc:	9308      	str	r3, [sp, #32]
 8006afe:	9b02      	ldr	r3, [sp, #8]
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	46b8      	mov	r8, r7
 8006b06:	9306      	str	r3, [sp, #24]
 8006b08:	4607      	mov	r7, r0
 8006b0a:	9b04      	ldr	r3, [sp, #16]
 8006b0c:	4631      	mov	r1, r6
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	4650      	mov	r0, sl
 8006b12:	9301      	str	r3, [sp, #4]
 8006b14:	f7ff fa6b 	bl	8005fee <quorem>
 8006b18:	4641      	mov	r1, r8
 8006b1a:	9002      	str	r0, [sp, #8]
 8006b1c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006b20:	4650      	mov	r0, sl
 8006b22:	f000 fba7 	bl	8007274 <__mcmp>
 8006b26:	463a      	mov	r2, r7
 8006b28:	9005      	str	r0, [sp, #20]
 8006b2a:	4631      	mov	r1, r6
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	f000 fbbd 	bl	80072ac <__mdiff>
 8006b32:	68c2      	ldr	r2, [r0, #12]
 8006b34:	4605      	mov	r5, r0
 8006b36:	bb02      	cbnz	r2, 8006b7a <_dtoa_r+0xa7a>
 8006b38:	4601      	mov	r1, r0
 8006b3a:	4650      	mov	r0, sl
 8006b3c:	f000 fb9a 	bl	8007274 <__mcmp>
 8006b40:	4602      	mov	r2, r0
 8006b42:	4629      	mov	r1, r5
 8006b44:	4620      	mov	r0, r4
 8006b46:	9209      	str	r2, [sp, #36]	; 0x24
 8006b48:	f000 f958 	bl	8006dfc <_Bfree>
 8006b4c:	9b07      	ldr	r3, [sp, #28]
 8006b4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b50:	9d04      	ldr	r5, [sp, #16]
 8006b52:	ea43 0102 	orr.w	r1, r3, r2
 8006b56:	9b06      	ldr	r3, [sp, #24]
 8006b58:	4319      	orrs	r1, r3
 8006b5a:	d110      	bne.n	8006b7e <_dtoa_r+0xa7e>
 8006b5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006b60:	d029      	beq.n	8006bb6 <_dtoa_r+0xab6>
 8006b62:	9b05      	ldr	r3, [sp, #20]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	dd02      	ble.n	8006b6e <_dtoa_r+0xa6e>
 8006b68:	9b02      	ldr	r3, [sp, #8]
 8006b6a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006b6e:	9b01      	ldr	r3, [sp, #4]
 8006b70:	f883 9000 	strb.w	r9, [r3]
 8006b74:	e774      	b.n	8006a60 <_dtoa_r+0x960>
 8006b76:	4638      	mov	r0, r7
 8006b78:	e7ba      	b.n	8006af0 <_dtoa_r+0x9f0>
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	e7e1      	b.n	8006b42 <_dtoa_r+0xa42>
 8006b7e:	9b05      	ldr	r3, [sp, #20]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	db04      	blt.n	8006b8e <_dtoa_r+0xa8e>
 8006b84:	9907      	ldr	r1, [sp, #28]
 8006b86:	430b      	orrs	r3, r1
 8006b88:	9906      	ldr	r1, [sp, #24]
 8006b8a:	430b      	orrs	r3, r1
 8006b8c:	d120      	bne.n	8006bd0 <_dtoa_r+0xad0>
 8006b8e:	2a00      	cmp	r2, #0
 8006b90:	dded      	ble.n	8006b6e <_dtoa_r+0xa6e>
 8006b92:	4651      	mov	r1, sl
 8006b94:	2201      	movs	r2, #1
 8006b96:	4620      	mov	r0, r4
 8006b98:	f000 fb00 	bl	800719c <__lshift>
 8006b9c:	4631      	mov	r1, r6
 8006b9e:	4682      	mov	sl, r0
 8006ba0:	f000 fb68 	bl	8007274 <__mcmp>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	dc03      	bgt.n	8006bb0 <_dtoa_r+0xab0>
 8006ba8:	d1e1      	bne.n	8006b6e <_dtoa_r+0xa6e>
 8006baa:	f019 0f01 	tst.w	r9, #1
 8006bae:	d0de      	beq.n	8006b6e <_dtoa_r+0xa6e>
 8006bb0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006bb4:	d1d8      	bne.n	8006b68 <_dtoa_r+0xa68>
 8006bb6:	9a01      	ldr	r2, [sp, #4]
 8006bb8:	2339      	movs	r3, #57	; 0x39
 8006bba:	7013      	strb	r3, [r2, #0]
 8006bbc:	462b      	mov	r3, r5
 8006bbe:	461d      	mov	r5, r3
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006bc6:	2a39      	cmp	r2, #57	; 0x39
 8006bc8:	d06c      	beq.n	8006ca4 <_dtoa_r+0xba4>
 8006bca:	3201      	adds	r2, #1
 8006bcc:	701a      	strb	r2, [r3, #0]
 8006bce:	e747      	b.n	8006a60 <_dtoa_r+0x960>
 8006bd0:	2a00      	cmp	r2, #0
 8006bd2:	dd07      	ble.n	8006be4 <_dtoa_r+0xae4>
 8006bd4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006bd8:	d0ed      	beq.n	8006bb6 <_dtoa_r+0xab6>
 8006bda:	9a01      	ldr	r2, [sp, #4]
 8006bdc:	f109 0301 	add.w	r3, r9, #1
 8006be0:	7013      	strb	r3, [r2, #0]
 8006be2:	e73d      	b.n	8006a60 <_dtoa_r+0x960>
 8006be4:	9b04      	ldr	r3, [sp, #16]
 8006be6:	9a08      	ldr	r2, [sp, #32]
 8006be8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d043      	beq.n	8006c78 <_dtoa_r+0xb78>
 8006bf0:	4651      	mov	r1, sl
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	220a      	movs	r2, #10
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f000 f922 	bl	8006e40 <__multadd>
 8006bfc:	45b8      	cmp	r8, r7
 8006bfe:	4682      	mov	sl, r0
 8006c00:	f04f 0300 	mov.w	r3, #0
 8006c04:	f04f 020a 	mov.w	r2, #10
 8006c08:	4641      	mov	r1, r8
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	d107      	bne.n	8006c1e <_dtoa_r+0xb1e>
 8006c0e:	f000 f917 	bl	8006e40 <__multadd>
 8006c12:	4680      	mov	r8, r0
 8006c14:	4607      	mov	r7, r0
 8006c16:	9b04      	ldr	r3, [sp, #16]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	9304      	str	r3, [sp, #16]
 8006c1c:	e775      	b.n	8006b0a <_dtoa_r+0xa0a>
 8006c1e:	f000 f90f 	bl	8006e40 <__multadd>
 8006c22:	4639      	mov	r1, r7
 8006c24:	4680      	mov	r8, r0
 8006c26:	2300      	movs	r3, #0
 8006c28:	220a      	movs	r2, #10
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f000 f908 	bl	8006e40 <__multadd>
 8006c30:	4607      	mov	r7, r0
 8006c32:	e7f0      	b.n	8006c16 <_dtoa_r+0xb16>
 8006c34:	9b04      	ldr	r3, [sp, #16]
 8006c36:	9301      	str	r3, [sp, #4]
 8006c38:	9d00      	ldr	r5, [sp, #0]
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	4650      	mov	r0, sl
 8006c3e:	f7ff f9d6 	bl	8005fee <quorem>
 8006c42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006c46:	9b00      	ldr	r3, [sp, #0]
 8006c48:	f805 9b01 	strb.w	r9, [r5], #1
 8006c4c:	1aea      	subs	r2, r5, r3
 8006c4e:	9b01      	ldr	r3, [sp, #4]
 8006c50:	4293      	cmp	r3, r2
 8006c52:	dd07      	ble.n	8006c64 <_dtoa_r+0xb64>
 8006c54:	4651      	mov	r1, sl
 8006c56:	2300      	movs	r3, #0
 8006c58:	220a      	movs	r2, #10
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f000 f8f0 	bl	8006e40 <__multadd>
 8006c60:	4682      	mov	sl, r0
 8006c62:	e7ea      	b.n	8006c3a <_dtoa_r+0xb3a>
 8006c64:	9b01      	ldr	r3, [sp, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	bfc8      	it	gt
 8006c6a:	461d      	movgt	r5, r3
 8006c6c:	9b00      	ldr	r3, [sp, #0]
 8006c6e:	bfd8      	it	le
 8006c70:	2501      	movle	r5, #1
 8006c72:	441d      	add	r5, r3
 8006c74:	f04f 0800 	mov.w	r8, #0
 8006c78:	4651      	mov	r1, sl
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	f000 fa8d 	bl	800719c <__lshift>
 8006c82:	4631      	mov	r1, r6
 8006c84:	4682      	mov	sl, r0
 8006c86:	f000 faf5 	bl	8007274 <__mcmp>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	dc96      	bgt.n	8006bbc <_dtoa_r+0xabc>
 8006c8e:	d102      	bne.n	8006c96 <_dtoa_r+0xb96>
 8006c90:	f019 0f01 	tst.w	r9, #1
 8006c94:	d192      	bne.n	8006bbc <_dtoa_r+0xabc>
 8006c96:	462b      	mov	r3, r5
 8006c98:	461d      	mov	r5, r3
 8006c9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c9e:	2a30      	cmp	r2, #48	; 0x30
 8006ca0:	d0fa      	beq.n	8006c98 <_dtoa_r+0xb98>
 8006ca2:	e6dd      	b.n	8006a60 <_dtoa_r+0x960>
 8006ca4:	9a00      	ldr	r2, [sp, #0]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d189      	bne.n	8006bbe <_dtoa_r+0xabe>
 8006caa:	f10b 0b01 	add.w	fp, fp, #1
 8006cae:	2331      	movs	r3, #49	; 0x31
 8006cb0:	e796      	b.n	8006be0 <_dtoa_r+0xae0>
 8006cb2:	4b0a      	ldr	r3, [pc, #40]	; (8006cdc <_dtoa_r+0xbdc>)
 8006cb4:	f7ff ba99 	b.w	80061ea <_dtoa_r+0xea>
 8006cb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f47f aa6d 	bne.w	800619a <_dtoa_r+0x9a>
 8006cc0:	4b07      	ldr	r3, [pc, #28]	; (8006ce0 <_dtoa_r+0xbe0>)
 8006cc2:	f7ff ba92 	b.w	80061ea <_dtoa_r+0xea>
 8006cc6:	9b01      	ldr	r3, [sp, #4]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	dcb5      	bgt.n	8006c38 <_dtoa_r+0xb38>
 8006ccc:	9b07      	ldr	r3, [sp, #28]
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	f73f aeb1 	bgt.w	8006a36 <_dtoa_r+0x936>
 8006cd4:	e7b0      	b.n	8006c38 <_dtoa_r+0xb38>
 8006cd6:	bf00      	nop
 8006cd8:	0800acfd 	.word	0x0800acfd
 8006cdc:	0800ac5d 	.word	0x0800ac5d
 8006ce0:	0800ac81 	.word	0x0800ac81

08006ce4 <_free_r>:
 8006ce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ce6:	2900      	cmp	r1, #0
 8006ce8:	d044      	beq.n	8006d74 <_free_r+0x90>
 8006cea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cee:	9001      	str	r0, [sp, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f1a1 0404 	sub.w	r4, r1, #4
 8006cf6:	bfb8      	it	lt
 8006cf8:	18e4      	addlt	r4, r4, r3
 8006cfa:	f7fe f995 	bl	8005028 <__malloc_lock>
 8006cfe:	4a1e      	ldr	r2, [pc, #120]	; (8006d78 <_free_r+0x94>)
 8006d00:	9801      	ldr	r0, [sp, #4]
 8006d02:	6813      	ldr	r3, [r2, #0]
 8006d04:	b933      	cbnz	r3, 8006d14 <_free_r+0x30>
 8006d06:	6063      	str	r3, [r4, #4]
 8006d08:	6014      	str	r4, [r2, #0]
 8006d0a:	b003      	add	sp, #12
 8006d0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d10:	f7fe b990 	b.w	8005034 <__malloc_unlock>
 8006d14:	42a3      	cmp	r3, r4
 8006d16:	d908      	bls.n	8006d2a <_free_r+0x46>
 8006d18:	6825      	ldr	r5, [r4, #0]
 8006d1a:	1961      	adds	r1, r4, r5
 8006d1c:	428b      	cmp	r3, r1
 8006d1e:	bf01      	itttt	eq
 8006d20:	6819      	ldreq	r1, [r3, #0]
 8006d22:	685b      	ldreq	r3, [r3, #4]
 8006d24:	1949      	addeq	r1, r1, r5
 8006d26:	6021      	streq	r1, [r4, #0]
 8006d28:	e7ed      	b.n	8006d06 <_free_r+0x22>
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	b10b      	cbz	r3, 8006d34 <_free_r+0x50>
 8006d30:	42a3      	cmp	r3, r4
 8006d32:	d9fa      	bls.n	8006d2a <_free_r+0x46>
 8006d34:	6811      	ldr	r1, [r2, #0]
 8006d36:	1855      	adds	r5, r2, r1
 8006d38:	42a5      	cmp	r5, r4
 8006d3a:	d10b      	bne.n	8006d54 <_free_r+0x70>
 8006d3c:	6824      	ldr	r4, [r4, #0]
 8006d3e:	4421      	add	r1, r4
 8006d40:	1854      	adds	r4, r2, r1
 8006d42:	42a3      	cmp	r3, r4
 8006d44:	6011      	str	r1, [r2, #0]
 8006d46:	d1e0      	bne.n	8006d0a <_free_r+0x26>
 8006d48:	681c      	ldr	r4, [r3, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	6053      	str	r3, [r2, #4]
 8006d4e:	440c      	add	r4, r1
 8006d50:	6014      	str	r4, [r2, #0]
 8006d52:	e7da      	b.n	8006d0a <_free_r+0x26>
 8006d54:	d902      	bls.n	8006d5c <_free_r+0x78>
 8006d56:	230c      	movs	r3, #12
 8006d58:	6003      	str	r3, [r0, #0]
 8006d5a:	e7d6      	b.n	8006d0a <_free_r+0x26>
 8006d5c:	6825      	ldr	r5, [r4, #0]
 8006d5e:	1961      	adds	r1, r4, r5
 8006d60:	428b      	cmp	r3, r1
 8006d62:	bf04      	itt	eq
 8006d64:	6819      	ldreq	r1, [r3, #0]
 8006d66:	685b      	ldreq	r3, [r3, #4]
 8006d68:	6063      	str	r3, [r4, #4]
 8006d6a:	bf04      	itt	eq
 8006d6c:	1949      	addeq	r1, r1, r5
 8006d6e:	6021      	streq	r1, [r4, #0]
 8006d70:	6054      	str	r4, [r2, #4]
 8006d72:	e7ca      	b.n	8006d0a <_free_r+0x26>
 8006d74:	b003      	add	sp, #12
 8006d76:	bd30      	pop	{r4, r5, pc}
 8006d78:	20000390 	.word	0x20000390

08006d7c <_Balloc>:
 8006d7c:	b570      	push	{r4, r5, r6, lr}
 8006d7e:	69c6      	ldr	r6, [r0, #28]
 8006d80:	4604      	mov	r4, r0
 8006d82:	460d      	mov	r5, r1
 8006d84:	b976      	cbnz	r6, 8006da4 <_Balloc+0x28>
 8006d86:	2010      	movs	r0, #16
 8006d88:	f7fe f8a6 	bl	8004ed8 <malloc>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	61e0      	str	r0, [r4, #28]
 8006d90:	b920      	cbnz	r0, 8006d9c <_Balloc+0x20>
 8006d92:	4b18      	ldr	r3, [pc, #96]	; (8006df4 <_Balloc+0x78>)
 8006d94:	4818      	ldr	r0, [pc, #96]	; (8006df8 <_Balloc+0x7c>)
 8006d96:	216b      	movs	r1, #107	; 0x6b
 8006d98:	f000 ff54 	bl	8007c44 <__assert_func>
 8006d9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006da0:	6006      	str	r6, [r0, #0]
 8006da2:	60c6      	str	r6, [r0, #12]
 8006da4:	69e6      	ldr	r6, [r4, #28]
 8006da6:	68f3      	ldr	r3, [r6, #12]
 8006da8:	b183      	cbz	r3, 8006dcc <_Balloc+0x50>
 8006daa:	69e3      	ldr	r3, [r4, #28]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006db2:	b9b8      	cbnz	r0, 8006de4 <_Balloc+0x68>
 8006db4:	2101      	movs	r1, #1
 8006db6:	fa01 f605 	lsl.w	r6, r1, r5
 8006dba:	1d72      	adds	r2, r6, #5
 8006dbc:	0092      	lsls	r2, r2, #2
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f000 ff5e 	bl	8007c80 <_calloc_r>
 8006dc4:	b160      	cbz	r0, 8006de0 <_Balloc+0x64>
 8006dc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006dca:	e00e      	b.n	8006dea <_Balloc+0x6e>
 8006dcc:	2221      	movs	r2, #33	; 0x21
 8006dce:	2104      	movs	r1, #4
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f000 ff55 	bl	8007c80 <_calloc_r>
 8006dd6:	69e3      	ldr	r3, [r4, #28]
 8006dd8:	60f0      	str	r0, [r6, #12]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1e4      	bne.n	8006daa <_Balloc+0x2e>
 8006de0:	2000      	movs	r0, #0
 8006de2:	bd70      	pop	{r4, r5, r6, pc}
 8006de4:	6802      	ldr	r2, [r0, #0]
 8006de6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006dea:	2300      	movs	r3, #0
 8006dec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006df0:	e7f7      	b.n	8006de2 <_Balloc+0x66>
 8006df2:	bf00      	nop
 8006df4:	0800ac8e 	.word	0x0800ac8e
 8006df8:	0800ad0e 	.word	0x0800ad0e

08006dfc <_Bfree>:
 8006dfc:	b570      	push	{r4, r5, r6, lr}
 8006dfe:	69c6      	ldr	r6, [r0, #28]
 8006e00:	4605      	mov	r5, r0
 8006e02:	460c      	mov	r4, r1
 8006e04:	b976      	cbnz	r6, 8006e24 <_Bfree+0x28>
 8006e06:	2010      	movs	r0, #16
 8006e08:	f7fe f866 	bl	8004ed8 <malloc>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	61e8      	str	r0, [r5, #28]
 8006e10:	b920      	cbnz	r0, 8006e1c <_Bfree+0x20>
 8006e12:	4b09      	ldr	r3, [pc, #36]	; (8006e38 <_Bfree+0x3c>)
 8006e14:	4809      	ldr	r0, [pc, #36]	; (8006e3c <_Bfree+0x40>)
 8006e16:	218f      	movs	r1, #143	; 0x8f
 8006e18:	f000 ff14 	bl	8007c44 <__assert_func>
 8006e1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e20:	6006      	str	r6, [r0, #0]
 8006e22:	60c6      	str	r6, [r0, #12]
 8006e24:	b13c      	cbz	r4, 8006e36 <_Bfree+0x3a>
 8006e26:	69eb      	ldr	r3, [r5, #28]
 8006e28:	6862      	ldr	r2, [r4, #4]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e30:	6021      	str	r1, [r4, #0]
 8006e32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e36:	bd70      	pop	{r4, r5, r6, pc}
 8006e38:	0800ac8e 	.word	0x0800ac8e
 8006e3c:	0800ad0e 	.word	0x0800ad0e

08006e40 <__multadd>:
 8006e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e44:	690d      	ldr	r5, [r1, #16]
 8006e46:	4607      	mov	r7, r0
 8006e48:	460c      	mov	r4, r1
 8006e4a:	461e      	mov	r6, r3
 8006e4c:	f101 0c14 	add.w	ip, r1, #20
 8006e50:	2000      	movs	r0, #0
 8006e52:	f8dc 3000 	ldr.w	r3, [ip]
 8006e56:	b299      	uxth	r1, r3
 8006e58:	fb02 6101 	mla	r1, r2, r1, r6
 8006e5c:	0c1e      	lsrs	r6, r3, #16
 8006e5e:	0c0b      	lsrs	r3, r1, #16
 8006e60:	fb02 3306 	mla	r3, r2, r6, r3
 8006e64:	b289      	uxth	r1, r1
 8006e66:	3001      	adds	r0, #1
 8006e68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e6c:	4285      	cmp	r5, r0
 8006e6e:	f84c 1b04 	str.w	r1, [ip], #4
 8006e72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e76:	dcec      	bgt.n	8006e52 <__multadd+0x12>
 8006e78:	b30e      	cbz	r6, 8006ebe <__multadd+0x7e>
 8006e7a:	68a3      	ldr	r3, [r4, #8]
 8006e7c:	42ab      	cmp	r3, r5
 8006e7e:	dc19      	bgt.n	8006eb4 <__multadd+0x74>
 8006e80:	6861      	ldr	r1, [r4, #4]
 8006e82:	4638      	mov	r0, r7
 8006e84:	3101      	adds	r1, #1
 8006e86:	f7ff ff79 	bl	8006d7c <_Balloc>
 8006e8a:	4680      	mov	r8, r0
 8006e8c:	b928      	cbnz	r0, 8006e9a <__multadd+0x5a>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	4b0c      	ldr	r3, [pc, #48]	; (8006ec4 <__multadd+0x84>)
 8006e92:	480d      	ldr	r0, [pc, #52]	; (8006ec8 <__multadd+0x88>)
 8006e94:	21ba      	movs	r1, #186	; 0xba
 8006e96:	f000 fed5 	bl	8007c44 <__assert_func>
 8006e9a:	6922      	ldr	r2, [r4, #16]
 8006e9c:	3202      	adds	r2, #2
 8006e9e:	f104 010c 	add.w	r1, r4, #12
 8006ea2:	0092      	lsls	r2, r2, #2
 8006ea4:	300c      	adds	r0, #12
 8006ea6:	f7ff f894 	bl	8005fd2 <memcpy>
 8006eaa:	4621      	mov	r1, r4
 8006eac:	4638      	mov	r0, r7
 8006eae:	f7ff ffa5 	bl	8006dfc <_Bfree>
 8006eb2:	4644      	mov	r4, r8
 8006eb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006eb8:	3501      	adds	r5, #1
 8006eba:	615e      	str	r6, [r3, #20]
 8006ebc:	6125      	str	r5, [r4, #16]
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ec4:	0800acfd 	.word	0x0800acfd
 8006ec8:	0800ad0e 	.word	0x0800ad0e

08006ecc <__hi0bits>:
 8006ecc:	0c03      	lsrs	r3, r0, #16
 8006ece:	041b      	lsls	r3, r3, #16
 8006ed0:	b9d3      	cbnz	r3, 8006f08 <__hi0bits+0x3c>
 8006ed2:	0400      	lsls	r0, r0, #16
 8006ed4:	2310      	movs	r3, #16
 8006ed6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006eda:	bf04      	itt	eq
 8006edc:	0200      	lsleq	r0, r0, #8
 8006ede:	3308      	addeq	r3, #8
 8006ee0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006ee4:	bf04      	itt	eq
 8006ee6:	0100      	lsleq	r0, r0, #4
 8006ee8:	3304      	addeq	r3, #4
 8006eea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006eee:	bf04      	itt	eq
 8006ef0:	0080      	lsleq	r0, r0, #2
 8006ef2:	3302      	addeq	r3, #2
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	db05      	blt.n	8006f04 <__hi0bits+0x38>
 8006ef8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006efc:	f103 0301 	add.w	r3, r3, #1
 8006f00:	bf08      	it	eq
 8006f02:	2320      	moveq	r3, #32
 8006f04:	4618      	mov	r0, r3
 8006f06:	4770      	bx	lr
 8006f08:	2300      	movs	r3, #0
 8006f0a:	e7e4      	b.n	8006ed6 <__hi0bits+0xa>

08006f0c <__lo0bits>:
 8006f0c:	6803      	ldr	r3, [r0, #0]
 8006f0e:	f013 0207 	ands.w	r2, r3, #7
 8006f12:	d00c      	beq.n	8006f2e <__lo0bits+0x22>
 8006f14:	07d9      	lsls	r1, r3, #31
 8006f16:	d422      	bmi.n	8006f5e <__lo0bits+0x52>
 8006f18:	079a      	lsls	r2, r3, #30
 8006f1a:	bf49      	itett	mi
 8006f1c:	085b      	lsrmi	r3, r3, #1
 8006f1e:	089b      	lsrpl	r3, r3, #2
 8006f20:	6003      	strmi	r3, [r0, #0]
 8006f22:	2201      	movmi	r2, #1
 8006f24:	bf5c      	itt	pl
 8006f26:	6003      	strpl	r3, [r0, #0]
 8006f28:	2202      	movpl	r2, #2
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	4770      	bx	lr
 8006f2e:	b299      	uxth	r1, r3
 8006f30:	b909      	cbnz	r1, 8006f36 <__lo0bits+0x2a>
 8006f32:	0c1b      	lsrs	r3, r3, #16
 8006f34:	2210      	movs	r2, #16
 8006f36:	b2d9      	uxtb	r1, r3
 8006f38:	b909      	cbnz	r1, 8006f3e <__lo0bits+0x32>
 8006f3a:	3208      	adds	r2, #8
 8006f3c:	0a1b      	lsrs	r3, r3, #8
 8006f3e:	0719      	lsls	r1, r3, #28
 8006f40:	bf04      	itt	eq
 8006f42:	091b      	lsreq	r3, r3, #4
 8006f44:	3204      	addeq	r2, #4
 8006f46:	0799      	lsls	r1, r3, #30
 8006f48:	bf04      	itt	eq
 8006f4a:	089b      	lsreq	r3, r3, #2
 8006f4c:	3202      	addeq	r2, #2
 8006f4e:	07d9      	lsls	r1, r3, #31
 8006f50:	d403      	bmi.n	8006f5a <__lo0bits+0x4e>
 8006f52:	085b      	lsrs	r3, r3, #1
 8006f54:	f102 0201 	add.w	r2, r2, #1
 8006f58:	d003      	beq.n	8006f62 <__lo0bits+0x56>
 8006f5a:	6003      	str	r3, [r0, #0]
 8006f5c:	e7e5      	b.n	8006f2a <__lo0bits+0x1e>
 8006f5e:	2200      	movs	r2, #0
 8006f60:	e7e3      	b.n	8006f2a <__lo0bits+0x1e>
 8006f62:	2220      	movs	r2, #32
 8006f64:	e7e1      	b.n	8006f2a <__lo0bits+0x1e>
	...

08006f68 <__i2b>:
 8006f68:	b510      	push	{r4, lr}
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	2101      	movs	r1, #1
 8006f6e:	f7ff ff05 	bl	8006d7c <_Balloc>
 8006f72:	4602      	mov	r2, r0
 8006f74:	b928      	cbnz	r0, 8006f82 <__i2b+0x1a>
 8006f76:	4b05      	ldr	r3, [pc, #20]	; (8006f8c <__i2b+0x24>)
 8006f78:	4805      	ldr	r0, [pc, #20]	; (8006f90 <__i2b+0x28>)
 8006f7a:	f240 1145 	movw	r1, #325	; 0x145
 8006f7e:	f000 fe61 	bl	8007c44 <__assert_func>
 8006f82:	2301      	movs	r3, #1
 8006f84:	6144      	str	r4, [r0, #20]
 8006f86:	6103      	str	r3, [r0, #16]
 8006f88:	bd10      	pop	{r4, pc}
 8006f8a:	bf00      	nop
 8006f8c:	0800acfd 	.word	0x0800acfd
 8006f90:	0800ad0e 	.word	0x0800ad0e

08006f94 <__multiply>:
 8006f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f98:	4691      	mov	r9, r2
 8006f9a:	690a      	ldr	r2, [r1, #16]
 8006f9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	bfb8      	it	lt
 8006fa4:	460b      	movlt	r3, r1
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	bfbc      	itt	lt
 8006faa:	464c      	movlt	r4, r9
 8006fac:	4699      	movlt	r9, r3
 8006fae:	6927      	ldr	r7, [r4, #16]
 8006fb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006fb4:	68a3      	ldr	r3, [r4, #8]
 8006fb6:	6861      	ldr	r1, [r4, #4]
 8006fb8:	eb07 060a 	add.w	r6, r7, sl
 8006fbc:	42b3      	cmp	r3, r6
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	bfb8      	it	lt
 8006fc2:	3101      	addlt	r1, #1
 8006fc4:	f7ff feda 	bl	8006d7c <_Balloc>
 8006fc8:	b930      	cbnz	r0, 8006fd8 <__multiply+0x44>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	4b44      	ldr	r3, [pc, #272]	; (80070e0 <__multiply+0x14c>)
 8006fce:	4845      	ldr	r0, [pc, #276]	; (80070e4 <__multiply+0x150>)
 8006fd0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006fd4:	f000 fe36 	bl	8007c44 <__assert_func>
 8006fd8:	f100 0514 	add.w	r5, r0, #20
 8006fdc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006fe0:	462b      	mov	r3, r5
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	4543      	cmp	r3, r8
 8006fe6:	d321      	bcc.n	800702c <__multiply+0x98>
 8006fe8:	f104 0314 	add.w	r3, r4, #20
 8006fec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006ff0:	f109 0314 	add.w	r3, r9, #20
 8006ff4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006ff8:	9202      	str	r2, [sp, #8]
 8006ffa:	1b3a      	subs	r2, r7, r4
 8006ffc:	3a15      	subs	r2, #21
 8006ffe:	f022 0203 	bic.w	r2, r2, #3
 8007002:	3204      	adds	r2, #4
 8007004:	f104 0115 	add.w	r1, r4, #21
 8007008:	428f      	cmp	r7, r1
 800700a:	bf38      	it	cc
 800700c:	2204      	movcc	r2, #4
 800700e:	9201      	str	r2, [sp, #4]
 8007010:	9a02      	ldr	r2, [sp, #8]
 8007012:	9303      	str	r3, [sp, #12]
 8007014:	429a      	cmp	r2, r3
 8007016:	d80c      	bhi.n	8007032 <__multiply+0x9e>
 8007018:	2e00      	cmp	r6, #0
 800701a:	dd03      	ble.n	8007024 <__multiply+0x90>
 800701c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007020:	2b00      	cmp	r3, #0
 8007022:	d05b      	beq.n	80070dc <__multiply+0x148>
 8007024:	6106      	str	r6, [r0, #16]
 8007026:	b005      	add	sp, #20
 8007028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800702c:	f843 2b04 	str.w	r2, [r3], #4
 8007030:	e7d8      	b.n	8006fe4 <__multiply+0x50>
 8007032:	f8b3 a000 	ldrh.w	sl, [r3]
 8007036:	f1ba 0f00 	cmp.w	sl, #0
 800703a:	d024      	beq.n	8007086 <__multiply+0xf2>
 800703c:	f104 0e14 	add.w	lr, r4, #20
 8007040:	46a9      	mov	r9, r5
 8007042:	f04f 0c00 	mov.w	ip, #0
 8007046:	f85e 2b04 	ldr.w	r2, [lr], #4
 800704a:	f8d9 1000 	ldr.w	r1, [r9]
 800704e:	fa1f fb82 	uxth.w	fp, r2
 8007052:	b289      	uxth	r1, r1
 8007054:	fb0a 110b 	mla	r1, sl, fp, r1
 8007058:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800705c:	f8d9 2000 	ldr.w	r2, [r9]
 8007060:	4461      	add	r1, ip
 8007062:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007066:	fb0a c20b 	mla	r2, sl, fp, ip
 800706a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800706e:	b289      	uxth	r1, r1
 8007070:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007074:	4577      	cmp	r7, lr
 8007076:	f849 1b04 	str.w	r1, [r9], #4
 800707a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800707e:	d8e2      	bhi.n	8007046 <__multiply+0xb2>
 8007080:	9a01      	ldr	r2, [sp, #4]
 8007082:	f845 c002 	str.w	ip, [r5, r2]
 8007086:	9a03      	ldr	r2, [sp, #12]
 8007088:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800708c:	3304      	adds	r3, #4
 800708e:	f1b9 0f00 	cmp.w	r9, #0
 8007092:	d021      	beq.n	80070d8 <__multiply+0x144>
 8007094:	6829      	ldr	r1, [r5, #0]
 8007096:	f104 0c14 	add.w	ip, r4, #20
 800709a:	46ae      	mov	lr, r5
 800709c:	f04f 0a00 	mov.w	sl, #0
 80070a0:	f8bc b000 	ldrh.w	fp, [ip]
 80070a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80070a8:	fb09 220b 	mla	r2, r9, fp, r2
 80070ac:	4452      	add	r2, sl
 80070ae:	b289      	uxth	r1, r1
 80070b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80070b4:	f84e 1b04 	str.w	r1, [lr], #4
 80070b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80070bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070c0:	f8be 1000 	ldrh.w	r1, [lr]
 80070c4:	fb09 110a 	mla	r1, r9, sl, r1
 80070c8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80070cc:	4567      	cmp	r7, ip
 80070ce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070d2:	d8e5      	bhi.n	80070a0 <__multiply+0x10c>
 80070d4:	9a01      	ldr	r2, [sp, #4]
 80070d6:	50a9      	str	r1, [r5, r2]
 80070d8:	3504      	adds	r5, #4
 80070da:	e799      	b.n	8007010 <__multiply+0x7c>
 80070dc:	3e01      	subs	r6, #1
 80070de:	e79b      	b.n	8007018 <__multiply+0x84>
 80070e0:	0800acfd 	.word	0x0800acfd
 80070e4:	0800ad0e 	.word	0x0800ad0e

080070e8 <__pow5mult>:
 80070e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070ec:	4615      	mov	r5, r2
 80070ee:	f012 0203 	ands.w	r2, r2, #3
 80070f2:	4606      	mov	r6, r0
 80070f4:	460f      	mov	r7, r1
 80070f6:	d007      	beq.n	8007108 <__pow5mult+0x20>
 80070f8:	4c25      	ldr	r4, [pc, #148]	; (8007190 <__pow5mult+0xa8>)
 80070fa:	3a01      	subs	r2, #1
 80070fc:	2300      	movs	r3, #0
 80070fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007102:	f7ff fe9d 	bl	8006e40 <__multadd>
 8007106:	4607      	mov	r7, r0
 8007108:	10ad      	asrs	r5, r5, #2
 800710a:	d03d      	beq.n	8007188 <__pow5mult+0xa0>
 800710c:	69f4      	ldr	r4, [r6, #28]
 800710e:	b97c      	cbnz	r4, 8007130 <__pow5mult+0x48>
 8007110:	2010      	movs	r0, #16
 8007112:	f7fd fee1 	bl	8004ed8 <malloc>
 8007116:	4602      	mov	r2, r0
 8007118:	61f0      	str	r0, [r6, #28]
 800711a:	b928      	cbnz	r0, 8007128 <__pow5mult+0x40>
 800711c:	4b1d      	ldr	r3, [pc, #116]	; (8007194 <__pow5mult+0xac>)
 800711e:	481e      	ldr	r0, [pc, #120]	; (8007198 <__pow5mult+0xb0>)
 8007120:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007124:	f000 fd8e 	bl	8007c44 <__assert_func>
 8007128:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800712c:	6004      	str	r4, [r0, #0]
 800712e:	60c4      	str	r4, [r0, #12]
 8007130:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007134:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007138:	b94c      	cbnz	r4, 800714e <__pow5mult+0x66>
 800713a:	f240 2171 	movw	r1, #625	; 0x271
 800713e:	4630      	mov	r0, r6
 8007140:	f7ff ff12 	bl	8006f68 <__i2b>
 8007144:	2300      	movs	r3, #0
 8007146:	f8c8 0008 	str.w	r0, [r8, #8]
 800714a:	4604      	mov	r4, r0
 800714c:	6003      	str	r3, [r0, #0]
 800714e:	f04f 0900 	mov.w	r9, #0
 8007152:	07eb      	lsls	r3, r5, #31
 8007154:	d50a      	bpl.n	800716c <__pow5mult+0x84>
 8007156:	4639      	mov	r1, r7
 8007158:	4622      	mov	r2, r4
 800715a:	4630      	mov	r0, r6
 800715c:	f7ff ff1a 	bl	8006f94 <__multiply>
 8007160:	4639      	mov	r1, r7
 8007162:	4680      	mov	r8, r0
 8007164:	4630      	mov	r0, r6
 8007166:	f7ff fe49 	bl	8006dfc <_Bfree>
 800716a:	4647      	mov	r7, r8
 800716c:	106d      	asrs	r5, r5, #1
 800716e:	d00b      	beq.n	8007188 <__pow5mult+0xa0>
 8007170:	6820      	ldr	r0, [r4, #0]
 8007172:	b938      	cbnz	r0, 8007184 <__pow5mult+0x9c>
 8007174:	4622      	mov	r2, r4
 8007176:	4621      	mov	r1, r4
 8007178:	4630      	mov	r0, r6
 800717a:	f7ff ff0b 	bl	8006f94 <__multiply>
 800717e:	6020      	str	r0, [r4, #0]
 8007180:	f8c0 9000 	str.w	r9, [r0]
 8007184:	4604      	mov	r4, r0
 8007186:	e7e4      	b.n	8007152 <__pow5mult+0x6a>
 8007188:	4638      	mov	r0, r7
 800718a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800718e:	bf00      	nop
 8007190:	0800ae58 	.word	0x0800ae58
 8007194:	0800ac8e 	.word	0x0800ac8e
 8007198:	0800ad0e 	.word	0x0800ad0e

0800719c <__lshift>:
 800719c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071a0:	460c      	mov	r4, r1
 80071a2:	6849      	ldr	r1, [r1, #4]
 80071a4:	6923      	ldr	r3, [r4, #16]
 80071a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071aa:	68a3      	ldr	r3, [r4, #8]
 80071ac:	4607      	mov	r7, r0
 80071ae:	4691      	mov	r9, r2
 80071b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071b4:	f108 0601 	add.w	r6, r8, #1
 80071b8:	42b3      	cmp	r3, r6
 80071ba:	db0b      	blt.n	80071d4 <__lshift+0x38>
 80071bc:	4638      	mov	r0, r7
 80071be:	f7ff fddd 	bl	8006d7c <_Balloc>
 80071c2:	4605      	mov	r5, r0
 80071c4:	b948      	cbnz	r0, 80071da <__lshift+0x3e>
 80071c6:	4602      	mov	r2, r0
 80071c8:	4b28      	ldr	r3, [pc, #160]	; (800726c <__lshift+0xd0>)
 80071ca:	4829      	ldr	r0, [pc, #164]	; (8007270 <__lshift+0xd4>)
 80071cc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80071d0:	f000 fd38 	bl	8007c44 <__assert_func>
 80071d4:	3101      	adds	r1, #1
 80071d6:	005b      	lsls	r3, r3, #1
 80071d8:	e7ee      	b.n	80071b8 <__lshift+0x1c>
 80071da:	2300      	movs	r3, #0
 80071dc:	f100 0114 	add.w	r1, r0, #20
 80071e0:	f100 0210 	add.w	r2, r0, #16
 80071e4:	4618      	mov	r0, r3
 80071e6:	4553      	cmp	r3, sl
 80071e8:	db33      	blt.n	8007252 <__lshift+0xb6>
 80071ea:	6920      	ldr	r0, [r4, #16]
 80071ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071f0:	f104 0314 	add.w	r3, r4, #20
 80071f4:	f019 091f 	ands.w	r9, r9, #31
 80071f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80071fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007200:	d02b      	beq.n	800725a <__lshift+0xbe>
 8007202:	f1c9 0e20 	rsb	lr, r9, #32
 8007206:	468a      	mov	sl, r1
 8007208:	2200      	movs	r2, #0
 800720a:	6818      	ldr	r0, [r3, #0]
 800720c:	fa00 f009 	lsl.w	r0, r0, r9
 8007210:	4310      	orrs	r0, r2
 8007212:	f84a 0b04 	str.w	r0, [sl], #4
 8007216:	f853 2b04 	ldr.w	r2, [r3], #4
 800721a:	459c      	cmp	ip, r3
 800721c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007220:	d8f3      	bhi.n	800720a <__lshift+0x6e>
 8007222:	ebac 0304 	sub.w	r3, ip, r4
 8007226:	3b15      	subs	r3, #21
 8007228:	f023 0303 	bic.w	r3, r3, #3
 800722c:	3304      	adds	r3, #4
 800722e:	f104 0015 	add.w	r0, r4, #21
 8007232:	4584      	cmp	ip, r0
 8007234:	bf38      	it	cc
 8007236:	2304      	movcc	r3, #4
 8007238:	50ca      	str	r2, [r1, r3]
 800723a:	b10a      	cbz	r2, 8007240 <__lshift+0xa4>
 800723c:	f108 0602 	add.w	r6, r8, #2
 8007240:	3e01      	subs	r6, #1
 8007242:	4638      	mov	r0, r7
 8007244:	612e      	str	r6, [r5, #16]
 8007246:	4621      	mov	r1, r4
 8007248:	f7ff fdd8 	bl	8006dfc <_Bfree>
 800724c:	4628      	mov	r0, r5
 800724e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007252:	f842 0f04 	str.w	r0, [r2, #4]!
 8007256:	3301      	adds	r3, #1
 8007258:	e7c5      	b.n	80071e6 <__lshift+0x4a>
 800725a:	3904      	subs	r1, #4
 800725c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007260:	f841 2f04 	str.w	r2, [r1, #4]!
 8007264:	459c      	cmp	ip, r3
 8007266:	d8f9      	bhi.n	800725c <__lshift+0xc0>
 8007268:	e7ea      	b.n	8007240 <__lshift+0xa4>
 800726a:	bf00      	nop
 800726c:	0800acfd 	.word	0x0800acfd
 8007270:	0800ad0e 	.word	0x0800ad0e

08007274 <__mcmp>:
 8007274:	b530      	push	{r4, r5, lr}
 8007276:	6902      	ldr	r2, [r0, #16]
 8007278:	690c      	ldr	r4, [r1, #16]
 800727a:	1b12      	subs	r2, r2, r4
 800727c:	d10e      	bne.n	800729c <__mcmp+0x28>
 800727e:	f100 0314 	add.w	r3, r0, #20
 8007282:	3114      	adds	r1, #20
 8007284:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007288:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800728c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007290:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007294:	42a5      	cmp	r5, r4
 8007296:	d003      	beq.n	80072a0 <__mcmp+0x2c>
 8007298:	d305      	bcc.n	80072a6 <__mcmp+0x32>
 800729a:	2201      	movs	r2, #1
 800729c:	4610      	mov	r0, r2
 800729e:	bd30      	pop	{r4, r5, pc}
 80072a0:	4283      	cmp	r3, r0
 80072a2:	d3f3      	bcc.n	800728c <__mcmp+0x18>
 80072a4:	e7fa      	b.n	800729c <__mcmp+0x28>
 80072a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072aa:	e7f7      	b.n	800729c <__mcmp+0x28>

080072ac <__mdiff>:
 80072ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b0:	460c      	mov	r4, r1
 80072b2:	4606      	mov	r6, r0
 80072b4:	4611      	mov	r1, r2
 80072b6:	4620      	mov	r0, r4
 80072b8:	4690      	mov	r8, r2
 80072ba:	f7ff ffdb 	bl	8007274 <__mcmp>
 80072be:	1e05      	subs	r5, r0, #0
 80072c0:	d110      	bne.n	80072e4 <__mdiff+0x38>
 80072c2:	4629      	mov	r1, r5
 80072c4:	4630      	mov	r0, r6
 80072c6:	f7ff fd59 	bl	8006d7c <_Balloc>
 80072ca:	b930      	cbnz	r0, 80072da <__mdiff+0x2e>
 80072cc:	4b3a      	ldr	r3, [pc, #232]	; (80073b8 <__mdiff+0x10c>)
 80072ce:	4602      	mov	r2, r0
 80072d0:	f240 2137 	movw	r1, #567	; 0x237
 80072d4:	4839      	ldr	r0, [pc, #228]	; (80073bc <__mdiff+0x110>)
 80072d6:	f000 fcb5 	bl	8007c44 <__assert_func>
 80072da:	2301      	movs	r3, #1
 80072dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80072e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e4:	bfa4      	itt	ge
 80072e6:	4643      	movge	r3, r8
 80072e8:	46a0      	movge	r8, r4
 80072ea:	4630      	mov	r0, r6
 80072ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80072f0:	bfa6      	itte	ge
 80072f2:	461c      	movge	r4, r3
 80072f4:	2500      	movge	r5, #0
 80072f6:	2501      	movlt	r5, #1
 80072f8:	f7ff fd40 	bl	8006d7c <_Balloc>
 80072fc:	b920      	cbnz	r0, 8007308 <__mdiff+0x5c>
 80072fe:	4b2e      	ldr	r3, [pc, #184]	; (80073b8 <__mdiff+0x10c>)
 8007300:	4602      	mov	r2, r0
 8007302:	f240 2145 	movw	r1, #581	; 0x245
 8007306:	e7e5      	b.n	80072d4 <__mdiff+0x28>
 8007308:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800730c:	6926      	ldr	r6, [r4, #16]
 800730e:	60c5      	str	r5, [r0, #12]
 8007310:	f104 0914 	add.w	r9, r4, #20
 8007314:	f108 0514 	add.w	r5, r8, #20
 8007318:	f100 0e14 	add.w	lr, r0, #20
 800731c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007320:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007324:	f108 0210 	add.w	r2, r8, #16
 8007328:	46f2      	mov	sl, lr
 800732a:	2100      	movs	r1, #0
 800732c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007330:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007334:	fa11 f88b 	uxtah	r8, r1, fp
 8007338:	b299      	uxth	r1, r3
 800733a:	0c1b      	lsrs	r3, r3, #16
 800733c:	eba8 0801 	sub.w	r8, r8, r1
 8007340:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007344:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007348:	fa1f f888 	uxth.w	r8, r8
 800734c:	1419      	asrs	r1, r3, #16
 800734e:	454e      	cmp	r6, r9
 8007350:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007354:	f84a 3b04 	str.w	r3, [sl], #4
 8007358:	d8e8      	bhi.n	800732c <__mdiff+0x80>
 800735a:	1b33      	subs	r3, r6, r4
 800735c:	3b15      	subs	r3, #21
 800735e:	f023 0303 	bic.w	r3, r3, #3
 8007362:	3304      	adds	r3, #4
 8007364:	3415      	adds	r4, #21
 8007366:	42a6      	cmp	r6, r4
 8007368:	bf38      	it	cc
 800736a:	2304      	movcc	r3, #4
 800736c:	441d      	add	r5, r3
 800736e:	4473      	add	r3, lr
 8007370:	469e      	mov	lr, r3
 8007372:	462e      	mov	r6, r5
 8007374:	4566      	cmp	r6, ip
 8007376:	d30e      	bcc.n	8007396 <__mdiff+0xea>
 8007378:	f10c 0203 	add.w	r2, ip, #3
 800737c:	1b52      	subs	r2, r2, r5
 800737e:	f022 0203 	bic.w	r2, r2, #3
 8007382:	3d03      	subs	r5, #3
 8007384:	45ac      	cmp	ip, r5
 8007386:	bf38      	it	cc
 8007388:	2200      	movcc	r2, #0
 800738a:	4413      	add	r3, r2
 800738c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007390:	b17a      	cbz	r2, 80073b2 <__mdiff+0x106>
 8007392:	6107      	str	r7, [r0, #16]
 8007394:	e7a4      	b.n	80072e0 <__mdiff+0x34>
 8007396:	f856 8b04 	ldr.w	r8, [r6], #4
 800739a:	fa11 f288 	uxtah	r2, r1, r8
 800739e:	1414      	asrs	r4, r2, #16
 80073a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80073a4:	b292      	uxth	r2, r2
 80073a6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80073aa:	f84e 2b04 	str.w	r2, [lr], #4
 80073ae:	1421      	asrs	r1, r4, #16
 80073b0:	e7e0      	b.n	8007374 <__mdiff+0xc8>
 80073b2:	3f01      	subs	r7, #1
 80073b4:	e7ea      	b.n	800738c <__mdiff+0xe0>
 80073b6:	bf00      	nop
 80073b8:	0800acfd 	.word	0x0800acfd
 80073bc:	0800ad0e 	.word	0x0800ad0e

080073c0 <__d2b>:
 80073c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073c4:	460f      	mov	r7, r1
 80073c6:	2101      	movs	r1, #1
 80073c8:	ec59 8b10 	vmov	r8, r9, d0
 80073cc:	4616      	mov	r6, r2
 80073ce:	f7ff fcd5 	bl	8006d7c <_Balloc>
 80073d2:	4604      	mov	r4, r0
 80073d4:	b930      	cbnz	r0, 80073e4 <__d2b+0x24>
 80073d6:	4602      	mov	r2, r0
 80073d8:	4b24      	ldr	r3, [pc, #144]	; (800746c <__d2b+0xac>)
 80073da:	4825      	ldr	r0, [pc, #148]	; (8007470 <__d2b+0xb0>)
 80073dc:	f240 310f 	movw	r1, #783	; 0x30f
 80073e0:	f000 fc30 	bl	8007c44 <__assert_func>
 80073e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80073e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073ec:	bb2d      	cbnz	r5, 800743a <__d2b+0x7a>
 80073ee:	9301      	str	r3, [sp, #4]
 80073f0:	f1b8 0300 	subs.w	r3, r8, #0
 80073f4:	d026      	beq.n	8007444 <__d2b+0x84>
 80073f6:	4668      	mov	r0, sp
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	f7ff fd87 	bl	8006f0c <__lo0bits>
 80073fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007402:	b1e8      	cbz	r0, 8007440 <__d2b+0x80>
 8007404:	f1c0 0320 	rsb	r3, r0, #32
 8007408:	fa02 f303 	lsl.w	r3, r2, r3
 800740c:	430b      	orrs	r3, r1
 800740e:	40c2      	lsrs	r2, r0
 8007410:	6163      	str	r3, [r4, #20]
 8007412:	9201      	str	r2, [sp, #4]
 8007414:	9b01      	ldr	r3, [sp, #4]
 8007416:	61a3      	str	r3, [r4, #24]
 8007418:	2b00      	cmp	r3, #0
 800741a:	bf14      	ite	ne
 800741c:	2202      	movne	r2, #2
 800741e:	2201      	moveq	r2, #1
 8007420:	6122      	str	r2, [r4, #16]
 8007422:	b1bd      	cbz	r5, 8007454 <__d2b+0x94>
 8007424:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007428:	4405      	add	r5, r0
 800742a:	603d      	str	r5, [r7, #0]
 800742c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007430:	6030      	str	r0, [r6, #0]
 8007432:	4620      	mov	r0, r4
 8007434:	b003      	add	sp, #12
 8007436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800743a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800743e:	e7d6      	b.n	80073ee <__d2b+0x2e>
 8007440:	6161      	str	r1, [r4, #20]
 8007442:	e7e7      	b.n	8007414 <__d2b+0x54>
 8007444:	a801      	add	r0, sp, #4
 8007446:	f7ff fd61 	bl	8006f0c <__lo0bits>
 800744a:	9b01      	ldr	r3, [sp, #4]
 800744c:	6163      	str	r3, [r4, #20]
 800744e:	3020      	adds	r0, #32
 8007450:	2201      	movs	r2, #1
 8007452:	e7e5      	b.n	8007420 <__d2b+0x60>
 8007454:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007458:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800745c:	6038      	str	r0, [r7, #0]
 800745e:	6918      	ldr	r0, [r3, #16]
 8007460:	f7ff fd34 	bl	8006ecc <__hi0bits>
 8007464:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007468:	e7e2      	b.n	8007430 <__d2b+0x70>
 800746a:	bf00      	nop
 800746c:	0800acfd 	.word	0x0800acfd
 8007470:	0800ad0e 	.word	0x0800ad0e

08007474 <__ssputs_r>:
 8007474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007478:	688e      	ldr	r6, [r1, #8]
 800747a:	461f      	mov	r7, r3
 800747c:	42be      	cmp	r6, r7
 800747e:	680b      	ldr	r3, [r1, #0]
 8007480:	4682      	mov	sl, r0
 8007482:	460c      	mov	r4, r1
 8007484:	4690      	mov	r8, r2
 8007486:	d82c      	bhi.n	80074e2 <__ssputs_r+0x6e>
 8007488:	898a      	ldrh	r2, [r1, #12]
 800748a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800748e:	d026      	beq.n	80074de <__ssputs_r+0x6a>
 8007490:	6965      	ldr	r5, [r4, #20]
 8007492:	6909      	ldr	r1, [r1, #16]
 8007494:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007498:	eba3 0901 	sub.w	r9, r3, r1
 800749c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074a0:	1c7b      	adds	r3, r7, #1
 80074a2:	444b      	add	r3, r9
 80074a4:	106d      	asrs	r5, r5, #1
 80074a6:	429d      	cmp	r5, r3
 80074a8:	bf38      	it	cc
 80074aa:	461d      	movcc	r5, r3
 80074ac:	0553      	lsls	r3, r2, #21
 80074ae:	d527      	bpl.n	8007500 <__ssputs_r+0x8c>
 80074b0:	4629      	mov	r1, r5
 80074b2:	f7fd fd39 	bl	8004f28 <_malloc_r>
 80074b6:	4606      	mov	r6, r0
 80074b8:	b360      	cbz	r0, 8007514 <__ssputs_r+0xa0>
 80074ba:	6921      	ldr	r1, [r4, #16]
 80074bc:	464a      	mov	r2, r9
 80074be:	f7fe fd88 	bl	8005fd2 <memcpy>
 80074c2:	89a3      	ldrh	r3, [r4, #12]
 80074c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074cc:	81a3      	strh	r3, [r4, #12]
 80074ce:	6126      	str	r6, [r4, #16]
 80074d0:	6165      	str	r5, [r4, #20]
 80074d2:	444e      	add	r6, r9
 80074d4:	eba5 0509 	sub.w	r5, r5, r9
 80074d8:	6026      	str	r6, [r4, #0]
 80074da:	60a5      	str	r5, [r4, #8]
 80074dc:	463e      	mov	r6, r7
 80074de:	42be      	cmp	r6, r7
 80074e0:	d900      	bls.n	80074e4 <__ssputs_r+0x70>
 80074e2:	463e      	mov	r6, r7
 80074e4:	6820      	ldr	r0, [r4, #0]
 80074e6:	4632      	mov	r2, r6
 80074e8:	4641      	mov	r1, r8
 80074ea:	f000 fb6f 	bl	8007bcc <memmove>
 80074ee:	68a3      	ldr	r3, [r4, #8]
 80074f0:	1b9b      	subs	r3, r3, r6
 80074f2:	60a3      	str	r3, [r4, #8]
 80074f4:	6823      	ldr	r3, [r4, #0]
 80074f6:	4433      	add	r3, r6
 80074f8:	6023      	str	r3, [r4, #0]
 80074fa:	2000      	movs	r0, #0
 80074fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007500:	462a      	mov	r2, r5
 8007502:	f000 fbe5 	bl	8007cd0 <_realloc_r>
 8007506:	4606      	mov	r6, r0
 8007508:	2800      	cmp	r0, #0
 800750a:	d1e0      	bne.n	80074ce <__ssputs_r+0x5a>
 800750c:	6921      	ldr	r1, [r4, #16]
 800750e:	4650      	mov	r0, sl
 8007510:	f7ff fbe8 	bl	8006ce4 <_free_r>
 8007514:	230c      	movs	r3, #12
 8007516:	f8ca 3000 	str.w	r3, [sl]
 800751a:	89a3      	ldrh	r3, [r4, #12]
 800751c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007520:	81a3      	strh	r3, [r4, #12]
 8007522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007526:	e7e9      	b.n	80074fc <__ssputs_r+0x88>

08007528 <_svfiprintf_r>:
 8007528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800752c:	4698      	mov	r8, r3
 800752e:	898b      	ldrh	r3, [r1, #12]
 8007530:	061b      	lsls	r3, r3, #24
 8007532:	b09d      	sub	sp, #116	; 0x74
 8007534:	4607      	mov	r7, r0
 8007536:	460d      	mov	r5, r1
 8007538:	4614      	mov	r4, r2
 800753a:	d50e      	bpl.n	800755a <_svfiprintf_r+0x32>
 800753c:	690b      	ldr	r3, [r1, #16]
 800753e:	b963      	cbnz	r3, 800755a <_svfiprintf_r+0x32>
 8007540:	2140      	movs	r1, #64	; 0x40
 8007542:	f7fd fcf1 	bl	8004f28 <_malloc_r>
 8007546:	6028      	str	r0, [r5, #0]
 8007548:	6128      	str	r0, [r5, #16]
 800754a:	b920      	cbnz	r0, 8007556 <_svfiprintf_r+0x2e>
 800754c:	230c      	movs	r3, #12
 800754e:	603b      	str	r3, [r7, #0]
 8007550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007554:	e0d0      	b.n	80076f8 <_svfiprintf_r+0x1d0>
 8007556:	2340      	movs	r3, #64	; 0x40
 8007558:	616b      	str	r3, [r5, #20]
 800755a:	2300      	movs	r3, #0
 800755c:	9309      	str	r3, [sp, #36]	; 0x24
 800755e:	2320      	movs	r3, #32
 8007560:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007564:	f8cd 800c 	str.w	r8, [sp, #12]
 8007568:	2330      	movs	r3, #48	; 0x30
 800756a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007710 <_svfiprintf_r+0x1e8>
 800756e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007572:	f04f 0901 	mov.w	r9, #1
 8007576:	4623      	mov	r3, r4
 8007578:	469a      	mov	sl, r3
 800757a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800757e:	b10a      	cbz	r2, 8007584 <_svfiprintf_r+0x5c>
 8007580:	2a25      	cmp	r2, #37	; 0x25
 8007582:	d1f9      	bne.n	8007578 <_svfiprintf_r+0x50>
 8007584:	ebba 0b04 	subs.w	fp, sl, r4
 8007588:	d00b      	beq.n	80075a2 <_svfiprintf_r+0x7a>
 800758a:	465b      	mov	r3, fp
 800758c:	4622      	mov	r2, r4
 800758e:	4629      	mov	r1, r5
 8007590:	4638      	mov	r0, r7
 8007592:	f7ff ff6f 	bl	8007474 <__ssputs_r>
 8007596:	3001      	adds	r0, #1
 8007598:	f000 80a9 	beq.w	80076ee <_svfiprintf_r+0x1c6>
 800759c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800759e:	445a      	add	r2, fp
 80075a0:	9209      	str	r2, [sp, #36]	; 0x24
 80075a2:	f89a 3000 	ldrb.w	r3, [sl]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 80a1 	beq.w	80076ee <_svfiprintf_r+0x1c6>
 80075ac:	2300      	movs	r3, #0
 80075ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075b6:	f10a 0a01 	add.w	sl, sl, #1
 80075ba:	9304      	str	r3, [sp, #16]
 80075bc:	9307      	str	r3, [sp, #28]
 80075be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075c2:	931a      	str	r3, [sp, #104]	; 0x68
 80075c4:	4654      	mov	r4, sl
 80075c6:	2205      	movs	r2, #5
 80075c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075cc:	4850      	ldr	r0, [pc, #320]	; (8007710 <_svfiprintf_r+0x1e8>)
 80075ce:	f7f8 fe0f 	bl	80001f0 <memchr>
 80075d2:	9a04      	ldr	r2, [sp, #16]
 80075d4:	b9d8      	cbnz	r0, 800760e <_svfiprintf_r+0xe6>
 80075d6:	06d0      	lsls	r0, r2, #27
 80075d8:	bf44      	itt	mi
 80075da:	2320      	movmi	r3, #32
 80075dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075e0:	0711      	lsls	r1, r2, #28
 80075e2:	bf44      	itt	mi
 80075e4:	232b      	movmi	r3, #43	; 0x2b
 80075e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075ea:	f89a 3000 	ldrb.w	r3, [sl]
 80075ee:	2b2a      	cmp	r3, #42	; 0x2a
 80075f0:	d015      	beq.n	800761e <_svfiprintf_r+0xf6>
 80075f2:	9a07      	ldr	r2, [sp, #28]
 80075f4:	4654      	mov	r4, sl
 80075f6:	2000      	movs	r0, #0
 80075f8:	f04f 0c0a 	mov.w	ip, #10
 80075fc:	4621      	mov	r1, r4
 80075fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007602:	3b30      	subs	r3, #48	; 0x30
 8007604:	2b09      	cmp	r3, #9
 8007606:	d94d      	bls.n	80076a4 <_svfiprintf_r+0x17c>
 8007608:	b1b0      	cbz	r0, 8007638 <_svfiprintf_r+0x110>
 800760a:	9207      	str	r2, [sp, #28]
 800760c:	e014      	b.n	8007638 <_svfiprintf_r+0x110>
 800760e:	eba0 0308 	sub.w	r3, r0, r8
 8007612:	fa09 f303 	lsl.w	r3, r9, r3
 8007616:	4313      	orrs	r3, r2
 8007618:	9304      	str	r3, [sp, #16]
 800761a:	46a2      	mov	sl, r4
 800761c:	e7d2      	b.n	80075c4 <_svfiprintf_r+0x9c>
 800761e:	9b03      	ldr	r3, [sp, #12]
 8007620:	1d19      	adds	r1, r3, #4
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	9103      	str	r1, [sp, #12]
 8007626:	2b00      	cmp	r3, #0
 8007628:	bfbb      	ittet	lt
 800762a:	425b      	neglt	r3, r3
 800762c:	f042 0202 	orrlt.w	r2, r2, #2
 8007630:	9307      	strge	r3, [sp, #28]
 8007632:	9307      	strlt	r3, [sp, #28]
 8007634:	bfb8      	it	lt
 8007636:	9204      	strlt	r2, [sp, #16]
 8007638:	7823      	ldrb	r3, [r4, #0]
 800763a:	2b2e      	cmp	r3, #46	; 0x2e
 800763c:	d10c      	bne.n	8007658 <_svfiprintf_r+0x130>
 800763e:	7863      	ldrb	r3, [r4, #1]
 8007640:	2b2a      	cmp	r3, #42	; 0x2a
 8007642:	d134      	bne.n	80076ae <_svfiprintf_r+0x186>
 8007644:	9b03      	ldr	r3, [sp, #12]
 8007646:	1d1a      	adds	r2, r3, #4
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	9203      	str	r2, [sp, #12]
 800764c:	2b00      	cmp	r3, #0
 800764e:	bfb8      	it	lt
 8007650:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007654:	3402      	adds	r4, #2
 8007656:	9305      	str	r3, [sp, #20]
 8007658:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007720 <_svfiprintf_r+0x1f8>
 800765c:	7821      	ldrb	r1, [r4, #0]
 800765e:	2203      	movs	r2, #3
 8007660:	4650      	mov	r0, sl
 8007662:	f7f8 fdc5 	bl	80001f0 <memchr>
 8007666:	b138      	cbz	r0, 8007678 <_svfiprintf_r+0x150>
 8007668:	9b04      	ldr	r3, [sp, #16]
 800766a:	eba0 000a 	sub.w	r0, r0, sl
 800766e:	2240      	movs	r2, #64	; 0x40
 8007670:	4082      	lsls	r2, r0
 8007672:	4313      	orrs	r3, r2
 8007674:	3401      	adds	r4, #1
 8007676:	9304      	str	r3, [sp, #16]
 8007678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800767c:	4825      	ldr	r0, [pc, #148]	; (8007714 <_svfiprintf_r+0x1ec>)
 800767e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007682:	2206      	movs	r2, #6
 8007684:	f7f8 fdb4 	bl	80001f0 <memchr>
 8007688:	2800      	cmp	r0, #0
 800768a:	d038      	beq.n	80076fe <_svfiprintf_r+0x1d6>
 800768c:	4b22      	ldr	r3, [pc, #136]	; (8007718 <_svfiprintf_r+0x1f0>)
 800768e:	bb1b      	cbnz	r3, 80076d8 <_svfiprintf_r+0x1b0>
 8007690:	9b03      	ldr	r3, [sp, #12]
 8007692:	3307      	adds	r3, #7
 8007694:	f023 0307 	bic.w	r3, r3, #7
 8007698:	3308      	adds	r3, #8
 800769a:	9303      	str	r3, [sp, #12]
 800769c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800769e:	4433      	add	r3, r6
 80076a0:	9309      	str	r3, [sp, #36]	; 0x24
 80076a2:	e768      	b.n	8007576 <_svfiprintf_r+0x4e>
 80076a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80076a8:	460c      	mov	r4, r1
 80076aa:	2001      	movs	r0, #1
 80076ac:	e7a6      	b.n	80075fc <_svfiprintf_r+0xd4>
 80076ae:	2300      	movs	r3, #0
 80076b0:	3401      	adds	r4, #1
 80076b2:	9305      	str	r3, [sp, #20]
 80076b4:	4619      	mov	r1, r3
 80076b6:	f04f 0c0a 	mov.w	ip, #10
 80076ba:	4620      	mov	r0, r4
 80076bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076c0:	3a30      	subs	r2, #48	; 0x30
 80076c2:	2a09      	cmp	r2, #9
 80076c4:	d903      	bls.n	80076ce <_svfiprintf_r+0x1a6>
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d0c6      	beq.n	8007658 <_svfiprintf_r+0x130>
 80076ca:	9105      	str	r1, [sp, #20]
 80076cc:	e7c4      	b.n	8007658 <_svfiprintf_r+0x130>
 80076ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80076d2:	4604      	mov	r4, r0
 80076d4:	2301      	movs	r3, #1
 80076d6:	e7f0      	b.n	80076ba <_svfiprintf_r+0x192>
 80076d8:	ab03      	add	r3, sp, #12
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	462a      	mov	r2, r5
 80076de:	4b0f      	ldr	r3, [pc, #60]	; (800771c <_svfiprintf_r+0x1f4>)
 80076e0:	a904      	add	r1, sp, #16
 80076e2:	4638      	mov	r0, r7
 80076e4:	f7fd fdd8 	bl	8005298 <_printf_float>
 80076e8:	1c42      	adds	r2, r0, #1
 80076ea:	4606      	mov	r6, r0
 80076ec:	d1d6      	bne.n	800769c <_svfiprintf_r+0x174>
 80076ee:	89ab      	ldrh	r3, [r5, #12]
 80076f0:	065b      	lsls	r3, r3, #25
 80076f2:	f53f af2d 	bmi.w	8007550 <_svfiprintf_r+0x28>
 80076f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076f8:	b01d      	add	sp, #116	; 0x74
 80076fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076fe:	ab03      	add	r3, sp, #12
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	462a      	mov	r2, r5
 8007704:	4b05      	ldr	r3, [pc, #20]	; (800771c <_svfiprintf_r+0x1f4>)
 8007706:	a904      	add	r1, sp, #16
 8007708:	4638      	mov	r0, r7
 800770a:	f7fe f869 	bl	80057e0 <_printf_i>
 800770e:	e7eb      	b.n	80076e8 <_svfiprintf_r+0x1c0>
 8007710:	0800ae64 	.word	0x0800ae64
 8007714:	0800ae6e 	.word	0x0800ae6e
 8007718:	08005299 	.word	0x08005299
 800771c:	08007475 	.word	0x08007475
 8007720:	0800ae6a 	.word	0x0800ae6a

08007724 <__sfputc_r>:
 8007724:	6893      	ldr	r3, [r2, #8]
 8007726:	3b01      	subs	r3, #1
 8007728:	2b00      	cmp	r3, #0
 800772a:	b410      	push	{r4}
 800772c:	6093      	str	r3, [r2, #8]
 800772e:	da08      	bge.n	8007742 <__sfputc_r+0x1e>
 8007730:	6994      	ldr	r4, [r2, #24]
 8007732:	42a3      	cmp	r3, r4
 8007734:	db01      	blt.n	800773a <__sfputc_r+0x16>
 8007736:	290a      	cmp	r1, #10
 8007738:	d103      	bne.n	8007742 <__sfputc_r+0x1e>
 800773a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800773e:	f7fe bb04 	b.w	8005d4a <__swbuf_r>
 8007742:	6813      	ldr	r3, [r2, #0]
 8007744:	1c58      	adds	r0, r3, #1
 8007746:	6010      	str	r0, [r2, #0]
 8007748:	7019      	strb	r1, [r3, #0]
 800774a:	4608      	mov	r0, r1
 800774c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007750:	4770      	bx	lr

08007752 <__sfputs_r>:
 8007752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007754:	4606      	mov	r6, r0
 8007756:	460f      	mov	r7, r1
 8007758:	4614      	mov	r4, r2
 800775a:	18d5      	adds	r5, r2, r3
 800775c:	42ac      	cmp	r4, r5
 800775e:	d101      	bne.n	8007764 <__sfputs_r+0x12>
 8007760:	2000      	movs	r0, #0
 8007762:	e007      	b.n	8007774 <__sfputs_r+0x22>
 8007764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007768:	463a      	mov	r2, r7
 800776a:	4630      	mov	r0, r6
 800776c:	f7ff ffda 	bl	8007724 <__sfputc_r>
 8007770:	1c43      	adds	r3, r0, #1
 8007772:	d1f3      	bne.n	800775c <__sfputs_r+0xa>
 8007774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007778 <_vfiprintf_r>:
 8007778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777c:	460d      	mov	r5, r1
 800777e:	b09d      	sub	sp, #116	; 0x74
 8007780:	4614      	mov	r4, r2
 8007782:	4698      	mov	r8, r3
 8007784:	4606      	mov	r6, r0
 8007786:	b118      	cbz	r0, 8007790 <_vfiprintf_r+0x18>
 8007788:	6a03      	ldr	r3, [r0, #32]
 800778a:	b90b      	cbnz	r3, 8007790 <_vfiprintf_r+0x18>
 800778c:	f7fe f9d6 	bl	8005b3c <__sinit>
 8007790:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007792:	07d9      	lsls	r1, r3, #31
 8007794:	d405      	bmi.n	80077a2 <_vfiprintf_r+0x2a>
 8007796:	89ab      	ldrh	r3, [r5, #12]
 8007798:	059a      	lsls	r2, r3, #22
 800779a:	d402      	bmi.n	80077a2 <_vfiprintf_r+0x2a>
 800779c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800779e:	f7fe fc16 	bl	8005fce <__retarget_lock_acquire_recursive>
 80077a2:	89ab      	ldrh	r3, [r5, #12]
 80077a4:	071b      	lsls	r3, r3, #28
 80077a6:	d501      	bpl.n	80077ac <_vfiprintf_r+0x34>
 80077a8:	692b      	ldr	r3, [r5, #16]
 80077aa:	b99b      	cbnz	r3, 80077d4 <_vfiprintf_r+0x5c>
 80077ac:	4629      	mov	r1, r5
 80077ae:	4630      	mov	r0, r6
 80077b0:	f7fe fb08 	bl	8005dc4 <__swsetup_r>
 80077b4:	b170      	cbz	r0, 80077d4 <_vfiprintf_r+0x5c>
 80077b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077b8:	07dc      	lsls	r4, r3, #31
 80077ba:	d504      	bpl.n	80077c6 <_vfiprintf_r+0x4e>
 80077bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077c0:	b01d      	add	sp, #116	; 0x74
 80077c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077c6:	89ab      	ldrh	r3, [r5, #12]
 80077c8:	0598      	lsls	r0, r3, #22
 80077ca:	d4f7      	bmi.n	80077bc <_vfiprintf_r+0x44>
 80077cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077ce:	f7fe fbff 	bl	8005fd0 <__retarget_lock_release_recursive>
 80077d2:	e7f3      	b.n	80077bc <_vfiprintf_r+0x44>
 80077d4:	2300      	movs	r3, #0
 80077d6:	9309      	str	r3, [sp, #36]	; 0x24
 80077d8:	2320      	movs	r3, #32
 80077da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077de:	f8cd 800c 	str.w	r8, [sp, #12]
 80077e2:	2330      	movs	r3, #48	; 0x30
 80077e4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007998 <_vfiprintf_r+0x220>
 80077e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077ec:	f04f 0901 	mov.w	r9, #1
 80077f0:	4623      	mov	r3, r4
 80077f2:	469a      	mov	sl, r3
 80077f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077f8:	b10a      	cbz	r2, 80077fe <_vfiprintf_r+0x86>
 80077fa:	2a25      	cmp	r2, #37	; 0x25
 80077fc:	d1f9      	bne.n	80077f2 <_vfiprintf_r+0x7a>
 80077fe:	ebba 0b04 	subs.w	fp, sl, r4
 8007802:	d00b      	beq.n	800781c <_vfiprintf_r+0xa4>
 8007804:	465b      	mov	r3, fp
 8007806:	4622      	mov	r2, r4
 8007808:	4629      	mov	r1, r5
 800780a:	4630      	mov	r0, r6
 800780c:	f7ff ffa1 	bl	8007752 <__sfputs_r>
 8007810:	3001      	adds	r0, #1
 8007812:	f000 80a9 	beq.w	8007968 <_vfiprintf_r+0x1f0>
 8007816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007818:	445a      	add	r2, fp
 800781a:	9209      	str	r2, [sp, #36]	; 0x24
 800781c:	f89a 3000 	ldrb.w	r3, [sl]
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 80a1 	beq.w	8007968 <_vfiprintf_r+0x1f0>
 8007826:	2300      	movs	r3, #0
 8007828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800782c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007830:	f10a 0a01 	add.w	sl, sl, #1
 8007834:	9304      	str	r3, [sp, #16]
 8007836:	9307      	str	r3, [sp, #28]
 8007838:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800783c:	931a      	str	r3, [sp, #104]	; 0x68
 800783e:	4654      	mov	r4, sl
 8007840:	2205      	movs	r2, #5
 8007842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007846:	4854      	ldr	r0, [pc, #336]	; (8007998 <_vfiprintf_r+0x220>)
 8007848:	f7f8 fcd2 	bl	80001f0 <memchr>
 800784c:	9a04      	ldr	r2, [sp, #16]
 800784e:	b9d8      	cbnz	r0, 8007888 <_vfiprintf_r+0x110>
 8007850:	06d1      	lsls	r1, r2, #27
 8007852:	bf44      	itt	mi
 8007854:	2320      	movmi	r3, #32
 8007856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800785a:	0713      	lsls	r3, r2, #28
 800785c:	bf44      	itt	mi
 800785e:	232b      	movmi	r3, #43	; 0x2b
 8007860:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007864:	f89a 3000 	ldrb.w	r3, [sl]
 8007868:	2b2a      	cmp	r3, #42	; 0x2a
 800786a:	d015      	beq.n	8007898 <_vfiprintf_r+0x120>
 800786c:	9a07      	ldr	r2, [sp, #28]
 800786e:	4654      	mov	r4, sl
 8007870:	2000      	movs	r0, #0
 8007872:	f04f 0c0a 	mov.w	ip, #10
 8007876:	4621      	mov	r1, r4
 8007878:	f811 3b01 	ldrb.w	r3, [r1], #1
 800787c:	3b30      	subs	r3, #48	; 0x30
 800787e:	2b09      	cmp	r3, #9
 8007880:	d94d      	bls.n	800791e <_vfiprintf_r+0x1a6>
 8007882:	b1b0      	cbz	r0, 80078b2 <_vfiprintf_r+0x13a>
 8007884:	9207      	str	r2, [sp, #28]
 8007886:	e014      	b.n	80078b2 <_vfiprintf_r+0x13a>
 8007888:	eba0 0308 	sub.w	r3, r0, r8
 800788c:	fa09 f303 	lsl.w	r3, r9, r3
 8007890:	4313      	orrs	r3, r2
 8007892:	9304      	str	r3, [sp, #16]
 8007894:	46a2      	mov	sl, r4
 8007896:	e7d2      	b.n	800783e <_vfiprintf_r+0xc6>
 8007898:	9b03      	ldr	r3, [sp, #12]
 800789a:	1d19      	adds	r1, r3, #4
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	9103      	str	r1, [sp, #12]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	bfbb      	ittet	lt
 80078a4:	425b      	neglt	r3, r3
 80078a6:	f042 0202 	orrlt.w	r2, r2, #2
 80078aa:	9307      	strge	r3, [sp, #28]
 80078ac:	9307      	strlt	r3, [sp, #28]
 80078ae:	bfb8      	it	lt
 80078b0:	9204      	strlt	r2, [sp, #16]
 80078b2:	7823      	ldrb	r3, [r4, #0]
 80078b4:	2b2e      	cmp	r3, #46	; 0x2e
 80078b6:	d10c      	bne.n	80078d2 <_vfiprintf_r+0x15a>
 80078b8:	7863      	ldrb	r3, [r4, #1]
 80078ba:	2b2a      	cmp	r3, #42	; 0x2a
 80078bc:	d134      	bne.n	8007928 <_vfiprintf_r+0x1b0>
 80078be:	9b03      	ldr	r3, [sp, #12]
 80078c0:	1d1a      	adds	r2, r3, #4
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	9203      	str	r2, [sp, #12]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	bfb8      	it	lt
 80078ca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80078ce:	3402      	adds	r4, #2
 80078d0:	9305      	str	r3, [sp, #20]
 80078d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80079a8 <_vfiprintf_r+0x230>
 80078d6:	7821      	ldrb	r1, [r4, #0]
 80078d8:	2203      	movs	r2, #3
 80078da:	4650      	mov	r0, sl
 80078dc:	f7f8 fc88 	bl	80001f0 <memchr>
 80078e0:	b138      	cbz	r0, 80078f2 <_vfiprintf_r+0x17a>
 80078e2:	9b04      	ldr	r3, [sp, #16]
 80078e4:	eba0 000a 	sub.w	r0, r0, sl
 80078e8:	2240      	movs	r2, #64	; 0x40
 80078ea:	4082      	lsls	r2, r0
 80078ec:	4313      	orrs	r3, r2
 80078ee:	3401      	adds	r4, #1
 80078f0:	9304      	str	r3, [sp, #16]
 80078f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078f6:	4829      	ldr	r0, [pc, #164]	; (800799c <_vfiprintf_r+0x224>)
 80078f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078fc:	2206      	movs	r2, #6
 80078fe:	f7f8 fc77 	bl	80001f0 <memchr>
 8007902:	2800      	cmp	r0, #0
 8007904:	d03f      	beq.n	8007986 <_vfiprintf_r+0x20e>
 8007906:	4b26      	ldr	r3, [pc, #152]	; (80079a0 <_vfiprintf_r+0x228>)
 8007908:	bb1b      	cbnz	r3, 8007952 <_vfiprintf_r+0x1da>
 800790a:	9b03      	ldr	r3, [sp, #12]
 800790c:	3307      	adds	r3, #7
 800790e:	f023 0307 	bic.w	r3, r3, #7
 8007912:	3308      	adds	r3, #8
 8007914:	9303      	str	r3, [sp, #12]
 8007916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007918:	443b      	add	r3, r7
 800791a:	9309      	str	r3, [sp, #36]	; 0x24
 800791c:	e768      	b.n	80077f0 <_vfiprintf_r+0x78>
 800791e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007922:	460c      	mov	r4, r1
 8007924:	2001      	movs	r0, #1
 8007926:	e7a6      	b.n	8007876 <_vfiprintf_r+0xfe>
 8007928:	2300      	movs	r3, #0
 800792a:	3401      	adds	r4, #1
 800792c:	9305      	str	r3, [sp, #20]
 800792e:	4619      	mov	r1, r3
 8007930:	f04f 0c0a 	mov.w	ip, #10
 8007934:	4620      	mov	r0, r4
 8007936:	f810 2b01 	ldrb.w	r2, [r0], #1
 800793a:	3a30      	subs	r2, #48	; 0x30
 800793c:	2a09      	cmp	r2, #9
 800793e:	d903      	bls.n	8007948 <_vfiprintf_r+0x1d0>
 8007940:	2b00      	cmp	r3, #0
 8007942:	d0c6      	beq.n	80078d2 <_vfiprintf_r+0x15a>
 8007944:	9105      	str	r1, [sp, #20]
 8007946:	e7c4      	b.n	80078d2 <_vfiprintf_r+0x15a>
 8007948:	fb0c 2101 	mla	r1, ip, r1, r2
 800794c:	4604      	mov	r4, r0
 800794e:	2301      	movs	r3, #1
 8007950:	e7f0      	b.n	8007934 <_vfiprintf_r+0x1bc>
 8007952:	ab03      	add	r3, sp, #12
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	462a      	mov	r2, r5
 8007958:	4b12      	ldr	r3, [pc, #72]	; (80079a4 <_vfiprintf_r+0x22c>)
 800795a:	a904      	add	r1, sp, #16
 800795c:	4630      	mov	r0, r6
 800795e:	f7fd fc9b 	bl	8005298 <_printf_float>
 8007962:	4607      	mov	r7, r0
 8007964:	1c78      	adds	r0, r7, #1
 8007966:	d1d6      	bne.n	8007916 <_vfiprintf_r+0x19e>
 8007968:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800796a:	07d9      	lsls	r1, r3, #31
 800796c:	d405      	bmi.n	800797a <_vfiprintf_r+0x202>
 800796e:	89ab      	ldrh	r3, [r5, #12]
 8007970:	059a      	lsls	r2, r3, #22
 8007972:	d402      	bmi.n	800797a <_vfiprintf_r+0x202>
 8007974:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007976:	f7fe fb2b 	bl	8005fd0 <__retarget_lock_release_recursive>
 800797a:	89ab      	ldrh	r3, [r5, #12]
 800797c:	065b      	lsls	r3, r3, #25
 800797e:	f53f af1d 	bmi.w	80077bc <_vfiprintf_r+0x44>
 8007982:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007984:	e71c      	b.n	80077c0 <_vfiprintf_r+0x48>
 8007986:	ab03      	add	r3, sp, #12
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	462a      	mov	r2, r5
 800798c:	4b05      	ldr	r3, [pc, #20]	; (80079a4 <_vfiprintf_r+0x22c>)
 800798e:	a904      	add	r1, sp, #16
 8007990:	4630      	mov	r0, r6
 8007992:	f7fd ff25 	bl	80057e0 <_printf_i>
 8007996:	e7e4      	b.n	8007962 <_vfiprintf_r+0x1ea>
 8007998:	0800ae64 	.word	0x0800ae64
 800799c:	0800ae6e 	.word	0x0800ae6e
 80079a0:	08005299 	.word	0x08005299
 80079a4:	08007753 	.word	0x08007753
 80079a8:	0800ae6a 	.word	0x0800ae6a

080079ac <__sflush_r>:
 80079ac:	898a      	ldrh	r2, [r1, #12]
 80079ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079b2:	4605      	mov	r5, r0
 80079b4:	0710      	lsls	r0, r2, #28
 80079b6:	460c      	mov	r4, r1
 80079b8:	d458      	bmi.n	8007a6c <__sflush_r+0xc0>
 80079ba:	684b      	ldr	r3, [r1, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	dc05      	bgt.n	80079cc <__sflush_r+0x20>
 80079c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	dc02      	bgt.n	80079cc <__sflush_r+0x20>
 80079c6:	2000      	movs	r0, #0
 80079c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079ce:	2e00      	cmp	r6, #0
 80079d0:	d0f9      	beq.n	80079c6 <__sflush_r+0x1a>
 80079d2:	2300      	movs	r3, #0
 80079d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079d8:	682f      	ldr	r7, [r5, #0]
 80079da:	6a21      	ldr	r1, [r4, #32]
 80079dc:	602b      	str	r3, [r5, #0]
 80079de:	d032      	beq.n	8007a46 <__sflush_r+0x9a>
 80079e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079e2:	89a3      	ldrh	r3, [r4, #12]
 80079e4:	075a      	lsls	r2, r3, #29
 80079e6:	d505      	bpl.n	80079f4 <__sflush_r+0x48>
 80079e8:	6863      	ldr	r3, [r4, #4]
 80079ea:	1ac0      	subs	r0, r0, r3
 80079ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079ee:	b10b      	cbz	r3, 80079f4 <__sflush_r+0x48>
 80079f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079f2:	1ac0      	subs	r0, r0, r3
 80079f4:	2300      	movs	r3, #0
 80079f6:	4602      	mov	r2, r0
 80079f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079fa:	6a21      	ldr	r1, [r4, #32]
 80079fc:	4628      	mov	r0, r5
 80079fe:	47b0      	blx	r6
 8007a00:	1c43      	adds	r3, r0, #1
 8007a02:	89a3      	ldrh	r3, [r4, #12]
 8007a04:	d106      	bne.n	8007a14 <__sflush_r+0x68>
 8007a06:	6829      	ldr	r1, [r5, #0]
 8007a08:	291d      	cmp	r1, #29
 8007a0a:	d82b      	bhi.n	8007a64 <__sflush_r+0xb8>
 8007a0c:	4a29      	ldr	r2, [pc, #164]	; (8007ab4 <__sflush_r+0x108>)
 8007a0e:	410a      	asrs	r2, r1
 8007a10:	07d6      	lsls	r6, r2, #31
 8007a12:	d427      	bmi.n	8007a64 <__sflush_r+0xb8>
 8007a14:	2200      	movs	r2, #0
 8007a16:	6062      	str	r2, [r4, #4]
 8007a18:	04d9      	lsls	r1, r3, #19
 8007a1a:	6922      	ldr	r2, [r4, #16]
 8007a1c:	6022      	str	r2, [r4, #0]
 8007a1e:	d504      	bpl.n	8007a2a <__sflush_r+0x7e>
 8007a20:	1c42      	adds	r2, r0, #1
 8007a22:	d101      	bne.n	8007a28 <__sflush_r+0x7c>
 8007a24:	682b      	ldr	r3, [r5, #0]
 8007a26:	b903      	cbnz	r3, 8007a2a <__sflush_r+0x7e>
 8007a28:	6560      	str	r0, [r4, #84]	; 0x54
 8007a2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a2c:	602f      	str	r7, [r5, #0]
 8007a2e:	2900      	cmp	r1, #0
 8007a30:	d0c9      	beq.n	80079c6 <__sflush_r+0x1a>
 8007a32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a36:	4299      	cmp	r1, r3
 8007a38:	d002      	beq.n	8007a40 <__sflush_r+0x94>
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	f7ff f952 	bl	8006ce4 <_free_r>
 8007a40:	2000      	movs	r0, #0
 8007a42:	6360      	str	r0, [r4, #52]	; 0x34
 8007a44:	e7c0      	b.n	80079c8 <__sflush_r+0x1c>
 8007a46:	2301      	movs	r3, #1
 8007a48:	4628      	mov	r0, r5
 8007a4a:	47b0      	blx	r6
 8007a4c:	1c41      	adds	r1, r0, #1
 8007a4e:	d1c8      	bne.n	80079e2 <__sflush_r+0x36>
 8007a50:	682b      	ldr	r3, [r5, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d0c5      	beq.n	80079e2 <__sflush_r+0x36>
 8007a56:	2b1d      	cmp	r3, #29
 8007a58:	d001      	beq.n	8007a5e <__sflush_r+0xb2>
 8007a5a:	2b16      	cmp	r3, #22
 8007a5c:	d101      	bne.n	8007a62 <__sflush_r+0xb6>
 8007a5e:	602f      	str	r7, [r5, #0]
 8007a60:	e7b1      	b.n	80079c6 <__sflush_r+0x1a>
 8007a62:	89a3      	ldrh	r3, [r4, #12]
 8007a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a68:	81a3      	strh	r3, [r4, #12]
 8007a6a:	e7ad      	b.n	80079c8 <__sflush_r+0x1c>
 8007a6c:	690f      	ldr	r7, [r1, #16]
 8007a6e:	2f00      	cmp	r7, #0
 8007a70:	d0a9      	beq.n	80079c6 <__sflush_r+0x1a>
 8007a72:	0793      	lsls	r3, r2, #30
 8007a74:	680e      	ldr	r6, [r1, #0]
 8007a76:	bf08      	it	eq
 8007a78:	694b      	ldreq	r3, [r1, #20]
 8007a7a:	600f      	str	r7, [r1, #0]
 8007a7c:	bf18      	it	ne
 8007a7e:	2300      	movne	r3, #0
 8007a80:	eba6 0807 	sub.w	r8, r6, r7
 8007a84:	608b      	str	r3, [r1, #8]
 8007a86:	f1b8 0f00 	cmp.w	r8, #0
 8007a8a:	dd9c      	ble.n	80079c6 <__sflush_r+0x1a>
 8007a8c:	6a21      	ldr	r1, [r4, #32]
 8007a8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a90:	4643      	mov	r3, r8
 8007a92:	463a      	mov	r2, r7
 8007a94:	4628      	mov	r0, r5
 8007a96:	47b0      	blx	r6
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	dc06      	bgt.n	8007aaa <__sflush_r+0xfe>
 8007a9c:	89a3      	ldrh	r3, [r4, #12]
 8007a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aa2:	81a3      	strh	r3, [r4, #12]
 8007aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007aa8:	e78e      	b.n	80079c8 <__sflush_r+0x1c>
 8007aaa:	4407      	add	r7, r0
 8007aac:	eba8 0800 	sub.w	r8, r8, r0
 8007ab0:	e7e9      	b.n	8007a86 <__sflush_r+0xda>
 8007ab2:	bf00      	nop
 8007ab4:	dfbffffe 	.word	0xdfbffffe

08007ab8 <_fflush_r>:
 8007ab8:	b538      	push	{r3, r4, r5, lr}
 8007aba:	690b      	ldr	r3, [r1, #16]
 8007abc:	4605      	mov	r5, r0
 8007abe:	460c      	mov	r4, r1
 8007ac0:	b913      	cbnz	r3, 8007ac8 <_fflush_r+0x10>
 8007ac2:	2500      	movs	r5, #0
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	bd38      	pop	{r3, r4, r5, pc}
 8007ac8:	b118      	cbz	r0, 8007ad2 <_fflush_r+0x1a>
 8007aca:	6a03      	ldr	r3, [r0, #32]
 8007acc:	b90b      	cbnz	r3, 8007ad2 <_fflush_r+0x1a>
 8007ace:	f7fe f835 	bl	8005b3c <__sinit>
 8007ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d0f3      	beq.n	8007ac2 <_fflush_r+0xa>
 8007ada:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007adc:	07d0      	lsls	r0, r2, #31
 8007ade:	d404      	bmi.n	8007aea <_fflush_r+0x32>
 8007ae0:	0599      	lsls	r1, r3, #22
 8007ae2:	d402      	bmi.n	8007aea <_fflush_r+0x32>
 8007ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ae6:	f7fe fa72 	bl	8005fce <__retarget_lock_acquire_recursive>
 8007aea:	4628      	mov	r0, r5
 8007aec:	4621      	mov	r1, r4
 8007aee:	f7ff ff5d 	bl	80079ac <__sflush_r>
 8007af2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007af4:	07da      	lsls	r2, r3, #31
 8007af6:	4605      	mov	r5, r0
 8007af8:	d4e4      	bmi.n	8007ac4 <_fflush_r+0xc>
 8007afa:	89a3      	ldrh	r3, [r4, #12]
 8007afc:	059b      	lsls	r3, r3, #22
 8007afe:	d4e1      	bmi.n	8007ac4 <_fflush_r+0xc>
 8007b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b02:	f7fe fa65 	bl	8005fd0 <__retarget_lock_release_recursive>
 8007b06:	e7dd      	b.n	8007ac4 <_fflush_r+0xc>

08007b08 <__swhatbuf_r>:
 8007b08:	b570      	push	{r4, r5, r6, lr}
 8007b0a:	460c      	mov	r4, r1
 8007b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b10:	2900      	cmp	r1, #0
 8007b12:	b096      	sub	sp, #88	; 0x58
 8007b14:	4615      	mov	r5, r2
 8007b16:	461e      	mov	r6, r3
 8007b18:	da0d      	bge.n	8007b36 <__swhatbuf_r+0x2e>
 8007b1a:	89a3      	ldrh	r3, [r4, #12]
 8007b1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007b20:	f04f 0100 	mov.w	r1, #0
 8007b24:	bf0c      	ite	eq
 8007b26:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007b2a:	2340      	movne	r3, #64	; 0x40
 8007b2c:	2000      	movs	r0, #0
 8007b2e:	6031      	str	r1, [r6, #0]
 8007b30:	602b      	str	r3, [r5, #0]
 8007b32:	b016      	add	sp, #88	; 0x58
 8007b34:	bd70      	pop	{r4, r5, r6, pc}
 8007b36:	466a      	mov	r2, sp
 8007b38:	f000 f862 	bl	8007c00 <_fstat_r>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	dbec      	blt.n	8007b1a <__swhatbuf_r+0x12>
 8007b40:	9901      	ldr	r1, [sp, #4]
 8007b42:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007b46:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007b4a:	4259      	negs	r1, r3
 8007b4c:	4159      	adcs	r1, r3
 8007b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b52:	e7eb      	b.n	8007b2c <__swhatbuf_r+0x24>

08007b54 <__smakebuf_r>:
 8007b54:	898b      	ldrh	r3, [r1, #12]
 8007b56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b58:	079d      	lsls	r5, r3, #30
 8007b5a:	4606      	mov	r6, r0
 8007b5c:	460c      	mov	r4, r1
 8007b5e:	d507      	bpl.n	8007b70 <__smakebuf_r+0x1c>
 8007b60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b64:	6023      	str	r3, [r4, #0]
 8007b66:	6123      	str	r3, [r4, #16]
 8007b68:	2301      	movs	r3, #1
 8007b6a:	6163      	str	r3, [r4, #20]
 8007b6c:	b002      	add	sp, #8
 8007b6e:	bd70      	pop	{r4, r5, r6, pc}
 8007b70:	ab01      	add	r3, sp, #4
 8007b72:	466a      	mov	r2, sp
 8007b74:	f7ff ffc8 	bl	8007b08 <__swhatbuf_r>
 8007b78:	9900      	ldr	r1, [sp, #0]
 8007b7a:	4605      	mov	r5, r0
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	f7fd f9d3 	bl	8004f28 <_malloc_r>
 8007b82:	b948      	cbnz	r0, 8007b98 <__smakebuf_r+0x44>
 8007b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b88:	059a      	lsls	r2, r3, #22
 8007b8a:	d4ef      	bmi.n	8007b6c <__smakebuf_r+0x18>
 8007b8c:	f023 0303 	bic.w	r3, r3, #3
 8007b90:	f043 0302 	orr.w	r3, r3, #2
 8007b94:	81a3      	strh	r3, [r4, #12]
 8007b96:	e7e3      	b.n	8007b60 <__smakebuf_r+0xc>
 8007b98:	89a3      	ldrh	r3, [r4, #12]
 8007b9a:	6020      	str	r0, [r4, #0]
 8007b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba0:	81a3      	strh	r3, [r4, #12]
 8007ba2:	9b00      	ldr	r3, [sp, #0]
 8007ba4:	6163      	str	r3, [r4, #20]
 8007ba6:	9b01      	ldr	r3, [sp, #4]
 8007ba8:	6120      	str	r0, [r4, #16]
 8007baa:	b15b      	cbz	r3, 8007bc4 <__smakebuf_r+0x70>
 8007bac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	f000 f837 	bl	8007c24 <_isatty_r>
 8007bb6:	b128      	cbz	r0, 8007bc4 <__smakebuf_r+0x70>
 8007bb8:	89a3      	ldrh	r3, [r4, #12]
 8007bba:	f023 0303 	bic.w	r3, r3, #3
 8007bbe:	f043 0301 	orr.w	r3, r3, #1
 8007bc2:	81a3      	strh	r3, [r4, #12]
 8007bc4:	89a3      	ldrh	r3, [r4, #12]
 8007bc6:	431d      	orrs	r5, r3
 8007bc8:	81a5      	strh	r5, [r4, #12]
 8007bca:	e7cf      	b.n	8007b6c <__smakebuf_r+0x18>

08007bcc <memmove>:
 8007bcc:	4288      	cmp	r0, r1
 8007bce:	b510      	push	{r4, lr}
 8007bd0:	eb01 0402 	add.w	r4, r1, r2
 8007bd4:	d902      	bls.n	8007bdc <memmove+0x10>
 8007bd6:	4284      	cmp	r4, r0
 8007bd8:	4623      	mov	r3, r4
 8007bda:	d807      	bhi.n	8007bec <memmove+0x20>
 8007bdc:	1e43      	subs	r3, r0, #1
 8007bde:	42a1      	cmp	r1, r4
 8007be0:	d008      	beq.n	8007bf4 <memmove+0x28>
 8007be2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007be6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bea:	e7f8      	b.n	8007bde <memmove+0x12>
 8007bec:	4402      	add	r2, r0
 8007bee:	4601      	mov	r1, r0
 8007bf0:	428a      	cmp	r2, r1
 8007bf2:	d100      	bne.n	8007bf6 <memmove+0x2a>
 8007bf4:	bd10      	pop	{r4, pc}
 8007bf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bfe:	e7f7      	b.n	8007bf0 <memmove+0x24>

08007c00 <_fstat_r>:
 8007c00:	b538      	push	{r3, r4, r5, lr}
 8007c02:	4d07      	ldr	r5, [pc, #28]	; (8007c20 <_fstat_r+0x20>)
 8007c04:	2300      	movs	r3, #0
 8007c06:	4604      	mov	r4, r0
 8007c08:	4608      	mov	r0, r1
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	602b      	str	r3, [r5, #0]
 8007c0e:	f7fa f87a 	bl	8001d06 <_fstat>
 8007c12:	1c43      	adds	r3, r0, #1
 8007c14:	d102      	bne.n	8007c1c <_fstat_r+0x1c>
 8007c16:	682b      	ldr	r3, [r5, #0]
 8007c18:	b103      	cbz	r3, 8007c1c <_fstat_r+0x1c>
 8007c1a:	6023      	str	r3, [r4, #0]
 8007c1c:	bd38      	pop	{r3, r4, r5, pc}
 8007c1e:	bf00      	nop
 8007c20:	200004d4 	.word	0x200004d4

08007c24 <_isatty_r>:
 8007c24:	b538      	push	{r3, r4, r5, lr}
 8007c26:	4d06      	ldr	r5, [pc, #24]	; (8007c40 <_isatty_r+0x1c>)
 8007c28:	2300      	movs	r3, #0
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	4608      	mov	r0, r1
 8007c2e:	602b      	str	r3, [r5, #0]
 8007c30:	f7fa f879 	bl	8001d26 <_isatty>
 8007c34:	1c43      	adds	r3, r0, #1
 8007c36:	d102      	bne.n	8007c3e <_isatty_r+0x1a>
 8007c38:	682b      	ldr	r3, [r5, #0]
 8007c3a:	b103      	cbz	r3, 8007c3e <_isatty_r+0x1a>
 8007c3c:	6023      	str	r3, [r4, #0]
 8007c3e:	bd38      	pop	{r3, r4, r5, pc}
 8007c40:	200004d4 	.word	0x200004d4

08007c44 <__assert_func>:
 8007c44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c46:	4614      	mov	r4, r2
 8007c48:	461a      	mov	r2, r3
 8007c4a:	4b09      	ldr	r3, [pc, #36]	; (8007c70 <__assert_func+0x2c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4605      	mov	r5, r0
 8007c50:	68d8      	ldr	r0, [r3, #12]
 8007c52:	b14c      	cbz	r4, 8007c68 <__assert_func+0x24>
 8007c54:	4b07      	ldr	r3, [pc, #28]	; (8007c74 <__assert_func+0x30>)
 8007c56:	9100      	str	r1, [sp, #0]
 8007c58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c5c:	4906      	ldr	r1, [pc, #24]	; (8007c78 <__assert_func+0x34>)
 8007c5e:	462b      	mov	r3, r5
 8007c60:	f000 f872 	bl	8007d48 <fiprintf>
 8007c64:	f000 f882 	bl	8007d6c <abort>
 8007c68:	4b04      	ldr	r3, [pc, #16]	; (8007c7c <__assert_func+0x38>)
 8007c6a:	461c      	mov	r4, r3
 8007c6c:	e7f3      	b.n	8007c56 <__assert_func+0x12>
 8007c6e:	bf00      	nop
 8007c70:	20000074 	.word	0x20000074
 8007c74:	0800ae7f 	.word	0x0800ae7f
 8007c78:	0800ae8c 	.word	0x0800ae8c
 8007c7c:	0800aeba 	.word	0x0800aeba

08007c80 <_calloc_r>:
 8007c80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c82:	fba1 2402 	umull	r2, r4, r1, r2
 8007c86:	b94c      	cbnz	r4, 8007c9c <_calloc_r+0x1c>
 8007c88:	4611      	mov	r1, r2
 8007c8a:	9201      	str	r2, [sp, #4]
 8007c8c:	f7fd f94c 	bl	8004f28 <_malloc_r>
 8007c90:	9a01      	ldr	r2, [sp, #4]
 8007c92:	4605      	mov	r5, r0
 8007c94:	b930      	cbnz	r0, 8007ca4 <_calloc_r+0x24>
 8007c96:	4628      	mov	r0, r5
 8007c98:	b003      	add	sp, #12
 8007c9a:	bd30      	pop	{r4, r5, pc}
 8007c9c:	220c      	movs	r2, #12
 8007c9e:	6002      	str	r2, [r0, #0]
 8007ca0:	2500      	movs	r5, #0
 8007ca2:	e7f8      	b.n	8007c96 <_calloc_r+0x16>
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	f7fe f8e5 	bl	8005e74 <memset>
 8007caa:	e7f4      	b.n	8007c96 <_calloc_r+0x16>

08007cac <__ascii_mbtowc>:
 8007cac:	b082      	sub	sp, #8
 8007cae:	b901      	cbnz	r1, 8007cb2 <__ascii_mbtowc+0x6>
 8007cb0:	a901      	add	r1, sp, #4
 8007cb2:	b142      	cbz	r2, 8007cc6 <__ascii_mbtowc+0x1a>
 8007cb4:	b14b      	cbz	r3, 8007cca <__ascii_mbtowc+0x1e>
 8007cb6:	7813      	ldrb	r3, [r2, #0]
 8007cb8:	600b      	str	r3, [r1, #0]
 8007cba:	7812      	ldrb	r2, [r2, #0]
 8007cbc:	1e10      	subs	r0, r2, #0
 8007cbe:	bf18      	it	ne
 8007cc0:	2001      	movne	r0, #1
 8007cc2:	b002      	add	sp, #8
 8007cc4:	4770      	bx	lr
 8007cc6:	4610      	mov	r0, r2
 8007cc8:	e7fb      	b.n	8007cc2 <__ascii_mbtowc+0x16>
 8007cca:	f06f 0001 	mvn.w	r0, #1
 8007cce:	e7f8      	b.n	8007cc2 <__ascii_mbtowc+0x16>

08007cd0 <_realloc_r>:
 8007cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cd4:	4680      	mov	r8, r0
 8007cd6:	4614      	mov	r4, r2
 8007cd8:	460e      	mov	r6, r1
 8007cda:	b921      	cbnz	r1, 8007ce6 <_realloc_r+0x16>
 8007cdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	f7fd b921 	b.w	8004f28 <_malloc_r>
 8007ce6:	b92a      	cbnz	r2, 8007cf4 <_realloc_r+0x24>
 8007ce8:	f7fe fffc 	bl	8006ce4 <_free_r>
 8007cec:	4625      	mov	r5, r4
 8007cee:	4628      	mov	r0, r5
 8007cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cf4:	f000 f841 	bl	8007d7a <_malloc_usable_size_r>
 8007cf8:	4284      	cmp	r4, r0
 8007cfa:	4607      	mov	r7, r0
 8007cfc:	d802      	bhi.n	8007d04 <_realloc_r+0x34>
 8007cfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d02:	d812      	bhi.n	8007d2a <_realloc_r+0x5a>
 8007d04:	4621      	mov	r1, r4
 8007d06:	4640      	mov	r0, r8
 8007d08:	f7fd f90e 	bl	8004f28 <_malloc_r>
 8007d0c:	4605      	mov	r5, r0
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	d0ed      	beq.n	8007cee <_realloc_r+0x1e>
 8007d12:	42bc      	cmp	r4, r7
 8007d14:	4622      	mov	r2, r4
 8007d16:	4631      	mov	r1, r6
 8007d18:	bf28      	it	cs
 8007d1a:	463a      	movcs	r2, r7
 8007d1c:	f7fe f959 	bl	8005fd2 <memcpy>
 8007d20:	4631      	mov	r1, r6
 8007d22:	4640      	mov	r0, r8
 8007d24:	f7fe ffde 	bl	8006ce4 <_free_r>
 8007d28:	e7e1      	b.n	8007cee <_realloc_r+0x1e>
 8007d2a:	4635      	mov	r5, r6
 8007d2c:	e7df      	b.n	8007cee <_realloc_r+0x1e>

08007d2e <__ascii_wctomb>:
 8007d2e:	b149      	cbz	r1, 8007d44 <__ascii_wctomb+0x16>
 8007d30:	2aff      	cmp	r2, #255	; 0xff
 8007d32:	bf85      	ittet	hi
 8007d34:	238a      	movhi	r3, #138	; 0x8a
 8007d36:	6003      	strhi	r3, [r0, #0]
 8007d38:	700a      	strbls	r2, [r1, #0]
 8007d3a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007d3e:	bf98      	it	ls
 8007d40:	2001      	movls	r0, #1
 8007d42:	4770      	bx	lr
 8007d44:	4608      	mov	r0, r1
 8007d46:	4770      	bx	lr

08007d48 <fiprintf>:
 8007d48:	b40e      	push	{r1, r2, r3}
 8007d4a:	b503      	push	{r0, r1, lr}
 8007d4c:	4601      	mov	r1, r0
 8007d4e:	ab03      	add	r3, sp, #12
 8007d50:	4805      	ldr	r0, [pc, #20]	; (8007d68 <fiprintf+0x20>)
 8007d52:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d56:	6800      	ldr	r0, [r0, #0]
 8007d58:	9301      	str	r3, [sp, #4]
 8007d5a:	f7ff fd0d 	bl	8007778 <_vfiprintf_r>
 8007d5e:	b002      	add	sp, #8
 8007d60:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d64:	b003      	add	sp, #12
 8007d66:	4770      	bx	lr
 8007d68:	20000074 	.word	0x20000074

08007d6c <abort>:
 8007d6c:	b508      	push	{r3, lr}
 8007d6e:	2006      	movs	r0, #6
 8007d70:	f000 f834 	bl	8007ddc <raise>
 8007d74:	2001      	movs	r0, #1
 8007d76:	f7f9 ff77 	bl	8001c68 <_exit>

08007d7a <_malloc_usable_size_r>:
 8007d7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d7e:	1f18      	subs	r0, r3, #4
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	bfbc      	itt	lt
 8007d84:	580b      	ldrlt	r3, [r1, r0]
 8007d86:	18c0      	addlt	r0, r0, r3
 8007d88:	4770      	bx	lr

08007d8a <_raise_r>:
 8007d8a:	291f      	cmp	r1, #31
 8007d8c:	b538      	push	{r3, r4, r5, lr}
 8007d8e:	4604      	mov	r4, r0
 8007d90:	460d      	mov	r5, r1
 8007d92:	d904      	bls.n	8007d9e <_raise_r+0x14>
 8007d94:	2316      	movs	r3, #22
 8007d96:	6003      	str	r3, [r0, #0]
 8007d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d9c:	bd38      	pop	{r3, r4, r5, pc}
 8007d9e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007da0:	b112      	cbz	r2, 8007da8 <_raise_r+0x1e>
 8007da2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007da6:	b94b      	cbnz	r3, 8007dbc <_raise_r+0x32>
 8007da8:	4620      	mov	r0, r4
 8007daa:	f000 f831 	bl	8007e10 <_getpid_r>
 8007dae:	462a      	mov	r2, r5
 8007db0:	4601      	mov	r1, r0
 8007db2:	4620      	mov	r0, r4
 8007db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007db8:	f000 b818 	b.w	8007dec <_kill_r>
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d00a      	beq.n	8007dd6 <_raise_r+0x4c>
 8007dc0:	1c59      	adds	r1, r3, #1
 8007dc2:	d103      	bne.n	8007dcc <_raise_r+0x42>
 8007dc4:	2316      	movs	r3, #22
 8007dc6:	6003      	str	r3, [r0, #0]
 8007dc8:	2001      	movs	r0, #1
 8007dca:	e7e7      	b.n	8007d9c <_raise_r+0x12>
 8007dcc:	2400      	movs	r4, #0
 8007dce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	4798      	blx	r3
 8007dd6:	2000      	movs	r0, #0
 8007dd8:	e7e0      	b.n	8007d9c <_raise_r+0x12>
	...

08007ddc <raise>:
 8007ddc:	4b02      	ldr	r3, [pc, #8]	; (8007de8 <raise+0xc>)
 8007dde:	4601      	mov	r1, r0
 8007de0:	6818      	ldr	r0, [r3, #0]
 8007de2:	f7ff bfd2 	b.w	8007d8a <_raise_r>
 8007de6:	bf00      	nop
 8007de8:	20000074 	.word	0x20000074

08007dec <_kill_r>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	4d07      	ldr	r5, [pc, #28]	; (8007e0c <_kill_r+0x20>)
 8007df0:	2300      	movs	r3, #0
 8007df2:	4604      	mov	r4, r0
 8007df4:	4608      	mov	r0, r1
 8007df6:	4611      	mov	r1, r2
 8007df8:	602b      	str	r3, [r5, #0]
 8007dfa:	f7f9 ff25 	bl	8001c48 <_kill>
 8007dfe:	1c43      	adds	r3, r0, #1
 8007e00:	d102      	bne.n	8007e08 <_kill_r+0x1c>
 8007e02:	682b      	ldr	r3, [r5, #0]
 8007e04:	b103      	cbz	r3, 8007e08 <_kill_r+0x1c>
 8007e06:	6023      	str	r3, [r4, #0]
 8007e08:	bd38      	pop	{r3, r4, r5, pc}
 8007e0a:	bf00      	nop
 8007e0c:	200004d4 	.word	0x200004d4

08007e10 <_getpid_r>:
 8007e10:	f7f9 bf12 	b.w	8001c38 <_getpid>

08007e14 <_init>:
 8007e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e16:	bf00      	nop
 8007e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e1a:	bc08      	pop	{r3}
 8007e1c:	469e      	mov	lr, r3
 8007e1e:	4770      	bx	lr

08007e20 <_fini>:
 8007e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e22:	bf00      	nop
 8007e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e26:	bc08      	pop	{r3}
 8007e28:	469e      	mov	lr, r3
 8007e2a:	4770      	bx	lr
